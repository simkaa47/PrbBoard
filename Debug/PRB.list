
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013db4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dd0  08013f44  08013f44  00023f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d14  08016d14  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08016d14  08016d14  00026d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d1c  08016d1c  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016d1c  08016d1c  00026d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016d20  08016d20  00026d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08016d24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030080  2**0
                  CONTENTS
 10 .bss          0000d38c  20000080  20000080  00030080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d40c  2000d40c  00030080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00045cf1  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008668  00000000  00000000  00075da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020f8  00000000  00000000  0007e410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f60  00000000  00000000  00080508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd5e  00000000  00000000  00082468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034fe5  00000000  00000000  000b01c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1b63  00000000  00000000  000e51ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d6d0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008e00  00000000  00000000  001d6d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013f2c 	.word	0x08013f2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08013f2c 	.word	0x08013f2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <Read_Inputs>:

extern Settings_Struct settings;
extern Meas_Data meas_data;

void Read_Inputs()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	meas_data.d_inputs.in0 	= settings.input_emulation_switches.in0  ? settings.input_emulation_values.in0 :  HAL_GPIO_ReadPin(DIN_0_GPIO_Port, DIN_0_Pin);
 800056c:	4b9f      	ldr	r3, [pc, #636]	; (80007ec <Read_Inputs+0x284>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d005      	beq.n	8000586 <Read_Inputs+0x1e>
 800057a:	4b9c      	ldr	r3, [pc, #624]	; (80007ec <Read_Inputs+0x284>)
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000582:	b2da      	uxtb	r2, r3
 8000584:	e008      	b.n	8000598 <Read_Inputs+0x30>
 8000586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058a:	4899      	ldr	r0, [pc, #612]	; (80007f0 <Read_Inputs+0x288>)
 800058c:	f003 f8ac 	bl	80036e8 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	4996      	ldr	r1, [pc, #600]	; (80007f4 <Read_Inputs+0x28c>)
 800059a:	780b      	ldrb	r3, [r1, #0]
 800059c:	f362 0300 	bfi	r3, r2, #0, #1
 80005a0:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in1 	= settings.input_emulation_switches.in1  ? settings.input_emulation_values.in1 :  HAL_GPIO_ReadPin(DIN_1_GPIO_Port, DIN_1_Pin);
 80005a2:	4b92      	ldr	r3, [pc, #584]	; (80007ec <Read_Inputs+0x284>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d005      	beq.n	80005bc <Read_Inputs+0x54>
 80005b0:	4b8e      	ldr	r3, [pc, #568]	; (80007ec <Read_Inputs+0x284>)
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	e008      	b.n	80005ce <Read_Inputs+0x66>
 80005bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c0:	488b      	ldr	r0, [pc, #556]	; (80007f0 <Read_Inputs+0x288>)
 80005c2:	f003 f891 	bl	80036e8 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4989      	ldr	r1, [pc, #548]	; (80007f4 <Read_Inputs+0x28c>)
 80005d0:	780b      	ldrb	r3, [r1, #0]
 80005d2:	f362 0341 	bfi	r3, r2, #1, #1
 80005d6:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in2 	= settings.input_emulation_switches.in2  ? settings.input_emulation_values.in2 :  HAL_GPIO_ReadPin(DIN_2_GPIO_Port, DIN_2_Pin);
 80005d8:	4b84      	ldr	r3, [pc, #528]	; (80007ec <Read_Inputs+0x284>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d005      	beq.n	80005f2 <Read_Inputs+0x8a>
 80005e6:	4b81      	ldr	r3, [pc, #516]	; (80007ec <Read_Inputs+0x284>)
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	e007      	b.n	8000602 <Read_Inputs+0x9a>
 80005f2:	2101      	movs	r1, #1
 80005f4:	4880      	ldr	r0, [pc, #512]	; (80007f8 <Read_Inputs+0x290>)
 80005f6:	f003 f877 	bl	80036e8 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	b2da      	uxtb	r2, r3
 8000602:	497c      	ldr	r1, [pc, #496]	; (80007f4 <Read_Inputs+0x28c>)
 8000604:	780b      	ldrb	r3, [r1, #0]
 8000606:	f362 0382 	bfi	r3, r2, #2, #1
 800060a:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in3 	= settings.input_emulation_switches.in3  ? settings.input_emulation_values.in3 :  HAL_GPIO_ReadPin(DIN_3_GPIO_Port, DIN_3_Pin);
 800060c:	4b77      	ldr	r3, [pc, #476]	; (80007ec <Read_Inputs+0x284>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d005      	beq.n	8000626 <Read_Inputs+0xbe>
 800061a:	4b74      	ldr	r3, [pc, #464]	; (80007ec <Read_Inputs+0x284>)
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	e007      	b.n	8000636 <Read_Inputs+0xce>
 8000626:	2102      	movs	r1, #2
 8000628:	4873      	ldr	r0, [pc, #460]	; (80007f8 <Read_Inputs+0x290>)
 800062a:	f003 f85d 	bl	80036e8 <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	b2da      	uxtb	r2, r3
 8000636:	496f      	ldr	r1, [pc, #444]	; (80007f4 <Read_Inputs+0x28c>)
 8000638:	780b      	ldrb	r3, [r1, #0]
 800063a:	f362 03c3 	bfi	r3, r2, #3, #1
 800063e:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in4 	= settings.input_emulation_switches.in4  ? settings.input_emulation_values.in4 :  HAL_GPIO_ReadPin(DIN_4_GPIO_Port, DIN_4_Pin);
 8000640:	4b6a      	ldr	r3, [pc, #424]	; (80007ec <Read_Inputs+0x284>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d005      	beq.n	800065a <Read_Inputs+0xf2>
 800064e:	4b67      	ldr	r3, [pc, #412]	; (80007ec <Read_Inputs+0x284>)
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	e007      	b.n	800066a <Read_Inputs+0x102>
 800065a:	2104      	movs	r1, #4
 800065c:	4866      	ldr	r0, [pc, #408]	; (80007f8 <Read_Inputs+0x290>)
 800065e:	f003 f843 	bl	80036e8 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4962      	ldr	r1, [pc, #392]	; (80007f4 <Read_Inputs+0x28c>)
 800066c:	780b      	ldrb	r3, [r1, #0]
 800066e:	f362 1304 	bfi	r3, r2, #4, #1
 8000672:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in5 	= settings.input_emulation_switches.in5  ? settings.input_emulation_values.in5 :  HAL_GPIO_ReadPin(DIN_5_GPIO_Port, DIN_5_Pin);
 8000674:	4b5d      	ldr	r3, [pc, #372]	; (80007ec <Read_Inputs+0x284>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f003 0320 	and.w	r3, r3, #32
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d005      	beq.n	800068e <Read_Inputs+0x126>
 8000682:	4b5a      	ldr	r3, [pc, #360]	; (80007ec <Read_Inputs+0x284>)
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800068a:	b2da      	uxtb	r2, r3
 800068c:	e007      	b.n	800069e <Read_Inputs+0x136>
 800068e:	2108      	movs	r1, #8
 8000690:	4859      	ldr	r0, [pc, #356]	; (80007f8 <Read_Inputs+0x290>)
 8000692:	f003 f829 	bl	80036e8 <HAL_GPIO_ReadPin>
 8000696:	4603      	mov	r3, r0
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4955      	ldr	r1, [pc, #340]	; (80007f4 <Read_Inputs+0x28c>)
 80006a0:	780b      	ldrb	r3, [r1, #0]
 80006a2:	f362 1345 	bfi	r3, r2, #5, #1
 80006a6:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in6 	= settings.input_emulation_switches.in6  ? settings.input_emulation_values.in6 :  HAL_GPIO_ReadPin(DIN_6_GPIO_Port, DIN_6_Pin);
 80006a8:	4b50      	ldr	r3, [pc, #320]	; (80007ec <Read_Inputs+0x284>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d005      	beq.n	80006c2 <Read_Inputs+0x15a>
 80006b6:	4b4d      	ldr	r3, [pc, #308]	; (80007ec <Read_Inputs+0x284>)
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	e007      	b.n	80006d2 <Read_Inputs+0x16a>
 80006c2:	2110      	movs	r1, #16
 80006c4:	484c      	ldr	r0, [pc, #304]	; (80007f8 <Read_Inputs+0x290>)
 80006c6:	f003 f80f 	bl	80036e8 <HAL_GPIO_ReadPin>
 80006ca:	4603      	mov	r3, r0
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4948      	ldr	r1, [pc, #288]	; (80007f4 <Read_Inputs+0x28c>)
 80006d4:	780b      	ldrb	r3, [r1, #0]
 80006d6:	f362 1386 	bfi	r3, r2, #6, #1
 80006da:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in7 	= settings.input_emulation_switches.in7  ? settings.input_emulation_values.in7 :  HAL_GPIO_ReadPin(DIN_7_GPIO_Port, DIN_7_Pin);
 80006dc:	4b43      	ldr	r3, [pc, #268]	; (80007ec <Read_Inputs+0x284>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d005      	beq.n	80006f6 <Read_Inputs+0x18e>
 80006ea:	4b40      	ldr	r3, [pc, #256]	; (80007ec <Read_Inputs+0x284>)
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	e007      	b.n	8000706 <Read_Inputs+0x19e>
 80006f6:	2120      	movs	r1, #32
 80006f8:	483f      	ldr	r0, [pc, #252]	; (80007f8 <Read_Inputs+0x290>)
 80006fa:	f002 fff5 	bl	80036e8 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	b2da      	uxtb	r2, r3
 8000706:	493b      	ldr	r1, [pc, #236]	; (80007f4 <Read_Inputs+0x28c>)
 8000708:	780b      	ldrb	r3, [r1, #0]
 800070a:	f362 13c7 	bfi	r3, r2, #7, #1
 800070e:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in8 	= settings.input_emulation_switches.in8  ? settings.input_emulation_values.in8 :  HAL_GPIO_ReadPin(DIN_8_GPIO_Port, DIN_8_Pin);
 8000710:	4b36      	ldr	r3, [pc, #216]	; (80007ec <Read_Inputs+0x284>)
 8000712:	785b      	ldrb	r3, [r3, #1]
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d005      	beq.n	800072a <Read_Inputs+0x1c2>
 800071e:	4b33      	ldr	r3, [pc, #204]	; (80007ec <Read_Inputs+0x284>)
 8000720:	795b      	ldrb	r3, [r3, #5]
 8000722:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000726:	b2da      	uxtb	r2, r3
 8000728:	e007      	b.n	800073a <Read_Inputs+0x1d2>
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	4832      	ldr	r0, [pc, #200]	; (80007f8 <Read_Inputs+0x290>)
 800072e:	f002 ffdb 	bl	80036e8 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	b2da      	uxtb	r2, r3
 800073a:	492e      	ldr	r1, [pc, #184]	; (80007f4 <Read_Inputs+0x28c>)
 800073c:	784b      	ldrb	r3, [r1, #1]
 800073e:	f362 0300 	bfi	r3, r2, #0, #1
 8000742:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in9 	= settings.input_emulation_switches.in9  ? settings.input_emulation_values.in9 :  HAL_GPIO_ReadPin(DIN_9_GPIO_Port, DIN_9_Pin);
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <Read_Inputs+0x284>)
 8000746:	785b      	ldrb	r3, [r3, #1]
 8000748:	f003 0302 	and.w	r3, r3, #2
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d005      	beq.n	800075e <Read_Inputs+0x1f6>
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <Read_Inputs+0x284>)
 8000754:	795b      	ldrb	r3, [r3, #5]
 8000756:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800075a:	b2da      	uxtb	r2, r3
 800075c:	e008      	b.n	8000770 <Read_Inputs+0x208>
 800075e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000762:	4826      	ldr	r0, [pc, #152]	; (80007fc <Read_Inputs+0x294>)
 8000764:	f002 ffc0 	bl	80036e8 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4920      	ldr	r1, [pc, #128]	; (80007f4 <Read_Inputs+0x28c>)
 8000772:	784b      	ldrb	r3, [r1, #1]
 8000774:	f362 0341 	bfi	r3, r2, #1, #1
 8000778:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in10 = settings.input_emulation_switches.in10 ? settings.input_emulation_values.in10 : HAL_GPIO_ReadPin(DIN_10_GPIO_Port, DIN_10_Pin);
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <Read_Inputs+0x284>)
 800077c:	785b      	ldrb	r3, [r3, #1]
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	d005      	beq.n	8000794 <Read_Inputs+0x22c>
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <Read_Inputs+0x284>)
 800078a:	795b      	ldrb	r3, [r3, #5]
 800078c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000790:	b2da      	uxtb	r2, r3
 8000792:	e008      	b.n	80007a6 <Read_Inputs+0x23e>
 8000794:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000798:	4818      	ldr	r0, [pc, #96]	; (80007fc <Read_Inputs+0x294>)
 800079a:	f002 ffa5 	bl	80036e8 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4913      	ldr	r1, [pc, #76]	; (80007f4 <Read_Inputs+0x28c>)
 80007a8:	784b      	ldrb	r3, [r1, #1]
 80007aa:	f362 0382 	bfi	r3, r2, #2, #1
 80007ae:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in11 = settings.input_emulation_switches.in11 ? settings.input_emulation_values.in11 : HAL_GPIO_ReadPin(DIN_11_GPIO_Port, DIN_11_Pin);
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <Read_Inputs+0x284>)
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d005      	beq.n	80007ca <Read_Inputs+0x262>
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <Read_Inputs+0x284>)
 80007c0:	795b      	ldrb	r3, [r3, #5]
 80007c2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	e008      	b.n	80007dc <Read_Inputs+0x274>
 80007ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ce:	480b      	ldr	r0, [pc, #44]	; (80007fc <Read_Inputs+0x294>)
 80007d0:	f002 ff8a 	bl	80036e8 <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4905      	ldr	r1, [pc, #20]	; (80007f4 <Read_Inputs+0x28c>)
 80007de:	784b      	ldrb	r3, [r1, #1]
 80007e0:	f362 03c3 	bfi	r3, r2, #3, #1
 80007e4:	704b      	strb	r3, [r1, #1]
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20006a78 	.word	0x20006a78
 80007f0:	40020400 	.word	0x40020400
 80007f4:	20006af0 	.word	0x20006af0
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40020800 	.word	0x40020800

08000800 <Write_Outputs>:

void Write_Outputs()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	meas_data.d_outputs.out0  = settings.output_emulation_switches.out0  ? settings.output_emulation_values.out0  :  0;
 8000804:	4bb4      	ldr	r3, [pc, #720]	; (8000ad8 <Write_Outputs+0x2d8>)
 8000806:	7a1b      	ldrb	r3, [r3, #8]
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2b00      	cmp	r3, #0
 8000810:	d005      	beq.n	800081e <Write_Outputs+0x1e>
 8000812:	4bb1      	ldr	r3, [pc, #708]	; (8000ad8 <Write_Outputs+0x2d8>)
 8000814:	7b1b      	ldrb	r3, [r3, #12]
 8000816:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800081a:	b2d9      	uxtb	r1, r3
 800081c:	e000      	b.n	8000820 <Write_Outputs+0x20>
 800081e:	2100      	movs	r1, #0
 8000820:	4aae      	ldr	r2, [pc, #696]	; (8000adc <Write_Outputs+0x2dc>)
 8000822:	7913      	ldrb	r3, [r2, #4]
 8000824:	f361 0300 	bfi	r3, r1, #0, #1
 8000828:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out1  = settings.output_emulation_switches.out1  ? settings.output_emulation_values.out1  :  0;
 800082a:	4bab      	ldr	r3, [pc, #684]	; (8000ad8 <Write_Outputs+0x2d8>)
 800082c:	7a1b      	ldrb	r3, [r3, #8]
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d005      	beq.n	8000844 <Write_Outputs+0x44>
 8000838:	4ba7      	ldr	r3, [pc, #668]	; (8000ad8 <Write_Outputs+0x2d8>)
 800083a:	7b1b      	ldrb	r3, [r3, #12]
 800083c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000840:	b2d9      	uxtb	r1, r3
 8000842:	e000      	b.n	8000846 <Write_Outputs+0x46>
 8000844:	2100      	movs	r1, #0
 8000846:	4aa5      	ldr	r2, [pc, #660]	; (8000adc <Write_Outputs+0x2dc>)
 8000848:	7913      	ldrb	r3, [r2, #4]
 800084a:	f361 0341 	bfi	r3, r1, #1, #1
 800084e:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out2  = settings.output_emulation_switches.out2  ? settings.output_emulation_values.out2  :  0;
 8000850:	4ba1      	ldr	r3, [pc, #644]	; (8000ad8 <Write_Outputs+0x2d8>)
 8000852:	7a1b      	ldrb	r3, [r3, #8]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d005      	beq.n	800086a <Write_Outputs+0x6a>
 800085e:	4b9e      	ldr	r3, [pc, #632]	; (8000ad8 <Write_Outputs+0x2d8>)
 8000860:	7b1b      	ldrb	r3, [r3, #12]
 8000862:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000866:	b2d9      	uxtb	r1, r3
 8000868:	e000      	b.n	800086c <Write_Outputs+0x6c>
 800086a:	2100      	movs	r1, #0
 800086c:	4a9b      	ldr	r2, [pc, #620]	; (8000adc <Write_Outputs+0x2dc>)
 800086e:	7913      	ldrb	r3, [r2, #4]
 8000870:	f361 0382 	bfi	r3, r1, #2, #1
 8000874:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out3  = settings.output_emulation_switches.out3  ? settings.output_emulation_values.out3  :  0;
 8000876:	4b98      	ldr	r3, [pc, #608]	; (8000ad8 <Write_Outputs+0x2d8>)
 8000878:	7a1b      	ldrb	r3, [r3, #8]
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d005      	beq.n	8000890 <Write_Outputs+0x90>
 8000884:	4b94      	ldr	r3, [pc, #592]	; (8000ad8 <Write_Outputs+0x2d8>)
 8000886:	7b1b      	ldrb	r3, [r3, #12]
 8000888:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800088c:	b2d9      	uxtb	r1, r3
 800088e:	e000      	b.n	8000892 <Write_Outputs+0x92>
 8000890:	2100      	movs	r1, #0
 8000892:	4a92      	ldr	r2, [pc, #584]	; (8000adc <Write_Outputs+0x2dc>)
 8000894:	7913      	ldrb	r3, [r2, #4]
 8000896:	f361 03c3 	bfi	r3, r1, #3, #1
 800089a:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out4  = settings.output_emulation_switches.out4  ? settings.output_emulation_values.out4  :  0;
 800089c:	4b8e      	ldr	r3, [pc, #568]	; (8000ad8 <Write_Outputs+0x2d8>)
 800089e:	7a1b      	ldrb	r3, [r3, #8]
 80008a0:	f003 0310 	and.w	r3, r3, #16
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d005      	beq.n	80008b6 <Write_Outputs+0xb6>
 80008aa:	4b8b      	ldr	r3, [pc, #556]	; (8000ad8 <Write_Outputs+0x2d8>)
 80008ac:	7b1b      	ldrb	r3, [r3, #12]
 80008ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80008b2:	b2d9      	uxtb	r1, r3
 80008b4:	e000      	b.n	80008b8 <Write_Outputs+0xb8>
 80008b6:	2100      	movs	r1, #0
 80008b8:	4a88      	ldr	r2, [pc, #544]	; (8000adc <Write_Outputs+0x2dc>)
 80008ba:	7913      	ldrb	r3, [r2, #4]
 80008bc:	f361 1304 	bfi	r3, r1, #4, #1
 80008c0:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out5  = settings.output_emulation_switches.out5  ? settings.output_emulation_values.out5  :  0;
 80008c2:	4b85      	ldr	r3, [pc, #532]	; (8000ad8 <Write_Outputs+0x2d8>)
 80008c4:	7a1b      	ldrb	r3, [r3, #8]
 80008c6:	f003 0320 	and.w	r3, r3, #32
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d005      	beq.n	80008dc <Write_Outputs+0xdc>
 80008d0:	4b81      	ldr	r3, [pc, #516]	; (8000ad8 <Write_Outputs+0x2d8>)
 80008d2:	7b1b      	ldrb	r3, [r3, #12]
 80008d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80008d8:	b2d9      	uxtb	r1, r3
 80008da:	e000      	b.n	80008de <Write_Outputs+0xde>
 80008dc:	2100      	movs	r1, #0
 80008de:	4a7f      	ldr	r2, [pc, #508]	; (8000adc <Write_Outputs+0x2dc>)
 80008e0:	7913      	ldrb	r3, [r2, #4]
 80008e2:	f361 1345 	bfi	r3, r1, #5, #1
 80008e6:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out6  = settings.output_emulation_switches.out6  ? settings.output_emulation_values.out6  :  0;
 80008e8:	4b7b      	ldr	r3, [pc, #492]	; (8000ad8 <Write_Outputs+0x2d8>)
 80008ea:	7a1b      	ldrb	r3, [r3, #8]
 80008ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d005      	beq.n	8000902 <Write_Outputs+0x102>
 80008f6:	4b78      	ldr	r3, [pc, #480]	; (8000ad8 <Write_Outputs+0x2d8>)
 80008f8:	7b1b      	ldrb	r3, [r3, #12]
 80008fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80008fe:	b2d9      	uxtb	r1, r3
 8000900:	e000      	b.n	8000904 <Write_Outputs+0x104>
 8000902:	2100      	movs	r1, #0
 8000904:	4a75      	ldr	r2, [pc, #468]	; (8000adc <Write_Outputs+0x2dc>)
 8000906:	7913      	ldrb	r3, [r2, #4]
 8000908:	f361 1386 	bfi	r3, r1, #6, #1
 800090c:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out7  = settings.output_emulation_switches.out7  ? settings.output_emulation_values.out7  :  0;
 800090e:	4b72      	ldr	r3, [pc, #456]	; (8000ad8 <Write_Outputs+0x2d8>)
 8000910:	7a1b      	ldrb	r3, [r3, #8]
 8000912:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d005      	beq.n	8000928 <Write_Outputs+0x128>
 800091c:	4b6e      	ldr	r3, [pc, #440]	; (8000ad8 <Write_Outputs+0x2d8>)
 800091e:	7b1b      	ldrb	r3, [r3, #12]
 8000920:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000924:	b2d9      	uxtb	r1, r3
 8000926:	e000      	b.n	800092a <Write_Outputs+0x12a>
 8000928:	2100      	movs	r1, #0
 800092a:	4a6c      	ldr	r2, [pc, #432]	; (8000adc <Write_Outputs+0x2dc>)
 800092c:	7913      	ldrb	r3, [r2, #4]
 800092e:	f361 13c7 	bfi	r3, r1, #7, #1
 8000932:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out8  = settings.output_emulation_switches.out8  ? settings.output_emulation_values.out8  :  0;
 8000934:	4b68      	ldr	r3, [pc, #416]	; (8000ad8 <Write_Outputs+0x2d8>)
 8000936:	7a5b      	ldrb	r3, [r3, #9]
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d005      	beq.n	800094e <Write_Outputs+0x14e>
 8000942:	4b65      	ldr	r3, [pc, #404]	; (8000ad8 <Write_Outputs+0x2d8>)
 8000944:	7b5b      	ldrb	r3, [r3, #13]
 8000946:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800094a:	b2d9      	uxtb	r1, r3
 800094c:	e000      	b.n	8000950 <Write_Outputs+0x150>
 800094e:	2100      	movs	r1, #0
 8000950:	4a62      	ldr	r2, [pc, #392]	; (8000adc <Write_Outputs+0x2dc>)
 8000952:	7953      	ldrb	r3, [r2, #5]
 8000954:	f361 0300 	bfi	r3, r1, #0, #1
 8000958:	7153      	strb	r3, [r2, #5]
	meas_data.d_outputs.out9  = settings.output_emulation_switches.out9  ? settings.output_emulation_values.out9  :  0;
 800095a:	4b5f      	ldr	r3, [pc, #380]	; (8000ad8 <Write_Outputs+0x2d8>)
 800095c:	7a5b      	ldrb	r3, [r3, #9]
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d005      	beq.n	8000974 <Write_Outputs+0x174>
 8000968:	4b5b      	ldr	r3, [pc, #364]	; (8000ad8 <Write_Outputs+0x2d8>)
 800096a:	7b5b      	ldrb	r3, [r3, #13]
 800096c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000970:	b2d9      	uxtb	r1, r3
 8000972:	e000      	b.n	8000976 <Write_Outputs+0x176>
 8000974:	2100      	movs	r1, #0
 8000976:	4a59      	ldr	r2, [pc, #356]	; (8000adc <Write_Outputs+0x2dc>)
 8000978:	7953      	ldrb	r3, [r2, #5]
 800097a:	f361 0341 	bfi	r3, r1, #1, #1
 800097e:	7153      	strb	r3, [r2, #5]
	meas_data.d_outputs.out10 = settings.output_emulation_switches.out10 ? settings.output_emulation_values.out10 :  0;
 8000980:	4b55      	ldr	r3, [pc, #340]	; (8000ad8 <Write_Outputs+0x2d8>)
 8000982:	7a5b      	ldrb	r3, [r3, #9]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d005      	beq.n	800099a <Write_Outputs+0x19a>
 800098e:	4b52      	ldr	r3, [pc, #328]	; (8000ad8 <Write_Outputs+0x2d8>)
 8000990:	7b5b      	ldrb	r3, [r3, #13]
 8000992:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000996:	b2d9      	uxtb	r1, r3
 8000998:	e000      	b.n	800099c <Write_Outputs+0x19c>
 800099a:	2100      	movs	r1, #0
 800099c:	4a4f      	ldr	r2, [pc, #316]	; (8000adc <Write_Outputs+0x2dc>)
 800099e:	7953      	ldrb	r3, [r2, #5]
 80009a0:	f361 0382 	bfi	r3, r1, #2, #1
 80009a4:	7153      	strb	r3, [r2, #5]
	meas_data.d_outputs.out11 = settings.output_emulation_switches.out11 ? settings.output_emulation_values.out11 :  0;
 80009a6:	4b4c      	ldr	r3, [pc, #304]	; (8000ad8 <Write_Outputs+0x2d8>)
 80009a8:	7a5b      	ldrb	r3, [r3, #9]
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d005      	beq.n	80009c0 <Write_Outputs+0x1c0>
 80009b4:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <Write_Outputs+0x2d8>)
 80009b6:	7b5b      	ldrb	r3, [r3, #13]
 80009b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80009bc:	b2d9      	uxtb	r1, r3
 80009be:	e000      	b.n	80009c2 <Write_Outputs+0x1c2>
 80009c0:	2100      	movs	r1, #0
 80009c2:	4a46      	ldr	r2, [pc, #280]	; (8000adc <Write_Outputs+0x2dc>)
 80009c4:	7953      	ldrb	r3, [r2, #5]
 80009c6:	f361 03c3 	bfi	r3, r1, #3, #1
 80009ca:	7153      	strb	r3, [r2, #5]
	HAL_GPIO_WritePin(DOUT_0_GPIO_Port, DOUT_0_Pin, meas_data.d_outputs.out0);
 80009cc:	4b43      	ldr	r3, [pc, #268]	; (8000adc <Write_Outputs+0x2dc>)
 80009ce:	791b      	ldrb	r3, [r3, #4]
 80009d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	4841      	ldr	r0, [pc, #260]	; (8000ae0 <Write_Outputs+0x2e0>)
 80009dc:	f002 fe9c 	bl	8003718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_1_GPIO_Port, DOUT_1_Pin, meas_data.d_outputs.out1);
 80009e0:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <Write_Outputs+0x2dc>)
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f0:	483b      	ldr	r0, [pc, #236]	; (8000ae0 <Write_Outputs+0x2e0>)
 80009f2:	f002 fe91 	bl	8003718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_2_GPIO_Port, DOUT_2_Pin, meas_data.d_outputs.out2);
 80009f6:	4b39      	ldr	r3, [pc, #228]	; (8000adc <Write_Outputs+0x2dc>)
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a06:	4836      	ldr	r0, [pc, #216]	; (8000ae0 <Write_Outputs+0x2e0>)
 8000a08:	f002 fe86 	bl	8003718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_3_GPIO_Port, DOUT_3_Pin, meas_data.d_outputs.out3);
 8000a0c:	4b33      	ldr	r3, [pc, #204]	; (8000adc <Write_Outputs+0x2dc>)
 8000a0e:	791b      	ldrb	r3, [r3, #4]
 8000a10:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	461a      	mov	r2, r3
 8000a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1c:	4830      	ldr	r0, [pc, #192]	; (8000ae0 <Write_Outputs+0x2e0>)
 8000a1e:	f002 fe7b 	bl	8003718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_4_GPIO_Port, DOUT_4_Pin, meas_data.d_outputs.out4);
 8000a22:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <Write_Outputs+0x2dc>)
 8000a24:	791b      	ldrb	r3, [r3, #4]
 8000a26:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a32:	482b      	ldr	r0, [pc, #172]	; (8000ae0 <Write_Outputs+0x2e0>)
 8000a34:	f002 fe70 	bl	8003718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_5_GPIO_Port, DOUT_5_Pin, meas_data.d_outputs.out5);
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <Write_Outputs+0x2dc>)
 8000a3a:	791b      	ldrb	r3, [r3, #4]
 8000a3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	461a      	mov	r2, r3
 8000a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a48:	4825      	ldr	r0, [pc, #148]	; (8000ae0 <Write_Outputs+0x2e0>)
 8000a4a:	f002 fe65 	bl	8003718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_6_GPIO_Port, DOUT_6_Pin, meas_data.d_outputs.out6);
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <Write_Outputs+0x2dc>)
 8000a50:	791b      	ldrb	r3, [r3, #4]
 8000a52:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	461a      	mov	r2, r3
 8000a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5e:	4820      	ldr	r0, [pc, #128]	; (8000ae0 <Write_Outputs+0x2e0>)
 8000a60:	f002 fe5a 	bl	8003718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_7_GPIO_Port, DOUT_7_Pin, meas_data.d_outputs.out7);
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <Write_Outputs+0x2dc>)
 8000a66:	791b      	ldrb	r3, [r3, #4]
 8000a68:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a74:	481a      	ldr	r0, [pc, #104]	; (8000ae0 <Write_Outputs+0x2e0>)
 8000a76:	f002 fe4f 	bl	8003718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_8_GPIO_Port, DOUT_8_Pin, meas_data.d_outputs.out8);
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <Write_Outputs+0x2dc>)
 8000a7c:	795b      	ldrb	r3, [r3, #5]
 8000a7e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	461a      	mov	r2, r3
 8000a86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a8a:	4815      	ldr	r0, [pc, #84]	; (8000ae0 <Write_Outputs+0x2e0>)
 8000a8c:	f002 fe44 	bl	8003718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_9_GPIO_Port, DOUT_9_Pin, meas_data.d_outputs.out9);
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <Write_Outputs+0x2dc>)
 8000a92:	795b      	ldrb	r3, [r3, #5]
 8000a94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa0:	4810      	ldr	r0, [pc, #64]	; (8000ae4 <Write_Outputs+0x2e4>)
 8000aa2:	f002 fe39 	bl	8003718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_10_GPIO_Port, DOUT_10_Pin, meas_data.d_outputs.out10);
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <Write_Outputs+0x2dc>)
 8000aa8:	795b      	ldrb	r3, [r3, #5]
 8000aaa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <Write_Outputs+0x2e8>)
 8000ab8:	f002 fe2e 	bl	8003718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_11_GPIO_Port, DOUT_11_Pin, meas_data.d_outputs.out11);
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <Write_Outputs+0x2dc>)
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <Write_Outputs+0x2e8>)
 8000ace:	f002 fe23 	bl	8003718 <HAL_GPIO_WritePin>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20006a78 	.word	0x20006a78
 8000adc:	20006af0 	.word	0x20006af0
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	40020c00 	.word	0x40020c00

08000aec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <vApplicationGetIdleTaskMemory+0x2c>)
 8000afc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <vApplicationGetIdleTaskMemory+0x30>)
 8000b02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	2000009c 	.word	0x2000009c
 8000b1c:	20000150 	.word	0x20000150

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ModbusInit();
 8000b26:	f000 fa2b 	bl	8000f80 <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2a:	f000 fdd7 	bl	80016dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2e:	f000 f82f 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b32:	f000 f911 	bl	8000d58 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b36:	f000 f895 	bl	8000c64 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000b3a:	f000 f8ed 	bl	8000d18 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8000b3e:	f000 f8c1 	bl	8000cc4 <MX_USART6_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4618      	mov	r0, r3
 8000b52:	f005 fb47 	bl	80061e4 <osSemaphoreCreate>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <main+0x64>)
 8000b5a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <main+0x68>)
 8000b5e:	1d3c      	adds	r4, r7, #4
 8000b60:	461d      	mov	r5, r3
 8000b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f005 fa39 	bl	8005fea <osThreadCreate>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <main+0x6c>)
 8000b7c:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b7e:	f005 fa1d 	bl	8005fbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <main+0x62>
 8000b84:	20006a30 	.word	0x20006a30
 8000b88:	08013f50 	.word	0x08013f50
 8000b8c:	20006988 	.word	0x20006988

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b094      	sub	sp, #80	; 0x50
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0320 	add.w	r3, r7, #32
 8000b9a:	2230      	movs	r2, #48	; 0x30
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f012 fa38 	bl	8013014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <SystemClock_Config+0xcc>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	4a27      	ldr	r2, [pc, #156]	; (8000c5c <SystemClock_Config+0xcc>)
 8000bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <SystemClock_Config+0xcc>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <SystemClock_Config+0xd0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <SystemClock_Config+0xd0>)
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <SystemClock_Config+0xd0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bec:	2301      	movs	r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c00:	2319      	movs	r3, #25
 8000c02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c04:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 fd98 	bl	800374c <HAL_RCC_OscConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c22:	f000 f99f 	bl	8000f64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	230f      	movs	r3, #15
 8000c28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2105      	movs	r1, #5
 8000c44:	4618      	mov	r0, r3
 8000c46:	f002 fff9 	bl	8003c3c <HAL_RCC_ClockConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c50:	f000 f988 	bl	8000f64 <Error_Handler>
  }
}
 8000c54:	bf00      	nop
 8000c56:	3750      	adds	r7, #80	; 0x50
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <MX_USART1_UART_Init+0x58>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c9c:	f003 fc7e 	bl	800459c <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ca6:	f000 f95d 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*)meas_data.data, 1);
 8000caa:	2201      	movs	r2, #1
 8000cac:	4904      	ldr	r1, [pc, #16]	; (8000cc0 <MX_USART1_UART_Init+0x5c>)
 8000cae:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000cb0:	f003 fd53 	bl	800475a <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200069ec 	.word	0x200069ec
 8000cbc:	40011000 	.word	0x40011000
 8000cc0:	20006af8 	.word	0x20006af8

08000cc4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <MX_USART6_UART_Init+0x50>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cd4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cfc:	f003 fc4e 	bl	800459c <HAL_UART_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d06:	f000 f92d 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  //HAL_USART_Receive_IT(&husart6, (uint8_t*)meas_data.data, 1);
  /* USER CODE END USART6_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20006a34 	.word	0x20006a34
 8000d14:	40011400 	.word	0x40011400

08000d18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_DMA_Init+0x3c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <MX_DMA_Init+0x3c>)
 8000d28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_DMA_Init+0x3c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2105      	movs	r1, #5
 8000d3e:	203a      	movs	r0, #58	; 0x3a
 8000d40:	f000 fdea 	bl	8001918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d44:	203a      	movs	r0, #58	; 0x3a
 8000d46:	f000 fe03 	bl	8001950 <HAL_NVIC_EnableIRQ>

}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	4b68      	ldr	r3, [pc, #416]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a67      	ldr	r2, [pc, #412]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b65      	ldr	r3, [pc, #404]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	4b61      	ldr	r3, [pc, #388]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a60      	ldr	r2, [pc, #384]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b5e      	ldr	r3, [pc, #376]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b5a      	ldr	r3, [pc, #360]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a59      	ldr	r2, [pc, #356]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b57      	ldr	r3, [pc, #348]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b53      	ldr	r3, [pc, #332]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a52      	ldr	r2, [pc, #328]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b50      	ldr	r3, [pc, #320]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	4b4c      	ldr	r3, [pc, #304]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a4b      	ldr	r2, [pc, #300]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a44      	ldr	r2, [pc, #272]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <MX_GPIO_Init+0x1bc>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8000e16:	2200      	movs	r2, #0
 8000e18:	f64f 7180 	movw	r1, #65408	; 0xff80
 8000e1c:	483e      	ldr	r0, [pc, #248]	; (8000f18 <MX_GPIO_Init+0x1c0>)
 8000e1e:	f002 fc7b 	bl	8003718 <HAL_GPIO_WritePin>
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DOUT_9_GPIO_Port, DOUT_9_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e28:	483c      	ldr	r0, [pc, #240]	; (8000f1c <MX_GPIO_Init+0x1c4>)
 8000e2a:	f002 fc75 	bl	8003718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DOUT_10_Pin|DOUT_11_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000e34:	483a      	ldr	r0, [pc, #232]	; (8000f20 <MX_GPIO_Init+0x1c8>)
 8000e36:	f002 fc6f 	bl	8003718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e40:	4838      	ldr	r0, [pc, #224]	; (8000f24 <MX_GPIO_Init+0x1cc>)
 8000e42:	f002 fc69 	bl	8003718 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN_4_Pin DIN_5_Pin DIN_6_Pin DIN_7_Pin
                           DIN_8_Pin DIN_2_Pin DIN_3_Pin */
  GPIO_InitStruct.Pin = DIN_4_Pin|DIN_5_Pin|DIN_6_Pin|DIN_7_Pin
 8000e46:	237f      	movs	r3, #127	; 0x7f
 8000e48:	61fb      	str	r3, [r7, #28]
                          |DIN_8_Pin|DIN_2_Pin|DIN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	482f      	ldr	r0, [pc, #188]	; (8000f18 <MX_GPIO_Init+0x1c0>)
 8000e5a:	f002 faa9 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_9_Pin DIN_10_Pin DIN_11_Pin */
  GPIO_InitStruct.Pin = DIN_9_Pin|DIN_10_Pin|DIN_11_Pin;
 8000e5e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	482c      	ldr	r0, [pc, #176]	; (8000f24 <MX_GPIO_Init+0x1cc>)
 8000e74:	f002 fa9c 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_0_Pin DOUT_1_Pin DOUT_2_Pin DOUT_3_Pin
                           DOUT_4_Pin DOUT_5_Pin DOUT_6_Pin DOUT_7_Pin
                           DOUT_8_Pin */
  GPIO_InitStruct.Pin = DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8000e78:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000e7c:	61fb      	str	r3, [r7, #28]
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4821      	ldr	r0, [pc, #132]	; (8000f18 <MX_GPIO_Init+0x1c0>)
 8000e92:	f002 fa8d 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOUT_9_Pin */
  GPIO_InitStruct.Pin = DOUT_9_Pin;
 8000e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DOUT_9_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	481b      	ldr	r0, [pc, #108]	; (8000f1c <MX_GPIO_Init+0x1c4>)
 8000eb0:	f002 fa7e 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_10_Pin DOUT_11_Pin */
  GPIO_InitStruct.Pin = DOUT_10_Pin|DOUT_11_Pin;
 8000eb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4814      	ldr	r0, [pc, #80]	; (8000f20 <MX_GPIO_Init+0x1c8>)
 8000ece:	f002 fa6f 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_TX_Pin */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 8000ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480e      	ldr	r0, [pc, #56]	; (8000f24 <MX_GPIO_Init+0x1cc>)
 8000eec:	f002 fa60 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_0_Pin DIN_1_Pin */
  GPIO_InitStruct.Pin = DIN_0_Pin|DIN_1_Pin;
 8000ef0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_GPIO_Init+0x1c4>)
 8000f06:	f002 fa53 	bl	80033b0 <HAL_GPIO_Init>

}
 8000f0a:	bf00      	nop
 8000f0c:	3730      	adds	r7, #48	; 0x30
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	40020c00 	.word	0x40020c00
 8000f24:	40020800 	.word	0x40020800

08000f28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000f30:	f004 fafc 	bl	800552c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  //task_init();
  /* Infinite loop */
  for(;;)
  {
	main_process();
 8000f34:	f000 f81b 	bl	8000f6e <main_process>
    osDelay(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f005 f8a2 	bl	8006082 <osDelay>
	main_process();
 8000f3e:	e7f9      	b.n	8000f34 <StartDefaultTask+0xc>

08000f40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f52:	f000 fbe5 	bl	8001720 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40010000 	.word	0x40010000

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <Error_Handler+0x8>

08000f6e <main_process>:
 */
#include <string.h>
#include <dio.h>

void main_process()
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	af00      	add	r7, sp, #0
	Read_Inputs();
 8000f72:	f7ff faf9 	bl	8000568 <Read_Inputs>
	Write_Outputs();
 8000f76:	f7ff fc43 	bl	8000800 <Write_Outputs>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <ModbusInit+0x38>)
 8000f86:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <ModbusInit+0x3c>)
 8000f88:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <ModbusInit+0x40>)
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <ModbusInit+0x44>)
 8000f8e:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(settings)/2;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <ModbusInit+0x48>)
 8000f92:	223c      	movs	r2, #60	; 0x3c
 8000f94:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <ModbusInit+0x4c>)
 8000f98:	222c      	movs	r2, #44	; 0x2c
 8000f9a:	801a      	strh	r2, [r3, #0]
	if(settings.mb_addr==0)settings.mb_addr = 1;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <ModbusInit+0x3c>)
 8000f9e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d103      	bne.n	8000fae <ModbusInit+0x2e>
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <ModbusInit+0x3c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	20000350 	.word	0x20000350
 8000fbc:	20006a78 	.word	0x20006a78
 8000fc0:	20000354 	.word	0x20000354
 8000fc4:	20006af0 	.word	0x20006af0
 8000fc8:	20000358 	.word	0x20000358
 8000fcc:	2000035a 	.word	0x2000035a

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_MspInit+0x54>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a11      	ldr	r2, [pc, #68]	; (8001024 <HAL_MspInit+0x54>)
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_MspInit+0x54>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_MspInit+0x54>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_MspInit+0x54>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_MspInit+0x54>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	210f      	movs	r1, #15
 8001012:	f06f 0001 	mvn.w	r0, #1
 8001016:	f000 fc7f 	bl	8001918 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800

08001028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a51      	ldr	r2, [pc, #324]	; (800118c <HAL_UART_MspInit+0x164>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d163      	bne.n	8001112 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	4b50      	ldr	r3, [pc, #320]	; (8001190 <HAL_UART_MspInit+0x168>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a4f      	ldr	r2, [pc, #316]	; (8001190 <HAL_UART_MspInit+0x168>)
 8001054:	f043 0310 	orr.w	r3, r3, #16
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b4d      	ldr	r3, [pc, #308]	; (8001190 <HAL_UART_MspInit+0x168>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	4b49      	ldr	r3, [pc, #292]	; (8001190 <HAL_UART_MspInit+0x168>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a48      	ldr	r2, [pc, #288]	; (8001190 <HAL_UART_MspInit+0x168>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b46      	ldr	r3, [pc, #280]	; (8001190 <HAL_UART_MspInit+0x168>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001082:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001094:	2307      	movs	r3, #7
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4619      	mov	r1, r3
 800109e:	483d      	ldr	r0, [pc, #244]	; (8001194 <HAL_UART_MspInit+0x16c>)
 80010a0:	f002 f986 	bl	80033b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80010a4:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <HAL_UART_MspInit+0x170>)
 80010a6:	4a3d      	ldr	r2, [pc, #244]	; (800119c <HAL_UART_MspInit+0x174>)
 80010a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80010aa:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <HAL_UART_MspInit+0x170>)
 80010ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b2:	4b39      	ldr	r3, [pc, #228]	; (8001198 <HAL_UART_MspInit+0x170>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b8:	4b37      	ldr	r3, [pc, #220]	; (8001198 <HAL_UART_MspInit+0x170>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010be:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_UART_MspInit+0x170>)
 80010c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <HAL_UART_MspInit+0x170>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010cc:	4b32      	ldr	r3, [pc, #200]	; (8001198 <HAL_UART_MspInit+0x170>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_UART_MspInit+0x170>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010d8:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <HAL_UART_MspInit+0x170>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <HAL_UART_MspInit+0x170>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010e4:	482c      	ldr	r0, [pc, #176]	; (8001198 <HAL_UART_MspInit+0x170>)
 80010e6:	f000 fc41 	bl	800196c <HAL_DMA_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80010f0:	f7ff ff38 	bl	8000f64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a28      	ldr	r2, [pc, #160]	; (8001198 <HAL_UART_MspInit+0x170>)
 80010f8:	639a      	str	r2, [r3, #56]	; 0x38
 80010fa:	4a27      	ldr	r2, [pc, #156]	; (8001198 <HAL_UART_MspInit+0x170>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2105      	movs	r1, #5
 8001104:	2025      	movs	r0, #37	; 0x25
 8001106:	f000 fc07 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800110a:	2025      	movs	r0, #37	; 0x25
 800110c:	f000 fc20 	bl	8001950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001110:	e038      	b.n	8001184 <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART6)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a22      	ldr	r2, [pc, #136]	; (80011a0 <HAL_UART_MspInit+0x178>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d133      	bne.n	8001184 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_UART_MspInit+0x168>)
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <HAL_UART_MspInit+0x168>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6453      	str	r3, [r2, #68]	; 0x44
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_UART_MspInit+0x168>)
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <HAL_UART_MspInit+0x168>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	4a13      	ldr	r2, [pc, #76]	; (8001190 <HAL_UART_MspInit+0x168>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6313      	str	r3, [r2, #48]	; 0x30
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_UART_MspInit+0x168>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001154:	23c0      	movs	r3, #192	; 0xc0
 8001156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001164:	2308      	movs	r3, #8
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <HAL_UART_MspInit+0x17c>)
 8001170:	f002 f91e 	bl	80033b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2105      	movs	r1, #5
 8001178:	2047      	movs	r0, #71	; 0x47
 800117a:	f000 fbcd 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800117e:	2047      	movs	r0, #71	; 0x47
 8001180:	f000 fbe6 	bl	8001950 <HAL_NVIC_EnableIRQ>
}
 8001184:	bf00      	nop
 8001186:	3730      	adds	r7, #48	; 0x30
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40011000 	.word	0x40011000
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000
 8001198:	2000698c 	.word	0x2000698c
 800119c:	40026440 	.word	0x40026440
 80011a0:	40011400 	.word	0x40011400
 80011a4:	40020800 	.word	0x40020800

080011a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	2019      	movs	r0, #25
 80011be:	f000 fbab 	bl	8001918 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011c2:	2019      	movs	r0, #25
 80011c4:	f000 fbc4 	bl	8001950 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <HAL_InitTick+0xa4>)
 80011ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d0:	4a1e      	ldr	r2, [pc, #120]	; (800124c <HAL_InitTick+0xa4>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6453      	str	r3, [r2, #68]	; 0x44
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_InitTick+0xa4>)
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e4:	f107 0210 	add.w	r2, r7, #16
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fef4 	bl	8003fdc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011f4:	f002 fede 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
 80011f8:	4603      	mov	r3, r0
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	4a13      	ldr	r2, [pc, #76]	; (8001250 <HAL_InitTick+0xa8>)
 8001202:	fba2 2303 	umull	r2, r3, r2, r3
 8001206:	0c9b      	lsrs	r3, r3, #18
 8001208:	3b01      	subs	r3, #1
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_InitTick+0xac>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <HAL_InitTick+0xb0>)
 8001210:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <HAL_InitTick+0xac>)
 8001214:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001218:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_InitTick+0xac>)
 800121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_InitTick+0xac>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_InitTick+0xac>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800122c:	4809      	ldr	r0, [pc, #36]	; (8001254 <HAL_InitTick+0xac>)
 800122e:	f002 ff07 	bl	8004040 <HAL_TIM_Base_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d104      	bne.n	8001242 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001238:	4806      	ldr	r0, [pc, #24]	; (8001254 <HAL_InitTick+0xac>)
 800123a:	f002 ff5b 	bl	80040f4 <HAL_TIM_Base_Start_IT>
 800123e:	4603      	mov	r3, r0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3730      	adds	r7, #48	; 0x30
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	431bde83 	.word	0x431bde83
 8001254:	20006b48 	.word	0x20006b48
 8001258:	40010000 	.word	0x40010000

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800128e:	f002 ffa1 	bl	80041d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20006b48 	.word	0x20006b48

0800129c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <USART1_IRQHandler+0x10>)
 80012a2:	f003 fa8b 	bl	80047bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200069ec 	.word	0x200069ec

080012b0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <DMA2_Stream2_IRQHandler+0x10>)
 80012b6:	f000 fc99 	bl	8001bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000698c 	.word	0x2000698c

080012c4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <ETH_IRQHandler+0x10>)
 80012ca:	f001 faaf 	bl	800282c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200084b8 	.word	0x200084b8

080012d8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <USART6_IRQHandler+0x10>)
 80012de:	f003 fa6d 	bl	80047bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20006a34 	.word	0x20006a34

080012ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	return 1;
 80012f0:	2301      	movs	r3, #1
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_kill>:

int _kill(int pid, int sig)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <_kill+0x20>)
 8001308:	2216      	movs	r2, #22
 800130a:	601a      	str	r2, [r3, #0]
	return -1;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	2000d404 	.word	0x2000d404

08001320 <_exit>:

void _exit (int status)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ffe5 	bl	80012fc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001332:	e7fe      	b.n	8001332 <_exit+0x12>

08001334 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	e00a      	b.n	800135c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001346:	f3af 8000 	nop.w
 800134a:	4601      	mov	r1, r0
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	60ba      	str	r2, [r7, #8]
 8001352:	b2ca      	uxtb	r2, r1
 8001354:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	dbf0      	blt.n	8001346 <_read+0x12>
	}

return len;
 8001364:	687b      	ldr	r3, [r7, #4]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e009      	b.n	8001394 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbf1      	blt.n	8001380 <_write+0x12>
	}
	return len;
 800139c:	687b      	ldr	r3, [r7, #4]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_close>:

int _close(int file)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
	return -1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ce:	605a      	str	r2, [r3, #4]
	return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_isatty>:

int _isatty(int file)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
	return 1;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d205      	bcs.n	800144c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <_sbrk+0x6c>)
 8001442:	220c      	movs	r2, #12
 8001444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	e009      	b.n	8001460 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	4a06      	ldr	r2, [pc, #24]	; (8001474 <_sbrk+0x64>)
 800145c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	20020000 	.word	0x20020000
 8001470:	00000400 	.word	0x00000400
 8001474:	2000035c 	.word	0x2000035c
 8001478:	2000d410 	.word	0x2000d410
 800147c:	2000d404 	.word	0x2000d404

08001480 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <SystemInit+0x20>)
 8001486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <SystemInit+0x20>)
 800148c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <HAL_UART_RxCpltCallback>:

extern UART_HandleTypeDef huart6;
extern Meas_Data meas_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	int t = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
	meas_data.data[25]++;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_UART_RxCpltCallback+0x48>)
 80014b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80014b4:	3301      	adds	r3, #1
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_UART_RxCpltCallback+0x48>)
 80014ba:	875a      	strh	r2, [r3, #58]	; 0x3a
	char message[] = "hello";;
 80014bc:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <HAL_UART_RxCpltCallback+0x4c>)
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014c6:	6018      	str	r0, [r3, #0]
 80014c8:	3304      	adds	r3, #4
 80014ca:	8019      	strh	r1, [r3, #0]
	HAL_UART_Transmit(huart, (uint8_t*)message, 5, 10);
 80014cc:	f107 010c 	add.w	r1, r7, #12
 80014d0:	230a      	movs	r3, #10
 80014d2:	2205      	movs	r2, #5
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f003 f8ae 	bl	8004636 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(huart,(uint8_t*)meas_data.data,1);
 80014da:	2201      	movs	r2, #1
 80014dc:	4905      	ldr	r1, [pc, #20]	; (80014f4 <HAL_UART_RxCpltCallback+0x50>)
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f003 f93b 	bl	800475a <HAL_UART_Receive_IT>
}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20006af0 	.word	0x20006af0
 80014f0:	08013f6c 	.word	0x08013f6c
 80014f4:	20006af8 	.word	0x20006af8

080014f8 <Reset_Handler>:
 80014f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001530 <LoopFillZerobss+0x12>
 80014fc:	480d      	ldr	r0, [pc, #52]	; (8001534 <LoopFillZerobss+0x16>)
 80014fe:	490e      	ldr	r1, [pc, #56]	; (8001538 <LoopFillZerobss+0x1a>)
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <LoopFillZerobss+0x1e>)
 8001502:	2300      	movs	r3, #0
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:
 8001506:	58d4      	ldr	r4, [r2, r3]
 8001508:	50c4      	str	r4, [r0, r3]
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:
 800150c:	18c4      	adds	r4, r0, r3
 800150e:	428c      	cmp	r4, r1
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <LoopFillZerobss+0x22>)
 8001514:	4c0b      	ldr	r4, [pc, #44]	; (8001544 <LoopFillZerobss+0x26>)
 8001516:	2300      	movs	r3, #0
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:
 800151e:	42a2      	cmp	r2, r4
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>
 8001522:	f7ff ffad 	bl	8001480 <SystemInit>
 8001526:	f011 fd2d 	bl	8012f84 <__libc_init_array>
 800152a:	f7ff faf9 	bl	8000b20 <main>
 800152e:	4770      	bx	lr
 8001530:	20020000 	.word	0x20020000
 8001534:	20000000 	.word	0x20000000
 8001538:	20000080 	.word	0x20000080
 800153c:	08016d24 	.word	0x08016d24
 8001540:	20000080 	.word	0x20000080
 8001544:	2000d40c 	.word	0x2000d40c

08001548 <ADC_IRQHandler>:
 8001548:	e7fe      	b.n	8001548 <ADC_IRQHandler>

0800154a <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d104      	bne.n	8001562 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
 800155c:	f7ff fd02 	bl	8000f64 <Error_Handler>
 8001560:	e7fe      	b.n	8001560 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	e007      	b.n	8001578 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	2100      	movs	r1, #0
 800156e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3301      	adds	r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d9f4      	bls.n	8001568 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	721a      	strb	r2, [r3, #8]
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d104      	bne.n	80015a4 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800159a:	b672      	cpsid	i
}
 800159c:	bf00      	nop
 800159e:	f7ff fce1 	bl	8000f64 <Error_Handler>
 80015a2:	e7fe      	b.n	80015a2 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7a1b      	ldrb	r3, [r3, #8]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d904      	bls.n	80015b6 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
 80015b0:	f7ff fcd8 	bl	8000f64 <Error_Handler>
 80015b4:	e7fe      	b.n	80015b4 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7a1b      	ldrb	r3, [r3, #8]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	b2d1      	uxtb	r1, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	7211      	strb	r1, [r2, #8]
 80015c2:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80015c4:	f3ef 8211 	mrs	r2, BASEPRI
 80015c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015cc:	f383 8811 	msr	BASEPRI, r3
 80015d0:	f3bf 8f6f 	isb	sy
 80015d4:	f3bf 8f4f 	dsb	sy
 80015d8:	60fa      	str	r2, [r7, #12]
 80015da:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d104      	bne.n	8001604 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80015fa:	b672      	cpsid	i
}
 80015fc:	bf00      	nop
 80015fe:	f7ff fcb1 	bl	8000f64 <Error_Handler>
 8001602:	e7fe      	b.n	8001602 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7a1b      	ldrb	r3, [r3, #8]
 8001608:	3b01      	subs	r3, #1
 800160a:	b2da      	uxtb	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7a1b      	ldrb	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d904      	bls.n	8001622 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8001618:	b672      	cpsid	i
}
 800161a:	bf00      	nop
 800161c:	f7ff fca2 	bl	8000f64 <Error_Handler>
 8001620:	e7fe      	b.n	8001620 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7a1b      	ldrb	r3, [r3, #8]
 8001626:	461a      	mov	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001636:	bf00      	nop
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d103      	bne.n	8001656 <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <__retarget_lock_init_recursive+0x48>)
 8001650:	2216      	movs	r2, #22
 8001652:	601a      	str	r2, [r3, #0]
    return;
 8001654:	e015      	b.n	8001682 <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001656:	200c      	movs	r0, #12
 8001658:	f011 fcb8 	bl	8012fcc <malloc>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff6a 	bl	800154a <stm32_lock_init>
    return;
 8001676:	e004      	b.n	8001682 <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 800167c:	f7ff fc72 	bl	8000f64 <Error_Handler>
 8001680:	e7fe      	b.n	8001680 <__retarget_lock_init_recursive+0x40>
}
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2000d404 	.word	0x2000d404

0800168c <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d104      	bne.n	80016a4 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800169a:	b672      	cpsid	i
}
 800169c:	bf00      	nop
 800169e:	f7ff fc61 	bl	8000f64 <Error_Handler>
 80016a2:	e7fe      	b.n	80016a2 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff70 	bl	800158c <stm32_lock_acquire>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d104      	bne.n	80016cc <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80016c2:	b672      	cpsid	i
}
 80016c4:	bf00      	nop
 80016c6:	f7ff fc4d 	bl	8000f64 <Error_Handler>
 80016ca:	e7fe      	b.n	80016ca <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff8c 	bl	80015ec <stm32_lock_release>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <HAL_Init+0x40>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_Init+0x40>)
 80016f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_Init+0x40>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f000 f8fc 	bl	8001902 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170a:	200f      	movs	r0, #15
 800170c:	f7ff fd4c 	bl	80011a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001710:	f7ff fc5e 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	20006b90 	.word	0x20006b90

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20006b90 	.word	0x20006b90

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff ffee 	bl	8001748 <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffde 	bl	8001748 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ff4c 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192a:	f7ff ff61 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 800192e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	6978      	ldr	r0, [r7, #20]
 8001936:	f7ff ffb1 	bl	800189c <NVIC_EncodePriority>
 800193a:	4602      	mov	r2, r0
 800193c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff80 	bl	8001848 <__NVIC_SetPriority>
}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff54 	bl	800180c <__NVIC_EnableIRQ>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff fee6 	bl	8001748 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e099      	b.n	8001abc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a8:	e00f      	b.n	80019ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019aa:	f7ff fecd 	bl	8001748 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d908      	bls.n	80019ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2220      	movs	r2, #32
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2203      	movs	r2, #3
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e078      	b.n	8001abc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1e8      	bne.n	80019aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_DMA_Init+0x158>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d107      	bne.n	8001a34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f023 0307 	bic.w	r3, r3, #7
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d117      	bne.n	8001a8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00e      	beq.n	8001a8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fa7b 	bl	8001f6c <DMA_CheckFifoParam>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2240      	movs	r2, #64	; 0x40
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e016      	b.n	8001abc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fa32 	bl	8001f00 <DMA_CalcBaseAndBitshift>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa4:	223f      	movs	r2, #63	; 0x3f
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	f010803f 	.word	0xf010803f

08001ac8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ad6:	f7ff fe37 	bl	8001748 <HAL_GetTick>
 8001ada:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d008      	beq.n	8001afa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e052      	b.n	8001ba0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0216 	bic.w	r2, r2, #22
 8001b08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d103      	bne.n	8001b2a <HAL_DMA_Abort+0x62>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0208 	bic.w	r2, r2, #8
 8001b38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4a:	e013      	b.n	8001b74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b4c:	f7ff fdfc 	bl	8001748 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d90c      	bls.n	8001b74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2203      	movs	r2, #3
 8001b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e015      	b.n	8001ba0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1e4      	bne.n	8001b4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b86:	223f      	movs	r2, #63	; 0x3f
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d004      	beq.n	8001bc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2280      	movs	r2, #128	; 0x80
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00c      	b.n	8001be0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2205      	movs	r2, #5
 8001bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0201 	bic.w	r2, r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bf8:	4b92      	ldr	r3, [pc, #584]	; (8001e44 <HAL_DMA_IRQHandler+0x258>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a92      	ldr	r2, [pc, #584]	; (8001e48 <HAL_DMA_IRQHandler+0x25c>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0a9b      	lsrs	r3, r3, #10
 8001c04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	2208      	movs	r2, #8
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01a      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d013      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0204 	bic.w	r2, r2, #4
 8001c3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	2208      	movs	r2, #8
 8001c46:	409a      	lsls	r2, r3
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	f043 0201 	orr.w	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d012      	beq.n	8001c8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	f043 0202 	orr.w	r2, r3, #2
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c92:	2204      	movs	r2, #4
 8001c94:	409a      	lsls	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d012      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00b      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	f043 0204 	orr.w	r2, r3, #4
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	2210      	movs	r2, #16
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d043      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d03c      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	2210      	movs	r2, #16
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d018      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d108      	bne.n	8001d1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d024      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
 8001d1a:	e01f      	b.n	8001d5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01b      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
 8001d2c:	e016      	b.n	8001d5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d107      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0208 	bic.w	r2, r2, #8
 8001d4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	2220      	movs	r2, #32
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 808e 	beq.w	8001e8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 8086 	beq.w	8001e8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d82:	2220      	movs	r2, #32
 8001d84:	409a      	lsls	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	d136      	bne.n	8001e04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0216 	bic.w	r2, r2, #22
 8001da4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <HAL_DMA_IRQHandler+0x1da>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0208 	bic.w	r2, r2, #8
 8001dd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	223f      	movs	r2, #63	; 0x3f
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d07d      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	4798      	blx	r3
        }
        return;
 8001e02:	e078      	b.n	8001ef6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d01c      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d108      	bne.n	8001e32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d030      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
 8001e30:	e02b      	b.n	8001e8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d027      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	4798      	blx	r3
 8001e42:	e022      	b.n	8001e8a <HAL_DMA_IRQHandler+0x29e>
 8001e44:	20000000 	.word	0x20000000
 8001e48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10f      	bne.n	8001e7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0210 	bic.w	r2, r2, #16
 8001e68:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d032      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d022      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2205      	movs	r2, #5
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0201 	bic.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d307      	bcc.n	8001ed2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f2      	bne.n	8001eb6 <HAL_DMA_IRQHandler+0x2ca>
 8001ed0:	e000      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ed2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4798      	blx	r3
 8001ef4:	e000      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ef6:	bf00      	nop
    }
  }
}
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop

08001f00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	3b10      	subs	r3, #16
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <DMA_CalcBaseAndBitshift+0x64>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f1a:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <DMA_CalcBaseAndBitshift+0x68>)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d909      	bls.n	8001f42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f36:	f023 0303 	bic.w	r3, r3, #3
 8001f3a:	1d1a      	adds	r2, r3, #4
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f40:	e007      	b.n	8001f52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	aaaaaaab 	.word	0xaaaaaaab
 8001f68:	08016a94 	.word	0x08016a94

08001f6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d11f      	bne.n	8001fc6 <DMA_CheckFifoParam+0x5a>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d856      	bhi.n	800203a <DMA_CheckFifoParam+0xce>
 8001f8c:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <DMA_CheckFifoParam+0x28>)
 8001f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f92:	bf00      	nop
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fb7 	.word	0x08001fb7
 8001f9c:	08001fa5 	.word	0x08001fa5
 8001fa0:	0800203b 	.word	0x0800203b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d046      	beq.n	800203e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb4:	e043      	b.n	800203e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fbe:	d140      	bne.n	8002042 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc4:	e03d      	b.n	8002042 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fce:	d121      	bne.n	8002014 <DMA_CheckFifoParam+0xa8>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d837      	bhi.n	8002046 <DMA_CheckFifoParam+0xda>
 8001fd6:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <DMA_CheckFifoParam+0x70>)
 8001fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fdc:	08001fed 	.word	0x08001fed
 8001fe0:	08001ff3 	.word	0x08001ff3
 8001fe4:	08001fed 	.word	0x08001fed
 8001fe8:	08002005 	.word	0x08002005
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff0:	e030      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d025      	beq.n	800204a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002002:	e022      	b.n	800204a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800200c:	d11f      	bne.n	800204e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002012:	e01c      	b.n	800204e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d903      	bls.n	8002022 <DMA_CheckFifoParam+0xb6>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d003      	beq.n	8002028 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002020:	e018      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
      break;
 8002026:	e015      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00e      	beq.n	8002052 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
      break;
 8002038:	e00b      	b.n	8002052 <DMA_CheckFifoParam+0xe6>
      break;
 800203a:	bf00      	nop
 800203c:	e00a      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 800203e:	bf00      	nop
 8002040:	e008      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 8002042:	bf00      	nop
 8002044:	e006      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 8002046:	bf00      	nop
 8002048:	e004      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 800204a:	bf00      	nop
 800204c:	e002      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;   
 800204e:	bf00      	nop
 8002050:	e000      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 8002052:	bf00      	nop
    }
  } 
  
  return status; 
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002074:	4baa      	ldr	r3, [pc, #680]	; (8002320 <HAL_ETH_Init+0x2bc>)
 8002076:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e183      	b.n	8002392 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f003 fb90 	bl	80057c4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	4b9e      	ldr	r3, [pc, #632]	; (8002324 <HAL_ETH_Init+0x2c0>)
 80020aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ac:	4a9d      	ldr	r2, [pc, #628]	; (8002324 <HAL_ETH_Init+0x2c0>)
 80020ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b2:	6453      	str	r3, [r2, #68]	; 0x44
 80020b4:	4b9b      	ldr	r3, [pc, #620]	; (8002324 <HAL_ETH_Init+0x2c0>)
 80020b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80020c0:	4b99      	ldr	r3, [pc, #612]	; (8002328 <HAL_ETH_Init+0x2c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a98      	ldr	r2, [pc, #608]	; (8002328 <HAL_ETH_Init+0x2c4>)
 80020c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020ca:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80020cc:	4b96      	ldr	r3, [pc, #600]	; (8002328 <HAL_ETH_Init+0x2c4>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4994      	ldr	r1, [pc, #592]	; (8002328 <HAL_ETH_Init+0x2c4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80020f2:	f7ff fb29 	bl	8001748 <HAL_GetTick>
 80020f6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80020f8:	e011      	b.n	800211e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80020fa:	f7ff fb25 	bl	8001748 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002108:	d909      	bls.n	800211e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2203      	movs	r2, #3
 800210e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e139      	b.n	8002392 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1e4      	bne.n	80020fa <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f023 031c 	bic.w	r3, r3, #28
 800213e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002140:	f001 ff18 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8002144:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4a78      	ldr	r2, [pc, #480]	; (800232c <HAL_ETH_Init+0x2c8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d908      	bls.n	8002160 <HAL_ETH_Init+0xfc>
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4a77      	ldr	r2, [pc, #476]	; (8002330 <HAL_ETH_Init+0x2cc>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d804      	bhi.n	8002160 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f043 0308 	orr.w	r3, r3, #8
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	e027      	b.n	80021b0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	4a73      	ldr	r2, [pc, #460]	; (8002330 <HAL_ETH_Init+0x2cc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d908      	bls.n	800217a <HAL_ETH_Init+0x116>
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	4a6d      	ldr	r2, [pc, #436]	; (8002320 <HAL_ETH_Init+0x2bc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d204      	bcs.n	800217a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f043 030c 	orr.w	r3, r3, #12
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	e01a      	b.n	80021b0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4a68      	ldr	r2, [pc, #416]	; (8002320 <HAL_ETH_Init+0x2bc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d303      	bcc.n	800218a <HAL_ETH_Init+0x126>
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4a6b      	ldr	r2, [pc, #428]	; (8002334 <HAL_ETH_Init+0x2d0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d911      	bls.n	80021ae <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4a69      	ldr	r2, [pc, #420]	; (8002334 <HAL_ETH_Init+0x2d0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d908      	bls.n	80021a4 <HAL_ETH_Init+0x140>
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4a68      	ldr	r2, [pc, #416]	; (8002338 <HAL_ETH_Init+0x2d4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d804      	bhi.n	80021a4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e005      	b.n	80021b0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f043 0310 	orr.w	r3, r3, #16
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	e000      	b.n	80021b0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80021ae:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80021b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021bc:	2100      	movs	r1, #0
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fc17 	bl	80029f2 <HAL_ETH_WritePHYRegister>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80021ce:	6939      	ldr	r1, [r7, #16]
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fdcd 	bl	8002d70 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0d7      	b.n	8002392 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80021e2:	20ff      	movs	r0, #255	; 0xff
 80021e4:	f7ff fabc 	bl	8001760 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80a5 	beq.w	800233c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80021f2:	f7ff faa9 	bl	8001748 <HAL_GetTick>
 80021f6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	461a      	mov	r2, r3
 80021fe:	2101      	movs	r1, #1
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 fb8e 	bl	8002922 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002206:	f7ff fa9f 	bl	8001748 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d90f      	bls.n	8002238 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800221c:	6939      	ldr	r1, [r7, #16]
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fda6 	bl	8002d70 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0ac      	b.n	8002392 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0da      	beq.n	80021f8 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002242:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002246:	2100      	movs	r1, #0
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 fbd2 	bl	80029f2 <HAL_ETH_WritePHYRegister>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00b      	beq.n	800226c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002258:	6939      	ldr	r1, [r7, #16]
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 fd88 	bl	8002d70 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002268:	2301      	movs	r3, #1
 800226a:	e092      	b.n	8002392 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800226c:	f7ff fa6c 	bl	8001748 <HAL_GetTick>
 8002270:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	461a      	mov	r2, r3
 8002278:	2101      	movs	r1, #1
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fb51 	bl	8002922 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002280:	f7ff fa62 	bl	8001748 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d90f      	bls.n	80022b2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002296:	6939      	ldr	r1, [r7, #16]
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fd69 	bl	8002d70 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e06f      	b.n	8002392 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0da      	beq.n	8002272 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	461a      	mov	r2, r3
 80022c2:	2110      	movs	r1, #16
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fb2c 	bl	8002922 <HAL_ETH_ReadPHYRegister>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00b      	beq.n	80022e8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80022d4:	6939      	ldr	r1, [r7, #16]
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fd4a 	bl	8002d70 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80022e4:	2301      	movs	r3, #1
 80022e6:	e054      	b.n	8002392 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d004      	beq.n	80022fc <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	e002      	b.n	8002302 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	e035      	b.n	8002380 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	e030      	b.n	8002380 <HAL_ETH_Init+0x31c>
 800231e:	bf00      	nop
 8002320:	03938700 	.word	0x03938700
 8002324:	40023800 	.word	0x40023800
 8002328:	40013800 	.word	0x40013800
 800232c:	01312cff 	.word	0x01312cff
 8002330:	02160ebf 	.word	0x02160ebf
 8002334:	05f5e0ff 	.word	0x05f5e0ff
 8002338:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	08db      	lsrs	r3, r3, #3
 8002342:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800234c:	4313      	orrs	r3, r2
 800234e:	b29b      	uxth	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	2100      	movs	r1, #0
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fb4c 	bl	80029f2 <HAL_ETH_WritePHYRegister>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00b      	beq.n	8002378 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002364:	6939      	ldr	r1, [r7, #16]
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fd02 	bl	8002d70 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e00c      	b.n	8002392 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002378:	f640 70ff 	movw	r0, #4095	; 0xfff
 800237c:	f7ff f9f0 	bl	8001760 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002380:	6939      	ldr	r1, [r7, #16]
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fcf4 	bl	8002d70 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop

0800239c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_ETH_DMATxDescListInit+0x20>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e052      	b.n	8002462 <HAL_ETH_DMATxDescListInit+0xc6>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	e030      	b.n	800243a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	015b      	lsls	r3, r3, #5
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	4413      	add	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023e8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80023f0:	fb02 f303 	mul.w	r3, r2, r3
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	3b01      	subs	r3, #1
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	d208      	bcs.n	800242e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	015b      	lsls	r3, r3, #5
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4413      	add	r3, r2
 8002426:	461a      	mov	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	60da      	str	r2, [r3, #12]
 800242c:	e002      	b.n	8002434 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3301      	adds	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d3ca      	bcc.n	80023d8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244c:	3310      	adds	r3, #16
 800244e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800246e:	b480      	push	{r7}
 8002470:	b087      	sub	sp, #28
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_ETH_DMARxDescListInit+0x20>
 800248a:	2302      	movs	r3, #2
 800248c:	e056      	b.n	800253c <HAL_ETH_DMARxDescListInit+0xce>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2202      	movs	r2, #2
 800249a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	e034      	b.n	8002514 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	015b      	lsls	r3, r3, #5
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	4413      	add	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024ba:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80024c2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	461a      	mov	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d208      	bcs.n	8002508 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	015b      	lsls	r3, r3, #5
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	4413      	add	r3, r2
 8002500:	461a      	mov	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	e002      	b.n	800250e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	3301      	adds	r3, #1
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d3c6      	bcc.n	80024aa <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002526:	330c      	adds	r3, #12
 8002528:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_ETH_TransmitFrame+0x24>
 8002568:	2302      	movs	r3, #2
 800256a:	e0cd      	b.n	8002708 <HAL_ETH_TransmitFrame+0x1c0>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002592:	2301      	movs	r3, #1
 8002594:	e0b8      	b.n	8002708 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	da09      	bge.n	80025b4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2212      	movs	r2, #18
 80025a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0a9      	b.n	8002708 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d915      	bls.n	80025ea <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	4a54      	ldr	r2, [pc, #336]	; (8002714 <HAL_ETH_TransmitFrame+0x1cc>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	0a9b      	lsrs	r3, r3, #10
 80025c8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	4b51      	ldr	r3, [pc, #324]	; (8002714 <HAL_ETH_TransmitFrame+0x1cc>)
 80025ce:	fba3 1302 	umull	r1, r3, r3, r2
 80025d2:	0a9b      	lsrs	r3, r3, #10
 80025d4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3301      	adds	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e001      	b.n	80025ee <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80025ea:	2301      	movs	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d11c      	bne.n	800262e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002602:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800260e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800261e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	461a      	mov	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
 800262c:	e04b      	b.n	80026c6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e044      	b.n	80026be <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002642:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d107      	bne.n	800265a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002658:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002662:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3b01      	subs	r3, #1
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	429a      	cmp	r2, r3
 800266c:	d116      	bne.n	800269c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800267c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	4a25      	ldr	r2, [pc, #148]	; (8002718 <HAL_ETH_TransmitFrame+0x1d0>)
 8002682:	fb02 f203 	mul.w	r2, r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	4413      	add	r3, r2
 800268a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800268e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800269a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026aa:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	3301      	adds	r3, #1
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d3b6      	bcc.n	8002634 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ce:	3314      	adds	r3, #20
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e2:	3314      	adds	r3, #20
 80026e4:	2204      	movs	r2, #4
 80026e6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f0:	3304      	adds	r3, #4
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	ac02b00b 	.word	0xac02b00b
 8002718:	fffffa0c 	.word	0xfffffa0c

0800271c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002732:	2302      	movs	r3, #2
 8002734:	e074      	b.n	8002820 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002746:	e05a      	b.n	80027fe <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3301      	adds	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275c:	d10d      	bne.n	800277a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	461a      	mov	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
 8002778:	e041      	b.n	80027fe <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10b      	bne.n	80027a0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	461a      	mov	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	629a      	str	r2, [r3, #40]	; 0x28
 800279e:	e02e      	b.n	80027fe <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d103      	bne.n	80027c2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0c1b      	lsrs	r3, r3, #16
 80027ca:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80027ce:	1f1a      	subs	r2, r3, #4
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	461a      	mov	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e010      	b.n	8002820 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	db02      	blt.n	800280e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d99c      	bls.n	8002748 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283c:	3314      	adds	r3, #20
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d112      	bne.n	800286e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f003 f869 	bl	8005920 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002856:	3314      	adds	r3, #20
 8002858:	2240      	movs	r2, #64	; 0x40
 800285a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800286c:	e01b      	b.n	80028a6 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002876:	3314      	adds	r3, #20
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b01      	cmp	r3, #1
 8002880:	d111      	bne.n	80028a6 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f839 	bl	80028fa <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002890:	3314      	adds	r3, #20
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ae:	3314      	adds	r3, #20
 80028b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028b4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028be:	3314      	adds	r3, #20
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ca:	d112      	bne.n	80028f2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f81e 	bl	800290e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028da:	3314      	adds	r3, #20
 80028dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028e0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	460b      	mov	r3, r1
 800292c:	607a      	str	r2, [r7, #4]
 800292e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b82      	cmp	r3, #130	; 0x82
 8002942:	d101      	bne.n	8002948 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
 8002946:	e050      	b.n	80029ea <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2282      	movs	r2, #130	; 0x82
 800294c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 031c 	and.w	r3, r3, #28
 800295e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8a1b      	ldrh	r3, [r3, #16]
 8002964:	02db      	lsls	r3, r3, #11
 8002966:	b29b      	uxth	r3, r3
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800296e:	897b      	ldrh	r3, [r7, #10]
 8002970:	019b      	lsls	r3, r3, #6
 8002972:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f023 0302 	bic.w	r3, r3, #2
 8002982:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002994:	f7fe fed8 	bl	8001748 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800299a:	e015      	b.n	80029c8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800299c:	f7fe fed4 	bl	8001748 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029aa:	d309      	bcc.n	80029c0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e014      	b.n	80029ea <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1e4      	bne.n	800299c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	460b      	mov	r3, r1
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b42      	cmp	r3, #66	; 0x42
 8002a12:	d101      	bne.n	8002a18 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002a14:	2302      	movs	r3, #2
 8002a16:	e04e      	b.n	8002ab6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2242      	movs	r2, #66	; 0x42
 8002a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f003 031c 	and.w	r3, r3, #28
 8002a2e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8a1b      	ldrh	r3, [r3, #16]
 8002a34:	02db      	lsls	r3, r3, #11
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002a3e:	897b      	ldrh	r3, [r7, #10]
 8002a40:	019b      	lsls	r3, r3, #6
 8002a42:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f043 0302 	orr.w	r3, r3, #2
 8002a52:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002a6e:	f7fe fe6b 	bl	8001748 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a74:	e015      	b.n	8002aa2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002a76:	f7fe fe67 	bl	8001748 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a84:	d309      	bcc.n	8002a9a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e00d      	b.n	8002ab6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e4      	bne.n	8002a76 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_ETH_Start+0x16>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e01f      	b.n	8002b14 <HAL_ETH_Start+0x56>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fb45 	bl	8003174 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fb7c 	bl	80031e8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fc13 	bl	800331c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fbb0 	bl	800325c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fbdd 	bl	80032bc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_ETH_Stop+0x16>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e01f      	b.n	8002b72 <HAL_ETH_Stop+0x56>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fba2 	bl	800328c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fbcf 	bl	80032ec <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fb67 	bl	8003222 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fbe1 	bl	800331c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fb27 	bl	80031ae <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_ETH_ConfigMAC+0x1c>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0e4      	b.n	8002d62 <HAL_ETH_ConfigMAC+0x1e6>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80b1 	beq.w	8002d12 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4b6c      	ldr	r3, [pc, #432]	; (8002d6c <HAL_ETH_ConfigMAC+0x1f0>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002bc8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002bce:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002bd4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002bda:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002be0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002be6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002bec:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002bf2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002bf8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002bfe:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002c04:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002c0a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f7fe fd9c 	bl	8001760 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002c38:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002c3e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002c44:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002c4a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002c50:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002c56:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002c62:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002c64:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f7fe fd76 	bl	8001760 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c84:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c8e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002cac:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002cb2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002cb8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002cbe:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002cc4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f7fe fd3f 	bl	8001760 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d02:	2001      	movs	r0, #1
 8002d04:	f7fe fd2c 	bl	8001760 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	61da      	str	r2, [r3, #28]
 8002d10:	e01e      	b.n	8002d50 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002d20:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d42:	2001      	movs	r0, #1
 8002d44:	f7fe fd0c 	bl	8001760 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	ff20810f 	.word	0xff20810f

08002d70 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b0b0      	sub	sp, #192	; 0xc0
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d8c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d94:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dba:	663b      	str	r3, [r7, #96]	; 0x60
 8002dbc:	e001      	b.n	8002dc2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002ddc:	2340      	movs	r3, #64	; 0x40
 8002dde:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e48:	4bac      	ldr	r3, [pc, #688]	; (80030fc <ETH_MACDMAConfig+0x38c>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002e50:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002e54:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002e58:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002e5c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002e62:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002e64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002e66:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002e6a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002e70:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002e74:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002e76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002e78:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002e7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002e7c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002e80:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002e84:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002e86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e98:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	f7fe fc5b 	bl	8001760 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002eb2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002eb4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002eb8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002eba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002ebc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002ebe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002ec2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002ec8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002eca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002ece:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002ed4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002ed8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002ee0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ee2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f7fe fc36 	bl	8001760 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002efc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f06:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002f10:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f20:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f24:	4013      	ands	r3, r2
 8002f26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002f2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f2e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002f30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002f34:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002f36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002f3a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002f3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002f40:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002f46:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002f48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002f4c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002f4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f60:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	f7fe fbf7 	bl	8001760 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f7a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002f7c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002f80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f96:	2001      	movs	r0, #1
 8002f98:	f7fe fbe2 	bl	8001760 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fa4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fae:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002fb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fb8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002fca:	2304      	movs	r3, #4
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fde:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ffa:	3318      	adds	r3, #24
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003002:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003006:	4b3e      	ldr	r3, [pc, #248]	; (8003100 <ETH_MACDMAConfig+0x390>)
 8003008:	4013      	ands	r3, r2
 800300a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800300e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003010:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003012:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003014:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003016:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003018:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800301a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800301c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800301e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003020:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003022:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003024:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003026:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800302a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800302e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003030:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003042:	3318      	adds	r3, #24
 8003044:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003048:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003052:	3318      	adds	r3, #24
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800305a:	2001      	movs	r0, #1
 800305c:	f7fe fb80 	bl	8001760 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003068:	3318      	adds	r3, #24
 800306a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800306e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003074:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003078:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800307c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800307e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003080:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003084:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003086:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800308a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003098:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80030a8:	2001      	movs	r0, #1
 80030aa:	f7fe fb59 	bl	8001760 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030ba:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10f      	bne.n	80030e4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030cc:	331c      	adds	r3, #28
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e0:	331c      	adds	r3, #28
 80030e2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	461a      	mov	r2, r3
 80030ea:	2100      	movs	r1, #0
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f809 	bl	8003104 <ETH_MACAddressConfig>
}
 80030f2:	bf00      	nop
 80030f4:	37c0      	adds	r7, #192	; 0xc0
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	ff20810f 	.word	0xff20810f
 8003100:	f8de3f23 	.word	0xf8de3f23

08003104 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3305      	adds	r3, #5
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	3204      	adds	r2, #4
 800311c:	7812      	ldrb	r2, [r2, #0]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <ETH_MACAddressConfig+0x68>)
 8003126:	4413      	add	r3, r2
 8003128:	461a      	mov	r2, r3
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3303      	adds	r3, #3
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	061a      	lsls	r2, r3, #24
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3302      	adds	r3, #2
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3301      	adds	r3, #1
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	4313      	orrs	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	7812      	ldrb	r2, [r2, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <ETH_MACAddressConfig+0x6c>)
 8003156:	4413      	add	r3, r2
 8003158:	461a      	mov	r2, r3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	6013      	str	r3, [r2, #0]
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40028040 	.word	0x40028040
 8003170:	40028044 	.word	0x40028044

08003174 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0208 	orr.w	r2, r2, #8
 800318e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003198:	2001      	movs	r0, #1
 800319a:	f000 f8e9 	bl	8003370 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	601a      	str	r2, [r3, #0]
}
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0208 	bic.w	r2, r2, #8
 80031c8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80031d2:	2001      	movs	r0, #1
 80031d4:	f000 f8cc 	bl	8003370 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	601a      	str	r2, [r3, #0]
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0204 	orr.w	r2, r2, #4
 8003202:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800320c:	2001      	movs	r0, #1
 800320e:	f000 f8af 	bl	8003370 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	601a      	str	r2, [r3, #0]
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0204 	bic.w	r2, r2, #4
 800323c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003246:	2001      	movs	r0, #1
 8003248:	f000 f892 	bl	8003370 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800326c:	3318      	adds	r3, #24
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800327c:	3318      	adds	r3, #24
 800327e:	601a      	str	r2, [r3, #0]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800329c:	3318      	adds	r3, #24
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ac:	3318      	adds	r3, #24
 80032ae:	601a      	str	r2, [r3, #0]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032cc:	3318      	adds	r3, #24
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0202 	orr.w	r2, r2, #2
 80032d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032dc:	3318      	adds	r3, #24
 80032de:	601a      	str	r2, [r3, #0]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032fc:	3318      	adds	r3, #24
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0202 	bic.w	r2, r2, #2
 8003308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800330c:	3318      	adds	r3, #24
 800330e:	601a      	str	r2, [r3, #0]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003330:	3318      	adds	r3, #24
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800333c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003340:	3318      	adds	r3, #24
 8003342:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800334c:	3318      	adds	r3, #24
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003352:	2001      	movs	r0, #1
 8003354:	f000 f80c 	bl	8003370 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003362:	3318      	adds	r3, #24
 8003364:	601a      	str	r2, [r3, #0]
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <ETH_Delay+0x38>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a0b      	ldr	r2, [pc, #44]	; (80033ac <ETH_Delay+0x3c>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	0a5b      	lsrs	r3, r3, #9
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800338c:	bf00      	nop
  } 
  while (Delay --);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1e5a      	subs	r2, r3, #1
 8003392:	60fa      	str	r2, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f9      	bne.n	800338c <ETH_Delay+0x1c>
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000000 	.word	0x20000000
 80033ac:	10624dd3 	.word	0x10624dd3

080033b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	; 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	e16b      	b.n	80036a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033cc:	2201      	movs	r2, #1
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	f040 815a 	bne.w	800369e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d005      	beq.n	8003402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d130      	bne.n	8003464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	2203      	movs	r2, #3
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003438:	2201      	movs	r2, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 0201 	and.w	r2, r3, #1
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	2b03      	cmp	r3, #3
 800346e:	d017      	beq.n	80034a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2203      	movs	r2, #3
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d123      	bne.n	80034f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	08da      	lsrs	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3208      	adds	r2, #8
 80034b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	220f      	movs	r2, #15
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	08da      	lsrs	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3208      	adds	r2, #8
 80034ee:	69b9      	ldr	r1, [r7, #24]
 80034f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	2203      	movs	r2, #3
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0203 	and.w	r2, r3, #3
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80b4 	beq.w	800369e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	4b60      	ldr	r3, [pc, #384]	; (80036bc <HAL_GPIO_Init+0x30c>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	4a5f      	ldr	r2, [pc, #380]	; (80036bc <HAL_GPIO_Init+0x30c>)
 8003540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003544:	6453      	str	r3, [r2, #68]	; 0x44
 8003546:	4b5d      	ldr	r3, [pc, #372]	; (80036bc <HAL_GPIO_Init+0x30c>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003552:	4a5b      	ldr	r2, [pc, #364]	; (80036c0 <HAL_GPIO_Init+0x310>)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3302      	adds	r3, #2
 800355a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	220f      	movs	r2, #15
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_GPIO_Init+0x314>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02b      	beq.n	80035d6 <HAL_GPIO_Init+0x226>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a51      	ldr	r2, [pc, #324]	; (80036c8 <HAL_GPIO_Init+0x318>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d025      	beq.n	80035d2 <HAL_GPIO_Init+0x222>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a50      	ldr	r2, [pc, #320]	; (80036cc <HAL_GPIO_Init+0x31c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01f      	beq.n	80035ce <HAL_GPIO_Init+0x21e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4f      	ldr	r2, [pc, #316]	; (80036d0 <HAL_GPIO_Init+0x320>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d019      	beq.n	80035ca <HAL_GPIO_Init+0x21a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4e      	ldr	r2, [pc, #312]	; (80036d4 <HAL_GPIO_Init+0x324>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <HAL_GPIO_Init+0x216>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4d      	ldr	r2, [pc, #308]	; (80036d8 <HAL_GPIO_Init+0x328>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00d      	beq.n	80035c2 <HAL_GPIO_Init+0x212>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4c      	ldr	r2, [pc, #304]	; (80036dc <HAL_GPIO_Init+0x32c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <HAL_GPIO_Init+0x20e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4b      	ldr	r2, [pc, #300]	; (80036e0 <HAL_GPIO_Init+0x330>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d101      	bne.n	80035ba <HAL_GPIO_Init+0x20a>
 80035b6:	2307      	movs	r3, #7
 80035b8:	e00e      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035ba:	2308      	movs	r3, #8
 80035bc:	e00c      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035be:	2306      	movs	r3, #6
 80035c0:	e00a      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035c2:	2305      	movs	r3, #5
 80035c4:	e008      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035c6:	2304      	movs	r3, #4
 80035c8:	e006      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035ca:	2303      	movs	r3, #3
 80035cc:	e004      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e002      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035d6:	2300      	movs	r3, #0
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	f002 0203 	and.w	r2, r2, #3
 80035de:	0092      	lsls	r2, r2, #2
 80035e0:	4093      	lsls	r3, r2
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035e8:	4935      	ldr	r1, [pc, #212]	; (80036c0 <HAL_GPIO_Init+0x310>)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3302      	adds	r3, #2
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f6:	4b3b      	ldr	r3, [pc, #236]	; (80036e4 <HAL_GPIO_Init+0x334>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800361a:	4a32      	ldr	r2, [pc, #200]	; (80036e4 <HAL_GPIO_Init+0x334>)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003620:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <HAL_GPIO_Init+0x334>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003644:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <HAL_GPIO_Init+0x334>)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364a:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <HAL_GPIO_Init+0x334>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800366e:	4a1d      	ldr	r2, [pc, #116]	; (80036e4 <HAL_GPIO_Init+0x334>)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003674:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_GPIO_Init+0x334>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003698:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <HAL_GPIO_Init+0x334>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	f67f ae90 	bls.w	80033cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3724      	adds	r7, #36	; 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40013800 	.word	0x40013800
 80036c4:	40020000 	.word	0x40020000
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020800 	.word	0x40020800
 80036d0:	40020c00 	.word	0x40020c00
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40021400 	.word	0x40021400
 80036dc:	40021800 	.word	0x40021800
 80036e0:	40021c00 	.word	0x40021c00
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	887b      	ldrh	r3, [r7, #2]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	e001      	b.n	800370a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	807b      	strh	r3, [r7, #2]
 8003724:	4613      	mov	r3, r2
 8003726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003728:	787b      	ldrb	r3, [r7, #1]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003734:	e003      	b.n	800373e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003736:	887b      	ldrh	r3, [r7, #2]
 8003738:	041a      	lsls	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	619a      	str	r2, [r3, #24]
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e264      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d075      	beq.n	8003856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800376a:	4ba3      	ldr	r3, [pc, #652]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d00c      	beq.n	8003790 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003776:	4ba0      	ldr	r3, [pc, #640]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800377e:	2b08      	cmp	r3, #8
 8003780:	d112      	bne.n	80037a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003782:	4b9d      	ldr	r3, [pc, #628]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378e:	d10b      	bne.n	80037a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003790:	4b99      	ldr	r3, [pc, #612]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d05b      	beq.n	8003854 <HAL_RCC_OscConfig+0x108>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d157      	bne.n	8003854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e23f      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b0:	d106      	bne.n	80037c0 <HAL_RCC_OscConfig+0x74>
 80037b2:	4b91      	ldr	r3, [pc, #580]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a90      	ldr	r2, [pc, #576]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e01d      	b.n	80037fc <HAL_RCC_OscConfig+0xb0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x98>
 80037ca:	4b8b      	ldr	r3, [pc, #556]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a8a      	ldr	r2, [pc, #552]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b88      	ldr	r3, [pc, #544]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a87      	ldr	r2, [pc, #540]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e00b      	b.n	80037fc <HAL_RCC_OscConfig+0xb0>
 80037e4:	4b84      	ldr	r3, [pc, #528]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a83      	ldr	r2, [pc, #524]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b81      	ldr	r3, [pc, #516]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a80      	ldr	r2, [pc, #512]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003804:	f7fd ffa0 	bl	8001748 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800380c:	f7fd ff9c 	bl	8001748 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e204      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	4b76      	ldr	r3, [pc, #472]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0xc0>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fd ff8c 	bl	8001748 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003834:	f7fd ff88 	bl	8001748 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	; 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e1f0      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003846:	4b6c      	ldr	r3, [pc, #432]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0xe8>
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d063      	beq.n	800392a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003862:	4b65      	ldr	r3, [pc, #404]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386e:	4b62      	ldr	r3, [pc, #392]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003876:	2b08      	cmp	r3, #8
 8003878:	d11c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800387a:	4b5f      	ldr	r3, [pc, #380]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d116      	bne.n	80038b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003886:	4b5c      	ldr	r3, [pc, #368]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_RCC_OscConfig+0x152>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e1c4      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389e:	4b56      	ldr	r3, [pc, #344]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4952      	ldr	r1, [pc, #328]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b2:	e03a      	b.n	800392a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d020      	beq.n	80038fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038bc:	4b4f      	ldr	r3, [pc, #316]	; (80039fc <HAL_RCC_OscConfig+0x2b0>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fd ff41 	bl	8001748 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ca:	f7fd ff3d 	bl	8001748 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e1a5      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e8:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4940      	ldr	r1, [pc, #256]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]
 80038fc:	e015      	b.n	800392a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fe:	4b3f      	ldr	r3, [pc, #252]	; (80039fc <HAL_RCC_OscConfig+0x2b0>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fd ff20 	bl	8001748 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390c:	f7fd ff1c 	bl	8001748 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e184      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391e:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d030      	beq.n	8003998 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d016      	beq.n	800396c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393e:	4b30      	ldr	r3, [pc, #192]	; (8003a00 <HAL_RCC_OscConfig+0x2b4>)
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fd ff00 	bl	8001748 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394c:	f7fd fefc 	bl	8001748 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e164      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395e:	4b26      	ldr	r3, [pc, #152]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0x200>
 800396a:	e015      	b.n	8003998 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <HAL_RCC_OscConfig+0x2b4>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003972:	f7fd fee9 	bl	8001748 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800397a:	f7fd fee5 	bl	8001748 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e14d      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398c:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 800398e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a0 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a6:	2300      	movs	r3, #0
 80039a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039aa:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10f      	bne.n	80039d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	4a0e      	ldr	r2, [pc, #56]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c4:	6413      	str	r3, [r2, #64]	; 0x40
 80039c6:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d2:	2301      	movs	r3, #1
 80039d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_RCC_OscConfig+0x2b8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d121      	bne.n	8003a26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <HAL_RCC_OscConfig+0x2b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <HAL_RCC_OscConfig+0x2b8>)
 80039e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ee:	f7fd feab 	bl	8001748 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	e011      	b.n	8003a1a <HAL_RCC_OscConfig+0x2ce>
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	42470000 	.word	0x42470000
 8003a00:	42470e80 	.word	0x42470e80
 8003a04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a08:	f7fd fe9e 	bl	8001748 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e106      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1a:	4b85      	ldr	r3, [pc, #532]	; (8003c30 <HAL_RCC_OscConfig+0x4e4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d106      	bne.n	8003a3c <HAL_RCC_OscConfig+0x2f0>
 8003a2e:	4b81      	ldr	r3, [pc, #516]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a80      	ldr	r2, [pc, #512]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3a:	e01c      	b.n	8003a76 <HAL_RCC_OscConfig+0x32a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d10c      	bne.n	8003a5e <HAL_RCC_OscConfig+0x312>
 8003a44:	4b7b      	ldr	r3, [pc, #492]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	4a7a      	ldr	r2, [pc, #488]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a50:	4b78      	ldr	r3, [pc, #480]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a77      	ldr	r2, [pc, #476]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5c:	e00b      	b.n	8003a76 <HAL_RCC_OscConfig+0x32a>
 8003a5e:	4b75      	ldr	r3, [pc, #468]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	4a74      	ldr	r2, [pc, #464]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6a:	4b72      	ldr	r3, [pc, #456]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	4a71      	ldr	r2, [pc, #452]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003a70:	f023 0304 	bic.w	r3, r3, #4
 8003a74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d015      	beq.n	8003aaa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7e:	f7fd fe63 	bl	8001748 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fd fe5f 	bl	8001748 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e0c5      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9c:	4b65      	ldr	r3, [pc, #404]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ee      	beq.n	8003a86 <HAL_RCC_OscConfig+0x33a>
 8003aa8:	e014      	b.n	8003ad4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aaa:	f7fd fe4d 	bl	8001748 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fd fe49 	bl	8001748 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0af      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac8:	4b5a      	ldr	r3, [pc, #360]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ee      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d105      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ada:	4b56      	ldr	r3, [pc, #344]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	4a55      	ldr	r2, [pc, #340]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 809b 	beq.w	8003c26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003af0:	4b50      	ldr	r3, [pc, #320]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d05c      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d141      	bne.n	8003b88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b04:	4b4c      	ldr	r3, [pc, #304]	; (8003c38 <HAL_RCC_OscConfig+0x4ec>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fd fe1d 	bl	8001748 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fd fe19 	bl	8001748 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e081      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b24:	4b43      	ldr	r3, [pc, #268]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	019b      	lsls	r3, r3, #6
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	061b      	lsls	r3, r3, #24
 8003b54:	4937      	ldr	r1, [pc, #220]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b5a:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <HAL_RCC_OscConfig+0x4ec>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fd fdf2 	bl	8001748 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b68:	f7fd fdee 	bl	8001748 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e056      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7a:	4b2e      	ldr	r3, [pc, #184]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x41c>
 8003b86:	e04e      	b.n	8003c26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_RCC_OscConfig+0x4ec>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8e:	f7fd fddb 	bl	8001748 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b96:	f7fd fdd7 	bl	8001748 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e03f      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba8:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f0      	bne.n	8003b96 <HAL_RCC_OscConfig+0x44a>
 8003bb4:	e037      	b.n	8003c26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e032      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bc2:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <HAL_RCC_OscConfig+0x4e8>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d028      	beq.n	8003c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d121      	bne.n	8003c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d11a      	bne.n	8003c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bf8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d111      	bne.n	8003c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d001      	beq.n	8003c26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40007000 	.word	0x40007000
 8003c34:	40023800 	.word	0x40023800
 8003c38:	42470060 	.word	0x42470060

08003c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0cc      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c50:	4b68      	ldr	r3, [pc, #416]	; (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d90c      	bls.n	8003c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5e:	4b65      	ldr	r3, [pc, #404]	; (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b63      	ldr	r3, [pc, #396]	; (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0b8      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d020      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c90:	4b59      	ldr	r3, [pc, #356]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4a58      	ldr	r2, [pc, #352]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ca8:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4a52      	ldr	r2, [pc, #328]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb4:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	494d      	ldr	r1, [pc, #308]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d044      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d119      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e07f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfa:	4b3f      	ldr	r3, [pc, #252]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e06f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e067      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d1a:	4b37      	ldr	r3, [pc, #220]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f023 0203 	bic.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4934      	ldr	r1, [pc, #208]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d2c:	f7fd fd0c 	bl	8001748 <HAL_GetTick>
 8003d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d34:	f7fd fd08 	bl	8001748 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e04f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 020c 	and.w	r2, r3, #12
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d1eb      	bne.n	8003d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d20c      	bcs.n	8003d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b22      	ldr	r3, [pc, #136]	; (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e032      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d90:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4916      	ldr	r1, [pc, #88]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	490e      	ldr	r1, [pc, #56]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dc2:	f000 f821 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	490a      	ldr	r1, [pc, #40]	; (8003dfc <HAL_RCC_ClockConfig+0x1c0>)
 8003dd4:	5ccb      	ldrb	r3, [r1, r3]
 8003dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dda:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <HAL_RCC_ClockConfig+0x1c8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd f9e0 	bl	80011a8 <HAL_InitTick>

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023c00 	.word	0x40023c00
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	08016a7c 	.word	0x08016a7c
 8003e00:	20000000 	.word	0x20000000
 8003e04:	20000004 	.word	0x20000004

08003e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e08:	b5b0      	push	{r4, r5, r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e0e:	2100      	movs	r1, #0
 8003e10:	6079      	str	r1, [r7, #4]
 8003e12:	2100      	movs	r1, #0
 8003e14:	60f9      	str	r1, [r7, #12]
 8003e16:	2100      	movs	r1, #0
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e1e:	4952      	ldr	r1, [pc, #328]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e20:	6889      	ldr	r1, [r1, #8]
 8003e22:	f001 010c 	and.w	r1, r1, #12
 8003e26:	2908      	cmp	r1, #8
 8003e28:	d00d      	beq.n	8003e46 <HAL_RCC_GetSysClockFreq+0x3e>
 8003e2a:	2908      	cmp	r1, #8
 8003e2c:	f200 8094 	bhi.w	8003f58 <HAL_RCC_GetSysClockFreq+0x150>
 8003e30:	2900      	cmp	r1, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_RCC_GetSysClockFreq+0x32>
 8003e34:	2904      	cmp	r1, #4
 8003e36:	d003      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0x38>
 8003e38:	e08e      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e3a:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x164>)
 8003e3c:	60bb      	str	r3, [r7, #8]
       break;
 8003e3e:	e08e      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e40:	4b4b      	ldr	r3, [pc, #300]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e42:	60bb      	str	r3, [r7, #8]
      break;
 8003e44:	e08b      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e46:	4948      	ldr	r1, [pc, #288]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e48:	6849      	ldr	r1, [r1, #4]
 8003e4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003e4e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e50:	4945      	ldr	r1, [pc, #276]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e52:	6849      	ldr	r1, [r1, #4]
 8003e54:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003e58:	2900      	cmp	r1, #0
 8003e5a:	d024      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5c:	4942      	ldr	r1, [pc, #264]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e5e:	6849      	ldr	r1, [r1, #4]
 8003e60:	0989      	lsrs	r1, r1, #6
 8003e62:	4608      	mov	r0, r1
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003e6c:	f04f 0500 	mov.w	r5, #0
 8003e70:	ea00 0204 	and.w	r2, r0, r4
 8003e74:	ea01 0305 	and.w	r3, r1, r5
 8003e78:	493d      	ldr	r1, [pc, #244]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e7a:	fb01 f003 	mul.w	r0, r1, r3
 8003e7e:	2100      	movs	r1, #0
 8003e80:	fb01 f102 	mul.w	r1, r1, r2
 8003e84:	1844      	adds	r4, r0, r1
 8003e86:	493a      	ldr	r1, [pc, #232]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e88:	fba2 0101 	umull	r0, r1, r2, r1
 8003e8c:	1863      	adds	r3, r4, r1
 8003e8e:	4619      	mov	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	f7fc f9ea 	bl	8000270 <__aeabi_uldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	e04a      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea6:	4b30      	ldr	r3, [pc, #192]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	099b      	lsrs	r3, r3, #6
 8003eac:	461a      	mov	r2, r3
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	ea02 0400 	and.w	r4, r2, r0
 8003ebe:	ea03 0501 	and.w	r5, r3, r1
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	014b      	lsls	r3, r1, #5
 8003ed0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ed4:	0142      	lsls	r2, r0, #5
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	1b00      	subs	r0, r0, r4
 8003edc:	eb61 0105 	sbc.w	r1, r1, r5
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	018b      	lsls	r3, r1, #6
 8003eea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003eee:	0182      	lsls	r2, r0, #6
 8003ef0:	1a12      	subs	r2, r2, r0
 8003ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ef6:	f04f 0000 	mov.w	r0, #0
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	00d9      	lsls	r1, r3, #3
 8003f00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f04:	00d0      	lsls	r0, r2, #3
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	1912      	adds	r2, r2, r4
 8003f0c:	eb45 0303 	adc.w	r3, r5, r3
 8003f10:	f04f 0000 	mov.w	r0, #0
 8003f14:	f04f 0100 	mov.w	r1, #0
 8003f18:	0299      	lsls	r1, r3, #10
 8003f1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f1e:	0290      	lsls	r0, r2, #10
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	f7fc f99e 	bl	8000270 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4613      	mov	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	3301      	adds	r3, #1
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	60bb      	str	r3, [r7, #8]
      break;
 8003f56:	e002      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x164>)
 8003f5a:	60bb      	str	r3, [r7, #8]
      break;
 8003f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bdb0      	pop	{r4, r5, r7, pc}
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	00f42400 	.word	0x00f42400
 8003f70:	017d7840 	.word	0x017d7840

08003f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20000000 	.word	0x20000000

08003f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f90:	f7ff fff0 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0a9b      	lsrs	r3, r3, #10
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4903      	ldr	r1, [pc, #12]	; (8003fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	08016a8c 	.word	0x08016a8c

08003fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fb8:	f7ff ffdc 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	0b5b      	lsrs	r3, r3, #13
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	4903      	ldr	r1, [pc, #12]	; (8003fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fca:	5ccb      	ldrb	r3, [r1, r3]
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	08016a8c 	.word	0x08016a8c

08003fdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	220f      	movs	r2, #15
 8003fea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fec:	4b12      	ldr	r3, [pc, #72]	; (8004038 <HAL_RCC_GetClockConfig+0x5c>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0203 	and.w	r2, r3, #3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <HAL_RCC_GetClockConfig+0x5c>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <HAL_RCC_GetClockConfig+0x5c>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_RCC_GetClockConfig+0x5c>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	08db      	lsrs	r3, r3, #3
 8004016:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800401e:	4b07      	ldr	r3, [pc, #28]	; (800403c <HAL_RCC_GetClockConfig+0x60>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0207 	and.w	r2, r3, #7
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	601a      	str	r2, [r3, #0]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800
 800403c:	40023c00 	.word	0x40023c00

08004040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e041      	b.n	80040d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f839 	bl	80040de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f000 f9d8 	bl	8004434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d001      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e04e      	b.n	80041aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a23      	ldr	r2, [pc, #140]	; (80041b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d022      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d01d      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1f      	ldr	r2, [pc, #124]	; (80041bc <HAL_TIM_Base_Start_IT+0xc8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d018      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d013      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00e      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d009      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a19      	ldr	r2, [pc, #100]	; (80041cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d004      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d111      	bne.n	8004198 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b06      	cmp	r3, #6
 8004184:	d010      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004196:	e007      	b.n	80041a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40000800 	.word	0x40000800
 80041c4:	40000c00 	.word	0x40000c00
 80041c8:	40010400 	.word	0x40010400
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40001800 	.word	0x40001800

080041d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d122      	bne.n	8004230 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d11b      	bne.n	8004230 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0202 	mvn.w	r2, #2
 8004200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8ee 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 800421c:	e005      	b.n	800422a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f8e0 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f8f1 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b04      	cmp	r3, #4
 800423c:	d122      	bne.n	8004284 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b04      	cmp	r3, #4
 800424a:	d11b      	bne.n	8004284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0204 	mvn.w	r2, #4
 8004254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8c4 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8004270:	e005      	b.n	800427e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f8b6 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f8c7 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b08      	cmp	r3, #8
 8004290:	d122      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b08      	cmp	r3, #8
 800429e:	d11b      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0208 	mvn.w	r2, #8
 80042a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2204      	movs	r2, #4
 80042ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f89a 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 80042c4:	e005      	b.n	80042d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f88c 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f89d 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d122      	bne.n	800432c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d11b      	bne.n	800432c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0210 	mvn.w	r2, #16
 80042fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2208      	movs	r2, #8
 8004302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f870 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f862 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f873 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d10e      	bne.n	8004358 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b01      	cmp	r3, #1
 8004346:	d107      	bne.n	8004358 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0201 	mvn.w	r2, #1
 8004350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fc fdf4 	bl	8000f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b80      	cmp	r3, #128	; 0x80
 8004364:	d10e      	bne.n	8004384 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d107      	bne.n	8004384 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800437c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f902 	bl	8004588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d10e      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d107      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f838 	bl	8004420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d10e      	bne.n	80043dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d107      	bne.n	80043dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0220 	mvn.w	r2, #32
 80043d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8cc 	bl	8004574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a40      	ldr	r2, [pc, #256]	; (8004548 <TIM_Base_SetConfig+0x114>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004452:	d00f      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a3d      	ldr	r2, [pc, #244]	; (800454c <TIM_Base_SetConfig+0x118>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00b      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a3c      	ldr	r2, [pc, #240]	; (8004550 <TIM_Base_SetConfig+0x11c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d007      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a3b      	ldr	r2, [pc, #236]	; (8004554 <TIM_Base_SetConfig+0x120>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a3a      	ldr	r2, [pc, #232]	; (8004558 <TIM_Base_SetConfig+0x124>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d108      	bne.n	8004486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a2f      	ldr	r2, [pc, #188]	; (8004548 <TIM_Base_SetConfig+0x114>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d02b      	beq.n	80044e6 <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004494:	d027      	beq.n	80044e6 <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a2c      	ldr	r2, [pc, #176]	; (800454c <TIM_Base_SetConfig+0x118>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d023      	beq.n	80044e6 <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2b      	ldr	r2, [pc, #172]	; (8004550 <TIM_Base_SetConfig+0x11c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01f      	beq.n	80044e6 <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a2a      	ldr	r2, [pc, #168]	; (8004554 <TIM_Base_SetConfig+0x120>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d01b      	beq.n	80044e6 <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a29      	ldr	r2, [pc, #164]	; (8004558 <TIM_Base_SetConfig+0x124>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d017      	beq.n	80044e6 <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a28      	ldr	r2, [pc, #160]	; (800455c <TIM_Base_SetConfig+0x128>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a27      	ldr	r2, [pc, #156]	; (8004560 <TIM_Base_SetConfig+0x12c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00f      	beq.n	80044e6 <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a26      	ldr	r2, [pc, #152]	; (8004564 <TIM_Base_SetConfig+0x130>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00b      	beq.n	80044e6 <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a25      	ldr	r2, [pc, #148]	; (8004568 <TIM_Base_SetConfig+0x134>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d007      	beq.n	80044e6 <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a24      	ldr	r2, [pc, #144]	; (800456c <TIM_Base_SetConfig+0x138>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d003      	beq.n	80044e6 <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a23      	ldr	r2, [pc, #140]	; (8004570 <TIM_Base_SetConfig+0x13c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d108      	bne.n	80044f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <TIM_Base_SetConfig+0x114>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <TIM_Base_SetConfig+0xf8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a0c      	ldr	r2, [pc, #48]	; (8004558 <TIM_Base_SetConfig+0x124>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d103      	bne.n	8004534 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	615a      	str	r2, [r3, #20]
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40010400 	.word	0x40010400
 800455c:	40014000 	.word	0x40014000
 8004560:	40014400 	.word	0x40014400
 8004564:	40014800 	.word	0x40014800
 8004568:	40001800 	.word	0x40001800
 800456c:	40001c00 	.word	0x40001c00
 8004570:	40002000 	.word	0x40002000

08004574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e03f      	b.n	800462e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fc fd30 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2224      	movs	r2, #36	; 0x24
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fddb 	bl	800519c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b08a      	sub	sp, #40	; 0x28
 800463a:	af02      	add	r7, sp, #8
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	603b      	str	r3, [r7, #0]
 8004642:	4613      	mov	r3, r2
 8004644:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b20      	cmp	r3, #32
 8004654:	d17c      	bne.n	8004750 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_UART_Transmit+0x2c>
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e075      	b.n	8004752 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_UART_Transmit+0x3e>
 8004670:	2302      	movs	r3, #2
 8004672:	e06e      	b.n	8004752 <HAL_UART_Transmit+0x11c>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2221      	movs	r2, #33	; 0x21
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800468a:	f7fd f85d 	bl	8001748 <HAL_GetTick>
 800468e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	88fa      	ldrh	r2, [r7, #6]
 8004694:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	88fa      	ldrh	r2, [r7, #6]
 800469a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a4:	d108      	bne.n	80046b8 <HAL_UART_Transmit+0x82>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	e003      	b.n	80046c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046c8:	e02a      	b.n	8004720 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2200      	movs	r2, #0
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 fb1f 	bl	8004d18 <UART_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e036      	b.n	8004752 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10b      	bne.n	8004702 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	3302      	adds	r3, #2
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	e007      	b.n	8004712 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	3301      	adds	r3, #1
 8004710:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1cf      	bne.n	80046ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2200      	movs	r2, #0
 8004732:	2140      	movs	r1, #64	; 0x40
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 faef 	bl	8004d18 <UART_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e006      	b.n	8004752 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e000      	b.n	8004752 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	3720      	adds	r7, #32
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	4613      	mov	r3, r2
 8004766:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b20      	cmp	r3, #32
 8004772:	d11d      	bne.n	80047b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_UART_Receive_IT+0x26>
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e016      	b.n	80047b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_UART_Receive_IT+0x38>
 800478e:	2302      	movs	r3, #2
 8004790:	e00f      	b.n	80047b2 <HAL_UART_Receive_IT+0x58>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	461a      	mov	r2, r3
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fb24 	bl	8004df4 <UART_Start_Receive_IT>
 80047ac:	4603      	mov	r3, r0
 80047ae:	e000      	b.n	80047b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80047b0:	2302      	movs	r3, #2
  }
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b0ba      	sub	sp, #232	; 0xe8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10f      	bne.n	8004822 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_UART_IRQHandler+0x66>
 800480e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fc03 	bl	8005026 <UART_Receive_IT>
      return;
 8004820:	e256      	b.n	8004cd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80de 	beq.w	80049e8 <HAL_UART_IRQHandler+0x22c>
 800482c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80d1 	beq.w	80049e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <HAL_UART_IRQHandler+0xae>
 8004852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f043 0201 	orr.w	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00b      	beq.n	800488e <HAL_UART_IRQHandler+0xd2>
 8004876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f043 0202 	orr.w	r2, r3, #2
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800488e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_UART_IRQHandler+0xf6>
 800489a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f043 0204 	orr.w	r2, r3, #4
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d011      	beq.n	80048e2 <HAL_UART_IRQHandler+0x126>
 80048be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d105      	bne.n	80048d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f043 0208 	orr.w	r2, r3, #8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 81ed 	beq.w	8004cc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_UART_IRQHandler+0x14e>
 80048f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fb8e 	bl	8005026 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <HAL_UART_IRQHandler+0x17a>
 800492e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004932:	2b00      	cmp	r3, #0
 8004934:	d04f      	beq.n	80049d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa96 	bl	8004e68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d141      	bne.n	80049ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3314      	adds	r3, #20
 8004950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004958:	e853 3f00 	ldrex	r3, [r3]
 800495c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004960:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3314      	adds	r3, #20
 8004972:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004976:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800497a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004982:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800498e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1d9      	bne.n	800494a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	2b00      	cmp	r3, #0
 800499c:	d013      	beq.n	80049c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	4a7d      	ldr	r2, [pc, #500]	; (8004b98 <HAL_UART_IRQHandler+0x3dc>)
 80049a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fd f8fc 	bl	8001ba8 <HAL_DMA_Abort_IT>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d016      	beq.n	80049e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049c0:	4610      	mov	r0, r2
 80049c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	e00e      	b.n	80049e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f990 	bl	8004cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049cc:	e00a      	b.n	80049e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f98c 	bl	8004cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	e006      	b.n	80049e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f988 	bl	8004cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049e2:	e170      	b.n	8004cc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e4:	bf00      	nop
    return;
 80049e6:	e16e      	b.n	8004cc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	f040 814a 	bne.w	8004c86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f6:	f003 0310 	and.w	r3, r3, #16
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 8143 	beq.w	8004c86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 813c 	beq.w	8004c86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	f040 80b4 	bne.w	8004b9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8140 	beq.w	8004cca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a52:	429a      	cmp	r2, r3
 8004a54:	f080 8139 	bcs.w	8004cca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6a:	f000 8088 	beq.w	8004b7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004aa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1d9      	bne.n	8004a6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3314      	adds	r3, #20
 8004ac0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3314      	adds	r3, #20
 8004ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ade:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e1      	bne.n	8004aba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3314      	adds	r3, #20
 8004afc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3314      	adds	r3, #20
 8004b16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e3      	bne.n	8004af6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	330c      	adds	r3, #12
 8004b42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b4e:	f023 0310 	bic.w	r3, r3, #16
 8004b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b60:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e3      	bne.n	8004b3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fc ffa5 	bl	8001ac8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f8b6 	bl	8004d00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b94:	e099      	b.n	8004cca <HAL_UART_IRQHandler+0x50e>
 8004b96:	bf00      	nop
 8004b98:	08004f2f 	.word	0x08004f2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 808b 	beq.w	8004cce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8086 	beq.w	8004cce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	330c      	adds	r3, #12
 8004bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004be6:	647a      	str	r2, [r7, #68]	; 0x44
 8004be8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1e3      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3314      	adds	r3, #20
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	623b      	str	r3, [r7, #32]
   return(result);
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3314      	adds	r3, #20
 8004c1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c1e:	633a      	str	r2, [r7, #48]	; 0x30
 8004c20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e3      	bne.n	8004bfa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0310 	bic.w	r3, r3, #16
 8004c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	330c      	adds	r3, #12
 8004c60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c64:	61fa      	str	r2, [r7, #28]
 8004c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	69b9      	ldr	r1, [r7, #24]
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	617b      	str	r3, [r7, #20]
   return(result);
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e3      	bne.n	8004c40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f83e 	bl	8004d00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c84:	e023      	b.n	8004cce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x4ea>
 8004c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f959 	bl	8004f56 <UART_Transmit_IT>
    return;
 8004ca4:	e014      	b.n	8004cd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00e      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x514>
 8004cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f999 	bl	8004ff6 <UART_EndTransmit_IT>
    return;
 8004cc4:	e004      	b.n	8004cd0 <HAL_UART_IRQHandler+0x514>
    return;
 8004cc6:	bf00      	nop
 8004cc8:	e002      	b.n	8004cd0 <HAL_UART_IRQHandler+0x514>
      return;
 8004cca:	bf00      	nop
 8004ccc:	e000      	b.n	8004cd0 <HAL_UART_IRQHandler+0x514>
      return;
 8004cce:	bf00      	nop
  }
}
 8004cd0:	37e8      	adds	r7, #232	; 0xe8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop

08004cd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b090      	sub	sp, #64	; 0x40
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	4613      	mov	r3, r2
 8004d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d28:	e050      	b.n	8004dcc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d04c      	beq.n	8004dcc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d38:	f7fc fd06 	bl	8001748 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d241      	bcs.n	8004dcc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	330c      	adds	r3, #12
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d68:	637a      	str	r2, [r7, #52]	; 0x34
 8004d6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e5      	bne.n	8004d48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3314      	adds	r3, #20
 8004d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
 8004d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3314      	adds	r3, #20
 8004d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d9c:	623a      	str	r2, [r7, #32]
 8004d9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	69f9      	ldr	r1, [r7, #28]
 8004da2:	6a3a      	ldr	r2, [r7, #32]
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e5      	bne.n	8004d7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e00f      	b.n	8004dec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	79fb      	ldrb	r3, [r7, #7]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d09f      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3740      	adds	r7, #64	; 0x40
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	88fa      	ldrh	r2, [r7, #6]
 8004e0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	88fa      	ldrh	r2, [r7, #6]
 8004e12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2222      	movs	r2, #34	; 0x22
 8004e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e38:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0220 	orr.w	r2, r2, #32
 8004e58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b095      	sub	sp, #84	; 0x54
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	330c      	adds	r3, #12
 8004e76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7a:	e853 3f00 	ldrex	r3, [r3]
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e90:	643a      	str	r2, [r7, #64]	; 0x40
 8004e92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e98:	e841 2300 	strex	r3, r2, [r1]
 8004e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1e5      	bne.n	8004e70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3314      	adds	r3, #20
 8004eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f023 0301 	bic.w	r3, r3, #1
 8004eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3314      	adds	r3, #20
 8004ec2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ec4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e5      	bne.n	8004ea4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d119      	bne.n	8004f14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f023 0310 	bic.w	r3, r3, #16
 8004ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f00:	61ba      	str	r2, [r7, #24]
 8004f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6979      	ldr	r1, [r7, #20]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e5      	bne.n	8004ee0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f22:	bf00      	nop
 8004f24:	3754      	adds	r7, #84	; 0x54
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7ff fecf 	bl	8004cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b21      	cmp	r3, #33	; 0x21
 8004f68:	d13e      	bne.n	8004fe8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f72:	d114      	bne.n	8004f9e <UART_Transmit_IT+0x48>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d110      	bne.n	8004f9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	1c9a      	adds	r2, r3, #2
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	621a      	str	r2, [r3, #32]
 8004f9c:	e008      	b.n	8004fb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	1c59      	adds	r1, r3, #1
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6211      	str	r1, [r2, #32]
 8004fa8:	781a      	ldrb	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10f      	bne.n	8004fe4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fe2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e000      	b.n	8004fea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
  }
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800500c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff fe5e 	bl	8004cd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b08c      	sub	sp, #48	; 0x30
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b22      	cmp	r3, #34	; 0x22
 8005038:	f040 80ab 	bne.w	8005192 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005044:	d117      	bne.n	8005076 <UART_Receive_IT+0x50>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d113      	bne.n	8005076 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	b29b      	uxth	r3, r3
 8005060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005064:	b29a      	uxth	r2, r3
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	1c9a      	adds	r2, r3, #2
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	629a      	str	r2, [r3, #40]	; 0x28
 8005074:	e026      	b.n	80050c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800507c:	2300      	movs	r3, #0
 800507e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005088:	d007      	beq.n	800509a <UART_Receive_IT+0x74>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <UART_Receive_IT+0x82>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	e008      	b.n	80050ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	4619      	mov	r1, r3
 80050d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d15a      	bne.n	800518e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0220 	bic.w	r2, r2, #32
 80050e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0201 	bic.w	r2, r2, #1
 8005106:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	2b01      	cmp	r3, #1
 8005116:	d135      	bne.n	8005184 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	613b      	str	r3, [r7, #16]
   return(result);
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f023 0310 	bic.w	r3, r3, #16
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	330c      	adds	r3, #12
 800513c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513e:	623a      	str	r2, [r7, #32]
 8005140:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	69f9      	ldr	r1, [r7, #28]
 8005144:	6a3a      	ldr	r2, [r7, #32]
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	61bb      	str	r3, [r7, #24]
   return(result);
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e5      	bne.n	800511e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b10      	cmp	r3, #16
 800515e:	d10a      	bne.n	8005176 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800517a:	4619      	mov	r1, r3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fdbf 	bl	8004d00 <HAL_UARTEx_RxEventCallback>
 8005182:	e002      	b.n	800518a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7fc f98d 	bl	80014a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	e002      	b.n	8005194 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e000      	b.n	8005194 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005192:	2302      	movs	r3, #2
  }
}
 8005194:	4618      	mov	r0, r3
 8005196:	3730      	adds	r7, #48	; 0x30
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a0:	b09f      	sub	sp, #124	; 0x7c
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b2:	68d9      	ldr	r1, [r3, #12]
 80051b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	ea40 0301 	orr.w	r3, r0, r1
 80051bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80051d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051e0:	f021 010c 	bic.w	r1, r1, #12
 80051e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051ea:	430b      	orrs	r3, r1
 80051ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fa:	6999      	ldr	r1, [r3, #24]
 80051fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	ea40 0301 	orr.w	r3, r0, r1
 8005204:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4bc5      	ldr	r3, [pc, #788]	; (8005520 <UART_SetConfig+0x384>)
 800520c:	429a      	cmp	r2, r3
 800520e:	d004      	beq.n	800521a <UART_SetConfig+0x7e>
 8005210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	4bc3      	ldr	r3, [pc, #780]	; (8005524 <UART_SetConfig+0x388>)
 8005216:	429a      	cmp	r2, r3
 8005218:	d103      	bne.n	8005222 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800521a:	f7fe fecb 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
 800521e:	6778      	str	r0, [r7, #116]	; 0x74
 8005220:	e002      	b.n	8005228 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005222:	f7fe feb3 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8005226:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005230:	f040 80b6 	bne.w	80053a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005236:	461c      	mov	r4, r3
 8005238:	f04f 0500 	mov.w	r5, #0
 800523c:	4622      	mov	r2, r4
 800523e:	462b      	mov	r3, r5
 8005240:	1891      	adds	r1, r2, r2
 8005242:	6439      	str	r1, [r7, #64]	; 0x40
 8005244:	415b      	adcs	r3, r3
 8005246:	647b      	str	r3, [r7, #68]	; 0x44
 8005248:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800524c:	1912      	adds	r2, r2, r4
 800524e:	eb45 0303 	adc.w	r3, r5, r3
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f04f 0100 	mov.w	r1, #0
 800525a:	00d9      	lsls	r1, r3, #3
 800525c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005260:	00d0      	lsls	r0, r2, #3
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	1911      	adds	r1, r2, r4
 8005268:	6639      	str	r1, [r7, #96]	; 0x60
 800526a:	416b      	adcs	r3, r5
 800526c:	667b      	str	r3, [r7, #100]	; 0x64
 800526e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	461a      	mov	r2, r3
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	1891      	adds	r1, r2, r2
 800527a:	63b9      	str	r1, [r7, #56]	; 0x38
 800527c:	415b      	adcs	r3, r3
 800527e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005284:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005288:	f7fa fff2 	bl	8000270 <__aeabi_uldivmod>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4ba5      	ldr	r3, [pc, #660]	; (8005528 <UART_SetConfig+0x38c>)
 8005292:	fba3 2302 	umull	r2, r3, r3, r2
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	011e      	lsls	r6, r3, #4
 800529a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800529c:	461c      	mov	r4, r3
 800529e:	f04f 0500 	mov.w	r5, #0
 80052a2:	4622      	mov	r2, r4
 80052a4:	462b      	mov	r3, r5
 80052a6:	1891      	adds	r1, r2, r2
 80052a8:	6339      	str	r1, [r7, #48]	; 0x30
 80052aa:	415b      	adcs	r3, r3
 80052ac:	637b      	str	r3, [r7, #52]	; 0x34
 80052ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052b2:	1912      	adds	r2, r2, r4
 80052b4:	eb45 0303 	adc.w	r3, r5, r3
 80052b8:	f04f 0000 	mov.w	r0, #0
 80052bc:	f04f 0100 	mov.w	r1, #0
 80052c0:	00d9      	lsls	r1, r3, #3
 80052c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052c6:	00d0      	lsls	r0, r2, #3
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	1911      	adds	r1, r2, r4
 80052ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80052d0:	416b      	adcs	r3, r5
 80052d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	461a      	mov	r2, r3
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	1891      	adds	r1, r2, r2
 80052e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80052e2:	415b      	adcs	r3, r3
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80052ee:	f7fa ffbf 	bl	8000270 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4b8c      	ldr	r3, [pc, #560]	; (8005528 <UART_SetConfig+0x38c>)
 80052f8:	fba3 1302 	umull	r1, r3, r3, r2
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	2164      	movs	r1, #100	; 0x64
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	3332      	adds	r3, #50	; 0x32
 800530a:	4a87      	ldr	r2, [pc, #540]	; (8005528 <UART_SetConfig+0x38c>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005318:	441e      	add	r6, r3
 800531a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800531c:	4618      	mov	r0, r3
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	1894      	adds	r4, r2, r2
 8005328:	623c      	str	r4, [r7, #32]
 800532a:	415b      	adcs	r3, r3
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
 800532e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005332:	1812      	adds	r2, r2, r0
 8005334:	eb41 0303 	adc.w	r3, r1, r3
 8005338:	f04f 0400 	mov.w	r4, #0
 800533c:	f04f 0500 	mov.w	r5, #0
 8005340:	00dd      	lsls	r5, r3, #3
 8005342:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005346:	00d4      	lsls	r4, r2, #3
 8005348:	4622      	mov	r2, r4
 800534a:	462b      	mov	r3, r5
 800534c:	1814      	adds	r4, r2, r0
 800534e:	653c      	str	r4, [r7, #80]	; 0x50
 8005350:	414b      	adcs	r3, r1
 8005352:	657b      	str	r3, [r7, #84]	; 0x54
 8005354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	461a      	mov	r2, r3
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	1891      	adds	r1, r2, r2
 8005360:	61b9      	str	r1, [r7, #24]
 8005362:	415b      	adcs	r3, r3
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800536a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800536e:	f7fa ff7f 	bl	8000270 <__aeabi_uldivmod>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4b6c      	ldr	r3, [pc, #432]	; (8005528 <UART_SetConfig+0x38c>)
 8005378:	fba3 1302 	umull	r1, r3, r3, r2
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	2164      	movs	r1, #100	; 0x64
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	3332      	adds	r3, #50	; 0x32
 800538a:	4a67      	ldr	r2, [pc, #412]	; (8005528 <UART_SetConfig+0x38c>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	f003 0207 	and.w	r2, r3, #7
 8005396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4432      	add	r2, r6
 800539c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800539e:	e0b9      	b.n	8005514 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a2:	461c      	mov	r4, r3
 80053a4:	f04f 0500 	mov.w	r5, #0
 80053a8:	4622      	mov	r2, r4
 80053aa:	462b      	mov	r3, r5
 80053ac:	1891      	adds	r1, r2, r2
 80053ae:	6139      	str	r1, [r7, #16]
 80053b0:	415b      	adcs	r3, r3
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053b8:	1912      	adds	r2, r2, r4
 80053ba:	eb45 0303 	adc.w	r3, r5, r3
 80053be:	f04f 0000 	mov.w	r0, #0
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	00d9      	lsls	r1, r3, #3
 80053c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053cc:	00d0      	lsls	r0, r2, #3
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	eb12 0804 	adds.w	r8, r2, r4
 80053d6:	eb43 0905 	adc.w	r9, r3, r5
 80053da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	4618      	mov	r0, r3
 80053e0:	f04f 0100 	mov.w	r1, #0
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	008b      	lsls	r3, r1, #2
 80053ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053f2:	0082      	lsls	r2, r0, #2
 80053f4:	4640      	mov	r0, r8
 80053f6:	4649      	mov	r1, r9
 80053f8:	f7fa ff3a 	bl	8000270 <__aeabi_uldivmod>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4b49      	ldr	r3, [pc, #292]	; (8005528 <UART_SetConfig+0x38c>)
 8005402:	fba3 2302 	umull	r2, r3, r3, r2
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	011e      	lsls	r6, r3, #4
 800540a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800540c:	4618      	mov	r0, r3
 800540e:	f04f 0100 	mov.w	r1, #0
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	1894      	adds	r4, r2, r2
 8005418:	60bc      	str	r4, [r7, #8]
 800541a:	415b      	adcs	r3, r3
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005422:	1812      	adds	r2, r2, r0
 8005424:	eb41 0303 	adc.w	r3, r1, r3
 8005428:	f04f 0400 	mov.w	r4, #0
 800542c:	f04f 0500 	mov.w	r5, #0
 8005430:	00dd      	lsls	r5, r3, #3
 8005432:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005436:	00d4      	lsls	r4, r2, #3
 8005438:	4622      	mov	r2, r4
 800543a:	462b      	mov	r3, r5
 800543c:	1814      	adds	r4, r2, r0
 800543e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005440:	414b      	adcs	r3, r1
 8005442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4618      	mov	r0, r3
 800544a:	f04f 0100 	mov.w	r1, #0
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	008b      	lsls	r3, r1, #2
 8005458:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800545c:	0082      	lsls	r2, r0, #2
 800545e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005462:	f7fa ff05 	bl	8000270 <__aeabi_uldivmod>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4b2f      	ldr	r3, [pc, #188]	; (8005528 <UART_SetConfig+0x38c>)
 800546c:	fba3 1302 	umull	r1, r3, r3, r2
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	2164      	movs	r1, #100	; 0x64
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	3332      	adds	r3, #50	; 0x32
 800547e:	4a2a      	ldr	r2, [pc, #168]	; (8005528 <UART_SetConfig+0x38c>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800548a:	441e      	add	r6, r3
 800548c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548e:	4618      	mov	r0, r3
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	1894      	adds	r4, r2, r2
 800549a:	603c      	str	r4, [r7, #0]
 800549c:	415b      	adcs	r3, r3
 800549e:	607b      	str	r3, [r7, #4]
 80054a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a4:	1812      	adds	r2, r2, r0
 80054a6:	eb41 0303 	adc.w	r3, r1, r3
 80054aa:	f04f 0400 	mov.w	r4, #0
 80054ae:	f04f 0500 	mov.w	r5, #0
 80054b2:	00dd      	lsls	r5, r3, #3
 80054b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054b8:	00d4      	lsls	r4, r2, #3
 80054ba:	4622      	mov	r2, r4
 80054bc:	462b      	mov	r3, r5
 80054be:	eb12 0a00 	adds.w	sl, r2, r0
 80054c2:	eb43 0b01 	adc.w	fp, r3, r1
 80054c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f04f 0100 	mov.w	r1, #0
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	008b      	lsls	r3, r1, #2
 80054da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054de:	0082      	lsls	r2, r0, #2
 80054e0:	4650      	mov	r0, sl
 80054e2:	4659      	mov	r1, fp
 80054e4:	f7fa fec4 	bl	8000270 <__aeabi_uldivmod>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <UART_SetConfig+0x38c>)
 80054ee:	fba3 1302 	umull	r1, r3, r3, r2
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	2164      	movs	r1, #100	; 0x64
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	3332      	adds	r3, #50	; 0x32
 8005500:	4a09      	ldr	r2, [pc, #36]	; (8005528 <UART_SetConfig+0x38c>)
 8005502:	fba2 2303 	umull	r2, r3, r2, r3
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	f003 020f 	and.w	r2, r3, #15
 800550c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4432      	add	r2, r6
 8005512:	609a      	str	r2, [r3, #8]
}
 8005514:	bf00      	nop
 8005516:	377c      	adds	r7, #124	; 0x7c
 8005518:	46bd      	mov	sp, r7
 800551a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800551e:	bf00      	nop
 8005520:	40011000 	.word	0x40011000
 8005524:	40011400 	.word	0x40011400
 8005528:	51eb851f 	.word	0x51eb851f

0800552c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005532:	4b98      	ldr	r3, [pc, #608]	; (8005794 <MX_LWIP_Init+0x268>)
 8005534:	22c0      	movs	r2, #192	; 0xc0
 8005536:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005538:	4b96      	ldr	r3, [pc, #600]	; (8005794 <MX_LWIP_Init+0x268>)
 800553a:	22a8      	movs	r2, #168	; 0xa8
 800553c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800553e:	4b95      	ldr	r3, [pc, #596]	; (8005794 <MX_LWIP_Init+0x268>)
 8005540:	2200      	movs	r2, #0
 8005542:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 8005544:	4b93      	ldr	r3, [pc, #588]	; (8005794 <MX_LWIP_Init+0x268>)
 8005546:	22b1      	movs	r2, #177	; 0xb1
 8005548:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800554a:	4b93      	ldr	r3, [pc, #588]	; (8005798 <MX_LWIP_Init+0x26c>)
 800554c:	22ff      	movs	r2, #255	; 0xff
 800554e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005550:	4b91      	ldr	r3, [pc, #580]	; (8005798 <MX_LWIP_Init+0x26c>)
 8005552:	22ff      	movs	r2, #255	; 0xff
 8005554:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005556:	4b90      	ldr	r3, [pc, #576]	; (8005798 <MX_LWIP_Init+0x26c>)
 8005558:	22ff      	movs	r2, #255	; 0xff
 800555a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800555c:	4b8e      	ldr	r3, [pc, #568]	; (8005798 <MX_LWIP_Init+0x26c>)
 800555e:	2200      	movs	r2, #0
 8005560:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005562:	4b8e      	ldr	r3, [pc, #568]	; (800579c <MX_LWIP_Init+0x270>)
 8005564:	22c0      	movs	r2, #192	; 0xc0
 8005566:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005568:	4b8c      	ldr	r3, [pc, #560]	; (800579c <MX_LWIP_Init+0x270>)
 800556a:	22a8      	movs	r2, #168	; 0xa8
 800556c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800556e:	4b8b      	ldr	r3, [pc, #556]	; (800579c <MX_LWIP_Init+0x270>)
 8005570:	2200      	movs	r2, #0
 8005572:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005574:	4b89      	ldr	r3, [pc, #548]	; (800579c <MX_LWIP_Init+0x270>)
 8005576:	2201      	movs	r2, #1
 8005578:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800557a:	2100      	movs	r1, #0
 800557c:	2000      	movs	r0, #0
 800557e:	f003 fd7d 	bl	800907c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005582:	4b84      	ldr	r3, [pc, #528]	; (8005794 <MX_LWIP_Init+0x268>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	061a      	lsls	r2, r3, #24
 8005588:	4b82      	ldr	r3, [pc, #520]	; (8005794 <MX_LWIP_Init+0x268>)
 800558a:	785b      	ldrb	r3, [r3, #1]
 800558c:	041b      	lsls	r3, r3, #16
 800558e:	431a      	orrs	r2, r3
 8005590:	4b80      	ldr	r3, [pc, #512]	; (8005794 <MX_LWIP_Init+0x268>)
 8005592:	789b      	ldrb	r3, [r3, #2]
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	4313      	orrs	r3, r2
 8005598:	4a7e      	ldr	r2, [pc, #504]	; (8005794 <MX_LWIP_Init+0x268>)
 800559a:	78d2      	ldrb	r2, [r2, #3]
 800559c:	4313      	orrs	r3, r2
 800559e:	061a      	lsls	r2, r3, #24
 80055a0:	4b7c      	ldr	r3, [pc, #496]	; (8005794 <MX_LWIP_Init+0x268>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	0619      	lsls	r1, r3, #24
 80055a6:	4b7b      	ldr	r3, [pc, #492]	; (8005794 <MX_LWIP_Init+0x268>)
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	4319      	orrs	r1, r3
 80055ae:	4b79      	ldr	r3, [pc, #484]	; (8005794 <MX_LWIP_Init+0x268>)
 80055b0:	789b      	ldrb	r3, [r3, #2]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	430b      	orrs	r3, r1
 80055b6:	4977      	ldr	r1, [pc, #476]	; (8005794 <MX_LWIP_Init+0x268>)
 80055b8:	78c9      	ldrb	r1, [r1, #3]
 80055ba:	430b      	orrs	r3, r1
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055c2:	431a      	orrs	r2, r3
 80055c4:	4b73      	ldr	r3, [pc, #460]	; (8005794 <MX_LWIP_Init+0x268>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	0619      	lsls	r1, r3, #24
 80055ca:	4b72      	ldr	r3, [pc, #456]	; (8005794 <MX_LWIP_Init+0x268>)
 80055cc:	785b      	ldrb	r3, [r3, #1]
 80055ce:	041b      	lsls	r3, r3, #16
 80055d0:	4319      	orrs	r1, r3
 80055d2:	4b70      	ldr	r3, [pc, #448]	; (8005794 <MX_LWIP_Init+0x268>)
 80055d4:	789b      	ldrb	r3, [r3, #2]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	430b      	orrs	r3, r1
 80055da:	496e      	ldr	r1, [pc, #440]	; (8005794 <MX_LWIP_Init+0x268>)
 80055dc:	78c9      	ldrb	r1, [r1, #3]
 80055de:	430b      	orrs	r3, r1
 80055e0:	0a1b      	lsrs	r3, r3, #8
 80055e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80055e6:	431a      	orrs	r2, r3
 80055e8:	4b6a      	ldr	r3, [pc, #424]	; (8005794 <MX_LWIP_Init+0x268>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	0619      	lsls	r1, r3, #24
 80055ee:	4b69      	ldr	r3, [pc, #420]	; (8005794 <MX_LWIP_Init+0x268>)
 80055f0:	785b      	ldrb	r3, [r3, #1]
 80055f2:	041b      	lsls	r3, r3, #16
 80055f4:	4319      	orrs	r1, r3
 80055f6:	4b67      	ldr	r3, [pc, #412]	; (8005794 <MX_LWIP_Init+0x268>)
 80055f8:	789b      	ldrb	r3, [r3, #2]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	430b      	orrs	r3, r1
 80055fe:	4965      	ldr	r1, [pc, #404]	; (8005794 <MX_LWIP_Init+0x268>)
 8005600:	78c9      	ldrb	r1, [r1, #3]
 8005602:	430b      	orrs	r3, r1
 8005604:	0e1b      	lsrs	r3, r3, #24
 8005606:	4313      	orrs	r3, r2
 8005608:	4a65      	ldr	r2, [pc, #404]	; (80057a0 <MX_LWIP_Init+0x274>)
 800560a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800560c:	4b62      	ldr	r3, [pc, #392]	; (8005798 <MX_LWIP_Init+0x26c>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	061a      	lsls	r2, r3, #24
 8005612:	4b61      	ldr	r3, [pc, #388]	; (8005798 <MX_LWIP_Init+0x26c>)
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	041b      	lsls	r3, r3, #16
 8005618:	431a      	orrs	r2, r3
 800561a:	4b5f      	ldr	r3, [pc, #380]	; (8005798 <MX_LWIP_Init+0x26c>)
 800561c:	789b      	ldrb	r3, [r3, #2]
 800561e:	021b      	lsls	r3, r3, #8
 8005620:	4313      	orrs	r3, r2
 8005622:	4a5d      	ldr	r2, [pc, #372]	; (8005798 <MX_LWIP_Init+0x26c>)
 8005624:	78d2      	ldrb	r2, [r2, #3]
 8005626:	4313      	orrs	r3, r2
 8005628:	061a      	lsls	r2, r3, #24
 800562a:	4b5b      	ldr	r3, [pc, #364]	; (8005798 <MX_LWIP_Init+0x26c>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	0619      	lsls	r1, r3, #24
 8005630:	4b59      	ldr	r3, [pc, #356]	; (8005798 <MX_LWIP_Init+0x26c>)
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	4319      	orrs	r1, r3
 8005638:	4b57      	ldr	r3, [pc, #348]	; (8005798 <MX_LWIP_Init+0x26c>)
 800563a:	789b      	ldrb	r3, [r3, #2]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	430b      	orrs	r3, r1
 8005640:	4955      	ldr	r1, [pc, #340]	; (8005798 <MX_LWIP_Init+0x26c>)
 8005642:	78c9      	ldrb	r1, [r1, #3]
 8005644:	430b      	orrs	r3, r1
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800564c:	431a      	orrs	r2, r3
 800564e:	4b52      	ldr	r3, [pc, #328]	; (8005798 <MX_LWIP_Init+0x26c>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	0619      	lsls	r1, r3, #24
 8005654:	4b50      	ldr	r3, [pc, #320]	; (8005798 <MX_LWIP_Init+0x26c>)
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	041b      	lsls	r3, r3, #16
 800565a:	4319      	orrs	r1, r3
 800565c:	4b4e      	ldr	r3, [pc, #312]	; (8005798 <MX_LWIP_Init+0x26c>)
 800565e:	789b      	ldrb	r3, [r3, #2]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	430b      	orrs	r3, r1
 8005664:	494c      	ldr	r1, [pc, #304]	; (8005798 <MX_LWIP_Init+0x26c>)
 8005666:	78c9      	ldrb	r1, [r1, #3]
 8005668:	430b      	orrs	r3, r1
 800566a:	0a1b      	lsrs	r3, r3, #8
 800566c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005670:	431a      	orrs	r2, r3
 8005672:	4b49      	ldr	r3, [pc, #292]	; (8005798 <MX_LWIP_Init+0x26c>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	0619      	lsls	r1, r3, #24
 8005678:	4b47      	ldr	r3, [pc, #284]	; (8005798 <MX_LWIP_Init+0x26c>)
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	041b      	lsls	r3, r3, #16
 800567e:	4319      	orrs	r1, r3
 8005680:	4b45      	ldr	r3, [pc, #276]	; (8005798 <MX_LWIP_Init+0x26c>)
 8005682:	789b      	ldrb	r3, [r3, #2]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	430b      	orrs	r3, r1
 8005688:	4943      	ldr	r1, [pc, #268]	; (8005798 <MX_LWIP_Init+0x26c>)
 800568a:	78c9      	ldrb	r1, [r1, #3]
 800568c:	430b      	orrs	r3, r1
 800568e:	0e1b      	lsrs	r3, r3, #24
 8005690:	4313      	orrs	r3, r2
 8005692:	4a44      	ldr	r2, [pc, #272]	; (80057a4 <MX_LWIP_Init+0x278>)
 8005694:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005696:	4b41      	ldr	r3, [pc, #260]	; (800579c <MX_LWIP_Init+0x270>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	061a      	lsls	r2, r3, #24
 800569c:	4b3f      	ldr	r3, [pc, #252]	; (800579c <MX_LWIP_Init+0x270>)
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	041b      	lsls	r3, r3, #16
 80056a2:	431a      	orrs	r2, r3
 80056a4:	4b3d      	ldr	r3, [pc, #244]	; (800579c <MX_LWIP_Init+0x270>)
 80056a6:	789b      	ldrb	r3, [r3, #2]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	4313      	orrs	r3, r2
 80056ac:	4a3b      	ldr	r2, [pc, #236]	; (800579c <MX_LWIP_Init+0x270>)
 80056ae:	78d2      	ldrb	r2, [r2, #3]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	061a      	lsls	r2, r3, #24
 80056b4:	4b39      	ldr	r3, [pc, #228]	; (800579c <MX_LWIP_Init+0x270>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	0619      	lsls	r1, r3, #24
 80056ba:	4b38      	ldr	r3, [pc, #224]	; (800579c <MX_LWIP_Init+0x270>)
 80056bc:	785b      	ldrb	r3, [r3, #1]
 80056be:	041b      	lsls	r3, r3, #16
 80056c0:	4319      	orrs	r1, r3
 80056c2:	4b36      	ldr	r3, [pc, #216]	; (800579c <MX_LWIP_Init+0x270>)
 80056c4:	789b      	ldrb	r3, [r3, #2]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	430b      	orrs	r3, r1
 80056ca:	4934      	ldr	r1, [pc, #208]	; (800579c <MX_LWIP_Init+0x270>)
 80056cc:	78c9      	ldrb	r1, [r1, #3]
 80056ce:	430b      	orrs	r3, r1
 80056d0:	021b      	lsls	r3, r3, #8
 80056d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056d6:	431a      	orrs	r2, r3
 80056d8:	4b30      	ldr	r3, [pc, #192]	; (800579c <MX_LWIP_Init+0x270>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	0619      	lsls	r1, r3, #24
 80056de:	4b2f      	ldr	r3, [pc, #188]	; (800579c <MX_LWIP_Init+0x270>)
 80056e0:	785b      	ldrb	r3, [r3, #1]
 80056e2:	041b      	lsls	r3, r3, #16
 80056e4:	4319      	orrs	r1, r3
 80056e6:	4b2d      	ldr	r3, [pc, #180]	; (800579c <MX_LWIP_Init+0x270>)
 80056e8:	789b      	ldrb	r3, [r3, #2]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	430b      	orrs	r3, r1
 80056ee:	492b      	ldr	r1, [pc, #172]	; (800579c <MX_LWIP_Init+0x270>)
 80056f0:	78c9      	ldrb	r1, [r1, #3]
 80056f2:	430b      	orrs	r3, r1
 80056f4:	0a1b      	lsrs	r3, r3, #8
 80056f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056fa:	431a      	orrs	r2, r3
 80056fc:	4b27      	ldr	r3, [pc, #156]	; (800579c <MX_LWIP_Init+0x270>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	0619      	lsls	r1, r3, #24
 8005702:	4b26      	ldr	r3, [pc, #152]	; (800579c <MX_LWIP_Init+0x270>)
 8005704:	785b      	ldrb	r3, [r3, #1]
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	4319      	orrs	r1, r3
 800570a:	4b24      	ldr	r3, [pc, #144]	; (800579c <MX_LWIP_Init+0x270>)
 800570c:	789b      	ldrb	r3, [r3, #2]
 800570e:	021b      	lsls	r3, r3, #8
 8005710:	430b      	orrs	r3, r1
 8005712:	4922      	ldr	r1, [pc, #136]	; (800579c <MX_LWIP_Init+0x270>)
 8005714:	78c9      	ldrb	r1, [r1, #3]
 8005716:	430b      	orrs	r3, r1
 8005718:	0e1b      	lsrs	r3, r3, #24
 800571a:	4313      	orrs	r3, r2
 800571c:	4a22      	ldr	r2, [pc, #136]	; (80057a8 <MX_LWIP_Init+0x27c>)
 800571e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005720:	4b22      	ldr	r3, [pc, #136]	; (80057ac <MX_LWIP_Init+0x280>)
 8005722:	9302      	str	r3, [sp, #8]
 8005724:	4b22      	ldr	r3, [pc, #136]	; (80057b0 <MX_LWIP_Init+0x284>)
 8005726:	9301      	str	r3, [sp, #4]
 8005728:	2300      	movs	r3, #0
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	4b1e      	ldr	r3, [pc, #120]	; (80057a8 <MX_LWIP_Init+0x27c>)
 800572e:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <MX_LWIP_Init+0x278>)
 8005730:	491b      	ldr	r1, [pc, #108]	; (80057a0 <MX_LWIP_Init+0x274>)
 8005732:	4820      	ldr	r0, [pc, #128]	; (80057b4 <MX_LWIP_Init+0x288>)
 8005734:	f004 fa26 	bl	8009b84 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005738:	481e      	ldr	r0, [pc, #120]	; (80057b4 <MX_LWIP_Init+0x288>)
 800573a:	f004 fbd5 	bl	8009ee8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800573e:	4b1d      	ldr	r3, [pc, #116]	; (80057b4 <MX_LWIP_Init+0x288>)
 8005740:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005744:	089b      	lsrs	r3, r3, #2
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005750:	4818      	ldr	r0, [pc, #96]	; (80057b4 <MX_LWIP_Init+0x288>)
 8005752:	f004 fbd9 	bl	8009f08 <netif_set_up>
 8005756:	e002      	b.n	800575e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005758:	4816      	ldr	r0, [pc, #88]	; (80057b4 <MX_LWIP_Init+0x288>)
 800575a:	f004 fc41 	bl	8009fe0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800575e:	4916      	ldr	r1, [pc, #88]	; (80057b8 <MX_LWIP_Init+0x28c>)
 8005760:	4814      	ldr	r0, [pc, #80]	; (80057b4 <MX_LWIP_Init+0x288>)
 8005762:	f004 fc6f 	bl	800a044 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8005766:	2300      	movs	r3, #0
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	2300      	movs	r3, #0
 800576c:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800576e:	463b      	mov	r3, r7
 8005770:	2101      	movs	r1, #1
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fd36 	bl	80061e4 <osSemaphoreCreate>
 8005778:	4603      	mov	r3, r0
 800577a:	4a10      	ldr	r2, [pc, #64]	; (80057bc <MX_LWIP_Init+0x290>)
 800577c:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800577e:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <MX_LWIP_Init+0x294>)
 8005780:	4a0c      	ldr	r2, [pc, #48]	; (80057b4 <MX_LWIP_Init+0x288>)
 8005782:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005784:	4b0d      	ldr	r3, [pc, #52]	; (80057bc <MX_LWIP_Init+0x290>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a0d      	ldr	r2, [pc, #52]	; (80057c0 <MX_LWIP_Init+0x294>)
 800578a:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800578c:	bf00      	nop
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	20006bdc 	.word	0x20006bdc
 8005798:	20006bd8 	.word	0x20006bd8
 800579c:	20006b9c 	.word	0x20006b9c
 80057a0:	20006bd4 	.word	0x20006bd4
 80057a4:	20006be0 	.word	0x20006be0
 80057a8:	20006be4 	.word	0x20006be4
 80057ac:	08008fb9 	.word	0x08008fb9
 80057b0:	08005df1 	.word	0x08005df1
 80057b4:	20006ba0 	.word	0x20006ba0
 80057b8:	08005e5d 	.word	0x08005e5d
 80057bc:	20000384 	.word	0x20000384
 80057c0:	20006b94 	.word	0x20006b94

080057c4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	; 0x38
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a4a      	ldr	r2, [pc, #296]	; (800590c <HAL_ETH_MspInit+0x148>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	f040 808d 	bne.w	8005902 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80057e8:	2300      	movs	r3, #0
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	4b48      	ldr	r3, [pc, #288]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	4a47      	ldr	r2, [pc, #284]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 80057f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057f6:	6313      	str	r3, [r2, #48]	; 0x30
 80057f8:	4b45      	ldr	r3, [pc, #276]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005800:	623b      	str	r3, [r7, #32]
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	2300      	movs	r3, #0
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	4b41      	ldr	r3, [pc, #260]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	4a40      	ldr	r2, [pc, #256]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 800580e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005812:	6313      	str	r3, [r2, #48]	; 0x30
 8005814:	4b3e      	ldr	r3, [pc, #248]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	2300      	movs	r3, #0
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	4b3a      	ldr	r3, [pc, #232]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	4a39      	ldr	r2, [pc, #228]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 800582a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800582e:	6313      	str	r3, [r2, #48]	; 0x30
 8005830:	4b37      	ldr	r3, [pc, #220]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 8005832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	4b33      	ldr	r3, [pc, #204]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	4a32      	ldr	r2, [pc, #200]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 8005846:	f043 0304 	orr.w	r3, r3, #4
 800584a:	6313      	str	r3, [r2, #48]	; 0x30
 800584c:	4b30      	ldr	r3, [pc, #192]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005858:	2300      	movs	r3, #0
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	4b2c      	ldr	r3, [pc, #176]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	4a2b      	ldr	r2, [pc, #172]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	6313      	str	r3, [r2, #48]	; 0x30
 8005868:	4b29      	ldr	r3, [pc, #164]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 800586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	4b25      	ldr	r3, [pc, #148]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 800587a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587c:	4a24      	ldr	r2, [pc, #144]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 800587e:	f043 0302 	orr.w	r3, r3, #2
 8005882:	6313      	str	r3, [r2, #48]	; 0x30
 8005884:	4b22      	ldr	r3, [pc, #136]	; (8005910 <HAL_ETH_MspInit+0x14c>)
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005890:	2332      	movs	r3, #50	; 0x32
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005894:	2302      	movs	r3, #2
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005898:	2300      	movs	r3, #0
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800589c:	2303      	movs	r3, #3
 800589e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80058a0:	230b      	movs	r3, #11
 80058a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058a8:	4619      	mov	r1, r3
 80058aa:	481a      	ldr	r0, [pc, #104]	; (8005914 <HAL_ETH_MspInit+0x150>)
 80058ac:	f7fd fd80 	bl	80033b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80058b0:	2386      	movs	r3, #134	; 0x86
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b4:	2302      	movs	r3, #2
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058bc:	2303      	movs	r3, #3
 80058be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80058c0:	230b      	movs	r3, #11
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c8:	4619      	mov	r1, r3
 80058ca:	4813      	ldr	r0, [pc, #76]	; (8005918 <HAL_ETH_MspInit+0x154>)
 80058cc:	f7fd fd70 	bl	80033b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80058d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d6:	2302      	movs	r3, #2
 80058d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058de:	2303      	movs	r3, #3
 80058e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80058e2:	230b      	movs	r3, #11
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ea:	4619      	mov	r1, r3
 80058ec:	480b      	ldr	r0, [pc, #44]	; (800591c <HAL_ETH_MspInit+0x158>)
 80058ee:	f7fd fd5f 	bl	80033b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80058f2:	2200      	movs	r2, #0
 80058f4:	2105      	movs	r1, #5
 80058f6:	203d      	movs	r0, #61	; 0x3d
 80058f8:	f7fc f80e 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80058fc:	203d      	movs	r0, #61	; 0x3d
 80058fe:	f7fc f827 	bl	8001950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005902:	bf00      	nop
 8005904:	3738      	adds	r7, #56	; 0x38
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40028000 	.word	0x40028000
 8005910:	40023800 	.word	0x40023800
 8005914:	40020800 	.word	0x40020800
 8005918:	40020000 	.word	0x40020000
 800591c:	40020400 	.word	0x40020400

08005920 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005928:	4b04      	ldr	r3, [pc, #16]	; (800593c <HAL_ETH_RxCpltCallback+0x1c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f000 fcd9 	bl	80062e4 <osSemaphoreRelease>
}
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000388 	.word	0x20000388

08005940 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005940:	b5b0      	push	{r4, r5, r7, lr}
 8005942:	b090      	sub	sp, #64	; 0x40
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005948:	2300      	movs	r3, #0
 800594a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800594c:	4b5f      	ldr	r3, [pc, #380]	; (8005acc <low_level_init+0x18c>)
 800594e:	4a60      	ldr	r2, [pc, #384]	; (8005ad0 <low_level_init+0x190>)
 8005950:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 8005952:	4b5e      	ldr	r3, [pc, #376]	; (8005acc <low_level_init+0x18c>)
 8005954:	2200      	movs	r2, #0
 8005956:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005958:	4b5c      	ldr	r3, [pc, #368]	; (8005acc <low_level_init+0x18c>)
 800595a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800595e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005960:	4b5a      	ldr	r3, [pc, #360]	; (8005acc <low_level_init+0x18c>)
 8005962:	2200      	movs	r2, #0
 8005964:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005966:	4b59      	ldr	r3, [pc, #356]	; (8005acc <low_level_init+0x18c>)
 8005968:	2200      	movs	r2, #0
 800596a:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800596c:	2300      	movs	r3, #0
 800596e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8005972:	2380      	movs	r3, #128	; 0x80
 8005974:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8005978:	23e1      	movs	r3, #225	; 0xe1
 800597a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800597e:	2300      	movs	r3, #0
 8005980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8005984:	2300      	movs	r3, #0
 8005986:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800598a:	2300      	movs	r3, #0
 800598c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8005990:	4a4e      	ldr	r2, [pc, #312]	; (8005acc <low_level_init+0x18c>)
 8005992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005996:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005998:	4b4c      	ldr	r3, [pc, #304]	; (8005acc <low_level_init+0x18c>)
 800599a:	2201      	movs	r2, #1
 800599c:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800599e:	4b4b      	ldr	r3, [pc, #300]	; (8005acc <low_level_init+0x18c>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80059a4:	4b49      	ldr	r3, [pc, #292]	; (8005acc <low_level_init+0x18c>)
 80059a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80059aa:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80059ac:	4847      	ldr	r0, [pc, #284]	; (8005acc <low_level_init+0x18c>)
 80059ae:	f7fc fb59 	bl	8002064 <HAL_ETH_Init>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80059b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d108      	bne.n	80059d2 <low_level_init+0x92>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059c6:	f043 0304 	orr.w	r3, r3, #4
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80059d2:	2304      	movs	r3, #4
 80059d4:	4a3f      	ldr	r2, [pc, #252]	; (8005ad4 <low_level_init+0x194>)
 80059d6:	4940      	ldr	r1, [pc, #256]	; (8005ad8 <low_level_init+0x198>)
 80059d8:	483c      	ldr	r0, [pc, #240]	; (8005acc <low_level_init+0x18c>)
 80059da:	f7fc fcdf 	bl	800239c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80059de:	2304      	movs	r3, #4
 80059e0:	4a3e      	ldr	r2, [pc, #248]	; (8005adc <low_level_init+0x19c>)
 80059e2:	493f      	ldr	r1, [pc, #252]	; (8005ae0 <low_level_init+0x1a0>)
 80059e4:	4839      	ldr	r0, [pc, #228]	; (8005acc <low_level_init+0x18c>)
 80059e6:	f7fc fd42 	bl	800246e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2206      	movs	r2, #6
 80059ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80059f2:	4b36      	ldr	r3, [pc, #216]	; (8005acc <low_level_init+0x18c>)
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	781a      	ldrb	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80059fe:	4b33      	ldr	r3, [pc, #204]	; (8005acc <low_level_init+0x18c>)
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	785a      	ldrb	r2, [r3, #1]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005a0a:	4b30      	ldr	r3, [pc, #192]	; (8005acc <low_level_init+0x18c>)
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	789a      	ldrb	r2, [r3, #2]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005a16:	4b2d      	ldr	r3, [pc, #180]	; (8005acc <low_level_init+0x18c>)
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	78da      	ldrb	r2, [r3, #3]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005a22:	4b2a      	ldr	r3, [pc, #168]	; (8005acc <low_level_init+0x18c>)
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	791a      	ldrb	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005a2e:	4b27      	ldr	r3, [pc, #156]	; (8005acc <low_level_init+0x18c>)
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	795a      	ldrb	r2, [r3, #5]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005a40:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a48:	f043 030a 	orr.w	r3, r3, #10
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8005a54:	2300      	movs	r3, #0
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a58:	2300      	movs	r3, #0
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8005a5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a60:	2101      	movs	r1, #1
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fbbe 	bl	80061e4 <osSemaphoreCreate>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <low_level_init+0x1a4>)
 8005a6c:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005a6e:	4b1e      	ldr	r3, [pc, #120]	; (8005ae8 <low_level_init+0x1a8>)
 8005a70:	f107 040c 	add.w	r4, r7, #12
 8005a74:	461d      	mov	r5, r3
 8005a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005a82:	f107 030c 	add.w	r3, r7, #12
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 faae 	bl	8005fea <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005a8e:	480f      	ldr	r0, [pc, #60]	; (8005acc <low_level_init+0x18c>)
 8005a90:	f7fd f815 	bl	8002abe <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005a94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a98:	461a      	mov	r2, r3
 8005a9a:	211d      	movs	r1, #29
 8005a9c:	480b      	ldr	r0, [pc, #44]	; (8005acc <low_level_init+0x18c>)
 8005a9e:	f7fc ff40 	bl	8002922 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	f043 030b 	orr.w	r3, r3, #11
 8005aa8:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	461a      	mov	r2, r3
 8005aae:	211d      	movs	r1, #29
 8005ab0:	4806      	ldr	r0, [pc, #24]	; (8005acc <low_level_init+0x18c>)
 8005ab2:	f7fc ff9e 	bl	80029f2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005ab6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005aba:	461a      	mov	r2, r3
 8005abc:	211d      	movs	r1, #29
 8005abe:	4803      	ldr	r0, [pc, #12]	; (8005acc <low_level_init+0x18c>)
 8005ac0:	f7fc ff2f 	bl	8002922 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005ac4:	bf00      	nop
 8005ac6:	3740      	adds	r7, #64	; 0x40
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bdb0      	pop	{r4, r5, r7, pc}
 8005acc:	200084b8 	.word	0x200084b8
 8005ad0:	40028000 	.word	0x40028000
 8005ad4:	20008500 	.word	0x20008500
 8005ad8:	20006be8 	.word	0x20006be8
 8005adc:	20006c68 	.word	0x20006c68
 8005ae0:	20008438 	.word	0x20008438
 8005ae4:	20000388 	.word	0x20000388
 8005ae8:	08013f7c 	.word	0x08013f7c

08005aec <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	; 0x28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005af6:	4b4b      	ldr	r3, [pc, #300]	; (8005c24 <low_level_output+0x138>)
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005b0e:	4b45      	ldr	r3, [pc, #276]	; (8005c24 <low_level_output+0x138>)
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	623b      	str	r3, [r7, #32]
 8005b1c:	e05a      	b.n	8005bd4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	da03      	bge.n	8005b2e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005b26:	23f8      	movs	r3, #248	; 0xf8
 8005b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005b2c:	e05c      	b.n	8005be8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	895b      	ldrh	r3, [r3, #10]
 8005b32:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005b38:	e02f      	b.n	8005b9a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	18d0      	adds	r0, r2, r3
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	18d1      	adds	r1, r2, r3
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005b4e:	3304      	adds	r3, #4
 8005b50:	461a      	mov	r2, r3
 8005b52:	f00d fa51 	bl	8012ff8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	da03      	bge.n	8005b6c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005b64:	23f8      	movs	r3, #248	; 0xf8
 8005b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005b6a:	e03d      	b.n	8005be8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005b7c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005b88:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005b94:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d8c8      	bhi.n	8005b3a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	18d0      	adds	r0, r2, r3
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	f00d fa1d 	bl	8012ff8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	623b      	str	r3, [r7, #32]
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1a1      	bne.n	8005b1e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005bda:	6979      	ldr	r1, [r7, #20]
 8005bdc:	4811      	ldr	r0, [pc, #68]	; (8005c24 <low_level_output+0x138>)
 8005bde:	f7fc fcb3 	bl	8002548 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005be8:	4b0e      	ldr	r3, [pc, #56]	; (8005c24 <low_level_output+0x138>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00d      	beq.n	8005c18 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005bfc:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <low_level_output+0x138>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c04:	3314      	adds	r3, #20
 8005c06:	2220      	movs	r2, #32
 8005c08:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005c0a:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <low_level_output+0x138>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c12:	3304      	adds	r3, #4
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005c18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3728      	adds	r7, #40	; 0x28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	200084b8 	.word	0x200084b8

08005c28 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08c      	sub	sp, #48	; 0x30
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005c4c:	484f      	ldr	r0, [pc, #316]	; (8005d8c <low_level_input+0x164>)
 8005c4e:	f7fc fd65 	bl	800271c <HAL_ETH_GetReceivedFrame_IT>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <low_level_input+0x34>

    return NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e092      	b.n	8005d82 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005c5c:	4b4b      	ldr	r3, [pc, #300]	; (8005d8c <low_level_input+0x164>)
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005c62:	4b4a      	ldr	r3, [pc, #296]	; (8005d8c <low_level_input+0x164>)
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005c68:	89fb      	ldrh	r3, [r7, #14]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005c6e:	89fb      	ldrh	r3, [r7, #14]
 8005c70:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005c74:	4619      	mov	r1, r3
 8005c76:	2000      	movs	r0, #0
 8005c78:	f004 faae 	bl	800a1d8 <pbuf_alloc>
 8005c7c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d04b      	beq.n	8005d1c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005c84:	4b41      	ldr	r3, [pc, #260]	; (8005d8c <low_level_input+0x164>)
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c92:	e040      	b.n	8005d16 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	895b      	ldrh	r3, [r3, #10]
 8005c98:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005c9e:	e021      	b.n	8005ce4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	18d0      	adds	r0, r2, r3
 8005ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	18d1      	adds	r1, r2, r3
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f00d f99e 	bl	8012ff8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005cd2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005cde:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d8d6      	bhi.n	8005ca0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	18d0      	adds	r0, r2, r3
 8005cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	4413      	add	r3, r2
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4619      	mov	r1, r3
 8005d04:	f00d f978 	bl	8012ff8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1bb      	bne.n	8005c94 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <low_level_input+0x164>)
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005d22:	2300      	movs	r3, #0
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	e00b      	b.n	8005d40 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <low_level_input+0x164>)
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d3ee      	bcc.n	8005d28 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005d4a:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <low_level_input+0x164>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005d50:	4b0e      	ldr	r3, [pc, #56]	; (8005d8c <low_level_input+0x164>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d58:	3314      	adds	r3, #20
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00d      	beq.n	8005d80 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005d64:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <low_level_input+0x164>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6c:	3314      	adds	r3, #20
 8005d6e:	2280      	movs	r2, #128	; 0x80
 8005d70:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005d72:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <low_level_input+0x164>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3730      	adds	r7, #48	; 0x30
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	200084b8 	.word	0x200084b8

08005d90 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005d9c:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <ethernetif_input+0x58>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f04f 31ff 	mov.w	r1, #4294967295
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 fa4f 	bl	8006248 <osSemaphoreWait>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1f5      	bne.n	8005d9c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005db0:	480e      	ldr	r0, [pc, #56]	; (8005dec <ethernetif_input+0x5c>)
 8005db2:	f00c ff91 	bl	8012cd8 <sys_mutex_lock>
        p = low_level_input( netif );
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f7ff ff36 	bl	8005c28 <low_level_input>
 8005dbc:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	68f9      	ldr	r1, [r7, #12]
 8005dca:	68b8      	ldr	r0, [r7, #8]
 8005dcc:	4798      	blx	r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005dd4:	68b8      	ldr	r0, [r7, #8]
 8005dd6:	f004 fce3 	bl	800a7a0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005dda:	4804      	ldr	r0, [pc, #16]	; (8005dec <ethernetif_input+0x5c>)
 8005ddc:	f00c ff8b 	bl	8012cf6 <sys_mutex_unlock>
      } while(p!=NULL);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e4      	bne.n	8005db0 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005de6:	e7d9      	b.n	8005d9c <ethernetif_input+0xc>
 8005de8:	20000388 	.word	0x20000388
 8005dec:	20009cd0 	.word	0x20009cd0

08005df0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <ethernetif_init+0x1c>
 8005dfe:	4b0e      	ldr	r3, [pc, #56]	; (8005e38 <ethernetif_init+0x48>)
 8005e00:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8005e04:	490d      	ldr	r1, [pc, #52]	; (8005e3c <ethernetif_init+0x4c>)
 8005e06:	480e      	ldr	r0, [pc, #56]	; (8005e40 <ethernetif_init+0x50>)
 8005e08:	f00d f9b6 	bl	8013178 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2273      	movs	r2, #115	; 0x73
 8005e10:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2274      	movs	r2, #116	; 0x74
 8005e18:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a09      	ldr	r2, [pc, #36]	; (8005e44 <ethernetif_init+0x54>)
 8005e20:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a08      	ldr	r2, [pc, #32]	; (8005e48 <ethernetif_init+0x58>)
 8005e26:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fd89 	bl	8005940 <low_level_init>

  return ERR_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	08013f98 	.word	0x08013f98
 8005e3c:	08013fb4 	.word	0x08013fb4
 8005e40:	08013fc4 	.word	0x08013fc4
 8005e44:	08010e85 	.word	0x08010e85
 8005e48:	08005aed 	.word	0x08005aed

08005e4c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005e50:	f7fb fc7a 	bl	8001748 <HAL_GetTick>
 8005e54:	4603      	mov	r3, r0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e72:	089b      	lsrs	r3, r3, #2
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d05d      	beq.n	8005f3a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005e7e:	4b34      	ldr	r3, [pc, #208]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d03f      	beq.n	8005f06 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005e86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	4830      	ldr	r0, [pc, #192]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005e8e:	f7fc fdb0 	bl	80029f2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005e92:	f7fb fc59 	bl	8001748 <HAL_GetTick>
 8005e96:	4603      	mov	r3, r0
 8005e98:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005e9a:	f107 0308 	add.w	r3, r7, #8
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	482b      	ldr	r0, [pc, #172]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005ea4:	f7fc fd3d 	bl	8002922 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005ea8:	f7fb fc4e 	bl	8001748 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eb6:	d828      	bhi.n	8005f0a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0eb      	beq.n	8005e9a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005ec2:	f107 0308 	add.w	r3, r7, #8
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	2110      	movs	r1, #16
 8005eca:	4821      	ldr	r0, [pc, #132]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005ecc:	f7fc fd29 	bl	8002922 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d004      	beq.n	8005ee4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005eda:	4b1d      	ldr	r3, [pc, #116]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ee0:	60da      	str	r2, [r3, #12]
 8005ee2:	e002      	b.n	8005eea <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005ee4:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005ef4:	4b16      	ldr	r3, [pc, #88]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	609a      	str	r2, [r3, #8]
 8005efa:	e016      	b.n	8005f2a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005efc:	4b14      	ldr	r3, [pc, #80]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005efe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f02:	609a      	str	r2, [r3, #8]
 8005f04:	e011      	b.n	8005f2a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <ethernetif_update_config+0xb0>
          goto error;
 8005f0a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005f0c:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	08db      	lsrs	r3, r3, #3
 8005f12:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005f14:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	085b      	lsrs	r3, r3, #1
 8005f1a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	461a      	mov	r2, r3
 8005f22:	2100      	movs	r1, #0
 8005f24:	480a      	ldr	r0, [pc, #40]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005f26:	f7fc fd64 	bl	80029f2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4808      	ldr	r0, [pc, #32]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005f2e:	f7fc fe25 	bl	8002b7c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005f32:	4807      	ldr	r0, [pc, #28]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005f34:	f7fc fdc3 	bl	8002abe <HAL_ETH_Start>
 8005f38:	e002      	b.n	8005f40 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005f3a:	4805      	ldr	r0, [pc, #20]	; (8005f50 <ethernetif_update_config+0xf4>)
 8005f3c:	f7fc fdee 	bl	8002b1c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f807 	bl	8005f54 <ethernetif_notify_conn_changed>
}
 8005f46:	bf00      	nop
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	200084b8 	.word	0x200084b8

08005f54 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f7a:	2b84      	cmp	r3, #132	; 0x84
 8005f7c:	d005      	beq.n	8005f8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005f7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	3303      	adds	r3, #3
 8005f88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f9e:	f3ef 8305 	mrs	r3, IPSR
 8005fa2:	607b      	str	r3, [r7, #4]
  return(result);
 8005fa4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	bf14      	ite	ne
 8005faa:	2301      	movne	r3, #1
 8005fac:	2300      	moveq	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005fc0:	f001 fc74 	bl	80078ac <vTaskStartScheduler>
  
  return osOK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005fce:	f7ff ffe3 	bl	8005f98 <inHandlerMode>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005fd8:	f001 fd8c 	bl	8007af4 <xTaskGetTickCountFromISR>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	e002      	b.n	8005fe6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005fe0:	f001 fd78 	bl	8007ad4 <xTaskGetTickCount>
 8005fe4:	4603      	mov	r3, r0
  }
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fec:	b089      	sub	sp, #36	; 0x24
 8005fee:	af04      	add	r7, sp, #16
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d020      	beq.n	800603e <osThreadCreate+0x54>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01c      	beq.n	800603e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685c      	ldr	r4, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681d      	ldr	r5, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691e      	ldr	r6, [r3, #16]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff ffa6 	bl	8005f68 <makeFreeRtosPriority>
 800601c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006026:	9202      	str	r2, [sp, #8]
 8006028:	9301      	str	r3, [sp, #4]
 800602a:	9100      	str	r1, [sp, #0]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	4632      	mov	r2, r6
 8006030:	4629      	mov	r1, r5
 8006032:	4620      	mov	r0, r4
 8006034:	f001 fa5c 	bl	80074f0 <xTaskCreateStatic>
 8006038:	4603      	mov	r3, r0
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	e01c      	b.n	8006078 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685c      	ldr	r4, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800604a:	b29e      	uxth	r6, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff ff88 	bl	8005f68 <makeFreeRtosPriority>
 8006058:	4602      	mov	r2, r0
 800605a:	f107 030c 	add.w	r3, r7, #12
 800605e:	9301      	str	r3, [sp, #4]
 8006060:	9200      	str	r2, [sp, #0]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	4632      	mov	r2, r6
 8006066:	4629      	mov	r1, r5
 8006068:	4620      	mov	r0, r4
 800606a:	f001 fa9e 	bl	80075aa <xTaskCreate>
 800606e:	4603      	mov	r3, r0
 8006070:	2b01      	cmp	r3, #1
 8006072:	d001      	beq.n	8006078 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006074:	2300      	movs	r3, #0
 8006076:	e000      	b.n	800607a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006078:	68fb      	ldr	r3, [r7, #12]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006082 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <osDelay+0x16>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	e000      	b.n	800609a <osDelay+0x18>
 8006098:	2301      	movs	r3, #1
 800609a:	4618      	mov	r0, r3
 800609c:	f001 fbd2 	bl	8007844 <vTaskDelay>
  
  return osOK;
 80060a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	4619      	mov	r1, r3
 80060c0:	2001      	movs	r0, #1
 80060c2:	f000 fc40 	bl	8006946 <xQueueCreateMutexStatic>
 80060c6:	4603      	mov	r3, r0
 80060c8:	e003      	b.n	80060d2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80060ca:	2001      	movs	r0, #1
 80060cc:	f000 fc23 	bl	8006916 <xQueueCreateMutex>
 80060d0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80060e6:	2300      	movs	r3, #0
 80060e8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <osMutexWait+0x18>
    return osErrorParameter;
 80060f0:	2380      	movs	r3, #128	; 0x80
 80060f2:	e03a      	b.n	800616a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fe:	d103      	bne.n	8006108 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006100:	f04f 33ff 	mov.w	r3, #4294967295
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	e009      	b.n	800611c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d006      	beq.n	800611c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <osMutexWait+0x40>
      ticks = 1;
 8006118:	2301      	movs	r3, #1
 800611a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800611c:	f7ff ff3c 	bl	8005f98 <inHandlerMode>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d017      	beq.n	8006156 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006126:	f107 0308 	add.w	r3, r7, #8
 800612a:	461a      	mov	r2, r3
 800612c:	2100      	movs	r1, #0
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f001 f836 	bl	80071a0 <xQueueReceiveFromISR>
 8006134:	4603      	mov	r3, r0
 8006136:	2b01      	cmp	r3, #1
 8006138:	d001      	beq.n	800613e <osMutexWait+0x62>
      return osErrorOS;
 800613a:	23ff      	movs	r3, #255	; 0xff
 800613c:	e015      	b.n	800616a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d011      	beq.n	8006168 <osMutexWait+0x8c>
 8006144:	4b0b      	ldr	r3, [pc, #44]	; (8006174 <osMutexWait+0x98>)
 8006146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	e008      	b.n	8006168 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 ff15 	bl	8006f88 <xQueueSemaphoreTake>
 800615e:	4603      	mov	r3, r0
 8006160:	2b01      	cmp	r3, #1
 8006162:	d001      	beq.n	8006168 <osMutexWait+0x8c>
    return osErrorOS;
 8006164:	23ff      	movs	r3, #255	; 0xff
 8006166:	e000      	b.n	800616a <osMutexWait+0x8e>
  }
  
  return osOK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	e000ed04 	.word	0xe000ed04

08006178 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006184:	2300      	movs	r3, #0
 8006186:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006188:	f7ff ff06 	bl	8005f98 <inHandlerMode>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d016      	beq.n	80061c0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006192:	f107 0308 	add.w	r3, r7, #8
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fd88 	bl	8006cae <xQueueGiveFromISR>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d001      	beq.n	80061a8 <osMutexRelease+0x30>
      return osErrorOS;
 80061a4:	23ff      	movs	r3, #255	; 0xff
 80061a6:	e017      	b.n	80061d8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d013      	beq.n	80061d6 <osMutexRelease+0x5e>
 80061ae:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <osMutexRelease+0x68>)
 80061b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	e00a      	b.n	80061d6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80061c0:	2300      	movs	r3, #0
 80061c2:	2200      	movs	r2, #0
 80061c4:	2100      	movs	r1, #0
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fbd8 	bl	800697c <xQueueGenericSend>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d001      	beq.n	80061d6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80061d2:	23ff      	movs	r3, #255	; 0xff
 80061d4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80061d6:	68fb      	ldr	r3, [r7, #12]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	e000ed04 	.word	0xe000ed04

080061e4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af02      	add	r7, sp, #8
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00f      	beq.n	8006216 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d10a      	bne.n	8006212 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2203      	movs	r2, #3
 8006202:	9200      	str	r2, [sp, #0]
 8006204:	2200      	movs	r2, #0
 8006206:	2100      	movs	r1, #0
 8006208:	2001      	movs	r0, #1
 800620a:	f000 fa99 	bl	8006740 <xQueueGenericCreateStatic>
 800620e:	4603      	mov	r3, r0
 8006210:	e016      	b.n	8006240 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006212:	2300      	movs	r3, #0
 8006214:	e014      	b.n	8006240 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d110      	bne.n	800623e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800621c:	2203      	movs	r2, #3
 800621e:	2100      	movs	r1, #0
 8006220:	2001      	movs	r0, #1
 8006222:	f000 fb05 	bl	8006830 <xQueueGenericCreate>
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d005      	beq.n	800623a <osSemaphoreCreate+0x56>
 800622e:	2300      	movs	r3, #0
 8006230:	2200      	movs	r2, #0
 8006232:	2100      	movs	r1, #0
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 fba1 	bl	800697c <xQueueGenericSend>
      return sema;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	e000      	b.n	8006240 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800623e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006252:	2300      	movs	r3, #0
 8006254:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800625c:	2380      	movs	r3, #128	; 0x80
 800625e:	e03a      	b.n	80062d6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	d103      	bne.n	8006274 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800626c:	f04f 33ff 	mov.w	r3, #4294967295
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e009      	b.n	8006288 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d006      	beq.n	8006288 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <osSemaphoreWait+0x40>
      ticks = 1;
 8006284:	2301      	movs	r3, #1
 8006286:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006288:	f7ff fe86 	bl	8005f98 <inHandlerMode>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d017      	beq.n	80062c2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006292:	f107 0308 	add.w	r3, r7, #8
 8006296:	461a      	mov	r2, r3
 8006298:	2100      	movs	r1, #0
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 ff80 	bl	80071a0 <xQueueReceiveFromISR>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d001      	beq.n	80062aa <osSemaphoreWait+0x62>
      return osErrorOS;
 80062a6:	23ff      	movs	r3, #255	; 0xff
 80062a8:	e015      	b.n	80062d6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d011      	beq.n	80062d4 <osSemaphoreWait+0x8c>
 80062b0:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <osSemaphoreWait+0x98>)
 80062b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	e008      	b.n	80062d4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80062c2:	68f9      	ldr	r1, [r7, #12]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fe5f 	bl	8006f88 <xQueueSemaphoreTake>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d001      	beq.n	80062d4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80062d0:	23ff      	movs	r3, #255	; 0xff
 80062d2:	e000      	b.n	80062d6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80062f4:	f7ff fe50 	bl	8005f98 <inHandlerMode>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d016      	beq.n	800632c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80062fe:	f107 0308 	add.w	r3, r7, #8
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fcd2 	bl	8006cae <xQueueGiveFromISR>
 800630a:	4603      	mov	r3, r0
 800630c:	2b01      	cmp	r3, #1
 800630e:	d001      	beq.n	8006314 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006310:	23ff      	movs	r3, #255	; 0xff
 8006312:	e017      	b.n	8006344 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d013      	beq.n	8006342 <osSemaphoreRelease+0x5e>
 800631a:	4b0c      	ldr	r3, [pc, #48]	; (800634c <osSemaphoreRelease+0x68>)
 800631c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	e00a      	b.n	8006342 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800632c:	2300      	movs	r3, #0
 800632e:	2200      	movs	r2, #0
 8006330:	2100      	movs	r1, #0
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fb22 	bl	800697c <xQueueGenericSend>
 8006338:	4603      	mov	r3, r0
 800633a:	2b01      	cmp	r3, #1
 800633c:	d001      	beq.n	8006342 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800633e:	23ff      	movs	r3, #255	; 0xff
 8006340:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006342:	68fb      	ldr	r3, [r7, #12]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	e000ed04 	.word	0xe000ed04

08006350 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006350:	b590      	push	{r4, r7, lr}
 8006352:	b085      	sub	sp, #20
 8006354:	af02      	add	r7, sp, #8
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d011      	beq.n	8006386 <osMessageCreate+0x36>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00d      	beq.n	8006386 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6859      	ldr	r1, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	2400      	movs	r4, #0
 800637c:	9400      	str	r4, [sp, #0]
 800637e:	f000 f9df 	bl	8006740 <xQueueGenericCreateStatic>
 8006382:	4603      	mov	r3, r0
 8006384:	e008      	b.n	8006398 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	4619      	mov	r1, r3
 8006392:	f000 fa4d 	bl	8006830 <xQueueGenericCreate>
 8006396:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	bd90      	pop	{r4, r7, pc}

080063a0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <osMessagePut+0x1e>
    ticks = 1;
 80063ba:	2301      	movs	r3, #1
 80063bc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80063be:	f7ff fdeb 	bl	8005f98 <inHandlerMode>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d018      	beq.n	80063fa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80063c8:	f107 0210 	add.w	r2, r7, #16
 80063cc:	f107 0108 	add.w	r1, r7, #8
 80063d0:	2300      	movs	r3, #0
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 fbd0 	bl	8006b78 <xQueueGenericSendFromISR>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d001      	beq.n	80063e2 <osMessagePut+0x42>
      return osErrorOS;
 80063de:	23ff      	movs	r3, #255	; 0xff
 80063e0:	e018      	b.n	8006414 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d014      	beq.n	8006412 <osMessagePut+0x72>
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <osMessagePut+0x7c>)
 80063ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	e00b      	b.n	8006412 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80063fa:	f107 0108 	add.w	r1, r7, #8
 80063fe:	2300      	movs	r3, #0
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 faba 	bl	800697c <xQueueGenericSend>
 8006408:	4603      	mov	r3, r0
 800640a:	2b01      	cmp	r3, #1
 800640c:	d001      	beq.n	8006412 <osMessagePut+0x72>
      return osErrorOS;
 800640e:	23ff      	movs	r3, #255	; 0xff
 8006410:	e000      	b.n	8006414 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	e000ed04 	.word	0xe000ed04

08006420 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006420:	b590      	push	{r4, r7, lr}
 8006422:	b08b      	sub	sp, #44	; 0x2c
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10a      	bne.n	8006450 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800643a:	2380      	movs	r3, #128	; 0x80
 800643c:	617b      	str	r3, [r7, #20]
    return event;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	461c      	mov	r4, r3
 8006442:	f107 0314 	add.w	r3, r7, #20
 8006446:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800644a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800644e:	e054      	b.n	80064fa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006450:	2300      	movs	r3, #0
 8006452:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645e:	d103      	bne.n	8006468 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006460:	f04f 33ff 	mov.w	r3, #4294967295
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
 8006466:	e009      	b.n	800647c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d006      	beq.n	800647c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <osMessageGet+0x5c>
      ticks = 1;
 8006478:	2301      	movs	r3, #1
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800647c:	f7ff fd8c 	bl	8005f98 <inHandlerMode>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d01c      	beq.n	80064c0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006486:	f107 0220 	add.w	r2, r7, #32
 800648a:	f107 0314 	add.w	r3, r7, #20
 800648e:	3304      	adds	r3, #4
 8006490:	4619      	mov	r1, r3
 8006492:	68b8      	ldr	r0, [r7, #8]
 8006494:	f000 fe84 	bl	80071a0 <xQueueReceiveFromISR>
 8006498:	4603      	mov	r3, r0
 800649a:	2b01      	cmp	r3, #1
 800649c:	d102      	bne.n	80064a4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800649e:	2310      	movs	r3, #16
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	e001      	b.n	80064a8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d01d      	beq.n	80064ea <osMessageGet+0xca>
 80064ae:	4b15      	ldr	r3, [pc, #84]	; (8006504 <osMessageGet+0xe4>)
 80064b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	e014      	b.n	80064ea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80064c0:	f107 0314 	add.w	r3, r7, #20
 80064c4:	3304      	adds	r3, #4
 80064c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c8:	4619      	mov	r1, r3
 80064ca:	68b8      	ldr	r0, [r7, #8]
 80064cc:	f000 fc7c 	bl	8006dc8 <xQueueReceive>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d102      	bne.n	80064dc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80064d6:	2310      	movs	r3, #16
 80064d8:	617b      	str	r3, [r7, #20]
 80064da:	e006      	b.n	80064ea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <osMessageGet+0xc6>
 80064e2:	2300      	movs	r3, #0
 80064e4:	e000      	b.n	80064e8 <osMessageGet+0xc8>
 80064e6:	2340      	movs	r3, #64	; 0x40
 80064e8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	461c      	mov	r4, r3
 80064ee:	f107 0314 	add.w	r3, r7, #20
 80064f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80064f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	372c      	adds	r7, #44	; 0x2c
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd90      	pop	{r4, r7, pc}
 8006502:	bf00      	nop
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f103 0208 	add.w	r2, r3, #8
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f04f 32ff 	mov.w	r2, #4294967295
 8006520:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f103 0208 	add.w	r2, r3, #8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f103 0208 	add.w	r2, r3, #8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006562:	b480      	push	{r7}
 8006564:	b085      	sub	sp, #20
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	601a      	str	r2, [r3, #0]
}
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c0:	d103      	bne.n	80065ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	e00c      	b.n	80065e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3308      	adds	r3, #8
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	e002      	b.n	80065d8 <vListInsert+0x2e>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d2f6      	bcs.n	80065d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	601a      	str	r2, [r3, #0]
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6892      	ldr	r2, [r2, #8]
 8006632:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6852      	ldr	r2, [r2, #4]
 800663c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	429a      	cmp	r2, r3
 8006646:	d103      	bne.n	8006650 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	1e5a      	subs	r2, r3, #1
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <xQueueGenericReset+0x2a>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	60bb      	str	r3, [r7, #8]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800669a:	f002 f88b 	bl	80087b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	68f9      	ldr	r1, [r7, #12]
 80066a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	441a      	add	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ca:	3b01      	subs	r3, #1
 80066cc:	68f9      	ldr	r1, [r7, #12]
 80066ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	441a      	add	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	22ff      	movs	r2, #255	; 0xff
 80066de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	22ff      	movs	r2, #255	; 0xff
 80066e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d114      	bne.n	800671a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01a      	beq.n	800672e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3310      	adds	r3, #16
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 fb49 	bl	8007d94 <xTaskRemoveFromEventList>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d012      	beq.n	800672e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006708:	4b0c      	ldr	r3, [pc, #48]	; (800673c <xQueueGenericReset+0xcc>)
 800670a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	e009      	b.n	800672e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3310      	adds	r3, #16
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fef2 	bl	8006508 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3324      	adds	r3, #36	; 0x24
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff feed 	bl	8006508 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800672e:	f002 f871 	bl	8008814 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006732:	2301      	movs	r3, #1
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08e      	sub	sp, #56	; 0x38
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006766:	bf00      	nop
 8006768:	e7fe      	b.n	8006768 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <xQueueGenericCreateStatic+0x52>
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <xQueueGenericCreateStatic+0x56>
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <xQueueGenericCreateStatic+0x58>
 8006796:	2300      	movs	r3, #0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	623b      	str	r3, [r7, #32]
}
 80067ae:	bf00      	nop
 80067b0:	e7fe      	b.n	80067b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d102      	bne.n	80067be <xQueueGenericCreateStatic+0x7e>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <xQueueGenericCreateStatic+0x82>
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <xQueueGenericCreateStatic+0x84>
 80067c2:	2300      	movs	r3, #0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	61fb      	str	r3, [r7, #28]
}
 80067da:	bf00      	nop
 80067dc:	e7fe      	b.n	80067dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067de:	2348      	movs	r3, #72	; 0x48
 80067e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b48      	cmp	r3, #72	; 0x48
 80067e6:	d00a      	beq.n	80067fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	61bb      	str	r3, [r7, #24]
}
 80067fa:	bf00      	nop
 80067fc:	e7fe      	b.n	80067fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00d      	beq.n	8006826 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006812:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	4613      	mov	r3, r2
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	68b9      	ldr	r1, [r7, #8]
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f83f 	bl	80068a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006828:	4618      	mov	r0, r3
 800682a:	3730      	adds	r7, #48	; 0x30
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	; 0x28
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	4613      	mov	r3, r2
 800683c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	613b      	str	r3, [r7, #16]
}
 8006856:	bf00      	nop
 8006858:	e7fe      	b.n	8006858 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	3348      	adds	r3, #72	; 0x48
 8006868:	4618      	mov	r0, r3
 800686a:	f002 f8c5 	bl	80089f8 <pvPortMalloc>
 800686e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d011      	beq.n	800689a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	3348      	adds	r3, #72	; 0x48
 800687e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006888:	79fa      	ldrb	r2, [r7, #7]
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	4613      	mov	r3, r2
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f805 	bl	80068a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800689a:	69bb      	ldr	r3, [r7, #24]
	}
 800689c:	4618      	mov	r0, r3
 800689e:	3720      	adds	r7, #32
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d103      	bne.n	80068c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	e002      	b.n	80068c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068d2:	2101      	movs	r1, #1
 80068d4:	69b8      	ldr	r0, [r7, #24]
 80068d6:	f7ff fecb 	bl	8006670 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068da:	bf00      	nop
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00e      	beq.n	800690e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006902:	2300      	movs	r3, #0
 8006904:	2200      	movs	r2, #0
 8006906:	2100      	movs	r1, #0
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f837 	bl	800697c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006916:	b580      	push	{r7, lr}
 8006918:	b086      	sub	sp, #24
 800691a:	af00      	add	r7, sp, #0
 800691c:	4603      	mov	r3, r0
 800691e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006920:	2301      	movs	r3, #1
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	2300      	movs	r3, #0
 8006926:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	461a      	mov	r2, r3
 800692c:	6939      	ldr	r1, [r7, #16]
 800692e:	6978      	ldr	r0, [r7, #20]
 8006930:	f7ff ff7e 	bl	8006830 <xQueueGenericCreate>
 8006934:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff ffd3 	bl	80068e2 <prvInitialiseMutex>

		return xNewQueue;
 800693c:	68fb      	ldr	r3, [r7, #12]
	}
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006946:	b580      	push	{r7, lr}
 8006948:	b088      	sub	sp, #32
 800694a:	af02      	add	r7, sp, #8
 800694c:	4603      	mov	r3, r0
 800694e:	6039      	str	r1, [r7, #0]
 8006950:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006952:	2301      	movs	r3, #1
 8006954:	617b      	str	r3, [r7, #20]
 8006956:	2300      	movs	r3, #0
 8006958:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800695a:	79fb      	ldrb	r3, [r7, #7]
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2200      	movs	r2, #0
 8006962:	6939      	ldr	r1, [r7, #16]
 8006964:	6978      	ldr	r0, [r7, #20]
 8006966:	f7ff feeb 	bl	8006740 <xQueueGenericCreateStatic>
 800696a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f7ff ffb8 	bl	80068e2 <prvInitialiseMutex>

		return xNewQueue;
 8006972:	68fb      	ldr	r3, [r7, #12]
	}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08e      	sub	sp, #56	; 0x38
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800698a:	2300      	movs	r3, #0
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <xQueueGenericSend+0x32>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069aa:	bf00      	nop
 80069ac:	e7fe      	b.n	80069ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d103      	bne.n	80069bc <xQueueGenericSend+0x40>
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <xQueueGenericSend+0x44>
 80069bc:	2301      	movs	r3, #1
 80069be:	e000      	b.n	80069c2 <xQueueGenericSend+0x46>
 80069c0:	2300      	movs	r3, #0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10a      	bne.n	80069dc <xQueueGenericSend+0x60>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d103      	bne.n	80069ea <xQueueGenericSend+0x6e>
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d101      	bne.n	80069ee <xQueueGenericSend+0x72>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e000      	b.n	80069f0 <xQueueGenericSend+0x74>
 80069ee:	2300      	movs	r3, #0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10a      	bne.n	8006a0a <xQueueGenericSend+0x8e>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	623b      	str	r3, [r7, #32]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a0a:	f001 fb83 	bl	8008114 <xTaskGetSchedulerState>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d102      	bne.n	8006a1a <xQueueGenericSend+0x9e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <xQueueGenericSend+0xa2>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <xQueueGenericSend+0xa4>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <xQueueGenericSend+0xbe>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	61fb      	str	r3, [r7, #28]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a3a:	f001 febb 	bl	80087b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <xQueueGenericSend+0xd4>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d129      	bne.n	8006aa4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a56:	f000 fc3b 	bl	80072d0 <prvCopyDataToQueue>
 8006a5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d010      	beq.n	8006a86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	3324      	adds	r3, #36	; 0x24
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f001 f993 	bl	8007d94 <xTaskRemoveFromEventList>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d013      	beq.n	8006a9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a74:	4b3f      	ldr	r3, [pc, #252]	; (8006b74 <xQueueGenericSend+0x1f8>)
 8006a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	e00a      	b.n	8006a9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a8c:	4b39      	ldr	r3, [pc, #228]	; (8006b74 <xQueueGenericSend+0x1f8>)
 8006a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a9c:	f001 feba 	bl	8008814 <vPortExitCritical>
				return pdPASS;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e063      	b.n	8006b6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d103      	bne.n	8006ab2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006aaa:	f001 feb3 	bl	8008814 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e05c      	b.n	8006b6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d106      	bne.n	8006ac6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ab8:	f107 0314 	add.w	r3, r7, #20
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 f9cb 	bl	8007e58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ac6:	f001 fea5 	bl	8008814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aca:	f000 ff59 	bl	8007980 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ace:	f001 fe71 	bl	80087b4 <vPortEnterCritical>
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ad8:	b25b      	sxtb	r3, r3
 8006ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ade:	d103      	bne.n	8006ae8 <xQueueGenericSend+0x16c>
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aee:	b25b      	sxtb	r3, r3
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d103      	bne.n	8006afe <xQueueGenericSend+0x182>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006afe:	f001 fe89 	bl	8008814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b02:	1d3a      	adds	r2, r7, #4
 8006b04:	f107 0314 	add.w	r3, r7, #20
 8006b08:	4611      	mov	r1, r2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 f9ba 	bl	8007e84 <xTaskCheckForTimeOut>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d124      	bne.n	8006b60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b18:	f000 fcd2 	bl	80074c0 <prvIsQueueFull>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d018      	beq.n	8006b54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	3310      	adds	r3, #16
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	4611      	mov	r1, r2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 f90e 	bl	8007d4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b32:	f000 fc5d 	bl	80073f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b36:	f000 ff31 	bl	800799c <xTaskResumeAll>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f47f af7c 	bne.w	8006a3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b42:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <xQueueGenericSend+0x1f8>)
 8006b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	e772      	b.n	8006a3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b56:	f000 fc4b 	bl	80073f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b5a:	f000 ff1f 	bl	800799c <xTaskResumeAll>
 8006b5e:	e76c      	b.n	8006a3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b62:	f000 fc45 	bl	80073f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b66:	f000 ff19 	bl	800799c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3738      	adds	r7, #56	; 0x38
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	e000ed04 	.word	0xe000ed04

08006b78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b090      	sub	sp, #64	; 0x40
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d103      	bne.n	8006bb4 <xQueueGenericSendFromISR+0x3c>
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <xQueueGenericSendFromISR+0x40>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <xQueueGenericSendFromISR+0x42>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10a      	bne.n	8006bd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bd0:	bf00      	nop
 8006bd2:	e7fe      	b.n	8006bd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d103      	bne.n	8006be2 <xQueueGenericSendFromISR+0x6a>
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d101      	bne.n	8006be6 <xQueueGenericSendFromISR+0x6e>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <xQueueGenericSendFromISR+0x70>
 8006be6:	2300      	movs	r3, #0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	623b      	str	r3, [r7, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	e7fe      	b.n	8006c00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c02:	f001 feb9 	bl	8008978 <vPortValidateInterruptPriority>
	__asm volatile
 8006c06:	f3ef 8211 	mrs	r2, BASEPRI
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	61fa      	str	r2, [r7, #28]
 8006c1c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d302      	bcc.n	8006c34 <xQueueGenericSendFromISR+0xbc>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d12f      	bne.n	8006c94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c4a:	f000 fb41 	bl	80072d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c56:	d112      	bne.n	8006c7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d016      	beq.n	8006c8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	3324      	adds	r3, #36	; 0x24
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 f895 	bl	8007d94 <xTaskRemoveFromEventList>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00e      	beq.n	8006c8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00b      	beq.n	8006c8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	e007      	b.n	8006c8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c82:	3301      	adds	r3, #1
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	b25a      	sxtb	r2, r3
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c92:	e001      	b.n	8006c98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f383 8811 	msr	BASEPRI, r3
}
 8006ca2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3740      	adds	r7, #64	; 0x40
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b08e      	sub	sp, #56	; 0x38
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10a      	bne.n	8006cd8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	623b      	str	r3, [r7, #32]
}
 8006cd4:	bf00      	nop
 8006cd6:	e7fe      	b.n	8006cd6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00a      	beq.n	8006cf6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	61fb      	str	r3, [r7, #28]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d103      	bne.n	8006d06 <xQueueGiveFromISR+0x58>
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <xQueueGiveFromISR+0x5c>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <xQueueGiveFromISR+0x5e>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	61bb      	str	r3, [r7, #24]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d26:	f001 fe27 	bl	8008978 <vPortValidateInterruptPriority>
	__asm volatile
 8006d2a:	f3ef 8211 	mrs	r2, BASEPRI
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	617a      	str	r2, [r7, #20]
 8006d40:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006d42:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d22b      	bcs.n	8006dae <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d112      	bne.n	8006d98 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d016      	beq.n	8006da8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	3324      	adds	r3, #36	; 0x24
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f001 f808 	bl	8007d94 <xTaskRemoveFromEventList>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00e      	beq.n	8006da8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00b      	beq.n	8006da8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2201      	movs	r2, #1
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	e007      	b.n	8006da8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	b25a      	sxtb	r2, r3
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006da8:	2301      	movs	r3, #1
 8006daa:	637b      	str	r3, [r7, #52]	; 0x34
 8006dac:	e001      	b.n	8006db2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34
 8006db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f383 8811 	msr	BASEPRI, r3
}
 8006dbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3738      	adds	r7, #56	; 0x38
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08c      	sub	sp, #48	; 0x30
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <xQueueReceive+0x30>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	623b      	str	r3, [r7, #32]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d103      	bne.n	8006e06 <xQueueReceive+0x3e>
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <xQueueReceive+0x42>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <xQueueReceive+0x44>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <xQueueReceive+0x5e>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	61fb      	str	r3, [r7, #28]
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e26:	f001 f975 	bl	8008114 <xTaskGetSchedulerState>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <xQueueReceive+0x6e>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <xQueueReceive+0x72>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <xQueueReceive+0x74>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10a      	bne.n	8006e56 <xQueueReceive+0x8e>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	61bb      	str	r3, [r7, #24]
}
 8006e52:	bf00      	nop
 8006e54:	e7fe      	b.n	8006e54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e56:	f001 fcad 	bl	80087b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d01f      	beq.n	8006ea6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e66:	68b9      	ldr	r1, [r7, #8]
 8006e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e6a:	f000 fa9b 	bl	80073a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	1e5a      	subs	r2, r3, #1
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00f      	beq.n	8006e9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	3310      	adds	r3, #16
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 ff86 	bl	8007d94 <xTaskRemoveFromEventList>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e8e:	4b3d      	ldr	r3, [pc, #244]	; (8006f84 <xQueueReceive+0x1bc>)
 8006e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e9e:	f001 fcb9 	bl	8008814 <vPortExitCritical>
				return pdPASS;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e069      	b.n	8006f7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d103      	bne.n	8006eb4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006eac:	f001 fcb2 	bl	8008814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	e062      	b.n	8006f7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eba:	f107 0310 	add.w	r3, r7, #16
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 ffca 	bl	8007e58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ec8:	f001 fca4 	bl	8008814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ecc:	f000 fd58 	bl	8007980 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ed0:	f001 fc70 	bl	80087b4 <vPortEnterCritical>
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eda:	b25b      	sxtb	r3, r3
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d103      	bne.n	8006eea <xQueueReceive+0x122>
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ef0:	b25b      	sxtb	r3, r3
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef6:	d103      	bne.n	8006f00 <xQueueReceive+0x138>
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f00:	f001 fc88 	bl	8008814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f04:	1d3a      	adds	r2, r7, #4
 8006f06:	f107 0310 	add.w	r3, r7, #16
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 ffb9 	bl	8007e84 <xTaskCheckForTimeOut>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d123      	bne.n	8006f60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f1a:	f000 fabb 	bl	8007494 <prvIsQueueEmpty>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d017      	beq.n	8006f54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	3324      	adds	r3, #36	; 0x24
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 ff0d 	bl	8007d4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f34:	f000 fa5c 	bl	80073f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f38:	f000 fd30 	bl	800799c <xTaskResumeAll>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d189      	bne.n	8006e56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006f42:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <xQueueReceive+0x1bc>)
 8006f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	e780      	b.n	8006e56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f56:	f000 fa4b 	bl	80073f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f5a:	f000 fd1f 	bl	800799c <xTaskResumeAll>
 8006f5e:	e77a      	b.n	8006e56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f62:	f000 fa45 	bl	80073f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f66:	f000 fd19 	bl	800799c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f6c:	f000 fa92 	bl	8007494 <prvIsQueueEmpty>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f43f af6f 	beq.w	8006e56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3730      	adds	r7, #48	; 0x30
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	e000ed04 	.word	0xe000ed04

08006f88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08e      	sub	sp, #56	; 0x38
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	623b      	str	r3, [r7, #32]
}
 8006fb6:	bf00      	nop
 8006fb8:	e7fe      	b.n	8006fb8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	61fb      	str	r3, [r7, #28]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fd8:	f001 f89c 	bl	8008114 <xTaskGetSchedulerState>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d102      	bne.n	8006fe8 <xQueueSemaphoreTake+0x60>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <xQueueSemaphoreTake+0x64>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <xQueueSemaphoreTake+0x66>
 8006fec:	2300      	movs	r3, #0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	61bb      	str	r3, [r7, #24]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007008:	f001 fbd4 	bl	80087b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	2b00      	cmp	r3, #0
 8007016:	d024      	beq.n	8007062 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	1e5a      	subs	r2, r3, #1
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d104      	bne.n	8007032 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007028:	f001 fa1c 	bl	8008464 <pvTaskIncrementMutexHeldCount>
 800702c:	4602      	mov	r2, r0
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00f      	beq.n	800705a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	3310      	adds	r3, #16
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fea8 	bl	8007d94 <xTaskRemoveFromEventList>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d007      	beq.n	800705a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800704a:	4b54      	ldr	r3, [pc, #336]	; (800719c <xQueueSemaphoreTake+0x214>)
 800704c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800705a:	f001 fbdb 	bl	8008814 <vPortExitCritical>
				return pdPASS;
 800705e:	2301      	movs	r3, #1
 8007060:	e097      	b.n	8007192 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d111      	bne.n	800708c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	617b      	str	r3, [r7, #20]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007084:	f001 fbc6 	bl	8008814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007088:	2300      	movs	r3, #0
 800708a:	e082      	b.n	8007192 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800708c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708e:	2b00      	cmp	r3, #0
 8007090:	d106      	bne.n	80070a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007092:	f107 030c 	add.w	r3, r7, #12
 8007096:	4618      	mov	r0, r3
 8007098:	f000 fede 	bl	8007e58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800709c:	2301      	movs	r3, #1
 800709e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070a0:	f001 fbb8 	bl	8008814 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070a4:	f000 fc6c 	bl	8007980 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070a8:	f001 fb84 	bl	80087b4 <vPortEnterCritical>
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070b2:	b25b      	sxtb	r3, r3
 80070b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b8:	d103      	bne.n	80070c2 <xQueueSemaphoreTake+0x13a>
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070c8:	b25b      	sxtb	r3, r3
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d103      	bne.n	80070d8 <xQueueSemaphoreTake+0x150>
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d8:	f001 fb9c 	bl	8008814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070dc:	463a      	mov	r2, r7
 80070de:	f107 030c 	add.w	r3, r7, #12
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fecd 	bl	8007e84 <xTaskCheckForTimeOut>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d132      	bne.n	8007156 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070f2:	f000 f9cf 	bl	8007494 <prvIsQueueEmpty>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d026      	beq.n	800714a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d109      	bne.n	8007118 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007104:	f001 fb56 	bl	80087b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	4618      	mov	r0, r3
 800710e:	f001 f81f 	bl	8008150 <xTaskPriorityInherit>
 8007112:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007114:	f001 fb7e 	bl	8008814 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	3324      	adds	r3, #36	; 0x24
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	4611      	mov	r1, r2
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fe13 	bl	8007d4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007128:	f000 f962 	bl	80073f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800712c:	f000 fc36 	bl	800799c <xTaskResumeAll>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	f47f af68 	bne.w	8007008 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007138:	4b18      	ldr	r3, [pc, #96]	; (800719c <xQueueSemaphoreTake+0x214>)
 800713a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	e75e      	b.n	8007008 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800714a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800714c:	f000 f950 	bl	80073f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007150:	f000 fc24 	bl	800799c <xTaskResumeAll>
 8007154:	e758      	b.n	8007008 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007158:	f000 f94a 	bl	80073f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800715c:	f000 fc1e 	bl	800799c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007162:	f000 f997 	bl	8007494 <prvIsQueueEmpty>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	f43f af4d 	beq.w	8007008 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00d      	beq.n	8007190 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007174:	f001 fb1e 	bl	80087b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800717a:	f000 f891 	bl	80072a0 <prvGetDisinheritPriorityAfterTimeout>
 800717e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007186:	4618      	mov	r0, r3
 8007188:	f001 f8de 	bl	8008348 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800718c:	f001 fb42 	bl	8008814 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007190:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007192:	4618      	mov	r0, r3
 8007194:	3738      	adds	r7, #56	; 0x38
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	e000ed04 	.word	0xe000ed04

080071a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08e      	sub	sp, #56	; 0x38
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	623b      	str	r3, [r7, #32]
}
 80071c8:	bf00      	nop
 80071ca:	e7fe      	b.n	80071ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d103      	bne.n	80071da <xQueueReceiveFromISR+0x3a>
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <xQueueReceiveFromISR+0x3e>
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <xQueueReceiveFromISR+0x40>
 80071de:	2300      	movs	r3, #0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	61fb      	str	r3, [r7, #28]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071fa:	f001 fbbd 	bl	8008978 <vPortValidateInterruptPriority>
	__asm volatile
 80071fe:	f3ef 8211 	mrs	r2, BASEPRI
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	61ba      	str	r2, [r7, #24]
 8007214:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007216:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	2b00      	cmp	r3, #0
 8007224:	d02f      	beq.n	8007286 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800722c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007234:	f000 f8b6 	bl	80073a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	1e5a      	subs	r2, r3, #1
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007240:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d112      	bne.n	8007270 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d016      	beq.n	8007280 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	3310      	adds	r3, #16
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fd9c 	bl	8007d94 <xTaskRemoveFromEventList>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00e      	beq.n	8007280 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00b      	beq.n	8007280 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	e007      	b.n	8007280 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007274:	3301      	adds	r3, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	b25a      	sxtb	r2, r3
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007280:	2301      	movs	r3, #1
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
 8007284:	e001      	b.n	800728a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007286:	2300      	movs	r3, #0
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f383 8811 	msr	BASEPRI, r3
}
 8007294:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007298:	4618      	mov	r0, r3
 800729a:	3738      	adds	r7, #56	; 0x38
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d006      	beq.n	80072be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f1c3 0307 	rsb	r3, r3, #7
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	e001      	b.n	80072c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80072be:	2300      	movs	r3, #0
 80072c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80072c2:	68fb      	ldr	r3, [r7, #12]
	}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072dc:	2300      	movs	r3, #0
 80072de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10d      	bne.n	800730a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d14d      	bne.n	8007392 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 ff9e 	bl	800823c <xTaskPriorityDisinherit>
 8007300:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	609a      	str	r2, [r3, #8]
 8007308:	e043      	b.n	8007392 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d119      	bne.n	8007344 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6858      	ldr	r0, [r3, #4]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	461a      	mov	r2, r3
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	f00b fe6c 	bl	8012ff8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007328:	441a      	add	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	429a      	cmp	r2, r3
 8007338:	d32b      	bcc.n	8007392 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	605a      	str	r2, [r3, #4]
 8007342:	e026      	b.n	8007392 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	68d8      	ldr	r0, [r3, #12]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734c:	461a      	mov	r2, r3
 800734e:	68b9      	ldr	r1, [r7, #8]
 8007350:	f00b fe52 	bl	8012ff8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735c:	425b      	negs	r3, r3
 800735e:	441a      	add	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	429a      	cmp	r2, r3
 800736e:	d207      	bcs.n	8007380 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	425b      	negs	r3, r3
 800737a:	441a      	add	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d105      	bne.n	8007392 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	3b01      	subs	r3, #1
 8007390:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800739a:	697b      	ldr	r3, [r7, #20]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d018      	beq.n	80073e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	441a      	add	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d303      	bcc.n	80073d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68d9      	ldr	r1, [r3, #12]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e0:	461a      	mov	r2, r3
 80073e2:	6838      	ldr	r0, [r7, #0]
 80073e4:	f00b fe08 	bl	8012ff8 <memcpy>
	}
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073f8:	f001 f9dc 	bl	80087b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007402:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007404:	e011      	b.n	800742a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	2b00      	cmp	r3, #0
 800740c:	d012      	beq.n	8007434 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3324      	adds	r3, #36	; 0x24
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fcbe 	bl	8007d94 <xTaskRemoveFromEventList>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800741e:	f000 fd93 	bl	8007f48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	3b01      	subs	r3, #1
 8007426:	b2db      	uxtb	r3, r3
 8007428:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800742a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800742e:	2b00      	cmp	r3, #0
 8007430:	dce9      	bgt.n	8007406 <prvUnlockQueue+0x16>
 8007432:	e000      	b.n	8007436 <prvUnlockQueue+0x46>
					break;
 8007434:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	22ff      	movs	r2, #255	; 0xff
 800743a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800743e:	f001 f9e9 	bl	8008814 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007442:	f001 f9b7 	bl	80087b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800744c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800744e:	e011      	b.n	8007474 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d012      	beq.n	800747e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3310      	adds	r3, #16
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fc99 	bl	8007d94 <xTaskRemoveFromEventList>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007468:	f000 fd6e 	bl	8007f48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	3b01      	subs	r3, #1
 8007470:	b2db      	uxtb	r3, r3
 8007472:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007474:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007478:	2b00      	cmp	r3, #0
 800747a:	dce9      	bgt.n	8007450 <prvUnlockQueue+0x60>
 800747c:	e000      	b.n	8007480 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800747e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	22ff      	movs	r2, #255	; 0xff
 8007484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007488:	f001 f9c4 	bl	8008814 <vPortExitCritical>
}
 800748c:	bf00      	nop
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800749c:	f001 f98a 	bl	80087b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d102      	bne.n	80074ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074a8:	2301      	movs	r3, #1
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	e001      	b.n	80074b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074b2:	f001 f9af 	bl	8008814 <vPortExitCritical>

	return xReturn;
 80074b6:	68fb      	ldr	r3, [r7, #12]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074c8:	f001 f974 	bl	80087b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d102      	bne.n	80074de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074d8:	2301      	movs	r3, #1
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	e001      	b.n	80074e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074e2:	f001 f997 	bl	8008814 <vPortExitCritical>

	return xReturn;
 80074e6:	68fb      	ldr	r3, [r7, #12]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08e      	sub	sp, #56	; 0x38
 80074f4:	af04      	add	r7, sp, #16
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10a      	bne.n	800751a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	623b      	str	r3, [r7, #32]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <xTaskCreateStatic+0x46>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	61fb      	str	r3, [r7, #28]
}
 8007532:	bf00      	nop
 8007534:	e7fe      	b.n	8007534 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007536:	23b4      	movs	r3, #180	; 0xb4
 8007538:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2bb4      	cmp	r3, #180	; 0xb4
 800753e:	d00a      	beq.n	8007556 <xTaskCreateStatic+0x66>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	61bb      	str	r3, [r7, #24]
}
 8007552:	bf00      	nop
 8007554:	e7fe      	b.n	8007554 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007556:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01e      	beq.n	800759c <xTaskCreateStatic+0xac>
 800755e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01b      	beq.n	800759c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800756c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	2202      	movs	r2, #2
 8007572:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007576:	2300      	movs	r3, #0
 8007578:	9303      	str	r3, [sp, #12]
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	9302      	str	r3, [sp, #8]
 800757e:	f107 0314 	add.w	r3, r7, #20
 8007582:	9301      	str	r3, [sp, #4]
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	68b9      	ldr	r1, [r7, #8]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f850 	bl	8007634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007596:	f000 f8eb 	bl	8007770 <prvAddNewTaskToReadyList>
 800759a:	e001      	b.n	80075a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800759c:	2300      	movs	r3, #0
 800759e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075a0:	697b      	ldr	r3, [r7, #20]
	}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3728      	adds	r7, #40	; 0x28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b08c      	sub	sp, #48	; 0x30
 80075ae:	af04      	add	r7, sp, #16
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	603b      	str	r3, [r7, #0]
 80075b6:	4613      	mov	r3, r2
 80075b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 fa1a 	bl	80089f8 <pvPortMalloc>
 80075c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00e      	beq.n	80075ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075cc:	20b4      	movs	r0, #180	; 0xb4
 80075ce:	f001 fa13 	bl	80089f8 <pvPortMalloc>
 80075d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	631a      	str	r2, [r3, #48]	; 0x30
 80075e0:	e005      	b.n	80075ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075e2:	6978      	ldr	r0, [r7, #20]
 80075e4:	f001 fad4 	bl	8008b90 <vPortFree>
 80075e8:	e001      	b.n	80075ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d017      	beq.n	8007624 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075fc:	88fa      	ldrh	r2, [r7, #6]
 80075fe:	2300      	movs	r3, #0
 8007600:	9303      	str	r3, [sp, #12]
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	9302      	str	r3, [sp, #8]
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 f80e 	bl	8007634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007618:	69f8      	ldr	r0, [r7, #28]
 800761a:	f000 f8a9 	bl	8007770 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800761e:	2301      	movs	r3, #1
 8007620:	61bb      	str	r3, [r7, #24]
 8007622:	e002      	b.n	800762a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007624:	f04f 33ff 	mov.w	r3, #4294967295
 8007628:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800762a:	69bb      	ldr	r3, [r7, #24]
	}
 800762c:	4618      	mov	r0, r3
 800762e:	3720      	adds	r7, #32
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800764c:	3b01      	subs	r3, #1
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	f023 0307 	bic.w	r3, r3, #7
 800765a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	617b      	str	r3, [r7, #20]
}
 8007678:	bf00      	nop
 800767a:	e7fe      	b.n	800767a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d01f      	beq.n	80076c2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]
 8007686:	e012      	b.n	80076ae <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	4413      	add	r3, r2
 800768e:	7819      	ldrb	r1, [r3, #0]
 8007690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	3334      	adds	r3, #52	; 0x34
 8007698:	460a      	mov	r2, r1
 800769a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	4413      	add	r3, r2
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d006      	beq.n	80076b6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	3301      	adds	r3, #1
 80076ac:	61fb      	str	r3, [r7, #28]
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	2b0f      	cmp	r3, #15
 80076b2:	d9e9      	bls.n	8007688 <prvInitialiseNewTask+0x54>
 80076b4:	e000      	b.n	80076b8 <prvInitialiseNewTask+0x84>
			{
				break;
 80076b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076c0:	e003      	b.n	80076ca <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076cc:	2b06      	cmp	r3, #6
 80076ce:	d901      	bls.n	80076d4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076d0:	2306      	movs	r3, #6
 80076d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	2200      	movs	r2, #0
 80076e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	3304      	adds	r3, #4
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe ff2c 	bl	8006548 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	3318      	adds	r3, #24
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fe ff27 	bl	8006548 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	f1c3 0207 	rsb	r2, r3, #7
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800770e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	2200      	movs	r2, #0
 800771c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	334c      	adds	r3, #76	; 0x4c
 8007724:	2260      	movs	r2, #96	; 0x60
 8007726:	2100      	movs	r1, #0
 8007728:	4618      	mov	r0, r3
 800772a:	f00b fc73 	bl	8013014 <memset>
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	4a0c      	ldr	r2, [pc, #48]	; (8007764 <prvInitialiseNewTask+0x130>)
 8007732:	651a      	str	r2, [r3, #80]	; 0x50
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	4a0c      	ldr	r2, [pc, #48]	; (8007768 <prvInitialiseNewTask+0x134>)
 8007738:	655a      	str	r2, [r3, #84]	; 0x54
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	4a0b      	ldr	r2, [pc, #44]	; (800776c <prvInitialiseNewTask+0x138>)
 800773e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	69b8      	ldr	r0, [r7, #24]
 8007746:	f000 ff07 	bl	8008558 <pxPortInitialiseStack>
 800774a:	4602      	mov	r2, r0
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800775a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800775c:	bf00      	nop
 800775e:	3720      	adds	r7, #32
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	08016be8 	.word	0x08016be8
 8007768:	08016c08 	.word	0x08016c08
 800776c:	08016bc8 	.word	0x08016bc8

08007770 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007778:	f001 f81c 	bl	80087b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800777c:	4b2a      	ldr	r3, [pc, #168]	; (8007828 <prvAddNewTaskToReadyList+0xb8>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3301      	adds	r3, #1
 8007782:	4a29      	ldr	r2, [pc, #164]	; (8007828 <prvAddNewTaskToReadyList+0xb8>)
 8007784:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007786:	4b29      	ldr	r3, [pc, #164]	; (800782c <prvAddNewTaskToReadyList+0xbc>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d109      	bne.n	80077a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800778e:	4a27      	ldr	r2, [pc, #156]	; (800782c <prvAddNewTaskToReadyList+0xbc>)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007794:	4b24      	ldr	r3, [pc, #144]	; (8007828 <prvAddNewTaskToReadyList+0xb8>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d110      	bne.n	80077be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800779c:	f000 fbf8 	bl	8007f90 <prvInitialiseTaskLists>
 80077a0:	e00d      	b.n	80077be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077a2:	4b23      	ldr	r3, [pc, #140]	; (8007830 <prvAddNewTaskToReadyList+0xc0>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d109      	bne.n	80077be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077aa:	4b20      	ldr	r3, [pc, #128]	; (800782c <prvAddNewTaskToReadyList+0xbc>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d802      	bhi.n	80077be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077b8:	4a1c      	ldr	r2, [pc, #112]	; (800782c <prvAddNewTaskToReadyList+0xbc>)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077be:	4b1d      	ldr	r3, [pc, #116]	; (8007834 <prvAddNewTaskToReadyList+0xc4>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3301      	adds	r3, #1
 80077c4:	4a1b      	ldr	r2, [pc, #108]	; (8007834 <prvAddNewTaskToReadyList+0xc4>)
 80077c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	2201      	movs	r2, #1
 80077ce:	409a      	lsls	r2, r3
 80077d0:	4b19      	ldr	r3, [pc, #100]	; (8007838 <prvAddNewTaskToReadyList+0xc8>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	4a18      	ldr	r2, [pc, #96]	; (8007838 <prvAddNewTaskToReadyList+0xc8>)
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4a15      	ldr	r2, [pc, #84]	; (800783c <prvAddNewTaskToReadyList+0xcc>)
 80077e8:	441a      	add	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3304      	adds	r3, #4
 80077ee:	4619      	mov	r1, r3
 80077f0:	4610      	mov	r0, r2
 80077f2:	f7fe feb6 	bl	8006562 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077f6:	f001 f80d 	bl	8008814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077fa:	4b0d      	ldr	r3, [pc, #52]	; (8007830 <prvAddNewTaskToReadyList+0xc0>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00e      	beq.n	8007820 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007802:	4b0a      	ldr	r3, [pc, #40]	; (800782c <prvAddNewTaskToReadyList+0xbc>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	429a      	cmp	r2, r3
 800780e:	d207      	bcs.n	8007820 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007810:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <prvAddNewTaskToReadyList+0xd0>)
 8007812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	2000048c 	.word	0x2000048c
 800782c:	2000038c 	.word	0x2000038c
 8007830:	20000498 	.word	0x20000498
 8007834:	200004a8 	.word	0x200004a8
 8007838:	20000494 	.word	0x20000494
 800783c:	20000390 	.word	0x20000390
 8007840:	e000ed04 	.word	0xe000ed04

08007844 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d017      	beq.n	8007886 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007856:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <vTaskDelay+0x60>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <vTaskDelay+0x30>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	60bb      	str	r3, [r7, #8]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007874:	f000 f884 	bl	8007980 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007878:	2100      	movs	r1, #0
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fe06 	bl	800848c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007880:	f000 f88c 	bl	800799c <xTaskResumeAll>
 8007884:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d107      	bne.n	800789c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800788c:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <vTaskDelay+0x64>)
 800788e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	200004b4 	.word	0x200004b4
 80078a8:	e000ed04 	.word	0xe000ed04

080078ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08a      	sub	sp, #40	; 0x28
 80078b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078ba:	463a      	mov	r2, r7
 80078bc:	1d39      	adds	r1, r7, #4
 80078be:	f107 0308 	add.w	r3, r7, #8
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7f9 f912 	bl	8000aec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	9202      	str	r2, [sp, #8]
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	2300      	movs	r3, #0
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	2300      	movs	r3, #0
 80078d8:	460a      	mov	r2, r1
 80078da:	4921      	ldr	r1, [pc, #132]	; (8007960 <vTaskStartScheduler+0xb4>)
 80078dc:	4821      	ldr	r0, [pc, #132]	; (8007964 <vTaskStartScheduler+0xb8>)
 80078de:	f7ff fe07 	bl	80074f0 <xTaskCreateStatic>
 80078e2:	4603      	mov	r3, r0
 80078e4:	4a20      	ldr	r2, [pc, #128]	; (8007968 <vTaskStartScheduler+0xbc>)
 80078e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078e8:	4b1f      	ldr	r3, [pc, #124]	; (8007968 <vTaskStartScheduler+0xbc>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078f0:	2301      	movs	r3, #1
 80078f2:	617b      	str	r3, [r7, #20]
 80078f4:	e001      	b.n	80078fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d11b      	bne.n	8007938 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	613b      	str	r3, [r7, #16]
}
 8007912:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007914:	4b15      	ldr	r3, [pc, #84]	; (800796c <vTaskStartScheduler+0xc0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	334c      	adds	r3, #76	; 0x4c
 800791a:	4a15      	ldr	r2, [pc, #84]	; (8007970 <vTaskStartScheduler+0xc4>)
 800791c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800791e:	4b15      	ldr	r3, [pc, #84]	; (8007974 <vTaskStartScheduler+0xc8>)
 8007920:	f04f 32ff 	mov.w	r2, #4294967295
 8007924:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007926:	4b14      	ldr	r3, [pc, #80]	; (8007978 <vTaskStartScheduler+0xcc>)
 8007928:	2201      	movs	r2, #1
 800792a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800792c:	4b13      	ldr	r3, [pc, #76]	; (800797c <vTaskStartScheduler+0xd0>)
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007932:	f000 fe9d 	bl	8008670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007936:	e00e      	b.n	8007956 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793e:	d10a      	bne.n	8007956 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	60fb      	str	r3, [r7, #12]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <vTaskStartScheduler+0xa8>
}
 8007956:	bf00      	nop
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	08013fec 	.word	0x08013fec
 8007964:	08007f61 	.word	0x08007f61
 8007968:	200004b0 	.word	0x200004b0
 800796c:	2000038c 	.word	0x2000038c
 8007970:	2000001c 	.word	0x2000001c
 8007974:	200004ac 	.word	0x200004ac
 8007978:	20000498 	.word	0x20000498
 800797c:	20000490 	.word	0x20000490

08007980 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007984:	4b04      	ldr	r3, [pc, #16]	; (8007998 <vTaskSuspendAll+0x18>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3301      	adds	r3, #1
 800798a:	4a03      	ldr	r2, [pc, #12]	; (8007998 <vTaskSuspendAll+0x18>)
 800798c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800798e:	bf00      	nop
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	200004b4 	.word	0x200004b4

0800799c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079a6:	2300      	movs	r3, #0
 80079a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079aa:	4b41      	ldr	r3, [pc, #260]	; (8007ab0 <xTaskResumeAll+0x114>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10a      	bne.n	80079c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	603b      	str	r3, [r7, #0]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079c8:	f000 fef4 	bl	80087b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079cc:	4b38      	ldr	r3, [pc, #224]	; (8007ab0 <xTaskResumeAll+0x114>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	4a37      	ldr	r2, [pc, #220]	; (8007ab0 <xTaskResumeAll+0x114>)
 80079d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079d6:	4b36      	ldr	r3, [pc, #216]	; (8007ab0 <xTaskResumeAll+0x114>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d161      	bne.n	8007aa2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079de:	4b35      	ldr	r3, [pc, #212]	; (8007ab4 <xTaskResumeAll+0x118>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d05d      	beq.n	8007aa2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079e6:	e02e      	b.n	8007a46 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079e8:	4b33      	ldr	r3, [pc, #204]	; (8007ab8 <xTaskResumeAll+0x11c>)
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3318      	adds	r3, #24
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe fe11 	bl	800661c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	3304      	adds	r3, #4
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe fe0c 	bl	800661c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a08:	2201      	movs	r2, #1
 8007a0a:	409a      	lsls	r2, r3
 8007a0c:	4b2b      	ldr	r3, [pc, #172]	; (8007abc <xTaskResumeAll+0x120>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	4a2a      	ldr	r2, [pc, #168]	; (8007abc <xTaskResumeAll+0x120>)
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4a27      	ldr	r2, [pc, #156]	; (8007ac0 <xTaskResumeAll+0x124>)
 8007a24:	441a      	add	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f7fe fd98 	bl	8006562 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a36:	4b23      	ldr	r3, [pc, #140]	; (8007ac4 <xTaskResumeAll+0x128>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d302      	bcc.n	8007a46 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007a40:	4b21      	ldr	r3, [pc, #132]	; (8007ac8 <xTaskResumeAll+0x12c>)
 8007a42:	2201      	movs	r2, #1
 8007a44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a46:	4b1c      	ldr	r3, [pc, #112]	; (8007ab8 <xTaskResumeAll+0x11c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1cc      	bne.n	80079e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a54:	f000 fb3e 	bl	80080d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a58:	4b1c      	ldr	r3, [pc, #112]	; (8007acc <xTaskResumeAll+0x130>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d010      	beq.n	8007a86 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a64:	f000 f858 	bl	8007b18 <xTaskIncrementTick>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007a6e:	4b16      	ldr	r3, [pc, #88]	; (8007ac8 <xTaskResumeAll+0x12c>)
 8007a70:	2201      	movs	r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1f1      	bne.n	8007a64 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007a80:	4b12      	ldr	r3, [pc, #72]	; (8007acc <xTaskResumeAll+0x130>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a86:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <xTaskResumeAll+0x12c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d009      	beq.n	8007aa2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a92:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <xTaskResumeAll+0x134>)
 8007a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007aa2:	f000 feb7 	bl	8008814 <vPortExitCritical>

	return xAlreadyYielded;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	200004b4 	.word	0x200004b4
 8007ab4:	2000048c 	.word	0x2000048c
 8007ab8:	2000044c 	.word	0x2000044c
 8007abc:	20000494 	.word	0x20000494
 8007ac0:	20000390 	.word	0x20000390
 8007ac4:	2000038c 	.word	0x2000038c
 8007ac8:	200004a0 	.word	0x200004a0
 8007acc:	2000049c 	.word	0x2000049c
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007ada:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <xTaskGetTickCount+0x1c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ae0:	687b      	ldr	r3, [r7, #4]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20000490 	.word	0x20000490

08007af4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007afa:	f000 ff3d 	bl	8008978 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007afe:	2300      	movs	r3, #0
 8007b00:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007b02:	4b04      	ldr	r3, [pc, #16]	; (8007b14 <xTaskGetTickCountFromISR+0x20>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b08:	683b      	ldr	r3, [r7, #0]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000490 	.word	0x20000490

08007b18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b22:	4b4e      	ldr	r3, [pc, #312]	; (8007c5c <xTaskIncrementTick+0x144>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f040 808e 	bne.w	8007c48 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b2c:	4b4c      	ldr	r3, [pc, #304]	; (8007c60 <xTaskIncrementTick+0x148>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3301      	adds	r3, #1
 8007b32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b34:	4a4a      	ldr	r2, [pc, #296]	; (8007c60 <xTaskIncrementTick+0x148>)
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d120      	bne.n	8007b82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b40:	4b48      	ldr	r3, [pc, #288]	; (8007c64 <xTaskIncrementTick+0x14c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00a      	beq.n	8007b60 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	603b      	str	r3, [r7, #0]
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <xTaskIncrementTick+0x46>
 8007b60:	4b40      	ldr	r3, [pc, #256]	; (8007c64 <xTaskIncrementTick+0x14c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	4b40      	ldr	r3, [pc, #256]	; (8007c68 <xTaskIncrementTick+0x150>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a3e      	ldr	r2, [pc, #248]	; (8007c64 <xTaskIncrementTick+0x14c>)
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	4a3e      	ldr	r2, [pc, #248]	; (8007c68 <xTaskIncrementTick+0x150>)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	4b3d      	ldr	r3, [pc, #244]	; (8007c6c <xTaskIncrementTick+0x154>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	4a3c      	ldr	r2, [pc, #240]	; (8007c6c <xTaskIncrementTick+0x154>)
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	f000 faa9 	bl	80080d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b82:	4b3b      	ldr	r3, [pc, #236]	; (8007c70 <xTaskIncrementTick+0x158>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d348      	bcc.n	8007c1e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b8c:	4b35      	ldr	r3, [pc, #212]	; (8007c64 <xTaskIncrementTick+0x14c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d104      	bne.n	8007ba0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b96:	4b36      	ldr	r3, [pc, #216]	; (8007c70 <xTaskIncrementTick+0x158>)
 8007b98:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9c:	601a      	str	r2, [r3, #0]
					break;
 8007b9e:	e03e      	b.n	8007c1e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba0:	4b30      	ldr	r3, [pc, #192]	; (8007c64 <xTaskIncrementTick+0x14c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d203      	bcs.n	8007bc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bb8:	4a2d      	ldr	r2, [pc, #180]	; (8007c70 <xTaskIncrementTick+0x158>)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bbe:	e02e      	b.n	8007c1e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fe fd29 	bl	800661c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d004      	beq.n	8007bdc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	3318      	adds	r3, #24
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fd20 	bl	800661c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	2201      	movs	r2, #1
 8007be2:	409a      	lsls	r2, r3
 8007be4:	4b23      	ldr	r3, [pc, #140]	; (8007c74 <xTaskIncrementTick+0x15c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	4a22      	ldr	r2, [pc, #136]	; (8007c74 <xTaskIncrementTick+0x15c>)
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4a1f      	ldr	r2, [pc, #124]	; (8007c78 <xTaskIncrementTick+0x160>)
 8007bfc:	441a      	add	r2, r3
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	3304      	adds	r3, #4
 8007c02:	4619      	mov	r1, r3
 8007c04:	4610      	mov	r0, r2
 8007c06:	f7fe fcac 	bl	8006562 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0e:	4b1b      	ldr	r3, [pc, #108]	; (8007c7c <xTaskIncrementTick+0x164>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d3b9      	bcc.n	8007b8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c1c:	e7b6      	b.n	8007b8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c1e:	4b17      	ldr	r3, [pc, #92]	; (8007c7c <xTaskIncrementTick+0x164>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c24:	4914      	ldr	r1, [pc, #80]	; (8007c78 <xTaskIncrementTick+0x160>)
 8007c26:	4613      	mov	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d901      	bls.n	8007c3a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007c36:	2301      	movs	r3, #1
 8007c38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c3a:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <xTaskIncrementTick+0x168>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007c42:	2301      	movs	r3, #1
 8007c44:	617b      	str	r3, [r7, #20]
 8007c46:	e004      	b.n	8007c52 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c48:	4b0e      	ldr	r3, [pc, #56]	; (8007c84 <xTaskIncrementTick+0x16c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	4a0d      	ldr	r2, [pc, #52]	; (8007c84 <xTaskIncrementTick+0x16c>)
 8007c50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c52:	697b      	ldr	r3, [r7, #20]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	200004b4 	.word	0x200004b4
 8007c60:	20000490 	.word	0x20000490
 8007c64:	20000444 	.word	0x20000444
 8007c68:	20000448 	.word	0x20000448
 8007c6c:	200004a4 	.word	0x200004a4
 8007c70:	200004ac 	.word	0x200004ac
 8007c74:	20000494 	.word	0x20000494
 8007c78:	20000390 	.word	0x20000390
 8007c7c:	2000038c 	.word	0x2000038c
 8007c80:	200004a0 	.word	0x200004a0
 8007c84:	2000049c 	.word	0x2000049c

08007c88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c8e:	4b29      	ldr	r3, [pc, #164]	; (8007d34 <vTaskSwitchContext+0xac>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c96:	4b28      	ldr	r3, [pc, #160]	; (8007d38 <vTaskSwitchContext+0xb0>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c9c:	e044      	b.n	8007d28 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007c9e:	4b26      	ldr	r3, [pc, #152]	; (8007d38 <vTaskSwitchContext+0xb0>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ca4:	4b25      	ldr	r3, [pc, #148]	; (8007d3c <vTaskSwitchContext+0xb4>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	fab3 f383 	clz	r3, r3
 8007cb0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007cb2:	7afb      	ldrb	r3, [r7, #11]
 8007cb4:	f1c3 031f 	rsb	r3, r3, #31
 8007cb8:	617b      	str	r3, [r7, #20]
 8007cba:	4921      	ldr	r1, [pc, #132]	; (8007d40 <vTaskSwitchContext+0xb8>)
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	440b      	add	r3, r1
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10a      	bne.n	8007ce4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	607b      	str	r3, [r7, #4]
}
 8007ce0:	bf00      	nop
 8007ce2:	e7fe      	b.n	8007ce2 <vTaskSwitchContext+0x5a>
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4a14      	ldr	r2, [pc, #80]	; (8007d40 <vTaskSwitchContext+0xb8>)
 8007cf0:	4413      	add	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	605a      	str	r2, [r3, #4]
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	3308      	adds	r3, #8
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d104      	bne.n	8007d14 <vTaskSwitchContext+0x8c>
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	605a      	str	r2, [r3, #4]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	4a0a      	ldr	r2, [pc, #40]	; (8007d44 <vTaskSwitchContext+0xbc>)
 8007d1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d1e:	4b09      	ldr	r3, [pc, #36]	; (8007d44 <vTaskSwitchContext+0xbc>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	334c      	adds	r3, #76	; 0x4c
 8007d24:	4a08      	ldr	r2, [pc, #32]	; (8007d48 <vTaskSwitchContext+0xc0>)
 8007d26:	6013      	str	r3, [r2, #0]
}
 8007d28:	bf00      	nop
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	200004b4 	.word	0x200004b4
 8007d38:	200004a0 	.word	0x200004a0
 8007d3c:	20000494 	.word	0x20000494
 8007d40:	20000390 	.word	0x20000390
 8007d44:	2000038c 	.word	0x2000038c
 8007d48:	2000001c 	.word	0x2000001c

08007d4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10a      	bne.n	8007d72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	60fb      	str	r3, [r7, #12]
}
 8007d6e:	bf00      	nop
 8007d70:	e7fe      	b.n	8007d70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d72:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <vTaskPlaceOnEventList+0x44>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3318      	adds	r3, #24
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fe fc15 	bl	80065aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d80:	2101      	movs	r1, #1
 8007d82:	6838      	ldr	r0, [r7, #0]
 8007d84:	f000 fb82 	bl	800848c <prvAddCurrentTaskToDelayedList>
}
 8007d88:	bf00      	nop
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	2000038c 	.word	0x2000038c

08007d94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10a      	bne.n	8007dc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	60fb      	str	r3, [r7, #12]
}
 8007dbc:	bf00      	nop
 8007dbe:	e7fe      	b.n	8007dbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	3318      	adds	r3, #24
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fe fc29 	bl	800661c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dca:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <xTaskRemoveFromEventList+0xac>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d11c      	bne.n	8007e0c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fe fc20 	bl	800661c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de0:	2201      	movs	r2, #1
 8007de2:	409a      	lsls	r2, r3
 8007de4:	4b17      	ldr	r3, [pc, #92]	; (8007e44 <xTaskRemoveFromEventList+0xb0>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	4a16      	ldr	r2, [pc, #88]	; (8007e44 <xTaskRemoveFromEventList+0xb0>)
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4a13      	ldr	r2, [pc, #76]	; (8007e48 <xTaskRemoveFromEventList+0xb4>)
 8007dfc:	441a      	add	r2, r3
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4619      	mov	r1, r3
 8007e04:	4610      	mov	r0, r2
 8007e06:	f7fe fbac 	bl	8006562 <vListInsertEnd>
 8007e0a:	e005      	b.n	8007e18 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	3318      	adds	r3, #24
 8007e10:	4619      	mov	r1, r3
 8007e12:	480e      	ldr	r0, [pc, #56]	; (8007e4c <xTaskRemoveFromEventList+0xb8>)
 8007e14:	f7fe fba5 	bl	8006562 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1c:	4b0c      	ldr	r3, [pc, #48]	; (8007e50 <xTaskRemoveFromEventList+0xbc>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d905      	bls.n	8007e32 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e26:	2301      	movs	r3, #1
 8007e28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e2a:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <xTaskRemoveFromEventList+0xc0>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	e001      	b.n	8007e36 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007e32:	2300      	movs	r3, #0
 8007e34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e36:	697b      	ldr	r3, [r7, #20]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	200004b4 	.word	0x200004b4
 8007e44:	20000494 	.word	0x20000494
 8007e48:	20000390 	.word	0x20000390
 8007e4c:	2000044c 	.word	0x2000044c
 8007e50:	2000038c 	.word	0x2000038c
 8007e54:	200004a0 	.word	0x200004a0

08007e58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e60:	4b06      	ldr	r3, [pc, #24]	; (8007e7c <vTaskInternalSetTimeOutState+0x24>)
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e68:	4b05      	ldr	r3, [pc, #20]	; (8007e80 <vTaskInternalSetTimeOutState+0x28>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	605a      	str	r2, [r3, #4]
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	200004a4 	.word	0x200004a4
 8007e80:	20000490 	.word	0x20000490

08007e84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10a      	bne.n	8007eaa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	613b      	str	r3, [r7, #16]
}
 8007ea6:	bf00      	nop
 8007ea8:	e7fe      	b.n	8007ea8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10a      	bne.n	8007ec6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	60fb      	str	r3, [r7, #12]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ec6:	f000 fc75 	bl	80087b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007eca:	4b1d      	ldr	r3, [pc, #116]	; (8007f40 <xTaskCheckForTimeOut+0xbc>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee2:	d102      	bne.n	8007eea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61fb      	str	r3, [r7, #28]
 8007ee8:	e023      	b.n	8007f32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	4b15      	ldr	r3, [pc, #84]	; (8007f44 <xTaskCheckForTimeOut+0xc0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d007      	beq.n	8007f06 <xTaskCheckForTimeOut+0x82>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d302      	bcc.n	8007f06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f00:	2301      	movs	r3, #1
 8007f02:	61fb      	str	r3, [r7, #28]
 8007f04:	e015      	b.n	8007f32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d20b      	bcs.n	8007f28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	1ad2      	subs	r2, r2, r3
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff ff9b 	bl	8007e58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61fb      	str	r3, [r7, #28]
 8007f26:	e004      	b.n	8007f32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f32:	f000 fc6f 	bl	8008814 <vPortExitCritical>

	return xReturn;
 8007f36:	69fb      	ldr	r3, [r7, #28]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3720      	adds	r7, #32
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000490 	.word	0x20000490
 8007f44:	200004a4 	.word	0x200004a4

08007f48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f48:	b480      	push	{r7}
 8007f4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f4c:	4b03      	ldr	r3, [pc, #12]	; (8007f5c <vTaskMissedYield+0x14>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	601a      	str	r2, [r3, #0]
}
 8007f52:	bf00      	nop
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	200004a0 	.word	0x200004a0

08007f60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f68:	f000 f852 	bl	8008010 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f6c:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <prvIdleTask+0x28>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d9f9      	bls.n	8007f68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f74:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <prvIdleTask+0x2c>)
 8007f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f84:	e7f0      	b.n	8007f68 <prvIdleTask+0x8>
 8007f86:	bf00      	nop
 8007f88:	20000390 	.word	0x20000390
 8007f8c:	e000ed04 	.word	0xe000ed04

08007f90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f96:	2300      	movs	r3, #0
 8007f98:	607b      	str	r3, [r7, #4]
 8007f9a:	e00c      	b.n	8007fb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4a12      	ldr	r2, [pc, #72]	; (8007ff0 <prvInitialiseTaskLists+0x60>)
 8007fa8:	4413      	add	r3, r2
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fe faac 	bl	8006508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	607b      	str	r3, [r7, #4]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b06      	cmp	r3, #6
 8007fba:	d9ef      	bls.n	8007f9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fbc:	480d      	ldr	r0, [pc, #52]	; (8007ff4 <prvInitialiseTaskLists+0x64>)
 8007fbe:	f7fe faa3 	bl	8006508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fc2:	480d      	ldr	r0, [pc, #52]	; (8007ff8 <prvInitialiseTaskLists+0x68>)
 8007fc4:	f7fe faa0 	bl	8006508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fc8:	480c      	ldr	r0, [pc, #48]	; (8007ffc <prvInitialiseTaskLists+0x6c>)
 8007fca:	f7fe fa9d 	bl	8006508 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fce:	480c      	ldr	r0, [pc, #48]	; (8008000 <prvInitialiseTaskLists+0x70>)
 8007fd0:	f7fe fa9a 	bl	8006508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fd4:	480b      	ldr	r0, [pc, #44]	; (8008004 <prvInitialiseTaskLists+0x74>)
 8007fd6:	f7fe fa97 	bl	8006508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fda:	4b0b      	ldr	r3, [pc, #44]	; (8008008 <prvInitialiseTaskLists+0x78>)
 8007fdc:	4a05      	ldr	r2, [pc, #20]	; (8007ff4 <prvInitialiseTaskLists+0x64>)
 8007fde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	; (800800c <prvInitialiseTaskLists+0x7c>)
 8007fe2:	4a05      	ldr	r2, [pc, #20]	; (8007ff8 <prvInitialiseTaskLists+0x68>)
 8007fe4:	601a      	str	r2, [r3, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000390 	.word	0x20000390
 8007ff4:	2000041c 	.word	0x2000041c
 8007ff8:	20000430 	.word	0x20000430
 8007ffc:	2000044c 	.word	0x2000044c
 8008000:	20000460 	.word	0x20000460
 8008004:	20000478 	.word	0x20000478
 8008008:	20000444 	.word	0x20000444
 800800c:	20000448 	.word	0x20000448

08008010 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008016:	e019      	b.n	800804c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008018:	f000 fbcc 	bl	80087b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800801c:	4b10      	ldr	r3, [pc, #64]	; (8008060 <prvCheckTasksWaitingTermination+0x50>)
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3304      	adds	r3, #4
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe faf7 	bl	800661c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800802e:	4b0d      	ldr	r3, [pc, #52]	; (8008064 <prvCheckTasksWaitingTermination+0x54>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3b01      	subs	r3, #1
 8008034:	4a0b      	ldr	r2, [pc, #44]	; (8008064 <prvCheckTasksWaitingTermination+0x54>)
 8008036:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008038:	4b0b      	ldr	r3, [pc, #44]	; (8008068 <prvCheckTasksWaitingTermination+0x58>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3b01      	subs	r3, #1
 800803e:	4a0a      	ldr	r2, [pc, #40]	; (8008068 <prvCheckTasksWaitingTermination+0x58>)
 8008040:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008042:	f000 fbe7 	bl	8008814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f810 	bl	800806c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800804c:	4b06      	ldr	r3, [pc, #24]	; (8008068 <prvCheckTasksWaitingTermination+0x58>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1e1      	bne.n	8008018 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008054:	bf00      	nop
 8008056:	bf00      	nop
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000460 	.word	0x20000460
 8008064:	2000048c 	.word	0x2000048c
 8008068:	20000474 	.word	0x20000474

0800806c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	334c      	adds	r3, #76	; 0x4c
 8008078:	4618      	mov	r0, r3
 800807a:	f00b f8e3 	bl	8013244 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008084:	2b00      	cmp	r3, #0
 8008086:	d108      	bne.n	800809a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fd7f 	bl	8008b90 <vPortFree>
				vPortFree( pxTCB );
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fd7c 	bl	8008b90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008098:	e018      	b.n	80080cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d103      	bne.n	80080ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fd73 	bl	8008b90 <vPortFree>
	}
 80080aa:	e00f      	b.n	80080cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d00a      	beq.n	80080cc <prvDeleteTCB+0x60>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60fb      	str	r3, [r7, #12]
}
 80080c8:	bf00      	nop
 80080ca:	e7fe      	b.n	80080ca <prvDeleteTCB+0x5e>
	}
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080da:	4b0c      	ldr	r3, [pc, #48]	; (800810c <prvResetNextTaskUnblockTime+0x38>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d104      	bne.n	80080ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080e4:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <prvResetNextTaskUnblockTime+0x3c>)
 80080e6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080ec:	e008      	b.n	8008100 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ee:	4b07      	ldr	r3, [pc, #28]	; (800810c <prvResetNextTaskUnblockTime+0x38>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	4a04      	ldr	r2, [pc, #16]	; (8008110 <prvResetNextTaskUnblockTime+0x3c>)
 80080fe:	6013      	str	r3, [r2, #0]
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	20000444 	.word	0x20000444
 8008110:	200004ac 	.word	0x200004ac

08008114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800811a:	4b0b      	ldr	r3, [pc, #44]	; (8008148 <xTaskGetSchedulerState+0x34>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d102      	bne.n	8008128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008122:	2301      	movs	r3, #1
 8008124:	607b      	str	r3, [r7, #4]
 8008126:	e008      	b.n	800813a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008128:	4b08      	ldr	r3, [pc, #32]	; (800814c <xTaskGetSchedulerState+0x38>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d102      	bne.n	8008136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008130:	2302      	movs	r3, #2
 8008132:	607b      	str	r3, [r7, #4]
 8008134:	e001      	b.n	800813a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008136:	2300      	movs	r3, #0
 8008138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800813a:	687b      	ldr	r3, [r7, #4]
	}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	20000498 	.word	0x20000498
 800814c:	200004b4 	.word	0x200004b4

08008150 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800815c:	2300      	movs	r3, #0
 800815e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d05e      	beq.n	8008224 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816a:	4b31      	ldr	r3, [pc, #196]	; (8008230 <xTaskPriorityInherit+0xe0>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	429a      	cmp	r2, r3
 8008172:	d24e      	bcs.n	8008212 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	2b00      	cmp	r3, #0
 800817a:	db06      	blt.n	800818a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800817c:	4b2c      	ldr	r3, [pc, #176]	; (8008230 <xTaskPriorityInherit+0xe0>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	f1c3 0207 	rsb	r2, r3, #7
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	6959      	ldr	r1, [r3, #20]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4a26      	ldr	r2, [pc, #152]	; (8008234 <xTaskPriorityInherit+0xe4>)
 800819c:	4413      	add	r3, r2
 800819e:	4299      	cmp	r1, r3
 80081a0:	d12f      	bne.n	8008202 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	3304      	adds	r3, #4
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe fa38 	bl	800661c <uxListRemove>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10a      	bne.n	80081c8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	2201      	movs	r2, #1
 80081b8:	fa02 f303 	lsl.w	r3, r2, r3
 80081bc:	43da      	mvns	r2, r3
 80081be:	4b1e      	ldr	r3, [pc, #120]	; (8008238 <xTaskPriorityInherit+0xe8>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4013      	ands	r3, r2
 80081c4:	4a1c      	ldr	r2, [pc, #112]	; (8008238 <xTaskPriorityInherit+0xe8>)
 80081c6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081c8:	4b19      	ldr	r3, [pc, #100]	; (8008230 <xTaskPriorityInherit+0xe0>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d6:	2201      	movs	r2, #1
 80081d8:	409a      	lsls	r2, r3
 80081da:	4b17      	ldr	r3, [pc, #92]	; (8008238 <xTaskPriorityInherit+0xe8>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4313      	orrs	r3, r2
 80081e0:	4a15      	ldr	r2, [pc, #84]	; (8008238 <xTaskPriorityInherit+0xe8>)
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4a10      	ldr	r2, [pc, #64]	; (8008234 <xTaskPriorityInherit+0xe4>)
 80081f2:	441a      	add	r2, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4619      	mov	r1, r3
 80081fa:	4610      	mov	r0, r2
 80081fc:	f7fe f9b1 	bl	8006562 <vListInsertEnd>
 8008200:	e004      	b.n	800820c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008202:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <xTaskPriorityInherit+0xe0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800820c:	2301      	movs	r3, #1
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	e008      	b.n	8008224 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008216:	4b06      	ldr	r3, [pc, #24]	; (8008230 <xTaskPriorityInherit+0xe0>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	429a      	cmp	r2, r3
 800821e:	d201      	bcs.n	8008224 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008220:	2301      	movs	r3, #1
 8008222:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008224:	68fb      	ldr	r3, [r7, #12]
	}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	2000038c 	.word	0x2000038c
 8008234:	20000390 	.word	0x20000390
 8008238:	20000494 	.word	0x20000494

0800823c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008248:	2300      	movs	r3, #0
 800824a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d06e      	beq.n	8008330 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008252:	4b3a      	ldr	r3, [pc, #232]	; (800833c <xTaskPriorityDisinherit+0x100>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	429a      	cmp	r2, r3
 800825a:	d00a      	beq.n	8008272 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	60fb      	str	r3, [r7, #12]
}
 800826e:	bf00      	nop
 8008270:	e7fe      	b.n	8008270 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10a      	bne.n	8008290 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	60bb      	str	r3, [r7, #8]
}
 800828c:	bf00      	nop
 800828e:	e7fe      	b.n	800828e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008294:	1e5a      	subs	r2, r3, #1
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d044      	beq.n	8008330 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d140      	bne.n	8008330 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe f9b2 	bl	800661c <uxListRemove>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d115      	bne.n	80082ea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c2:	491f      	ldr	r1, [pc, #124]	; (8008340 <xTaskPriorityDisinherit+0x104>)
 80082c4:	4613      	mov	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	440b      	add	r3, r1
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <xTaskPriorityDisinherit+0xae>
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	2201      	movs	r2, #1
 80082da:	fa02 f303 	lsl.w	r3, r2, r3
 80082de:	43da      	mvns	r2, r3
 80082e0:	4b18      	ldr	r3, [pc, #96]	; (8008344 <xTaskPriorityDisinherit+0x108>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4013      	ands	r3, r2
 80082e6:	4a17      	ldr	r2, [pc, #92]	; (8008344 <xTaskPriorityDisinherit+0x108>)
 80082e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f6:	f1c3 0207 	rsb	r2, r3, #7
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	2201      	movs	r2, #1
 8008304:	409a      	lsls	r2, r3
 8008306:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <xTaskPriorityDisinherit+0x108>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4313      	orrs	r3, r2
 800830c:	4a0d      	ldr	r2, [pc, #52]	; (8008344 <xTaskPriorityDisinherit+0x108>)
 800830e:	6013      	str	r3, [r2, #0]
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4a08      	ldr	r2, [pc, #32]	; (8008340 <xTaskPriorityDisinherit+0x104>)
 800831e:	441a      	add	r2, r3
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	3304      	adds	r3, #4
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f7fe f91b 	bl	8006562 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800832c:	2301      	movs	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008330:	697b      	ldr	r3, [r7, #20]
	}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	2000038c 	.word	0x2000038c
 8008340:	20000390 	.word	0x20000390
 8008344:	20000494 	.word	0x20000494

08008348 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008348:	b580      	push	{r7, lr}
 800834a:	b088      	sub	sp, #32
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008356:	2301      	movs	r3, #1
 8008358:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d077      	beq.n	8008450 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	60fb      	str	r3, [r7, #12]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	429a      	cmp	r2, r3
 8008386:	d902      	bls.n	800838e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	61fb      	str	r3, [r7, #28]
 800838c:	e002      	b.n	8008394 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008392:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	69fa      	ldr	r2, [r7, #28]
 800839a:	429a      	cmp	r2, r3
 800839c:	d058      	beq.n	8008450 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d153      	bne.n	8008450 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80083a8:	4b2b      	ldr	r3, [pc, #172]	; (8008458 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d10a      	bne.n	80083c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	60bb      	str	r3, [r7, #8]
}
 80083c4:	bf00      	nop
 80083c6:	e7fe      	b.n	80083c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	69fa      	ldr	r2, [r7, #28]
 80083d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	db04      	blt.n	80083e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	f1c3 0207 	rsb	r2, r3, #7
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	6959      	ldr	r1, [r3, #20]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4a19      	ldr	r2, [pc, #100]	; (800845c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80083f6:	4413      	add	r3, r2
 80083f8:	4299      	cmp	r1, r3
 80083fa:	d129      	bne.n	8008450 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	3304      	adds	r3, #4
 8008400:	4618      	mov	r0, r3
 8008402:	f7fe f90b 	bl	800661c <uxListRemove>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10a      	bne.n	8008422 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008410:	2201      	movs	r2, #1
 8008412:	fa02 f303 	lsl.w	r3, r2, r3
 8008416:	43da      	mvns	r2, r3
 8008418:	4b11      	ldr	r3, [pc, #68]	; (8008460 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4013      	ands	r3, r2
 800841e:	4a10      	ldr	r2, [pc, #64]	; (8008460 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008420:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008426:	2201      	movs	r2, #1
 8008428:	409a      	lsls	r2, r3
 800842a:	4b0d      	ldr	r3, [pc, #52]	; (8008460 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4313      	orrs	r3, r2
 8008430:	4a0b      	ldr	r2, [pc, #44]	; (8008460 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4a06      	ldr	r2, [pc, #24]	; (800845c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008442:	441a      	add	r2, r3
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	3304      	adds	r3, #4
 8008448:	4619      	mov	r1, r3
 800844a:	4610      	mov	r0, r2
 800844c:	f7fe f889 	bl	8006562 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008450:	bf00      	nop
 8008452:	3720      	adds	r7, #32
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	2000038c 	.word	0x2000038c
 800845c:	20000390 	.word	0x20000390
 8008460:	20000494 	.word	0x20000494

08008464 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008464:	b480      	push	{r7}
 8008466:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008468:	4b07      	ldr	r3, [pc, #28]	; (8008488 <pvTaskIncrementMutexHeldCount+0x24>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d004      	beq.n	800847a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008470:	4b05      	ldr	r3, [pc, #20]	; (8008488 <pvTaskIncrementMutexHeldCount+0x24>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008476:	3201      	adds	r2, #1
 8008478:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800847a:	4b03      	ldr	r3, [pc, #12]	; (8008488 <pvTaskIncrementMutexHeldCount+0x24>)
 800847c:	681b      	ldr	r3, [r3, #0]
	}
 800847e:	4618      	mov	r0, r3
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	2000038c 	.word	0x2000038c

0800848c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008496:	4b29      	ldr	r3, [pc, #164]	; (800853c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800849c:	4b28      	ldr	r3, [pc, #160]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3304      	adds	r3, #4
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe f8ba 	bl	800661c <uxListRemove>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10b      	bne.n	80084c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80084ae:	4b24      	ldr	r3, [pc, #144]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	2201      	movs	r2, #1
 80084b6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ba:	43da      	mvns	r2, r3
 80084bc:	4b21      	ldr	r3, [pc, #132]	; (8008544 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4013      	ands	r3, r2
 80084c2:	4a20      	ldr	r2, [pc, #128]	; (8008544 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084cc:	d10a      	bne.n	80084e4 <prvAddCurrentTaskToDelayedList+0x58>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d007      	beq.n	80084e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d4:	4b1a      	ldr	r3, [pc, #104]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3304      	adds	r3, #4
 80084da:	4619      	mov	r1, r3
 80084dc:	481a      	ldr	r0, [pc, #104]	; (8008548 <prvAddCurrentTaskToDelayedList+0xbc>)
 80084de:	f7fe f840 	bl	8006562 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084e2:	e026      	b.n	8008532 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4413      	add	r3, r2
 80084ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084ec:	4b14      	ldr	r3, [pc, #80]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d209      	bcs.n	8008510 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084fc:	4b13      	ldr	r3, [pc, #76]	; (800854c <prvAddCurrentTaskToDelayedList+0xc0>)
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	4b0f      	ldr	r3, [pc, #60]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3304      	adds	r3, #4
 8008506:	4619      	mov	r1, r3
 8008508:	4610      	mov	r0, r2
 800850a:	f7fe f84e 	bl	80065aa <vListInsert>
}
 800850e:	e010      	b.n	8008532 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008510:	4b0f      	ldr	r3, [pc, #60]	; (8008550 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3304      	adds	r3, #4
 800851a:	4619      	mov	r1, r3
 800851c:	4610      	mov	r0, r2
 800851e:	f7fe f844 	bl	80065aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008522:	4b0c      	ldr	r3, [pc, #48]	; (8008554 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	429a      	cmp	r2, r3
 800852a:	d202      	bcs.n	8008532 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800852c:	4a09      	ldr	r2, [pc, #36]	; (8008554 <prvAddCurrentTaskToDelayedList+0xc8>)
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	6013      	str	r3, [r2, #0]
}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20000490 	.word	0x20000490
 8008540:	2000038c 	.word	0x2000038c
 8008544:	20000494 	.word	0x20000494
 8008548:	20000478 	.word	0x20000478
 800854c:	20000448 	.word	0x20000448
 8008550:	20000444 	.word	0x20000444
 8008554:	200004ac 	.word	0x200004ac

08008558 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3b04      	subs	r3, #4
 8008568:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3b04      	subs	r3, #4
 8008576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f023 0201 	bic.w	r2, r3, #1
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3b04      	subs	r3, #4
 8008586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008588:	4a0c      	ldr	r2, [pc, #48]	; (80085bc <pxPortInitialiseStack+0x64>)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3b14      	subs	r3, #20
 8008592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3b04      	subs	r3, #4
 800859e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f06f 0202 	mvn.w	r2, #2
 80085a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	3b20      	subs	r3, #32
 80085ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085ae:	68fb      	ldr	r3, [r7, #12]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	080085c1 	.word	0x080085c1

080085c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085ca:	4b12      	ldr	r3, [pc, #72]	; (8008614 <prvTaskExitError+0x54>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d2:	d00a      	beq.n	80085ea <prvTaskExitError+0x2a>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	60fb      	str	r3, [r7, #12]
}
 80085e6:	bf00      	nop
 80085e8:	e7fe      	b.n	80085e8 <prvTaskExitError+0x28>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	60bb      	str	r3, [r7, #8]
}
 80085fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085fe:	bf00      	nop
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0fc      	beq.n	8008600 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008606:	bf00      	nop
 8008608:	bf00      	nop
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	2000000c 	.word	0x2000000c
	...

08008620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008620:	4b07      	ldr	r3, [pc, #28]	; (8008640 <pxCurrentTCBConst2>)
 8008622:	6819      	ldr	r1, [r3, #0]
 8008624:	6808      	ldr	r0, [r1, #0]
 8008626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862a:	f380 8809 	msr	PSP, r0
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f04f 0000 	mov.w	r0, #0
 8008636:	f380 8811 	msr	BASEPRI, r0
 800863a:	4770      	bx	lr
 800863c:	f3af 8000 	nop.w

08008640 <pxCurrentTCBConst2>:
 8008640:	2000038c 	.word	0x2000038c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop

08008648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008648:	4808      	ldr	r0, [pc, #32]	; (800866c <prvPortStartFirstTask+0x24>)
 800864a:	6800      	ldr	r0, [r0, #0]
 800864c:	6800      	ldr	r0, [r0, #0]
 800864e:	f380 8808 	msr	MSP, r0
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f380 8814 	msr	CONTROL, r0
 800865a:	b662      	cpsie	i
 800865c:	b661      	cpsie	f
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	df00      	svc	0
 8008668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800866a:	bf00      	nop
 800866c:	e000ed08 	.word	0xe000ed08

08008670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008676:	4b46      	ldr	r3, [pc, #280]	; (8008790 <xPortStartScheduler+0x120>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a46      	ldr	r2, [pc, #280]	; (8008794 <xPortStartScheduler+0x124>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d10a      	bne.n	8008696 <xPortStartScheduler+0x26>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	613b      	str	r3, [r7, #16]
}
 8008692:	bf00      	nop
 8008694:	e7fe      	b.n	8008694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008696:	4b3e      	ldr	r3, [pc, #248]	; (8008790 <xPortStartScheduler+0x120>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a3f      	ldr	r2, [pc, #252]	; (8008798 <xPortStartScheduler+0x128>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d10a      	bne.n	80086b6 <xPortStartScheduler+0x46>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	60fb      	str	r3, [r7, #12]
}
 80086b2:	bf00      	nop
 80086b4:	e7fe      	b.n	80086b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086b6:	4b39      	ldr	r3, [pc, #228]	; (800879c <xPortStartScheduler+0x12c>)
 80086b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	22ff      	movs	r2, #255	; 0xff
 80086c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	4b31      	ldr	r3, [pc, #196]	; (80087a0 <xPortStartScheduler+0x130>)
 80086dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086de:	4b31      	ldr	r3, [pc, #196]	; (80087a4 <xPortStartScheduler+0x134>)
 80086e0:	2207      	movs	r2, #7
 80086e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086e4:	e009      	b.n	80086fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80086e6:	4b2f      	ldr	r3, [pc, #188]	; (80087a4 <xPortStartScheduler+0x134>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	4a2d      	ldr	r2, [pc, #180]	; (80087a4 <xPortStartScheduler+0x134>)
 80086ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086fa:	78fb      	ldrb	r3, [r7, #3]
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008702:	2b80      	cmp	r3, #128	; 0x80
 8008704:	d0ef      	beq.n	80086e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008706:	4b27      	ldr	r3, [pc, #156]	; (80087a4 <xPortStartScheduler+0x134>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f1c3 0307 	rsb	r3, r3, #7
 800870e:	2b04      	cmp	r3, #4
 8008710:	d00a      	beq.n	8008728 <xPortStartScheduler+0xb8>
	__asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	60bb      	str	r3, [r7, #8]
}
 8008724:	bf00      	nop
 8008726:	e7fe      	b.n	8008726 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008728:	4b1e      	ldr	r3, [pc, #120]	; (80087a4 <xPortStartScheduler+0x134>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	4a1d      	ldr	r2, [pc, #116]	; (80087a4 <xPortStartScheduler+0x134>)
 8008730:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008732:	4b1c      	ldr	r3, [pc, #112]	; (80087a4 <xPortStartScheduler+0x134>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800873a:	4a1a      	ldr	r2, [pc, #104]	; (80087a4 <xPortStartScheduler+0x134>)
 800873c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	b2da      	uxtb	r2, r3
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008746:	4b18      	ldr	r3, [pc, #96]	; (80087a8 <xPortStartScheduler+0x138>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a17      	ldr	r2, [pc, #92]	; (80087a8 <xPortStartScheduler+0x138>)
 800874c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008752:	4b15      	ldr	r3, [pc, #84]	; (80087a8 <xPortStartScheduler+0x138>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a14      	ldr	r2, [pc, #80]	; (80087a8 <xPortStartScheduler+0x138>)
 8008758:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800875c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800875e:	f000 f8dd 	bl	800891c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008762:	4b12      	ldr	r3, [pc, #72]	; (80087ac <xPortStartScheduler+0x13c>)
 8008764:	2200      	movs	r2, #0
 8008766:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008768:	f000 f8fc 	bl	8008964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800876c:	4b10      	ldr	r3, [pc, #64]	; (80087b0 <xPortStartScheduler+0x140>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a0f      	ldr	r2, [pc, #60]	; (80087b0 <xPortStartScheduler+0x140>)
 8008772:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008776:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008778:	f7ff ff66 	bl	8008648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800877c:	f7ff fa84 	bl	8007c88 <vTaskSwitchContext>
	prvTaskExitError();
 8008780:	f7ff ff1e 	bl	80085c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	e000ed00 	.word	0xe000ed00
 8008794:	410fc271 	.word	0x410fc271
 8008798:	410fc270 	.word	0x410fc270
 800879c:	e000e400 	.word	0xe000e400
 80087a0:	200004b8 	.word	0x200004b8
 80087a4:	200004bc 	.word	0x200004bc
 80087a8:	e000ed20 	.word	0xe000ed20
 80087ac:	2000000c 	.word	0x2000000c
 80087b0:	e000ef34 	.word	0xe000ef34

080087b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	607b      	str	r3, [r7, #4]
}
 80087cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087ce:	4b0f      	ldr	r3, [pc, #60]	; (800880c <vPortEnterCritical+0x58>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3301      	adds	r3, #1
 80087d4:	4a0d      	ldr	r2, [pc, #52]	; (800880c <vPortEnterCritical+0x58>)
 80087d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087d8:	4b0c      	ldr	r3, [pc, #48]	; (800880c <vPortEnterCritical+0x58>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d10f      	bne.n	8008800 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087e0:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <vPortEnterCritical+0x5c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <vPortEnterCritical+0x4c>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	603b      	str	r3, [r7, #0]
}
 80087fc:	bf00      	nop
 80087fe:	e7fe      	b.n	80087fe <vPortEnterCritical+0x4a>
	}
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	2000000c 	.word	0x2000000c
 8008810:	e000ed04 	.word	0xe000ed04

08008814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800881a:	4b12      	ldr	r3, [pc, #72]	; (8008864 <vPortExitCritical+0x50>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <vPortExitCritical+0x24>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	607b      	str	r3, [r7, #4]
}
 8008834:	bf00      	nop
 8008836:	e7fe      	b.n	8008836 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008838:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <vPortExitCritical+0x50>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3b01      	subs	r3, #1
 800883e:	4a09      	ldr	r2, [pc, #36]	; (8008864 <vPortExitCritical+0x50>)
 8008840:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008842:	4b08      	ldr	r3, [pc, #32]	; (8008864 <vPortExitCritical+0x50>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d105      	bne.n	8008856 <vPortExitCritical+0x42>
 800884a:	2300      	movs	r3, #0
 800884c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	f383 8811 	msr	BASEPRI, r3
}
 8008854:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	2000000c 	.word	0x2000000c
	...

08008870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008870:	f3ef 8009 	mrs	r0, PSP
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <pxCurrentTCBConst>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	f01e 0f10 	tst.w	lr, #16
 8008880:	bf08      	it	eq
 8008882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888a:	6010      	str	r0, [r2, #0]
 800888c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008894:	f380 8811 	msr	BASEPRI, r0
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f7ff f9f2 	bl	8007c88 <vTaskSwitchContext>
 80088a4:	f04f 0000 	mov.w	r0, #0
 80088a8:	f380 8811 	msr	BASEPRI, r0
 80088ac:	bc09      	pop	{r0, r3}
 80088ae:	6819      	ldr	r1, [r3, #0]
 80088b0:	6808      	ldr	r0, [r1, #0]
 80088b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b6:	f01e 0f10 	tst.w	lr, #16
 80088ba:	bf08      	it	eq
 80088bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088c0:	f380 8809 	msr	PSP, r0
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	f3af 8000 	nop.w

080088d0 <pxCurrentTCBConst>:
 80088d0:	2000038c 	.word	0x2000038c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop

080088d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	607b      	str	r3, [r7, #4]
}
 80088f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088f2:	f7ff f911 	bl	8007b18 <xTaskIncrementTick>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088fc:	4b06      	ldr	r3, [pc, #24]	; (8008918 <SysTick_Handler+0x40>)
 80088fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	2300      	movs	r3, #0
 8008906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f383 8811 	msr	BASEPRI, r3
}
 800890e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	e000ed04 	.word	0xe000ed04

0800891c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008920:	4b0b      	ldr	r3, [pc, #44]	; (8008950 <vPortSetupTimerInterrupt+0x34>)
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008926:	4b0b      	ldr	r3, [pc, #44]	; (8008954 <vPortSetupTimerInterrupt+0x38>)
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800892c:	4b0a      	ldr	r3, [pc, #40]	; (8008958 <vPortSetupTimerInterrupt+0x3c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a0a      	ldr	r2, [pc, #40]	; (800895c <vPortSetupTimerInterrupt+0x40>)
 8008932:	fba2 2303 	umull	r2, r3, r2, r3
 8008936:	099b      	lsrs	r3, r3, #6
 8008938:	4a09      	ldr	r2, [pc, #36]	; (8008960 <vPortSetupTimerInterrupt+0x44>)
 800893a:	3b01      	subs	r3, #1
 800893c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800893e:	4b04      	ldr	r3, [pc, #16]	; (8008950 <vPortSetupTimerInterrupt+0x34>)
 8008940:	2207      	movs	r2, #7
 8008942:	601a      	str	r2, [r3, #0]
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	e000e010 	.word	0xe000e010
 8008954:	e000e018 	.word	0xe000e018
 8008958:	20000000 	.word	0x20000000
 800895c:	10624dd3 	.word	0x10624dd3
 8008960:	e000e014 	.word	0xe000e014

08008964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008974 <vPortEnableVFP+0x10>
 8008968:	6801      	ldr	r1, [r0, #0]
 800896a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800896e:	6001      	str	r1, [r0, #0]
 8008970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008972:	bf00      	nop
 8008974:	e000ed88 	.word	0xe000ed88

08008978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800897e:	f3ef 8305 	mrs	r3, IPSR
 8008982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b0f      	cmp	r3, #15
 8008988:	d914      	bls.n	80089b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800898a:	4a17      	ldr	r2, [pc, #92]	; (80089e8 <vPortValidateInterruptPriority+0x70>)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	4413      	add	r3, r2
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008994:	4b15      	ldr	r3, [pc, #84]	; (80089ec <vPortValidateInterruptPriority+0x74>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	7afa      	ldrb	r2, [r7, #11]
 800899a:	429a      	cmp	r2, r3
 800899c:	d20a      	bcs.n	80089b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	607b      	str	r3, [r7, #4]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089b4:	4b0e      	ldr	r3, [pc, #56]	; (80089f0 <vPortValidateInterruptPriority+0x78>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089bc:	4b0d      	ldr	r3, [pc, #52]	; (80089f4 <vPortValidateInterruptPriority+0x7c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d90a      	bls.n	80089da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	603b      	str	r3, [r7, #0]
}
 80089d6:	bf00      	nop
 80089d8:	e7fe      	b.n	80089d8 <vPortValidateInterruptPriority+0x60>
	}
 80089da:	bf00      	nop
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	e000e3f0 	.word	0xe000e3f0
 80089ec:	200004b8 	.word	0x200004b8
 80089f0:	e000ed0c 	.word	0xe000ed0c
 80089f4:	200004bc 	.word	0x200004bc

080089f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08a      	sub	sp, #40	; 0x28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a00:	2300      	movs	r3, #0
 8008a02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a04:	f7fe ffbc 	bl	8007980 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a08:	4b5b      	ldr	r3, [pc, #364]	; (8008b78 <pvPortMalloc+0x180>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a10:	f000 f920 	bl	8008c54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a14:	4b59      	ldr	r3, [pc, #356]	; (8008b7c <pvPortMalloc+0x184>)
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f040 8093 	bne.w	8008b48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d01d      	beq.n	8008a64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a28:	2208      	movs	r2, #8
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d014      	beq.n	8008a64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f023 0307 	bic.w	r3, r3, #7
 8008a40:	3308      	adds	r3, #8
 8008a42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00a      	beq.n	8008a64 <pvPortMalloc+0x6c>
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	617b      	str	r3, [r7, #20]
}
 8008a60:	bf00      	nop
 8008a62:	e7fe      	b.n	8008a62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d06e      	beq.n	8008b48 <pvPortMalloc+0x150>
 8008a6a:	4b45      	ldr	r3, [pc, #276]	; (8008b80 <pvPortMalloc+0x188>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d869      	bhi.n	8008b48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a74:	4b43      	ldr	r3, [pc, #268]	; (8008b84 <pvPortMalloc+0x18c>)
 8008a76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a78:	4b42      	ldr	r3, [pc, #264]	; (8008b84 <pvPortMalloc+0x18c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a7e:	e004      	b.n	8008a8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d903      	bls.n	8008a9c <pvPortMalloc+0xa4>
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1f1      	bne.n	8008a80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a9c:	4b36      	ldr	r3, [pc, #216]	; (8008b78 <pvPortMalloc+0x180>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d050      	beq.n	8008b48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2208      	movs	r2, #8
 8008aac:	4413      	add	r3, r2
 8008aae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	1ad2      	subs	r2, r2, r3
 8008ac0:	2308      	movs	r3, #8
 8008ac2:	005b      	lsls	r3, r3, #1
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d91f      	bls.n	8008b08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4413      	add	r3, r2
 8008ace:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	f003 0307 	and.w	r3, r3, #7
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00a      	beq.n	8008af0 <pvPortMalloc+0xf8>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	613b      	str	r3, [r7, #16]
}
 8008aec:	bf00      	nop
 8008aee:	e7fe      	b.n	8008aee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	1ad2      	subs	r2, r2, r3
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b02:	69b8      	ldr	r0, [r7, #24]
 8008b04:	f000 f908 	bl	8008d18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b08:	4b1d      	ldr	r3, [pc, #116]	; (8008b80 <pvPortMalloc+0x188>)
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	4a1b      	ldr	r2, [pc, #108]	; (8008b80 <pvPortMalloc+0x188>)
 8008b14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b16:	4b1a      	ldr	r3, [pc, #104]	; (8008b80 <pvPortMalloc+0x188>)
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	4b1b      	ldr	r3, [pc, #108]	; (8008b88 <pvPortMalloc+0x190>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d203      	bcs.n	8008b2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b22:	4b17      	ldr	r3, [pc, #92]	; (8008b80 <pvPortMalloc+0x188>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a18      	ldr	r2, [pc, #96]	; (8008b88 <pvPortMalloc+0x190>)
 8008b28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	4b13      	ldr	r3, [pc, #76]	; (8008b7c <pvPortMalloc+0x184>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	431a      	orrs	r2, r3
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b3e:	4b13      	ldr	r3, [pc, #76]	; (8008b8c <pvPortMalloc+0x194>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3301      	adds	r3, #1
 8008b44:	4a11      	ldr	r2, [pc, #68]	; (8008b8c <pvPortMalloc+0x194>)
 8008b46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b48:	f7fe ff28 	bl	800799c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00a      	beq.n	8008b6c <pvPortMalloc+0x174>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	60fb      	str	r3, [r7, #12]
}
 8008b68:	bf00      	nop
 8008b6a:	e7fe      	b.n	8008b6a <pvPortMalloc+0x172>
	return pvReturn;
 8008b6c:	69fb      	ldr	r3, [r7, #28]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3728      	adds	r7, #40	; 0x28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	200067d8 	.word	0x200067d8
 8008b7c:	200067ec 	.word	0x200067ec
 8008b80:	200067dc 	.word	0x200067dc
 8008b84:	200067d0 	.word	0x200067d0
 8008b88:	200067e0 	.word	0x200067e0
 8008b8c:	200067e4 	.word	0x200067e4

08008b90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d04d      	beq.n	8008c3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ba2:	2308      	movs	r3, #8
 8008ba4:	425b      	negs	r3, r3
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	4413      	add	r3, r2
 8008baa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	4b24      	ldr	r3, [pc, #144]	; (8008c48 <vPortFree+0xb8>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10a      	bne.n	8008bd4 <vPortFree+0x44>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	60fb      	str	r3, [r7, #12]
}
 8008bd0:	bf00      	nop
 8008bd2:	e7fe      	b.n	8008bd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <vPortFree+0x62>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	60bb      	str	r3, [r7, #8]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <vPortFree+0xb8>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d01e      	beq.n	8008c3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d11a      	bne.n	8008c3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	4b0e      	ldr	r3, [pc, #56]	; (8008c48 <vPortFree+0xb8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	43db      	mvns	r3, r3
 8008c12:	401a      	ands	r2, r3
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c18:	f7fe feb2 	bl	8007980 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	4b0a      	ldr	r3, [pc, #40]	; (8008c4c <vPortFree+0xbc>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4413      	add	r3, r2
 8008c26:	4a09      	ldr	r2, [pc, #36]	; (8008c4c <vPortFree+0xbc>)
 8008c28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c2a:	6938      	ldr	r0, [r7, #16]
 8008c2c:	f000 f874 	bl	8008d18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c30:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <vPortFree+0xc0>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3301      	adds	r3, #1
 8008c36:	4a06      	ldr	r2, [pc, #24]	; (8008c50 <vPortFree+0xc0>)
 8008c38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c3a:	f7fe feaf 	bl	800799c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c3e:	bf00      	nop
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	200067ec 	.word	0x200067ec
 8008c4c:	200067dc 	.word	0x200067dc
 8008c50:	200067e8 	.word	0x200067e8

08008c54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c5a:	f246 3310 	movw	r3, #25360	; 0x6310
 8008c5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c60:	4b27      	ldr	r3, [pc, #156]	; (8008d00 <prvHeapInit+0xac>)
 8008c62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00c      	beq.n	8008c88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3307      	adds	r3, #7
 8008c72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 0307 	bic.w	r3, r3, #7
 8008c7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	4a1f      	ldr	r2, [pc, #124]	; (8008d00 <prvHeapInit+0xac>)
 8008c84:	4413      	add	r3, r2
 8008c86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c8c:	4a1d      	ldr	r2, [pc, #116]	; (8008d04 <prvHeapInit+0xb0>)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c92:	4b1c      	ldr	r3, [pc, #112]	; (8008d04 <prvHeapInit+0xb0>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ca0:	2208      	movs	r2, #8
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0307 	bic.w	r3, r3, #7
 8008cae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a15      	ldr	r2, [pc, #84]	; (8008d08 <prvHeapInit+0xb4>)
 8008cb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cb6:	4b14      	ldr	r3, [pc, #80]	; (8008d08 <prvHeapInit+0xb4>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cbe:	4b12      	ldr	r3, [pc, #72]	; (8008d08 <prvHeapInit+0xb4>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	1ad2      	subs	r2, r2, r3
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cd4:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <prvHeapInit+0xb4>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <prvHeapInit+0xb8>)
 8008ce2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	4a09      	ldr	r2, [pc, #36]	; (8008d10 <prvHeapInit+0xbc>)
 8008cea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cec:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <prvHeapInit+0xc0>)
 8008cee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008cf2:	601a      	str	r2, [r3, #0]
}
 8008cf4:	bf00      	nop
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	200004c0 	.word	0x200004c0
 8008d04:	200067d0 	.word	0x200067d0
 8008d08:	200067d8 	.word	0x200067d8
 8008d0c:	200067e0 	.word	0x200067e0
 8008d10:	200067dc 	.word	0x200067dc
 8008d14:	200067ec 	.word	0x200067ec

08008d18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d20:	4b28      	ldr	r3, [pc, #160]	; (8008dc4 <prvInsertBlockIntoFreeList+0xac>)
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	e002      	b.n	8008d2c <prvInsertBlockIntoFreeList+0x14>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d8f7      	bhi.n	8008d26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	4413      	add	r3, r2
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d108      	bne.n	8008d5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	441a      	add	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	441a      	add	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d118      	bne.n	8008da0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	4b15      	ldr	r3, [pc, #84]	; (8008dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d00d      	beq.n	8008d96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	441a      	add	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	e008      	b.n	8008da8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d96:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	e003      	b.n	8008da8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d002      	beq.n	8008db6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008db6:	bf00      	nop
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	200067d0 	.word	0x200067d0
 8008dc8:	200067d8 	.word	0x200067d8

08008dcc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008dd6:	f007 fa17 	bl	8010208 <sys_timeouts_sleeptime>
 8008dda:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de2:	d10b      	bne.n	8008dfc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008de4:	4813      	ldr	r0, [pc, #76]	; (8008e34 <tcpip_timeouts_mbox_fetch+0x68>)
 8008de6:	f009 ff86 	bl	8012cf6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8008dea:	2200      	movs	r2, #0
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f009 fef8 	bl	8012be4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008df4:	480f      	ldr	r0, [pc, #60]	; (8008e34 <tcpip_timeouts_mbox_fetch+0x68>)
 8008df6:	f009 ff6f 	bl	8012cd8 <sys_mutex_lock>
    return;
 8008dfa:	e018      	b.n	8008e2e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d102      	bne.n	8008e08 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8008e02:	f007 f9c7 	bl	8010194 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008e06:	e7e6      	b.n	8008dd6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008e08:	480a      	ldr	r0, [pc, #40]	; (8008e34 <tcpip_timeouts_mbox_fetch+0x68>)
 8008e0a:	f009 ff74 	bl	8012cf6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f009 fee6 	bl	8012be4 <sys_arch_mbox_fetch>
 8008e18:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8008e1a:	4806      	ldr	r0, [pc, #24]	; (8008e34 <tcpip_timeouts_mbox_fetch+0x68>)
 8008e1c:	f009 ff5c 	bl	8012cd8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e26:	d102      	bne.n	8008e2e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008e28:	f007 f9b4 	bl	8010194 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008e2c:	e7d3      	b.n	8008dd6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	20009cd0 	.word	0x20009cd0

08008e38 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8008e40:	4810      	ldr	r0, [pc, #64]	; (8008e84 <tcpip_thread+0x4c>)
 8008e42:	f009 ff49 	bl	8012cd8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8008e46:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <tcpip_thread+0x50>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d005      	beq.n	8008e5a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8008e4e:	4b0e      	ldr	r3, [pc, #56]	; (8008e88 <tcpip_thread+0x50>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a0e      	ldr	r2, [pc, #56]	; (8008e8c <tcpip_thread+0x54>)
 8008e54:	6812      	ldr	r2, [r2, #0]
 8008e56:	4610      	mov	r0, r2
 8008e58:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008e5a:	f107 030c 	add.w	r3, r7, #12
 8008e5e:	4619      	mov	r1, r3
 8008e60:	480b      	ldr	r0, [pc, #44]	; (8008e90 <tcpip_thread+0x58>)
 8008e62:	f7ff ffb3 	bl	8008dcc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d106      	bne.n	8008e7a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008e6c:	4b09      	ldr	r3, [pc, #36]	; (8008e94 <tcpip_thread+0x5c>)
 8008e6e:	2291      	movs	r2, #145	; 0x91
 8008e70:	4909      	ldr	r1, [pc, #36]	; (8008e98 <tcpip_thread+0x60>)
 8008e72:	480a      	ldr	r0, [pc, #40]	; (8008e9c <tcpip_thread+0x64>)
 8008e74:	f00a f980 	bl	8013178 <iprintf>
      continue;
 8008e78:	e003      	b.n	8008e82 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 f80f 	bl	8008ea0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008e82:	e7ea      	b.n	8008e5a <tcpip_thread+0x22>
 8008e84:	20009cd0 	.word	0x20009cd0
 8008e88:	200067f0 	.word	0x200067f0
 8008e8c:	200067f4 	.word	0x200067f4
 8008e90:	200067f8 	.word	0x200067f8
 8008e94:	08013ff4 	.word	0x08013ff4
 8008e98:	08014024 	.word	0x08014024
 8008e9c:	08014044 	.word	0x08014044

08008ea0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d026      	beq.n	8008efe <tcpip_thread_handle_msg+0x5e>
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	dc2b      	bgt.n	8008f0c <tcpip_thread_handle_msg+0x6c>
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <tcpip_thread_handle_msg+0x1e>
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d015      	beq.n	8008ee8 <tcpip_thread_handle_msg+0x48>
 8008ebc:	e026      	b.n	8008f0c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	6850      	ldr	r0, [r2, #4]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	6892      	ldr	r2, [r2, #8]
 8008eca:	4611      	mov	r1, r2
 8008ecc:	4798      	blx	r3
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d004      	beq.n	8008ede <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f001 fc61 	bl	800a7a0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008ede:	6879      	ldr	r1, [r7, #4]
 8008ee0:	2009      	movs	r0, #9
 8008ee2:	f000 fe1d 	bl	8009b20 <memp_free>
      break;
 8008ee6:	e018      	b.n	8008f1a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	6892      	ldr	r2, [r2, #8]
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	2008      	movs	r0, #8
 8008ef8:	f000 fe12 	bl	8009b20 <memp_free>
      break;
 8008efc:	e00d      	b.n	8008f1a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	6892      	ldr	r2, [r2, #8]
 8008f06:	4610      	mov	r0, r2
 8008f08:	4798      	blx	r3
      break;
 8008f0a:	e006      	b.n	8008f1a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008f0c:	4b05      	ldr	r3, [pc, #20]	; (8008f24 <tcpip_thread_handle_msg+0x84>)
 8008f0e:	22cf      	movs	r2, #207	; 0xcf
 8008f10:	4905      	ldr	r1, [pc, #20]	; (8008f28 <tcpip_thread_handle_msg+0x88>)
 8008f12:	4806      	ldr	r0, [pc, #24]	; (8008f2c <tcpip_thread_handle_msg+0x8c>)
 8008f14:	f00a f930 	bl	8013178 <iprintf>
      break;
 8008f18:	bf00      	nop
  }
}
 8008f1a:	bf00      	nop
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	08013ff4 	.word	0x08013ff4
 8008f28:	08014024 	.word	0x08014024
 8008f2c:	08014044 	.word	0x08014044

08008f30 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008f3c:	481a      	ldr	r0, [pc, #104]	; (8008fa8 <tcpip_inpkt+0x78>)
 8008f3e:	f009 fe90 	bl	8012c62 <sys_mbox_valid>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d105      	bne.n	8008f54 <tcpip_inpkt+0x24>
 8008f48:	4b18      	ldr	r3, [pc, #96]	; (8008fac <tcpip_inpkt+0x7c>)
 8008f4a:	22fc      	movs	r2, #252	; 0xfc
 8008f4c:	4918      	ldr	r1, [pc, #96]	; (8008fb0 <tcpip_inpkt+0x80>)
 8008f4e:	4819      	ldr	r0, [pc, #100]	; (8008fb4 <tcpip_inpkt+0x84>)
 8008f50:	f00a f912 	bl	8013178 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008f54:	2009      	movs	r0, #9
 8008f56:	f000 fd91 	bl	8009a7c <memp_malloc>
 8008f5a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d102      	bne.n	8008f68 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295
 8008f66:	e01a      	b.n	8008f9e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008f80:	6979      	ldr	r1, [r7, #20]
 8008f82:	4809      	ldr	r0, [pc, #36]	; (8008fa8 <tcpip_inpkt+0x78>)
 8008f84:	f009 fe14 	bl	8012bb0 <sys_mbox_trypost>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d006      	beq.n	8008f9c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008f8e:	6979      	ldr	r1, [r7, #20]
 8008f90:	2009      	movs	r0, #9
 8008f92:	f000 fdc5 	bl	8009b20 <memp_free>
    return ERR_MEM;
 8008f96:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9a:	e000      	b.n	8008f9e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008f9c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	200067f8 	.word	0x200067f8
 8008fac:	08013ff4 	.word	0x08013ff4
 8008fb0:	0801406c 	.word	0x0801406c
 8008fb4:	08014044 	.word	0x08014044

08008fb8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008fc8:	f003 0318 	and.w	r3, r3, #24
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d006      	beq.n	8008fde <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008fd0:	4a08      	ldr	r2, [pc, #32]	; (8008ff4 <tcpip_input+0x3c>)
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff ffab 	bl	8008f30 <tcpip_inpkt>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	e005      	b.n	8008fea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008fde:	4a06      	ldr	r2, [pc, #24]	; (8008ff8 <tcpip_input+0x40>)
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff ffa4 	bl	8008f30 <tcpip_inpkt>
 8008fe8:	4603      	mov	r3, r0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	080129c1 	.word	0x080129c1
 8008ff8:	080118d5 	.word	0x080118d5

08008ffc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009006:	4819      	ldr	r0, [pc, #100]	; (800906c <tcpip_try_callback+0x70>)
 8009008:	f009 fe2b 	bl	8012c62 <sys_mbox_valid>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d106      	bne.n	8009020 <tcpip_try_callback+0x24>
 8009012:	4b17      	ldr	r3, [pc, #92]	; (8009070 <tcpip_try_callback+0x74>)
 8009014:	f240 125d 	movw	r2, #349	; 0x15d
 8009018:	4916      	ldr	r1, [pc, #88]	; (8009074 <tcpip_try_callback+0x78>)
 800901a:	4817      	ldr	r0, [pc, #92]	; (8009078 <tcpip_try_callback+0x7c>)
 800901c:	f00a f8ac 	bl	8013178 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009020:	2008      	movs	r0, #8
 8009022:	f000 fd2b 	bl	8009a7c <memp_malloc>
 8009026:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d102      	bne.n	8009034 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800902e:	f04f 33ff 	mov.w	r3, #4294967295
 8009032:	e017      	b.n	8009064 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2201      	movs	r2, #1
 8009038:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009046:	68f9      	ldr	r1, [r7, #12]
 8009048:	4808      	ldr	r0, [pc, #32]	; (800906c <tcpip_try_callback+0x70>)
 800904a:	f009 fdb1 	bl	8012bb0 <sys_mbox_trypost>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d006      	beq.n	8009062 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009054:	68f9      	ldr	r1, [r7, #12]
 8009056:	2008      	movs	r0, #8
 8009058:	f000 fd62 	bl	8009b20 <memp_free>
    return ERR_MEM;
 800905c:	f04f 33ff 	mov.w	r3, #4294967295
 8009060:	e000      	b.n	8009064 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	200067f8 	.word	0x200067f8
 8009070:	08013ff4 	.word	0x08013ff4
 8009074:	0801406c 	.word	0x0801406c
 8009078:	08014044 	.word	0x08014044

0800907c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af02      	add	r7, sp, #8
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009086:	f000 f871 	bl	800916c <lwip_init>

  tcpip_init_done = initfunc;
 800908a:	4a17      	ldr	r2, [pc, #92]	; (80090e8 <tcpip_init+0x6c>)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009090:	4a16      	ldr	r2, [pc, #88]	; (80090ec <tcpip_init+0x70>)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009096:	2106      	movs	r1, #6
 8009098:	4815      	ldr	r0, [pc, #84]	; (80090f0 <tcpip_init+0x74>)
 800909a:	f009 fd67 	bl	8012b6c <sys_mbox_new>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d006      	beq.n	80090b2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80090a4:	4b13      	ldr	r3, [pc, #76]	; (80090f4 <tcpip_init+0x78>)
 80090a6:	f240 2261 	movw	r2, #609	; 0x261
 80090aa:	4913      	ldr	r1, [pc, #76]	; (80090f8 <tcpip_init+0x7c>)
 80090ac:	4813      	ldr	r0, [pc, #76]	; (80090fc <tcpip_init+0x80>)
 80090ae:	f00a f863 	bl	8013178 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80090b2:	4813      	ldr	r0, [pc, #76]	; (8009100 <tcpip_init+0x84>)
 80090b4:	f009 fdf4 	bl	8012ca0 <sys_mutex_new>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d006      	beq.n	80090cc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80090be:	4b0d      	ldr	r3, [pc, #52]	; (80090f4 <tcpip_init+0x78>)
 80090c0:	f240 2265 	movw	r2, #613	; 0x265
 80090c4:	490f      	ldr	r1, [pc, #60]	; (8009104 <tcpip_init+0x88>)
 80090c6:	480d      	ldr	r0, [pc, #52]	; (80090fc <tcpip_init+0x80>)
 80090c8:	f00a f856 	bl	8013178 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80090cc:	2300      	movs	r3, #0
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090d4:	2200      	movs	r2, #0
 80090d6:	490c      	ldr	r1, [pc, #48]	; (8009108 <tcpip_init+0x8c>)
 80090d8:	480c      	ldr	r0, [pc, #48]	; (800910c <tcpip_init+0x90>)
 80090da:	f009 fe19 	bl	8012d10 <sys_thread_new>
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	200067f0 	.word	0x200067f0
 80090ec:	200067f4 	.word	0x200067f4
 80090f0:	200067f8 	.word	0x200067f8
 80090f4:	08013ff4 	.word	0x08013ff4
 80090f8:	0801407c 	.word	0x0801407c
 80090fc:	08014044 	.word	0x08014044
 8009100:	20009cd0 	.word	0x20009cd0
 8009104:	080140a0 	.word	0x080140a0
 8009108:	08008e39 	.word	0x08008e39
 800910c:	080140c4 	.word	0x080140c4

08009110 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800911a:	88fb      	ldrh	r3, [r7, #6]
 800911c:	021b      	lsls	r3, r3, #8
 800911e:	b21a      	sxth	r2, r3
 8009120:	88fb      	ldrh	r3, [r7, #6]
 8009122:	0a1b      	lsrs	r3, r3, #8
 8009124:	b29b      	uxth	r3, r3
 8009126:	b21b      	sxth	r3, r3
 8009128:	4313      	orrs	r3, r2
 800912a:	b21b      	sxth	r3, r3
 800912c:	b29b      	uxth	r3, r3
}
 800912e:	4618      	mov	r0, r3
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	061a      	lsls	r2, r3, #24
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	021b      	lsls	r3, r3, #8
 800914a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800914e:	431a      	orrs	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	0a1b      	lsrs	r3, r3, #8
 8009154:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009158:	431a      	orrs	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	0e1b      	lsrs	r3, r3, #24
 800915e:	4313      	orrs	r3, r2
}
 8009160:	4618      	mov	r0, r3
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009176:	f009 fd85 	bl	8012c84 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800917a:	f000 f8d5 	bl	8009328 <mem_init>
  memp_init();
 800917e:	f000 fc31 	bl	80099e4 <memp_init>
  pbuf_init();
  netif_init();
 8009182:	f000 fcf7 	bl	8009b74 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009186:	f007 f877 	bl	8010278 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800918a:	f001 fda3 	bl	800acd4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800918e:	f006 ffb9 	bl	8010104 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	4603      	mov	r3, r0
 80091a4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80091a6:	4b05      	ldr	r3, [pc, #20]	; (80091bc <ptr_to_mem+0x20>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	88fb      	ldrh	r3, [r7, #6]
 80091ac:	4413      	add	r3, r2
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	200067fc 	.word	0x200067fc

080091c0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80091c8:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <mem_to_ptr+0x20>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	b29b      	uxth	r3, r3
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	200067fc 	.word	0x200067fc

080091e4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80091e4:	b590      	push	{r4, r7, lr}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80091ec:	4b45      	ldr	r3, [pc, #276]	; (8009304 <plug_holes+0x120>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d206      	bcs.n	8009204 <plug_holes+0x20>
 80091f6:	4b44      	ldr	r3, [pc, #272]	; (8009308 <plug_holes+0x124>)
 80091f8:	f240 12df 	movw	r2, #479	; 0x1df
 80091fc:	4943      	ldr	r1, [pc, #268]	; (800930c <plug_holes+0x128>)
 80091fe:	4844      	ldr	r0, [pc, #272]	; (8009310 <plug_holes+0x12c>)
 8009200:	f009 ffba 	bl	8013178 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009204:	4b43      	ldr	r3, [pc, #268]	; (8009314 <plug_holes+0x130>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	429a      	cmp	r2, r3
 800920c:	d306      	bcc.n	800921c <plug_holes+0x38>
 800920e:	4b3e      	ldr	r3, [pc, #248]	; (8009308 <plug_holes+0x124>)
 8009210:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009214:	4940      	ldr	r1, [pc, #256]	; (8009318 <plug_holes+0x134>)
 8009216:	483e      	ldr	r0, [pc, #248]	; (8009310 <plug_holes+0x12c>)
 8009218:	f009 ffae 	bl	8013178 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	791b      	ldrb	r3, [r3, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d006      	beq.n	8009232 <plug_holes+0x4e>
 8009224:	4b38      	ldr	r3, [pc, #224]	; (8009308 <plug_holes+0x124>)
 8009226:	f240 12e1 	movw	r2, #481	; 0x1e1
 800922a:	493c      	ldr	r1, [pc, #240]	; (800931c <plug_holes+0x138>)
 800922c:	4838      	ldr	r0, [pc, #224]	; (8009310 <plug_holes+0x12c>)
 800922e:	f009 ffa3 	bl	8013178 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800923a:	d906      	bls.n	800924a <plug_holes+0x66>
 800923c:	4b32      	ldr	r3, [pc, #200]	; (8009308 <plug_holes+0x124>)
 800923e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009242:	4937      	ldr	r1, [pc, #220]	; (8009320 <plug_holes+0x13c>)
 8009244:	4832      	ldr	r0, [pc, #200]	; (8009310 <plug_holes+0x12c>)
 8009246:	f009 ff97 	bl	8013178 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff ffa4 	bl	800919c <ptr_to_mem>
 8009254:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	429a      	cmp	r2, r3
 800925c:	d024      	beq.n	80092a8 <plug_holes+0xc4>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	791b      	ldrb	r3, [r3, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d120      	bne.n	80092a8 <plug_holes+0xc4>
 8009266:	4b2b      	ldr	r3, [pc, #172]	; (8009314 <plug_holes+0x130>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	429a      	cmp	r2, r3
 800926e:	d01b      	beq.n	80092a8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009270:	4b2c      	ldr	r3, [pc, #176]	; (8009324 <plug_holes+0x140>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	429a      	cmp	r2, r3
 8009278:	d102      	bne.n	8009280 <plug_holes+0x9c>
      lfree = mem;
 800927a:	4a2a      	ldr	r2, [pc, #168]	; (8009324 <plug_holes+0x140>)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	881a      	ldrh	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009290:	d00a      	beq.n	80092a8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff ff80 	bl	800919c <ptr_to_mem>
 800929c:	4604      	mov	r4, r0
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff ff8e 	bl	80091c0 <mem_to_ptr>
 80092a4:	4603      	mov	r3, r0
 80092a6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	885b      	ldrh	r3, [r3, #2]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7ff ff75 	bl	800919c <ptr_to_mem>
 80092b2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d01f      	beq.n	80092fc <plug_holes+0x118>
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	791b      	ldrb	r3, [r3, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d11b      	bne.n	80092fc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80092c4:	4b17      	ldr	r3, [pc, #92]	; (8009324 <plug_holes+0x140>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d102      	bne.n	80092d4 <plug_holes+0xf0>
      lfree = pmem;
 80092ce:	4a15      	ldr	r2, [pc, #84]	; (8009324 <plug_holes+0x140>)
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	881a      	ldrh	r2, [r3, #0]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80092e4:	d00a      	beq.n	80092fc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7ff ff56 	bl	800919c <ptr_to_mem>
 80092f0:	4604      	mov	r4, r0
 80092f2:	68b8      	ldr	r0, [r7, #8]
 80092f4:	f7ff ff64 	bl	80091c0 <mem_to_ptr>
 80092f8:	4603      	mov	r3, r0
 80092fa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80092fc:	bf00      	nop
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	bd90      	pop	{r4, r7, pc}
 8009304:	200067fc 	.word	0x200067fc
 8009308:	080140d4 	.word	0x080140d4
 800930c:	08014104 	.word	0x08014104
 8009310:	0801411c 	.word	0x0801411c
 8009314:	20006800 	.word	0x20006800
 8009318:	08014144 	.word	0x08014144
 800931c:	08014160 	.word	0x08014160
 8009320:	0801417c 	.word	0x0801417c
 8009324:	20006808 	.word	0x20006808

08009328 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800932e:	4b1f      	ldr	r3, [pc, #124]	; (80093ac <mem_init+0x84>)
 8009330:	3303      	adds	r3, #3
 8009332:	f023 0303 	bic.w	r3, r3, #3
 8009336:	461a      	mov	r2, r3
 8009338:	4b1d      	ldr	r3, [pc, #116]	; (80093b0 <mem_init+0x88>)
 800933a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800933c:	4b1c      	ldr	r3, [pc, #112]	; (80093b0 <mem_init+0x88>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009348:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009356:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800935a:	f7ff ff1f 	bl	800919c <ptr_to_mem>
 800935e:	4603      	mov	r3, r0
 8009360:	4a14      	ldr	r2, [pc, #80]	; (80093b4 <mem_init+0x8c>)
 8009362:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009364:	4b13      	ldr	r3, [pc, #76]	; (80093b4 <mem_init+0x8c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2201      	movs	r2, #1
 800936a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800936c:	4b11      	ldr	r3, [pc, #68]	; (80093b4 <mem_init+0x8c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009374:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009376:	4b0f      	ldr	r3, [pc, #60]	; (80093b4 <mem_init+0x8c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800937e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009380:	4b0b      	ldr	r3, [pc, #44]	; (80093b0 <mem_init+0x88>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a0c      	ldr	r2, [pc, #48]	; (80093b8 <mem_init+0x90>)
 8009386:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009388:	480c      	ldr	r0, [pc, #48]	; (80093bc <mem_init+0x94>)
 800938a:	f009 fc89 	bl	8012ca0 <sys_mutex_new>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d006      	beq.n	80093a2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009394:	4b0a      	ldr	r3, [pc, #40]	; (80093c0 <mem_init+0x98>)
 8009396:	f240 221f 	movw	r2, #543	; 0x21f
 800939a:	490a      	ldr	r1, [pc, #40]	; (80093c4 <mem_init+0x9c>)
 800939c:	480a      	ldr	r0, [pc, #40]	; (80093c8 <mem_init+0xa0>)
 800939e:	f009 feeb 	bl	8013178 <iprintf>
  }
}
 80093a2:	bf00      	nop
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20009cec 	.word	0x20009cec
 80093b0:	200067fc 	.word	0x200067fc
 80093b4:	20006800 	.word	0x20006800
 80093b8:	20006808 	.word	0x20006808
 80093bc:	20006804 	.word	0x20006804
 80093c0:	080140d4 	.word	0x080140d4
 80093c4:	080141a8 	.word	0x080141a8
 80093c8:	0801411c 	.word	0x0801411c

080093cc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f7ff fef3 	bl	80091c0 <mem_to_ptr>
 80093da:	4603      	mov	r3, r0
 80093dc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff feda 	bl	800919c <ptr_to_mem>
 80093e8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	885b      	ldrh	r3, [r3, #2]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff fed4 	bl	800919c <ptr_to_mem>
 80093f4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80093fe:	d818      	bhi.n	8009432 <mem_link_valid+0x66>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	885b      	ldrh	r3, [r3, #2]
 8009404:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009408:	d813      	bhi.n	8009432 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800940e:	8afa      	ldrh	r2, [r7, #22]
 8009410:	429a      	cmp	r2, r3
 8009412:	d004      	beq.n	800941e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	881b      	ldrh	r3, [r3, #0]
 8009418:	8afa      	ldrh	r2, [r7, #22]
 800941a:	429a      	cmp	r2, r3
 800941c:	d109      	bne.n	8009432 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800941e:	4b08      	ldr	r3, [pc, #32]	; (8009440 <mem_link_valid+0x74>)
 8009420:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	429a      	cmp	r2, r3
 8009426:	d006      	beq.n	8009436 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	885b      	ldrh	r3, [r3, #2]
 800942c:	8afa      	ldrh	r2, [r7, #22]
 800942e:	429a      	cmp	r2, r3
 8009430:	d001      	beq.n	8009436 <mem_link_valid+0x6a>
    return 0;
 8009432:	2300      	movs	r3, #0
 8009434:	e000      	b.n	8009438 <mem_link_valid+0x6c>
  }
  return 1;
 8009436:	2301      	movs	r3, #1
}
 8009438:	4618      	mov	r0, r3
 800943a:	3718      	adds	r7, #24
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	20006800 	.word	0x20006800

08009444 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d070      	beq.n	8009534 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f003 0303 	and.w	r3, r3, #3
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00d      	beq.n	8009478 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800945c:	4b37      	ldr	r3, [pc, #220]	; (800953c <mem_free+0xf8>)
 800945e:	f240 2273 	movw	r2, #627	; 0x273
 8009462:	4937      	ldr	r1, [pc, #220]	; (8009540 <mem_free+0xfc>)
 8009464:	4837      	ldr	r0, [pc, #220]	; (8009544 <mem_free+0x100>)
 8009466:	f009 fe87 	bl	8013178 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800946a:	f009 fc77 	bl	8012d5c <sys_arch_protect>
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f009 fc81 	bl	8012d78 <sys_arch_unprotect>
    return;
 8009476:	e05e      	b.n	8009536 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3b08      	subs	r3, #8
 800947c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800947e:	4b32      	ldr	r3, [pc, #200]	; (8009548 <mem_free+0x104>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	69fa      	ldr	r2, [r7, #28]
 8009484:	429a      	cmp	r2, r3
 8009486:	d306      	bcc.n	8009496 <mem_free+0x52>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f103 020c 	add.w	r2, r3, #12
 800948e:	4b2f      	ldr	r3, [pc, #188]	; (800954c <mem_free+0x108>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	429a      	cmp	r2, r3
 8009494:	d90d      	bls.n	80094b2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009496:	4b29      	ldr	r3, [pc, #164]	; (800953c <mem_free+0xf8>)
 8009498:	f240 227f 	movw	r2, #639	; 0x27f
 800949c:	492c      	ldr	r1, [pc, #176]	; (8009550 <mem_free+0x10c>)
 800949e:	4829      	ldr	r0, [pc, #164]	; (8009544 <mem_free+0x100>)
 80094a0:	f009 fe6a 	bl	8013178 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80094a4:	f009 fc5a 	bl	8012d5c <sys_arch_protect>
 80094a8:	6138      	str	r0, [r7, #16]
 80094aa:	6938      	ldr	r0, [r7, #16]
 80094ac:	f009 fc64 	bl	8012d78 <sys_arch_unprotect>
    return;
 80094b0:	e041      	b.n	8009536 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80094b2:	4828      	ldr	r0, [pc, #160]	; (8009554 <mem_free+0x110>)
 80094b4:	f009 fc10 	bl	8012cd8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	791b      	ldrb	r3, [r3, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d110      	bne.n	80094e2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80094c0:	4b1e      	ldr	r3, [pc, #120]	; (800953c <mem_free+0xf8>)
 80094c2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80094c6:	4924      	ldr	r1, [pc, #144]	; (8009558 <mem_free+0x114>)
 80094c8:	481e      	ldr	r0, [pc, #120]	; (8009544 <mem_free+0x100>)
 80094ca:	f009 fe55 	bl	8013178 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80094ce:	4821      	ldr	r0, [pc, #132]	; (8009554 <mem_free+0x110>)
 80094d0:	f009 fc11 	bl	8012cf6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80094d4:	f009 fc42 	bl	8012d5c <sys_arch_protect>
 80094d8:	6178      	str	r0, [r7, #20]
 80094da:	6978      	ldr	r0, [r7, #20]
 80094dc:	f009 fc4c 	bl	8012d78 <sys_arch_unprotect>
    return;
 80094e0:	e029      	b.n	8009536 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80094e2:	69f8      	ldr	r0, [r7, #28]
 80094e4:	f7ff ff72 	bl	80093cc <mem_link_valid>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d110      	bne.n	8009510 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80094ee:	4b13      	ldr	r3, [pc, #76]	; (800953c <mem_free+0xf8>)
 80094f0:	f240 2295 	movw	r2, #661	; 0x295
 80094f4:	4919      	ldr	r1, [pc, #100]	; (800955c <mem_free+0x118>)
 80094f6:	4813      	ldr	r0, [pc, #76]	; (8009544 <mem_free+0x100>)
 80094f8:	f009 fe3e 	bl	8013178 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80094fc:	4815      	ldr	r0, [pc, #84]	; (8009554 <mem_free+0x110>)
 80094fe:	f009 fbfa 	bl	8012cf6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009502:	f009 fc2b 	bl	8012d5c <sys_arch_protect>
 8009506:	61b8      	str	r0, [r7, #24]
 8009508:	69b8      	ldr	r0, [r7, #24]
 800950a:	f009 fc35 	bl	8012d78 <sys_arch_unprotect>
    return;
 800950e:	e012      	b.n	8009536 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	2200      	movs	r2, #0
 8009514:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009516:	4b12      	ldr	r3, [pc, #72]	; (8009560 <mem_free+0x11c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	69fa      	ldr	r2, [r7, #28]
 800951c:	429a      	cmp	r2, r3
 800951e:	d202      	bcs.n	8009526 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009520:	4a0f      	ldr	r2, [pc, #60]	; (8009560 <mem_free+0x11c>)
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009526:	69f8      	ldr	r0, [r7, #28]
 8009528:	f7ff fe5c 	bl	80091e4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800952c:	4809      	ldr	r0, [pc, #36]	; (8009554 <mem_free+0x110>)
 800952e:	f009 fbe2 	bl	8012cf6 <sys_mutex_unlock>
 8009532:	e000      	b.n	8009536 <mem_free+0xf2>
    return;
 8009534:	bf00      	nop
}
 8009536:	3720      	adds	r7, #32
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	080140d4 	.word	0x080140d4
 8009540:	080141c4 	.word	0x080141c4
 8009544:	0801411c 	.word	0x0801411c
 8009548:	200067fc 	.word	0x200067fc
 800954c:	20006800 	.word	0x20006800
 8009550:	080141e8 	.word	0x080141e8
 8009554:	20006804 	.word	0x20006804
 8009558:	08014204 	.word	0x08014204
 800955c:	0801422c 	.word	0x0801422c
 8009560:	20006808 	.word	0x20006808

08009564 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009570:	887b      	ldrh	r3, [r7, #2]
 8009572:	3303      	adds	r3, #3
 8009574:	b29b      	uxth	r3, r3
 8009576:	f023 0303 	bic.w	r3, r3, #3
 800957a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800957c:	8bfb      	ldrh	r3, [r7, #30]
 800957e:	2b0b      	cmp	r3, #11
 8009580:	d801      	bhi.n	8009586 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009582:	230c      	movs	r3, #12
 8009584:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009586:	8bfb      	ldrh	r3, [r7, #30]
 8009588:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800958c:	d803      	bhi.n	8009596 <mem_trim+0x32>
 800958e:	8bfa      	ldrh	r2, [r7, #30]
 8009590:	887b      	ldrh	r3, [r7, #2]
 8009592:	429a      	cmp	r2, r3
 8009594:	d201      	bcs.n	800959a <mem_trim+0x36>
    return NULL;
 8009596:	2300      	movs	r3, #0
 8009598:	e0d8      	b.n	800974c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800959a:	4b6e      	ldr	r3, [pc, #440]	; (8009754 <mem_trim+0x1f0>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d304      	bcc.n	80095ae <mem_trim+0x4a>
 80095a4:	4b6c      	ldr	r3, [pc, #432]	; (8009758 <mem_trim+0x1f4>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d306      	bcc.n	80095bc <mem_trim+0x58>
 80095ae:	4b6b      	ldr	r3, [pc, #428]	; (800975c <mem_trim+0x1f8>)
 80095b0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80095b4:	496a      	ldr	r1, [pc, #424]	; (8009760 <mem_trim+0x1fc>)
 80095b6:	486b      	ldr	r0, [pc, #428]	; (8009764 <mem_trim+0x200>)
 80095b8:	f009 fdde 	bl	8013178 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80095bc:	4b65      	ldr	r3, [pc, #404]	; (8009754 <mem_trim+0x1f0>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d304      	bcc.n	80095d0 <mem_trim+0x6c>
 80095c6:	4b64      	ldr	r3, [pc, #400]	; (8009758 <mem_trim+0x1f4>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d307      	bcc.n	80095e0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80095d0:	f009 fbc4 	bl	8012d5c <sys_arch_protect>
 80095d4:	60b8      	str	r0, [r7, #8]
 80095d6:	68b8      	ldr	r0, [r7, #8]
 80095d8:	f009 fbce 	bl	8012d78 <sys_arch_unprotect>
    return rmem;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	e0b5      	b.n	800974c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3b08      	subs	r3, #8
 80095e4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80095e6:	69b8      	ldr	r0, [r7, #24]
 80095e8:	f7ff fdea 	bl	80091c0 <mem_to_ptr>
 80095ec:	4603      	mov	r3, r0
 80095ee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	881a      	ldrh	r2, [r3, #0]
 80095f4:	8afb      	ldrh	r3, [r7, #22]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3b08      	subs	r3, #8
 80095fc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80095fe:	8bfa      	ldrh	r2, [r7, #30]
 8009600:	8abb      	ldrh	r3, [r7, #20]
 8009602:	429a      	cmp	r2, r3
 8009604:	d906      	bls.n	8009614 <mem_trim+0xb0>
 8009606:	4b55      	ldr	r3, [pc, #340]	; (800975c <mem_trim+0x1f8>)
 8009608:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800960c:	4956      	ldr	r1, [pc, #344]	; (8009768 <mem_trim+0x204>)
 800960e:	4855      	ldr	r0, [pc, #340]	; (8009764 <mem_trim+0x200>)
 8009610:	f009 fdb2 	bl	8013178 <iprintf>
  if (newsize > size) {
 8009614:	8bfa      	ldrh	r2, [r7, #30]
 8009616:	8abb      	ldrh	r3, [r7, #20]
 8009618:	429a      	cmp	r2, r3
 800961a:	d901      	bls.n	8009620 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800961c:	2300      	movs	r3, #0
 800961e:	e095      	b.n	800974c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009620:	8bfa      	ldrh	r2, [r7, #30]
 8009622:	8abb      	ldrh	r3, [r7, #20]
 8009624:	429a      	cmp	r2, r3
 8009626:	d101      	bne.n	800962c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	e08f      	b.n	800974c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800962c:	484f      	ldr	r0, [pc, #316]	; (800976c <mem_trim+0x208>)
 800962e:	f009 fb53 	bl	8012cd8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff fdb0 	bl	800919c <ptr_to_mem>
 800963c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	791b      	ldrb	r3, [r3, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d13f      	bne.n	80096c6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	881b      	ldrh	r3, [r3, #0]
 800964a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800964e:	d106      	bne.n	800965e <mem_trim+0xfa>
 8009650:	4b42      	ldr	r3, [pc, #264]	; (800975c <mem_trim+0x1f8>)
 8009652:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009656:	4946      	ldr	r1, [pc, #280]	; (8009770 <mem_trim+0x20c>)
 8009658:	4842      	ldr	r0, [pc, #264]	; (8009764 <mem_trim+0x200>)
 800965a:	f009 fd8d 	bl	8013178 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009664:	8afa      	ldrh	r2, [r7, #22]
 8009666:	8bfb      	ldrh	r3, [r7, #30]
 8009668:	4413      	add	r3, r2
 800966a:	b29b      	uxth	r3, r3
 800966c:	3308      	adds	r3, #8
 800966e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009670:	4b40      	ldr	r3, [pc, #256]	; (8009774 <mem_trim+0x210>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	429a      	cmp	r2, r3
 8009678:	d106      	bne.n	8009688 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800967a:	89fb      	ldrh	r3, [r7, #14]
 800967c:	4618      	mov	r0, r3
 800967e:	f7ff fd8d 	bl	800919c <ptr_to_mem>
 8009682:	4603      	mov	r3, r0
 8009684:	4a3b      	ldr	r2, [pc, #236]	; (8009774 <mem_trim+0x210>)
 8009686:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009688:	89fb      	ldrh	r3, [r7, #14]
 800968a:	4618      	mov	r0, r3
 800968c:	f7ff fd86 	bl	800919c <ptr_to_mem>
 8009690:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2200      	movs	r2, #0
 8009696:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	89ba      	ldrh	r2, [r7, #12]
 800969c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	8afa      	ldrh	r2, [r7, #22]
 80096a2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	89fa      	ldrh	r2, [r7, #14]
 80096a8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80096b2:	d047      	beq.n	8009744 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7ff fd6f 	bl	800919c <ptr_to_mem>
 80096be:	4602      	mov	r2, r0
 80096c0:	89fb      	ldrh	r3, [r7, #14]
 80096c2:	8053      	strh	r3, [r2, #2]
 80096c4:	e03e      	b.n	8009744 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80096c6:	8bfb      	ldrh	r3, [r7, #30]
 80096c8:	f103 0214 	add.w	r2, r3, #20
 80096cc:	8abb      	ldrh	r3, [r7, #20]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d838      	bhi.n	8009744 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80096d2:	8afa      	ldrh	r2, [r7, #22]
 80096d4:	8bfb      	ldrh	r3, [r7, #30]
 80096d6:	4413      	add	r3, r2
 80096d8:	b29b      	uxth	r3, r3
 80096da:	3308      	adds	r3, #8
 80096dc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80096e6:	d106      	bne.n	80096f6 <mem_trim+0x192>
 80096e8:	4b1c      	ldr	r3, [pc, #112]	; (800975c <mem_trim+0x1f8>)
 80096ea:	f240 3216 	movw	r2, #790	; 0x316
 80096ee:	4920      	ldr	r1, [pc, #128]	; (8009770 <mem_trim+0x20c>)
 80096f0:	481c      	ldr	r0, [pc, #112]	; (8009764 <mem_trim+0x200>)
 80096f2:	f009 fd41 	bl	8013178 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80096f6:	89fb      	ldrh	r3, [r7, #14]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7ff fd4f 	bl	800919c <ptr_to_mem>
 80096fe:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009700:	4b1c      	ldr	r3, [pc, #112]	; (8009774 <mem_trim+0x210>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	429a      	cmp	r2, r3
 8009708:	d202      	bcs.n	8009710 <mem_trim+0x1ac>
      lfree = mem2;
 800970a:	4a1a      	ldr	r2, [pc, #104]	; (8009774 <mem_trim+0x210>)
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	2200      	movs	r2, #0
 8009714:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	881a      	ldrh	r2, [r3, #0]
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	8afa      	ldrh	r2, [r7, #22]
 8009722:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	89fa      	ldrh	r2, [r7, #14]
 8009728:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009732:	d007      	beq.n	8009744 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff fd2f 	bl	800919c <ptr_to_mem>
 800973e:	4602      	mov	r2, r0
 8009740:	89fb      	ldrh	r3, [r7, #14]
 8009742:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009744:	4809      	ldr	r0, [pc, #36]	; (800976c <mem_trim+0x208>)
 8009746:	f009 fad6 	bl	8012cf6 <sys_mutex_unlock>
  return rmem;
 800974a:	687b      	ldr	r3, [r7, #4]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3720      	adds	r7, #32
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	200067fc 	.word	0x200067fc
 8009758:	20006800 	.word	0x20006800
 800975c:	080140d4 	.word	0x080140d4
 8009760:	08014260 	.word	0x08014260
 8009764:	0801411c 	.word	0x0801411c
 8009768:	08014278 	.word	0x08014278
 800976c:	20006804 	.word	0x20006804
 8009770:	08014298 	.word	0x08014298
 8009774:	20006808 	.word	0x20006808

08009778 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b088      	sub	sp, #32
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <mem_malloc+0x14>
    return NULL;
 8009788:	2300      	movs	r3, #0
 800978a:	e0e2      	b.n	8009952 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	3303      	adds	r3, #3
 8009790:	b29b      	uxth	r3, r3
 8009792:	f023 0303 	bic.w	r3, r3, #3
 8009796:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009798:	8bbb      	ldrh	r3, [r7, #28]
 800979a:	2b0b      	cmp	r3, #11
 800979c:	d801      	bhi.n	80097a2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800979e:	230c      	movs	r3, #12
 80097a0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80097a2:	8bbb      	ldrh	r3, [r7, #28]
 80097a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80097a8:	d803      	bhi.n	80097b2 <mem_malloc+0x3a>
 80097aa:	8bba      	ldrh	r2, [r7, #28]
 80097ac:	88fb      	ldrh	r3, [r7, #6]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d201      	bcs.n	80097b6 <mem_malloc+0x3e>
    return NULL;
 80097b2:	2300      	movs	r3, #0
 80097b4:	e0cd      	b.n	8009952 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80097b6:	4869      	ldr	r0, [pc, #420]	; (800995c <mem_malloc+0x1e4>)
 80097b8:	f009 fa8e 	bl	8012cd8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80097bc:	4b68      	ldr	r3, [pc, #416]	; (8009960 <mem_malloc+0x1e8>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7ff fcfd 	bl	80091c0 <mem_to_ptr>
 80097c6:	4603      	mov	r3, r0
 80097c8:	83fb      	strh	r3, [r7, #30]
 80097ca:	e0b7      	b.n	800993c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80097cc:	8bfb      	ldrh	r3, [r7, #30]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7ff fce4 	bl	800919c <ptr_to_mem>
 80097d4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	791b      	ldrb	r3, [r3, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f040 80a7 	bne.w	800992e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	8bfb      	ldrh	r3, [r7, #30]
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	f1a3 0208 	sub.w	r2, r3, #8
 80097ee:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80097f0:	429a      	cmp	r2, r3
 80097f2:	f0c0 809c 	bcc.w	800992e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	461a      	mov	r2, r3
 80097fc:	8bfb      	ldrh	r3, [r7, #30]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	f1a3 0208 	sub.w	r2, r3, #8
 8009804:	8bbb      	ldrh	r3, [r7, #28]
 8009806:	3314      	adds	r3, #20
 8009808:	429a      	cmp	r2, r3
 800980a:	d333      	bcc.n	8009874 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800980c:	8bfa      	ldrh	r2, [r7, #30]
 800980e:	8bbb      	ldrh	r3, [r7, #28]
 8009810:	4413      	add	r3, r2
 8009812:	b29b      	uxth	r3, r3
 8009814:	3308      	adds	r3, #8
 8009816:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009818:	8a7b      	ldrh	r3, [r7, #18]
 800981a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800981e:	d106      	bne.n	800982e <mem_malloc+0xb6>
 8009820:	4b50      	ldr	r3, [pc, #320]	; (8009964 <mem_malloc+0x1ec>)
 8009822:	f240 3287 	movw	r2, #903	; 0x387
 8009826:	4950      	ldr	r1, [pc, #320]	; (8009968 <mem_malloc+0x1f0>)
 8009828:	4850      	ldr	r0, [pc, #320]	; (800996c <mem_malloc+0x1f4>)
 800982a:	f009 fca5 	bl	8013178 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800982e:	8a7b      	ldrh	r3, [r7, #18]
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff fcb3 	bl	800919c <ptr_to_mem>
 8009836:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	881a      	ldrh	r2, [r3, #0]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8bfa      	ldrh	r2, [r7, #30]
 800984a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	8a7a      	ldrh	r2, [r7, #18]
 8009850:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2201      	movs	r2, #1
 8009856:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	881b      	ldrh	r3, [r3, #0]
 800985c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009860:	d00b      	beq.n	800987a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	4618      	mov	r0, r3
 8009868:	f7ff fc98 	bl	800919c <ptr_to_mem>
 800986c:	4602      	mov	r2, r0
 800986e:	8a7b      	ldrh	r3, [r7, #18]
 8009870:	8053      	strh	r3, [r2, #2]
 8009872:	e002      	b.n	800987a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	2201      	movs	r2, #1
 8009878:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800987a:	4b39      	ldr	r3, [pc, #228]	; (8009960 <mem_malloc+0x1e8>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	429a      	cmp	r2, r3
 8009882:	d127      	bne.n	80098d4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8009884:	4b36      	ldr	r3, [pc, #216]	; (8009960 <mem_malloc+0x1e8>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800988a:	e005      	b.n	8009898 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	4618      	mov	r0, r3
 8009892:	f7ff fc83 	bl	800919c <ptr_to_mem>
 8009896:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	791b      	ldrb	r3, [r3, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d004      	beq.n	80098aa <mem_malloc+0x132>
 80098a0:	4b33      	ldr	r3, [pc, #204]	; (8009970 <mem_malloc+0x1f8>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d1f0      	bne.n	800988c <mem_malloc+0x114>
          }
          lfree = cur;
 80098aa:	4a2d      	ldr	r2, [pc, #180]	; (8009960 <mem_malloc+0x1e8>)
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80098b0:	4b2b      	ldr	r3, [pc, #172]	; (8009960 <mem_malloc+0x1e8>)
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	4b2e      	ldr	r3, [pc, #184]	; (8009970 <mem_malloc+0x1f8>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d00b      	beq.n	80098d4 <mem_malloc+0x15c>
 80098bc:	4b28      	ldr	r3, [pc, #160]	; (8009960 <mem_malloc+0x1e8>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	791b      	ldrb	r3, [r3, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d006      	beq.n	80098d4 <mem_malloc+0x15c>
 80098c6:	4b27      	ldr	r3, [pc, #156]	; (8009964 <mem_malloc+0x1ec>)
 80098c8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80098cc:	4929      	ldr	r1, [pc, #164]	; (8009974 <mem_malloc+0x1fc>)
 80098ce:	4827      	ldr	r0, [pc, #156]	; (800996c <mem_malloc+0x1f4>)
 80098d0:	f009 fc52 	bl	8013178 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80098d4:	4821      	ldr	r0, [pc, #132]	; (800995c <mem_malloc+0x1e4>)
 80098d6:	f009 fa0e 	bl	8012cf6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80098da:	8bba      	ldrh	r2, [r7, #28]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	4413      	add	r3, r2
 80098e0:	3308      	adds	r3, #8
 80098e2:	4a23      	ldr	r2, [pc, #140]	; (8009970 <mem_malloc+0x1f8>)
 80098e4:	6812      	ldr	r2, [r2, #0]
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d906      	bls.n	80098f8 <mem_malloc+0x180>
 80098ea:	4b1e      	ldr	r3, [pc, #120]	; (8009964 <mem_malloc+0x1ec>)
 80098ec:	f240 32b9 	movw	r2, #953	; 0x3b9
 80098f0:	4921      	ldr	r1, [pc, #132]	; (8009978 <mem_malloc+0x200>)
 80098f2:	481e      	ldr	r0, [pc, #120]	; (800996c <mem_malloc+0x1f4>)
 80098f4:	f009 fc40 	bl	8013178 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d006      	beq.n	8009910 <mem_malloc+0x198>
 8009902:	4b18      	ldr	r3, [pc, #96]	; (8009964 <mem_malloc+0x1ec>)
 8009904:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009908:	491c      	ldr	r1, [pc, #112]	; (800997c <mem_malloc+0x204>)
 800990a:	4818      	ldr	r0, [pc, #96]	; (800996c <mem_malloc+0x1f4>)
 800990c:	f009 fc34 	bl	8013178 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	f003 0303 	and.w	r3, r3, #3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d006      	beq.n	8009928 <mem_malloc+0x1b0>
 800991a:	4b12      	ldr	r3, [pc, #72]	; (8009964 <mem_malloc+0x1ec>)
 800991c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009920:	4917      	ldr	r1, [pc, #92]	; (8009980 <mem_malloc+0x208>)
 8009922:	4812      	ldr	r0, [pc, #72]	; (800996c <mem_malloc+0x1f4>)
 8009924:	f009 fc28 	bl	8013178 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	3308      	adds	r3, #8
 800992c:	e011      	b.n	8009952 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800992e:	8bfb      	ldrh	r3, [r7, #30]
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fc33 	bl	800919c <ptr_to_mem>
 8009936:	4603      	mov	r3, r0
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800993c:	8bfa      	ldrh	r2, [r7, #30]
 800993e:	8bbb      	ldrh	r3, [r7, #28]
 8009940:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009944:	429a      	cmp	r2, r3
 8009946:	f4ff af41 	bcc.w	80097cc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800994a:	4804      	ldr	r0, [pc, #16]	; (800995c <mem_malloc+0x1e4>)
 800994c:	f009 f9d3 	bl	8012cf6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3720      	adds	r7, #32
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	20006804 	.word	0x20006804
 8009960:	20006808 	.word	0x20006808
 8009964:	080140d4 	.word	0x080140d4
 8009968:	08014298 	.word	0x08014298
 800996c:	0801411c 	.word	0x0801411c
 8009970:	20006800 	.word	0x20006800
 8009974:	080142ac 	.word	0x080142ac
 8009978:	080142c8 	.word	0x080142c8
 800997c:	080142f8 	.word	0x080142f8
 8009980:	08014328 	.word	0x08014328

08009984 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	2200      	movs	r2, #0
 8009992:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	3303      	adds	r3, #3
 800999a:	f023 0303 	bic.w	r3, r3, #3
 800999e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80099a0:	2300      	movs	r3, #0
 80099a2:	60fb      	str	r3, [r7, #12]
 80099a4:	e011      	b.n	80099ca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	881b      	ldrh	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	4413      	add	r3, r2
 80099c2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	3301      	adds	r3, #1
 80099c8:	60fb      	str	r3, [r7, #12]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	885b      	ldrh	r3, [r3, #2]
 80099ce:	461a      	mov	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4293      	cmp	r3, r2
 80099d4:	dbe7      	blt.n	80099a6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80099d6:	bf00      	nop
 80099d8:	bf00      	nop
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80099ea:	2300      	movs	r3, #0
 80099ec:	80fb      	strh	r3, [r7, #6]
 80099ee:	e009      	b.n	8009a04 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80099f0:	88fb      	ldrh	r3, [r7, #6]
 80099f2:	4a08      	ldr	r2, [pc, #32]	; (8009a14 <memp_init+0x30>)
 80099f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7ff ffc3 	bl	8009984 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80099fe:	88fb      	ldrh	r3, [r7, #6]
 8009a00:	3301      	adds	r3, #1
 8009a02:	80fb      	strh	r3, [r7, #6]
 8009a04:	88fb      	ldrh	r3, [r7, #6]
 8009a06:	2b0c      	cmp	r3, #12
 8009a08:	d9f2      	bls.n	80099f0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009a0a:	bf00      	nop
 8009a0c:	bf00      	nop
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	08016b38 	.word	0x08016b38

08009a18 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009a20:	f009 f99c 	bl	8012d5c <sys_arch_protect>
 8009a24:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d015      	beq.n	8009a60 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	6812      	ldr	r2, [r2, #0]
 8009a3c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f003 0303 	and.w	r3, r3, #3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d006      	beq.n	8009a56 <do_memp_malloc_pool+0x3e>
 8009a48:	4b09      	ldr	r3, [pc, #36]	; (8009a70 <do_memp_malloc_pool+0x58>)
 8009a4a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009a4e:	4909      	ldr	r1, [pc, #36]	; (8009a74 <do_memp_malloc_pool+0x5c>)
 8009a50:	4809      	ldr	r0, [pc, #36]	; (8009a78 <do_memp_malloc_pool+0x60>)
 8009a52:	f009 fb91 	bl	8013178 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f009 f98e 	bl	8012d78 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	e003      	b.n	8009a68 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f009 f989 	bl	8012d78 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	0801434c 	.word	0x0801434c
 8009a74:	0801437c 	.word	0x0801437c
 8009a78:	080143a0 	.word	0x080143a0

08009a7c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009a86:	79fb      	ldrb	r3, [r7, #7]
 8009a88:	2b0c      	cmp	r3, #12
 8009a8a:	d908      	bls.n	8009a9e <memp_malloc+0x22>
 8009a8c:	4b0a      	ldr	r3, [pc, #40]	; (8009ab8 <memp_malloc+0x3c>)
 8009a8e:	f240 1257 	movw	r2, #343	; 0x157
 8009a92:	490a      	ldr	r1, [pc, #40]	; (8009abc <memp_malloc+0x40>)
 8009a94:	480a      	ldr	r0, [pc, #40]	; (8009ac0 <memp_malloc+0x44>)
 8009a96:	f009 fb6f 	bl	8013178 <iprintf>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	e008      	b.n	8009ab0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009a9e:	79fb      	ldrb	r3, [r7, #7]
 8009aa0:	4a08      	ldr	r2, [pc, #32]	; (8009ac4 <memp_malloc+0x48>)
 8009aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7ff ffb6 	bl	8009a18 <do_memp_malloc_pool>
 8009aac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009aae:	68fb      	ldr	r3, [r7, #12]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	0801434c 	.word	0x0801434c
 8009abc:	080143dc 	.word	0x080143dc
 8009ac0:	080143a0 	.word	0x080143a0
 8009ac4:	08016b38 	.word	0x08016b38

08009ac8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	f003 0303 	and.w	r3, r3, #3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d006      	beq.n	8009aea <do_memp_free_pool+0x22>
 8009adc:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <do_memp_free_pool+0x4c>)
 8009ade:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009ae2:	490d      	ldr	r1, [pc, #52]	; (8009b18 <do_memp_free_pool+0x50>)
 8009ae4:	480d      	ldr	r0, [pc, #52]	; (8009b1c <do_memp_free_pool+0x54>)
 8009ae6:	f009 fb47 	bl	8013178 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009aee:	f009 f935 	bl	8012d5c <sys_arch_protect>
 8009af2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009b06:	68b8      	ldr	r0, [r7, #8]
 8009b08:	f009 f936 	bl	8012d78 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009b0c:	bf00      	nop
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	0801434c 	.word	0x0801434c
 8009b18:	080143fc 	.word	0x080143fc
 8009b1c:	080143a0 	.word	0x080143a0

08009b20 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	6039      	str	r1, [r7, #0]
 8009b2a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	2b0c      	cmp	r3, #12
 8009b30:	d907      	bls.n	8009b42 <memp_free+0x22>
 8009b32:	4b0c      	ldr	r3, [pc, #48]	; (8009b64 <memp_free+0x44>)
 8009b34:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009b38:	490b      	ldr	r1, [pc, #44]	; (8009b68 <memp_free+0x48>)
 8009b3a:	480c      	ldr	r0, [pc, #48]	; (8009b6c <memp_free+0x4c>)
 8009b3c:	f009 fb1c 	bl	8013178 <iprintf>
 8009b40:	e00c      	b.n	8009b5c <memp_free+0x3c>

  if (mem == NULL) {
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d008      	beq.n	8009b5a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	4a09      	ldr	r2, [pc, #36]	; (8009b70 <memp_free+0x50>)
 8009b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7ff ffb8 	bl	8009ac8 <do_memp_free_pool>
 8009b58:	e000      	b.n	8009b5c <memp_free+0x3c>
    return;
 8009b5a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	0801434c 	.word	0x0801434c
 8009b68:	0801441c 	.word	0x0801441c
 8009b6c:	080143a0 	.word	0x080143a0
 8009b70:	08016b38 	.word	0x08016b38

08009b74 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009b74:	b480      	push	{r7}
 8009b76:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009b78:	bf00      	nop
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
	...

08009b84 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
 8009b90:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d108      	bne.n	8009baa <netif_add+0x26>
 8009b98:	4b57      	ldr	r3, [pc, #348]	; (8009cf8 <netif_add+0x174>)
 8009b9a:	f240 1227 	movw	r2, #295	; 0x127
 8009b9e:	4957      	ldr	r1, [pc, #348]	; (8009cfc <netif_add+0x178>)
 8009ba0:	4857      	ldr	r0, [pc, #348]	; (8009d00 <netif_add+0x17c>)
 8009ba2:	f009 fae9 	bl	8013178 <iprintf>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	e0a2      	b.n	8009cf0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d108      	bne.n	8009bc2 <netif_add+0x3e>
 8009bb0:	4b51      	ldr	r3, [pc, #324]	; (8009cf8 <netif_add+0x174>)
 8009bb2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009bb6:	4953      	ldr	r1, [pc, #332]	; (8009d04 <netif_add+0x180>)
 8009bb8:	4851      	ldr	r0, [pc, #324]	; (8009d00 <netif_add+0x17c>)
 8009bba:	f009 fadd 	bl	8013178 <iprintf>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e096      	b.n	8009cf0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009bc8:	4b4f      	ldr	r3, [pc, #316]	; (8009d08 <netif_add+0x184>)
 8009bca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009bd2:	4b4d      	ldr	r3, [pc, #308]	; (8009d08 <netif_add+0x184>)
 8009bd4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009bdc:	4b4a      	ldr	r3, [pc, #296]	; (8009d08 <netif_add+0x184>)
 8009bde:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4a45      	ldr	r2, [pc, #276]	; (8009d0c <netif_add+0x188>)
 8009bf6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6a3a      	ldr	r2, [r7, #32]
 8009c10:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009c12:	4b3f      	ldr	r3, [pc, #252]	; (8009d10 <netif_add+0x18c>)
 8009c14:	781a      	ldrb	r2, [r3, #0]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c20:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	68b9      	ldr	r1, [r7, #8]
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f000 f913 	bl	8009e54 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	4798      	blx	r3
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <netif_add+0xba>
    return NULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e058      	b.n	8009cf0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c44:	2bff      	cmp	r3, #255	; 0xff
 8009c46:	d103      	bne.n	8009c50 <netif_add+0xcc>
        netif->num = 0;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009c54:	4b2f      	ldr	r3, [pc, #188]	; (8009d14 <netif_add+0x190>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	617b      	str	r3, [r7, #20]
 8009c5a:	e02b      	b.n	8009cb4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d106      	bne.n	8009c72 <netif_add+0xee>
 8009c64:	4b24      	ldr	r3, [pc, #144]	; (8009cf8 <netif_add+0x174>)
 8009c66:	f240 128b 	movw	r2, #395	; 0x18b
 8009c6a:	492b      	ldr	r1, [pc, #172]	; (8009d18 <netif_add+0x194>)
 8009c6c:	4824      	ldr	r0, [pc, #144]	; (8009d00 <netif_add+0x17c>)
 8009c6e:	f009 fa83 	bl	8013178 <iprintf>
        num_netifs++;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	3301      	adds	r3, #1
 8009c76:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	2bff      	cmp	r3, #255	; 0xff
 8009c7c:	dd06      	ble.n	8009c8c <netif_add+0x108>
 8009c7e:	4b1e      	ldr	r3, [pc, #120]	; (8009cf8 <netif_add+0x174>)
 8009c80:	f240 128d 	movw	r2, #397	; 0x18d
 8009c84:	4925      	ldr	r1, [pc, #148]	; (8009d1c <netif_add+0x198>)
 8009c86:	481e      	ldr	r0, [pc, #120]	; (8009d00 <netif_add+0x17c>)
 8009c88:	f009 fa76 	bl	8013178 <iprintf>
        if (netif2->num == netif->num) {
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d108      	bne.n	8009cae <netif_add+0x12a>
          netif->num++;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	b2da      	uxtb	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009cac:	e005      	b.n	8009cba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	617b      	str	r3, [r7, #20]
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1d0      	bne.n	8009c5c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1be      	bne.n	8009c3e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009cc6:	2bfe      	cmp	r3, #254	; 0xfe
 8009cc8:	d103      	bne.n	8009cd2 <netif_add+0x14e>
    netif_num = 0;
 8009cca:	4b11      	ldr	r3, [pc, #68]	; (8009d10 <netif_add+0x18c>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	701a      	strb	r2, [r3, #0]
 8009cd0:	e006      	b.n	8009ce0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009cd8:	3301      	adds	r3, #1
 8009cda:	b2da      	uxtb	r2, r3
 8009cdc:	4b0c      	ldr	r3, [pc, #48]	; (8009d10 <netif_add+0x18c>)
 8009cde:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009ce0:	4b0c      	ldr	r3, [pc, #48]	; (8009d14 <netif_add+0x190>)
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009ce8:	4a0a      	ldr	r2, [pc, #40]	; (8009d14 <netif_add+0x190>)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009cee:	68fb      	ldr	r3, [r7, #12]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	08014438 	.word	0x08014438
 8009cfc:	080144cc 	.word	0x080144cc
 8009d00:	08014488 	.word	0x08014488
 8009d04:	080144e8 	.word	0x080144e8
 8009d08:	08016bac 	.word	0x08016bac
 8009d0c:	0800a067 	.word	0x0800a067
 8009d10:	20006840 	.word	0x20006840
 8009d14:	2000d3d8 	.word	0x2000d3d8
 8009d18:	0801450c 	.word	0x0801450c
 8009d1c:	08014520 	.word	0x08014520

08009d20 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f002 fb19 	bl	800c364 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f006 fc29 	bl	801058c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009d3a:	bf00      	nop
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d106      	bne.n	8009d64 <netif_do_set_ipaddr+0x20>
 8009d56:	4b1d      	ldr	r3, [pc, #116]	; (8009dcc <netif_do_set_ipaddr+0x88>)
 8009d58:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009d5c:	491c      	ldr	r1, [pc, #112]	; (8009dd0 <netif_do_set_ipaddr+0x8c>)
 8009d5e:	481d      	ldr	r0, [pc, #116]	; (8009dd4 <netif_do_set_ipaddr+0x90>)
 8009d60:	f009 fa0a 	bl	8013178 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d106      	bne.n	8009d78 <netif_do_set_ipaddr+0x34>
 8009d6a:	4b18      	ldr	r3, [pc, #96]	; (8009dcc <netif_do_set_ipaddr+0x88>)
 8009d6c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009d70:	4917      	ldr	r1, [pc, #92]	; (8009dd0 <netif_do_set_ipaddr+0x8c>)
 8009d72:	4818      	ldr	r0, [pc, #96]	; (8009dd4 <netif_do_set_ipaddr+0x90>)
 8009d74:	f009 fa00 	bl	8013178 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3304      	adds	r3, #4
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d01c      	beq.n	8009dc0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	3304      	adds	r3, #4
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009d96:	f107 0314 	add.w	r3, r7, #20
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7ff ffbf 	bl	8009d20 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d002      	beq.n	8009dae <netif_do_set_ipaddr+0x6a>
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	e000      	b.n	8009db0 <netif_do_set_ipaddr+0x6c>
 8009dae:	2300      	movs	r3, #0
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009db4:	2101      	movs	r1, #1
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 f8d2 	bl	8009f60 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e000      	b.n	8009dc2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3718      	adds	r7, #24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	08014438 	.word	0x08014438
 8009dd0:	08014550 	.word	0x08014550
 8009dd4:	08014488 	.word	0x08014488

08009dd8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	3308      	adds	r3, #8
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d00a      	beq.n	8009e08 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <netif_do_set_netmask+0x26>
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	e000      	b.n	8009e00 <netif_do_set_netmask+0x28>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009e04:	2301      	movs	r3, #1
 8009e06:	e000      	b.n	8009e0a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b085      	sub	sp, #20
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	60f8      	str	r0, [r7, #12]
 8009e1e:	60b9      	str	r1, [r7, #8]
 8009e20:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	330c      	adds	r3, #12
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d00a      	beq.n	8009e46 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <netif_do_set_gw+0x26>
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	e000      	b.n	8009e3e <netif_do_set_gw+0x28>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009e42:	2301      	movs	r3, #1
 8009e44:	e000      	b.n	8009e48 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b088      	sub	sp, #32
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
 8009e60:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009e62:	2300      	movs	r3, #0
 8009e64:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009e66:	2300      	movs	r3, #0
 8009e68:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d101      	bne.n	8009e74 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009e70:	4b1c      	ldr	r3, [pc, #112]	; (8009ee4 <netif_set_addr+0x90>)
 8009e72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009e7a:	4b1a      	ldr	r3, [pc, #104]	; (8009ee4 <netif_set_addr+0x90>)
 8009e7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009e84:	4b17      	ldr	r3, [pc, #92]	; (8009ee4 <netif_set_addr+0x90>)
 8009e86:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <netif_set_addr+0x42>
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <netif_set_addr+0x46>
 8009e96:	2301      	movs	r3, #1
 8009e98:	e000      	b.n	8009e9c <netif_set_addr+0x48>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d006      	beq.n	8009eb2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009ea4:	f107 0310 	add.w	r3, r7, #16
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	68b9      	ldr	r1, [r7, #8]
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f7ff ff49 	bl	8009d44 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009eb2:	69fa      	ldr	r2, [r7, #28]
 8009eb4:	6879      	ldr	r1, [r7, #4]
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f7ff ff8e 	bl	8009dd8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009ebc:	69ba      	ldr	r2, [r7, #24]
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f7ff ffa8 	bl	8009e16 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d106      	bne.n	8009eda <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009ecc:	f107 0310 	add.w	r3, r7, #16
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	68b9      	ldr	r1, [r7, #8]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f7ff ff35 	bl	8009d44 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009eda:	bf00      	nop
 8009edc:	3720      	adds	r7, #32
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	08016bac 	.word	0x08016bac

08009ee8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009ef0:	4a04      	ldr	r2, [pc, #16]	; (8009f04 <netif_set_default+0x1c>)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009ef6:	bf00      	nop
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	2000d3dc 	.word	0x2000d3dc

08009f08 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d107      	bne.n	8009f26 <netif_set_up+0x1e>
 8009f16:	4b0f      	ldr	r3, [pc, #60]	; (8009f54 <netif_set_up+0x4c>)
 8009f18:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009f1c:	490e      	ldr	r1, [pc, #56]	; (8009f58 <netif_set_up+0x50>)
 8009f1e:	480f      	ldr	r0, [pc, #60]	; (8009f5c <netif_set_up+0x54>)
 8009f20:	f009 f92a 	bl	8013178 <iprintf>
 8009f24:	e013      	b.n	8009f4e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10c      	bne.n	8009f4e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f3a:	f043 0301 	orr.w	r3, r3, #1
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009f46:	2103      	movs	r1, #3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f809 	bl	8009f60 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	08014438 	.word	0x08014438
 8009f58:	080145c0 	.word	0x080145c0
 8009f5c:	08014488 	.word	0x08014488

08009f60 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d106      	bne.n	8009f80 <netif_issue_reports+0x20>
 8009f72:	4b18      	ldr	r3, [pc, #96]	; (8009fd4 <netif_issue_reports+0x74>)
 8009f74:	f240 326d 	movw	r2, #877	; 0x36d
 8009f78:	4917      	ldr	r1, [pc, #92]	; (8009fd8 <netif_issue_reports+0x78>)
 8009f7a:	4818      	ldr	r0, [pc, #96]	; (8009fdc <netif_issue_reports+0x7c>)
 8009f7c:	f009 f8fc 	bl	8013178 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f86:	f003 0304 	and.w	r3, r3, #4
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d01e      	beq.n	8009fcc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f94:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d017      	beq.n	8009fcc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009f9c:	78fb      	ldrb	r3, [r7, #3]
 8009f9e:	f003 0301 	and.w	r3, r3, #1
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d013      	beq.n	8009fce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3304      	adds	r3, #4
 8009faa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00e      	beq.n	8009fce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009fb6:	f003 0308 	and.w	r3, r3, #8
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d007      	beq.n	8009fce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f007 fa4b 	bl	8011460 <etharp_request>
 8009fca:	e000      	b.n	8009fce <netif_issue_reports+0x6e>
    return;
 8009fcc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	08014438 	.word	0x08014438
 8009fd8:	080145dc 	.word	0x080145dc
 8009fdc:	08014488 	.word	0x08014488

08009fe0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d107      	bne.n	8009ffe <netif_set_down+0x1e>
 8009fee:	4b12      	ldr	r3, [pc, #72]	; (800a038 <netif_set_down+0x58>)
 8009ff0:	f240 329b 	movw	r2, #923	; 0x39b
 8009ff4:	4911      	ldr	r1, [pc, #68]	; (800a03c <netif_set_down+0x5c>)
 8009ff6:	4812      	ldr	r0, [pc, #72]	; (800a040 <netif_set_down+0x60>)
 8009ff8:	f009 f8be 	bl	8013178 <iprintf>
 8009ffc:	e019      	b.n	800a032 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a004:	f003 0301 	and.w	r3, r3, #1
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d012      	beq.n	800a032 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a012:	f023 0301 	bic.w	r3, r3, #1
 800a016:	b2da      	uxtb	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a024:	f003 0308 	and.w	r3, r3, #8
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f006 fdd5 	bl	8010bdc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	08014438 	.word	0x08014438
 800a03c:	08014600 	.word	0x08014600
 800a040:	08014488 	.word	0x08014488

0800a044 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d002      	beq.n	800a05a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	61da      	str	r2, [r3, #28]
  }
}
 800a05a:	bf00      	nop
 800a05c:	370c      	adds	r7, #12
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a066:	b480      	push	{r7}
 800a068:	b085      	sub	sp, #20
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	60f8      	str	r0, [r7, #12]
 800a06e:	60b9      	str	r1, [r7, #8]
 800a070:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a072:	f06f 030b 	mvn.w	r3, #11
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
	...

0800a084 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	4603      	mov	r3, r0
 800a08c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d013      	beq.n	800a0bc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a094:	4b0d      	ldr	r3, [pc, #52]	; (800a0cc <netif_get_by_index+0x48>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	60fb      	str	r3, [r7, #12]
 800a09a:	e00c      	b.n	800a0b6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	79fa      	ldrb	r2, [r7, #7]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d101      	bne.n	800a0b0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	e006      	b.n	800a0be <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1ef      	bne.n	800a09c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3714      	adds	r7, #20
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	2000d3d8 	.word	0x2000d3d8

0800a0d0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a0d6:	f008 fe41 	bl	8012d5c <sys_arch_protect>
 800a0da:	6038      	str	r0, [r7, #0]
 800a0dc:	4b0d      	ldr	r3, [pc, #52]	; (800a114 <pbuf_free_ooseq+0x44>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	701a      	strb	r2, [r3, #0]
 800a0e2:	6838      	ldr	r0, [r7, #0]
 800a0e4:	f008 fe48 	bl	8012d78 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a0e8:	4b0b      	ldr	r3, [pc, #44]	; (800a118 <pbuf_free_ooseq+0x48>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	607b      	str	r3, [r7, #4]
 800a0ee:	e00a      	b.n	800a106 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d003      	beq.n	800a100 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f002 f971 	bl	800c3e0 <tcp_free_ooseq>
      return;
 800a0fe:	e005      	b.n	800a10c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	607b      	str	r3, [r7, #4]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1f1      	bne.n	800a0f0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	2000d3e0 	.word	0x2000d3e0
 800a118:	2000d3e8 	.word	0x2000d3e8

0800a11c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a124:	f7ff ffd4 	bl	800a0d0 <pbuf_free_ooseq>
}
 800a128:	bf00      	nop
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a136:	f008 fe11 	bl	8012d5c <sys_arch_protect>
 800a13a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a13c:	4b0f      	ldr	r3, [pc, #60]	; (800a17c <pbuf_pool_is_empty+0x4c>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a142:	4b0e      	ldr	r3, [pc, #56]	; (800a17c <pbuf_pool_is_empty+0x4c>)
 800a144:	2201      	movs	r2, #1
 800a146:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f008 fe15 	bl	8012d78 <sys_arch_unprotect>

  if (!queued) {
 800a14e:	78fb      	ldrb	r3, [r7, #3]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10f      	bne.n	800a174 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a154:	2100      	movs	r1, #0
 800a156:	480a      	ldr	r0, [pc, #40]	; (800a180 <pbuf_pool_is_empty+0x50>)
 800a158:	f7fe ff50 	bl	8008ffc <tcpip_try_callback>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d008      	beq.n	800a174 <pbuf_pool_is_empty+0x44>
 800a162:	f008 fdfb 	bl	8012d5c <sys_arch_protect>
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	4b04      	ldr	r3, [pc, #16]	; (800a17c <pbuf_pool_is_empty+0x4c>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	701a      	strb	r2, [r3, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f008 fe02 	bl	8012d78 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a174:	bf00      	nop
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	2000d3e0 	.word	0x2000d3e0
 800a180:	0800a11d 	.word	0x0800a11d

0800a184 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	4611      	mov	r1, r2
 800a190:	461a      	mov	r2, r3
 800a192:	460b      	mov	r3, r1
 800a194:	80fb      	strh	r3, [r7, #6]
 800a196:	4613      	mov	r3, r2
 800a198:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	88fa      	ldrh	r2, [r7, #6]
 800a1aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	88ba      	ldrh	r2, [r7, #4]
 800a1b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a1b2:	8b3b      	ldrh	r3, [r7, #24]
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	7f3a      	ldrb	r2, [r7, #28]
 800a1be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	73da      	strb	r2, [r3, #15]
}
 800a1cc:	bf00      	nop
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08c      	sub	sp, #48	; 0x30
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	4603      	mov	r3, r0
 800a1e0:	71fb      	strb	r3, [r7, #7]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	80bb      	strh	r3, [r7, #4]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a1ea:	79fb      	ldrb	r3, [r7, #7]
 800a1ec:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a1ee:	887b      	ldrh	r3, [r7, #2]
 800a1f0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a1f4:	d07f      	beq.n	800a2f6 <pbuf_alloc+0x11e>
 800a1f6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a1fa:	f300 80c8 	bgt.w	800a38e <pbuf_alloc+0x1b6>
 800a1fe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a202:	d010      	beq.n	800a226 <pbuf_alloc+0x4e>
 800a204:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a208:	f300 80c1 	bgt.w	800a38e <pbuf_alloc+0x1b6>
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d002      	beq.n	800a216 <pbuf_alloc+0x3e>
 800a210:	2b41      	cmp	r3, #65	; 0x41
 800a212:	f040 80bc 	bne.w	800a38e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a216:	887a      	ldrh	r2, [r7, #2]
 800a218:	88bb      	ldrh	r3, [r7, #4]
 800a21a:	4619      	mov	r1, r3
 800a21c:	2000      	movs	r0, #0
 800a21e:	f000 f8d1 	bl	800a3c4 <pbuf_alloc_reference>
 800a222:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a224:	e0bd      	b.n	800a3a2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a226:	2300      	movs	r3, #0
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a22e:	88bb      	ldrh	r3, [r7, #4]
 800a230:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a232:	200c      	movs	r0, #12
 800a234:	f7ff fc22 	bl	8009a7c <memp_malloc>
 800a238:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d109      	bne.n	800a254 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a240:	f7ff ff76 	bl	800a130 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	2b00      	cmp	r3, #0
 800a248:	d002      	beq.n	800a250 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a24a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a24c:	f000 faa8 	bl	800a7a0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a250:	2300      	movs	r3, #0
 800a252:	e0a7      	b.n	800a3a4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a254:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a256:	3303      	adds	r3, #3
 800a258:	b29b      	uxth	r3, r3
 800a25a:	f023 0303 	bic.w	r3, r3, #3
 800a25e:	b29b      	uxth	r3, r3
 800a260:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a264:	b29b      	uxth	r3, r3
 800a266:	8b7a      	ldrh	r2, [r7, #26]
 800a268:	4293      	cmp	r3, r2
 800a26a:	bf28      	it	cs
 800a26c:	4613      	movcs	r3, r2
 800a26e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a270:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a272:	3310      	adds	r3, #16
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	4413      	add	r3, r2
 800a278:	3303      	adds	r3, #3
 800a27a:	f023 0303 	bic.w	r3, r3, #3
 800a27e:	4618      	mov	r0, r3
 800a280:	89f9      	ldrh	r1, [r7, #14]
 800a282:	8b7a      	ldrh	r2, [r7, #26]
 800a284:	2300      	movs	r3, #0
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	887b      	ldrh	r3, [r7, #2]
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	460b      	mov	r3, r1
 800a28e:	4601      	mov	r1, r0
 800a290:	6938      	ldr	r0, [r7, #16]
 800a292:	f7ff ff77 	bl	800a184 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f003 0303 	and.w	r3, r3, #3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d006      	beq.n	800a2b0 <pbuf_alloc+0xd8>
 800a2a2:	4b42      	ldr	r3, [pc, #264]	; (800a3ac <pbuf_alloc+0x1d4>)
 800a2a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2a8:	4941      	ldr	r1, [pc, #260]	; (800a3b0 <pbuf_alloc+0x1d8>)
 800a2aa:	4842      	ldr	r0, [pc, #264]	; (800a3b4 <pbuf_alloc+0x1dc>)
 800a2ac:	f008 ff64 	bl	8013178 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a2b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2b2:	3303      	adds	r3, #3
 800a2b4:	f023 0303 	bic.w	r3, r3, #3
 800a2b8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a2bc:	d106      	bne.n	800a2cc <pbuf_alloc+0xf4>
 800a2be:	4b3b      	ldr	r3, [pc, #236]	; (800a3ac <pbuf_alloc+0x1d4>)
 800a2c0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a2c4:	493c      	ldr	r1, [pc, #240]	; (800a3b8 <pbuf_alloc+0x1e0>)
 800a2c6:	483b      	ldr	r0, [pc, #236]	; (800a3b4 <pbuf_alloc+0x1dc>)
 800a2c8:	f008 ff56 	bl	8013178 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d102      	bne.n	800a2d8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2d6:	e002      	b.n	800a2de <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a2e2:	8b7a      	ldrh	r2, [r7, #26]
 800a2e4:	89fb      	ldrh	r3, [r7, #14]
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a2ee:	8b7b      	ldrh	r3, [r7, #26]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d19e      	bne.n	800a232 <pbuf_alloc+0x5a>
      break;
 800a2f4:	e055      	b.n	800a3a2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a2f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2f8:	3303      	adds	r3, #3
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	f023 0303 	bic.w	r3, r3, #3
 800a300:	b29a      	uxth	r2, r3
 800a302:	88bb      	ldrh	r3, [r7, #4]
 800a304:	3303      	adds	r3, #3
 800a306:	b29b      	uxth	r3, r3
 800a308:	f023 0303 	bic.w	r3, r3, #3
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	4413      	add	r3, r2
 800a310:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a312:	8b3b      	ldrh	r3, [r7, #24]
 800a314:	3310      	adds	r3, #16
 800a316:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a318:	8b3a      	ldrh	r2, [r7, #24]
 800a31a:	88bb      	ldrh	r3, [r7, #4]
 800a31c:	3303      	adds	r3, #3
 800a31e:	f023 0303 	bic.w	r3, r3, #3
 800a322:	429a      	cmp	r2, r3
 800a324:	d306      	bcc.n	800a334 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a326:	8afa      	ldrh	r2, [r7, #22]
 800a328:	88bb      	ldrh	r3, [r7, #4]
 800a32a:	3303      	adds	r3, #3
 800a32c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a330:	429a      	cmp	r2, r3
 800a332:	d201      	bcs.n	800a338 <pbuf_alloc+0x160>
        return NULL;
 800a334:	2300      	movs	r3, #0
 800a336:	e035      	b.n	800a3a4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a338:	8afb      	ldrh	r3, [r7, #22]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff fa1c 	bl	8009778 <mem_malloc>
 800a340:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	2b00      	cmp	r3, #0
 800a346:	d101      	bne.n	800a34c <pbuf_alloc+0x174>
        return NULL;
 800a348:	2300      	movs	r3, #0
 800a34a:	e02b      	b.n	800a3a4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a34c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a34e:	3310      	adds	r3, #16
 800a350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a352:	4413      	add	r3, r2
 800a354:	3303      	adds	r3, #3
 800a356:	f023 0303 	bic.w	r3, r3, #3
 800a35a:	4618      	mov	r0, r3
 800a35c:	88b9      	ldrh	r1, [r7, #4]
 800a35e:	88ba      	ldrh	r2, [r7, #4]
 800a360:	2300      	movs	r3, #0
 800a362:	9301      	str	r3, [sp, #4]
 800a364:	887b      	ldrh	r3, [r7, #2]
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	460b      	mov	r3, r1
 800a36a:	4601      	mov	r1, r0
 800a36c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a36e:	f7ff ff09 	bl	800a184 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	f003 0303 	and.w	r3, r3, #3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d010      	beq.n	800a3a0 <pbuf_alloc+0x1c8>
 800a37e:	4b0b      	ldr	r3, [pc, #44]	; (800a3ac <pbuf_alloc+0x1d4>)
 800a380:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a384:	490d      	ldr	r1, [pc, #52]	; (800a3bc <pbuf_alloc+0x1e4>)
 800a386:	480b      	ldr	r0, [pc, #44]	; (800a3b4 <pbuf_alloc+0x1dc>)
 800a388:	f008 fef6 	bl	8013178 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a38c:	e008      	b.n	800a3a0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a38e:	4b07      	ldr	r3, [pc, #28]	; (800a3ac <pbuf_alloc+0x1d4>)
 800a390:	f240 1227 	movw	r2, #295	; 0x127
 800a394:	490a      	ldr	r1, [pc, #40]	; (800a3c0 <pbuf_alloc+0x1e8>)
 800a396:	4807      	ldr	r0, [pc, #28]	; (800a3b4 <pbuf_alloc+0x1dc>)
 800a398:	f008 feee 	bl	8013178 <iprintf>
      return NULL;
 800a39c:	2300      	movs	r3, #0
 800a39e:	e001      	b.n	800a3a4 <pbuf_alloc+0x1cc>
      break;
 800a3a0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3728      	adds	r7, #40	; 0x28
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	08014668 	.word	0x08014668
 800a3b0:	08014698 	.word	0x08014698
 800a3b4:	080146c8 	.word	0x080146c8
 800a3b8:	080146f0 	.word	0x080146f0
 800a3bc:	08014724 	.word	0x08014724
 800a3c0:	08014750 	.word	0x08014750

0800a3c4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af02      	add	r7, sp, #8
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	807b      	strh	r3, [r7, #2]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a3d4:	883b      	ldrh	r3, [r7, #0]
 800a3d6:	2b41      	cmp	r3, #65	; 0x41
 800a3d8:	d009      	beq.n	800a3ee <pbuf_alloc_reference+0x2a>
 800a3da:	883b      	ldrh	r3, [r7, #0]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d006      	beq.n	800a3ee <pbuf_alloc_reference+0x2a>
 800a3e0:	4b0f      	ldr	r3, [pc, #60]	; (800a420 <pbuf_alloc_reference+0x5c>)
 800a3e2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a3e6:	490f      	ldr	r1, [pc, #60]	; (800a424 <pbuf_alloc_reference+0x60>)
 800a3e8:	480f      	ldr	r0, [pc, #60]	; (800a428 <pbuf_alloc_reference+0x64>)
 800a3ea:	f008 fec5 	bl	8013178 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a3ee:	200b      	movs	r0, #11
 800a3f0:	f7ff fb44 	bl	8009a7c <memp_malloc>
 800a3f4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	e00b      	b.n	800a418 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a400:	8879      	ldrh	r1, [r7, #2]
 800a402:	887a      	ldrh	r2, [r7, #2]
 800a404:	2300      	movs	r3, #0
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	883b      	ldrh	r3, [r7, #0]
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	460b      	mov	r3, r1
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f7ff feb7 	bl	800a184 <pbuf_init_alloced_pbuf>
  return p;
 800a416:	68fb      	ldr	r3, [r7, #12]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	08014668 	.word	0x08014668
 800a424:	0801476c 	.word	0x0801476c
 800a428:	080146c8 	.word	0x080146c8

0800a42c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b088      	sub	sp, #32
 800a430:	af02      	add	r7, sp, #8
 800a432:	607b      	str	r3, [r7, #4]
 800a434:	4603      	mov	r3, r0
 800a436:	73fb      	strb	r3, [r7, #15]
 800a438:	460b      	mov	r3, r1
 800a43a:	81bb      	strh	r3, [r7, #12]
 800a43c:	4613      	mov	r3, r2
 800a43e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a440:	7bfb      	ldrb	r3, [r7, #15]
 800a442:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a444:	8a7b      	ldrh	r3, [r7, #18]
 800a446:	3303      	adds	r3, #3
 800a448:	f023 0203 	bic.w	r2, r3, #3
 800a44c:	89bb      	ldrh	r3, [r7, #12]
 800a44e:	441a      	add	r2, r3
 800a450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a452:	429a      	cmp	r2, r3
 800a454:	d901      	bls.n	800a45a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a456:	2300      	movs	r3, #0
 800a458:	e018      	b.n	800a48c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d007      	beq.n	800a470 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a460:	8a7b      	ldrh	r3, [r7, #18]
 800a462:	3303      	adds	r3, #3
 800a464:	f023 0303 	bic.w	r3, r3, #3
 800a468:	6a3a      	ldr	r2, [r7, #32]
 800a46a:	4413      	add	r3, r2
 800a46c:	617b      	str	r3, [r7, #20]
 800a46e:	e001      	b.n	800a474 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a470:	2300      	movs	r3, #0
 800a472:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	89b9      	ldrh	r1, [r7, #12]
 800a478:	89ba      	ldrh	r2, [r7, #12]
 800a47a:	2302      	movs	r3, #2
 800a47c:	9301      	str	r3, [sp, #4]
 800a47e:	897b      	ldrh	r3, [r7, #10]
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	460b      	mov	r3, r1
 800a484:	6979      	ldr	r1, [r7, #20]
 800a486:	f7ff fe7d 	bl	800a184 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a48a:	687b      	ldr	r3, [r7, #4]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3718      	adds	r7, #24
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d106      	bne.n	800a4b4 <pbuf_realloc+0x20>
 800a4a6:	4b3a      	ldr	r3, [pc, #232]	; (800a590 <pbuf_realloc+0xfc>)
 800a4a8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a4ac:	4939      	ldr	r1, [pc, #228]	; (800a594 <pbuf_realloc+0x100>)
 800a4ae:	483a      	ldr	r0, [pc, #232]	; (800a598 <pbuf_realloc+0x104>)
 800a4b0:	f008 fe62 	bl	8013178 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	891b      	ldrh	r3, [r3, #8]
 800a4b8:	887a      	ldrh	r2, [r7, #2]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d263      	bcs.n	800a586 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	891a      	ldrh	r2, [r3, #8]
 800a4c2:	887b      	ldrh	r3, [r7, #2]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a4c8:	887b      	ldrh	r3, [r7, #2]
 800a4ca:	817b      	strh	r3, [r7, #10]
  q = p;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a4d0:	e018      	b.n	800a504 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	895b      	ldrh	r3, [r3, #10]
 800a4d6:	897a      	ldrh	r2, [r7, #10]
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	891a      	ldrh	r2, [r3, #8]
 800a4e0:	893b      	ldrh	r3, [r7, #8]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d106      	bne.n	800a504 <pbuf_realloc+0x70>
 800a4f6:	4b26      	ldr	r3, [pc, #152]	; (800a590 <pbuf_realloc+0xfc>)
 800a4f8:	f240 12af 	movw	r2, #431	; 0x1af
 800a4fc:	4927      	ldr	r1, [pc, #156]	; (800a59c <pbuf_realloc+0x108>)
 800a4fe:	4826      	ldr	r0, [pc, #152]	; (800a598 <pbuf_realloc+0x104>)
 800a500:	f008 fe3a 	bl	8013178 <iprintf>
  while (rem_len > q->len) {
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	895b      	ldrh	r3, [r3, #10]
 800a508:	897a      	ldrh	r2, [r7, #10]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d8e1      	bhi.n	800a4d2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	7b1b      	ldrb	r3, [r3, #12]
 800a512:	f003 030f 	and.w	r3, r3, #15
 800a516:	2b00      	cmp	r3, #0
 800a518:	d121      	bne.n	800a55e <pbuf_realloc+0xca>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	895b      	ldrh	r3, [r3, #10]
 800a51e:	897a      	ldrh	r2, [r7, #10]
 800a520:	429a      	cmp	r2, r3
 800a522:	d01c      	beq.n	800a55e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	7b5b      	ldrb	r3, [r3, #13]
 800a528:	f003 0302 	and.w	r3, r3, #2
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d116      	bne.n	800a55e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	b29a      	uxth	r2, r3
 800a53a:	897b      	ldrh	r3, [r7, #10]
 800a53c:	4413      	add	r3, r2
 800a53e:	b29b      	uxth	r3, r3
 800a540:	4619      	mov	r1, r3
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f7ff f80e 	bl	8009564 <mem_trim>
 800a548:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d106      	bne.n	800a55e <pbuf_realloc+0xca>
 800a550:	4b0f      	ldr	r3, [pc, #60]	; (800a590 <pbuf_realloc+0xfc>)
 800a552:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a556:	4912      	ldr	r1, [pc, #72]	; (800a5a0 <pbuf_realloc+0x10c>)
 800a558:	480f      	ldr	r0, [pc, #60]	; (800a598 <pbuf_realloc+0x104>)
 800a55a:	f008 fe0d 	bl	8013178 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	897a      	ldrh	r2, [r7, #10]
 800a562:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	895a      	ldrh	r2, [r3, #10]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d004      	beq.n	800a57e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 f911 	bl	800a7a0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	e000      	b.n	800a588 <pbuf_realloc+0xf4>
    return;
 800a586:	bf00      	nop

}
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	08014668 	.word	0x08014668
 800a594:	08014780 	.word	0x08014780
 800a598:	080146c8 	.word	0x080146c8
 800a59c:	08014798 	.word	0x08014798
 800a5a0:	080147b0 	.word	0x080147b0

0800a5a4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d106      	bne.n	800a5c6 <pbuf_add_header_impl+0x22>
 800a5b8:	4b2b      	ldr	r3, [pc, #172]	; (800a668 <pbuf_add_header_impl+0xc4>)
 800a5ba:	f240 12df 	movw	r2, #479	; 0x1df
 800a5be:	492b      	ldr	r1, [pc, #172]	; (800a66c <pbuf_add_header_impl+0xc8>)
 800a5c0:	482b      	ldr	r0, [pc, #172]	; (800a670 <pbuf_add_header_impl+0xcc>)
 800a5c2:	f008 fdd9 	bl	8013178 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <pbuf_add_header_impl+0x30>
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5d2:	d301      	bcc.n	800a5d8 <pbuf_add_header_impl+0x34>
    return 1;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e043      	b.n	800a660 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <pbuf_add_header_impl+0x3e>
    return 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	e03e      	b.n	800a660 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	891a      	ldrh	r2, [r3, #8]
 800a5ea:	8a7b      	ldrh	r3, [r7, #18]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	8a7a      	ldrh	r2, [r7, #18]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d901      	bls.n	800a5fa <pbuf_add_header_impl+0x56>
    return 1;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e032      	b.n	800a660 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	7b1b      	ldrb	r3, [r3, #12]
 800a5fe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a600:	8a3b      	ldrh	r3, [r7, #16]
 800a602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00c      	beq.n	800a624 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	685a      	ldr	r2, [r3, #4]
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	425b      	negs	r3, r3
 800a612:	4413      	add	r3, r2
 800a614:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3310      	adds	r3, #16
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d20d      	bcs.n	800a63c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a620:	2301      	movs	r3, #1
 800a622:	e01d      	b.n	800a660 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a624:	79fb      	ldrb	r3, [r7, #7]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d006      	beq.n	800a638 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	425b      	negs	r3, r3
 800a632:	4413      	add	r3, r2
 800a634:	617b      	str	r3, [r7, #20]
 800a636:	e001      	b.n	800a63c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a638:	2301      	movs	r3, #1
 800a63a:	e011      	b.n	800a660 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	895a      	ldrh	r2, [r3, #10]
 800a646:	8a7b      	ldrh	r3, [r7, #18]
 800a648:	4413      	add	r3, r2
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	891a      	ldrh	r2, [r3, #8]
 800a654:	8a7b      	ldrh	r3, [r7, #18]
 800a656:	4413      	add	r3, r2
 800a658:	b29a      	uxth	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	811a      	strh	r2, [r3, #8]


  return 0;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	08014668 	.word	0x08014668
 800a66c:	080147cc 	.word	0x080147cc
 800a670:	080146c8 	.word	0x080146c8

0800a674 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a67e:	2200      	movs	r2, #0
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff ff8e 	bl	800a5a4 <pbuf_add_header_impl>
 800a688:	4603      	mov	r3, r0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d106      	bne.n	800a6b2 <pbuf_remove_header+0x1e>
 800a6a4:	4b20      	ldr	r3, [pc, #128]	; (800a728 <pbuf_remove_header+0x94>)
 800a6a6:	f240 224b 	movw	r2, #587	; 0x24b
 800a6aa:	4920      	ldr	r1, [pc, #128]	; (800a72c <pbuf_remove_header+0x98>)
 800a6ac:	4820      	ldr	r0, [pc, #128]	; (800a730 <pbuf_remove_header+0x9c>)
 800a6ae:	f008 fd63 	bl	8013178 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d003      	beq.n	800a6c0 <pbuf_remove_header+0x2c>
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6be:	d301      	bcc.n	800a6c4 <pbuf_remove_header+0x30>
    return 1;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e02c      	b.n	800a71e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d101      	bne.n	800a6ce <pbuf_remove_header+0x3a>
    return 0;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	e027      	b.n	800a71e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	895b      	ldrh	r3, [r3, #10]
 800a6d6:	89fa      	ldrh	r2, [r7, #14]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d908      	bls.n	800a6ee <pbuf_remove_header+0x5a>
 800a6dc:	4b12      	ldr	r3, [pc, #72]	; (800a728 <pbuf_remove_header+0x94>)
 800a6de:	f240 2255 	movw	r2, #597	; 0x255
 800a6e2:	4914      	ldr	r1, [pc, #80]	; (800a734 <pbuf_remove_header+0xa0>)
 800a6e4:	4812      	ldr	r0, [pc, #72]	; (800a730 <pbuf_remove_header+0x9c>)
 800a6e6:	f008 fd47 	bl	8013178 <iprintf>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e017      	b.n	800a71e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	441a      	add	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	895a      	ldrh	r2, [r3, #10]
 800a704:	89fb      	ldrh	r3, [r7, #14]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	b29a      	uxth	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	891a      	ldrh	r2, [r3, #8]
 800a712:	89fb      	ldrh	r3, [r7, #14]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	b29a      	uxth	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	08014668 	.word	0x08014668
 800a72c:	080147cc 	.word	0x080147cc
 800a730:	080146c8 	.word	0x080146c8
 800a734:	080147d8 	.word	0x080147d8

0800a738 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	807b      	strh	r3, [r7, #2]
 800a744:	4613      	mov	r3, r2
 800a746:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a748:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	da08      	bge.n	800a762 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a750:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a754:	425b      	negs	r3, r3
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff ff9b 	bl	800a694 <pbuf_remove_header>
 800a75e:	4603      	mov	r3, r0
 800a760:	e007      	b.n	800a772 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a762:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a766:	787a      	ldrb	r2, [r7, #1]
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7ff ff1a 	bl	800a5a4 <pbuf_add_header_impl>
 800a770:	4603      	mov	r3, r0
  }
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b082      	sub	sp, #8
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	460b      	mov	r3, r1
 800a784:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a786:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a78a:	2201      	movs	r2, #1
 800a78c:	4619      	mov	r1, r3
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7ff ffd2 	bl	800a738 <pbuf_header_impl>
 800a794:	4603      	mov	r3, r0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
	...

0800a7a0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b088      	sub	sp, #32
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10b      	bne.n	800a7c6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d106      	bne.n	800a7c2 <pbuf_free+0x22>
 800a7b4:	4b3b      	ldr	r3, [pc, #236]	; (800a8a4 <pbuf_free+0x104>)
 800a7b6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a7ba:	493b      	ldr	r1, [pc, #236]	; (800a8a8 <pbuf_free+0x108>)
 800a7bc:	483b      	ldr	r0, [pc, #236]	; (800a8ac <pbuf_free+0x10c>)
 800a7be:	f008 fcdb 	bl	8013178 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e069      	b.n	800a89a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a7ca:	e062      	b.n	800a892 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800a7cc:	f008 fac6 	bl	8012d5c <sys_arch_protect>
 800a7d0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	7b9b      	ldrb	r3, [r3, #14]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d106      	bne.n	800a7e8 <pbuf_free+0x48>
 800a7da:	4b32      	ldr	r3, [pc, #200]	; (800a8a4 <pbuf_free+0x104>)
 800a7dc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a7e0:	4933      	ldr	r1, [pc, #204]	; (800a8b0 <pbuf_free+0x110>)
 800a7e2:	4832      	ldr	r0, [pc, #200]	; (800a8ac <pbuf_free+0x10c>)
 800a7e4:	f008 fcc8 	bl	8013178 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	7b9b      	ldrb	r3, [r3, #14]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	739a      	strb	r2, [r3, #14]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	7b9b      	ldrb	r3, [r3, #14]
 800a7f8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800a7fa:	69b8      	ldr	r0, [r7, #24]
 800a7fc:	f008 fabc 	bl	8012d78 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a800:	7dfb      	ldrb	r3, [r7, #23]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d143      	bne.n	800a88e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	7b1b      	ldrb	r3, [r3, #12]
 800a810:	f003 030f 	and.w	r3, r3, #15
 800a814:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	7b5b      	ldrb	r3, [r3, #13]
 800a81a:	f003 0302 	and.w	r3, r3, #2
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d011      	beq.n	800a846 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	691b      	ldr	r3, [r3, #16]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d106      	bne.n	800a83c <pbuf_free+0x9c>
 800a82e:	4b1d      	ldr	r3, [pc, #116]	; (800a8a4 <pbuf_free+0x104>)
 800a830:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a834:	491f      	ldr	r1, [pc, #124]	; (800a8b4 <pbuf_free+0x114>)
 800a836:	481d      	ldr	r0, [pc, #116]	; (800a8ac <pbuf_free+0x10c>)
 800a838:	f008 fc9e 	bl	8013178 <iprintf>
        pc->custom_free_function(p);
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	4798      	blx	r3
 800a844:	e01d      	b.n	800a882 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a846:	7bfb      	ldrb	r3, [r7, #15]
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d104      	bne.n	800a856 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800a84c:	6879      	ldr	r1, [r7, #4]
 800a84e:	200c      	movs	r0, #12
 800a850:	f7ff f966 	bl	8009b20 <memp_free>
 800a854:	e015      	b.n	800a882 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a856:	7bfb      	ldrb	r3, [r7, #15]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d104      	bne.n	800a866 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800a85c:	6879      	ldr	r1, [r7, #4]
 800a85e:	200b      	movs	r0, #11
 800a860:	f7ff f95e 	bl	8009b20 <memp_free>
 800a864:	e00d      	b.n	800a882 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a866:	7bfb      	ldrb	r3, [r7, #15]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d103      	bne.n	800a874 <pbuf_free+0xd4>
          mem_free(p);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7fe fde9 	bl	8009444 <mem_free>
 800a872:	e006      	b.n	800a882 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a874:	4b0b      	ldr	r3, [pc, #44]	; (800a8a4 <pbuf_free+0x104>)
 800a876:	f240 320f 	movw	r2, #783	; 0x30f
 800a87a:	490f      	ldr	r1, [pc, #60]	; (800a8b8 <pbuf_free+0x118>)
 800a87c:	480b      	ldr	r0, [pc, #44]	; (800a8ac <pbuf_free+0x10c>)
 800a87e:	f008 fc7b 	bl	8013178 <iprintf>
        }
      }
      count++;
 800a882:	7ffb      	ldrb	r3, [r7, #31]
 800a884:	3301      	adds	r3, #1
 800a886:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	607b      	str	r3, [r7, #4]
 800a88c:	e001      	b.n	800a892 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a88e:	2300      	movs	r3, #0
 800a890:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d199      	bne.n	800a7cc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a898:	7ffb      	ldrb	r3, [r7, #31]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3720      	adds	r7, #32
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	08014668 	.word	0x08014668
 800a8a8:	080147cc 	.word	0x080147cc
 800a8ac:	080146c8 	.word	0x080146c8
 800a8b0:	080147f8 	.word	0x080147f8
 800a8b4:	08014810 	.word	0x08014810
 800a8b8:	08014834 	.word	0x08014834

0800a8bc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a8c8:	e005      	b.n	800a8d6 <pbuf_clen+0x1a>
    ++len;
 800a8ca:	89fb      	ldrh	r3, [r7, #14]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1f6      	bne.n	800a8ca <pbuf_clen+0xe>
  }
  return len;
 800a8dc:	89fb      	ldrh	r3, [r7, #14]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
	...

0800a8ec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d016      	beq.n	800a928 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a8fa:	f008 fa2f 	bl	8012d5c <sys_arch_protect>
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	7b9b      	ldrb	r3, [r3, #14]
 800a904:	3301      	adds	r3, #1
 800a906:	b2da      	uxtb	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	739a      	strb	r2, [r3, #14]
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f008 fa33 	bl	8012d78 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	7b9b      	ldrb	r3, [r3, #14]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d106      	bne.n	800a928 <pbuf_ref+0x3c>
 800a91a:	4b05      	ldr	r3, [pc, #20]	; (800a930 <pbuf_ref+0x44>)
 800a91c:	f240 3242 	movw	r2, #834	; 0x342
 800a920:	4904      	ldr	r1, [pc, #16]	; (800a934 <pbuf_ref+0x48>)
 800a922:	4805      	ldr	r0, [pc, #20]	; (800a938 <pbuf_ref+0x4c>)
 800a924:	f008 fc28 	bl	8013178 <iprintf>
  }
}
 800a928:	bf00      	nop
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	08014668 	.word	0x08014668
 800a934:	08014848 	.word	0x08014848
 800a938:	080146c8 	.word	0x080146c8

0800a93c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <pbuf_cat+0x16>
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d107      	bne.n	800a962 <pbuf_cat+0x26>
 800a952:	4b20      	ldr	r3, [pc, #128]	; (800a9d4 <pbuf_cat+0x98>)
 800a954:	f240 3259 	movw	r2, #857	; 0x359
 800a958:	491f      	ldr	r1, [pc, #124]	; (800a9d8 <pbuf_cat+0x9c>)
 800a95a:	4820      	ldr	r0, [pc, #128]	; (800a9dc <pbuf_cat+0xa0>)
 800a95c:	f008 fc0c 	bl	8013178 <iprintf>
 800a960:	e034      	b.n	800a9cc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	e00a      	b.n	800a97e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	891a      	ldrh	r2, [r3, #8]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	891b      	ldrh	r3, [r3, #8]
 800a970:	4413      	add	r3, r2
 800a972:	b29a      	uxth	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	60fb      	str	r3, [r7, #12]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1f0      	bne.n	800a968 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	891a      	ldrh	r2, [r3, #8]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	895b      	ldrh	r3, [r3, #10]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d006      	beq.n	800a9a0 <pbuf_cat+0x64>
 800a992:	4b10      	ldr	r3, [pc, #64]	; (800a9d4 <pbuf_cat+0x98>)
 800a994:	f240 3262 	movw	r2, #866	; 0x362
 800a998:	4911      	ldr	r1, [pc, #68]	; (800a9e0 <pbuf_cat+0xa4>)
 800a99a:	4810      	ldr	r0, [pc, #64]	; (800a9dc <pbuf_cat+0xa0>)
 800a99c:	f008 fbec 	bl	8013178 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d006      	beq.n	800a9b6 <pbuf_cat+0x7a>
 800a9a8:	4b0a      	ldr	r3, [pc, #40]	; (800a9d4 <pbuf_cat+0x98>)
 800a9aa:	f240 3263 	movw	r2, #867	; 0x363
 800a9ae:	490d      	ldr	r1, [pc, #52]	; (800a9e4 <pbuf_cat+0xa8>)
 800a9b0:	480a      	ldr	r0, [pc, #40]	; (800a9dc <pbuf_cat+0xa0>)
 800a9b2:	f008 fbe1 	bl	8013178 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	891a      	ldrh	r2, [r3, #8]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	891b      	ldrh	r3, [r3, #8]
 800a9be:	4413      	add	r3, r2
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	08014668 	.word	0x08014668
 800a9d8:	0801485c 	.word	0x0801485c
 800a9dc:	080146c8 	.word	0x080146c8
 800a9e0:	08014894 	.word	0x08014894
 800a9e4:	080148c4 	.word	0x080148c4

0800a9e8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	617b      	str	r3, [r7, #20]
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d008      	beq.n	800aa12 <pbuf_copy+0x2a>
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d005      	beq.n	800aa12 <pbuf_copy+0x2a>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	891a      	ldrh	r2, [r3, #8]
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	891b      	ldrh	r3, [r3, #8]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d209      	bcs.n	800aa26 <pbuf_copy+0x3e>
 800aa12:	4b57      	ldr	r3, [pc, #348]	; (800ab70 <pbuf_copy+0x188>)
 800aa14:	f240 32c9 	movw	r2, #969	; 0x3c9
 800aa18:	4956      	ldr	r1, [pc, #344]	; (800ab74 <pbuf_copy+0x18c>)
 800aa1a:	4857      	ldr	r0, [pc, #348]	; (800ab78 <pbuf_copy+0x190>)
 800aa1c:	f008 fbac 	bl	8013178 <iprintf>
 800aa20:	f06f 030f 	mvn.w	r3, #15
 800aa24:	e09f      	b.n	800ab66 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	895b      	ldrh	r3, [r3, #10]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	1ad2      	subs	r2, r2, r3
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	895b      	ldrh	r3, [r3, #10]
 800aa34:	4619      	mov	r1, r3
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	1acb      	subs	r3, r1, r3
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d306      	bcc.n	800aa4c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	895b      	ldrh	r3, [r3, #10]
 800aa42:	461a      	mov	r2, r3
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	e005      	b.n	800aa58 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	895b      	ldrh	r3, [r3, #10]
 800aa50:	461a      	mov	r2, r3
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	18d0      	adds	r0, r2, r3
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685a      	ldr	r2, [r3, #4]
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	4413      	add	r3, r2
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	f008 fac4 	bl	8012ff8 <memcpy>
    offset_to += len;
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4413      	add	r3, r2
 800aa76:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800aa78:	693a      	ldr	r2, [r7, #16]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	895b      	ldrh	r3, [r3, #10]
 800aa84:	461a      	mov	r2, r3
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d906      	bls.n	800aa9a <pbuf_copy+0xb2>
 800aa8c:	4b38      	ldr	r3, [pc, #224]	; (800ab70 <pbuf_copy+0x188>)
 800aa8e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800aa92:	493a      	ldr	r1, [pc, #232]	; (800ab7c <pbuf_copy+0x194>)
 800aa94:	4838      	ldr	r0, [pc, #224]	; (800ab78 <pbuf_copy+0x190>)
 800aa96:	f008 fb6f 	bl	8013178 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	895b      	ldrh	r3, [r3, #10]
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d906      	bls.n	800aab4 <pbuf_copy+0xcc>
 800aaa6:	4b32      	ldr	r3, [pc, #200]	; (800ab70 <pbuf_copy+0x188>)
 800aaa8:	f240 32da 	movw	r2, #986	; 0x3da
 800aaac:	4934      	ldr	r1, [pc, #208]	; (800ab80 <pbuf_copy+0x198>)
 800aaae:	4832      	ldr	r0, [pc, #200]	; (800ab78 <pbuf_copy+0x190>)
 800aab0:	f008 fb62 	bl	8013178 <iprintf>
    if (offset_from >= p_from->len) {
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	895b      	ldrh	r3, [r3, #10]
 800aab8:	461a      	mov	r2, r3
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d304      	bcc.n	800aaca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800aac0:	2300      	movs	r3, #0
 800aac2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	895b      	ldrh	r3, [r3, #10]
 800aace:	461a      	mov	r2, r3
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d114      	bne.n	800ab00 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10c      	bne.n	800ab00 <pbuf_copy+0x118>
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d009      	beq.n	800ab00 <pbuf_copy+0x118>
 800aaec:	4b20      	ldr	r3, [pc, #128]	; (800ab70 <pbuf_copy+0x188>)
 800aaee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800aaf2:	4924      	ldr	r1, [pc, #144]	; (800ab84 <pbuf_copy+0x19c>)
 800aaf4:	4820      	ldr	r0, [pc, #128]	; (800ab78 <pbuf_copy+0x190>)
 800aaf6:	f008 fb3f 	bl	8013178 <iprintf>
 800aafa:	f06f 030f 	mvn.w	r3, #15
 800aafe:	e032      	b.n	800ab66 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d013      	beq.n	800ab2e <pbuf_copy+0x146>
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	895a      	ldrh	r2, [r3, #10]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	891b      	ldrh	r3, [r3, #8]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d10d      	bne.n	800ab2e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d009      	beq.n	800ab2e <pbuf_copy+0x146>
 800ab1a:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <pbuf_copy+0x188>)
 800ab1c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ab20:	4919      	ldr	r1, [pc, #100]	; (800ab88 <pbuf_copy+0x1a0>)
 800ab22:	4815      	ldr	r0, [pc, #84]	; (800ab78 <pbuf_copy+0x190>)
 800ab24:	f008 fb28 	bl	8013178 <iprintf>
 800ab28:	f06f 0305 	mvn.w	r3, #5
 800ab2c:	e01b      	b.n	800ab66 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d013      	beq.n	800ab5c <pbuf_copy+0x174>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	895a      	ldrh	r2, [r3, #10]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	891b      	ldrh	r3, [r3, #8]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d10d      	bne.n	800ab5c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d009      	beq.n	800ab5c <pbuf_copy+0x174>
 800ab48:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <pbuf_copy+0x188>)
 800ab4a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ab4e:	490e      	ldr	r1, [pc, #56]	; (800ab88 <pbuf_copy+0x1a0>)
 800ab50:	4809      	ldr	r0, [pc, #36]	; (800ab78 <pbuf_copy+0x190>)
 800ab52:	f008 fb11 	bl	8013178 <iprintf>
 800ab56:	f06f 0305 	mvn.w	r3, #5
 800ab5a:	e004      	b.n	800ab66 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f47f af61 	bne.w	800aa26 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	08014668 	.word	0x08014668
 800ab74:	08014910 	.word	0x08014910
 800ab78:	080146c8 	.word	0x080146c8
 800ab7c:	08014940 	.word	0x08014940
 800ab80:	08014958 	.word	0x08014958
 800ab84:	08014974 	.word	0x08014974
 800ab88:	08014984 	.word	0x08014984

0800ab8c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b088      	sub	sp, #32
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	4611      	mov	r1, r2
 800ab98:	461a      	mov	r2, r3
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	80fb      	strh	r3, [r7, #6]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800aba6:	2300      	movs	r3, #0
 800aba8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d108      	bne.n	800abc2 <pbuf_copy_partial+0x36>
 800abb0:	4b2b      	ldr	r3, [pc, #172]	; (800ac60 <pbuf_copy_partial+0xd4>)
 800abb2:	f240 420a 	movw	r2, #1034	; 0x40a
 800abb6:	492b      	ldr	r1, [pc, #172]	; (800ac64 <pbuf_copy_partial+0xd8>)
 800abb8:	482b      	ldr	r0, [pc, #172]	; (800ac68 <pbuf_copy_partial+0xdc>)
 800abba:	f008 fadd 	bl	8013178 <iprintf>
 800abbe:	2300      	movs	r3, #0
 800abc0:	e04a      	b.n	800ac58 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d108      	bne.n	800abda <pbuf_copy_partial+0x4e>
 800abc8:	4b25      	ldr	r3, [pc, #148]	; (800ac60 <pbuf_copy_partial+0xd4>)
 800abca:	f240 420b 	movw	r2, #1035	; 0x40b
 800abce:	4927      	ldr	r1, [pc, #156]	; (800ac6c <pbuf_copy_partial+0xe0>)
 800abd0:	4825      	ldr	r0, [pc, #148]	; (800ac68 <pbuf_copy_partial+0xdc>)
 800abd2:	f008 fad1 	bl	8013178 <iprintf>
 800abd6:	2300      	movs	r3, #0
 800abd8:	e03e      	b.n	800ac58 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	61fb      	str	r3, [r7, #28]
 800abde:	e034      	b.n	800ac4a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800abe0:	88bb      	ldrh	r3, [r7, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00a      	beq.n	800abfc <pbuf_copy_partial+0x70>
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	895b      	ldrh	r3, [r3, #10]
 800abea:	88ba      	ldrh	r2, [r7, #4]
 800abec:	429a      	cmp	r2, r3
 800abee:	d305      	bcc.n	800abfc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	895b      	ldrh	r3, [r3, #10]
 800abf4:	88ba      	ldrh	r2, [r7, #4]
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	80bb      	strh	r3, [r7, #4]
 800abfa:	e023      	b.n	800ac44 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	895a      	ldrh	r2, [r3, #10]
 800ac00:	88bb      	ldrh	r3, [r7, #4]
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ac06:	8b3a      	ldrh	r2, [r7, #24]
 800ac08:	88fb      	ldrh	r3, [r7, #6]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d901      	bls.n	800ac12 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ac0e:	88fb      	ldrh	r3, [r7, #6]
 800ac10:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ac12:	8b7b      	ldrh	r3, [r7, #26]
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	18d0      	adds	r0, r2, r3
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	685a      	ldr	r2, [r3, #4]
 800ac1c:	88bb      	ldrh	r3, [r7, #4]
 800ac1e:	4413      	add	r3, r2
 800ac20:	8b3a      	ldrh	r2, [r7, #24]
 800ac22:	4619      	mov	r1, r3
 800ac24:	f008 f9e8 	bl	8012ff8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ac28:	8afa      	ldrh	r2, [r7, #22]
 800ac2a:	8b3b      	ldrh	r3, [r7, #24]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ac30:	8b7a      	ldrh	r2, [r7, #26]
 800ac32:	8b3b      	ldrh	r3, [r7, #24]
 800ac34:	4413      	add	r3, r2
 800ac36:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ac38:	88fa      	ldrh	r2, [r7, #6]
 800ac3a:	8b3b      	ldrh	r3, [r7, #24]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	61fb      	str	r3, [r7, #28]
 800ac4a:	88fb      	ldrh	r3, [r7, #6]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <pbuf_copy_partial+0xca>
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1c4      	bne.n	800abe0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ac56:	8afb      	ldrh	r3, [r7, #22]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3720      	adds	r7, #32
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	08014668 	.word	0x08014668
 800ac64:	080149b0 	.word	0x080149b0
 800ac68:	080146c8 	.word	0x080146c8
 800ac6c:	080149d0 	.word	0x080149d0

0800ac70 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	4603      	mov	r3, r0
 800ac78:	603a      	str	r2, [r7, #0]
 800ac7a:	71fb      	strb	r3, [r7, #7]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	8919      	ldrh	r1, [r3, #8]
 800ac84:	88ba      	ldrh	r2, [r7, #4]
 800ac86:	79fb      	ldrb	r3, [r7, #7]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff faa5 	bl	800a1d8 <pbuf_alloc>
 800ac8e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d101      	bne.n	800ac9a <pbuf_clone+0x2a>
    return NULL;
 800ac96:	2300      	movs	r3, #0
 800ac98:	e011      	b.n	800acbe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f7ff fea3 	bl	800a9e8 <pbuf_copy>
 800aca2:	4603      	mov	r3, r0
 800aca4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800aca6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d006      	beq.n	800acbc <pbuf_clone+0x4c>
 800acae:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <pbuf_clone+0x58>)
 800acb0:	f240 5224 	movw	r2, #1316	; 0x524
 800acb4:	4905      	ldr	r1, [pc, #20]	; (800accc <pbuf_clone+0x5c>)
 800acb6:	4806      	ldr	r0, [pc, #24]	; (800acd0 <pbuf_clone+0x60>)
 800acb8:	f008 fa5e 	bl	8013178 <iprintf>
  return q;
 800acbc:	68fb      	ldr	r3, [r7, #12]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	08014668 	.word	0x08014668
 800accc:	08014adc 	.word	0x08014adc
 800acd0:	080146c8 	.word	0x080146c8

0800acd4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800acd8:	f008 fa66 	bl	80131a8 <rand>
 800acdc:	4603      	mov	r3, r0
 800acde:	b29b      	uxth	r3, r3
 800ace0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800acea:	b29a      	uxth	r2, r3
 800acec:	4b01      	ldr	r3, [pc, #4]	; (800acf4 <tcp_init+0x20>)
 800acee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800acf0:	bf00      	nop
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	20000010 	.word	0x20000010

0800acf8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	7d1b      	ldrb	r3, [r3, #20]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d105      	bne.n	800ad14 <tcp_free+0x1c>
 800ad08:	4b06      	ldr	r3, [pc, #24]	; (800ad24 <tcp_free+0x2c>)
 800ad0a:	22d4      	movs	r2, #212	; 0xd4
 800ad0c:	4906      	ldr	r1, [pc, #24]	; (800ad28 <tcp_free+0x30>)
 800ad0e:	4807      	ldr	r0, [pc, #28]	; (800ad2c <tcp_free+0x34>)
 800ad10:	f008 fa32 	bl	8013178 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	2001      	movs	r0, #1
 800ad18:	f7fe ff02 	bl	8009b20 <memp_free>
}
 800ad1c:	bf00      	nop
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	08014b68 	.word	0x08014b68
 800ad28:	08014b98 	.word	0x08014b98
 800ad2c:	08014bac 	.word	0x08014bac

0800ad30 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	7d1b      	ldrb	r3, [r3, #20]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d105      	bne.n	800ad4c <tcp_free_listen+0x1c>
 800ad40:	4b06      	ldr	r3, [pc, #24]	; (800ad5c <tcp_free_listen+0x2c>)
 800ad42:	22df      	movs	r2, #223	; 0xdf
 800ad44:	4906      	ldr	r1, [pc, #24]	; (800ad60 <tcp_free_listen+0x30>)
 800ad46:	4807      	ldr	r0, [pc, #28]	; (800ad64 <tcp_free_listen+0x34>)
 800ad48:	f008 fa16 	bl	8013178 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ad4c:	6879      	ldr	r1, [r7, #4]
 800ad4e:	2002      	movs	r0, #2
 800ad50:	f7fe fee6 	bl	8009b20 <memp_free>
}
 800ad54:	bf00      	nop
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	08014b68 	.word	0x08014b68
 800ad60:	08014bd4 	.word	0x08014bd4
 800ad64:	08014bac 	.word	0x08014bac

0800ad68 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ad6c:	f000 fea2 	bl	800bab4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ad70:	4b07      	ldr	r3, [pc, #28]	; (800ad90 <tcp_tmr+0x28>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	3301      	adds	r3, #1
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <tcp_tmr+0x28>)
 800ad7a:	701a      	strb	r2, [r3, #0]
 800ad7c:	4b04      	ldr	r3, [pc, #16]	; (800ad90 <tcp_tmr+0x28>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	f003 0301 	and.w	r3, r3, #1
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ad88:	f000 fb54 	bl	800b434 <tcp_slowtmr>
  }
}
 800ad8c:	bf00      	nop
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	20006841 	.word	0x20006841

0800ad94 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d105      	bne.n	800adb0 <tcp_remove_listener+0x1c>
 800ada4:	4b0d      	ldr	r3, [pc, #52]	; (800addc <tcp_remove_listener+0x48>)
 800ada6:	22ff      	movs	r2, #255	; 0xff
 800ada8:	490d      	ldr	r1, [pc, #52]	; (800ade0 <tcp_remove_listener+0x4c>)
 800adaa:	480e      	ldr	r0, [pc, #56]	; (800ade4 <tcp_remove_listener+0x50>)
 800adac:	f008 f9e4 	bl	8013178 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	e00a      	b.n	800adcc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d102      	bne.n	800adc6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	60fb      	str	r3, [r7, #12]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1f1      	bne.n	800adb6 <tcp_remove_listener+0x22>
    }
  }
}
 800add2:	bf00      	nop
 800add4:	bf00      	nop
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	08014b68 	.word	0x08014b68
 800ade0:	08014bf0 	.word	0x08014bf0
 800ade4:	08014bac 	.word	0x08014bac

0800ade8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d106      	bne.n	800ae04 <tcp_listen_closed+0x1c>
 800adf6:	4b14      	ldr	r3, [pc, #80]	; (800ae48 <tcp_listen_closed+0x60>)
 800adf8:	f240 1211 	movw	r2, #273	; 0x111
 800adfc:	4913      	ldr	r1, [pc, #76]	; (800ae4c <tcp_listen_closed+0x64>)
 800adfe:	4814      	ldr	r0, [pc, #80]	; (800ae50 <tcp_listen_closed+0x68>)
 800ae00:	f008 f9ba 	bl	8013178 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	7d1b      	ldrb	r3, [r3, #20]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d006      	beq.n	800ae1a <tcp_listen_closed+0x32>
 800ae0c:	4b0e      	ldr	r3, [pc, #56]	; (800ae48 <tcp_listen_closed+0x60>)
 800ae0e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ae12:	4910      	ldr	r1, [pc, #64]	; (800ae54 <tcp_listen_closed+0x6c>)
 800ae14:	480e      	ldr	r0, [pc, #56]	; (800ae50 <tcp_listen_closed+0x68>)
 800ae16:	f008 f9af 	bl	8013178 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	60fb      	str	r3, [r7, #12]
 800ae1e:	e00b      	b.n	800ae38 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ae20:	4a0d      	ldr	r2, [pc, #52]	; (800ae58 <tcp_listen_closed+0x70>)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	6879      	ldr	r1, [r7, #4]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7ff ffb1 	bl	800ad94 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	3301      	adds	r3, #1
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d9f0      	bls.n	800ae20 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ae3e:	bf00      	nop
 800ae40:	bf00      	nop
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	08014b68 	.word	0x08014b68
 800ae4c:	08014c18 	.word	0x08014c18
 800ae50:	08014bac 	.word	0x08014bac
 800ae54:	08014c24 	.word	0x08014c24
 800ae58:	08016b84 	.word	0x08016b84

0800ae5c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ae5c:	b5b0      	push	{r4, r5, r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af04      	add	r7, sp, #16
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d106      	bne.n	800ae7c <tcp_close_shutdown+0x20>
 800ae6e:	4b63      	ldr	r3, [pc, #396]	; (800affc <tcp_close_shutdown+0x1a0>)
 800ae70:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ae74:	4962      	ldr	r1, [pc, #392]	; (800b000 <tcp_close_shutdown+0x1a4>)
 800ae76:	4863      	ldr	r0, [pc, #396]	; (800b004 <tcp_close_shutdown+0x1a8>)
 800ae78:	f008 f97e 	bl	8013178 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ae7c:	78fb      	ldrb	r3, [r7, #3]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d066      	beq.n	800af50 <tcp_close_shutdown+0xf4>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	7d1b      	ldrb	r3, [r3, #20]
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	d003      	beq.n	800ae92 <tcp_close_shutdown+0x36>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	7d1b      	ldrb	r3, [r3, #20]
 800ae8e:	2b07      	cmp	r3, #7
 800ae90:	d15e      	bne.n	800af50 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d104      	bne.n	800aea4 <tcp_close_shutdown+0x48>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aea2:	d055      	beq.n	800af50 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	8b5b      	ldrh	r3, [r3, #26]
 800aea8:	f003 0310 	and.w	r3, r3, #16
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d106      	bne.n	800aebe <tcp_close_shutdown+0x62>
 800aeb0:	4b52      	ldr	r3, [pc, #328]	; (800affc <tcp_close_shutdown+0x1a0>)
 800aeb2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800aeb6:	4954      	ldr	r1, [pc, #336]	; (800b008 <tcp_close_shutdown+0x1ac>)
 800aeb8:	4852      	ldr	r0, [pc, #328]	; (800b004 <tcp_close_shutdown+0x1a8>)
 800aeba:	f008 f95d 	bl	8013178 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800aec6:	687d      	ldr	r5, [r7, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3304      	adds	r3, #4
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	8ad2      	ldrh	r2, [r2, #22]
 800aed0:	6879      	ldr	r1, [r7, #4]
 800aed2:	8b09      	ldrh	r1, [r1, #24]
 800aed4:	9102      	str	r1, [sp, #8]
 800aed6:	9201      	str	r2, [sp, #4]
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	462b      	mov	r3, r5
 800aedc:	4622      	mov	r2, r4
 800aede:	4601      	mov	r1, r0
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f004 fe8d 	bl	800fc00 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f001 f8c6 	bl	800c078 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800aeec:	4b47      	ldr	r3, [pc, #284]	; (800b00c <tcp_close_shutdown+0x1b0>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d105      	bne.n	800af02 <tcp_close_shutdown+0xa6>
 800aef6:	4b45      	ldr	r3, [pc, #276]	; (800b00c <tcp_close_shutdown+0x1b0>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	4a43      	ldr	r2, [pc, #268]	; (800b00c <tcp_close_shutdown+0x1b0>)
 800aefe:	6013      	str	r3, [r2, #0]
 800af00:	e013      	b.n	800af2a <tcp_close_shutdown+0xce>
 800af02:	4b42      	ldr	r3, [pc, #264]	; (800b00c <tcp_close_shutdown+0x1b0>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	60fb      	str	r3, [r7, #12]
 800af08:	e00c      	b.n	800af24 <tcp_close_shutdown+0xc8>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	429a      	cmp	r2, r3
 800af12:	d104      	bne.n	800af1e <tcp_close_shutdown+0xc2>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68da      	ldr	r2, [r3, #12]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	60da      	str	r2, [r3, #12]
 800af1c:	e005      	b.n	800af2a <tcp_close_shutdown+0xce>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	60fb      	str	r3, [r7, #12]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1ef      	bne.n	800af0a <tcp_close_shutdown+0xae>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	60da      	str	r2, [r3, #12]
 800af30:	4b37      	ldr	r3, [pc, #220]	; (800b010 <tcp_close_shutdown+0x1b4>)
 800af32:	2201      	movs	r2, #1
 800af34:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800af36:	4b37      	ldr	r3, [pc, #220]	; (800b014 <tcp_close_shutdown+0x1b8>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d102      	bne.n	800af46 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800af40:	f003 fd5a 	bl	800e9f8 <tcp_trigger_input_pcb_close>
 800af44:	e002      	b.n	800af4c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7ff fed6 	bl	800acf8 <tcp_free>
      }
      return ERR_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	e050      	b.n	800aff2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	7d1b      	ldrb	r3, [r3, #20]
 800af54:	2b02      	cmp	r3, #2
 800af56:	d03b      	beq.n	800afd0 <tcp_close_shutdown+0x174>
 800af58:	2b02      	cmp	r3, #2
 800af5a:	dc44      	bgt.n	800afe6 <tcp_close_shutdown+0x18a>
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <tcp_close_shutdown+0x10a>
 800af60:	2b01      	cmp	r3, #1
 800af62:	d02a      	beq.n	800afba <tcp_close_shutdown+0x15e>
 800af64:	e03f      	b.n	800afe6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	8adb      	ldrh	r3, [r3, #22]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d021      	beq.n	800afb2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800af6e:	4b2a      	ldr	r3, [pc, #168]	; (800b018 <tcp_close_shutdown+0x1bc>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	429a      	cmp	r2, r3
 800af76:	d105      	bne.n	800af84 <tcp_close_shutdown+0x128>
 800af78:	4b27      	ldr	r3, [pc, #156]	; (800b018 <tcp_close_shutdown+0x1bc>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	4a26      	ldr	r2, [pc, #152]	; (800b018 <tcp_close_shutdown+0x1bc>)
 800af80:	6013      	str	r3, [r2, #0]
 800af82:	e013      	b.n	800afac <tcp_close_shutdown+0x150>
 800af84:	4b24      	ldr	r3, [pc, #144]	; (800b018 <tcp_close_shutdown+0x1bc>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	60bb      	str	r3, [r7, #8]
 800af8a:	e00c      	b.n	800afa6 <tcp_close_shutdown+0x14a>
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	429a      	cmp	r2, r3
 800af94:	d104      	bne.n	800afa0 <tcp_close_shutdown+0x144>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	68da      	ldr	r2, [r3, #12]
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	60da      	str	r2, [r3, #12]
 800af9e:	e005      	b.n	800afac <tcp_close_shutdown+0x150>
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	60bb      	str	r3, [r7, #8]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1ef      	bne.n	800af8c <tcp_close_shutdown+0x130>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7ff fea0 	bl	800acf8 <tcp_free>
      break;
 800afb8:	e01a      	b.n	800aff0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7ff ff14 	bl	800ade8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800afc0:	6879      	ldr	r1, [r7, #4]
 800afc2:	4816      	ldr	r0, [pc, #88]	; (800b01c <tcp_close_shutdown+0x1c0>)
 800afc4:	f001 f8a8 	bl	800c118 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff feb1 	bl	800ad30 <tcp_free_listen>
      break;
 800afce:	e00f      	b.n	800aff0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800afd0:	6879      	ldr	r1, [r7, #4]
 800afd2:	480e      	ldr	r0, [pc, #56]	; (800b00c <tcp_close_shutdown+0x1b0>)
 800afd4:	f001 f8a0 	bl	800c118 <tcp_pcb_remove>
 800afd8:	4b0d      	ldr	r3, [pc, #52]	; (800b010 <tcp_close_shutdown+0x1b4>)
 800afda:	2201      	movs	r2, #1
 800afdc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f7ff fe8a 	bl	800acf8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800afe4:	e004      	b.n	800aff0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f81a 	bl	800b020 <tcp_close_shutdown_fin>
 800afec:	4603      	mov	r3, r0
 800afee:	e000      	b.n	800aff2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bdb0      	pop	{r4, r5, r7, pc}
 800affa:	bf00      	nop
 800affc:	08014b68 	.word	0x08014b68
 800b000:	08014c3c 	.word	0x08014c3c
 800b004:	08014bac 	.word	0x08014bac
 800b008:	08014c5c 	.word	0x08014c5c
 800b00c:	2000d3e8 	.word	0x2000d3e8
 800b010:	2000d3e4 	.word	0x2000d3e4
 800b014:	2000d3fc 	.word	0x2000d3fc
 800b018:	2000d3f4 	.word	0x2000d3f4
 800b01c:	2000d3f0 	.word	0x2000d3f0

0800b020 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <tcp_close_shutdown_fin+0x1c>
 800b02e:	4b2e      	ldr	r3, [pc, #184]	; (800b0e8 <tcp_close_shutdown_fin+0xc8>)
 800b030:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b034:	492d      	ldr	r1, [pc, #180]	; (800b0ec <tcp_close_shutdown_fin+0xcc>)
 800b036:	482e      	ldr	r0, [pc, #184]	; (800b0f0 <tcp_close_shutdown_fin+0xd0>)
 800b038:	f008 f89e 	bl	8013178 <iprintf>

  switch (pcb->state) {
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	7d1b      	ldrb	r3, [r3, #20]
 800b040:	2b07      	cmp	r3, #7
 800b042:	d020      	beq.n	800b086 <tcp_close_shutdown_fin+0x66>
 800b044:	2b07      	cmp	r3, #7
 800b046:	dc2b      	bgt.n	800b0a0 <tcp_close_shutdown_fin+0x80>
 800b048:	2b03      	cmp	r3, #3
 800b04a:	d002      	beq.n	800b052 <tcp_close_shutdown_fin+0x32>
 800b04c:	2b04      	cmp	r3, #4
 800b04e:	d00d      	beq.n	800b06c <tcp_close_shutdown_fin+0x4c>
 800b050:	e026      	b.n	800b0a0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f003 fee2 	bl	800ee1c <tcp_send_fin>
 800b058:	4603      	mov	r3, r0
 800b05a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b05c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d11f      	bne.n	800b0a4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2205      	movs	r2, #5
 800b068:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b06a:	e01b      	b.n	800b0a4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f003 fed5 	bl	800ee1c <tcp_send_fin>
 800b072:	4603      	mov	r3, r0
 800b074:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d114      	bne.n	800b0a8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2205      	movs	r2, #5
 800b082:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b084:	e010      	b.n	800b0a8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f003 fec8 	bl	800ee1c <tcp_send_fin>
 800b08c:	4603      	mov	r3, r0
 800b08e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d109      	bne.n	800b0ac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2209      	movs	r2, #9
 800b09c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b09e:	e005      	b.n	800b0ac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e01c      	b.n	800b0de <tcp_close_shutdown_fin+0xbe>
      break;
 800b0a4:	bf00      	nop
 800b0a6:	e002      	b.n	800b0ae <tcp_close_shutdown_fin+0x8e>
      break;
 800b0a8:	bf00      	nop
 800b0aa:	e000      	b.n	800b0ae <tcp_close_shutdown_fin+0x8e>
      break;
 800b0ac:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d103      	bne.n	800b0be <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f003 ffee 	bl	800f098 <tcp_output>
 800b0bc:	e00d      	b.n	800b0da <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b0be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c6:	d108      	bne.n	800b0da <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	8b5b      	ldrh	r3, [r3, #26]
 800b0cc:	f043 0308 	orr.w	r3, r3, #8
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	e001      	b.n	800b0de <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b0da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	08014b68 	.word	0x08014b68
 800b0ec:	08014c18 	.word	0x08014c18
 800b0f0:	08014bac 	.word	0x08014bac

0800b0f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d109      	bne.n	800b116 <tcp_close+0x22>
 800b102:	4b0f      	ldr	r3, [pc, #60]	; (800b140 <tcp_close+0x4c>)
 800b104:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b108:	490e      	ldr	r1, [pc, #56]	; (800b144 <tcp_close+0x50>)
 800b10a:	480f      	ldr	r0, [pc, #60]	; (800b148 <tcp_close+0x54>)
 800b10c:	f008 f834 	bl	8013178 <iprintf>
 800b110:	f06f 030f 	mvn.w	r3, #15
 800b114:	e00f      	b.n	800b136 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	7d1b      	ldrb	r3, [r3, #20]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d006      	beq.n	800b12c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	8b5b      	ldrh	r3, [r3, #26]
 800b122:	f043 0310 	orr.w	r3, r3, #16
 800b126:	b29a      	uxth	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b12c:	2101      	movs	r1, #1
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f7ff fe94 	bl	800ae5c <tcp_close_shutdown>
 800b134:	4603      	mov	r3, r0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	08014b68 	.word	0x08014b68
 800b144:	08014c78 	.word	0x08014c78
 800b148:	08014bac 	.word	0x08014bac

0800b14c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08e      	sub	sp, #56	; 0x38
 800b150:	af04      	add	r7, sp, #16
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d107      	bne.n	800b16c <tcp_abandon+0x20>
 800b15c:	4b52      	ldr	r3, [pc, #328]	; (800b2a8 <tcp_abandon+0x15c>)
 800b15e:	f240 223d 	movw	r2, #573	; 0x23d
 800b162:	4952      	ldr	r1, [pc, #328]	; (800b2ac <tcp_abandon+0x160>)
 800b164:	4852      	ldr	r0, [pc, #328]	; (800b2b0 <tcp_abandon+0x164>)
 800b166:	f008 f807 	bl	8013178 <iprintf>
 800b16a:	e099      	b.n	800b2a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	7d1b      	ldrb	r3, [r3, #20]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d106      	bne.n	800b182 <tcp_abandon+0x36>
 800b174:	4b4c      	ldr	r3, [pc, #304]	; (800b2a8 <tcp_abandon+0x15c>)
 800b176:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b17a:	494e      	ldr	r1, [pc, #312]	; (800b2b4 <tcp_abandon+0x168>)
 800b17c:	484c      	ldr	r0, [pc, #304]	; (800b2b0 <tcp_abandon+0x164>)
 800b17e:	f007 fffb 	bl	8013178 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	7d1b      	ldrb	r3, [r3, #20]
 800b186:	2b0a      	cmp	r3, #10
 800b188:	d107      	bne.n	800b19a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b18a:	6879      	ldr	r1, [r7, #4]
 800b18c:	484a      	ldr	r0, [pc, #296]	; (800b2b8 <tcp_abandon+0x16c>)
 800b18e:	f000 ffc3 	bl	800c118 <tcp_pcb_remove>
    tcp_free(pcb);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7ff fdb0 	bl	800acf8 <tcp_free>
 800b198:	e082      	b.n	800b2a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b19a:	2300      	movs	r3, #0
 800b19c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	7d1b      	ldrb	r3, [r3, #20]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d126      	bne.n	800b212 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	8adb      	ldrh	r3, [r3, #22]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d02e      	beq.n	800b22a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b1cc:	4b3b      	ldr	r3, [pc, #236]	; (800b2bc <tcp_abandon+0x170>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d105      	bne.n	800b1e2 <tcp_abandon+0x96>
 800b1d6:	4b39      	ldr	r3, [pc, #228]	; (800b2bc <tcp_abandon+0x170>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	4a37      	ldr	r2, [pc, #220]	; (800b2bc <tcp_abandon+0x170>)
 800b1de:	6013      	str	r3, [r2, #0]
 800b1e0:	e013      	b.n	800b20a <tcp_abandon+0xbe>
 800b1e2:	4b36      	ldr	r3, [pc, #216]	; (800b2bc <tcp_abandon+0x170>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	61fb      	str	r3, [r7, #28]
 800b1e8:	e00c      	b.n	800b204 <tcp_abandon+0xb8>
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d104      	bne.n	800b1fe <tcp_abandon+0xb2>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	68da      	ldr	r2, [r3, #12]
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	60da      	str	r2, [r3, #12]
 800b1fc:	e005      	b.n	800b20a <tcp_abandon+0xbe>
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	61fb      	str	r3, [r7, #28]
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1ef      	bne.n	800b1ea <tcp_abandon+0x9e>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	60da      	str	r2, [r3, #12]
 800b210:	e00b      	b.n	800b22a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	8adb      	ldrh	r3, [r3, #22]
 800b21a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b21c:	6879      	ldr	r1, [r7, #4]
 800b21e:	4828      	ldr	r0, [pc, #160]	; (800b2c0 <tcp_abandon+0x174>)
 800b220:	f000 ff7a 	bl	800c118 <tcp_pcb_remove>
 800b224:	4b27      	ldr	r3, [pc, #156]	; (800b2c4 <tcp_abandon+0x178>)
 800b226:	2201      	movs	r2, #1
 800b228:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d004      	beq.n	800b23c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b236:	4618      	mov	r0, r3
 800b238:	f000 fd1c 	bl	800bc74 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b240:	2b00      	cmp	r3, #0
 800b242:	d004      	beq.n	800b24e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 fd13 	bl	800bc74 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b252:	2b00      	cmp	r3, #0
 800b254:	d004      	beq.n	800b260 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 fd0a 	bl	800bc74 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00e      	beq.n	800b284 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b266:	6879      	ldr	r1, [r7, #4]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3304      	adds	r3, #4
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	8b12      	ldrh	r2, [r2, #24]
 800b270:	9202      	str	r2, [sp, #8]
 800b272:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b274:	9201      	str	r2, [sp, #4]
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	460b      	mov	r3, r1
 800b27a:	697a      	ldr	r2, [r7, #20]
 800b27c:	69b9      	ldr	r1, [r7, #24]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f004 fcbe 	bl	800fc00 <tcp_rst>
    }
    last_state = pcb->state;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	7d1b      	ldrb	r3, [r3, #20]
 800b288:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f7ff fd34 	bl	800acf8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d004      	beq.n	800b2a0 <tcp_abandon+0x154>
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	f06f 010c 	mvn.w	r1, #12
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	4798      	blx	r3
  }
}
 800b2a0:	3728      	adds	r7, #40	; 0x28
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	08014b68 	.word	0x08014b68
 800b2ac:	08014cac 	.word	0x08014cac
 800b2b0:	08014bac 	.word	0x08014bac
 800b2b4:	08014cc8 	.word	0x08014cc8
 800b2b8:	2000d3f8 	.word	0x2000d3f8
 800b2bc:	2000d3f4 	.word	0x2000d3f4
 800b2c0:	2000d3e8 	.word	0x2000d3e8
 800b2c4:	2000d3e4 	.word	0x2000d3e4

0800b2c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b2d0:	2101      	movs	r1, #1
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f7ff ff3a 	bl	800b14c <tcp_abandon>
}
 800b2d8:	bf00      	nop
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d106      	bne.n	800b2fc <tcp_update_rcv_ann_wnd+0x1c>
 800b2ee:	4b25      	ldr	r3, [pc, #148]	; (800b384 <tcp_update_rcv_ann_wnd+0xa4>)
 800b2f0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b2f4:	4924      	ldr	r1, [pc, #144]	; (800b388 <tcp_update_rcv_ann_wnd+0xa8>)
 800b2f6:	4825      	ldr	r0, [pc, #148]	; (800b38c <tcp_update_rcv_ann_wnd+0xac>)
 800b2f8:	f007 ff3e 	bl	8013178 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b304:	4413      	add	r3, r2
 800b306:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b310:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b314:	bf28      	it	cs
 800b316:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b31a:	b292      	uxth	r2, r2
 800b31c:	4413      	add	r3, r2
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	db08      	blt.n	800b338 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	1ad3      	subs	r3, r2, r3
 800b336:	e020      	b.n	800b37a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	dd03      	ble.n	800b34e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b34c:	e014      	b.n	800b378 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b360:	d306      	bcc.n	800b370 <tcp_update_rcv_ann_wnd+0x90>
 800b362:	4b08      	ldr	r3, [pc, #32]	; (800b384 <tcp_update_rcv_ann_wnd+0xa4>)
 800b364:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b368:	4909      	ldr	r1, [pc, #36]	; (800b390 <tcp_update_rcv_ann_wnd+0xb0>)
 800b36a:	4808      	ldr	r0, [pc, #32]	; (800b38c <tcp_update_rcv_ann_wnd+0xac>)
 800b36c:	f007 ff04 	bl	8013178 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	b29a      	uxth	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b378:	2300      	movs	r3, #0
  }
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	08014b68 	.word	0x08014b68
 800b388:	08014dc4 	.word	0x08014dc4
 800b38c:	08014bac 	.word	0x08014bac
 800b390:	08014de8 	.word	0x08014de8

0800b394 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d107      	bne.n	800b3b6 <tcp_recved+0x22>
 800b3a6:	4b1f      	ldr	r3, [pc, #124]	; (800b424 <tcp_recved+0x90>)
 800b3a8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b3ac:	491e      	ldr	r1, [pc, #120]	; (800b428 <tcp_recved+0x94>)
 800b3ae:	481f      	ldr	r0, [pc, #124]	; (800b42c <tcp_recved+0x98>)
 800b3b0:	f007 fee2 	bl	8013178 <iprintf>
 800b3b4:	e032      	b.n	800b41c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	7d1b      	ldrb	r3, [r3, #20]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d106      	bne.n	800b3cc <tcp_recved+0x38>
 800b3be:	4b19      	ldr	r3, [pc, #100]	; (800b424 <tcp_recved+0x90>)
 800b3c0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b3c4:	491a      	ldr	r1, [pc, #104]	; (800b430 <tcp_recved+0x9c>)
 800b3c6:	4819      	ldr	r0, [pc, #100]	; (800b42c <tcp_recved+0x98>)
 800b3c8:	f007 fed6 	bl	8013178 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b3d0:	887b      	ldrh	r3, [r7, #2]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b3d6:	89fb      	ldrh	r3, [r7, #14]
 800b3d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b3dc:	d804      	bhi.n	800b3e8 <tcp_recved+0x54>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3e2:	89fa      	ldrh	r2, [r7, #14]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d204      	bcs.n	800b3f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b3ee:	851a      	strh	r2, [r3, #40]	; 0x28
 800b3f0:	e002      	b.n	800b3f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	89fa      	ldrh	r2, [r7, #14]
 800b3f6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f7ff ff71 	bl	800b2e0 <tcp_update_rcv_ann_wnd>
 800b3fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b406:	d309      	bcc.n	800b41c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	8b5b      	ldrh	r3, [r3, #26]
 800b40c:	f043 0302 	orr.w	r3, r3, #2
 800b410:	b29a      	uxth	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f003 fe3e 	bl	800f098 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	08014b68 	.word	0x08014b68
 800b428:	08014e04 	.word	0x08014e04
 800b42c:	08014bac 	.word	0x08014bac
 800b430:	08014e1c 	.word	0x08014e1c

0800b434 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b434:	b5b0      	push	{r4, r5, r7, lr}
 800b436:	b090      	sub	sp, #64	; 0x40
 800b438:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b440:	4b94      	ldr	r3, [pc, #592]	; (800b694 <tcp_slowtmr+0x260>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3301      	adds	r3, #1
 800b446:	4a93      	ldr	r2, [pc, #588]	; (800b694 <tcp_slowtmr+0x260>)
 800b448:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b44a:	4b93      	ldr	r3, [pc, #588]	; (800b698 <tcp_slowtmr+0x264>)
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	3301      	adds	r3, #1
 800b450:	b2da      	uxtb	r2, r3
 800b452:	4b91      	ldr	r3, [pc, #580]	; (800b698 <tcp_slowtmr+0x264>)
 800b454:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b456:	2300      	movs	r3, #0
 800b458:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b45a:	4b90      	ldr	r3, [pc, #576]	; (800b69c <tcp_slowtmr+0x268>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b460:	e29f      	b.n	800b9a2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b464:	7d1b      	ldrb	r3, [r3, #20]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d106      	bne.n	800b478 <tcp_slowtmr+0x44>
 800b46a:	4b8d      	ldr	r3, [pc, #564]	; (800b6a0 <tcp_slowtmr+0x26c>)
 800b46c:	f240 42be 	movw	r2, #1214	; 0x4be
 800b470:	498c      	ldr	r1, [pc, #560]	; (800b6a4 <tcp_slowtmr+0x270>)
 800b472:	488d      	ldr	r0, [pc, #564]	; (800b6a8 <tcp_slowtmr+0x274>)
 800b474:	f007 fe80 	bl	8013178 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47a:	7d1b      	ldrb	r3, [r3, #20]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d106      	bne.n	800b48e <tcp_slowtmr+0x5a>
 800b480:	4b87      	ldr	r3, [pc, #540]	; (800b6a0 <tcp_slowtmr+0x26c>)
 800b482:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b486:	4989      	ldr	r1, [pc, #548]	; (800b6ac <tcp_slowtmr+0x278>)
 800b488:	4887      	ldr	r0, [pc, #540]	; (800b6a8 <tcp_slowtmr+0x274>)
 800b48a:	f007 fe75 	bl	8013178 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b490:	7d1b      	ldrb	r3, [r3, #20]
 800b492:	2b0a      	cmp	r3, #10
 800b494:	d106      	bne.n	800b4a4 <tcp_slowtmr+0x70>
 800b496:	4b82      	ldr	r3, [pc, #520]	; (800b6a0 <tcp_slowtmr+0x26c>)
 800b498:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b49c:	4984      	ldr	r1, [pc, #528]	; (800b6b0 <tcp_slowtmr+0x27c>)
 800b49e:	4882      	ldr	r0, [pc, #520]	; (800b6a8 <tcp_slowtmr+0x274>)
 800b4a0:	f007 fe6a 	bl	8013178 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	7f9a      	ldrb	r2, [r3, #30]
 800b4a8:	4b7b      	ldr	r3, [pc, #492]	; (800b698 <tcp_slowtmr+0x264>)
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d105      	bne.n	800b4bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b4ba:	e272      	b.n	800b9a2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b4bc:	4b76      	ldr	r3, [pc, #472]	; (800b698 <tcp_slowtmr+0x264>)
 800b4be:	781a      	ldrb	r2, [r3, #0]
 800b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d2:	7d1b      	ldrb	r3, [r3, #20]
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d10a      	bne.n	800b4ee <tcp_slowtmr+0xba>
 800b4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4de:	2b05      	cmp	r3, #5
 800b4e0:	d905      	bls.n	800b4ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b4e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4ec:	e11e      	b.n	800b72c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4f4:	2b0b      	cmp	r3, #11
 800b4f6:	d905      	bls.n	800b504 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b502:	e113      	b.n	800b72c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b506:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d075      	beq.n	800b5fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b512:	2b00      	cmp	r3, #0
 800b514:	d006      	beq.n	800b524 <tcp_slowtmr+0xf0>
 800b516:	4b62      	ldr	r3, [pc, #392]	; (800b6a0 <tcp_slowtmr+0x26c>)
 800b518:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b51c:	4965      	ldr	r1, [pc, #404]	; (800b6b4 <tcp_slowtmr+0x280>)
 800b51e:	4862      	ldr	r0, [pc, #392]	; (800b6a8 <tcp_slowtmr+0x274>)
 800b520:	f007 fe2a 	bl	8013178 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d106      	bne.n	800b53a <tcp_slowtmr+0x106>
 800b52c:	4b5c      	ldr	r3, [pc, #368]	; (800b6a0 <tcp_slowtmr+0x26c>)
 800b52e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b532:	4961      	ldr	r1, [pc, #388]	; (800b6b8 <tcp_slowtmr+0x284>)
 800b534:	485c      	ldr	r0, [pc, #368]	; (800b6a8 <tcp_slowtmr+0x274>)
 800b536:	f007 fe1f 	bl	8013178 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b540:	2b0b      	cmp	r3, #11
 800b542:	d905      	bls.n	800b550 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b548:	3301      	adds	r3, #1
 800b54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b54e:	e0ed      	b.n	800b72c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b552:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b556:	3b01      	subs	r3, #1
 800b558:	4a58      	ldr	r2, [pc, #352]	; (800b6bc <tcp_slowtmr+0x288>)
 800b55a:	5cd3      	ldrb	r3, [r2, r3]
 800b55c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b560:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b564:	7c7a      	ldrb	r2, [r7, #17]
 800b566:	429a      	cmp	r2, r3
 800b568:	d907      	bls.n	800b57a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b570:	3301      	adds	r3, #1
 800b572:	b2da      	uxtb	r2, r3
 800b574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b576:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b580:	7c7a      	ldrb	r2, [r7, #17]
 800b582:	429a      	cmp	r2, r3
 800b584:	f200 80d2 	bhi.w	800b72c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b588:	2301      	movs	r3, #1
 800b58a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b592:	2b00      	cmp	r3, #0
 800b594:	d108      	bne.n	800b5a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b598:	f004 fc26 	bl	800fde8 <tcp_zero_window_probe>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d014      	beq.n	800b5cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	623b      	str	r3, [r7, #32]
 800b5a6:	e011      	b.n	800b5cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5b2:	f003 faeb 	bl	800eb8c <tcp_split_unsent_seg>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d107      	bne.n	800b5cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b5bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5be:	f003 fd6b 	bl	800f098 <tcp_output>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d101      	bne.n	800b5cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 80ac 	beq.w	800b72c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b5e2:	2b06      	cmp	r3, #6
 800b5e4:	f200 80a2 	bhi.w	800b72c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b5f8:	e098      	b.n	800b72c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b600:	2b00      	cmp	r3, #0
 800b602:	db0f      	blt.n	800b624 <tcp_slowtmr+0x1f0>
 800b604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b606:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b60a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b60e:	4293      	cmp	r3, r2
 800b610:	d008      	beq.n	800b624 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b614:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b618:	b29b      	uxth	r3, r3
 800b61a:	3301      	adds	r3, #1
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	b21a      	sxth	r2, r3
 800b620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b622:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b626:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b630:	429a      	cmp	r2, r3
 800b632:	db7b      	blt.n	800b72c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b634:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b636:	f004 f821 	bl	800f67c <tcp_rexmit_rto_prepare>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d007      	beq.n	800b650 <tcp_slowtmr+0x21c>
 800b640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b644:	2b00      	cmp	r3, #0
 800b646:	d171      	bne.n	800b72c <tcp_slowtmr+0x2f8>
 800b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d06d      	beq.n	800b72c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b652:	7d1b      	ldrb	r3, [r3, #20]
 800b654:	2b02      	cmp	r3, #2
 800b656:	d03a      	beq.n	800b6ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b65e:	2b0c      	cmp	r3, #12
 800b660:	bf28      	it	cs
 800b662:	230c      	movcs	r3, #12
 800b664:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b668:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b66c:	10db      	asrs	r3, r3, #3
 800b66e:	b21b      	sxth	r3, r3
 800b670:	461a      	mov	r2, r3
 800b672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b674:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b678:	4413      	add	r3, r2
 800b67a:	7efa      	ldrb	r2, [r7, #27]
 800b67c:	4910      	ldr	r1, [pc, #64]	; (800b6c0 <tcp_slowtmr+0x28c>)
 800b67e:	5c8a      	ldrb	r2, [r1, r2]
 800b680:	4093      	lsls	r3, r2
 800b682:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b68a:	4293      	cmp	r3, r2
 800b68c:	dc1a      	bgt.n	800b6c4 <tcp_slowtmr+0x290>
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	b21a      	sxth	r2, r3
 800b692:	e019      	b.n	800b6c8 <tcp_slowtmr+0x294>
 800b694:	2000d3ec 	.word	0x2000d3ec
 800b698:	20006842 	.word	0x20006842
 800b69c:	2000d3e8 	.word	0x2000d3e8
 800b6a0:	08014b68 	.word	0x08014b68
 800b6a4:	08014eac 	.word	0x08014eac
 800b6a8:	08014bac 	.word	0x08014bac
 800b6ac:	08014ed8 	.word	0x08014ed8
 800b6b0:	08014f04 	.word	0x08014f04
 800b6b4:	08014f34 	.word	0x08014f34
 800b6b8:	08014f68 	.word	0x08014f68
 800b6bc:	08016b7c 	.word	0x08016b7c
 800b6c0:	08016b6c 	.word	0x08016b6c
 800b6c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	bf28      	it	cs
 800b6e4:	4613      	movcs	r3, r2
 800b6e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b6e8:	8a7b      	ldrh	r3, [r7, #18]
 800b6ea:	085b      	lsrs	r3, r3, #1
 800b6ec:	b29a      	uxth	r2, r3
 800b6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6fe:	005b      	lsls	r3, r3, #1
 800b700:	b29b      	uxth	r3, r3
 800b702:	429a      	cmp	r2, r3
 800b704:	d206      	bcs.n	800b714 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b70a:	005b      	lsls	r3, r3, #1
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b710:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b716:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b720:	2200      	movs	r2, #0
 800b722:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b728:	f004 f818 	bl	800f75c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72e:	7d1b      	ldrb	r3, [r3, #20]
 800b730:	2b06      	cmp	r3, #6
 800b732:	d111      	bne.n	800b758 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b736:	8b5b      	ldrh	r3, [r3, #26]
 800b738:	f003 0310 	and.w	r3, r3, #16
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00b      	beq.n	800b758 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b740:	4b9d      	ldr	r3, [pc, #628]	; (800b9b8 <tcp_slowtmr+0x584>)
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	2b28      	cmp	r3, #40	; 0x28
 800b74c:	d904      	bls.n	800b758 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b74e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b752:	3301      	adds	r3, #1
 800b754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75a:	7a5b      	ldrb	r3, [r3, #9]
 800b75c:	f003 0308 	and.w	r3, r3, #8
 800b760:	2b00      	cmp	r3, #0
 800b762:	d04c      	beq.n	800b7fe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b766:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b768:	2b04      	cmp	r3, #4
 800b76a:	d003      	beq.n	800b774 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b770:	2b07      	cmp	r3, #7
 800b772:	d144      	bne.n	800b7fe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b774:	4b90      	ldr	r3, [pc, #576]	; (800b9b8 <tcp_slowtmr+0x584>)
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77a:	6a1b      	ldr	r3, [r3, #32]
 800b77c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b784:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b788:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b78c:	498b      	ldr	r1, [pc, #556]	; (800b9bc <tcp_slowtmr+0x588>)
 800b78e:	fba1 1303 	umull	r1, r3, r1, r3
 800b792:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b794:	429a      	cmp	r2, r3
 800b796:	d90a      	bls.n	800b7ae <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b79c:	3301      	adds	r3, #1
 800b79e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b7a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b7ac:	e027      	b.n	800b7fe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7ae:	4b82      	ldr	r3, [pc, #520]	; (800b9b8 <tcp_slowtmr+0x584>)
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b4:	6a1b      	ldr	r3, [r3, #32]
 800b7b6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	4b7e      	ldr	r3, [pc, #504]	; (800b9c0 <tcp_slowtmr+0x58c>)
 800b7c8:	fb03 f300 	mul.w	r3, r3, r0
 800b7cc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b7ce:	497b      	ldr	r1, [pc, #492]	; (800b9bc <tcp_slowtmr+0x588>)
 800b7d0:	fba1 1303 	umull	r1, r3, r1, r3
 800b7d4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d911      	bls.n	800b7fe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b7da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7dc:	f004 fac4 	bl	800fd68 <tcp_keepalive>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b7e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d107      	bne.n	800b7fe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b802:	2b00      	cmp	r3, #0
 800b804:	d011      	beq.n	800b82a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b806:	4b6c      	ldr	r3, [pc, #432]	; (800b9b8 <tcp_slowtmr+0x584>)
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	1ad2      	subs	r2, r2, r3
 800b810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b812:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b816:	4619      	mov	r1, r3
 800b818:	460b      	mov	r3, r1
 800b81a:	005b      	lsls	r3, r3, #1
 800b81c:	440b      	add	r3, r1
 800b81e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b820:	429a      	cmp	r2, r3
 800b822:	d302      	bcc.n	800b82a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b824:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b826:	f000 fddb 	bl	800c3e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82c:	7d1b      	ldrb	r3, [r3, #20]
 800b82e:	2b03      	cmp	r3, #3
 800b830:	d10b      	bne.n	800b84a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b832:	4b61      	ldr	r3, [pc, #388]	; (800b9b8 <tcp_slowtmr+0x584>)
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	2b28      	cmp	r3, #40	; 0x28
 800b83e:	d904      	bls.n	800b84a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b844:	3301      	adds	r3, #1
 800b846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84c:	7d1b      	ldrb	r3, [r3, #20]
 800b84e:	2b09      	cmp	r3, #9
 800b850:	d10b      	bne.n	800b86a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b852:	4b59      	ldr	r3, [pc, #356]	; (800b9b8 <tcp_slowtmr+0x584>)
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	2bf0      	cmp	r3, #240	; 0xf0
 800b85e:	d904      	bls.n	800b86a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b864:	3301      	adds	r3, #1
 800b866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b86a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d060      	beq.n	800b934 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b878:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b87a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b87c:	f000 fbfc 	bl	800c078 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	2b00      	cmp	r3, #0
 800b884:	d010      	beq.n	800b8a8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b886:	4b4f      	ldr	r3, [pc, #316]	; (800b9c4 <tcp_slowtmr+0x590>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d106      	bne.n	800b89e <tcp_slowtmr+0x46a>
 800b890:	4b4d      	ldr	r3, [pc, #308]	; (800b9c8 <tcp_slowtmr+0x594>)
 800b892:	f240 526d 	movw	r2, #1389	; 0x56d
 800b896:	494d      	ldr	r1, [pc, #308]	; (800b9cc <tcp_slowtmr+0x598>)
 800b898:	484d      	ldr	r0, [pc, #308]	; (800b9d0 <tcp_slowtmr+0x59c>)
 800b89a:	f007 fc6d 	bl	8013178 <iprintf>
        prev->next = pcb->next;
 800b89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a0:	68da      	ldr	r2, [r3, #12]
 800b8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a4:	60da      	str	r2, [r3, #12]
 800b8a6:	e00f      	b.n	800b8c8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b8a8:	4b46      	ldr	r3, [pc, #280]	; (800b9c4 <tcp_slowtmr+0x590>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d006      	beq.n	800b8c0 <tcp_slowtmr+0x48c>
 800b8b2:	4b45      	ldr	r3, [pc, #276]	; (800b9c8 <tcp_slowtmr+0x594>)
 800b8b4:	f240 5271 	movw	r2, #1393	; 0x571
 800b8b8:	4946      	ldr	r1, [pc, #280]	; (800b9d4 <tcp_slowtmr+0x5a0>)
 800b8ba:	4845      	ldr	r0, [pc, #276]	; (800b9d0 <tcp_slowtmr+0x59c>)
 800b8bc:	f007 fc5c 	bl	8013178 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	4a3f      	ldr	r2, [pc, #252]	; (800b9c4 <tcp_slowtmr+0x590>)
 800b8c6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b8c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d013      	beq.n	800b8f8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b8d8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8dc:	3304      	adds	r3, #4
 800b8de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8e0:	8ad2      	ldrh	r2, [r2, #22]
 800b8e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8e4:	8b09      	ldrh	r1, [r1, #24]
 800b8e6:	9102      	str	r1, [sp, #8]
 800b8e8:	9201      	str	r2, [sp, #4]
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	462b      	mov	r3, r5
 800b8ee:	4622      	mov	r2, r4
 800b8f0:	4601      	mov	r1, r0
 800b8f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8f4:	f004 f984 	bl	800fc00 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b900:	7d1b      	ldrb	r3, [r3, #20]
 800b902:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b906:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b90e:	6838      	ldr	r0, [r7, #0]
 800b910:	f7ff f9f2 	bl	800acf8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b914:	4b30      	ldr	r3, [pc, #192]	; (800b9d8 <tcp_slowtmr+0x5a4>)
 800b916:	2200      	movs	r2, #0
 800b918:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d004      	beq.n	800b92a <tcp_slowtmr+0x4f6>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f06f 010c 	mvn.w	r1, #12
 800b926:	68b8      	ldr	r0, [r7, #8]
 800b928:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b92a:	4b2b      	ldr	r3, [pc, #172]	; (800b9d8 <tcp_slowtmr+0x5a4>)
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d037      	beq.n	800b9a2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b932:	e590      	b.n	800b456 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b936:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b940:	7f1b      	ldrb	r3, [r3, #28]
 800b942:	3301      	adds	r3, #1
 800b944:	b2da      	uxtb	r2, r3
 800b946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b948:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94c:	7f1a      	ldrb	r2, [r3, #28]
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	7f5b      	ldrb	r3, [r3, #29]
 800b952:	429a      	cmp	r2, r3
 800b954:	d325      	bcc.n	800b9a2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b958:	2200      	movs	r2, #0
 800b95a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b95c:	4b1e      	ldr	r3, [pc, #120]	; (800b9d8 <tcp_slowtmr+0x5a4>)
 800b95e:	2200      	movs	r2, #0
 800b960:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00b      	beq.n	800b984 <tcp_slowtmr+0x550>
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b974:	6912      	ldr	r2, [r2, #16]
 800b976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b978:	4610      	mov	r0, r2
 800b97a:	4798      	blx	r3
 800b97c:	4603      	mov	r3, r0
 800b97e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b982:	e002      	b.n	800b98a <tcp_slowtmr+0x556>
 800b984:	2300      	movs	r3, #0
 800b986:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b98a:	4b13      	ldr	r3, [pc, #76]	; (800b9d8 <tcp_slowtmr+0x5a4>)
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d000      	beq.n	800b994 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b992:	e560      	b.n	800b456 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b994:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d102      	bne.n	800b9a2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b99c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b99e:	f003 fb7b 	bl	800f098 <tcp_output>
  while (pcb != NULL) {
 800b9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f47f ad5c 	bne.w	800b462 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b9ae:	4b0b      	ldr	r3, [pc, #44]	; (800b9dc <tcp_slowtmr+0x5a8>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b9b4:	e067      	b.n	800ba86 <tcp_slowtmr+0x652>
 800b9b6:	bf00      	nop
 800b9b8:	2000d3ec 	.word	0x2000d3ec
 800b9bc:	10624dd3 	.word	0x10624dd3
 800b9c0:	000124f8 	.word	0x000124f8
 800b9c4:	2000d3e8 	.word	0x2000d3e8
 800b9c8:	08014b68 	.word	0x08014b68
 800b9cc:	08014fa0 	.word	0x08014fa0
 800b9d0:	08014bac 	.word	0x08014bac
 800b9d4:	08014fcc 	.word	0x08014fcc
 800b9d8:	2000d3e4 	.word	0x2000d3e4
 800b9dc:	2000d3f8 	.word	0x2000d3f8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e2:	7d1b      	ldrb	r3, [r3, #20]
 800b9e4:	2b0a      	cmp	r3, #10
 800b9e6:	d006      	beq.n	800b9f6 <tcp_slowtmr+0x5c2>
 800b9e8:	4b2b      	ldr	r3, [pc, #172]	; (800ba98 <tcp_slowtmr+0x664>)
 800b9ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b9ee:	492b      	ldr	r1, [pc, #172]	; (800ba9c <tcp_slowtmr+0x668>)
 800b9f0:	482b      	ldr	r0, [pc, #172]	; (800baa0 <tcp_slowtmr+0x66c>)
 800b9f2:	f007 fbc1 	bl	8013178 <iprintf>
    pcb_remove = 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b9fc:	4b29      	ldr	r3, [pc, #164]	; (800baa4 <tcp_slowtmr+0x670>)
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba02:	6a1b      	ldr	r3, [r3, #32]
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	2bf0      	cmp	r3, #240	; 0xf0
 800ba08:	d904      	bls.n	800ba14 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ba0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba0e:	3301      	adds	r3, #1
 800ba10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ba14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d02f      	beq.n	800ba7c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ba1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba1e:	f000 fb2b 	bl	800c078 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ba22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d010      	beq.n	800ba4a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ba28:	4b1f      	ldr	r3, [pc, #124]	; (800baa8 <tcp_slowtmr+0x674>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d106      	bne.n	800ba40 <tcp_slowtmr+0x60c>
 800ba32:	4b19      	ldr	r3, [pc, #100]	; (800ba98 <tcp_slowtmr+0x664>)
 800ba34:	f240 52af 	movw	r2, #1455	; 0x5af
 800ba38:	491c      	ldr	r1, [pc, #112]	; (800baac <tcp_slowtmr+0x678>)
 800ba3a:	4819      	ldr	r0, [pc, #100]	; (800baa0 <tcp_slowtmr+0x66c>)
 800ba3c:	f007 fb9c 	bl	8013178 <iprintf>
        prev->next = pcb->next;
 800ba40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba42:	68da      	ldr	r2, [r3, #12]
 800ba44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba46:	60da      	str	r2, [r3, #12]
 800ba48:	e00f      	b.n	800ba6a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ba4a:	4b17      	ldr	r3, [pc, #92]	; (800baa8 <tcp_slowtmr+0x674>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d006      	beq.n	800ba62 <tcp_slowtmr+0x62e>
 800ba54:	4b10      	ldr	r3, [pc, #64]	; (800ba98 <tcp_slowtmr+0x664>)
 800ba56:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ba5a:	4915      	ldr	r1, [pc, #84]	; (800bab0 <tcp_slowtmr+0x67c>)
 800ba5c:	4810      	ldr	r0, [pc, #64]	; (800baa0 <tcp_slowtmr+0x66c>)
 800ba5e:	f007 fb8b 	bl	8013178 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ba62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	4a10      	ldr	r2, [pc, #64]	; (800baa8 <tcp_slowtmr+0x674>)
 800ba68:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ba6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ba6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ba74:	69f8      	ldr	r0, [r7, #28]
 800ba76:	f7ff f93f 	bl	800acf8 <tcp_free>
 800ba7a:	e004      	b.n	800ba86 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ba7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ba80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ba86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1a9      	bne.n	800b9e0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ba8c:	bf00      	nop
 800ba8e:	bf00      	nop
 800ba90:	3730      	adds	r7, #48	; 0x30
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bdb0      	pop	{r4, r5, r7, pc}
 800ba96:	bf00      	nop
 800ba98:	08014b68 	.word	0x08014b68
 800ba9c:	08014ff8 	.word	0x08014ff8
 800baa0:	08014bac 	.word	0x08014bac
 800baa4:	2000d3ec 	.word	0x2000d3ec
 800baa8:	2000d3f8 	.word	0x2000d3f8
 800baac:	08015028 	.word	0x08015028
 800bab0:	08015050 	.word	0x08015050

0800bab4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800baba:	4b2d      	ldr	r3, [pc, #180]	; (800bb70 <tcp_fasttmr+0xbc>)
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	3301      	adds	r3, #1
 800bac0:	b2da      	uxtb	r2, r3
 800bac2:	4b2b      	ldr	r3, [pc, #172]	; (800bb70 <tcp_fasttmr+0xbc>)
 800bac4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bac6:	4b2b      	ldr	r3, [pc, #172]	; (800bb74 <tcp_fasttmr+0xc0>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bacc:	e048      	b.n	800bb60 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	7f9a      	ldrb	r2, [r3, #30]
 800bad2:	4b27      	ldr	r3, [pc, #156]	; (800bb70 <tcp_fasttmr+0xbc>)
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d03f      	beq.n	800bb5a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bada:	4b25      	ldr	r3, [pc, #148]	; (800bb70 <tcp_fasttmr+0xbc>)
 800badc:	781a      	ldrb	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	8b5b      	ldrh	r3, [r3, #26]
 800bae6:	f003 0301 	and.w	r3, r3, #1
 800baea:	2b00      	cmp	r3, #0
 800baec:	d010      	beq.n	800bb10 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	8b5b      	ldrh	r3, [r3, #26]
 800baf2:	f043 0302 	orr.w	r3, r3, #2
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f003 facb 	bl	800f098 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	8b5b      	ldrh	r3, [r3, #26]
 800bb06:	f023 0303 	bic.w	r3, r3, #3
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	8b5b      	ldrh	r3, [r3, #26]
 800bb14:	f003 0308 	and.w	r3, r3, #8
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d009      	beq.n	800bb30 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	8b5b      	ldrh	r3, [r3, #26]
 800bb20:	f023 0308 	bic.w	r3, r3, #8
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7ff fa78 	bl	800b020 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00a      	beq.n	800bb54 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bb3e:	4b0e      	ldr	r3, [pc, #56]	; (800bb78 <tcp_fasttmr+0xc4>)
 800bb40:	2200      	movs	r2, #0
 800bb42:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f819 	bl	800bb7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bb4a:	4b0b      	ldr	r3, [pc, #44]	; (800bb78 <tcp_fasttmr+0xc4>)
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d000      	beq.n	800bb54 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bb52:	e7b8      	b.n	800bac6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	607b      	str	r3, [r7, #4]
 800bb58:	e002      	b.n	800bb60 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1b3      	bne.n	800bace <tcp_fasttmr+0x1a>
    }
  }
}
 800bb66:	bf00      	nop
 800bb68:	bf00      	nop
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	20006842 	.word	0x20006842
 800bb74:	2000d3e8 	.word	0x2000d3e8
 800bb78:	2000d3e4 	.word	0x2000d3e4

0800bb7c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bb7c:	b590      	push	{r4, r7, lr}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d109      	bne.n	800bb9e <tcp_process_refused_data+0x22>
 800bb8a:	4b37      	ldr	r3, [pc, #220]	; (800bc68 <tcp_process_refused_data+0xec>)
 800bb8c:	f240 6209 	movw	r2, #1545	; 0x609
 800bb90:	4936      	ldr	r1, [pc, #216]	; (800bc6c <tcp_process_refused_data+0xf0>)
 800bb92:	4837      	ldr	r0, [pc, #220]	; (800bc70 <tcp_process_refused_data+0xf4>)
 800bb94:	f007 faf0 	bl	8013178 <iprintf>
 800bb98:	f06f 030f 	mvn.w	r3, #15
 800bb9c:	e060      	b.n	800bc60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bba2:	7b5b      	ldrb	r3, [r3, #13]
 800bba4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbaa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00b      	beq.n	800bbd4 <tcp_process_refused_data+0x58>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6918      	ldr	r0, [r3, #16]
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	6879      	ldr	r1, [r7, #4]
 800bbcc:	47a0      	blx	r4
 800bbce:	4603      	mov	r3, r0
 800bbd0:	73fb      	strb	r3, [r7, #15]
 800bbd2:	e007      	b.n	800bbe4 <tcp_process_refused_data+0x68>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	6879      	ldr	r1, [r7, #4]
 800bbda:	2000      	movs	r0, #0
 800bbdc:	f000 f8a4 	bl	800bd28 <tcp_recv_null>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bbe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d12a      	bne.n	800bc42 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bbec:	7bbb      	ldrb	r3, [r7, #14]
 800bbee:	f003 0320 	and.w	r3, r3, #32
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d033      	beq.n	800bc5e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbfa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bbfe:	d005      	beq.n	800bc0c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc04:	3301      	adds	r3, #1
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00b      	beq.n	800bc2e <tcp_process_refused_data+0xb2>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6918      	ldr	r0, [r3, #16]
 800bc20:	2300      	movs	r3, #0
 800bc22:	2200      	movs	r2, #0
 800bc24:	6879      	ldr	r1, [r7, #4]
 800bc26:	47a0      	blx	r4
 800bc28:	4603      	mov	r3, r0
 800bc2a:	73fb      	strb	r3, [r7, #15]
 800bc2c:	e001      	b.n	800bc32 <tcp_process_refused_data+0xb6>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bc32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc36:	f113 0f0d 	cmn.w	r3, #13
 800bc3a:	d110      	bne.n	800bc5e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bc3c:	f06f 030c 	mvn.w	r3, #12
 800bc40:	e00e      	b.n	800bc60 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bc42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc46:	f113 0f0d 	cmn.w	r3, #13
 800bc4a:	d102      	bne.n	800bc52 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800bc4c:	f06f 030c 	mvn.w	r3, #12
 800bc50:	e006      	b.n	800bc60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bc58:	f06f 0304 	mvn.w	r3, #4
 800bc5c:	e000      	b.n	800bc60 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd90      	pop	{r4, r7, pc}
 800bc68:	08014b68 	.word	0x08014b68
 800bc6c:	08015078 	.word	0x08015078
 800bc70:	08014bac 	.word	0x08014bac

0800bc74 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800bc7c:	e007      	b.n	800bc8e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 f80a 	bl	800bc9e <tcp_seg_free>
    seg = next;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1f4      	bne.n	800bc7e <tcp_segs_free+0xa>
  }
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b082      	sub	sp, #8
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00c      	beq.n	800bcc6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d004      	beq.n	800bcbe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7fe fd71 	bl	800a7a0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800bcbe:	6879      	ldr	r1, [r7, #4]
 800bcc0:	2003      	movs	r0, #3
 800bcc2:	f7fd ff2d 	bl	8009b20 <memp_free>
  }
}
 800bcc6:	bf00      	nop
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
	...

0800bcd0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d106      	bne.n	800bcec <tcp_seg_copy+0x1c>
 800bcde:	4b0f      	ldr	r3, [pc, #60]	; (800bd1c <tcp_seg_copy+0x4c>)
 800bce0:	f240 6282 	movw	r2, #1666	; 0x682
 800bce4:	490e      	ldr	r1, [pc, #56]	; (800bd20 <tcp_seg_copy+0x50>)
 800bce6:	480f      	ldr	r0, [pc, #60]	; (800bd24 <tcp_seg_copy+0x54>)
 800bce8:	f007 fa46 	bl	8013178 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bcec:	2003      	movs	r0, #3
 800bcee:	f7fd fec5 	bl	8009a7c <memp_malloc>
 800bcf2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d101      	bne.n	800bcfe <tcp_seg_copy+0x2e>
    return NULL;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	e00a      	b.n	800bd14 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800bcfe:	2210      	movs	r2, #16
 800bd00:	6879      	ldr	r1, [r7, #4]
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f007 f978 	bl	8012ff8 <memcpy>
  pbuf_ref(cseg->p);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fe fded 	bl	800a8ec <pbuf_ref>
  return cseg;
 800bd12:	68fb      	ldr	r3, [r7, #12]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	08014b68 	.word	0x08014b68
 800bd20:	080150bc 	.word	0x080150bc
 800bd24:	08014bac 	.word	0x08014bac

0800bd28 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
 800bd34:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d109      	bne.n	800bd50 <tcp_recv_null+0x28>
 800bd3c:	4b12      	ldr	r3, [pc, #72]	; (800bd88 <tcp_recv_null+0x60>)
 800bd3e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bd42:	4912      	ldr	r1, [pc, #72]	; (800bd8c <tcp_recv_null+0x64>)
 800bd44:	4812      	ldr	r0, [pc, #72]	; (800bd90 <tcp_recv_null+0x68>)
 800bd46:	f007 fa17 	bl	8013178 <iprintf>
 800bd4a:	f06f 030f 	mvn.w	r3, #15
 800bd4e:	e016      	b.n	800bd7e <tcp_recv_null+0x56>

  if (p != NULL) {
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d009      	beq.n	800bd6a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	891b      	ldrh	r3, [r3, #8]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	68b8      	ldr	r0, [r7, #8]
 800bd5e:	f7ff fb19 	bl	800b394 <tcp_recved>
    pbuf_free(p);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7fe fd1c 	bl	800a7a0 <pbuf_free>
 800bd68:	e008      	b.n	800bd7c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800bd6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d104      	bne.n	800bd7c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800bd72:	68b8      	ldr	r0, [r7, #8]
 800bd74:	f7ff f9be 	bl	800b0f4 <tcp_close>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	e000      	b.n	800bd7e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	08014b68 	.word	0x08014b68
 800bd8c:	080150d8 	.word	0x080150d8
 800bd90:	08014bac 	.word	0x08014bac

0800bd94 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bd9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	db01      	blt.n	800bdaa <tcp_kill_prio+0x16>
 800bda6:	79fb      	ldrb	r3, [r7, #7]
 800bda8:	e000      	b.n	800bdac <tcp_kill_prio+0x18>
 800bdaa:	237f      	movs	r3, #127	; 0x7f
 800bdac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800bdae:	7afb      	ldrb	r3, [r7, #11]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d034      	beq.n	800be1e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800bdb4:	7afb      	ldrb	r3, [r7, #11]
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bdc2:	4b19      	ldr	r3, [pc, #100]	; (800be28 <tcp_kill_prio+0x94>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	e01f      	b.n	800be0a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	7d5b      	ldrb	r3, [r3, #21]
 800bdce:	7afa      	ldrb	r2, [r7, #11]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d80c      	bhi.n	800bdee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800bdd8:	7afa      	ldrb	r2, [r7, #11]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d112      	bne.n	800be04 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bdde:	4b13      	ldr	r3, [pc, #76]	; (800be2c <tcp_kill_prio+0x98>)
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d80a      	bhi.n	800be04 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800bdee:	4b0f      	ldr	r3, [pc, #60]	; (800be2c <tcp_kill_prio+0x98>)
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	7d5b      	ldrb	r3, [r3, #21]
 800be02:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	617b      	str	r3, [r7, #20]
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1dc      	bne.n	800bdca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d004      	beq.n	800be20 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800be16:	6938      	ldr	r0, [r7, #16]
 800be18:	f7ff fa56 	bl	800b2c8 <tcp_abort>
 800be1c:	e000      	b.n	800be20 <tcp_kill_prio+0x8c>
    return;
 800be1e:	bf00      	nop
  }
}
 800be20:	3718      	adds	r7, #24
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	2000d3e8 	.word	0x2000d3e8
 800be2c:	2000d3ec 	.word	0x2000d3ec

0800be30 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	4603      	mov	r3, r0
 800be38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800be3a:	79fb      	ldrb	r3, [r7, #7]
 800be3c:	2b08      	cmp	r3, #8
 800be3e:	d009      	beq.n	800be54 <tcp_kill_state+0x24>
 800be40:	79fb      	ldrb	r3, [r7, #7]
 800be42:	2b09      	cmp	r3, #9
 800be44:	d006      	beq.n	800be54 <tcp_kill_state+0x24>
 800be46:	4b1a      	ldr	r3, [pc, #104]	; (800beb0 <tcp_kill_state+0x80>)
 800be48:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800be4c:	4919      	ldr	r1, [pc, #100]	; (800beb4 <tcp_kill_state+0x84>)
 800be4e:	481a      	ldr	r0, [pc, #104]	; (800beb8 <tcp_kill_state+0x88>)
 800be50:	f007 f992 	bl	8013178 <iprintf>

  inactivity = 0;
 800be54:	2300      	movs	r3, #0
 800be56:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800be58:	2300      	movs	r3, #0
 800be5a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be5c:	4b17      	ldr	r3, [pc, #92]	; (800bebc <tcp_kill_state+0x8c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	617b      	str	r3, [r7, #20]
 800be62:	e017      	b.n	800be94 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	7d1b      	ldrb	r3, [r3, #20]
 800be68:	79fa      	ldrb	r2, [r7, #7]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d10f      	bne.n	800be8e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800be6e:	4b14      	ldr	r3, [pc, #80]	; (800bec0 <tcp_kill_state+0x90>)
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	6a1b      	ldr	r3, [r3, #32]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d807      	bhi.n	800be8e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800be7e:	4b10      	ldr	r3, [pc, #64]	; (800bec0 <tcp_kill_state+0x90>)
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	6a1b      	ldr	r3, [r3, #32]
 800be86:	1ad3      	subs	r3, r2, r3
 800be88:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	617b      	str	r3, [r7, #20]
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1e4      	bne.n	800be64 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d003      	beq.n	800bea8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bea0:	2100      	movs	r1, #0
 800bea2:	6938      	ldr	r0, [r7, #16]
 800bea4:	f7ff f952 	bl	800b14c <tcp_abandon>
  }
}
 800bea8:	bf00      	nop
 800beaa:	3718      	adds	r7, #24
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	08014b68 	.word	0x08014b68
 800beb4:	080150f4 	.word	0x080150f4
 800beb8:	08014bac 	.word	0x08014bac
 800bebc:	2000d3e8 	.word	0x2000d3e8
 800bec0:	2000d3ec 	.word	0x2000d3ec

0800bec4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800beca:	2300      	movs	r3, #0
 800becc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bece:	2300      	movs	r3, #0
 800bed0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bed2:	4b12      	ldr	r3, [pc, #72]	; (800bf1c <tcp_kill_timewait+0x58>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	60fb      	str	r3, [r7, #12]
 800bed8:	e012      	b.n	800bf00 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800beda:	4b11      	ldr	r3, [pc, #68]	; (800bf20 <tcp_kill_timewait+0x5c>)
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6a1b      	ldr	r3, [r3, #32]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d807      	bhi.n	800befa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800beea:	4b0d      	ldr	r3, [pc, #52]	; (800bf20 <tcp_kill_timewait+0x5c>)
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	6a1b      	ldr	r3, [r3, #32]
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	60fb      	str	r3, [r7, #12]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1e9      	bne.n	800beda <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d002      	beq.n	800bf12 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bf0c:	68b8      	ldr	r0, [r7, #8]
 800bf0e:	f7ff f9db 	bl	800b2c8 <tcp_abort>
  }
}
 800bf12:	bf00      	nop
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	2000d3f8 	.word	0x2000d3f8
 800bf20:	2000d3ec 	.word	0x2000d3ec

0800bf24 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bf2a:	4b10      	ldr	r3, [pc, #64]	; (800bf6c <tcp_handle_closepend+0x48>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bf30:	e014      	b.n	800bf5c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	8b5b      	ldrh	r3, [r3, #26]
 800bf3c:	f003 0308 	and.w	r3, r3, #8
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d009      	beq.n	800bf58 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	8b5b      	ldrh	r3, [r3, #26]
 800bf48:	f023 0308 	bic.w	r3, r3, #8
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7ff f864 	bl	800b020 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1e7      	bne.n	800bf32 <tcp_handle_closepend+0xe>
  }
}
 800bf62:	bf00      	nop
 800bf64:	bf00      	nop
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	2000d3e8 	.word	0x2000d3e8

0800bf70 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	4603      	mov	r3, r0
 800bf78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bf7a:	2001      	movs	r0, #1
 800bf7c:	f7fd fd7e 	bl	8009a7c <memp_malloc>
 800bf80:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d126      	bne.n	800bfd6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bf88:	f7ff ffcc 	bl	800bf24 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bf8c:	f7ff ff9a 	bl	800bec4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bf90:	2001      	movs	r0, #1
 800bf92:	f7fd fd73 	bl	8009a7c <memp_malloc>
 800bf96:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d11b      	bne.n	800bfd6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bf9e:	2009      	movs	r0, #9
 800bfa0:	f7ff ff46 	bl	800be30 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bfa4:	2001      	movs	r0, #1
 800bfa6:	f7fd fd69 	bl	8009a7c <memp_malloc>
 800bfaa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d111      	bne.n	800bfd6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bfb2:	2008      	movs	r0, #8
 800bfb4:	f7ff ff3c 	bl	800be30 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bfb8:	2001      	movs	r0, #1
 800bfba:	f7fd fd5f 	bl	8009a7c <memp_malloc>
 800bfbe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d107      	bne.n	800bfd6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bfc6:	79fb      	ldrb	r3, [r7, #7]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7ff fee3 	bl	800bd94 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bfce:	2001      	movs	r0, #1
 800bfd0:	f7fd fd54 	bl	8009a7c <memp_malloc>
 800bfd4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d03f      	beq.n	800c05c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bfdc:	229c      	movs	r2, #156	; 0x9c
 800bfde:	2100      	movs	r1, #0
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f007 f817 	bl	8013014 <memset>
    pcb->prio = prio;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	79fa      	ldrb	r2, [r7, #7]
 800bfea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bff2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bffc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	22ff      	movs	r2, #255	; 0xff
 800c00a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c012:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2206      	movs	r2, #6
 800c018:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2206      	movs	r2, #6
 800c020:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c028:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2201      	movs	r2, #1
 800c02e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c032:	4b0d      	ldr	r3, [pc, #52]	; (800c068 <tcp_alloc+0xf8>)
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c03a:	4b0c      	ldr	r3, [pc, #48]	; (800c06c <tcp_alloc+0xfc>)
 800c03c:	781a      	ldrb	r2, [r3, #0]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c048:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4a08      	ldr	r2, [pc, #32]	; (800c070 <tcp_alloc+0x100>)
 800c050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	4a07      	ldr	r2, [pc, #28]	; (800c074 <tcp_alloc+0x104>)
 800c058:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c05c:	68fb      	ldr	r3, [r7, #12]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	2000d3ec 	.word	0x2000d3ec
 800c06c:	20006842 	.word	0x20006842
 800c070:	0800bd29 	.word	0x0800bd29
 800c074:	006ddd00 	.word	0x006ddd00

0800c078 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d107      	bne.n	800c096 <tcp_pcb_purge+0x1e>
 800c086:	4b21      	ldr	r3, [pc, #132]	; (800c10c <tcp_pcb_purge+0x94>)
 800c088:	f640 0251 	movw	r2, #2129	; 0x851
 800c08c:	4920      	ldr	r1, [pc, #128]	; (800c110 <tcp_pcb_purge+0x98>)
 800c08e:	4821      	ldr	r0, [pc, #132]	; (800c114 <tcp_pcb_purge+0x9c>)
 800c090:	f007 f872 	bl	8013178 <iprintf>
 800c094:	e037      	b.n	800c106 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	7d1b      	ldrb	r3, [r3, #20]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d033      	beq.n	800c106 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c0a2:	2b0a      	cmp	r3, #10
 800c0a4:	d02f      	beq.n	800c106 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d02b      	beq.n	800c106 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d007      	beq.n	800c0c6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fe fb70 	bl	800a7a0 <pbuf_free>
      pcb->refused_data = NULL;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d002      	beq.n	800c0d4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 f986 	bl	800c3e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0da:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7ff fdc7 	bl	800bc74 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7ff fdc2 	bl	800bc74 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	66da      	str	r2, [r3, #108]	; 0x6c
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	08014b68 	.word	0x08014b68
 800c110:	080151b4 	.word	0x080151b4
 800c114:	08014bac 	.word	0x08014bac

0800c118 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d106      	bne.n	800c136 <tcp_pcb_remove+0x1e>
 800c128:	4b3e      	ldr	r3, [pc, #248]	; (800c224 <tcp_pcb_remove+0x10c>)
 800c12a:	f640 0283 	movw	r2, #2179	; 0x883
 800c12e:	493e      	ldr	r1, [pc, #248]	; (800c228 <tcp_pcb_remove+0x110>)
 800c130:	483e      	ldr	r0, [pc, #248]	; (800c22c <tcp_pcb_remove+0x114>)
 800c132:	f007 f821 	bl	8013178 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d106      	bne.n	800c14a <tcp_pcb_remove+0x32>
 800c13c:	4b39      	ldr	r3, [pc, #228]	; (800c224 <tcp_pcb_remove+0x10c>)
 800c13e:	f640 0284 	movw	r2, #2180	; 0x884
 800c142:	493b      	ldr	r1, [pc, #236]	; (800c230 <tcp_pcb_remove+0x118>)
 800c144:	4839      	ldr	r0, [pc, #228]	; (800c22c <tcp_pcb_remove+0x114>)
 800c146:	f007 f817 	bl	8013178 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	429a      	cmp	r2, r3
 800c152:	d105      	bne.n	800c160 <tcp_pcb_remove+0x48>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68da      	ldr	r2, [r3, #12]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	601a      	str	r2, [r3, #0]
 800c15e:	e013      	b.n	800c188 <tcp_pcb_remove+0x70>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	e00c      	b.n	800c182 <tcp_pcb_remove+0x6a>
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	683a      	ldr	r2, [r7, #0]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d104      	bne.n	800c17c <tcp_pcb_remove+0x64>
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	68da      	ldr	r2, [r3, #12]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	60da      	str	r2, [r3, #12]
 800c17a:	e005      	b.n	800c188 <tcp_pcb_remove+0x70>
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	60fb      	str	r3, [r7, #12]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1ef      	bne.n	800c168 <tcp_pcb_remove+0x50>
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	2200      	movs	r2, #0
 800c18c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c18e:	6838      	ldr	r0, [r7, #0]
 800c190:	f7ff ff72 	bl	800c078 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	7d1b      	ldrb	r3, [r3, #20]
 800c198:	2b0a      	cmp	r3, #10
 800c19a:	d013      	beq.n	800c1c4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d00f      	beq.n	800c1c4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	8b5b      	ldrh	r3, [r3, #26]
 800c1a8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d009      	beq.n	800c1c4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	8b5b      	ldrh	r3, [r3, #26]
 800c1b4:	f043 0302 	orr.w	r3, r3, #2
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c1be:	6838      	ldr	r0, [r7, #0]
 800c1c0:	f002 ff6a 	bl	800f098 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	7d1b      	ldrb	r3, [r3, #20]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d020      	beq.n	800c20e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d006      	beq.n	800c1e2 <tcp_pcb_remove+0xca>
 800c1d4:	4b13      	ldr	r3, [pc, #76]	; (800c224 <tcp_pcb_remove+0x10c>)
 800c1d6:	f640 0293 	movw	r2, #2195	; 0x893
 800c1da:	4916      	ldr	r1, [pc, #88]	; (800c234 <tcp_pcb_remove+0x11c>)
 800c1dc:	4813      	ldr	r0, [pc, #76]	; (800c22c <tcp_pcb_remove+0x114>)
 800c1de:	f006 ffcb 	bl	8013178 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d006      	beq.n	800c1f8 <tcp_pcb_remove+0xe0>
 800c1ea:	4b0e      	ldr	r3, [pc, #56]	; (800c224 <tcp_pcb_remove+0x10c>)
 800c1ec:	f640 0294 	movw	r2, #2196	; 0x894
 800c1f0:	4911      	ldr	r1, [pc, #68]	; (800c238 <tcp_pcb_remove+0x120>)
 800c1f2:	480e      	ldr	r0, [pc, #56]	; (800c22c <tcp_pcb_remove+0x114>)
 800c1f4:	f006 ffc0 	bl	8013178 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d006      	beq.n	800c20e <tcp_pcb_remove+0xf6>
 800c200:	4b08      	ldr	r3, [pc, #32]	; (800c224 <tcp_pcb_remove+0x10c>)
 800c202:	f640 0296 	movw	r2, #2198	; 0x896
 800c206:	490d      	ldr	r1, [pc, #52]	; (800c23c <tcp_pcb_remove+0x124>)
 800c208:	4808      	ldr	r0, [pc, #32]	; (800c22c <tcp_pcb_remove+0x114>)
 800c20a:	f006 ffb5 	bl	8013178 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2200      	movs	r2, #0
 800c212:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2200      	movs	r2, #0
 800c218:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c21a:	bf00      	nop
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	08014b68 	.word	0x08014b68
 800c228:	080151d0 	.word	0x080151d0
 800c22c:	08014bac 	.word	0x08014bac
 800c230:	080151ec 	.word	0x080151ec
 800c234:	0801520c 	.word	0x0801520c
 800c238:	08015224 	.word	0x08015224
 800c23c:	08015240 	.word	0x08015240

0800c240 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d106      	bne.n	800c25c <tcp_next_iss+0x1c>
 800c24e:	4b0a      	ldr	r3, [pc, #40]	; (800c278 <tcp_next_iss+0x38>)
 800c250:	f640 02af 	movw	r2, #2223	; 0x8af
 800c254:	4909      	ldr	r1, [pc, #36]	; (800c27c <tcp_next_iss+0x3c>)
 800c256:	480a      	ldr	r0, [pc, #40]	; (800c280 <tcp_next_iss+0x40>)
 800c258:	f006 ff8e 	bl	8013178 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c25c:	4b09      	ldr	r3, [pc, #36]	; (800c284 <tcp_next_iss+0x44>)
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	4b09      	ldr	r3, [pc, #36]	; (800c288 <tcp_next_iss+0x48>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4413      	add	r3, r2
 800c266:	4a07      	ldr	r2, [pc, #28]	; (800c284 <tcp_next_iss+0x44>)
 800c268:	6013      	str	r3, [r2, #0]
  return iss;
 800c26a:	4b06      	ldr	r3, [pc, #24]	; (800c284 <tcp_next_iss+0x44>)
 800c26c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	08014b68 	.word	0x08014b68
 800c27c:	08015258 	.word	0x08015258
 800c280:	08014bac 	.word	0x08014bac
 800c284:	20000014 	.word	0x20000014
 800c288:	2000d3ec 	.word	0x2000d3ec

0800c28c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b086      	sub	sp, #24
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
 800c298:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d106      	bne.n	800c2ae <tcp_eff_send_mss_netif+0x22>
 800c2a0:	4b14      	ldr	r3, [pc, #80]	; (800c2f4 <tcp_eff_send_mss_netif+0x68>)
 800c2a2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c2a6:	4914      	ldr	r1, [pc, #80]	; (800c2f8 <tcp_eff_send_mss_netif+0x6c>)
 800c2a8:	4814      	ldr	r0, [pc, #80]	; (800c2fc <tcp_eff_send_mss_netif+0x70>)
 800c2aa:	f006 ff65 	bl	8013178 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d101      	bne.n	800c2b8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c2b4:	89fb      	ldrh	r3, [r7, #14]
 800c2b6:	e019      	b.n	800c2ec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2bc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c2be:	8afb      	ldrh	r3, [r7, #22]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d012      	beq.n	800c2ea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c2c4:	2328      	movs	r3, #40	; 0x28
 800c2c6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c2c8:	8afa      	ldrh	r2, [r7, #22]
 800c2ca:	8abb      	ldrh	r3, [r7, #20]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d904      	bls.n	800c2da <tcp_eff_send_mss_netif+0x4e>
 800c2d0:	8afa      	ldrh	r2, [r7, #22]
 800c2d2:	8abb      	ldrh	r3, [r7, #20]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	e000      	b.n	800c2dc <tcp_eff_send_mss_netif+0x50>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c2de:	8a7a      	ldrh	r2, [r7, #18]
 800c2e0:	89fb      	ldrh	r3, [r7, #14]
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	bf28      	it	cs
 800c2e6:	4613      	movcs	r3, r2
 800c2e8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c2ea:	89fb      	ldrh	r3, [r7, #14]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3718      	adds	r7, #24
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	08014b68 	.word	0x08014b68
 800c2f8:	08015274 	.word	0x08015274
 800c2fc:	08014bac 	.word	0x08014bac

0800c300 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d119      	bne.n	800c348 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c314:	4b10      	ldr	r3, [pc, #64]	; (800c358 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c316:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c31a:	4910      	ldr	r1, [pc, #64]	; (800c35c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c31c:	4810      	ldr	r0, [pc, #64]	; (800c360 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c31e:	f006 ff2b 	bl	8013178 <iprintf>

  while (pcb != NULL) {
 800c322:	e011      	b.n	800c348 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d108      	bne.n	800c342 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f7fe ffc6 	bl	800b2c8 <tcp_abort>
      pcb = next;
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	60fb      	str	r3, [r7, #12]
 800c340:	e002      	b.n	800c348 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1ea      	bne.n	800c324 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c34e:	bf00      	nop
 800c350:	bf00      	nop
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	08014b68 	.word	0x08014b68
 800c35c:	0801529c 	.word	0x0801529c
 800c360:	08014bac 	.word	0x08014bac

0800c364 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d02a      	beq.n	800c3ca <tcp_netif_ip_addr_changed+0x66>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d026      	beq.n	800c3ca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c37c:	4b15      	ldr	r3, [pc, #84]	; (800c3d4 <tcp_netif_ip_addr_changed+0x70>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4619      	mov	r1, r3
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f7ff ffbc 	bl	800c300 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c388:	4b13      	ldr	r3, [pc, #76]	; (800c3d8 <tcp_netif_ip_addr_changed+0x74>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4619      	mov	r1, r3
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f7ff ffb6 	bl	800c300 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d017      	beq.n	800c3ca <tcp_netif_ip_addr_changed+0x66>
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d013      	beq.n	800c3ca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c3a2:	4b0e      	ldr	r3, [pc, #56]	; (800c3dc <tcp_netif_ip_addr_changed+0x78>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	60fb      	str	r3, [r7, #12]
 800c3a8:	e00c      	b.n	800c3c4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d103      	bne.n	800c3be <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	60fb      	str	r3, [r7, #12]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1ef      	bne.n	800c3aa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c3ca:	bf00      	nop
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	2000d3e8 	.word	0x2000d3e8
 800c3d8:	2000d3f4 	.word	0x2000d3f4
 800c3dc:	2000d3f0 	.word	0x2000d3f0

0800c3e0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d007      	beq.n	800c400 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff fc3d 	bl	800bc74 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c400:	bf00      	nop
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c408:	b590      	push	{r4, r7, lr}
 800c40a:	b08d      	sub	sp, #52	; 0x34
 800c40c:	af04      	add	r7, sp, #16
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d105      	bne.n	800c424 <tcp_input+0x1c>
 800c418:	4b9b      	ldr	r3, [pc, #620]	; (800c688 <tcp_input+0x280>)
 800c41a:	2283      	movs	r2, #131	; 0x83
 800c41c:	499b      	ldr	r1, [pc, #620]	; (800c68c <tcp_input+0x284>)
 800c41e:	489c      	ldr	r0, [pc, #624]	; (800c690 <tcp_input+0x288>)
 800c420:	f006 feaa 	bl	8013178 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	4a9a      	ldr	r2, [pc, #616]	; (800c694 <tcp_input+0x28c>)
 800c42a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	895b      	ldrh	r3, [r3, #10]
 800c430:	2b13      	cmp	r3, #19
 800c432:	f240 83c4 	bls.w	800cbbe <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c436:	4b98      	ldr	r3, [pc, #608]	; (800c698 <tcp_input+0x290>)
 800c438:	695b      	ldr	r3, [r3, #20]
 800c43a:	4a97      	ldr	r2, [pc, #604]	; (800c698 <tcp_input+0x290>)
 800c43c:	6812      	ldr	r2, [r2, #0]
 800c43e:	4611      	mov	r1, r2
 800c440:	4618      	mov	r0, r3
 800c442:	f005 fc43 	bl	8011ccc <ip4_addr_isbroadcast_u32>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f040 83ba 	bne.w	800cbc2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c44e:	4b92      	ldr	r3, [pc, #584]	; (800c698 <tcp_input+0x290>)
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c456:	2be0      	cmp	r3, #224	; 0xe0
 800c458:	f000 83b3 	beq.w	800cbc2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c45c:	4b8d      	ldr	r3, [pc, #564]	; (800c694 <tcp_input+0x28c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	899b      	ldrh	r3, [r3, #12]
 800c462:	b29b      	uxth	r3, r3
 800c464:	4618      	mov	r0, r3
 800c466:	f7fc fe53 	bl	8009110 <lwip_htons>
 800c46a:	4603      	mov	r3, r0
 800c46c:	0b1b      	lsrs	r3, r3, #12
 800c46e:	b29b      	uxth	r3, r3
 800c470:	b2db      	uxtb	r3, r3
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c476:	7cbb      	ldrb	r3, [r7, #18]
 800c478:	2b13      	cmp	r3, #19
 800c47a:	f240 83a4 	bls.w	800cbc6 <tcp_input+0x7be>
 800c47e:	7cbb      	ldrb	r3, [r7, #18]
 800c480:	b29a      	uxth	r2, r3
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	891b      	ldrh	r3, [r3, #8]
 800c486:	429a      	cmp	r2, r3
 800c488:	f200 839d 	bhi.w	800cbc6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c48c:	7cbb      	ldrb	r3, [r7, #18]
 800c48e:	b29b      	uxth	r3, r3
 800c490:	3b14      	subs	r3, #20
 800c492:	b29a      	uxth	r2, r3
 800c494:	4b81      	ldr	r3, [pc, #516]	; (800c69c <tcp_input+0x294>)
 800c496:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c498:	4b81      	ldr	r3, [pc, #516]	; (800c6a0 <tcp_input+0x298>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	895a      	ldrh	r2, [r3, #10]
 800c4a2:	7cbb      	ldrb	r3, [r7, #18]
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d309      	bcc.n	800c4be <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c4aa:	4b7c      	ldr	r3, [pc, #496]	; (800c69c <tcp_input+0x294>)
 800c4ac:	881a      	ldrh	r2, [r3, #0]
 800c4ae:	4b7d      	ldr	r3, [pc, #500]	; (800c6a4 <tcp_input+0x29c>)
 800c4b0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c4b2:	7cbb      	ldrb	r3, [r7, #18]
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7fe f8ec 	bl	800a694 <pbuf_remove_header>
 800c4bc:	e04e      	b.n	800c55c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d105      	bne.n	800c4d2 <tcp_input+0xca>
 800c4c6:	4b70      	ldr	r3, [pc, #448]	; (800c688 <tcp_input+0x280>)
 800c4c8:	22c2      	movs	r2, #194	; 0xc2
 800c4ca:	4977      	ldr	r1, [pc, #476]	; (800c6a8 <tcp_input+0x2a0>)
 800c4cc:	4870      	ldr	r0, [pc, #448]	; (800c690 <tcp_input+0x288>)
 800c4ce:	f006 fe53 	bl	8013178 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c4d2:	2114      	movs	r1, #20
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7fe f8dd 	bl	800a694 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	895a      	ldrh	r2, [r3, #10]
 800c4de:	4b71      	ldr	r3, [pc, #452]	; (800c6a4 <tcp_input+0x29c>)
 800c4e0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c4e2:	4b6e      	ldr	r3, [pc, #440]	; (800c69c <tcp_input+0x294>)
 800c4e4:	881a      	ldrh	r2, [r3, #0]
 800c4e6:	4b6f      	ldr	r3, [pc, #444]	; (800c6a4 <tcp_input+0x29c>)
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	1ad3      	subs	r3, r2, r3
 800c4ec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c4ee:	4b6d      	ldr	r3, [pc, #436]	; (800c6a4 <tcp_input+0x29c>)
 800c4f0:	881b      	ldrh	r3, [r3, #0]
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f7fe f8cd 	bl	800a694 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	895b      	ldrh	r3, [r3, #10]
 800c500:	8a3a      	ldrh	r2, [r7, #16]
 800c502:	429a      	cmp	r2, r3
 800c504:	f200 8361 	bhi.w	800cbca <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	4a64      	ldr	r2, [pc, #400]	; (800c6a0 <tcp_input+0x298>)
 800c510:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	8a3a      	ldrh	r2, [r7, #16]
 800c518:	4611      	mov	r1, r2
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fe f8ba 	bl	800a694 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	891a      	ldrh	r2, [r3, #8]
 800c524:	8a3b      	ldrh	r3, [r7, #16]
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	b29a      	uxth	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	895b      	ldrh	r3, [r3, #10]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d005      	beq.n	800c542 <tcp_input+0x13a>
 800c536:	4b54      	ldr	r3, [pc, #336]	; (800c688 <tcp_input+0x280>)
 800c538:	22df      	movs	r2, #223	; 0xdf
 800c53a:	495c      	ldr	r1, [pc, #368]	; (800c6ac <tcp_input+0x2a4>)
 800c53c:	4854      	ldr	r0, [pc, #336]	; (800c690 <tcp_input+0x288>)
 800c53e:	f006 fe1b 	bl	8013178 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	891a      	ldrh	r2, [r3, #8]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	891b      	ldrh	r3, [r3, #8]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d005      	beq.n	800c55c <tcp_input+0x154>
 800c550:	4b4d      	ldr	r3, [pc, #308]	; (800c688 <tcp_input+0x280>)
 800c552:	22e0      	movs	r2, #224	; 0xe0
 800c554:	4956      	ldr	r1, [pc, #344]	; (800c6b0 <tcp_input+0x2a8>)
 800c556:	484e      	ldr	r0, [pc, #312]	; (800c690 <tcp_input+0x288>)
 800c558:	f006 fe0e 	bl	8013178 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c55c:	4b4d      	ldr	r3, [pc, #308]	; (800c694 <tcp_input+0x28c>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	881b      	ldrh	r3, [r3, #0]
 800c562:	b29b      	uxth	r3, r3
 800c564:	4a4b      	ldr	r2, [pc, #300]	; (800c694 <tcp_input+0x28c>)
 800c566:	6814      	ldr	r4, [r2, #0]
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fc fdd1 	bl	8009110 <lwip_htons>
 800c56e:	4603      	mov	r3, r0
 800c570:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c572:	4b48      	ldr	r3, [pc, #288]	; (800c694 <tcp_input+0x28c>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	885b      	ldrh	r3, [r3, #2]
 800c578:	b29b      	uxth	r3, r3
 800c57a:	4a46      	ldr	r2, [pc, #280]	; (800c694 <tcp_input+0x28c>)
 800c57c:	6814      	ldr	r4, [r2, #0]
 800c57e:	4618      	mov	r0, r3
 800c580:	f7fc fdc6 	bl	8009110 <lwip_htons>
 800c584:	4603      	mov	r3, r0
 800c586:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c588:	4b42      	ldr	r3, [pc, #264]	; (800c694 <tcp_input+0x28c>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	4a41      	ldr	r2, [pc, #260]	; (800c694 <tcp_input+0x28c>)
 800c590:	6814      	ldr	r4, [r2, #0]
 800c592:	4618      	mov	r0, r3
 800c594:	f7fc fdd1 	bl	800913a <lwip_htonl>
 800c598:	4603      	mov	r3, r0
 800c59a:	6063      	str	r3, [r4, #4]
 800c59c:	6863      	ldr	r3, [r4, #4]
 800c59e:	4a45      	ldr	r2, [pc, #276]	; (800c6b4 <tcp_input+0x2ac>)
 800c5a0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c5a2:	4b3c      	ldr	r3, [pc, #240]	; (800c694 <tcp_input+0x28c>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	4a3a      	ldr	r2, [pc, #232]	; (800c694 <tcp_input+0x28c>)
 800c5aa:	6814      	ldr	r4, [r2, #0]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fc fdc4 	bl	800913a <lwip_htonl>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	60a3      	str	r3, [r4, #8]
 800c5b6:	68a3      	ldr	r3, [r4, #8]
 800c5b8:	4a3f      	ldr	r2, [pc, #252]	; (800c6b8 <tcp_input+0x2b0>)
 800c5ba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c5bc:	4b35      	ldr	r3, [pc, #212]	; (800c694 <tcp_input+0x28c>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	89db      	ldrh	r3, [r3, #14]
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	4a33      	ldr	r2, [pc, #204]	; (800c694 <tcp_input+0x28c>)
 800c5c6:	6814      	ldr	r4, [r2, #0]
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fc fda1 	bl	8009110 <lwip_htons>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c5d2:	4b30      	ldr	r3, [pc, #192]	; (800c694 <tcp_input+0x28c>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	899b      	ldrh	r3, [r3, #12]
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fc fd98 	bl	8009110 <lwip_htons>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5e8:	b2da      	uxtb	r2, r3
 800c5ea:	4b34      	ldr	r3, [pc, #208]	; (800c6bc <tcp_input+0x2b4>)
 800c5ec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	891a      	ldrh	r2, [r3, #8]
 800c5f2:	4b33      	ldr	r3, [pc, #204]	; (800c6c0 <tcp_input+0x2b8>)
 800c5f4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c5f6:	4b31      	ldr	r3, [pc, #196]	; (800c6bc <tcp_input+0x2b4>)
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	f003 0303 	and.w	r3, r3, #3
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00c      	beq.n	800c61c <tcp_input+0x214>
    tcplen++;
 800c602:	4b2f      	ldr	r3, [pc, #188]	; (800c6c0 <tcp_input+0x2b8>)
 800c604:	881b      	ldrh	r3, [r3, #0]
 800c606:	3301      	adds	r3, #1
 800c608:	b29a      	uxth	r2, r3
 800c60a:	4b2d      	ldr	r3, [pc, #180]	; (800c6c0 <tcp_input+0x2b8>)
 800c60c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	891a      	ldrh	r2, [r3, #8]
 800c612:	4b2b      	ldr	r3, [pc, #172]	; (800c6c0 <tcp_input+0x2b8>)
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	429a      	cmp	r2, r3
 800c618:	f200 82d9 	bhi.w	800cbce <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c61c:	2300      	movs	r3, #0
 800c61e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c620:	4b28      	ldr	r3, [pc, #160]	; (800c6c4 <tcp_input+0x2bc>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	61fb      	str	r3, [r7, #28]
 800c626:	e09d      	b.n	800c764 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	7d1b      	ldrb	r3, [r3, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d105      	bne.n	800c63c <tcp_input+0x234>
 800c630:	4b15      	ldr	r3, [pc, #84]	; (800c688 <tcp_input+0x280>)
 800c632:	22fb      	movs	r2, #251	; 0xfb
 800c634:	4924      	ldr	r1, [pc, #144]	; (800c6c8 <tcp_input+0x2c0>)
 800c636:	4816      	ldr	r0, [pc, #88]	; (800c690 <tcp_input+0x288>)
 800c638:	f006 fd9e 	bl	8013178 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	7d1b      	ldrb	r3, [r3, #20]
 800c640:	2b0a      	cmp	r3, #10
 800c642:	d105      	bne.n	800c650 <tcp_input+0x248>
 800c644:	4b10      	ldr	r3, [pc, #64]	; (800c688 <tcp_input+0x280>)
 800c646:	22fc      	movs	r2, #252	; 0xfc
 800c648:	4920      	ldr	r1, [pc, #128]	; (800c6cc <tcp_input+0x2c4>)
 800c64a:	4811      	ldr	r0, [pc, #68]	; (800c690 <tcp_input+0x288>)
 800c64c:	f006 fd94 	bl	8013178 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	7d1b      	ldrb	r3, [r3, #20]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d105      	bne.n	800c664 <tcp_input+0x25c>
 800c658:	4b0b      	ldr	r3, [pc, #44]	; (800c688 <tcp_input+0x280>)
 800c65a:	22fd      	movs	r2, #253	; 0xfd
 800c65c:	491c      	ldr	r1, [pc, #112]	; (800c6d0 <tcp_input+0x2c8>)
 800c65e:	480c      	ldr	r0, [pc, #48]	; (800c690 <tcp_input+0x288>)
 800c660:	f006 fd8a 	bl	8013178 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	7a1b      	ldrb	r3, [r3, #8]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d033      	beq.n	800c6d4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	7a1a      	ldrb	r2, [r3, #8]
 800c670:	4b09      	ldr	r3, [pc, #36]	; (800c698 <tcp_input+0x290>)
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c678:	3301      	adds	r3, #1
 800c67a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d029      	beq.n	800c6d4 <tcp_input+0x2cc>
      prev = pcb;
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	61bb      	str	r3, [r7, #24]
      continue;
 800c684:	e06b      	b.n	800c75e <tcp_input+0x356>
 800c686:	bf00      	nop
 800c688:	080152d0 	.word	0x080152d0
 800c68c:	08015304 	.word	0x08015304
 800c690:	0801531c 	.word	0x0801531c
 800c694:	20006854 	.word	0x20006854
 800c698:	20009cd4 	.word	0x20009cd4
 800c69c:	20006858 	.word	0x20006858
 800c6a0:	2000685c 	.word	0x2000685c
 800c6a4:	2000685a 	.word	0x2000685a
 800c6a8:	08015344 	.word	0x08015344
 800c6ac:	08015354 	.word	0x08015354
 800c6b0:	08015360 	.word	0x08015360
 800c6b4:	20006864 	.word	0x20006864
 800c6b8:	20006868 	.word	0x20006868
 800c6bc:	20006870 	.word	0x20006870
 800c6c0:	2000686e 	.word	0x2000686e
 800c6c4:	2000d3e8 	.word	0x2000d3e8
 800c6c8:	08015380 	.word	0x08015380
 800c6cc:	080153a8 	.word	0x080153a8
 800c6d0:	080153d4 	.word	0x080153d4
    }

    if (pcb->remote_port == tcphdr->src &&
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	8b1a      	ldrh	r2, [r3, #24]
 800c6d8:	4b94      	ldr	r3, [pc, #592]	; (800c92c <tcp_input+0x524>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	881b      	ldrh	r3, [r3, #0]
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d13a      	bne.n	800c75a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	8ada      	ldrh	r2, [r3, #22]
 800c6e8:	4b90      	ldr	r3, [pc, #576]	; (800c92c <tcp_input+0x524>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	885b      	ldrh	r3, [r3, #2]
 800c6ee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d132      	bne.n	800c75a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	685a      	ldr	r2, [r3, #4]
 800c6f8:	4b8d      	ldr	r3, [pc, #564]	; (800c930 <tcp_input+0x528>)
 800c6fa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d12c      	bne.n	800c75a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	4b8a      	ldr	r3, [pc, #552]	; (800c930 <tcp_input+0x528>)
 800c706:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c708:	429a      	cmp	r2, r3
 800c70a:	d126      	bne.n	800c75a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	69fa      	ldr	r2, [r7, #28]
 800c712:	429a      	cmp	r2, r3
 800c714:	d106      	bne.n	800c724 <tcp_input+0x31c>
 800c716:	4b87      	ldr	r3, [pc, #540]	; (800c934 <tcp_input+0x52c>)
 800c718:	f240 120d 	movw	r2, #269	; 0x10d
 800c71c:	4986      	ldr	r1, [pc, #536]	; (800c938 <tcp_input+0x530>)
 800c71e:	4887      	ldr	r0, [pc, #540]	; (800c93c <tcp_input+0x534>)
 800c720:	f006 fd2a 	bl	8013178 <iprintf>
      if (prev != NULL) {
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00a      	beq.n	800c740 <tcp_input+0x338>
        prev->next = pcb->next;
 800c72a:	69fb      	ldr	r3, [r7, #28]
 800c72c:	68da      	ldr	r2, [r3, #12]
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c732:	4b83      	ldr	r3, [pc, #524]	; (800c940 <tcp_input+0x538>)
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c73a:	4a81      	ldr	r2, [pc, #516]	; (800c940 <tcp_input+0x538>)
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	69fa      	ldr	r2, [r7, #28]
 800c746:	429a      	cmp	r2, r3
 800c748:	d111      	bne.n	800c76e <tcp_input+0x366>
 800c74a:	4b7a      	ldr	r3, [pc, #488]	; (800c934 <tcp_input+0x52c>)
 800c74c:	f240 1215 	movw	r2, #277	; 0x115
 800c750:	497c      	ldr	r1, [pc, #496]	; (800c944 <tcp_input+0x53c>)
 800c752:	487a      	ldr	r0, [pc, #488]	; (800c93c <tcp_input+0x534>)
 800c754:	f006 fd10 	bl	8013178 <iprintf>
      break;
 800c758:	e009      	b.n	800c76e <tcp_input+0x366>
    }
    prev = pcb;
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	61fb      	str	r3, [r7, #28]
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	2b00      	cmp	r3, #0
 800c768:	f47f af5e 	bne.w	800c628 <tcp_input+0x220>
 800c76c:	e000      	b.n	800c770 <tcp_input+0x368>
      break;
 800c76e:	bf00      	nop
  }

  if (pcb == NULL) {
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	2b00      	cmp	r3, #0
 800c774:	f040 8095 	bne.w	800c8a2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c778:	4b73      	ldr	r3, [pc, #460]	; (800c948 <tcp_input+0x540>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	61fb      	str	r3, [r7, #28]
 800c77e:	e03f      	b.n	800c800 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	7d1b      	ldrb	r3, [r3, #20]
 800c784:	2b0a      	cmp	r3, #10
 800c786:	d006      	beq.n	800c796 <tcp_input+0x38e>
 800c788:	4b6a      	ldr	r3, [pc, #424]	; (800c934 <tcp_input+0x52c>)
 800c78a:	f240 121f 	movw	r2, #287	; 0x11f
 800c78e:	496f      	ldr	r1, [pc, #444]	; (800c94c <tcp_input+0x544>)
 800c790:	486a      	ldr	r0, [pc, #424]	; (800c93c <tcp_input+0x534>)
 800c792:	f006 fcf1 	bl	8013178 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	7a1b      	ldrb	r3, [r3, #8]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d009      	beq.n	800c7b2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	7a1a      	ldrb	r2, [r3, #8]
 800c7a2:	4b63      	ldr	r3, [pc, #396]	; (800c930 <tcp_input+0x528>)
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d122      	bne.n	800c7f8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	8b1a      	ldrh	r2, [r3, #24]
 800c7b6:	4b5d      	ldr	r3, [pc, #372]	; (800c92c <tcp_input+0x524>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	881b      	ldrh	r3, [r3, #0]
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d11b      	bne.n	800c7fa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	8ada      	ldrh	r2, [r3, #22]
 800c7c6:	4b59      	ldr	r3, [pc, #356]	; (800c92c <tcp_input+0x524>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	885b      	ldrh	r3, [r3, #2]
 800c7cc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d113      	bne.n	800c7fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	685a      	ldr	r2, [r3, #4]
 800c7d6:	4b56      	ldr	r3, [pc, #344]	; (800c930 <tcp_input+0x528>)
 800c7d8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d10d      	bne.n	800c7fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	4b53      	ldr	r3, [pc, #332]	; (800c930 <tcp_input+0x528>)
 800c7e4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d107      	bne.n	800c7fa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c7ea:	69f8      	ldr	r0, [r7, #28]
 800c7ec:	f000 fb54 	bl	800ce98 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7fd ffd5 	bl	800a7a0 <pbuf_free>
        return;
 800c7f6:	e1f0      	b.n	800cbda <tcp_input+0x7d2>
        continue;
 800c7f8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	61fb      	str	r3, [r7, #28]
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1bc      	bne.n	800c780 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c806:	2300      	movs	r3, #0
 800c808:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c80a:	4b51      	ldr	r3, [pc, #324]	; (800c950 <tcp_input+0x548>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	617b      	str	r3, [r7, #20]
 800c810:	e02a      	b.n	800c868 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	7a1b      	ldrb	r3, [r3, #8]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00c      	beq.n	800c834 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	7a1a      	ldrb	r2, [r3, #8]
 800c81e:	4b44      	ldr	r3, [pc, #272]	; (800c930 <tcp_input+0x528>)
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c826:	3301      	adds	r3, #1
 800c828:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d002      	beq.n	800c834 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	61bb      	str	r3, [r7, #24]
        continue;
 800c832:	e016      	b.n	800c862 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	8ada      	ldrh	r2, [r3, #22]
 800c838:	4b3c      	ldr	r3, [pc, #240]	; (800c92c <tcp_input+0x524>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	885b      	ldrh	r3, [r3, #2]
 800c83e:	b29b      	uxth	r3, r3
 800c840:	429a      	cmp	r2, r3
 800c842:	d10c      	bne.n	800c85e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	4b39      	ldr	r3, [pc, #228]	; (800c930 <tcp_input+0x528>)
 800c84a:	695b      	ldr	r3, [r3, #20]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d00f      	beq.n	800c870 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00d      	beq.n	800c872 <tcp_input+0x46a>
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d009      	beq.n	800c872 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	617b      	str	r3, [r7, #20]
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1d1      	bne.n	800c812 <tcp_input+0x40a>
 800c86e:	e000      	b.n	800c872 <tcp_input+0x46a>
            break;
 800c870:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d014      	beq.n	800c8a2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00a      	beq.n	800c894 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	68da      	ldr	r2, [r3, #12]
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c886:	4b32      	ldr	r3, [pc, #200]	; (800c950 <tcp_input+0x548>)
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c88e:	4a30      	ldr	r2, [pc, #192]	; (800c950 <tcp_input+0x548>)
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c894:	6978      	ldr	r0, [r7, #20]
 800c896:	f000 fa01 	bl	800cc9c <tcp_listen_input>
      }
      pbuf_free(p);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f7fd ff80 	bl	800a7a0 <pbuf_free>
      return;
 800c8a0:	e19b      	b.n	800cbda <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f000 8160 	beq.w	800cb6a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c8aa:	4b2a      	ldr	r3, [pc, #168]	; (800c954 <tcp_input+0x54c>)
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	891a      	ldrh	r2, [r3, #8]
 800c8b4:	4b27      	ldr	r3, [pc, #156]	; (800c954 <tcp_input+0x54c>)
 800c8b6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c8b8:	4a26      	ldr	r2, [pc, #152]	; (800c954 <tcp_input+0x54c>)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c8be:	4b1b      	ldr	r3, [pc, #108]	; (800c92c <tcp_input+0x524>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a24      	ldr	r2, [pc, #144]	; (800c954 <tcp_input+0x54c>)
 800c8c4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c8c6:	4b24      	ldr	r3, [pc, #144]	; (800c958 <tcp_input+0x550>)
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c8cc:	4b23      	ldr	r3, [pc, #140]	; (800c95c <tcp_input+0x554>)
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c8d2:	4b23      	ldr	r3, [pc, #140]	; (800c960 <tcp_input+0x558>)
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c8d8:	4b22      	ldr	r3, [pc, #136]	; (800c964 <tcp_input+0x55c>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	f003 0308 	and.w	r3, r3, #8
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d006      	beq.n	800c8f2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	7b5b      	ldrb	r3, [r3, #13]
 800c8e8:	f043 0301 	orr.w	r3, r3, #1
 800c8ec:	b2da      	uxtb	r2, r3
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d038      	beq.n	800c96c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c8fa:	69f8      	ldr	r0, [r7, #28]
 800c8fc:	f7ff f93e 	bl	800bb7c <tcp_process_refused_data>
 800c900:	4603      	mov	r3, r0
 800c902:	f113 0f0d 	cmn.w	r3, #13
 800c906:	d007      	beq.n	800c918 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d02d      	beq.n	800c96c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c910:	4b15      	ldr	r3, [pc, #84]	; (800c968 <tcp_input+0x560>)
 800c912:	881b      	ldrh	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d029      	beq.n	800c96c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f040 8104 	bne.w	800cb2a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c922:	69f8      	ldr	r0, [r7, #28]
 800c924:	f003 f9be 	bl	800fca4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c928:	e0ff      	b.n	800cb2a <tcp_input+0x722>
 800c92a:	bf00      	nop
 800c92c:	20006854 	.word	0x20006854
 800c930:	20009cd4 	.word	0x20009cd4
 800c934:	080152d0 	.word	0x080152d0
 800c938:	080153fc 	.word	0x080153fc
 800c93c:	0801531c 	.word	0x0801531c
 800c940:	2000d3e8 	.word	0x2000d3e8
 800c944:	08015428 	.word	0x08015428
 800c948:	2000d3f8 	.word	0x2000d3f8
 800c94c:	08015454 	.word	0x08015454
 800c950:	2000d3f0 	.word	0x2000d3f0
 800c954:	20006844 	.word	0x20006844
 800c958:	20006874 	.word	0x20006874
 800c95c:	20006871 	.word	0x20006871
 800c960:	2000686c 	.word	0x2000686c
 800c964:	20006870 	.word	0x20006870
 800c968:	2000686e 	.word	0x2000686e
      }
    }
    tcp_input_pcb = pcb;
 800c96c:	4a9c      	ldr	r2, [pc, #624]	; (800cbe0 <tcp_input+0x7d8>)
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c972:	69f8      	ldr	r0, [r7, #28]
 800c974:	f000 fb0a 	bl	800cf8c <tcp_process>
 800c978:	4603      	mov	r3, r0
 800c97a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c97c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c980:	f113 0f0d 	cmn.w	r3, #13
 800c984:	f000 80d3 	beq.w	800cb2e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800c988:	4b96      	ldr	r3, [pc, #600]	; (800cbe4 <tcp_input+0x7dc>)
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	f003 0308 	and.w	r3, r3, #8
 800c990:	2b00      	cmp	r3, #0
 800c992:	d015      	beq.n	800c9c0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d008      	beq.n	800c9b0 <tcp_input+0x5a8>
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9a4:	69fa      	ldr	r2, [r7, #28]
 800c9a6:	6912      	ldr	r2, [r2, #16]
 800c9a8:	f06f 010d 	mvn.w	r1, #13
 800c9ac:	4610      	mov	r0, r2
 800c9ae:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c9b0:	69f9      	ldr	r1, [r7, #28]
 800c9b2:	488d      	ldr	r0, [pc, #564]	; (800cbe8 <tcp_input+0x7e0>)
 800c9b4:	f7ff fbb0 	bl	800c118 <tcp_pcb_remove>
        tcp_free(pcb);
 800c9b8:	69f8      	ldr	r0, [r7, #28]
 800c9ba:	f7fe f99d 	bl	800acf8 <tcp_free>
 800c9be:	e0c1      	b.n	800cb44 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c9c4:	4b89      	ldr	r3, [pc, #548]	; (800cbec <tcp_input+0x7e4>)
 800c9c6:	881b      	ldrh	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d01d      	beq.n	800ca08 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c9cc:	4b87      	ldr	r3, [pc, #540]	; (800cbec <tcp_input+0x7e4>)
 800c9ce:	881b      	ldrh	r3, [r3, #0]
 800c9d0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00a      	beq.n	800c9f2 <tcp_input+0x5ea>
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9e2:	69fa      	ldr	r2, [r7, #28]
 800c9e4:	6910      	ldr	r0, [r2, #16]
 800c9e6:	89fa      	ldrh	r2, [r7, #14]
 800c9e8:	69f9      	ldr	r1, [r7, #28]
 800c9ea:	4798      	blx	r3
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	74fb      	strb	r3, [r7, #19]
 800c9f0:	e001      	b.n	800c9f6 <tcp_input+0x5ee>
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c9f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c9fa:	f113 0f0d 	cmn.w	r3, #13
 800c9fe:	f000 8098 	beq.w	800cb32 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ca02:	4b7a      	ldr	r3, [pc, #488]	; (800cbec <tcp_input+0x7e4>)
 800ca04:	2200      	movs	r2, #0
 800ca06:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ca08:	69f8      	ldr	r0, [r7, #28]
 800ca0a:	f000 f907 	bl	800cc1c <tcp_input_delayed_close>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f040 8090 	bne.w	800cb36 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ca16:	4b76      	ldr	r3, [pc, #472]	; (800cbf0 <tcp_input+0x7e8>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d041      	beq.n	800caa2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ca1e:	69fb      	ldr	r3, [r7, #28]
 800ca20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d006      	beq.n	800ca34 <tcp_input+0x62c>
 800ca26:	4b73      	ldr	r3, [pc, #460]	; (800cbf4 <tcp_input+0x7ec>)
 800ca28:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ca2c:	4972      	ldr	r1, [pc, #456]	; (800cbf8 <tcp_input+0x7f0>)
 800ca2e:	4873      	ldr	r0, [pc, #460]	; (800cbfc <tcp_input+0x7f4>)
 800ca30:	f006 fba2 	bl	8013178 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	8b5b      	ldrh	r3, [r3, #26]
 800ca38:	f003 0310 	and.w	r3, r3, #16
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d008      	beq.n	800ca52 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ca40:	4b6b      	ldr	r3, [pc, #428]	; (800cbf0 <tcp_input+0x7e8>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7fd feab 	bl	800a7a0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ca4a:	69f8      	ldr	r0, [r7, #28]
 800ca4c:	f7fe fc3c 	bl	800b2c8 <tcp_abort>
            goto aborted;
 800ca50:	e078      	b.n	800cb44 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00c      	beq.n	800ca76 <tcp_input+0x66e>
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	6918      	ldr	r0, [r3, #16]
 800ca66:	4b62      	ldr	r3, [pc, #392]	; (800cbf0 <tcp_input+0x7e8>)
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	69f9      	ldr	r1, [r7, #28]
 800ca6e:	47a0      	blx	r4
 800ca70:	4603      	mov	r3, r0
 800ca72:	74fb      	strb	r3, [r7, #19]
 800ca74:	e008      	b.n	800ca88 <tcp_input+0x680>
 800ca76:	4b5e      	ldr	r3, [pc, #376]	; (800cbf0 <tcp_input+0x7e8>)
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	69f9      	ldr	r1, [r7, #28]
 800ca7e:	2000      	movs	r0, #0
 800ca80:	f7ff f952 	bl	800bd28 <tcp_recv_null>
 800ca84:	4603      	mov	r3, r0
 800ca86:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ca88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca8c:	f113 0f0d 	cmn.w	r3, #13
 800ca90:	d053      	beq.n	800cb3a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ca92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d003      	beq.n	800caa2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ca9a:	4b55      	ldr	r3, [pc, #340]	; (800cbf0 <tcp_input+0x7e8>)
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	69fb      	ldr	r3, [r7, #28]
 800caa0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800caa2:	4b50      	ldr	r3, [pc, #320]	; (800cbe4 <tcp_input+0x7dc>)
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	f003 0320 	and.w	r3, r3, #32
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d030      	beq.n	800cb10 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d009      	beq.n	800caca <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800caba:	7b5a      	ldrb	r2, [r3, #13]
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cac0:	f042 0220 	orr.w	r2, r2, #32
 800cac4:	b2d2      	uxtb	r2, r2
 800cac6:	735a      	strb	r2, [r3, #13]
 800cac8:	e022      	b.n	800cb10 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cace:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cad2:	d005      	beq.n	800cae0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cad8:	3301      	adds	r3, #1
 800cada:	b29a      	uxth	r2, r3
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00b      	beq.n	800cb02 <tcp_input+0x6fa>
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	6918      	ldr	r0, [r3, #16]
 800caf4:	2300      	movs	r3, #0
 800caf6:	2200      	movs	r2, #0
 800caf8:	69f9      	ldr	r1, [r7, #28]
 800cafa:	47a0      	blx	r4
 800cafc:	4603      	mov	r3, r0
 800cafe:	74fb      	strb	r3, [r7, #19]
 800cb00:	e001      	b.n	800cb06 <tcp_input+0x6fe>
 800cb02:	2300      	movs	r3, #0
 800cb04:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cb06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb0a:	f113 0f0d 	cmn.w	r3, #13
 800cb0e:	d016      	beq.n	800cb3e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cb10:	4b33      	ldr	r3, [pc, #204]	; (800cbe0 <tcp_input+0x7d8>)
 800cb12:	2200      	movs	r2, #0
 800cb14:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cb16:	69f8      	ldr	r0, [r7, #28]
 800cb18:	f000 f880 	bl	800cc1c <tcp_input_delayed_close>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d10f      	bne.n	800cb42 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cb22:	69f8      	ldr	r0, [r7, #28]
 800cb24:	f002 fab8 	bl	800f098 <tcp_output>
 800cb28:	e00c      	b.n	800cb44 <tcp_input+0x73c>
        goto aborted;
 800cb2a:	bf00      	nop
 800cb2c:	e00a      	b.n	800cb44 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cb2e:	bf00      	nop
 800cb30:	e008      	b.n	800cb44 <tcp_input+0x73c>
              goto aborted;
 800cb32:	bf00      	nop
 800cb34:	e006      	b.n	800cb44 <tcp_input+0x73c>
          goto aborted;
 800cb36:	bf00      	nop
 800cb38:	e004      	b.n	800cb44 <tcp_input+0x73c>
            goto aborted;
 800cb3a:	bf00      	nop
 800cb3c:	e002      	b.n	800cb44 <tcp_input+0x73c>
              goto aborted;
 800cb3e:	bf00      	nop
 800cb40:	e000      	b.n	800cb44 <tcp_input+0x73c>
          goto aborted;
 800cb42:	bf00      	nop
    tcp_input_pcb = NULL;
 800cb44:	4b26      	ldr	r3, [pc, #152]	; (800cbe0 <tcp_input+0x7d8>)
 800cb46:	2200      	movs	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cb4a:	4b29      	ldr	r3, [pc, #164]	; (800cbf0 <tcp_input+0x7e8>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800cb50:	4b2b      	ldr	r3, [pc, #172]	; (800cc00 <tcp_input+0x7f8>)
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d03f      	beq.n	800cbd8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800cb58:	4b29      	ldr	r3, [pc, #164]	; (800cc00 <tcp_input+0x7f8>)
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fd fe1f 	bl	800a7a0 <pbuf_free>
      inseg.p = NULL;
 800cb62:	4b27      	ldr	r3, [pc, #156]	; (800cc00 <tcp_input+0x7f8>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cb68:	e036      	b.n	800cbd8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cb6a:	4b26      	ldr	r3, [pc, #152]	; (800cc04 <tcp_input+0x7fc>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	899b      	ldrh	r3, [r3, #12]
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fc facc 	bl	8009110 <lwip_htons>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	f003 0304 	and.w	r3, r3, #4
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d118      	bne.n	800cbb6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb84:	4b20      	ldr	r3, [pc, #128]	; (800cc08 <tcp_input+0x800>)
 800cb86:	6819      	ldr	r1, [r3, #0]
 800cb88:	4b20      	ldr	r3, [pc, #128]	; (800cc0c <tcp_input+0x804>)
 800cb8a:	881b      	ldrh	r3, [r3, #0]
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	4b20      	ldr	r3, [pc, #128]	; (800cc10 <tcp_input+0x808>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb94:	4b1b      	ldr	r3, [pc, #108]	; (800cc04 <tcp_input+0x7fc>)
 800cb96:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb98:	885b      	ldrh	r3, [r3, #2]
 800cb9a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb9c:	4a19      	ldr	r2, [pc, #100]	; (800cc04 <tcp_input+0x7fc>)
 800cb9e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cba0:	8812      	ldrh	r2, [r2, #0]
 800cba2:	b292      	uxth	r2, r2
 800cba4:	9202      	str	r2, [sp, #8]
 800cba6:	9301      	str	r3, [sp, #4]
 800cba8:	4b1a      	ldr	r3, [pc, #104]	; (800cc14 <tcp_input+0x80c>)
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	4b1a      	ldr	r3, [pc, #104]	; (800cc18 <tcp_input+0x810>)
 800cbae:	4602      	mov	r2, r0
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	f003 f825 	bl	800fc00 <tcp_rst>
    pbuf_free(p);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f7fd fdf2 	bl	800a7a0 <pbuf_free>
  return;
 800cbbc:	e00c      	b.n	800cbd8 <tcp_input+0x7d0>
    goto dropped;
 800cbbe:	bf00      	nop
 800cbc0:	e006      	b.n	800cbd0 <tcp_input+0x7c8>
    goto dropped;
 800cbc2:	bf00      	nop
 800cbc4:	e004      	b.n	800cbd0 <tcp_input+0x7c8>
    goto dropped;
 800cbc6:	bf00      	nop
 800cbc8:	e002      	b.n	800cbd0 <tcp_input+0x7c8>
      goto dropped;
 800cbca:	bf00      	nop
 800cbcc:	e000      	b.n	800cbd0 <tcp_input+0x7c8>
      goto dropped;
 800cbce:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7fd fde5 	bl	800a7a0 <pbuf_free>
 800cbd6:	e000      	b.n	800cbda <tcp_input+0x7d2>
  return;
 800cbd8:	bf00      	nop
}
 800cbda:	3724      	adds	r7, #36	; 0x24
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd90      	pop	{r4, r7, pc}
 800cbe0:	2000d3fc 	.word	0x2000d3fc
 800cbe4:	20006871 	.word	0x20006871
 800cbe8:	2000d3e8 	.word	0x2000d3e8
 800cbec:	2000686c 	.word	0x2000686c
 800cbf0:	20006874 	.word	0x20006874
 800cbf4:	080152d0 	.word	0x080152d0
 800cbf8:	08015484 	.word	0x08015484
 800cbfc:	0801531c 	.word	0x0801531c
 800cc00:	20006844 	.word	0x20006844
 800cc04:	20006854 	.word	0x20006854
 800cc08:	20006868 	.word	0x20006868
 800cc0c:	2000686e 	.word	0x2000686e
 800cc10:	20006864 	.word	0x20006864
 800cc14:	20009ce4 	.word	0x20009ce4
 800cc18:	20009ce8 	.word	0x20009ce8

0800cc1c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d106      	bne.n	800cc38 <tcp_input_delayed_close+0x1c>
 800cc2a:	4b17      	ldr	r3, [pc, #92]	; (800cc88 <tcp_input_delayed_close+0x6c>)
 800cc2c:	f240 225a 	movw	r2, #602	; 0x25a
 800cc30:	4916      	ldr	r1, [pc, #88]	; (800cc8c <tcp_input_delayed_close+0x70>)
 800cc32:	4817      	ldr	r0, [pc, #92]	; (800cc90 <tcp_input_delayed_close+0x74>)
 800cc34:	f006 faa0 	bl	8013178 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800cc38:	4b16      	ldr	r3, [pc, #88]	; (800cc94 <tcp_input_delayed_close+0x78>)
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	f003 0310 	and.w	r3, r3, #16
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d01c      	beq.n	800cc7e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	8b5b      	ldrh	r3, [r3, #26]
 800cc48:	f003 0310 	and.w	r3, r3, #16
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10d      	bne.n	800cc6c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d008      	beq.n	800cc6c <tcp_input_delayed_close+0x50>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	6912      	ldr	r2, [r2, #16]
 800cc64:	f06f 010e 	mvn.w	r1, #14
 800cc68:	4610      	mov	r0, r2
 800cc6a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cc6c:	6879      	ldr	r1, [r7, #4]
 800cc6e:	480a      	ldr	r0, [pc, #40]	; (800cc98 <tcp_input_delayed_close+0x7c>)
 800cc70:	f7ff fa52 	bl	800c118 <tcp_pcb_remove>
    tcp_free(pcb);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7fe f83f 	bl	800acf8 <tcp_free>
    return 1;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e000      	b.n	800cc80 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800cc7e:	2300      	movs	r3, #0
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	080152d0 	.word	0x080152d0
 800cc8c:	080154a0 	.word	0x080154a0
 800cc90:	0801531c 	.word	0x0801531c
 800cc94:	20006871 	.word	0x20006871
 800cc98:	2000d3e8 	.word	0x2000d3e8

0800cc9c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800cc9c:	b590      	push	{r4, r7, lr}
 800cc9e:	b08b      	sub	sp, #44	; 0x2c
 800cca0:	af04      	add	r7, sp, #16
 800cca2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800cca4:	4b6f      	ldr	r3, [pc, #444]	; (800ce64 <tcp_listen_input+0x1c8>)
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	f003 0304 	and.w	r3, r3, #4
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f040 80d2 	bne.w	800ce56 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d106      	bne.n	800ccc6 <tcp_listen_input+0x2a>
 800ccb8:	4b6b      	ldr	r3, [pc, #428]	; (800ce68 <tcp_listen_input+0x1cc>)
 800ccba:	f240 2281 	movw	r2, #641	; 0x281
 800ccbe:	496b      	ldr	r1, [pc, #428]	; (800ce6c <tcp_listen_input+0x1d0>)
 800ccc0:	486b      	ldr	r0, [pc, #428]	; (800ce70 <tcp_listen_input+0x1d4>)
 800ccc2:	f006 fa59 	bl	8013178 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ccc6:	4b67      	ldr	r3, [pc, #412]	; (800ce64 <tcp_listen_input+0x1c8>)
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	f003 0310 	and.w	r3, r3, #16
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d019      	beq.n	800cd06 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccd2:	4b68      	ldr	r3, [pc, #416]	; (800ce74 <tcp_listen_input+0x1d8>)
 800ccd4:	6819      	ldr	r1, [r3, #0]
 800ccd6:	4b68      	ldr	r3, [pc, #416]	; (800ce78 <tcp_listen_input+0x1dc>)
 800ccd8:	881b      	ldrh	r3, [r3, #0]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	4b67      	ldr	r3, [pc, #412]	; (800ce7c <tcp_listen_input+0x1e0>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cce2:	4b67      	ldr	r3, [pc, #412]	; (800ce80 <tcp_listen_input+0x1e4>)
 800cce4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cce6:	885b      	ldrh	r3, [r3, #2]
 800cce8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ccea:	4a65      	ldr	r2, [pc, #404]	; (800ce80 <tcp_listen_input+0x1e4>)
 800ccec:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccee:	8812      	ldrh	r2, [r2, #0]
 800ccf0:	b292      	uxth	r2, r2
 800ccf2:	9202      	str	r2, [sp, #8]
 800ccf4:	9301      	str	r3, [sp, #4]
 800ccf6:	4b63      	ldr	r3, [pc, #396]	; (800ce84 <tcp_listen_input+0x1e8>)
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	4b63      	ldr	r3, [pc, #396]	; (800ce88 <tcp_listen_input+0x1ec>)
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f002 ff7e 	bl	800fc00 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800cd04:	e0a9      	b.n	800ce5a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800cd06:	4b57      	ldr	r3, [pc, #348]	; (800ce64 <tcp_listen_input+0x1c8>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	f003 0302 	and.w	r3, r3, #2
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f000 80a3 	beq.w	800ce5a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	7d5b      	ldrb	r3, [r3, #21]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7ff f929 	bl	800bf70 <tcp_alloc>
 800cd1e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d111      	bne.n	800cd4a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	699b      	ldr	r3, [r3, #24]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00a      	beq.n	800cd44 <tcp_listen_input+0xa8>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	699b      	ldr	r3, [r3, #24]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	6910      	ldr	r0, [r2, #16]
 800cd36:	f04f 32ff 	mov.w	r2, #4294967295
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	4798      	blx	r3
 800cd3e:	4603      	mov	r3, r0
 800cd40:	73bb      	strb	r3, [r7, #14]
      return;
 800cd42:	e08b      	b.n	800ce5c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cd44:	23f0      	movs	r3, #240	; 0xf0
 800cd46:	73bb      	strb	r3, [r7, #14]
      return;
 800cd48:	e088      	b.n	800ce5c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cd4a:	4b50      	ldr	r3, [pc, #320]	; (800ce8c <tcp_listen_input+0x1f0>)
 800cd4c:	695a      	ldr	r2, [r3, #20]
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cd52:	4b4e      	ldr	r3, [pc, #312]	; (800ce8c <tcp_listen_input+0x1f0>)
 800cd54:	691a      	ldr	r2, [r3, #16]
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	8ada      	ldrh	r2, [r3, #22]
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cd62:	4b47      	ldr	r3, [pc, #284]	; (800ce80 <tcp_listen_input+0x1e4>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	881b      	ldrh	r3, [r3, #0]
 800cd68:	b29a      	uxth	r2, r3
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2203      	movs	r2, #3
 800cd72:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cd74:	4b41      	ldr	r3, [pc, #260]	; (800ce7c <tcp_listen_input+0x1e0>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	1c5a      	adds	r2, r3, #1
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cd86:	6978      	ldr	r0, [r7, #20]
 800cd88:	f7ff fa5a 	bl	800c240 <tcp_next_iss>
 800cd8c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	693a      	ldr	r2, [r7, #16]
 800cd98:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	693a      	ldr	r2, [r7, #16]
 800cd9e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	693a      	ldr	r2, [r7, #16]
 800cda4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cda6:	4b35      	ldr	r3, [pc, #212]	; (800ce7c <tcp_listen_input+0x1e0>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	1e5a      	subs	r2, r3, #1
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	691a      	ldr	r2, [r3, #16]
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	7a5b      	ldrb	r3, [r3, #9]
 800cdc2:	f003 030c 	and.w	r3, r3, #12
 800cdc6:	b2da      	uxtb	r2, r3
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	7a1a      	ldrb	r2, [r3, #8]
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cdd4:	4b2e      	ldr	r3, [pc, #184]	; (800ce90 <tcp_listen_input+0x1f4>)
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	60da      	str	r2, [r3, #12]
 800cddc:	4a2c      	ldr	r2, [pc, #176]	; (800ce90 <tcp_listen_input+0x1f4>)
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	6013      	str	r3, [r2, #0]
 800cde2:	f003 f8cf 	bl	800ff84 <tcp_timer_needed>
 800cde6:	4b2b      	ldr	r3, [pc, #172]	; (800ce94 <tcp_listen_input+0x1f8>)
 800cde8:	2201      	movs	r2, #1
 800cdea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cdec:	6978      	ldr	r0, [r7, #20]
 800cdee:	f001 fd8d 	bl	800e90c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cdf2:	4b23      	ldr	r3, [pc, #140]	; (800ce80 <tcp_listen_input+0x1e4>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	89db      	ldrh	r3, [r3, #14]
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	3304      	adds	r3, #4
 800ce14:	4618      	mov	r0, r3
 800ce16:	f004 fcc3 	bl	80117a0 <ip4_route>
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	3304      	adds	r3, #4
 800ce20:	461a      	mov	r2, r3
 800ce22:	4620      	mov	r0, r4
 800ce24:	f7ff fa32 	bl	800c28c <tcp_eff_send_mss_netif>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ce30:	2112      	movs	r1, #18
 800ce32:	6978      	ldr	r0, [r7, #20]
 800ce34:	f002 f842 	bl	800eebc <tcp_enqueue_flags>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ce3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d004      	beq.n	800ce4e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ce44:	2100      	movs	r1, #0
 800ce46:	6978      	ldr	r0, [r7, #20]
 800ce48:	f7fe f980 	bl	800b14c <tcp_abandon>
      return;
 800ce4c:	e006      	b.n	800ce5c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ce4e:	6978      	ldr	r0, [r7, #20]
 800ce50:	f002 f922 	bl	800f098 <tcp_output>
  return;
 800ce54:	e001      	b.n	800ce5a <tcp_listen_input+0x1be>
    return;
 800ce56:	bf00      	nop
 800ce58:	e000      	b.n	800ce5c <tcp_listen_input+0x1c0>
  return;
 800ce5a:	bf00      	nop
}
 800ce5c:	371c      	adds	r7, #28
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd90      	pop	{r4, r7, pc}
 800ce62:	bf00      	nop
 800ce64:	20006870 	.word	0x20006870
 800ce68:	080152d0 	.word	0x080152d0
 800ce6c:	080154c8 	.word	0x080154c8
 800ce70:	0801531c 	.word	0x0801531c
 800ce74:	20006868 	.word	0x20006868
 800ce78:	2000686e 	.word	0x2000686e
 800ce7c:	20006864 	.word	0x20006864
 800ce80:	20006854 	.word	0x20006854
 800ce84:	20009ce4 	.word	0x20009ce4
 800ce88:	20009ce8 	.word	0x20009ce8
 800ce8c:	20009cd4 	.word	0x20009cd4
 800ce90:	2000d3e8 	.word	0x2000d3e8
 800ce94:	2000d3e4 	.word	0x2000d3e4

0800ce98 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af04      	add	r7, sp, #16
 800ce9e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cea0:	4b2f      	ldr	r3, [pc, #188]	; (800cf60 <tcp_timewait_input+0xc8>)
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	f003 0304 	and.w	r3, r3, #4
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d153      	bne.n	800cf54 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d106      	bne.n	800cec0 <tcp_timewait_input+0x28>
 800ceb2:	4b2c      	ldr	r3, [pc, #176]	; (800cf64 <tcp_timewait_input+0xcc>)
 800ceb4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ceb8:	492b      	ldr	r1, [pc, #172]	; (800cf68 <tcp_timewait_input+0xd0>)
 800ceba:	482c      	ldr	r0, [pc, #176]	; (800cf6c <tcp_timewait_input+0xd4>)
 800cebc:	f006 f95c 	bl	8013178 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cec0:	4b27      	ldr	r3, [pc, #156]	; (800cf60 <tcp_timewait_input+0xc8>)
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	f003 0302 	and.w	r3, r3, #2
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d02a      	beq.n	800cf22 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cecc:	4b28      	ldr	r3, [pc, #160]	; (800cf70 <tcp_timewait_input+0xd8>)
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced4:	1ad3      	subs	r3, r2, r3
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	db2d      	blt.n	800cf36 <tcp_timewait_input+0x9e>
 800ceda:	4b25      	ldr	r3, [pc, #148]	; (800cf70 <tcp_timewait_input+0xd8>)
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee2:	6879      	ldr	r1, [r7, #4]
 800cee4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cee6:	440b      	add	r3, r1
 800cee8:	1ad3      	subs	r3, r2, r3
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	dc23      	bgt.n	800cf36 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ceee:	4b21      	ldr	r3, [pc, #132]	; (800cf74 <tcp_timewait_input+0xdc>)
 800cef0:	6819      	ldr	r1, [r3, #0]
 800cef2:	4b21      	ldr	r3, [pc, #132]	; (800cf78 <tcp_timewait_input+0xe0>)
 800cef4:	881b      	ldrh	r3, [r3, #0]
 800cef6:	461a      	mov	r2, r3
 800cef8:	4b1d      	ldr	r3, [pc, #116]	; (800cf70 <tcp_timewait_input+0xd8>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cefe:	4b1f      	ldr	r3, [pc, #124]	; (800cf7c <tcp_timewait_input+0xe4>)
 800cf00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf02:	885b      	ldrh	r3, [r3, #2]
 800cf04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf06:	4a1d      	ldr	r2, [pc, #116]	; (800cf7c <tcp_timewait_input+0xe4>)
 800cf08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf0a:	8812      	ldrh	r2, [r2, #0]
 800cf0c:	b292      	uxth	r2, r2
 800cf0e:	9202      	str	r2, [sp, #8]
 800cf10:	9301      	str	r3, [sp, #4]
 800cf12:	4b1b      	ldr	r3, [pc, #108]	; (800cf80 <tcp_timewait_input+0xe8>)
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	4b1b      	ldr	r3, [pc, #108]	; (800cf84 <tcp_timewait_input+0xec>)
 800cf18:	4602      	mov	r2, r0
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f002 fe70 	bl	800fc00 <tcp_rst>
      return;
 800cf20:	e01b      	b.n	800cf5a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cf22:	4b0f      	ldr	r3, [pc, #60]	; (800cf60 <tcp_timewait_input+0xc8>)
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d003      	beq.n	800cf36 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cf2e:	4b16      	ldr	r3, [pc, #88]	; (800cf88 <tcp_timewait_input+0xf0>)
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cf36:	4b10      	ldr	r3, [pc, #64]	; (800cf78 <tcp_timewait_input+0xe0>)
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00c      	beq.n	800cf58 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	8b5b      	ldrh	r3, [r3, #26]
 800cf42:	f043 0302 	orr.w	r3, r3, #2
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f002 f8a3 	bl	800f098 <tcp_output>
  }
  return;
 800cf52:	e001      	b.n	800cf58 <tcp_timewait_input+0xc0>
    return;
 800cf54:	bf00      	nop
 800cf56:	e000      	b.n	800cf5a <tcp_timewait_input+0xc2>
  return;
 800cf58:	bf00      	nop
}
 800cf5a:	3708      	adds	r7, #8
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	20006870 	.word	0x20006870
 800cf64:	080152d0 	.word	0x080152d0
 800cf68:	080154e8 	.word	0x080154e8
 800cf6c:	0801531c 	.word	0x0801531c
 800cf70:	20006864 	.word	0x20006864
 800cf74:	20006868 	.word	0x20006868
 800cf78:	2000686e 	.word	0x2000686e
 800cf7c:	20006854 	.word	0x20006854
 800cf80:	20009ce4 	.word	0x20009ce4
 800cf84:	20009ce8 	.word	0x20009ce8
 800cf88:	2000d3ec 	.word	0x2000d3ec

0800cf8c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cf8c:	b590      	push	{r4, r7, lr}
 800cf8e:	b08d      	sub	sp, #52	; 0x34
 800cf90:	af04      	add	r7, sp, #16
 800cf92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cf94:	2300      	movs	r3, #0
 800cf96:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d106      	bne.n	800cfb0 <tcp_process+0x24>
 800cfa2:	4ba5      	ldr	r3, [pc, #660]	; (800d238 <tcp_process+0x2ac>)
 800cfa4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800cfa8:	49a4      	ldr	r1, [pc, #656]	; (800d23c <tcp_process+0x2b0>)
 800cfaa:	48a5      	ldr	r0, [pc, #660]	; (800d240 <tcp_process+0x2b4>)
 800cfac:	f006 f8e4 	bl	8013178 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cfb0:	4ba4      	ldr	r3, [pc, #656]	; (800d244 <tcp_process+0x2b8>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	f003 0304 	and.w	r3, r3, #4
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d04e      	beq.n	800d05a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7d1b      	ldrb	r3, [r3, #20]
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d108      	bne.n	800cfd6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfc8:	4b9f      	ldr	r3, [pc, #636]	; (800d248 <tcp_process+0x2bc>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d123      	bne.n	800d018 <tcp_process+0x8c>
        acceptable = 1;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	76fb      	strb	r3, [r7, #27]
 800cfd4:	e020      	b.n	800d018 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfda:	4b9c      	ldr	r3, [pc, #624]	; (800d24c <tcp_process+0x2c0>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d102      	bne.n	800cfe8 <tcp_process+0x5c>
        acceptable = 1;
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	76fb      	strb	r3, [r7, #27]
 800cfe6:	e017      	b.n	800d018 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cfe8:	4b98      	ldr	r3, [pc, #608]	; (800d24c <tcp_process+0x2c0>)
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	db10      	blt.n	800d018 <tcp_process+0x8c>
 800cff6:	4b95      	ldr	r3, [pc, #596]	; (800d24c <tcp_process+0x2c0>)
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffe:	6879      	ldr	r1, [r7, #4]
 800d000:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d002:	440b      	add	r3, r1
 800d004:	1ad3      	subs	r3, r2, r3
 800d006:	2b00      	cmp	r3, #0
 800d008:	dc06      	bgt.n	800d018 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	8b5b      	ldrh	r3, [r3, #26]
 800d00e:	f043 0302 	orr.w	r3, r3, #2
 800d012:	b29a      	uxth	r2, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d018:	7efb      	ldrb	r3, [r7, #27]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d01b      	beq.n	800d056 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	7d1b      	ldrb	r3, [r3, #20]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d106      	bne.n	800d034 <tcp_process+0xa8>
 800d026:	4b84      	ldr	r3, [pc, #528]	; (800d238 <tcp_process+0x2ac>)
 800d028:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d02c:	4988      	ldr	r1, [pc, #544]	; (800d250 <tcp_process+0x2c4>)
 800d02e:	4884      	ldr	r0, [pc, #528]	; (800d240 <tcp_process+0x2b4>)
 800d030:	f006 f8a2 	bl	8013178 <iprintf>
      recv_flags |= TF_RESET;
 800d034:	4b87      	ldr	r3, [pc, #540]	; (800d254 <tcp_process+0x2c8>)
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	f043 0308 	orr.w	r3, r3, #8
 800d03c:	b2da      	uxtb	r2, r3
 800d03e:	4b85      	ldr	r3, [pc, #532]	; (800d254 <tcp_process+0x2c8>)
 800d040:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	8b5b      	ldrh	r3, [r3, #26]
 800d046:	f023 0301 	bic.w	r3, r3, #1
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d050:	f06f 030d 	mvn.w	r3, #13
 800d054:	e37a      	b.n	800d74c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d056:	2300      	movs	r3, #0
 800d058:	e378      	b.n	800d74c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d05a:	4b7a      	ldr	r3, [pc, #488]	; (800d244 <tcp_process+0x2b8>)
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	f003 0302 	and.w	r3, r3, #2
 800d062:	2b00      	cmp	r3, #0
 800d064:	d010      	beq.n	800d088 <tcp_process+0xfc>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	7d1b      	ldrb	r3, [r3, #20]
 800d06a:	2b02      	cmp	r3, #2
 800d06c:	d00c      	beq.n	800d088 <tcp_process+0xfc>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	7d1b      	ldrb	r3, [r3, #20]
 800d072:	2b03      	cmp	r3, #3
 800d074:	d008      	beq.n	800d088 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	8b5b      	ldrh	r3, [r3, #26]
 800d07a:	f043 0302 	orr.w	r3, r3, #2
 800d07e:	b29a      	uxth	r2, r3
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d084:	2300      	movs	r3, #0
 800d086:	e361      	b.n	800d74c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	8b5b      	ldrh	r3, [r3, #26]
 800d08c:	f003 0310 	and.w	r3, r3, #16
 800d090:	2b00      	cmp	r3, #0
 800d092:	d103      	bne.n	800d09c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d094:	4b70      	ldr	r3, [pc, #448]	; (800d258 <tcp_process+0x2cc>)
 800d096:	681a      	ldr	r2, [r3, #0]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f001 fc2d 	bl	800e90c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	7d1b      	ldrb	r3, [r3, #20]
 800d0b6:	3b02      	subs	r3, #2
 800d0b8:	2b07      	cmp	r3, #7
 800d0ba:	f200 8337 	bhi.w	800d72c <tcp_process+0x7a0>
 800d0be:	a201      	add	r2, pc, #4	; (adr r2, 800d0c4 <tcp_process+0x138>)
 800d0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c4:	0800d0e5 	.word	0x0800d0e5
 800d0c8:	0800d315 	.word	0x0800d315
 800d0cc:	0800d48d 	.word	0x0800d48d
 800d0d0:	0800d4b7 	.word	0x0800d4b7
 800d0d4:	0800d5db 	.word	0x0800d5db
 800d0d8:	0800d48d 	.word	0x0800d48d
 800d0dc:	0800d667 	.word	0x0800d667
 800d0e0:	0800d6f7 	.word	0x0800d6f7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d0e4:	4b57      	ldr	r3, [pc, #348]	; (800d244 <tcp_process+0x2b8>)
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	f003 0310 	and.w	r3, r3, #16
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f000 80e4 	beq.w	800d2ba <tcp_process+0x32e>
 800d0f2:	4b54      	ldr	r3, [pc, #336]	; (800d244 <tcp_process+0x2b8>)
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	f003 0302 	and.w	r3, r3, #2
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f000 80dd 	beq.w	800d2ba <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d104:	1c5a      	adds	r2, r3, #1
 800d106:	4b50      	ldr	r3, [pc, #320]	; (800d248 <tcp_process+0x2bc>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	f040 80d5 	bne.w	800d2ba <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d110:	4b4e      	ldr	r3, [pc, #312]	; (800d24c <tcp_process+0x2c0>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	1c5a      	adds	r2, r3, #1
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d122:	4b49      	ldr	r3, [pc, #292]	; (800d248 <tcp_process+0x2bc>)
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d12a:	4b4c      	ldr	r3, [pc, #304]	; (800d25c <tcp_process+0x2d0>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	89db      	ldrh	r3, [r3, #14]
 800d130:	b29a      	uxth	r2, r3
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d144:	4b41      	ldr	r3, [pc, #260]	; (800d24c <tcp_process+0x2c0>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	1e5a      	subs	r2, r3, #1
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2204      	movs	r2, #4
 800d152:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	3304      	adds	r3, #4
 800d15c:	4618      	mov	r0, r3
 800d15e:	f004 fb1f 	bl	80117a0 <ip4_route>
 800d162:	4601      	mov	r1, r0
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	3304      	adds	r3, #4
 800d168:	461a      	mov	r2, r3
 800d16a:	4620      	mov	r0, r4
 800d16c:	f7ff f88e 	bl	800c28c <tcp_eff_send_mss_netif>
 800d170:	4603      	mov	r3, r0
 800d172:	461a      	mov	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d17c:	009a      	lsls	r2, r3, #2
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d182:	005b      	lsls	r3, r3, #1
 800d184:	f241 111c 	movw	r1, #4380	; 0x111c
 800d188:	428b      	cmp	r3, r1
 800d18a:	bf38      	it	cc
 800d18c:	460b      	movcc	r3, r1
 800d18e:	429a      	cmp	r2, r3
 800d190:	d204      	bcs.n	800d19c <tcp_process+0x210>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	b29b      	uxth	r3, r3
 800d19a:	e00d      	b.n	800d1b8 <tcp_process+0x22c>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1a0:	005b      	lsls	r3, r3, #1
 800d1a2:	f241 121c 	movw	r2, #4380	; 0x111c
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d904      	bls.n	800d1b4 <tcp_process+0x228>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1ae:	005b      	lsls	r3, r3, #1
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	e001      	b.n	800d1b8 <tcp_process+0x22c>
 800d1b4:	f241 131c 	movw	r3, #4380	; 0x111c
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d106      	bne.n	800d1d6 <tcp_process+0x24a>
 800d1c8:	4b1b      	ldr	r3, [pc, #108]	; (800d238 <tcp_process+0x2ac>)
 800d1ca:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d1ce:	4924      	ldr	r1, [pc, #144]	; (800d260 <tcp_process+0x2d4>)
 800d1d0:	481b      	ldr	r0, [pc, #108]	; (800d240 <tcp_process+0x2b4>)
 800d1d2:	f005 ffd1 	bl	8013178 <iprintf>
        --pcb->snd_queuelen;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1ea:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d111      	bne.n	800d216 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1f6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d106      	bne.n	800d20c <tcp_process+0x280>
 800d1fe:	4b0e      	ldr	r3, [pc, #56]	; (800d238 <tcp_process+0x2ac>)
 800d200:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d204:	4917      	ldr	r1, [pc, #92]	; (800d264 <tcp_process+0x2d8>)
 800d206:	480e      	ldr	r0, [pc, #56]	; (800d240 <tcp_process+0x2b4>)
 800d208:	f005 ffb6 	bl	8013178 <iprintf>
          pcb->unsent = rseg->next;
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	66da      	str	r2, [r3, #108]	; 0x6c
 800d214:	e003      	b.n	800d21e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d21e:	69f8      	ldr	r0, [r7, #28]
 800d220:	f7fe fd3d 	bl	800bc9e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d11d      	bne.n	800d268 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d232:	861a      	strh	r2, [r3, #48]	; 0x30
 800d234:	e01f      	b.n	800d276 <tcp_process+0x2ea>
 800d236:	bf00      	nop
 800d238:	080152d0 	.word	0x080152d0
 800d23c:	08015508 	.word	0x08015508
 800d240:	0801531c 	.word	0x0801531c
 800d244:	20006870 	.word	0x20006870
 800d248:	20006868 	.word	0x20006868
 800d24c:	20006864 	.word	0x20006864
 800d250:	08015524 	.word	0x08015524
 800d254:	20006871 	.word	0x20006871
 800d258:	2000d3ec 	.word	0x2000d3ec
 800d25c:	20006854 	.word	0x20006854
 800d260:	08015544 	.word	0x08015544
 800d264:	0801555c 	.word	0x0801555c
        } else {
          pcb->rtime = 0;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00a      	beq.n	800d296 <tcp_process+0x30a>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	6910      	ldr	r0, [r2, #16]
 800d28a:	2200      	movs	r2, #0
 800d28c:	6879      	ldr	r1, [r7, #4]
 800d28e:	4798      	blx	r3
 800d290:	4603      	mov	r3, r0
 800d292:	76bb      	strb	r3, [r7, #26]
 800d294:	e001      	b.n	800d29a <tcp_process+0x30e>
 800d296:	2300      	movs	r3, #0
 800d298:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d29a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d29e:	f113 0f0d 	cmn.w	r3, #13
 800d2a2:	d102      	bne.n	800d2aa <tcp_process+0x31e>
          return ERR_ABRT;
 800d2a4:	f06f 030c 	mvn.w	r3, #12
 800d2a8:	e250      	b.n	800d74c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	8b5b      	ldrh	r3, [r3, #26]
 800d2ae:	f043 0302 	orr.w	r3, r3, #2
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d2b8:	e23a      	b.n	800d730 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d2ba:	4b9d      	ldr	r3, [pc, #628]	; (800d530 <tcp_process+0x5a4>)
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	f003 0310 	and.w	r3, r3, #16
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f000 8234 	beq.w	800d730 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2c8:	4b9a      	ldr	r3, [pc, #616]	; (800d534 <tcp_process+0x5a8>)
 800d2ca:	6819      	ldr	r1, [r3, #0]
 800d2cc:	4b9a      	ldr	r3, [pc, #616]	; (800d538 <tcp_process+0x5ac>)
 800d2ce:	881b      	ldrh	r3, [r3, #0]
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	4b9a      	ldr	r3, [pc, #616]	; (800d53c <tcp_process+0x5b0>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2d8:	4b99      	ldr	r3, [pc, #612]	; (800d540 <tcp_process+0x5b4>)
 800d2da:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2dc:	885b      	ldrh	r3, [r3, #2]
 800d2de:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2e0:	4a97      	ldr	r2, [pc, #604]	; (800d540 <tcp_process+0x5b4>)
 800d2e2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2e4:	8812      	ldrh	r2, [r2, #0]
 800d2e6:	b292      	uxth	r2, r2
 800d2e8:	9202      	str	r2, [sp, #8]
 800d2ea:	9301      	str	r3, [sp, #4]
 800d2ec:	4b95      	ldr	r3, [pc, #596]	; (800d544 <tcp_process+0x5b8>)
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	4b95      	ldr	r3, [pc, #596]	; (800d548 <tcp_process+0x5bc>)
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f002 fc83 	bl	800fc00 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d300:	2b05      	cmp	r3, #5
 800d302:	f200 8215 	bhi.w	800d730 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f002 fa4d 	bl	800f7ac <tcp_rexmit_rto>
      break;
 800d312:	e20d      	b.n	800d730 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d314:	4b86      	ldr	r3, [pc, #536]	; (800d530 <tcp_process+0x5a4>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	f003 0310 	and.w	r3, r3, #16
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f000 80a1 	beq.w	800d464 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d322:	4b84      	ldr	r3, [pc, #528]	; (800d534 <tcp_process+0x5a8>)
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	3b01      	subs	r3, #1
 800d32e:	2b00      	cmp	r3, #0
 800d330:	db7e      	blt.n	800d430 <tcp_process+0x4a4>
 800d332:	4b80      	ldr	r3, [pc, #512]	; (800d534 <tcp_process+0x5a8>)
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d33a:	1ad3      	subs	r3, r2, r3
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	dc77      	bgt.n	800d430 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2204      	movs	r2, #4
 800d344:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d102      	bne.n	800d354 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d34e:	23fa      	movs	r3, #250	; 0xfa
 800d350:	76bb      	strb	r3, [r7, #26]
 800d352:	e01d      	b.n	800d390 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d358:	699b      	ldr	r3, [r3, #24]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d106      	bne.n	800d36c <tcp_process+0x3e0>
 800d35e:	4b7b      	ldr	r3, [pc, #492]	; (800d54c <tcp_process+0x5c0>)
 800d360:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d364:	497a      	ldr	r1, [pc, #488]	; (800d550 <tcp_process+0x5c4>)
 800d366:	487b      	ldr	r0, [pc, #492]	; (800d554 <tcp_process+0x5c8>)
 800d368:	f005 ff06 	bl	8013178 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d370:	699b      	ldr	r3, [r3, #24]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00a      	beq.n	800d38c <tcp_process+0x400>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d37a:	699b      	ldr	r3, [r3, #24]
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	6910      	ldr	r0, [r2, #16]
 800d380:	2200      	movs	r2, #0
 800d382:	6879      	ldr	r1, [r7, #4]
 800d384:	4798      	blx	r3
 800d386:	4603      	mov	r3, r0
 800d388:	76bb      	strb	r3, [r7, #26]
 800d38a:	e001      	b.n	800d390 <tcp_process+0x404>
 800d38c:	23f0      	movs	r3, #240	; 0xf0
 800d38e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d390:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00a      	beq.n	800d3ae <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d398:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d39c:	f113 0f0d 	cmn.w	r3, #13
 800d3a0:	d002      	beq.n	800d3a8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f7fd ff90 	bl	800b2c8 <tcp_abort>
            }
            return ERR_ABRT;
 800d3a8:	f06f 030c 	mvn.w	r3, #12
 800d3ac:	e1ce      	b.n	800d74c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 fae0 	bl	800d974 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d3b4:	4b68      	ldr	r3, [pc, #416]	; (800d558 <tcp_process+0x5cc>)
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d005      	beq.n	800d3c8 <tcp_process+0x43c>
            recv_acked--;
 800d3bc:	4b66      	ldr	r3, [pc, #408]	; (800d558 <tcp_process+0x5cc>)
 800d3be:	881b      	ldrh	r3, [r3, #0]
 800d3c0:	3b01      	subs	r3, #1
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	4b64      	ldr	r3, [pc, #400]	; (800d558 <tcp_process+0x5cc>)
 800d3c6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3cc:	009a      	lsls	r2, r3, #2
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3d2:	005b      	lsls	r3, r3, #1
 800d3d4:	f241 111c 	movw	r1, #4380	; 0x111c
 800d3d8:	428b      	cmp	r3, r1
 800d3da:	bf38      	it	cc
 800d3dc:	460b      	movcc	r3, r1
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d204      	bcs.n	800d3ec <tcp_process+0x460>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	e00d      	b.n	800d408 <tcp_process+0x47c>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3f0:	005b      	lsls	r3, r3, #1
 800d3f2:	f241 121c 	movw	r2, #4380	; 0x111c
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d904      	bls.n	800d404 <tcp_process+0x478>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3fe:	005b      	lsls	r3, r3, #1
 800d400:	b29b      	uxth	r3, r3
 800d402:	e001      	b.n	800d408 <tcp_process+0x47c>
 800d404:	f241 131c 	movw	r3, #4380	; 0x111c
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d40e:	4b53      	ldr	r3, [pc, #332]	; (800d55c <tcp_process+0x5d0>)
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	f003 0320 	and.w	r3, r3, #32
 800d416:	2b00      	cmp	r3, #0
 800d418:	d037      	beq.n	800d48a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	8b5b      	ldrh	r3, [r3, #26]
 800d41e:	f043 0302 	orr.w	r3, r3, #2
 800d422:	b29a      	uxth	r2, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2207      	movs	r2, #7
 800d42c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d42e:	e02c      	b.n	800d48a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d430:	4b40      	ldr	r3, [pc, #256]	; (800d534 <tcp_process+0x5a8>)
 800d432:	6819      	ldr	r1, [r3, #0]
 800d434:	4b40      	ldr	r3, [pc, #256]	; (800d538 <tcp_process+0x5ac>)
 800d436:	881b      	ldrh	r3, [r3, #0]
 800d438:	461a      	mov	r2, r3
 800d43a:	4b40      	ldr	r3, [pc, #256]	; (800d53c <tcp_process+0x5b0>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d440:	4b3f      	ldr	r3, [pc, #252]	; (800d540 <tcp_process+0x5b4>)
 800d442:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d444:	885b      	ldrh	r3, [r3, #2]
 800d446:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d448:	4a3d      	ldr	r2, [pc, #244]	; (800d540 <tcp_process+0x5b4>)
 800d44a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d44c:	8812      	ldrh	r2, [r2, #0]
 800d44e:	b292      	uxth	r2, r2
 800d450:	9202      	str	r2, [sp, #8]
 800d452:	9301      	str	r3, [sp, #4]
 800d454:	4b3b      	ldr	r3, [pc, #236]	; (800d544 <tcp_process+0x5b8>)
 800d456:	9300      	str	r3, [sp, #0]
 800d458:	4b3b      	ldr	r3, [pc, #236]	; (800d548 <tcp_process+0x5bc>)
 800d45a:	4602      	mov	r2, r0
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f002 fbcf 	bl	800fc00 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d462:	e167      	b.n	800d734 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d464:	4b32      	ldr	r3, [pc, #200]	; (800d530 <tcp_process+0x5a4>)
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	f003 0302 	and.w	r3, r3, #2
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f000 8161 	beq.w	800d734 <tcp_process+0x7a8>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d476:	1e5a      	subs	r2, r3, #1
 800d478:	4b30      	ldr	r3, [pc, #192]	; (800d53c <tcp_process+0x5b0>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	f040 8159 	bne.w	800d734 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f002 f9b4 	bl	800f7f0 <tcp_rexmit>
      break;
 800d488:	e154      	b.n	800d734 <tcp_process+0x7a8>
 800d48a:	e153      	b.n	800d734 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 fa71 	bl	800d974 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d492:	4b32      	ldr	r3, [pc, #200]	; (800d55c <tcp_process+0x5d0>)
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	f003 0320 	and.w	r3, r3, #32
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f000 814c 	beq.w	800d738 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	8b5b      	ldrh	r3, [r3, #26]
 800d4a4:	f043 0302 	orr.w	r3, r3, #2
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2207      	movs	r2, #7
 800d4b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d4b4:	e140      	b.n	800d738 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 fa5c 	bl	800d974 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d4bc:	4b27      	ldr	r3, [pc, #156]	; (800d55c <tcp_process+0x5d0>)
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	f003 0320 	and.w	r3, r3, #32
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d071      	beq.n	800d5ac <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d4c8:	4b19      	ldr	r3, [pc, #100]	; (800d530 <tcp_process+0x5a4>)
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	f003 0310 	and.w	r3, r3, #16
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d060      	beq.n	800d596 <tcp_process+0x60a>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4d8:	4b16      	ldr	r3, [pc, #88]	; (800d534 <tcp_process+0x5a8>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d15a      	bne.n	800d596 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d156      	bne.n	800d596 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	8b5b      	ldrh	r3, [r3, #26]
 800d4ec:	f043 0302 	orr.w	r3, r3, #2
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f7fe fdbe 	bl	800c078 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d4fc:	4b18      	ldr	r3, [pc, #96]	; (800d560 <tcp_process+0x5d4>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	429a      	cmp	r2, r3
 800d504:	d105      	bne.n	800d512 <tcp_process+0x586>
 800d506:	4b16      	ldr	r3, [pc, #88]	; (800d560 <tcp_process+0x5d4>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	4a14      	ldr	r2, [pc, #80]	; (800d560 <tcp_process+0x5d4>)
 800d50e:	6013      	str	r3, [r2, #0]
 800d510:	e02e      	b.n	800d570 <tcp_process+0x5e4>
 800d512:	4b13      	ldr	r3, [pc, #76]	; (800d560 <tcp_process+0x5d4>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	617b      	str	r3, [r7, #20]
 800d518:	e027      	b.n	800d56a <tcp_process+0x5de>
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	429a      	cmp	r2, r3
 800d522:	d11f      	bne.n	800d564 <tcp_process+0x5d8>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	68da      	ldr	r2, [r3, #12]
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	60da      	str	r2, [r3, #12]
 800d52c:	e020      	b.n	800d570 <tcp_process+0x5e4>
 800d52e:	bf00      	nop
 800d530:	20006870 	.word	0x20006870
 800d534:	20006868 	.word	0x20006868
 800d538:	2000686e 	.word	0x2000686e
 800d53c:	20006864 	.word	0x20006864
 800d540:	20006854 	.word	0x20006854
 800d544:	20009ce4 	.word	0x20009ce4
 800d548:	20009ce8 	.word	0x20009ce8
 800d54c:	080152d0 	.word	0x080152d0
 800d550:	08015570 	.word	0x08015570
 800d554:	0801531c 	.word	0x0801531c
 800d558:	2000686c 	.word	0x2000686c
 800d55c:	20006871 	.word	0x20006871
 800d560:	2000d3e8 	.word	0x2000d3e8
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	617b      	str	r3, [r7, #20]
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1d4      	bne.n	800d51a <tcp_process+0x58e>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	60da      	str	r2, [r3, #12]
 800d576:	4b77      	ldr	r3, [pc, #476]	; (800d754 <tcp_process+0x7c8>)
 800d578:	2201      	movs	r2, #1
 800d57a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	220a      	movs	r2, #10
 800d580:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d582:	4b75      	ldr	r3, [pc, #468]	; (800d758 <tcp_process+0x7cc>)
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	60da      	str	r2, [r3, #12]
 800d58a:	4a73      	ldr	r2, [pc, #460]	; (800d758 <tcp_process+0x7cc>)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6013      	str	r3, [r2, #0]
 800d590:	f002 fcf8 	bl	800ff84 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d594:	e0d2      	b.n	800d73c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	8b5b      	ldrh	r3, [r3, #26]
 800d59a:	f043 0302 	orr.w	r3, r3, #2
 800d59e:	b29a      	uxth	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2208      	movs	r2, #8
 800d5a8:	751a      	strb	r2, [r3, #20]
      break;
 800d5aa:	e0c7      	b.n	800d73c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d5ac:	4b6b      	ldr	r3, [pc, #428]	; (800d75c <tcp_process+0x7d0>)
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	f003 0310 	and.w	r3, r3, #16
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 80c1 	beq.w	800d73c <tcp_process+0x7b0>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5be:	4b68      	ldr	r3, [pc, #416]	; (800d760 <tcp_process+0x7d4>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	f040 80ba 	bne.w	800d73c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f040 80b5 	bne.w	800d73c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2206      	movs	r2, #6
 800d5d6:	751a      	strb	r2, [r3, #20]
      break;
 800d5d8:	e0b0      	b.n	800d73c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 f9ca 	bl	800d974 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d5e0:	4b60      	ldr	r3, [pc, #384]	; (800d764 <tcp_process+0x7d8>)
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	f003 0320 	and.w	r3, r3, #32
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	f000 80a9 	beq.w	800d740 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	8b5b      	ldrh	r3, [r3, #26]
 800d5f2:	f043 0302 	orr.w	r3, r3, #2
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f7fe fd3b 	bl	800c078 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d602:	4b59      	ldr	r3, [pc, #356]	; (800d768 <tcp_process+0x7dc>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d105      	bne.n	800d618 <tcp_process+0x68c>
 800d60c:	4b56      	ldr	r3, [pc, #344]	; (800d768 <tcp_process+0x7dc>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	68db      	ldr	r3, [r3, #12]
 800d612:	4a55      	ldr	r2, [pc, #340]	; (800d768 <tcp_process+0x7dc>)
 800d614:	6013      	str	r3, [r2, #0]
 800d616:	e013      	b.n	800d640 <tcp_process+0x6b4>
 800d618:	4b53      	ldr	r3, [pc, #332]	; (800d768 <tcp_process+0x7dc>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	613b      	str	r3, [r7, #16]
 800d61e:	e00c      	b.n	800d63a <tcp_process+0x6ae>
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	429a      	cmp	r2, r3
 800d628:	d104      	bne.n	800d634 <tcp_process+0x6a8>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	68da      	ldr	r2, [r3, #12]
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	60da      	str	r2, [r3, #12]
 800d632:	e005      	b.n	800d640 <tcp_process+0x6b4>
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	613b      	str	r3, [r7, #16]
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1ef      	bne.n	800d620 <tcp_process+0x694>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	60da      	str	r2, [r3, #12]
 800d646:	4b43      	ldr	r3, [pc, #268]	; (800d754 <tcp_process+0x7c8>)
 800d648:	2201      	movs	r2, #1
 800d64a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	220a      	movs	r2, #10
 800d650:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d652:	4b41      	ldr	r3, [pc, #260]	; (800d758 <tcp_process+0x7cc>)
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	60da      	str	r2, [r3, #12]
 800d65a:	4a3f      	ldr	r2, [pc, #252]	; (800d758 <tcp_process+0x7cc>)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6013      	str	r3, [r2, #0]
 800d660:	f002 fc90 	bl	800ff84 <tcp_timer_needed>
      }
      break;
 800d664:	e06c      	b.n	800d740 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f984 	bl	800d974 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d66c:	4b3b      	ldr	r3, [pc, #236]	; (800d75c <tcp_process+0x7d0>)
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	f003 0310 	and.w	r3, r3, #16
 800d674:	2b00      	cmp	r3, #0
 800d676:	d065      	beq.n	800d744 <tcp_process+0x7b8>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d67c:	4b38      	ldr	r3, [pc, #224]	; (800d760 <tcp_process+0x7d4>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	429a      	cmp	r2, r3
 800d682:	d15f      	bne.n	800d744 <tcp_process+0x7b8>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d15b      	bne.n	800d744 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7fe fcf3 	bl	800c078 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d692:	4b35      	ldr	r3, [pc, #212]	; (800d768 <tcp_process+0x7dc>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d105      	bne.n	800d6a8 <tcp_process+0x71c>
 800d69c:	4b32      	ldr	r3, [pc, #200]	; (800d768 <tcp_process+0x7dc>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	4a31      	ldr	r2, [pc, #196]	; (800d768 <tcp_process+0x7dc>)
 800d6a4:	6013      	str	r3, [r2, #0]
 800d6a6:	e013      	b.n	800d6d0 <tcp_process+0x744>
 800d6a8:	4b2f      	ldr	r3, [pc, #188]	; (800d768 <tcp_process+0x7dc>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	60fb      	str	r3, [r7, #12]
 800d6ae:	e00c      	b.n	800d6ca <tcp_process+0x73e>
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d104      	bne.n	800d6c4 <tcp_process+0x738>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	68da      	ldr	r2, [r3, #12]
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	60da      	str	r2, [r3, #12]
 800d6c2:	e005      	b.n	800d6d0 <tcp_process+0x744>
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	60fb      	str	r3, [r7, #12]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d1ef      	bne.n	800d6b0 <tcp_process+0x724>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	60da      	str	r2, [r3, #12]
 800d6d6:	4b1f      	ldr	r3, [pc, #124]	; (800d754 <tcp_process+0x7c8>)
 800d6d8:	2201      	movs	r2, #1
 800d6da:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	220a      	movs	r2, #10
 800d6e0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d6e2:	4b1d      	ldr	r3, [pc, #116]	; (800d758 <tcp_process+0x7cc>)
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	60da      	str	r2, [r3, #12]
 800d6ea:	4a1b      	ldr	r2, [pc, #108]	; (800d758 <tcp_process+0x7cc>)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6013      	str	r3, [r2, #0]
 800d6f0:	f002 fc48 	bl	800ff84 <tcp_timer_needed>
      }
      break;
 800d6f4:	e026      	b.n	800d744 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 f93c 	bl	800d974 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d6fc:	4b17      	ldr	r3, [pc, #92]	; (800d75c <tcp_process+0x7d0>)
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	f003 0310 	and.w	r3, r3, #16
 800d704:	2b00      	cmp	r3, #0
 800d706:	d01f      	beq.n	800d748 <tcp_process+0x7bc>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d70c:	4b14      	ldr	r3, [pc, #80]	; (800d760 <tcp_process+0x7d4>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	429a      	cmp	r2, r3
 800d712:	d119      	bne.n	800d748 <tcp_process+0x7bc>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d115      	bne.n	800d748 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d71c:	4b11      	ldr	r3, [pc, #68]	; (800d764 <tcp_process+0x7d8>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	f043 0310 	orr.w	r3, r3, #16
 800d724:	b2da      	uxtb	r2, r3
 800d726:	4b0f      	ldr	r3, [pc, #60]	; (800d764 <tcp_process+0x7d8>)
 800d728:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d72a:	e00d      	b.n	800d748 <tcp_process+0x7bc>
    default:
      break;
 800d72c:	bf00      	nop
 800d72e:	e00c      	b.n	800d74a <tcp_process+0x7be>
      break;
 800d730:	bf00      	nop
 800d732:	e00a      	b.n	800d74a <tcp_process+0x7be>
      break;
 800d734:	bf00      	nop
 800d736:	e008      	b.n	800d74a <tcp_process+0x7be>
      break;
 800d738:	bf00      	nop
 800d73a:	e006      	b.n	800d74a <tcp_process+0x7be>
      break;
 800d73c:	bf00      	nop
 800d73e:	e004      	b.n	800d74a <tcp_process+0x7be>
      break;
 800d740:	bf00      	nop
 800d742:	e002      	b.n	800d74a <tcp_process+0x7be>
      break;
 800d744:	bf00      	nop
 800d746:	e000      	b.n	800d74a <tcp_process+0x7be>
      break;
 800d748:	bf00      	nop
  }
  return ERR_OK;
 800d74a:	2300      	movs	r3, #0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3724      	adds	r7, #36	; 0x24
 800d750:	46bd      	mov	sp, r7
 800d752:	bd90      	pop	{r4, r7, pc}
 800d754:	2000d3e4 	.word	0x2000d3e4
 800d758:	2000d3f8 	.word	0x2000d3f8
 800d75c:	20006870 	.word	0x20006870
 800d760:	20006868 	.word	0x20006868
 800d764:	20006871 	.word	0x20006871
 800d768:	2000d3e8 	.word	0x2000d3e8

0800d76c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d76c:	b590      	push	{r4, r7, lr}
 800d76e:	b085      	sub	sp, #20
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d106      	bne.n	800d78a <tcp_oos_insert_segment+0x1e>
 800d77c:	4b3b      	ldr	r3, [pc, #236]	; (800d86c <tcp_oos_insert_segment+0x100>)
 800d77e:	f240 421f 	movw	r2, #1055	; 0x41f
 800d782:	493b      	ldr	r1, [pc, #236]	; (800d870 <tcp_oos_insert_segment+0x104>)
 800d784:	483b      	ldr	r0, [pc, #236]	; (800d874 <tcp_oos_insert_segment+0x108>)
 800d786:	f005 fcf7 	bl	8013178 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	899b      	ldrh	r3, [r3, #12]
 800d790:	b29b      	uxth	r3, r3
 800d792:	4618      	mov	r0, r3
 800d794:	f7fb fcbc 	bl	8009110 <lwip_htons>
 800d798:	4603      	mov	r3, r0
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	f003 0301 	and.w	r3, r3, #1
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d028      	beq.n	800d7f6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d7a4:	6838      	ldr	r0, [r7, #0]
 800d7a6:	f7fe fa65 	bl	800bc74 <tcp_segs_free>
    next = NULL;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	603b      	str	r3, [r7, #0]
 800d7ae:	e056      	b.n	800d85e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	899b      	ldrh	r3, [r3, #12]
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7fb fca9 	bl	8009110 <lwip_htons>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	f003 0301 	and.w	r3, r3, #1
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00d      	beq.n	800d7e6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	68db      	ldr	r3, [r3, #12]
 800d7ce:	899b      	ldrh	r3, [r3, #12]
 800d7d0:	b29c      	uxth	r4, r3
 800d7d2:	2001      	movs	r0, #1
 800d7d4:	f7fb fc9c 	bl	8009110 <lwip_htons>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	461a      	mov	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	68db      	ldr	r3, [r3, #12]
 800d7e0:	4322      	orrs	r2, r4
 800d7e2:	b292      	uxth	r2, r2
 800d7e4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f7fe fa54 	bl	800bc9e <tcp_seg_free>
    while (next &&
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00e      	beq.n	800d81a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	891b      	ldrh	r3, [r3, #8]
 800d800:	461a      	mov	r2, r3
 800d802:	4b1d      	ldr	r3, [pc, #116]	; (800d878 <tcp_oos_insert_segment+0x10c>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	441a      	add	r2, r3
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	6839      	ldr	r1, [r7, #0]
 800d810:	8909      	ldrh	r1, [r1, #8]
 800d812:	440b      	add	r3, r1
 800d814:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d816:	2b00      	cmp	r3, #0
 800d818:	daca      	bge.n	800d7b0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d01e      	beq.n	800d85e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	891b      	ldrh	r3, [r3, #8]
 800d824:	461a      	mov	r2, r3
 800d826:	4b14      	ldr	r3, [pc, #80]	; (800d878 <tcp_oos_insert_segment+0x10c>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	441a      	add	r2, r3
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	68db      	ldr	r3, [r3, #12]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d834:	2b00      	cmp	r3, #0
 800d836:	dd12      	ble.n	800d85e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	b29a      	uxth	r2, r3
 800d840:	4b0d      	ldr	r3, [pc, #52]	; (800d878 <tcp_oos_insert_segment+0x10c>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	b29b      	uxth	r3, r3
 800d846:	1ad3      	subs	r3, r2, r3
 800d848:	b29a      	uxth	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	685a      	ldr	r2, [r3, #4]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	891b      	ldrh	r3, [r3, #8]
 800d856:	4619      	mov	r1, r3
 800d858:	4610      	mov	r0, r2
 800d85a:	f7fc fe1b 	bl	800a494 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	683a      	ldr	r2, [r7, #0]
 800d862:	601a      	str	r2, [r3, #0]
}
 800d864:	bf00      	nop
 800d866:	3714      	adds	r7, #20
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd90      	pop	{r4, r7, pc}
 800d86c:	080152d0 	.word	0x080152d0
 800d870:	08015590 	.word	0x08015590
 800d874:	0801531c 	.word	0x0801531c
 800d878:	20006864 	.word	0x20006864

0800d87c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d87c:	b5b0      	push	{r4, r5, r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
 800d888:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d88a:	e03e      	b.n	800d90a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7fd f80e 	bl	800a8bc <pbuf_clen>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d8aa:	8a7a      	ldrh	r2, [r7, #18]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d906      	bls.n	800d8be <tcp_free_acked_segments+0x42>
 800d8b0:	4b2a      	ldr	r3, [pc, #168]	; (800d95c <tcp_free_acked_segments+0xe0>)
 800d8b2:	f240 4257 	movw	r2, #1111	; 0x457
 800d8b6:	492a      	ldr	r1, [pc, #168]	; (800d960 <tcp_free_acked_segments+0xe4>)
 800d8b8:	482a      	ldr	r0, [pc, #168]	; (800d964 <tcp_free_acked_segments+0xe8>)
 800d8ba:	f005 fc5d 	bl	8013178 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d8c4:	8a7b      	ldrh	r3, [r7, #18]
 800d8c6:	1ad3      	subs	r3, r2, r3
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	891a      	ldrh	r2, [r3, #8]
 800d8d4:	4b24      	ldr	r3, [pc, #144]	; (800d968 <tcp_free_acked_segments+0xec>)
 800d8d6:	881b      	ldrh	r3, [r3, #0]
 800d8d8:	4413      	add	r3, r2
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	4b22      	ldr	r3, [pc, #136]	; (800d968 <tcp_free_acked_segments+0xec>)
 800d8de:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d8e0:	6978      	ldr	r0, [r7, #20]
 800d8e2:	f7fe f9dc 	bl	800bc9e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00c      	beq.n	800d90a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d109      	bne.n	800d90a <tcp_free_acked_segments+0x8e>
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d106      	bne.n	800d90a <tcp_free_acked_segments+0x8e>
 800d8fc:	4b17      	ldr	r3, [pc, #92]	; (800d95c <tcp_free_acked_segments+0xe0>)
 800d8fe:	f240 4261 	movw	r2, #1121	; 0x461
 800d902:	491a      	ldr	r1, [pc, #104]	; (800d96c <tcp_free_acked_segments+0xf0>)
 800d904:	4817      	ldr	r0, [pc, #92]	; (800d964 <tcp_free_acked_segments+0xe8>)
 800d906:	f005 fc37 	bl	8013178 <iprintf>
  while (seg_list != NULL &&
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d020      	beq.n	800d952 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	4618      	mov	r0, r3
 800d918:	f7fb fc0f 	bl	800913a <lwip_htonl>
 800d91c:	4604      	mov	r4, r0
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	891b      	ldrh	r3, [r3, #8]
 800d922:	461d      	mov	r5, r3
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	899b      	ldrh	r3, [r3, #12]
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fb fbef 	bl	8009110 <lwip_htons>
 800d932:	4603      	mov	r3, r0
 800d934:	b2db      	uxtb	r3, r3
 800d936:	f003 0303 	and.w	r3, r3, #3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d001      	beq.n	800d942 <tcp_free_acked_segments+0xc6>
 800d93e:	2301      	movs	r3, #1
 800d940:	e000      	b.n	800d944 <tcp_free_acked_segments+0xc8>
 800d942:	2300      	movs	r3, #0
 800d944:	442b      	add	r3, r5
 800d946:	18e2      	adds	r2, r4, r3
 800d948:	4b09      	ldr	r3, [pc, #36]	; (800d970 <tcp_free_acked_segments+0xf4>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d94e:	2b00      	cmp	r3, #0
 800d950:	dd9c      	ble.n	800d88c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d952:	68bb      	ldr	r3, [r7, #8]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3718      	adds	r7, #24
 800d958:	46bd      	mov	sp, r7
 800d95a:	bdb0      	pop	{r4, r5, r7, pc}
 800d95c:	080152d0 	.word	0x080152d0
 800d960:	080155b8 	.word	0x080155b8
 800d964:	0801531c 	.word	0x0801531c
 800d968:	2000686c 	.word	0x2000686c
 800d96c:	080155e0 	.word	0x080155e0
 800d970:	20006868 	.word	0x20006868

0800d974 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d974:	b5b0      	push	{r4, r5, r7, lr}
 800d976:	b094      	sub	sp, #80	; 0x50
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d97c:	2300      	movs	r3, #0
 800d97e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d106      	bne.n	800d994 <tcp_receive+0x20>
 800d986:	4ba6      	ldr	r3, [pc, #664]	; (800dc20 <tcp_receive+0x2ac>)
 800d988:	f240 427b 	movw	r2, #1147	; 0x47b
 800d98c:	49a5      	ldr	r1, [pc, #660]	; (800dc24 <tcp_receive+0x2b0>)
 800d98e:	48a6      	ldr	r0, [pc, #664]	; (800dc28 <tcp_receive+0x2b4>)
 800d990:	f005 fbf2 	bl	8013178 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	7d1b      	ldrb	r3, [r3, #20]
 800d998:	2b03      	cmp	r3, #3
 800d99a:	d806      	bhi.n	800d9aa <tcp_receive+0x36>
 800d99c:	4ba0      	ldr	r3, [pc, #640]	; (800dc20 <tcp_receive+0x2ac>)
 800d99e:	f240 427c 	movw	r2, #1148	; 0x47c
 800d9a2:	49a2      	ldr	r1, [pc, #648]	; (800dc2c <tcp_receive+0x2b8>)
 800d9a4:	48a0      	ldr	r0, [pc, #640]	; (800dc28 <tcp_receive+0x2b4>)
 800d9a6:	f005 fbe7 	bl	8013178 <iprintf>

  if (flags & TCP_ACK) {
 800d9aa:	4ba1      	ldr	r3, [pc, #644]	; (800dc30 <tcp_receive+0x2bc>)
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	f003 0310 	and.w	r3, r3, #16
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	f000 8263 	beq.w	800de7e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9be:	461a      	mov	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9c4:	4413      	add	r3, r2
 800d9c6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9cc:	4b99      	ldr	r3, [pc, #612]	; (800dc34 <tcp_receive+0x2c0>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	1ad3      	subs	r3, r2, r3
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	db1b      	blt.n	800da0e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9da:	4b96      	ldr	r3, [pc, #600]	; (800dc34 <tcp_receive+0x2c0>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d106      	bne.n	800d9f0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d9e6:	4b94      	ldr	r3, [pc, #592]	; (800dc38 <tcp_receive+0x2c4>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	db0e      	blt.n	800da0e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d9f4:	4b90      	ldr	r3, [pc, #576]	; (800dc38 <tcp_receive+0x2c4>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d125      	bne.n	800da48 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d9fc:	4b8f      	ldr	r3, [pc, #572]	; (800dc3c <tcp_receive+0x2c8>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	89db      	ldrh	r3, [r3, #14]
 800da02:	b29a      	uxth	r2, r3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d91c      	bls.n	800da48 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800da0e:	4b8b      	ldr	r3, [pc, #556]	; (800dc3c <tcp_receive+0x2c8>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	89db      	ldrh	r3, [r3, #14]
 800da14:	b29a      	uxth	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da28:	429a      	cmp	r2, r3
 800da2a:	d205      	bcs.n	800da38 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800da38:	4b7e      	ldr	r3, [pc, #504]	; (800dc34 <tcp_receive+0x2c0>)
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800da40:	4b7d      	ldr	r3, [pc, #500]	; (800dc38 <tcp_receive+0x2c4>)
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800da48:	4b7b      	ldr	r3, [pc, #492]	; (800dc38 <tcp_receive+0x2c4>)
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da50:	1ad3      	subs	r3, r2, r3
 800da52:	2b00      	cmp	r3, #0
 800da54:	dc58      	bgt.n	800db08 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800da56:	4b7a      	ldr	r3, [pc, #488]	; (800dc40 <tcp_receive+0x2cc>)
 800da58:	881b      	ldrh	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d14b      	bne.n	800daf6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800da68:	4413      	add	r3, r2
 800da6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d142      	bne.n	800daf6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800da76:	2b00      	cmp	r3, #0
 800da78:	db3d      	blt.n	800daf6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da7e:	4b6e      	ldr	r3, [pc, #440]	; (800dc38 <tcp_receive+0x2c4>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	429a      	cmp	r2, r3
 800da84:	d137      	bne.n	800daf6 <tcp_receive+0x182>
              found_dupack = 1;
 800da86:	2301      	movs	r3, #1
 800da88:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da90:	2bff      	cmp	r3, #255	; 0xff
 800da92:	d007      	beq.n	800daa4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da9a:	3301      	adds	r3, #1
 800da9c:	b2da      	uxtb	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800daaa:	2b03      	cmp	r3, #3
 800daac:	d91b      	bls.n	800dae6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dab8:	4413      	add	r3, r2
 800daba:	b29a      	uxth	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d30a      	bcc.n	800dadc <tcp_receive+0x168>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dad0:	4413      	add	r3, r2
 800dad2:	b29a      	uxth	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dada:	e004      	b.n	800dae6 <tcp_receive+0x172>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dae2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800daec:	2b02      	cmp	r3, #2
 800daee:	d902      	bls.n	800daf6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f001 fee9 	bl	800f8c8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800daf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f040 8160 	bne.w	800ddbe <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db06:	e15a      	b.n	800ddbe <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db08:	4b4b      	ldr	r3, [pc, #300]	; (800dc38 <tcp_receive+0x2c4>)
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	3b01      	subs	r3, #1
 800db14:	2b00      	cmp	r3, #0
 800db16:	f2c0 814d 	blt.w	800ddb4 <tcp_receive+0x440>
 800db1a:	4b47      	ldr	r3, [pc, #284]	; (800dc38 <tcp_receive+0x2c4>)
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	2b00      	cmp	r3, #0
 800db26:	f300 8145 	bgt.w	800ddb4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	8b5b      	ldrh	r3, [r3, #26]
 800db2e:	f003 0304 	and.w	r3, r3, #4
 800db32:	2b00      	cmp	r3, #0
 800db34:	d010      	beq.n	800db58 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	8b5b      	ldrh	r3, [r3, #26]
 800db3a:	f023 0304 	bic.w	r3, r3, #4
 800db3e:	b29a      	uxth	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2200      	movs	r2, #0
 800db5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800db66:	10db      	asrs	r3, r3, #3
 800db68:	b21b      	sxth	r3, r3
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800db72:	b29b      	uxth	r3, r3
 800db74:	4413      	add	r3, r2
 800db76:	b29b      	uxth	r3, r3
 800db78:	b21a      	sxth	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800db80:	4b2d      	ldr	r3, [pc, #180]	; (800dc38 <tcp_receive+0x2c4>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	b29a      	uxth	r2, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800db98:	4b27      	ldr	r3, [pc, #156]	; (800dc38 <tcp_receive+0x2c4>)
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	7d1b      	ldrb	r3, [r3, #20]
 800dba4:	2b03      	cmp	r3, #3
 800dba6:	f240 8096 	bls.w	800dcd6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d244      	bcs.n	800dc44 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	8b5b      	ldrh	r3, [r3, #26]
 800dbbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d001      	beq.n	800dbca <tcp_receive+0x256>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e000      	b.n	800dbcc <tcp_receive+0x258>
 800dbca:	2302      	movs	r3, #2
 800dbcc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800dbd0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dbd4:	b29a      	uxth	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbda:	fb12 f303 	smulbb	r3, r2, r3
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	bf28      	it	cs
 800dbe6:	4613      	movcs	r3, r2
 800dbe8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dbf0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dbf2:	4413      	add	r3, r2
 800dbf4:	b29a      	uxth	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d309      	bcc.n	800dc14 <tcp_receive+0x2a0>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dc08:	4413      	add	r3, r2
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dc12:	e060      	b.n	800dcd6 <tcp_receive+0x362>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dc1e:	e05a      	b.n	800dcd6 <tcp_receive+0x362>
 800dc20:	080152d0 	.word	0x080152d0
 800dc24:	08015600 	.word	0x08015600
 800dc28:	0801531c 	.word	0x0801531c
 800dc2c:	0801561c 	.word	0x0801561c
 800dc30:	20006870 	.word	0x20006870
 800dc34:	20006864 	.word	0x20006864
 800dc38:	20006868 	.word	0x20006868
 800dc3c:	20006854 	.word	0x20006854
 800dc40:	2000686e 	.word	0x2000686e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dc4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc4c:	4413      	add	r3, r2
 800dc4e:	b29a      	uxth	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d309      	bcc.n	800dc6e <tcp_receive+0x2fa>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dc60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc62:	4413      	add	r3, r2
 800dc64:	b29a      	uxth	r2, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dc6c:	e004      	b.n	800dc78 <tcp_receive+0x304>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d326      	bcc.n	800dcd6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc94:	1ad3      	subs	r3, r2, r3
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dca8:	4413      	add	r3, r2
 800dcaa:	b29a      	uxth	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d30a      	bcc.n	800dccc <tcp_receive+0x358>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcc0:	4413      	add	r3, r2
 800dcc2:	b29a      	uxth	r2, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dcca:	e004      	b.n	800dcd6 <tcp_receive+0x362>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcde:	4a98      	ldr	r2, [pc, #608]	; (800df40 <tcp_receive+0x5cc>)
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f7ff fdcb 	bl	800d87c <tcp_free_acked_segments>
 800dce6:	4602      	mov	r2, r0
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcf4:	4a93      	ldr	r2, [pc, #588]	; (800df44 <tcp_receive+0x5d0>)
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f7ff fdc0 	bl	800d87c <tcp_free_acked_segments>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d104      	bne.n	800dd14 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd10:	861a      	strh	r2, [r3, #48]	; 0x30
 800dd12:	e002      	b.n	800dd1a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2200      	movs	r2, #0
 800dd18:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d103      	bne.n	800dd30 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800dd36:	4b84      	ldr	r3, [pc, #528]	; (800df48 <tcp_receive+0x5d4>)
 800dd38:	881b      	ldrh	r3, [r3, #0]
 800dd3a:	4413      	add	r3, r2
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	8b5b      	ldrh	r3, [r3, #26]
 800dd48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d035      	beq.n	800ddbc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d118      	bne.n	800dd8a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00c      	beq.n	800dd7a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd68:	68db      	ldr	r3, [r3, #12]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7fb f9e4 	bl	800913a <lwip_htonl>
 800dd72:	4603      	mov	r3, r0
 800dd74:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	dc20      	bgt.n	800ddbc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	8b5b      	ldrh	r3, [r3, #26]
 800dd7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dd88:	e018      	b.n	800ddbc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fb f9cf 	bl	800913a <lwip_htonl>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	1ae3      	subs	r3, r4, r3
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	dc0b      	bgt.n	800ddbc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	8b5b      	ldrh	r3, [r3, #26]
 800dda8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ddac:	b29a      	uxth	r2, r3
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ddb2:	e003      	b.n	800ddbc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f001 ff75 	bl	800fca4 <tcp_send_empty_ack>
 800ddba:	e000      	b.n	800ddbe <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ddbc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d05b      	beq.n	800de7e <tcp_receive+0x50a>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddca:	4b60      	ldr	r3, [pc, #384]	; (800df4c <tcp_receive+0x5d8>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	da54      	bge.n	800de7e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ddd4:	4b5e      	ldr	r3, [pc, #376]	; (800df50 <tcp_receive+0x5dc>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800dde8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ddf2:	10db      	asrs	r3, r3, #3
 800ddf4:	b21b      	sxth	r3, r3
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	1ad3      	subs	r3, r2, r3
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de06:	b29a      	uxth	r2, r3
 800de08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800de0c:	4413      	add	r3, r2
 800de0e:	b29b      	uxth	r3, r3
 800de10:	b21a      	sxth	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800de16:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	da05      	bge.n	800de2a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800de1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800de22:	425b      	negs	r3, r3
 800de24:	b29b      	uxth	r3, r3
 800de26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800de2a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de34:	109b      	asrs	r3, r3, #2
 800de36:	b21b      	sxth	r3, r3
 800de38:	b29b      	uxth	r3, r3
 800de3a:	1ad3      	subs	r3, r2, r3
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de48:	b29a      	uxth	r2, r3
 800de4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800de4e:	4413      	add	r3, r2
 800de50:	b29b      	uxth	r3, r3
 800de52:	b21a      	sxth	r2, r3
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de5e:	10db      	asrs	r3, r3, #3
 800de60:	b21b      	sxth	r3, r3
 800de62:	b29a      	uxth	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	4413      	add	r3, r2
 800de6e:	b29b      	uxth	r3, r3
 800de70:	b21a      	sxth	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800de7e:	4b35      	ldr	r3, [pc, #212]	; (800df54 <tcp_receive+0x5e0>)
 800de80:	881b      	ldrh	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	f000 84e1 	beq.w	800e84a <tcp_receive+0xed6>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	7d1b      	ldrb	r3, [r3, #20]
 800de8c:	2b06      	cmp	r3, #6
 800de8e:	f200 84dc 	bhi.w	800e84a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de96:	4b30      	ldr	r3, [pc, #192]	; (800df58 <tcp_receive+0x5e4>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	1ad3      	subs	r3, r2, r3
 800de9c:	3b01      	subs	r3, #1
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	f2c0 808e 	blt.w	800dfc0 <tcp_receive+0x64c>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dea8:	4b2a      	ldr	r3, [pc, #168]	; (800df54 <tcp_receive+0x5e0>)
 800deaa:	881b      	ldrh	r3, [r3, #0]
 800deac:	4619      	mov	r1, r3
 800deae:	4b2a      	ldr	r3, [pc, #168]	; (800df58 <tcp_receive+0x5e4>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	440b      	add	r3, r1
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	3301      	adds	r3, #1
 800deb8:	2b00      	cmp	r3, #0
 800deba:	f300 8081 	bgt.w	800dfc0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800debe:	4b27      	ldr	r3, [pc, #156]	; (800df5c <tcp_receive+0x5e8>)
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dec8:	4b23      	ldr	r3, [pc, #140]	; (800df58 <tcp_receive+0x5e4>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	1ad3      	subs	r3, r2, r3
 800dece:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ded0:	4b22      	ldr	r3, [pc, #136]	; (800df5c <tcp_receive+0x5e8>)
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d106      	bne.n	800dee6 <tcp_receive+0x572>
 800ded8:	4b21      	ldr	r3, [pc, #132]	; (800df60 <tcp_receive+0x5ec>)
 800deda:	f240 5294 	movw	r2, #1428	; 0x594
 800dede:	4921      	ldr	r1, [pc, #132]	; (800df64 <tcp_receive+0x5f0>)
 800dee0:	4821      	ldr	r0, [pc, #132]	; (800df68 <tcp_receive+0x5f4>)
 800dee2:	f005 f949 	bl	8013178 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800deec:	4293      	cmp	r3, r2
 800deee:	d906      	bls.n	800defe <tcp_receive+0x58a>
 800def0:	4b1b      	ldr	r3, [pc, #108]	; (800df60 <tcp_receive+0x5ec>)
 800def2:	f240 5295 	movw	r2, #1429	; 0x595
 800def6:	491d      	ldr	r1, [pc, #116]	; (800df6c <tcp_receive+0x5f8>)
 800def8:	481b      	ldr	r0, [pc, #108]	; (800df68 <tcp_receive+0x5f4>)
 800defa:	f005 f93d 	bl	8013178 <iprintf>
      off = (u16_t)off32;
 800defe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800df04:	4b15      	ldr	r3, [pc, #84]	; (800df5c <tcp_receive+0x5e8>)
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	891b      	ldrh	r3, [r3, #8]
 800df0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df0e:	429a      	cmp	r2, r3
 800df10:	d906      	bls.n	800df20 <tcp_receive+0x5ac>
 800df12:	4b13      	ldr	r3, [pc, #76]	; (800df60 <tcp_receive+0x5ec>)
 800df14:	f240 5297 	movw	r2, #1431	; 0x597
 800df18:	4915      	ldr	r1, [pc, #84]	; (800df70 <tcp_receive+0x5fc>)
 800df1a:	4813      	ldr	r0, [pc, #76]	; (800df68 <tcp_receive+0x5f4>)
 800df1c:	f005 f92c 	bl	8013178 <iprintf>
      inseg.len -= off;
 800df20:	4b0e      	ldr	r3, [pc, #56]	; (800df5c <tcp_receive+0x5e8>)
 800df22:	891a      	ldrh	r2, [r3, #8]
 800df24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	4b0b      	ldr	r3, [pc, #44]	; (800df5c <tcp_receive+0x5e8>)
 800df2e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800df30:	4b0a      	ldr	r3, [pc, #40]	; (800df5c <tcp_receive+0x5e8>)
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	891a      	ldrh	r2, [r3, #8]
 800df36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df3a:	1ad3      	subs	r3, r2, r3
 800df3c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800df3e:	e029      	b.n	800df94 <tcp_receive+0x620>
 800df40:	08015638 	.word	0x08015638
 800df44:	08015640 	.word	0x08015640
 800df48:	2000686c 	.word	0x2000686c
 800df4c:	20006868 	.word	0x20006868
 800df50:	2000d3ec 	.word	0x2000d3ec
 800df54:	2000686e 	.word	0x2000686e
 800df58:	20006864 	.word	0x20006864
 800df5c:	20006844 	.word	0x20006844
 800df60:	080152d0 	.word	0x080152d0
 800df64:	08015648 	.word	0x08015648
 800df68:	0801531c 	.word	0x0801531c
 800df6c:	08015658 	.word	0x08015658
 800df70:	08015668 	.word	0x08015668
        off -= p->len;
 800df74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df76:	895b      	ldrh	r3, [r3, #10]
 800df78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df7c:	1ad3      	subs	r3, r2, r3
 800df7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800df82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df84:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800df86:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800df88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df8a:	2200      	movs	r2, #0
 800df8c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800df8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800df94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df96:	895b      	ldrh	r3, [r3, #10]
 800df98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d8e9      	bhi.n	800df74 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800dfa0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dfa8:	f7fc fb74 	bl	800a694 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb0:	4a91      	ldr	r2, [pc, #580]	; (800e1f8 <tcp_receive+0x884>)
 800dfb2:	6013      	str	r3, [r2, #0]
 800dfb4:	4b91      	ldr	r3, [pc, #580]	; (800e1fc <tcp_receive+0x888>)
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	4a8f      	ldr	r2, [pc, #572]	; (800e1f8 <tcp_receive+0x884>)
 800dfba:	6812      	ldr	r2, [r2, #0]
 800dfbc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dfbe:	e00d      	b.n	800dfdc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800dfc0:	4b8d      	ldr	r3, [pc, #564]	; (800e1f8 <tcp_receive+0x884>)
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	da06      	bge.n	800dfdc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	8b5b      	ldrh	r3, [r3, #26]
 800dfd2:	f043 0302 	orr.w	r3, r3, #2
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dfdc:	4b86      	ldr	r3, [pc, #536]	; (800e1f8 <tcp_receive+0x884>)
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe4:	1ad3      	subs	r3, r2, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	f2c0 842a 	blt.w	800e840 <tcp_receive+0xecc>
 800dfec:	4b82      	ldr	r3, [pc, #520]	; (800e1f8 <tcp_receive+0x884>)
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff4:	6879      	ldr	r1, [r7, #4]
 800dff6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dff8:	440b      	add	r3, r1
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	3301      	adds	r3, #1
 800dffe:	2b00      	cmp	r3, #0
 800e000:	f300 841e 	bgt.w	800e840 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e008:	4b7b      	ldr	r3, [pc, #492]	; (800e1f8 <tcp_receive+0x884>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	f040 829a 	bne.w	800e546 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e012:	4b7a      	ldr	r3, [pc, #488]	; (800e1fc <tcp_receive+0x888>)
 800e014:	891c      	ldrh	r4, [r3, #8]
 800e016:	4b79      	ldr	r3, [pc, #484]	; (800e1fc <tcp_receive+0x888>)
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	899b      	ldrh	r3, [r3, #12]
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fb f876 	bl	8009110 <lwip_htons>
 800e024:	4603      	mov	r3, r0
 800e026:	b2db      	uxtb	r3, r3
 800e028:	f003 0303 	and.w	r3, r3, #3
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d001      	beq.n	800e034 <tcp_receive+0x6c0>
 800e030:	2301      	movs	r3, #1
 800e032:	e000      	b.n	800e036 <tcp_receive+0x6c2>
 800e034:	2300      	movs	r3, #0
 800e036:	4423      	add	r3, r4
 800e038:	b29a      	uxth	r2, r3
 800e03a:	4b71      	ldr	r3, [pc, #452]	; (800e200 <tcp_receive+0x88c>)
 800e03c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e042:	4b6f      	ldr	r3, [pc, #444]	; (800e200 <tcp_receive+0x88c>)
 800e044:	881b      	ldrh	r3, [r3, #0]
 800e046:	429a      	cmp	r2, r3
 800e048:	d275      	bcs.n	800e136 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e04a:	4b6c      	ldr	r3, [pc, #432]	; (800e1fc <tcp_receive+0x888>)
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	899b      	ldrh	r3, [r3, #12]
 800e050:	b29b      	uxth	r3, r3
 800e052:	4618      	mov	r0, r3
 800e054:	f7fb f85c 	bl	8009110 <lwip_htons>
 800e058:	4603      	mov	r3, r0
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	f003 0301 	and.w	r3, r3, #1
 800e060:	2b00      	cmp	r3, #0
 800e062:	d01f      	beq.n	800e0a4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e064:	4b65      	ldr	r3, [pc, #404]	; (800e1fc <tcp_receive+0x888>)
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	899b      	ldrh	r3, [r3, #12]
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	b21b      	sxth	r3, r3
 800e06e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e072:	b21c      	sxth	r4, r3
 800e074:	4b61      	ldr	r3, [pc, #388]	; (800e1fc <tcp_receive+0x888>)
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	899b      	ldrh	r3, [r3, #12]
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fb f847 	bl	8009110 <lwip_htons>
 800e082:	4603      	mov	r3, r0
 800e084:	b2db      	uxtb	r3, r3
 800e086:	b29b      	uxth	r3, r3
 800e088:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fb f83e 	bl	8009110 <lwip_htons>
 800e094:	4603      	mov	r3, r0
 800e096:	b21b      	sxth	r3, r3
 800e098:	4323      	orrs	r3, r4
 800e09a:	b21a      	sxth	r2, r3
 800e09c:	4b57      	ldr	r3, [pc, #348]	; (800e1fc <tcp_receive+0x888>)
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	b292      	uxth	r2, r2
 800e0a2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e0a8:	4b54      	ldr	r3, [pc, #336]	; (800e1fc <tcp_receive+0x888>)
 800e0aa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e0ac:	4b53      	ldr	r3, [pc, #332]	; (800e1fc <tcp_receive+0x888>)
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	899b      	ldrh	r3, [r3, #12]
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7fb f82b 	bl	8009110 <lwip_htons>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	f003 0302 	and.w	r3, r3, #2
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d005      	beq.n	800e0d2 <tcp_receive+0x75e>
            inseg.len -= 1;
 800e0c6:	4b4d      	ldr	r3, [pc, #308]	; (800e1fc <tcp_receive+0x888>)
 800e0c8:	891b      	ldrh	r3, [r3, #8]
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	b29a      	uxth	r2, r3
 800e0ce:	4b4b      	ldr	r3, [pc, #300]	; (800e1fc <tcp_receive+0x888>)
 800e0d0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e0d2:	4b4a      	ldr	r3, [pc, #296]	; (800e1fc <tcp_receive+0x888>)
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	4a49      	ldr	r2, [pc, #292]	; (800e1fc <tcp_receive+0x888>)
 800e0d8:	8912      	ldrh	r2, [r2, #8]
 800e0da:	4611      	mov	r1, r2
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fc f9d9 	bl	800a494 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e0e2:	4b46      	ldr	r3, [pc, #280]	; (800e1fc <tcp_receive+0x888>)
 800e0e4:	891c      	ldrh	r4, [r3, #8]
 800e0e6:	4b45      	ldr	r3, [pc, #276]	; (800e1fc <tcp_receive+0x888>)
 800e0e8:	68db      	ldr	r3, [r3, #12]
 800e0ea:	899b      	ldrh	r3, [r3, #12]
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7fb f80e 	bl	8009110 <lwip_htons>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	f003 0303 	and.w	r3, r3, #3
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d001      	beq.n	800e104 <tcp_receive+0x790>
 800e100:	2301      	movs	r3, #1
 800e102:	e000      	b.n	800e106 <tcp_receive+0x792>
 800e104:	2300      	movs	r3, #0
 800e106:	4423      	add	r3, r4
 800e108:	b29a      	uxth	r2, r3
 800e10a:	4b3d      	ldr	r3, [pc, #244]	; (800e200 <tcp_receive+0x88c>)
 800e10c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e10e:	4b3c      	ldr	r3, [pc, #240]	; (800e200 <tcp_receive+0x88c>)
 800e110:	881b      	ldrh	r3, [r3, #0]
 800e112:	461a      	mov	r2, r3
 800e114:	4b38      	ldr	r3, [pc, #224]	; (800e1f8 <tcp_receive+0x884>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	441a      	add	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e11e:	6879      	ldr	r1, [r7, #4]
 800e120:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e122:	440b      	add	r3, r1
 800e124:	429a      	cmp	r2, r3
 800e126:	d006      	beq.n	800e136 <tcp_receive+0x7c2>
 800e128:	4b36      	ldr	r3, [pc, #216]	; (800e204 <tcp_receive+0x890>)
 800e12a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e12e:	4936      	ldr	r1, [pc, #216]	; (800e208 <tcp_receive+0x894>)
 800e130:	4836      	ldr	r0, [pc, #216]	; (800e20c <tcp_receive+0x898>)
 800e132:	f005 f821 	bl	8013178 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f000 80e7 	beq.w	800e30e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e140:	4b2e      	ldr	r3, [pc, #184]	; (800e1fc <tcp_receive+0x888>)
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	899b      	ldrh	r3, [r3, #12]
 800e146:	b29b      	uxth	r3, r3
 800e148:	4618      	mov	r0, r3
 800e14a:	f7fa ffe1 	bl	8009110 <lwip_htons>
 800e14e:	4603      	mov	r3, r0
 800e150:	b2db      	uxtb	r3, r3
 800e152:	f003 0301 	and.w	r3, r3, #1
 800e156:	2b00      	cmp	r3, #0
 800e158:	d010      	beq.n	800e17c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e15a:	e00a      	b.n	800e172 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e160:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f7fd fd96 	bl	800bc9e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e176:	2b00      	cmp	r3, #0
 800e178:	d1f0      	bne.n	800e15c <tcp_receive+0x7e8>
 800e17a:	e0c8      	b.n	800e30e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e180:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e182:	e052      	b.n	800e22a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	899b      	ldrh	r3, [r3, #12]
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7fa ffbf 	bl	8009110 <lwip_htons>
 800e192:	4603      	mov	r3, r0
 800e194:	b2db      	uxtb	r3, r3
 800e196:	f003 0301 	and.w	r3, r3, #1
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d03d      	beq.n	800e21a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e19e:	4b17      	ldr	r3, [pc, #92]	; (800e1fc <tcp_receive+0x888>)
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	899b      	ldrh	r3, [r3, #12]
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fa ffb2 	bl	8009110 <lwip_htons>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d130      	bne.n	800e21a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e1b8:	4b10      	ldr	r3, [pc, #64]	; (800e1fc <tcp_receive+0x888>)
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	899b      	ldrh	r3, [r3, #12]
 800e1be:	b29c      	uxth	r4, r3
 800e1c0:	2001      	movs	r0, #1
 800e1c2:	f7fa ffa5 	bl	8009110 <lwip_htons>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	4b0c      	ldr	r3, [pc, #48]	; (800e1fc <tcp_receive+0x888>)
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	4322      	orrs	r2, r4
 800e1d0:	b292      	uxth	r2, r2
 800e1d2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e1d4:	4b09      	ldr	r3, [pc, #36]	; (800e1fc <tcp_receive+0x888>)
 800e1d6:	891c      	ldrh	r4, [r3, #8]
 800e1d8:	4b08      	ldr	r3, [pc, #32]	; (800e1fc <tcp_receive+0x888>)
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	899b      	ldrh	r3, [r3, #12]
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fa ff95 	bl	8009110 <lwip_htons>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	f003 0303 	and.w	r3, r3, #3
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d00e      	beq.n	800e210 <tcp_receive+0x89c>
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e00d      	b.n	800e212 <tcp_receive+0x89e>
 800e1f6:	bf00      	nop
 800e1f8:	20006864 	.word	0x20006864
 800e1fc:	20006844 	.word	0x20006844
 800e200:	2000686e 	.word	0x2000686e
 800e204:	080152d0 	.word	0x080152d0
 800e208:	08015678 	.word	0x08015678
 800e20c:	0801531c 	.word	0x0801531c
 800e210:	2300      	movs	r3, #0
 800e212:	4423      	add	r3, r4
 800e214:	b29a      	uxth	r2, r3
 800e216:	4b98      	ldr	r3, [pc, #608]	; (800e478 <tcp_receive+0xb04>)
 800e218:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e21c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e224:	6938      	ldr	r0, [r7, #16]
 800e226:	f7fd fd3a 	bl	800bc9e <tcp_seg_free>
            while (next &&
 800e22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d00e      	beq.n	800e24e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e230:	4b91      	ldr	r3, [pc, #580]	; (800e478 <tcp_receive+0xb04>)
 800e232:	881b      	ldrh	r3, [r3, #0]
 800e234:	461a      	mov	r2, r3
 800e236:	4b91      	ldr	r3, [pc, #580]	; (800e47c <tcp_receive+0xb08>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	441a      	add	r2, r3
 800e23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e244:	8909      	ldrh	r1, [r1, #8]
 800e246:	440b      	add	r3, r1
 800e248:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	da9a      	bge.n	800e184 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e250:	2b00      	cmp	r3, #0
 800e252:	d059      	beq.n	800e308 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e254:	4b88      	ldr	r3, [pc, #544]	; (800e478 <tcp_receive+0xb04>)
 800e256:	881b      	ldrh	r3, [r3, #0]
 800e258:	461a      	mov	r2, r3
 800e25a:	4b88      	ldr	r3, [pc, #544]	; (800e47c <tcp_receive+0xb08>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	441a      	add	r2, r3
 800e260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e262:	68db      	ldr	r3, [r3, #12]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e268:	2b00      	cmp	r3, #0
 800e26a:	dd4d      	ble.n	800e308 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	b29a      	uxth	r2, r3
 800e274:	4b81      	ldr	r3, [pc, #516]	; (800e47c <tcp_receive+0xb08>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	b29b      	uxth	r3, r3
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	b29a      	uxth	r2, r3
 800e27e:	4b80      	ldr	r3, [pc, #512]	; (800e480 <tcp_receive+0xb0c>)
 800e280:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e282:	4b7f      	ldr	r3, [pc, #508]	; (800e480 <tcp_receive+0xb0c>)
 800e284:	68db      	ldr	r3, [r3, #12]
 800e286:	899b      	ldrh	r3, [r3, #12]
 800e288:	b29b      	uxth	r3, r3
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7fa ff40 	bl	8009110 <lwip_htons>
 800e290:	4603      	mov	r3, r0
 800e292:	b2db      	uxtb	r3, r3
 800e294:	f003 0302 	and.w	r3, r3, #2
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d005      	beq.n	800e2a8 <tcp_receive+0x934>
                inseg.len -= 1;
 800e29c:	4b78      	ldr	r3, [pc, #480]	; (800e480 <tcp_receive+0xb0c>)
 800e29e:	891b      	ldrh	r3, [r3, #8]
 800e2a0:	3b01      	subs	r3, #1
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	4b76      	ldr	r3, [pc, #472]	; (800e480 <tcp_receive+0xb0c>)
 800e2a6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e2a8:	4b75      	ldr	r3, [pc, #468]	; (800e480 <tcp_receive+0xb0c>)
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	4a74      	ldr	r2, [pc, #464]	; (800e480 <tcp_receive+0xb0c>)
 800e2ae:	8912      	ldrh	r2, [r2, #8]
 800e2b0:	4611      	mov	r1, r2
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fc f8ee 	bl	800a494 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e2b8:	4b71      	ldr	r3, [pc, #452]	; (800e480 <tcp_receive+0xb0c>)
 800e2ba:	891c      	ldrh	r4, [r3, #8]
 800e2bc:	4b70      	ldr	r3, [pc, #448]	; (800e480 <tcp_receive+0xb0c>)
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	899b      	ldrh	r3, [r3, #12]
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7fa ff23 	bl	8009110 <lwip_htons>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	f003 0303 	and.w	r3, r3, #3
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d001      	beq.n	800e2da <tcp_receive+0x966>
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e000      	b.n	800e2dc <tcp_receive+0x968>
 800e2da:	2300      	movs	r3, #0
 800e2dc:	4423      	add	r3, r4
 800e2de:	b29a      	uxth	r2, r3
 800e2e0:	4b65      	ldr	r3, [pc, #404]	; (800e478 <tcp_receive+0xb04>)
 800e2e2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e2e4:	4b64      	ldr	r3, [pc, #400]	; (800e478 <tcp_receive+0xb04>)
 800e2e6:	881b      	ldrh	r3, [r3, #0]
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	4b64      	ldr	r3, [pc, #400]	; (800e47c <tcp_receive+0xb08>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	441a      	add	r2, r3
 800e2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d006      	beq.n	800e308 <tcp_receive+0x994>
 800e2fa:	4b62      	ldr	r3, [pc, #392]	; (800e484 <tcp_receive+0xb10>)
 800e2fc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e300:	4961      	ldr	r1, [pc, #388]	; (800e488 <tcp_receive+0xb14>)
 800e302:	4862      	ldr	r0, [pc, #392]	; (800e48c <tcp_receive+0xb18>)
 800e304:	f004 ff38 	bl	8013178 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e30c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e30e:	4b5a      	ldr	r3, [pc, #360]	; (800e478 <tcp_receive+0xb04>)
 800e310:	881b      	ldrh	r3, [r3, #0]
 800e312:	461a      	mov	r2, r3
 800e314:	4b59      	ldr	r3, [pc, #356]	; (800e47c <tcp_receive+0xb08>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	441a      	add	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e322:	4b55      	ldr	r3, [pc, #340]	; (800e478 <tcp_receive+0xb04>)
 800e324:	881b      	ldrh	r3, [r3, #0]
 800e326:	429a      	cmp	r2, r3
 800e328:	d206      	bcs.n	800e338 <tcp_receive+0x9c4>
 800e32a:	4b56      	ldr	r3, [pc, #344]	; (800e484 <tcp_receive+0xb10>)
 800e32c:	f240 6207 	movw	r2, #1543	; 0x607
 800e330:	4957      	ldr	r1, [pc, #348]	; (800e490 <tcp_receive+0xb1c>)
 800e332:	4856      	ldr	r0, [pc, #344]	; (800e48c <tcp_receive+0xb18>)
 800e334:	f004 ff20 	bl	8013178 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e33c:	4b4e      	ldr	r3, [pc, #312]	; (800e478 <tcp_receive+0xb04>)
 800e33e:	881b      	ldrh	r3, [r3, #0]
 800e340:	1ad3      	subs	r3, r2, r3
 800e342:	b29a      	uxth	r2, r3
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f7fc ffc9 	bl	800b2e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e34e:	4b4c      	ldr	r3, [pc, #304]	; (800e480 <tcp_receive+0xb0c>)
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	891b      	ldrh	r3, [r3, #8]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d006      	beq.n	800e366 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e358:	4b49      	ldr	r3, [pc, #292]	; (800e480 <tcp_receive+0xb0c>)
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	4a4d      	ldr	r2, [pc, #308]	; (800e494 <tcp_receive+0xb20>)
 800e35e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e360:	4b47      	ldr	r3, [pc, #284]	; (800e480 <tcp_receive+0xb0c>)
 800e362:	2200      	movs	r2, #0
 800e364:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e366:	4b46      	ldr	r3, [pc, #280]	; (800e480 <tcp_receive+0xb0c>)
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	899b      	ldrh	r3, [r3, #12]
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	4618      	mov	r0, r3
 800e370:	f7fa fece 	bl	8009110 <lwip_htons>
 800e374:	4603      	mov	r3, r0
 800e376:	b2db      	uxtb	r3, r3
 800e378:	f003 0301 	and.w	r3, r3, #1
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f000 80b8 	beq.w	800e4f2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e382:	4b45      	ldr	r3, [pc, #276]	; (800e498 <tcp_receive+0xb24>)
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	f043 0320 	orr.w	r3, r3, #32
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	4b42      	ldr	r3, [pc, #264]	; (800e498 <tcp_receive+0xb24>)
 800e38e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e390:	e0af      	b.n	800e4f2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e396:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	4a36      	ldr	r2, [pc, #216]	; (800e47c <tcp_receive+0xb08>)
 800e3a2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	891b      	ldrh	r3, [r3, #8]
 800e3a8:	461c      	mov	r4, r3
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	899b      	ldrh	r3, [r3, #12]
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fa feac 	bl	8009110 <lwip_htons>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	f003 0303 	and.w	r3, r3, #3
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d001      	beq.n	800e3c8 <tcp_receive+0xa54>
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	e000      	b.n	800e3ca <tcp_receive+0xa56>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	191a      	adds	r2, r3, r4
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d0:	441a      	add	r2, r3
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3da:	461c      	mov	r4, r3
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	891b      	ldrh	r3, [r3, #8]
 800e3e0:	461d      	mov	r5, r3
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	899b      	ldrh	r3, [r3, #12]
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7fa fe90 	bl	8009110 <lwip_htons>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	f003 0303 	and.w	r3, r3, #3
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d001      	beq.n	800e400 <tcp_receive+0xa8c>
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e000      	b.n	800e402 <tcp_receive+0xa8e>
 800e400:	2300      	movs	r3, #0
 800e402:	442b      	add	r3, r5
 800e404:	429c      	cmp	r4, r3
 800e406:	d206      	bcs.n	800e416 <tcp_receive+0xaa2>
 800e408:	4b1e      	ldr	r3, [pc, #120]	; (800e484 <tcp_receive+0xb10>)
 800e40a:	f240 622b 	movw	r2, #1579	; 0x62b
 800e40e:	4923      	ldr	r1, [pc, #140]	; (800e49c <tcp_receive+0xb28>)
 800e410:	481e      	ldr	r0, [pc, #120]	; (800e48c <tcp_receive+0xb18>)
 800e412:	f004 feb1 	bl	8013178 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	891b      	ldrh	r3, [r3, #8]
 800e41a:	461c      	mov	r4, r3
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	68db      	ldr	r3, [r3, #12]
 800e420:	899b      	ldrh	r3, [r3, #12]
 800e422:	b29b      	uxth	r3, r3
 800e424:	4618      	mov	r0, r3
 800e426:	f7fa fe73 	bl	8009110 <lwip_htons>
 800e42a:	4603      	mov	r3, r0
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	f003 0303 	and.w	r3, r3, #3
 800e432:	2b00      	cmp	r3, #0
 800e434:	d001      	beq.n	800e43a <tcp_receive+0xac6>
 800e436:	2301      	movs	r3, #1
 800e438:	e000      	b.n	800e43c <tcp_receive+0xac8>
 800e43a:	2300      	movs	r3, #0
 800e43c:	1919      	adds	r1, r3, r4
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e442:	b28b      	uxth	r3, r1
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	b29a      	uxth	r2, r3
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f7fc ff47 	bl	800b2e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	891b      	ldrh	r3, [r3, #8]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d028      	beq.n	800e4ae <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e45c:	4b0d      	ldr	r3, [pc, #52]	; (800e494 <tcp_receive+0xb20>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d01d      	beq.n	800e4a0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e464:	4b0b      	ldr	r3, [pc, #44]	; (800e494 <tcp_receive+0xb20>)
 800e466:	681a      	ldr	r2, [r3, #0]
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	4619      	mov	r1, r3
 800e46e:	4610      	mov	r0, r2
 800e470:	f7fc fa64 	bl	800a93c <pbuf_cat>
 800e474:	e018      	b.n	800e4a8 <tcp_receive+0xb34>
 800e476:	bf00      	nop
 800e478:	2000686e 	.word	0x2000686e
 800e47c:	20006864 	.word	0x20006864
 800e480:	20006844 	.word	0x20006844
 800e484:	080152d0 	.word	0x080152d0
 800e488:	080156b0 	.word	0x080156b0
 800e48c:	0801531c 	.word	0x0801531c
 800e490:	080156ec 	.word	0x080156ec
 800e494:	20006874 	.word	0x20006874
 800e498:	20006871 	.word	0x20006871
 800e49c:	0801570c 	.word	0x0801570c
            } else {
              recv_data = cseg->p;
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	4a70      	ldr	r2, [pc, #448]	; (800e668 <tcp_receive+0xcf4>)
 800e4a6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	899b      	ldrh	r3, [r3, #12]
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7fa fe2a 	bl	8009110 <lwip_htons>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	f003 0301 	and.w	r3, r3, #1
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00d      	beq.n	800e4e4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e4c8:	4b68      	ldr	r3, [pc, #416]	; (800e66c <tcp_receive+0xcf8>)
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	f043 0320 	orr.w	r3, r3, #32
 800e4d0:	b2da      	uxtb	r2, r3
 800e4d2:	4b66      	ldr	r3, [pc, #408]	; (800e66c <tcp_receive+0xcf8>)
 800e4d4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	7d1b      	ldrb	r3, [r3, #20]
 800e4da:	2b04      	cmp	r3, #4
 800e4dc:	d102      	bne.n	800e4e4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2207      	movs	r2, #7
 800e4e2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e4ec:	68b8      	ldr	r0, [r7, #8]
 800e4ee:	f7fd fbd6 	bl	800bc9e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d008      	beq.n	800e50c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	685a      	ldr	r2, [r3, #4]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e506:	429a      	cmp	r2, r3
 800e508:	f43f af43 	beq.w	800e392 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	8b5b      	ldrh	r3, [r3, #26]
 800e510:	f003 0301 	and.w	r3, r3, #1
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00e      	beq.n	800e536 <tcp_receive+0xbc2>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	8b5b      	ldrh	r3, [r3, #26]
 800e51c:	f023 0301 	bic.w	r3, r3, #1
 800e520:	b29a      	uxth	r2, r3
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	835a      	strh	r2, [r3, #26]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	8b5b      	ldrh	r3, [r3, #26]
 800e52a:	f043 0302 	orr.w	r3, r3, #2
 800e52e:	b29a      	uxth	r2, r3
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e534:	e188      	b.n	800e848 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	8b5b      	ldrh	r3, [r3, #26]
 800e53a:	f043 0301 	orr.w	r3, r3, #1
 800e53e:	b29a      	uxth	r2, r3
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e544:	e180      	b.n	800e848 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d106      	bne.n	800e55c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e54e:	4848      	ldr	r0, [pc, #288]	; (800e670 <tcp_receive+0xcfc>)
 800e550:	f7fd fbbe 	bl	800bcd0 <tcp_seg_copy>
 800e554:	4602      	mov	r2, r0
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	675a      	str	r2, [r3, #116]	; 0x74
 800e55a:	e16d      	b.n	800e838 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e55c:	2300      	movs	r3, #0
 800e55e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e564:	63bb      	str	r3, [r7, #56]	; 0x38
 800e566:	e157      	b.n	800e818 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800e568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	685a      	ldr	r2, [r3, #4]
 800e56e:	4b41      	ldr	r3, [pc, #260]	; (800e674 <tcp_receive+0xd00>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	429a      	cmp	r2, r3
 800e574:	d11d      	bne.n	800e5b2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e576:	4b3e      	ldr	r3, [pc, #248]	; (800e670 <tcp_receive+0xcfc>)
 800e578:	891a      	ldrh	r2, [r3, #8]
 800e57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57c:	891b      	ldrh	r3, [r3, #8]
 800e57e:	429a      	cmp	r2, r3
 800e580:	f240 814f 	bls.w	800e822 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e584:	483a      	ldr	r0, [pc, #232]	; (800e670 <tcp_receive+0xcfc>)
 800e586:	f7fd fba3 	bl	800bcd0 <tcp_seg_copy>
 800e58a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	f000 8149 	beq.w	800e826 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800e594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e596:	2b00      	cmp	r3, #0
 800e598:	d003      	beq.n	800e5a2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800e59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e59c:	697a      	ldr	r2, [r7, #20]
 800e59e:	601a      	str	r2, [r3, #0]
 800e5a0:	e002      	b.n	800e5a8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	697a      	ldr	r2, [r7, #20]
 800e5a6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e5a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5aa:	6978      	ldr	r0, [r7, #20]
 800e5ac:	f7ff f8de 	bl	800d76c <tcp_oos_insert_segment>
                }
                break;
 800e5b0:	e139      	b.n	800e826 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d117      	bne.n	800e5e8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e5b8:	4b2e      	ldr	r3, [pc, #184]	; (800e674 <tcp_receive+0xd00>)
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5be:	68db      	ldr	r3, [r3, #12]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	da57      	bge.n	800e678 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e5c8:	4829      	ldr	r0, [pc, #164]	; (800e670 <tcp_receive+0xcfc>)
 800e5ca:	f7fd fb81 	bl	800bcd0 <tcp_seg_copy>
 800e5ce:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f000 8129 	beq.w	800e82a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	69ba      	ldr	r2, [r7, #24]
 800e5dc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e5de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5e0:	69b8      	ldr	r0, [r7, #24]
 800e5e2:	f7ff f8c3 	bl	800d76c <tcp_oos_insert_segment>
                  }
                  break;
 800e5e6:	e120      	b.n	800e82a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e5e8:	4b22      	ldr	r3, [pc, #136]	; (800e674 <tcp_receive+0xd00>)
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	3b01      	subs	r3, #1
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	db3e      	blt.n	800e678 <tcp_receive+0xd04>
 800e5fa:	4b1e      	ldr	r3, [pc, #120]	; (800e674 <tcp_receive+0xd00>)
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	1ad3      	subs	r3, r2, r3
 800e606:	3301      	adds	r3, #1
 800e608:	2b00      	cmp	r3, #0
 800e60a:	dc35      	bgt.n	800e678 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e60c:	4818      	ldr	r0, [pc, #96]	; (800e670 <tcp_receive+0xcfc>)
 800e60e:	f7fd fb5f 	bl	800bcd0 <tcp_seg_copy>
 800e612:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e614:	69fb      	ldr	r3, [r7, #28]
 800e616:	2b00      	cmp	r3, #0
 800e618:	f000 8109 	beq.w	800e82e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e624:	8912      	ldrh	r2, [r2, #8]
 800e626:	441a      	add	r2, r3
 800e628:	4b12      	ldr	r3, [pc, #72]	; (800e674 <tcp_receive+0xd00>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	1ad3      	subs	r3, r2, r3
 800e62e:	2b00      	cmp	r3, #0
 800e630:	dd12      	ble.n	800e658 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e632:	4b10      	ldr	r3, [pc, #64]	; (800e674 <tcp_receive+0xd00>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	b29a      	uxth	r2, r3
 800e638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e63a:	68db      	ldr	r3, [r3, #12]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	b29b      	uxth	r3, r3
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	b29a      	uxth	r2, r3
 800e644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e646:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e64a:	685a      	ldr	r2, [r3, #4]
 800e64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e64e:	891b      	ldrh	r3, [r3, #8]
 800e650:	4619      	mov	r1, r3
 800e652:	4610      	mov	r0, r2
 800e654:	f7fb ff1e 	bl	800a494 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e65a:	69fa      	ldr	r2, [r7, #28]
 800e65c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e65e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e660:	69f8      	ldr	r0, [r7, #28]
 800e662:	f7ff f883 	bl	800d76c <tcp_oos_insert_segment>
                  }
                  break;
 800e666:	e0e2      	b.n	800e82e <tcp_receive+0xeba>
 800e668:	20006874 	.word	0x20006874
 800e66c:	20006871 	.word	0x20006871
 800e670:	20006844 	.word	0x20006844
 800e674:	20006864 	.word	0x20006864
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e67a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	f040 80c6 	bne.w	800e812 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e686:	4b80      	ldr	r3, [pc, #512]	; (800e888 <tcp_receive+0xf14>)
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e692:	2b00      	cmp	r3, #0
 800e694:	f340 80bd 	ble.w	800e812 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	899b      	ldrh	r3, [r3, #12]
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7fa fd35 	bl	8009110 <lwip_htons>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	f003 0301 	and.w	r3, r3, #1
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	f040 80bf 	bne.w	800e832 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e6b4:	4875      	ldr	r0, [pc, #468]	; (800e88c <tcp_receive+0xf18>)
 800e6b6:	f7fd fb0b 	bl	800bcd0 <tcp_seg_copy>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6be:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	f000 80b6 	beq.w	800e836 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6d2:	8912      	ldrh	r2, [r2, #8]
 800e6d4:	441a      	add	r2, r3
 800e6d6:	4b6c      	ldr	r3, [pc, #432]	; (800e888 <tcp_receive+0xf14>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	1ad3      	subs	r3, r2, r3
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	dd12      	ble.n	800e706 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e6e0:	4b69      	ldr	r3, [pc, #420]	; (800e888 <tcp_receive+0xf14>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e8:	68db      	ldr	r3, [r3, #12]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	1ad3      	subs	r3, r2, r3
 800e6f0:	b29a      	uxth	r2, r3
 800e6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f8:	685a      	ldr	r2, [r3, #4]
 800e6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fc:	891b      	ldrh	r3, [r3, #8]
 800e6fe:	4619      	mov	r1, r3
 800e700:	4610      	mov	r0, r2
 800e702:	f7fb fec7 	bl	800a494 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e706:	4b62      	ldr	r3, [pc, #392]	; (800e890 <tcp_receive+0xf1c>)
 800e708:	881b      	ldrh	r3, [r3, #0]
 800e70a:	461a      	mov	r2, r3
 800e70c:	4b5e      	ldr	r3, [pc, #376]	; (800e888 <tcp_receive+0xf14>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	441a      	add	r2, r3
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e716:	6879      	ldr	r1, [r7, #4]
 800e718:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e71a:	440b      	add	r3, r1
 800e71c:	1ad3      	subs	r3, r2, r3
 800e71e:	2b00      	cmp	r3, #0
 800e720:	f340 8089 	ble.w	800e836 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	899b      	ldrh	r3, [r3, #12]
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	4618      	mov	r0, r3
 800e730:	f7fa fcee 	bl	8009110 <lwip_htons>
 800e734:	4603      	mov	r3, r0
 800e736:	b2db      	uxtb	r3, r3
 800e738:	f003 0301 	and.w	r3, r3, #1
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d022      	beq.n	800e786 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	68db      	ldr	r3, [r3, #12]
 800e746:	899b      	ldrh	r3, [r3, #12]
 800e748:	b29b      	uxth	r3, r3
 800e74a:	b21b      	sxth	r3, r3
 800e74c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e750:	b21c      	sxth	r4, r3
 800e752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	68db      	ldr	r3, [r3, #12]
 800e758:	899b      	ldrh	r3, [r3, #12]
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fa fcd7 	bl	8009110 <lwip_htons>
 800e762:	4603      	mov	r3, r0
 800e764:	b2db      	uxtb	r3, r3
 800e766:	b29b      	uxth	r3, r3
 800e768:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fa fcce 	bl	8009110 <lwip_htons>
 800e774:	4603      	mov	r3, r0
 800e776:	b21b      	sxth	r3, r3
 800e778:	4323      	orrs	r3, r4
 800e77a:	b21a      	sxth	r2, r3
 800e77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	b292      	uxth	r2, r2
 800e784:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e790:	4413      	add	r3, r2
 800e792:	b299      	uxth	r1, r3
 800e794:	4b3c      	ldr	r3, [pc, #240]	; (800e888 <tcp_receive+0xf14>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	b29a      	uxth	r2, r3
 800e79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	1a8a      	subs	r2, r1, r2
 800e7a0:	b292      	uxth	r2, r2
 800e7a2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	685a      	ldr	r2, [r3, #4]
 800e7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	891b      	ldrh	r3, [r3, #8]
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	4610      	mov	r0, r2
 800e7b4:	f7fb fe6e 	bl	800a494 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	891c      	ldrh	r4, [r3, #8]
 800e7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	899b      	ldrh	r3, [r3, #12]
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7fa fca1 	bl	8009110 <lwip_htons>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	b2db      	uxtb	r3, r3
 800e7d2:	f003 0303 	and.w	r3, r3, #3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d001      	beq.n	800e7de <tcp_receive+0xe6a>
 800e7da:	2301      	movs	r3, #1
 800e7dc:	e000      	b.n	800e7e0 <tcp_receive+0xe6c>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	4423      	add	r3, r4
 800e7e2:	b29a      	uxth	r2, r3
 800e7e4:	4b2a      	ldr	r3, [pc, #168]	; (800e890 <tcp_receive+0xf1c>)
 800e7e6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e7e8:	4b29      	ldr	r3, [pc, #164]	; (800e890 <tcp_receive+0xf1c>)
 800e7ea:	881b      	ldrh	r3, [r3, #0]
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	4b26      	ldr	r3, [pc, #152]	; (800e888 <tcp_receive+0xf14>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	441a      	add	r2, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f8:	6879      	ldr	r1, [r7, #4]
 800e7fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e7fc:	440b      	add	r3, r1
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d019      	beq.n	800e836 <tcp_receive+0xec2>
 800e802:	4b24      	ldr	r3, [pc, #144]	; (800e894 <tcp_receive+0xf20>)
 800e804:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e808:	4923      	ldr	r1, [pc, #140]	; (800e898 <tcp_receive+0xf24>)
 800e80a:	4824      	ldr	r0, [pc, #144]	; (800e89c <tcp_receive+0xf28>)
 800e80c:	f004 fcb4 	bl	8013178 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e810:	e011      	b.n	800e836 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	63bb      	str	r3, [r7, #56]	; 0x38
 800e818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	f47f aea4 	bne.w	800e568 <tcp_receive+0xbf4>
 800e820:	e00a      	b.n	800e838 <tcp_receive+0xec4>
                break;
 800e822:	bf00      	nop
 800e824:	e008      	b.n	800e838 <tcp_receive+0xec4>
                break;
 800e826:	bf00      	nop
 800e828:	e006      	b.n	800e838 <tcp_receive+0xec4>
                  break;
 800e82a:	bf00      	nop
 800e82c:	e004      	b.n	800e838 <tcp_receive+0xec4>
                  break;
 800e82e:	bf00      	nop
 800e830:	e002      	b.n	800e838 <tcp_receive+0xec4>
                  break;
 800e832:	bf00      	nop
 800e834:	e000      	b.n	800e838 <tcp_receive+0xec4>
                break;
 800e836:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f001 fa33 	bl	800fca4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e83e:	e003      	b.n	800e848 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f001 fa2f 	bl	800fca4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e846:	e01a      	b.n	800e87e <tcp_receive+0xf0a>
 800e848:	e019      	b.n	800e87e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e84a:	4b0f      	ldr	r3, [pc, #60]	; (800e888 <tcp_receive+0xf14>)
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e852:	1ad3      	subs	r3, r2, r3
 800e854:	2b00      	cmp	r3, #0
 800e856:	db0a      	blt.n	800e86e <tcp_receive+0xefa>
 800e858:	4b0b      	ldr	r3, [pc, #44]	; (800e888 <tcp_receive+0xf14>)
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e860:	6879      	ldr	r1, [r7, #4]
 800e862:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e864:	440b      	add	r3, r1
 800e866:	1ad3      	subs	r3, r2, r3
 800e868:	3301      	adds	r3, #1
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	dd07      	ble.n	800e87e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	8b5b      	ldrh	r3, [r3, #26]
 800e872:	f043 0302 	orr.w	r3, r3, #2
 800e876:	b29a      	uxth	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e87c:	e7ff      	b.n	800e87e <tcp_receive+0xf0a>
 800e87e:	bf00      	nop
 800e880:	3750      	adds	r7, #80	; 0x50
 800e882:	46bd      	mov	sp, r7
 800e884:	bdb0      	pop	{r4, r5, r7, pc}
 800e886:	bf00      	nop
 800e888:	20006864 	.word	0x20006864
 800e88c:	20006844 	.word	0x20006844
 800e890:	2000686e 	.word	0x2000686e
 800e894:	080152d0 	.word	0x080152d0
 800e898:	08015678 	.word	0x08015678
 800e89c:	0801531c 	.word	0x0801531c

0800e8a0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e8a6:	4b15      	ldr	r3, [pc, #84]	; (800e8fc <tcp_get_next_optbyte+0x5c>)
 800e8a8:	881b      	ldrh	r3, [r3, #0]
 800e8aa:	1c5a      	adds	r2, r3, #1
 800e8ac:	b291      	uxth	r1, r2
 800e8ae:	4a13      	ldr	r2, [pc, #76]	; (800e8fc <tcp_get_next_optbyte+0x5c>)
 800e8b0:	8011      	strh	r1, [r2, #0]
 800e8b2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e8b4:	4b12      	ldr	r3, [pc, #72]	; (800e900 <tcp_get_next_optbyte+0x60>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d004      	beq.n	800e8c6 <tcp_get_next_optbyte+0x26>
 800e8bc:	4b11      	ldr	r3, [pc, #68]	; (800e904 <tcp_get_next_optbyte+0x64>)
 800e8be:	881b      	ldrh	r3, [r3, #0]
 800e8c0:	88fa      	ldrh	r2, [r7, #6]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d208      	bcs.n	800e8d8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e8c6:	4b10      	ldr	r3, [pc, #64]	; (800e908 <tcp_get_next_optbyte+0x68>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	3314      	adds	r3, #20
 800e8cc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e8ce:	88fb      	ldrh	r3, [r7, #6]
 800e8d0:	683a      	ldr	r2, [r7, #0]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	e00b      	b.n	800e8f0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e8d8:	88fb      	ldrh	r3, [r7, #6]
 800e8da:	b2da      	uxtb	r2, r3
 800e8dc:	4b09      	ldr	r3, [pc, #36]	; (800e904 <tcp_get_next_optbyte+0x64>)
 800e8de:	881b      	ldrh	r3, [r3, #0]
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	1ad3      	subs	r3, r2, r3
 800e8e4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e8e6:	4b06      	ldr	r3, [pc, #24]	; (800e900 <tcp_get_next_optbyte+0x60>)
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	797b      	ldrb	r3, [r7, #5]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr
 800e8fc:	20006860 	.word	0x20006860
 800e900:	2000685c 	.word	0x2000685c
 800e904:	2000685a 	.word	0x2000685a
 800e908:	20006854 	.word	0x20006854

0800e90c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d106      	bne.n	800e928 <tcp_parseopt+0x1c>
 800e91a:	4b32      	ldr	r3, [pc, #200]	; (800e9e4 <tcp_parseopt+0xd8>)
 800e91c:	f240 727d 	movw	r2, #1917	; 0x77d
 800e920:	4931      	ldr	r1, [pc, #196]	; (800e9e8 <tcp_parseopt+0xdc>)
 800e922:	4832      	ldr	r0, [pc, #200]	; (800e9ec <tcp_parseopt+0xe0>)
 800e924:	f004 fc28 	bl	8013178 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e928:	4b31      	ldr	r3, [pc, #196]	; (800e9f0 <tcp_parseopt+0xe4>)
 800e92a:	881b      	ldrh	r3, [r3, #0]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d055      	beq.n	800e9dc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e930:	4b30      	ldr	r3, [pc, #192]	; (800e9f4 <tcp_parseopt+0xe8>)
 800e932:	2200      	movs	r2, #0
 800e934:	801a      	strh	r2, [r3, #0]
 800e936:	e045      	b.n	800e9c4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e938:	f7ff ffb2 	bl	800e8a0 <tcp_get_next_optbyte>
 800e93c:	4603      	mov	r3, r0
 800e93e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e940:	7bfb      	ldrb	r3, [r7, #15]
 800e942:	2b02      	cmp	r3, #2
 800e944:	d006      	beq.n	800e954 <tcp_parseopt+0x48>
 800e946:	2b02      	cmp	r3, #2
 800e948:	dc2b      	bgt.n	800e9a2 <tcp_parseopt+0x96>
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d041      	beq.n	800e9d2 <tcp_parseopt+0xc6>
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d127      	bne.n	800e9a2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e952:	e037      	b.n	800e9c4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e954:	f7ff ffa4 	bl	800e8a0 <tcp_get_next_optbyte>
 800e958:	4603      	mov	r3, r0
 800e95a:	2b04      	cmp	r3, #4
 800e95c:	d13b      	bne.n	800e9d6 <tcp_parseopt+0xca>
 800e95e:	4b25      	ldr	r3, [pc, #148]	; (800e9f4 <tcp_parseopt+0xe8>)
 800e960:	881b      	ldrh	r3, [r3, #0]
 800e962:	3301      	adds	r3, #1
 800e964:	4a22      	ldr	r2, [pc, #136]	; (800e9f0 <tcp_parseopt+0xe4>)
 800e966:	8812      	ldrh	r2, [r2, #0]
 800e968:	4293      	cmp	r3, r2
 800e96a:	da34      	bge.n	800e9d6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e96c:	f7ff ff98 	bl	800e8a0 <tcp_get_next_optbyte>
 800e970:	4603      	mov	r3, r0
 800e972:	b29b      	uxth	r3, r3
 800e974:	021b      	lsls	r3, r3, #8
 800e976:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e978:	f7ff ff92 	bl	800e8a0 <tcp_get_next_optbyte>
 800e97c:	4603      	mov	r3, r0
 800e97e:	b29a      	uxth	r2, r3
 800e980:	89bb      	ldrh	r3, [r7, #12]
 800e982:	4313      	orrs	r3, r2
 800e984:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e986:	89bb      	ldrh	r3, [r7, #12]
 800e988:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e98c:	d804      	bhi.n	800e998 <tcp_parseopt+0x8c>
 800e98e:	89bb      	ldrh	r3, [r7, #12]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d001      	beq.n	800e998 <tcp_parseopt+0x8c>
 800e994:	89ba      	ldrh	r2, [r7, #12]
 800e996:	e001      	b.n	800e99c <tcp_parseopt+0x90>
 800e998:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e9a0:	e010      	b.n	800e9c4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e9a2:	f7ff ff7d 	bl	800e8a0 <tcp_get_next_optbyte>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e9aa:	7afb      	ldrb	r3, [r7, #11]
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d914      	bls.n	800e9da <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e9b0:	7afb      	ldrb	r3, [r7, #11]
 800e9b2:	b29a      	uxth	r2, r3
 800e9b4:	4b0f      	ldr	r3, [pc, #60]	; (800e9f4 <tcp_parseopt+0xe8>)
 800e9b6:	881b      	ldrh	r3, [r3, #0]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	3b02      	subs	r3, #2
 800e9be:	b29a      	uxth	r2, r3
 800e9c0:	4b0c      	ldr	r3, [pc, #48]	; (800e9f4 <tcp_parseopt+0xe8>)
 800e9c2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e9c4:	4b0b      	ldr	r3, [pc, #44]	; (800e9f4 <tcp_parseopt+0xe8>)
 800e9c6:	881a      	ldrh	r2, [r3, #0]
 800e9c8:	4b09      	ldr	r3, [pc, #36]	; (800e9f0 <tcp_parseopt+0xe4>)
 800e9ca:	881b      	ldrh	r3, [r3, #0]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d3b3      	bcc.n	800e938 <tcp_parseopt+0x2c>
 800e9d0:	e004      	b.n	800e9dc <tcp_parseopt+0xd0>
          return;
 800e9d2:	bf00      	nop
 800e9d4:	e002      	b.n	800e9dc <tcp_parseopt+0xd0>
            return;
 800e9d6:	bf00      	nop
 800e9d8:	e000      	b.n	800e9dc <tcp_parseopt+0xd0>
            return;
 800e9da:	bf00      	nop
      }
    }
  }
}
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	080152d0 	.word	0x080152d0
 800e9e8:	08015734 	.word	0x08015734
 800e9ec:	0801531c 	.word	0x0801531c
 800e9f0:	20006858 	.word	0x20006858
 800e9f4:	20006860 	.word	0x20006860

0800e9f8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e9fc:	4b05      	ldr	r3, [pc, #20]	; (800ea14 <tcp_trigger_input_pcb_close+0x1c>)
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	f043 0310 	orr.w	r3, r3, #16
 800ea04:	b2da      	uxtb	r2, r3
 800ea06:	4b03      	ldr	r3, [pc, #12]	; (800ea14 <tcp_trigger_input_pcb_close+0x1c>)
 800ea08:	701a      	strb	r2, [r3, #0]
}
 800ea0a:	bf00      	nop
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr
 800ea14:	20006871 	.word	0x20006871

0800ea18 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00a      	beq.n	800ea40 <tcp_route+0x28>
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	7a1b      	ldrb	r3, [r3, #8]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d006      	beq.n	800ea40 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	7a1b      	ldrb	r3, [r3, #8]
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fb fb24 	bl	800a084 <netif_get_by_index>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	e003      	b.n	800ea48 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f002 fead 	bl	80117a0 <ip4_route>
 800ea46:	4603      	mov	r3, r0
  }
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3710      	adds	r7, #16
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ea50:	b590      	push	{r4, r7, lr}
 800ea52:	b087      	sub	sp, #28
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	60f8      	str	r0, [r7, #12]
 800ea58:	60b9      	str	r1, [r7, #8]
 800ea5a:	603b      	str	r3, [r7, #0]
 800ea5c:	4613      	mov	r3, r2
 800ea5e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d105      	bne.n	800ea72 <tcp_create_segment+0x22>
 800ea66:	4b44      	ldr	r3, [pc, #272]	; (800eb78 <tcp_create_segment+0x128>)
 800ea68:	22a3      	movs	r2, #163	; 0xa3
 800ea6a:	4944      	ldr	r1, [pc, #272]	; (800eb7c <tcp_create_segment+0x12c>)
 800ea6c:	4844      	ldr	r0, [pc, #272]	; (800eb80 <tcp_create_segment+0x130>)
 800ea6e:	f004 fb83 	bl	8013178 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d105      	bne.n	800ea84 <tcp_create_segment+0x34>
 800ea78:	4b3f      	ldr	r3, [pc, #252]	; (800eb78 <tcp_create_segment+0x128>)
 800ea7a:	22a4      	movs	r2, #164	; 0xa4
 800ea7c:	4941      	ldr	r1, [pc, #260]	; (800eb84 <tcp_create_segment+0x134>)
 800ea7e:	4840      	ldr	r0, [pc, #256]	; (800eb80 <tcp_create_segment+0x130>)
 800ea80:	f004 fb7a 	bl	8013178 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ea84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ea88:	009b      	lsls	r3, r3, #2
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	f003 0304 	and.w	r3, r3, #4
 800ea90:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ea92:	2003      	movs	r0, #3
 800ea94:	f7fa fff2 	bl	8009a7c <memp_malloc>
 800ea98:	6138      	str	r0, [r7, #16]
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d104      	bne.n	800eaaa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800eaa0:	68b8      	ldr	r0, [r7, #8]
 800eaa2:	f7fb fe7d 	bl	800a7a0 <pbuf_free>
    return NULL;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	e061      	b.n	800eb6e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800eab0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	2200      	movs	r2, #0
 800eab6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	68ba      	ldr	r2, [r7, #8]
 800eabc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	891a      	ldrh	r2, [r3, #8]
 800eac2:	7dfb      	ldrb	r3, [r7, #23]
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d205      	bcs.n	800ead6 <tcp_create_segment+0x86>
 800eaca:	4b2b      	ldr	r3, [pc, #172]	; (800eb78 <tcp_create_segment+0x128>)
 800eacc:	22b0      	movs	r2, #176	; 0xb0
 800eace:	492e      	ldr	r1, [pc, #184]	; (800eb88 <tcp_create_segment+0x138>)
 800ead0:	482b      	ldr	r0, [pc, #172]	; (800eb80 <tcp_create_segment+0x130>)
 800ead2:	f004 fb51 	bl	8013178 <iprintf>
  seg->len = p->tot_len - optlen;
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	891a      	ldrh	r2, [r3, #8]
 800eada:	7dfb      	ldrb	r3, [r7, #23]
 800eadc:	b29b      	uxth	r3, r3
 800eade:	1ad3      	subs	r3, r2, r3
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800eae6:	2114      	movs	r1, #20
 800eae8:	68b8      	ldr	r0, [r7, #8]
 800eaea:	f7fb fdc3 	bl	800a674 <pbuf_add_header>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d004      	beq.n	800eafe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800eaf4:	6938      	ldr	r0, [r7, #16]
 800eaf6:	f7fd f8d2 	bl	800bc9e <tcp_seg_free>
    return NULL;
 800eafa:	2300      	movs	r3, #0
 800eafc:	e037      	b.n	800eb6e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	685a      	ldr	r2, [r3, #4]
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	8ada      	ldrh	r2, [r3, #22]
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	68dc      	ldr	r4, [r3, #12]
 800eb10:	4610      	mov	r0, r2
 800eb12:	f7fa fafd 	bl	8009110 <lwip_htons>
 800eb16:	4603      	mov	r3, r0
 800eb18:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	8b1a      	ldrh	r2, [r3, #24]
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	68dc      	ldr	r4, [r3, #12]
 800eb22:	4610      	mov	r0, r2
 800eb24:	f7fa faf4 	bl	8009110 <lwip_htons>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	68dc      	ldr	r4, [r3, #12]
 800eb30:	6838      	ldr	r0, [r7, #0]
 800eb32:	f7fa fb02 	bl	800913a <lwip_htonl>
 800eb36:	4603      	mov	r3, r0
 800eb38:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800eb3a:	7dfb      	ldrb	r3, [r7, #23]
 800eb3c:	089b      	lsrs	r3, r3, #2
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	3305      	adds	r3, #5
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	031b      	lsls	r3, r3, #12
 800eb48:	b29a      	uxth	r2, r3
 800eb4a:	79fb      	ldrb	r3, [r7, #7]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	b29a      	uxth	r2, r3
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	68dc      	ldr	r4, [r3, #12]
 800eb56:	4610      	mov	r0, r2
 800eb58:	f7fa fada 	bl	8009110 <lwip_htons>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	68db      	ldr	r3, [r3, #12]
 800eb64:	2200      	movs	r2, #0
 800eb66:	749a      	strb	r2, [r3, #18]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	74da      	strb	r2, [r3, #19]
  return seg;
 800eb6c:	693b      	ldr	r3, [r7, #16]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	371c      	adds	r7, #28
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd90      	pop	{r4, r7, pc}
 800eb76:	bf00      	nop
 800eb78:	08015750 	.word	0x08015750
 800eb7c:	08015784 	.word	0x08015784
 800eb80:	080157a4 	.word	0x080157a4
 800eb84:	080157cc 	.word	0x080157cc
 800eb88:	080157f0 	.word	0x080157f0

0800eb8c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800eb8c:	b590      	push	{r4, r7, lr}
 800eb8e:	b08b      	sub	sp, #44	; 0x2c
 800eb90:	af02      	add	r7, sp, #8
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	460b      	mov	r3, r1
 800eb96:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	61fb      	str	r3, [r7, #28]
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800eba0:	2300      	movs	r3, #0
 800eba2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d106      	bne.n	800ebb8 <tcp_split_unsent_seg+0x2c>
 800ebaa:	4b95      	ldr	r3, [pc, #596]	; (800ee00 <tcp_split_unsent_seg+0x274>)
 800ebac:	f240 324b 	movw	r2, #843	; 0x34b
 800ebb0:	4994      	ldr	r1, [pc, #592]	; (800ee04 <tcp_split_unsent_seg+0x278>)
 800ebb2:	4895      	ldr	r0, [pc, #596]	; (800ee08 <tcp_split_unsent_seg+0x27c>)
 800ebb4:	f004 fae0 	bl	8013178 <iprintf>

  useg = pcb->unsent;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebbc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d102      	bne.n	800ebca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ebc4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc8:	e116      	b.n	800edf8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ebca:	887b      	ldrh	r3, [r7, #2]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d109      	bne.n	800ebe4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ebd0:	4b8b      	ldr	r3, [pc, #556]	; (800ee00 <tcp_split_unsent_seg+0x274>)
 800ebd2:	f240 3253 	movw	r2, #851	; 0x353
 800ebd6:	498d      	ldr	r1, [pc, #564]	; (800ee0c <tcp_split_unsent_seg+0x280>)
 800ebd8:	488b      	ldr	r0, [pc, #556]	; (800ee08 <tcp_split_unsent_seg+0x27c>)
 800ebda:	f004 facd 	bl	8013178 <iprintf>
    return ERR_VAL;
 800ebde:	f06f 0305 	mvn.w	r3, #5
 800ebe2:	e109      	b.n	800edf8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	891b      	ldrh	r3, [r3, #8]
 800ebe8:	887a      	ldrh	r2, [r7, #2]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d301      	bcc.n	800ebf2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	e102      	b.n	800edf8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebf6:	887a      	ldrh	r2, [r7, #2]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d906      	bls.n	800ec0a <tcp_split_unsent_seg+0x7e>
 800ebfc:	4b80      	ldr	r3, [pc, #512]	; (800ee00 <tcp_split_unsent_seg+0x274>)
 800ebfe:	f240 325b 	movw	r2, #859	; 0x35b
 800ec02:	4983      	ldr	r1, [pc, #524]	; (800ee10 <tcp_split_unsent_seg+0x284>)
 800ec04:	4880      	ldr	r0, [pc, #512]	; (800ee08 <tcp_split_unsent_seg+0x27c>)
 800ec06:	f004 fab7 	bl	8013178 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	891b      	ldrh	r3, [r3, #8]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d106      	bne.n	800ec20 <tcp_split_unsent_seg+0x94>
 800ec12:	4b7b      	ldr	r3, [pc, #492]	; (800ee00 <tcp_split_unsent_seg+0x274>)
 800ec14:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ec18:	497e      	ldr	r1, [pc, #504]	; (800ee14 <tcp_split_unsent_seg+0x288>)
 800ec1a:	487b      	ldr	r0, [pc, #492]	; (800ee08 <tcp_split_unsent_seg+0x27c>)
 800ec1c:	f004 faac 	bl	8013178 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	7a9b      	ldrb	r3, [r3, #10]
 800ec24:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ec26:	7bfb      	ldrb	r3, [r7, #15]
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	f003 0304 	and.w	r3, r3, #4
 800ec30:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	891a      	ldrh	r2, [r3, #8]
 800ec36:	887b      	ldrh	r3, [r7, #2]
 800ec38:	1ad3      	subs	r3, r2, r3
 800ec3a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ec3c:	7bbb      	ldrb	r3, [r7, #14]
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	89bb      	ldrh	r3, [r7, #12]
 800ec42:	4413      	add	r3, r2
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	2036      	movs	r0, #54	; 0x36
 800ec4e:	f7fb fac3 	bl	800a1d8 <pbuf_alloc>
 800ec52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f000 80b7 	beq.w	800edca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	891a      	ldrh	r2, [r3, #8]
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	891b      	ldrh	r3, [r3, #8]
 800ec66:	1ad3      	subs	r3, r2, r3
 800ec68:	b29a      	uxth	r2, r3
 800ec6a:	887b      	ldrh	r3, [r7, #2]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	6858      	ldr	r0, [r3, #4]
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	685a      	ldr	r2, [r3, #4]
 800ec78:	7bbb      	ldrb	r3, [r7, #14]
 800ec7a:	18d1      	adds	r1, r2, r3
 800ec7c:	897b      	ldrh	r3, [r7, #10]
 800ec7e:	89ba      	ldrh	r2, [r7, #12]
 800ec80:	f7fb ff84 	bl	800ab8c <pbuf_copy_partial>
 800ec84:	4603      	mov	r3, r0
 800ec86:	461a      	mov	r2, r3
 800ec88:	89bb      	ldrh	r3, [r7, #12]
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	f040 809f 	bne.w	800edce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	899b      	ldrh	r3, [r3, #12]
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7fa fa39 	bl	8009110 <lwip_htons>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eca6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800eca8:	2300      	movs	r3, #0
 800ecaa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ecac:	7efb      	ldrb	r3, [r7, #27]
 800ecae:	f003 0308 	and.w	r3, r3, #8
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d007      	beq.n	800ecc6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ecb6:	7efb      	ldrb	r3, [r7, #27]
 800ecb8:	f023 0308 	bic.w	r3, r3, #8
 800ecbc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ecbe:	7ebb      	ldrb	r3, [r7, #26]
 800ecc0:	f043 0308 	orr.w	r3, r3, #8
 800ecc4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ecc6:	7efb      	ldrb	r3, [r7, #27]
 800ecc8:	f003 0301 	and.w	r3, r3, #1
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d007      	beq.n	800ece0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ecd0:	7efb      	ldrb	r3, [r7, #27]
 800ecd2:	f023 0301 	bic.w	r3, r3, #1
 800ecd6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ecd8:	7ebb      	ldrb	r3, [r7, #26]
 800ecda:	f043 0301 	orr.w	r3, r3, #1
 800ecde:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	685b      	ldr	r3, [r3, #4]
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fa fa27 	bl	800913a <lwip_htonl>
 800ecec:	4602      	mov	r2, r0
 800ecee:	887b      	ldrh	r3, [r7, #2]
 800ecf0:	18d1      	adds	r1, r2, r3
 800ecf2:	7eba      	ldrb	r2, [r7, #26]
 800ecf4:	7bfb      	ldrb	r3, [r7, #15]
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	6939      	ldr	r1, [r7, #16]
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f7ff fea7 	bl	800ea50 <tcp_create_segment>
 800ed02:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d063      	beq.n	800edd2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7fb fdd4 	bl	800a8bc <pbuf_clen>
 800ed14:	4603      	mov	r3, r0
 800ed16:	461a      	mov	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed1e:	1a9b      	subs	r3, r3, r2
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	6858      	ldr	r0, [r3, #4]
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	891a      	ldrh	r2, [r3, #8]
 800ed32:	89bb      	ldrh	r3, [r7, #12]
 800ed34:	1ad3      	subs	r3, r2, r3
 800ed36:	b29b      	uxth	r3, r3
 800ed38:	4619      	mov	r1, r3
 800ed3a:	f7fb fbab 	bl	800a494 <pbuf_realloc>
  useg->len -= remainder;
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	891a      	ldrh	r2, [r3, #8]
 800ed42:	89bb      	ldrh	r3, [r7, #12]
 800ed44:	1ad3      	subs	r3, r2, r3
 800ed46:	b29a      	uxth	r2, r3
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	899b      	ldrh	r3, [r3, #12]
 800ed52:	b29c      	uxth	r4, r3
 800ed54:	7efb      	ldrb	r3, [r7, #27]
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7fa f9d9 	bl	8009110 <lwip_htons>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	461a      	mov	r2, r3
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	68db      	ldr	r3, [r3, #12]
 800ed66:	4322      	orrs	r2, r4
 800ed68:	b292      	uxth	r2, r2
 800ed6a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7fb fda3 	bl	800a8bc <pbuf_clen>
 800ed76:	4603      	mov	r3, r0
 800ed78:	461a      	mov	r2, r3
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed80:	4413      	add	r3, r2
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fb fd94 	bl	800a8bc <pbuf_clen>
 800ed94:	4603      	mov	r3, r0
 800ed96:	461a      	mov	r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed9e:	4413      	add	r3, r2
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	69fa      	ldr	r2, [r7, #28]
 800edb4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800edb6:	69fb      	ldr	r3, [r7, #28]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d103      	bne.n	800edc6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2200      	movs	r2, #0
 800edc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800edc6:	2300      	movs	r3, #0
 800edc8:	e016      	b.n	800edf8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800edca:	bf00      	nop
 800edcc:	e002      	b.n	800edd4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800edce:	bf00      	nop
 800edd0:	e000      	b.n	800edd4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800edd2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d006      	beq.n	800ede8 <tcp_split_unsent_seg+0x25c>
 800edda:	4b09      	ldr	r3, [pc, #36]	; (800ee00 <tcp_split_unsent_seg+0x274>)
 800eddc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ede0:	490d      	ldr	r1, [pc, #52]	; (800ee18 <tcp_split_unsent_seg+0x28c>)
 800ede2:	4809      	ldr	r0, [pc, #36]	; (800ee08 <tcp_split_unsent_seg+0x27c>)
 800ede4:	f004 f9c8 	bl	8013178 <iprintf>
  if (p != NULL) {
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d002      	beq.n	800edf4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800edee:	6938      	ldr	r0, [r7, #16]
 800edf0:	f7fb fcd6 	bl	800a7a0 <pbuf_free>
  }

  return ERR_MEM;
 800edf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3724      	adds	r7, #36	; 0x24
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd90      	pop	{r4, r7, pc}
 800ee00:	08015750 	.word	0x08015750
 800ee04:	08015ae4 	.word	0x08015ae4
 800ee08:	080157a4 	.word	0x080157a4
 800ee0c:	08015b08 	.word	0x08015b08
 800ee10:	08015b2c 	.word	0x08015b2c
 800ee14:	08015b3c 	.word	0x08015b3c
 800ee18:	08015b4c 	.word	0x08015b4c

0800ee1c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ee1c:	b590      	push	{r4, r7, lr}
 800ee1e:	b085      	sub	sp, #20
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d106      	bne.n	800ee38 <tcp_send_fin+0x1c>
 800ee2a:	4b21      	ldr	r3, [pc, #132]	; (800eeb0 <tcp_send_fin+0x94>)
 800ee2c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ee30:	4920      	ldr	r1, [pc, #128]	; (800eeb4 <tcp_send_fin+0x98>)
 800ee32:	4821      	ldr	r0, [pc, #132]	; (800eeb8 <tcp_send_fin+0x9c>)
 800ee34:	f004 f9a0 	bl	8013178 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d02e      	beq.n	800ee9e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee44:	60fb      	str	r3, [r7, #12]
 800ee46:	e002      	b.n	800ee4e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1f8      	bne.n	800ee48 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	899b      	ldrh	r3, [r3, #12]
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fa f956 	bl	8009110 <lwip_htons>
 800ee64:	4603      	mov	r3, r0
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	f003 0307 	and.w	r3, r3, #7
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d116      	bne.n	800ee9e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	899b      	ldrh	r3, [r3, #12]
 800ee76:	b29c      	uxth	r4, r3
 800ee78:	2001      	movs	r0, #1
 800ee7a:	f7fa f949 	bl	8009110 <lwip_htons>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	461a      	mov	r2, r3
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	68db      	ldr	r3, [r3, #12]
 800ee86:	4322      	orrs	r2, r4
 800ee88:	b292      	uxth	r2, r2
 800ee8a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	8b5b      	ldrh	r3, [r3, #26]
 800ee90:	f043 0320 	orr.w	r3, r3, #32
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	e004      	b.n	800eea8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ee9e:	2101      	movs	r1, #1
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f000 f80b 	bl	800eebc <tcp_enqueue_flags>
 800eea6:	4603      	mov	r3, r0
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3714      	adds	r7, #20
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd90      	pop	{r4, r7, pc}
 800eeb0:	08015750 	.word	0x08015750
 800eeb4:	08015b58 	.word	0x08015b58
 800eeb8:	080157a4 	.word	0x080157a4

0800eebc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b08a      	sub	sp, #40	; 0x28
 800eec0:	af02      	add	r7, sp, #8
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	460b      	mov	r3, r1
 800eec6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800eec8:	2300      	movs	r3, #0
 800eeca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800eecc:	2300      	movs	r3, #0
 800eece:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800eed0:	78fb      	ldrb	r3, [r7, #3]
 800eed2:	f003 0303 	and.w	r3, r3, #3
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d106      	bne.n	800eee8 <tcp_enqueue_flags+0x2c>
 800eeda:	4b67      	ldr	r3, [pc, #412]	; (800f078 <tcp_enqueue_flags+0x1bc>)
 800eedc:	f240 4211 	movw	r2, #1041	; 0x411
 800eee0:	4966      	ldr	r1, [pc, #408]	; (800f07c <tcp_enqueue_flags+0x1c0>)
 800eee2:	4867      	ldr	r0, [pc, #412]	; (800f080 <tcp_enqueue_flags+0x1c4>)
 800eee4:	f004 f948 	bl	8013178 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d106      	bne.n	800eefc <tcp_enqueue_flags+0x40>
 800eeee:	4b62      	ldr	r3, [pc, #392]	; (800f078 <tcp_enqueue_flags+0x1bc>)
 800eef0:	f240 4213 	movw	r2, #1043	; 0x413
 800eef4:	4963      	ldr	r1, [pc, #396]	; (800f084 <tcp_enqueue_flags+0x1c8>)
 800eef6:	4862      	ldr	r0, [pc, #392]	; (800f080 <tcp_enqueue_flags+0x1c4>)
 800eef8:	f004 f93e 	bl	8013178 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800eefc:	78fb      	ldrb	r3, [r7, #3]
 800eefe:	f003 0302 	and.w	r3, r3, #2
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d001      	beq.n	800ef0a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ef06:	2301      	movs	r3, #1
 800ef08:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ef0a:	7ffb      	ldrb	r3, [r7, #31]
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	f003 0304 	and.w	r3, r3, #4
 800ef14:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ef16:	7dfb      	ldrb	r3, [r7, #23]
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef1e:	4619      	mov	r1, r3
 800ef20:	2036      	movs	r0, #54	; 0x36
 800ef22:	f7fb f959 	bl	800a1d8 <pbuf_alloc>
 800ef26:	6138      	str	r0, [r7, #16]
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d109      	bne.n	800ef42 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	8b5b      	ldrh	r3, [r3, #26]
 800ef32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef36:	b29a      	uxth	r2, r3
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ef3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef40:	e095      	b.n	800f06e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	895a      	ldrh	r2, [r3, #10]
 800ef46:	7dfb      	ldrb	r3, [r7, #23]
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d206      	bcs.n	800ef5c <tcp_enqueue_flags+0xa0>
 800ef4e:	4b4a      	ldr	r3, [pc, #296]	; (800f078 <tcp_enqueue_flags+0x1bc>)
 800ef50:	f240 4239 	movw	r2, #1081	; 0x439
 800ef54:	494c      	ldr	r1, [pc, #304]	; (800f088 <tcp_enqueue_flags+0x1cc>)
 800ef56:	484a      	ldr	r0, [pc, #296]	; (800f080 <tcp_enqueue_flags+0x1c4>)
 800ef58:	f004 f90e 	bl	8013178 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ef60:	78fa      	ldrb	r2, [r7, #3]
 800ef62:	7ffb      	ldrb	r3, [r7, #31]
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	460b      	mov	r3, r1
 800ef68:	6939      	ldr	r1, [r7, #16]
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f7ff fd70 	bl	800ea50 <tcp_create_segment>
 800ef70:	60f8      	str	r0, [r7, #12]
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d109      	bne.n	800ef8c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	8b5b      	ldrh	r3, [r3, #26]
 800ef7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef80:	b29a      	uxth	r2, r3
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ef86:	f04f 33ff 	mov.w	r3, #4294967295
 800ef8a:	e070      	b.n	800f06e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	f003 0303 	and.w	r3, r3, #3
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d006      	beq.n	800efa6 <tcp_enqueue_flags+0xea>
 800ef98:	4b37      	ldr	r3, [pc, #220]	; (800f078 <tcp_enqueue_flags+0x1bc>)
 800ef9a:	f240 4242 	movw	r2, #1090	; 0x442
 800ef9e:	493b      	ldr	r1, [pc, #236]	; (800f08c <tcp_enqueue_flags+0x1d0>)
 800efa0:	4837      	ldr	r0, [pc, #220]	; (800f080 <tcp_enqueue_flags+0x1c4>)
 800efa2:	f004 f8e9 	bl	8013178 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	891b      	ldrh	r3, [r3, #8]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d006      	beq.n	800efbc <tcp_enqueue_flags+0x100>
 800efae:	4b32      	ldr	r3, [pc, #200]	; (800f078 <tcp_enqueue_flags+0x1bc>)
 800efb0:	f240 4243 	movw	r2, #1091	; 0x443
 800efb4:	4936      	ldr	r1, [pc, #216]	; (800f090 <tcp_enqueue_flags+0x1d4>)
 800efb6:	4832      	ldr	r0, [pc, #200]	; (800f080 <tcp_enqueue_flags+0x1c4>)
 800efb8:	f004 f8de 	bl	8013178 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d103      	bne.n	800efcc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	68fa      	ldr	r2, [r7, #12]
 800efc8:	66da      	str	r2, [r3, #108]	; 0x6c
 800efca:	e00d      	b.n	800efe8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efd0:	61bb      	str	r3, [r7, #24]
 800efd2:	e002      	b.n	800efda <tcp_enqueue_flags+0x11e>
 800efd4:	69bb      	ldr	r3, [r7, #24]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	61bb      	str	r3, [r7, #24]
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d1f8      	bne.n	800efd4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	68fa      	ldr	r2, [r7, #12]
 800efe6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2200      	movs	r2, #0
 800efec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800eff0:	78fb      	ldrb	r3, [r7, #3]
 800eff2:	f003 0302 	and.w	r3, r3, #2
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d104      	bne.n	800f004 <tcp_enqueue_flags+0x148>
 800effa:	78fb      	ldrb	r3, [r7, #3]
 800effc:	f003 0301 	and.w	r3, r3, #1
 800f000:	2b00      	cmp	r3, #0
 800f002:	d004      	beq.n	800f00e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f008:	1c5a      	adds	r2, r3, #1
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f00e:	78fb      	ldrb	r3, [r7, #3]
 800f010:	f003 0301 	and.w	r3, r3, #1
 800f014:	2b00      	cmp	r3, #0
 800f016:	d006      	beq.n	800f026 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	8b5b      	ldrh	r3, [r3, #26]
 800f01c:	f043 0320 	orr.w	r3, r3, #32
 800f020:	b29a      	uxth	r2, r3
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fb fc46 	bl	800a8bc <pbuf_clen>
 800f030:	4603      	mov	r3, r0
 800f032:	461a      	mov	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f03a:	4413      	add	r3, r2
 800f03c:	b29a      	uxth	r2, r3
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00e      	beq.n	800f06c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f052:	2b00      	cmp	r3, #0
 800f054:	d10a      	bne.n	800f06c <tcp_enqueue_flags+0x1b0>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d106      	bne.n	800f06c <tcp_enqueue_flags+0x1b0>
 800f05e:	4b06      	ldr	r3, [pc, #24]	; (800f078 <tcp_enqueue_flags+0x1bc>)
 800f060:	f240 4265 	movw	r2, #1125	; 0x465
 800f064:	490b      	ldr	r1, [pc, #44]	; (800f094 <tcp_enqueue_flags+0x1d8>)
 800f066:	4806      	ldr	r0, [pc, #24]	; (800f080 <tcp_enqueue_flags+0x1c4>)
 800f068:	f004 f886 	bl	8013178 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f06c:	2300      	movs	r3, #0
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3720      	adds	r7, #32
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	08015750 	.word	0x08015750
 800f07c:	08015b74 	.word	0x08015b74
 800f080:	080157a4 	.word	0x080157a4
 800f084:	08015bcc 	.word	0x08015bcc
 800f088:	08015bec 	.word	0x08015bec
 800f08c:	08015c28 	.word	0x08015c28
 800f090:	08015c40 	.word	0x08015c40
 800f094:	08015c6c 	.word	0x08015c6c

0800f098 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f098:	b5b0      	push	{r4, r5, r7, lr}
 800f09a:	b08a      	sub	sp, #40	; 0x28
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d106      	bne.n	800f0b4 <tcp_output+0x1c>
 800f0a6:	4b9e      	ldr	r3, [pc, #632]	; (800f320 <tcp_output+0x288>)
 800f0a8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f0ac:	499d      	ldr	r1, [pc, #628]	; (800f324 <tcp_output+0x28c>)
 800f0ae:	489e      	ldr	r0, [pc, #632]	; (800f328 <tcp_output+0x290>)
 800f0b0:	f004 f862 	bl	8013178 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	7d1b      	ldrb	r3, [r3, #20]
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d106      	bne.n	800f0ca <tcp_output+0x32>
 800f0bc:	4b98      	ldr	r3, [pc, #608]	; (800f320 <tcp_output+0x288>)
 800f0be:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f0c2:	499a      	ldr	r1, [pc, #616]	; (800f32c <tcp_output+0x294>)
 800f0c4:	4898      	ldr	r0, [pc, #608]	; (800f328 <tcp_output+0x290>)
 800f0c6:	f004 f857 	bl	8013178 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f0ca:	4b99      	ldr	r3, [pc, #612]	; (800f330 <tcp_output+0x298>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d101      	bne.n	800f0d8 <tcp_output+0x40>
    return ERR_OK;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	e1ce      	b.n	800f476 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	bf28      	it	cs
 800f0e8:	4613      	movcs	r3, r2
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d10b      	bne.n	800f112 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	8b5b      	ldrh	r3, [r3, #26]
 800f0fe:	f003 0302 	and.w	r3, r3, #2
 800f102:	2b00      	cmp	r3, #0
 800f104:	f000 81aa 	beq.w	800f45c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f000 fdcb 	bl	800fca4 <tcp_send_empty_ack>
 800f10e:	4603      	mov	r3, r0
 800f110:	e1b1      	b.n	800f476 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f112:	6879      	ldr	r1, [r7, #4]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	3304      	adds	r3, #4
 800f118:	461a      	mov	r2, r3
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f7ff fc7c 	bl	800ea18 <tcp_route>
 800f120:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d102      	bne.n	800f12e <tcp_output+0x96>
    return ERR_RTE;
 800f128:	f06f 0303 	mvn.w	r3, #3
 800f12c:	e1a3      	b.n	800f476 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d003      	beq.n	800f13c <tcp_output+0xa4>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d111      	bne.n	800f160 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d002      	beq.n	800f148 <tcp_output+0xb0>
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	3304      	adds	r3, #4
 800f146:	e000      	b.n	800f14a <tcp_output+0xb2>
 800f148:	2300      	movs	r3, #0
 800f14a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d102      	bne.n	800f158 <tcp_output+0xc0>
      return ERR_RTE;
 800f152:	f06f 0303 	mvn.w	r3, #3
 800f156:	e18e      	b.n	800f476 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	4618      	mov	r0, r3
 800f168:	f7f9 ffe7 	bl	800913a <lwip_htonl>
 800f16c:	4602      	mov	r2, r0
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f176:	8912      	ldrh	r2, [r2, #8]
 800f178:	4413      	add	r3, r2
 800f17a:	69ba      	ldr	r2, [r7, #24]
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d227      	bcs.n	800f1d0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f186:	461a      	mov	r2, r3
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d114      	bne.n	800f1b8 <tcp_output+0x120>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f192:	2b00      	cmp	r3, #0
 800f194:	d110      	bne.n	800f1b8 <tcp_output+0x120>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d10b      	bne.n	800f1b8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	8b5b      	ldrh	r3, [r3, #26]
 800f1bc:	f003 0302 	and.w	r3, r3, #2
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	f000 814d 	beq.w	800f460 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 fd6c 	bl	800fca4 <tcp_send_empty_ack>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	e152      	b.n	800f476 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1dc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f1de:	6a3b      	ldr	r3, [r7, #32]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f000 811c 	beq.w	800f41e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f1e6:	e002      	b.n	800f1ee <tcp_output+0x156>
 800f1e8:	6a3b      	ldr	r3, [r7, #32]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	623b      	str	r3, [r7, #32]
 800f1ee:	6a3b      	ldr	r3, [r7, #32]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d1f8      	bne.n	800f1e8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f1f6:	e112      	b.n	800f41e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	899b      	ldrh	r3, [r3, #12]
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	4618      	mov	r0, r3
 800f202:	f7f9 ff85 	bl	8009110 <lwip_htons>
 800f206:	4603      	mov	r3, r0
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	f003 0304 	and.w	r3, r3, #4
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d006      	beq.n	800f220 <tcp_output+0x188>
 800f212:	4b43      	ldr	r3, [pc, #268]	; (800f320 <tcp_output+0x288>)
 800f214:	f240 5236 	movw	r2, #1334	; 0x536
 800f218:	4946      	ldr	r1, [pc, #280]	; (800f334 <tcp_output+0x29c>)
 800f21a:	4843      	ldr	r0, [pc, #268]	; (800f328 <tcp_output+0x290>)
 800f21c:	f003 ffac 	bl	8013178 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f224:	2b00      	cmp	r3, #0
 800f226:	d01f      	beq.n	800f268 <tcp_output+0x1d0>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	8b5b      	ldrh	r3, [r3, #26]
 800f22c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f230:	2b00      	cmp	r3, #0
 800f232:	d119      	bne.n	800f268 <tcp_output+0x1d0>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00b      	beq.n	800f254 <tcp_output+0x1bc>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d110      	bne.n	800f268 <tcp_output+0x1d0>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f24a:	891a      	ldrh	r2, [r3, #8]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f250:	429a      	cmp	r2, r3
 800f252:	d209      	bcs.n	800f268 <tcp_output+0x1d0>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d004      	beq.n	800f268 <tcp_output+0x1d0>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f264:	2b08      	cmp	r3, #8
 800f266:	d901      	bls.n	800f26c <tcp_output+0x1d4>
 800f268:	2301      	movs	r3, #1
 800f26a:	e000      	b.n	800f26e <tcp_output+0x1d6>
 800f26c:	2300      	movs	r3, #0
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d106      	bne.n	800f280 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	8b5b      	ldrh	r3, [r3, #26]
 800f276:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	f000 80e4 	beq.w	800f448 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	7d1b      	ldrb	r3, [r3, #20]
 800f284:	2b02      	cmp	r3, #2
 800f286:	d00d      	beq.n	800f2a4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28a:	68db      	ldr	r3, [r3, #12]
 800f28c:	899b      	ldrh	r3, [r3, #12]
 800f28e:	b29c      	uxth	r4, r3
 800f290:	2010      	movs	r0, #16
 800f292:	f7f9 ff3d 	bl	8009110 <lwip_htons>
 800f296:	4603      	mov	r3, r0
 800f298:	461a      	mov	r2, r3
 800f29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	4322      	orrs	r2, r4
 800f2a0:	b292      	uxth	r2, r2
 800f2a2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f2a4:	697a      	ldr	r2, [r7, #20]
 800f2a6:	6879      	ldr	r1, [r7, #4]
 800f2a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2aa:	f000 f909 	bl	800f4c0 <tcp_output_segment>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f2b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d009      	beq.n	800f2ce <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	8b5b      	ldrh	r3, [r3, #26]
 800f2be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2c2:	b29a      	uxth	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	835a      	strh	r2, [r3, #26]
      return err;
 800f2c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2cc:	e0d3      	b.n	800f476 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	7d1b      	ldrb	r3, [r3, #20]
 800f2da:	2b02      	cmp	r3, #2
 800f2dc:	d006      	beq.n	800f2ec <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	8b5b      	ldrh	r3, [r3, #26]
 800f2e2:	f023 0303 	bic.w	r3, r3, #3
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7f9 ff21 	bl	800913a <lwip_htonl>
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fc:	891b      	ldrh	r3, [r3, #8]
 800f2fe:	461d      	mov	r5, r3
 800f300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f302:	68db      	ldr	r3, [r3, #12]
 800f304:	899b      	ldrh	r3, [r3, #12]
 800f306:	b29b      	uxth	r3, r3
 800f308:	4618      	mov	r0, r3
 800f30a:	f7f9 ff01 	bl	8009110 <lwip_htons>
 800f30e:	4603      	mov	r3, r0
 800f310:	b2db      	uxtb	r3, r3
 800f312:	f003 0303 	and.w	r3, r3, #3
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00e      	beq.n	800f338 <tcp_output+0x2a0>
 800f31a:	2301      	movs	r3, #1
 800f31c:	e00d      	b.n	800f33a <tcp_output+0x2a2>
 800f31e:	bf00      	nop
 800f320:	08015750 	.word	0x08015750
 800f324:	08015c94 	.word	0x08015c94
 800f328:	080157a4 	.word	0x080157a4
 800f32c:	08015cac 	.word	0x08015cac
 800f330:	2000d3fc 	.word	0x2000d3fc
 800f334:	08015cd4 	.word	0x08015cd4
 800f338:	2300      	movs	r3, #0
 800f33a:	442b      	add	r3, r5
 800f33c:	4423      	add	r3, r4
 800f33e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	1ad3      	subs	r3, r2, r3
 800f348:	2b00      	cmp	r3, #0
 800f34a:	da02      	bge.n	800f352 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	68ba      	ldr	r2, [r7, #8]
 800f350:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f354:	891b      	ldrh	r3, [r3, #8]
 800f356:	461c      	mov	r4, r3
 800f358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35a:	68db      	ldr	r3, [r3, #12]
 800f35c:	899b      	ldrh	r3, [r3, #12]
 800f35e:	b29b      	uxth	r3, r3
 800f360:	4618      	mov	r0, r3
 800f362:	f7f9 fed5 	bl	8009110 <lwip_htons>
 800f366:	4603      	mov	r3, r0
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	f003 0303 	and.w	r3, r3, #3
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d001      	beq.n	800f376 <tcp_output+0x2de>
 800f372:	2301      	movs	r3, #1
 800f374:	e000      	b.n	800f378 <tcp_output+0x2e0>
 800f376:	2300      	movs	r3, #0
 800f378:	4423      	add	r3, r4
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d049      	beq.n	800f412 <tcp_output+0x37a>
      seg->next = NULL;
 800f37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f380:	2200      	movs	r2, #0
 800f382:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d105      	bne.n	800f398 <tcp_output+0x300>
        pcb->unacked = seg;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f390:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f394:	623b      	str	r3, [r7, #32]
 800f396:	e03f      	b.n	800f418 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7f9 fecb 	bl	800913a <lwip_htonl>
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	6a3b      	ldr	r3, [r7, #32]
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7f9 fec4 	bl	800913a <lwip_htonl>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	1ae3      	subs	r3, r4, r3
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	da24      	bge.n	800f404 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	3370      	adds	r3, #112	; 0x70
 800f3be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f3c0:	e002      	b.n	800f3c8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d011      	beq.n	800f3f4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f3d0:	69fb      	ldr	r3, [r7, #28]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68db      	ldr	r3, [r3, #12]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f7f9 feae 	bl	800913a <lwip_htonl>
 800f3de:	4604      	mov	r4, r0
 800f3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7f9 fea7 	bl	800913a <lwip_htonl>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	dbe6      	blt.n	800f3c2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f400:	601a      	str	r2, [r3, #0]
 800f402:	e009      	b.n	800f418 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f404:	6a3b      	ldr	r3, [r7, #32]
 800f406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f408:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f40a:	6a3b      	ldr	r3, [r7, #32]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	623b      	str	r3, [r7, #32]
 800f410:	e002      	b.n	800f418 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f412:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f414:	f7fc fc43 	bl	800bc9e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f41c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f420:	2b00      	cmp	r3, #0
 800f422:	d012      	beq.n	800f44a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f426:	68db      	ldr	r3, [r3, #12]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7f9 fe85 	bl	800913a <lwip_htonl>
 800f430:	4602      	mov	r2, r0
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f436:	1ad3      	subs	r3, r2, r3
 800f438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f43a:	8912      	ldrh	r2, [r2, #8]
 800f43c:	4413      	add	r3, r2
  while (seg != NULL &&
 800f43e:	69ba      	ldr	r2, [r7, #24]
 800f440:	429a      	cmp	r2, r3
 800f442:	f4bf aed9 	bcs.w	800f1f8 <tcp_output+0x160>
 800f446:	e000      	b.n	800f44a <tcp_output+0x3b2>
      break;
 800f448:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d108      	bne.n	800f464 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2200      	movs	r2, #0
 800f456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f45a:	e004      	b.n	800f466 <tcp_output+0x3ce>
    goto output_done;
 800f45c:	bf00      	nop
 800f45e:	e002      	b.n	800f466 <tcp_output+0x3ce>
    goto output_done;
 800f460:	bf00      	nop
 800f462:	e000      	b.n	800f466 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f464:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	8b5b      	ldrh	r3, [r3, #26]
 800f46a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f46e:	b29a      	uxth	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f474:	2300      	movs	r3, #0
}
 800f476:	4618      	mov	r0, r3
 800f478:	3728      	adds	r7, #40	; 0x28
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bdb0      	pop	{r4, r5, r7, pc}
 800f47e:	bf00      	nop

0800f480 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d106      	bne.n	800f49c <tcp_output_segment_busy+0x1c>
 800f48e:	4b09      	ldr	r3, [pc, #36]	; (800f4b4 <tcp_output_segment_busy+0x34>)
 800f490:	f240 529a 	movw	r2, #1434	; 0x59a
 800f494:	4908      	ldr	r1, [pc, #32]	; (800f4b8 <tcp_output_segment_busy+0x38>)
 800f496:	4809      	ldr	r0, [pc, #36]	; (800f4bc <tcp_output_segment_busy+0x3c>)
 800f498:	f003 fe6e 	bl	8013178 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	7b9b      	ldrb	r3, [r3, #14]
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d001      	beq.n	800f4aa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	e000      	b.n	800f4ac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f4aa:	2300      	movs	r3, #0
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	08015750 	.word	0x08015750
 800f4b8:	08015cec 	.word	0x08015cec
 800f4bc:	080157a4 	.word	0x080157a4

0800f4c0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f4c0:	b5b0      	push	{r4, r5, r7, lr}
 800f4c2:	b08c      	sub	sp, #48	; 0x30
 800f4c4:	af04      	add	r7, sp, #16
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d106      	bne.n	800f4e0 <tcp_output_segment+0x20>
 800f4d2:	4b63      	ldr	r3, [pc, #396]	; (800f660 <tcp_output_segment+0x1a0>)
 800f4d4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f4d8:	4962      	ldr	r1, [pc, #392]	; (800f664 <tcp_output_segment+0x1a4>)
 800f4da:	4863      	ldr	r0, [pc, #396]	; (800f668 <tcp_output_segment+0x1a8>)
 800f4dc:	f003 fe4c 	bl	8013178 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d106      	bne.n	800f4f4 <tcp_output_segment+0x34>
 800f4e6:	4b5e      	ldr	r3, [pc, #376]	; (800f660 <tcp_output_segment+0x1a0>)
 800f4e8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f4ec:	495f      	ldr	r1, [pc, #380]	; (800f66c <tcp_output_segment+0x1ac>)
 800f4ee:	485e      	ldr	r0, [pc, #376]	; (800f668 <tcp_output_segment+0x1a8>)
 800f4f0:	f003 fe42 	bl	8013178 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d106      	bne.n	800f508 <tcp_output_segment+0x48>
 800f4fa:	4b59      	ldr	r3, [pc, #356]	; (800f660 <tcp_output_segment+0x1a0>)
 800f4fc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f500:	495b      	ldr	r1, [pc, #364]	; (800f670 <tcp_output_segment+0x1b0>)
 800f502:	4859      	ldr	r0, [pc, #356]	; (800f668 <tcp_output_segment+0x1a8>)
 800f504:	f003 fe38 	bl	8013178 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f508:	68f8      	ldr	r0, [r7, #12]
 800f50a:	f7ff ffb9 	bl	800f480 <tcp_output_segment_busy>
 800f50e:	4603      	mov	r3, r0
 800f510:	2b00      	cmp	r3, #0
 800f512:	d001      	beq.n	800f518 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f514:	2300      	movs	r3, #0
 800f516:	e09f      	b.n	800f658 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	68dc      	ldr	r4, [r3, #12]
 800f520:	4610      	mov	r0, r2
 800f522:	f7f9 fe0a 	bl	800913a <lwip_htonl>
 800f526:	4603      	mov	r3, r0
 800f528:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	68dc      	ldr	r4, [r3, #12]
 800f532:	4610      	mov	r0, r2
 800f534:	f7f9 fdec 	bl	8009110 <lwip_htons>
 800f538:	4603      	mov	r3, r0
 800f53a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f540:	68ba      	ldr	r2, [r7, #8]
 800f542:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f544:	441a      	add	r2, r3
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	3314      	adds	r3, #20
 800f550:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	7a9b      	ldrb	r3, [r3, #10]
 800f556:	f003 0301 	and.w	r3, r3, #1
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d015      	beq.n	800f58a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	3304      	adds	r3, #4
 800f562:	461a      	mov	r2, r3
 800f564:	6879      	ldr	r1, [r7, #4]
 800f566:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f56a:	f7fc fe8f 	bl	800c28c <tcp_eff_send_mss_netif>
 800f56e:	4603      	mov	r3, r0
 800f570:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f572:	8b7b      	ldrh	r3, [r7, #26]
 800f574:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f578:	4618      	mov	r0, r3
 800f57a:	f7f9 fdde 	bl	800913a <lwip_htonl>
 800f57e:	4602      	mov	r2, r0
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	3304      	adds	r3, #4
 800f588:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f590:	2b00      	cmp	r3, #0
 800f592:	da02      	bge.n	800f59a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	2200      	movs	r2, #0
 800f598:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d10c      	bne.n	800f5bc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f5a2:	4b34      	ldr	r3, [pc, #208]	; (800f674 <tcp_output_segment+0x1b4>)
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7f9 fdc2 	bl	800913a <lwip_htonl>
 800f5b6:	4602      	mov	r2, r0
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	68da      	ldr	r2, [r3, #12]
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	1ad3      	subs	r3, r2, r3
 800f5c8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	8959      	ldrh	r1, [r3, #10]
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	8b3a      	ldrh	r2, [r7, #24]
 800f5d6:	1a8a      	subs	r2, r1, r2
 800f5d8:	b292      	uxth	r2, r2
 800f5da:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	8919      	ldrh	r1, [r3, #8]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	8b3a      	ldrh	r2, [r7, #24]
 800f5e8:	1a8a      	subs	r2, r1, r2
 800f5ea:	b292      	uxth	r2, r2
 800f5ec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	68d2      	ldr	r2, [r2, #12]
 800f5f6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	741a      	strb	r2, [r3, #16]
 800f600:	2200      	movs	r2, #0
 800f602:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	68db      	ldr	r3, [r3, #12]
 800f608:	f103 0214 	add.w	r2, r3, #20
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	7a9b      	ldrb	r3, [r3, #10]
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	f003 0304 	and.w	r3, r3, #4
 800f616:	4413      	add	r3, r2
 800f618:	69fa      	ldr	r2, [r7, #28]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d006      	beq.n	800f62c <tcp_output_segment+0x16c>
 800f61e:	4b10      	ldr	r3, [pc, #64]	; (800f660 <tcp_output_segment+0x1a0>)
 800f620:	f240 621c 	movw	r2, #1564	; 0x61c
 800f624:	4914      	ldr	r1, [pc, #80]	; (800f678 <tcp_output_segment+0x1b8>)
 800f626:	4810      	ldr	r0, [pc, #64]	; (800f668 <tcp_output_segment+0x1a8>)
 800f628:	f003 fda6 	bl	8013178 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	6858      	ldr	r0, [r3, #4]
 800f630:	68b9      	ldr	r1, [r7, #8]
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	1d1c      	adds	r4, r3, #4
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	7add      	ldrb	r5, [r3, #11]
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	7a9b      	ldrb	r3, [r3, #10]
 800f63e:	687a      	ldr	r2, [r7, #4]
 800f640:	9202      	str	r2, [sp, #8]
 800f642:	2206      	movs	r2, #6
 800f644:	9201      	str	r2, [sp, #4]
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	462b      	mov	r3, r5
 800f64a:	4622      	mov	r2, r4
 800f64c:	f002 fa66 	bl	8011b1c <ip4_output_if>
 800f650:	4603      	mov	r3, r0
 800f652:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f654:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3720      	adds	r7, #32
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bdb0      	pop	{r4, r5, r7, pc}
 800f660:	08015750 	.word	0x08015750
 800f664:	08015d14 	.word	0x08015d14
 800f668:	080157a4 	.word	0x080157a4
 800f66c:	08015d34 	.word	0x08015d34
 800f670:	08015d54 	.word	0x08015d54
 800f674:	2000d3ec 	.word	0x2000d3ec
 800f678:	08015d78 	.word	0x08015d78

0800f67c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f67c:	b5b0      	push	{r4, r5, r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d106      	bne.n	800f698 <tcp_rexmit_rto_prepare+0x1c>
 800f68a:	4b31      	ldr	r3, [pc, #196]	; (800f750 <tcp_rexmit_rto_prepare+0xd4>)
 800f68c:	f240 6263 	movw	r2, #1635	; 0x663
 800f690:	4930      	ldr	r1, [pc, #192]	; (800f754 <tcp_rexmit_rto_prepare+0xd8>)
 800f692:	4831      	ldr	r0, [pc, #196]	; (800f758 <tcp_rexmit_rto_prepare+0xdc>)
 800f694:	f003 fd70 	bl	8013178 <iprintf>

  if (pcb->unacked == NULL) {
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d102      	bne.n	800f6a6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f6a0:	f06f 0305 	mvn.w	r3, #5
 800f6a4:	e050      	b.n	800f748 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6aa:	60fb      	str	r3, [r7, #12]
 800f6ac:	e00b      	b.n	800f6c6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f6ae:	68f8      	ldr	r0, [r7, #12]
 800f6b0:	f7ff fee6 	bl	800f480 <tcp_output_segment_busy>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d002      	beq.n	800f6c0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f6ba:	f06f 0305 	mvn.w	r3, #5
 800f6be:	e043      	b.n	800f748 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	60fb      	str	r3, [r7, #12]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d1ef      	bne.n	800f6ae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f6ce:	68f8      	ldr	r0, [r7, #12]
 800f6d0:	f7ff fed6 	bl	800f480 <tcp_output_segment_busy>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d002      	beq.n	800f6e0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f6da:	f06f 0305 	mvn.w	r3, #5
 800f6de:	e033      	b.n	800f748 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	8b5b      	ldrh	r3, [r3, #26]
 800f6fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f6fe:	b29a      	uxth	r2, r3
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	68db      	ldr	r3, [r3, #12]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7f9 fd15 	bl	800913a <lwip_htonl>
 800f710:	4604      	mov	r4, r0
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	891b      	ldrh	r3, [r3, #8]
 800f716:	461d      	mov	r5, r3
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	899b      	ldrh	r3, [r3, #12]
 800f71e:	b29b      	uxth	r3, r3
 800f720:	4618      	mov	r0, r3
 800f722:	f7f9 fcf5 	bl	8009110 <lwip_htons>
 800f726:	4603      	mov	r3, r0
 800f728:	b2db      	uxtb	r3, r3
 800f72a:	f003 0303 	and.w	r3, r3, #3
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d001      	beq.n	800f736 <tcp_rexmit_rto_prepare+0xba>
 800f732:	2301      	movs	r3, #1
 800f734:	e000      	b.n	800f738 <tcp_rexmit_rto_prepare+0xbc>
 800f736:	2300      	movs	r3, #0
 800f738:	442b      	add	r3, r5
 800f73a:	18e2      	adds	r2, r4, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2200      	movs	r2, #0
 800f744:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f746:	2300      	movs	r3, #0
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3710      	adds	r7, #16
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bdb0      	pop	{r4, r5, r7, pc}
 800f750:	08015750 	.word	0x08015750
 800f754:	08015d8c 	.word	0x08015d8c
 800f758:	080157a4 	.word	0x080157a4

0800f75c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d106      	bne.n	800f778 <tcp_rexmit_rto_commit+0x1c>
 800f76a:	4b0d      	ldr	r3, [pc, #52]	; (800f7a0 <tcp_rexmit_rto_commit+0x44>)
 800f76c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f770:	490c      	ldr	r1, [pc, #48]	; (800f7a4 <tcp_rexmit_rto_commit+0x48>)
 800f772:	480d      	ldr	r0, [pc, #52]	; (800f7a8 <tcp_rexmit_rto_commit+0x4c>)
 800f774:	f003 fd00 	bl	8013178 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f77e:	2bff      	cmp	r3, #255	; 0xff
 800f780:	d007      	beq.n	800f792 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f788:	3301      	adds	r3, #1
 800f78a:	b2da      	uxtb	r2, r3
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f7ff fc80 	bl	800f098 <tcp_output>
}
 800f798:	bf00      	nop
 800f79a:	3708      	adds	r7, #8
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	08015750 	.word	0x08015750
 800f7a4:	08015db0 	.word	0x08015db0
 800f7a8:	080157a4 	.word	0x080157a4

0800f7ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d106      	bne.n	800f7c8 <tcp_rexmit_rto+0x1c>
 800f7ba:	4b0a      	ldr	r3, [pc, #40]	; (800f7e4 <tcp_rexmit_rto+0x38>)
 800f7bc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f7c0:	4909      	ldr	r1, [pc, #36]	; (800f7e8 <tcp_rexmit_rto+0x3c>)
 800f7c2:	480a      	ldr	r0, [pc, #40]	; (800f7ec <tcp_rexmit_rto+0x40>)
 800f7c4:	f003 fcd8 	bl	8013178 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7ff ff57 	bl	800f67c <tcp_rexmit_rto_prepare>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d102      	bne.n	800f7da <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7ff ffc1 	bl	800f75c <tcp_rexmit_rto_commit>
  }
}
 800f7da:	bf00      	nop
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	08015750 	.word	0x08015750
 800f7e8:	08015dd4 	.word	0x08015dd4
 800f7ec:	080157a4 	.word	0x080157a4

0800f7f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f7f0:	b590      	push	{r4, r7, lr}
 800f7f2:	b085      	sub	sp, #20
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d106      	bne.n	800f80c <tcp_rexmit+0x1c>
 800f7fe:	4b2f      	ldr	r3, [pc, #188]	; (800f8bc <tcp_rexmit+0xcc>)
 800f800:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f804:	492e      	ldr	r1, [pc, #184]	; (800f8c0 <tcp_rexmit+0xd0>)
 800f806:	482f      	ldr	r0, [pc, #188]	; (800f8c4 <tcp_rexmit+0xd4>)
 800f808:	f003 fcb6 	bl	8013178 <iprintf>

  if (pcb->unacked == NULL) {
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f810:	2b00      	cmp	r3, #0
 800f812:	d102      	bne.n	800f81a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f814:	f06f 0305 	mvn.w	r3, #5
 800f818:	e04c      	b.n	800f8b4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f81e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f820:	68b8      	ldr	r0, [r7, #8]
 800f822:	f7ff fe2d 	bl	800f480 <tcp_output_segment_busy>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d002      	beq.n	800f832 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f82c:	f06f 0305 	mvn.w	r3, #5
 800f830:	e040      	b.n	800f8b4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	681a      	ldr	r2, [r3, #0]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	336c      	adds	r3, #108	; 0x6c
 800f83e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f840:	e002      	b.n	800f848 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d011      	beq.n	800f874 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	4618      	mov	r0, r3
 800f85a:	f7f9 fc6e 	bl	800913a <lwip_htonl>
 800f85e:	4604      	mov	r4, r0
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	4618      	mov	r0, r3
 800f868:	f7f9 fc67 	bl	800913a <lwip_htonl>
 800f86c:	4603      	mov	r3, r0
 800f86e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f870:	2b00      	cmp	r3, #0
 800f872:	dbe6      	blt.n	800f842 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681a      	ldr	r2, [r3, #0]
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	68ba      	ldr	r2, [r7, #8]
 800f880:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d103      	bne.n	800f892 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2200      	movs	r2, #0
 800f88e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f898:	2bff      	cmp	r3, #255	; 0xff
 800f89a:	d007      	beq.n	800f8ac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	b2da      	uxtb	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f8b2:	2300      	movs	r3, #0
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3714      	adds	r7, #20
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd90      	pop	{r4, r7, pc}
 800f8bc:	08015750 	.word	0x08015750
 800f8c0:	08015df0 	.word	0x08015df0
 800f8c4:	080157a4 	.word	0x080157a4

0800f8c8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d106      	bne.n	800f8e4 <tcp_rexmit_fast+0x1c>
 800f8d6:	4b2a      	ldr	r3, [pc, #168]	; (800f980 <tcp_rexmit_fast+0xb8>)
 800f8d8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f8dc:	4929      	ldr	r1, [pc, #164]	; (800f984 <tcp_rexmit_fast+0xbc>)
 800f8de:	482a      	ldr	r0, [pc, #168]	; (800f988 <tcp_rexmit_fast+0xc0>)
 800f8e0:	f003 fc4a 	bl	8013178 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d044      	beq.n	800f976 <tcp_rexmit_fast+0xae>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	8b5b      	ldrh	r3, [r3, #26]
 800f8f0:	f003 0304 	and.w	r3, r3, #4
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d13e      	bne.n	800f976 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f7ff ff79 	bl	800f7f0 <tcp_rexmit>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d138      	bne.n	800f976 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f910:	4293      	cmp	r3, r2
 800f912:	bf28      	it	cs
 800f914:	4613      	movcs	r3, r2
 800f916:	b29b      	uxth	r3, r3
 800f918:	0fda      	lsrs	r2, r3, #31
 800f91a:	4413      	add	r3, r2
 800f91c:	105b      	asrs	r3, r3, #1
 800f91e:	b29a      	uxth	r2, r3
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f92c:	461a      	mov	r2, r3
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f932:	005b      	lsls	r3, r3, #1
 800f934:	429a      	cmp	r2, r3
 800f936:	d206      	bcs.n	800f946 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f93c:	005b      	lsls	r3, r3, #1
 800f93e:	b29a      	uxth	r2, r3
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f950:	4619      	mov	r1, r3
 800f952:	0049      	lsls	r1, r1, #1
 800f954:	440b      	add	r3, r1
 800f956:	b29b      	uxth	r3, r3
 800f958:	4413      	add	r3, r2
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	8b5b      	ldrh	r3, [r3, #26]
 800f966:	f043 0304 	orr.w	r3, r3, #4
 800f96a:	b29a      	uxth	r2, r3
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2200      	movs	r2, #0
 800f974:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f976:	bf00      	nop
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	08015750 	.word	0x08015750
 800f984:	08015e08 	.word	0x08015e08
 800f988:	080157a4 	.word	0x080157a4

0800f98c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b086      	sub	sp, #24
 800f990:	af00      	add	r7, sp, #0
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	607b      	str	r3, [r7, #4]
 800f996:	460b      	mov	r3, r1
 800f998:	817b      	strh	r3, [r7, #10]
 800f99a:	4613      	mov	r3, r2
 800f99c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f99e:	897a      	ldrh	r2, [r7, #10]
 800f9a0:	893b      	ldrh	r3, [r7, #8]
 800f9a2:	4413      	add	r3, r2
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	3314      	adds	r3, #20
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	2022      	movs	r0, #34	; 0x22
 800f9b2:	f7fa fc11 	bl	800a1d8 <pbuf_alloc>
 800f9b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d04d      	beq.n	800fa5a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f9be:	897b      	ldrh	r3, [r7, #10]
 800f9c0:	3313      	adds	r3, #19
 800f9c2:	697a      	ldr	r2, [r7, #20]
 800f9c4:	8952      	ldrh	r2, [r2, #10]
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	db06      	blt.n	800f9d8 <tcp_output_alloc_header_common+0x4c>
 800f9ca:	4b26      	ldr	r3, [pc, #152]	; (800fa64 <tcp_output_alloc_header_common+0xd8>)
 800f9cc:	f240 7223 	movw	r2, #1827	; 0x723
 800f9d0:	4925      	ldr	r1, [pc, #148]	; (800fa68 <tcp_output_alloc_header_common+0xdc>)
 800f9d2:	4826      	ldr	r0, [pc, #152]	; (800fa6c <tcp_output_alloc_header_common+0xe0>)
 800f9d4:	f003 fbd0 	bl	8013178 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f9de:	8c3b      	ldrh	r3, [r7, #32]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7f9 fb95 	bl	8009110 <lwip_htons>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f9ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7f9 fb8d 	bl	8009110 <lwip_htons>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fa04:	68f8      	ldr	r0, [r7, #12]
 800fa06:	f7f9 fb98 	bl	800913a <lwip_htonl>
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fa10:	897b      	ldrh	r3, [r7, #10]
 800fa12:	089b      	lsrs	r3, r3, #2
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	3305      	adds	r3, #5
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	031b      	lsls	r3, r3, #12
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	4313      	orrs	r3, r2
 800fa26:	b29b      	uxth	r3, r3
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7f9 fb71 	bl	8009110 <lwip_htons>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	461a      	mov	r2, r3
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fa36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7f9 fb69 	bl	8009110 <lwip_htons>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	461a      	mov	r2, r3
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	741a      	strb	r2, [r3, #16]
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	2200      	movs	r2, #0
 800fa54:	749a      	strb	r2, [r3, #18]
 800fa56:	2200      	movs	r2, #0
 800fa58:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800fa5a:	697b      	ldr	r3, [r7, #20]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3718      	adds	r7, #24
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	08015750 	.word	0x08015750
 800fa68:	08015e28 	.word	0x08015e28
 800fa6c:	080157a4 	.word	0x080157a4

0800fa70 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800fa70:	b5b0      	push	{r4, r5, r7, lr}
 800fa72:	b08a      	sub	sp, #40	; 0x28
 800fa74:	af04      	add	r7, sp, #16
 800fa76:	60f8      	str	r0, [r7, #12]
 800fa78:	607b      	str	r3, [r7, #4]
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	817b      	strh	r3, [r7, #10]
 800fa7e:	4613      	mov	r3, r2
 800fa80:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d106      	bne.n	800fa96 <tcp_output_alloc_header+0x26>
 800fa88:	4b15      	ldr	r3, [pc, #84]	; (800fae0 <tcp_output_alloc_header+0x70>)
 800fa8a:	f240 7242 	movw	r2, #1858	; 0x742
 800fa8e:	4915      	ldr	r1, [pc, #84]	; (800fae4 <tcp_output_alloc_header+0x74>)
 800fa90:	4815      	ldr	r0, [pc, #84]	; (800fae8 <tcp_output_alloc_header+0x78>)
 800fa92:	f003 fb71 	bl	8013178 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	8adb      	ldrh	r3, [r3, #22]
 800fa9e:	68fa      	ldr	r2, [r7, #12]
 800faa0:	8b12      	ldrh	r2, [r2, #24]
 800faa2:	68f9      	ldr	r1, [r7, #12]
 800faa4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800faa6:	893d      	ldrh	r5, [r7, #8]
 800faa8:	897c      	ldrh	r4, [r7, #10]
 800faaa:	9103      	str	r1, [sp, #12]
 800faac:	2110      	movs	r1, #16
 800faae:	9102      	str	r1, [sp, #8]
 800fab0:	9201      	str	r2, [sp, #4]
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	462a      	mov	r2, r5
 800fab8:	4621      	mov	r1, r4
 800faba:	f7ff ff67 	bl	800f98c <tcp_output_alloc_header_common>
 800fabe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d006      	beq.n	800fad4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faca:	68fa      	ldr	r2, [r7, #12]
 800facc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800face:	441a      	add	r2, r3
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fad4:	697b      	ldr	r3, [r7, #20]
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3718      	adds	r7, #24
 800fada:	46bd      	mov	sp, r7
 800fadc:	bdb0      	pop	{r4, r5, r7, pc}
 800fade:	bf00      	nop
 800fae0:	08015750 	.word	0x08015750
 800fae4:	08015e58 	.word	0x08015e58
 800fae8:	080157a4 	.word	0x080157a4

0800faec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b088      	sub	sp, #32
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	60f8      	str	r0, [r7, #12]
 800faf4:	60b9      	str	r1, [r7, #8]
 800faf6:	4611      	mov	r1, r2
 800faf8:	461a      	mov	r2, r3
 800fafa:	460b      	mov	r3, r1
 800fafc:	71fb      	strb	r3, [r7, #7]
 800fafe:	4613      	mov	r3, r2
 800fb00:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800fb02:	2300      	movs	r3, #0
 800fb04:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d106      	bne.n	800fb1a <tcp_output_fill_options+0x2e>
 800fb0c:	4b13      	ldr	r3, [pc, #76]	; (800fb5c <tcp_output_fill_options+0x70>)
 800fb0e:	f240 7256 	movw	r2, #1878	; 0x756
 800fb12:	4913      	ldr	r1, [pc, #76]	; (800fb60 <tcp_output_fill_options+0x74>)
 800fb14:	4813      	ldr	r0, [pc, #76]	; (800fb64 <tcp_output_fill_options+0x78>)
 800fb16:	f003 fb2f 	bl	8013178 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	685b      	ldr	r3, [r3, #4]
 800fb1e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fb20:	69bb      	ldr	r3, [r7, #24]
 800fb22:	3314      	adds	r3, #20
 800fb24:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fb26:	69bb      	ldr	r3, [r7, #24]
 800fb28:	f103 0214 	add.w	r2, r3, #20
 800fb2c:	8bfb      	ldrh	r3, [r7, #30]
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	4619      	mov	r1, r3
 800fb32:	79fb      	ldrb	r3, [r7, #7]
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	f003 0304 	and.w	r3, r3, #4
 800fb3a:	440b      	add	r3, r1
 800fb3c:	4413      	add	r3, r2
 800fb3e:	697a      	ldr	r2, [r7, #20]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d006      	beq.n	800fb52 <tcp_output_fill_options+0x66>
 800fb44:	4b05      	ldr	r3, [pc, #20]	; (800fb5c <tcp_output_fill_options+0x70>)
 800fb46:	f240 7275 	movw	r2, #1909	; 0x775
 800fb4a:	4907      	ldr	r1, [pc, #28]	; (800fb68 <tcp_output_fill_options+0x7c>)
 800fb4c:	4805      	ldr	r0, [pc, #20]	; (800fb64 <tcp_output_fill_options+0x78>)
 800fb4e:	f003 fb13 	bl	8013178 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800fb52:	bf00      	nop
 800fb54:	3720      	adds	r7, #32
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	08015750 	.word	0x08015750
 800fb60:	08015e80 	.word	0x08015e80
 800fb64:	080157a4 	.word	0x080157a4
 800fb68:	08015d78 	.word	0x08015d78

0800fb6c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b08a      	sub	sp, #40	; 0x28
 800fb70:	af04      	add	r7, sp, #16
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	607a      	str	r2, [r7, #4]
 800fb78:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d106      	bne.n	800fb8e <tcp_output_control_segment+0x22>
 800fb80:	4b1c      	ldr	r3, [pc, #112]	; (800fbf4 <tcp_output_control_segment+0x88>)
 800fb82:	f240 7287 	movw	r2, #1927	; 0x787
 800fb86:	491c      	ldr	r1, [pc, #112]	; (800fbf8 <tcp_output_control_segment+0x8c>)
 800fb88:	481c      	ldr	r0, [pc, #112]	; (800fbfc <tcp_output_control_segment+0x90>)
 800fb8a:	f003 faf5 	bl	8013178 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800fb8e:	683a      	ldr	r2, [r7, #0]
 800fb90:	6879      	ldr	r1, [r7, #4]
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	f7fe ff40 	bl	800ea18 <tcp_route>
 800fb98:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d102      	bne.n	800fba6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800fba0:	23fc      	movs	r3, #252	; 0xfc
 800fba2:	75fb      	strb	r3, [r7, #23]
 800fba4:	e01c      	b.n	800fbe0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d006      	beq.n	800fbba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	7adb      	ldrb	r3, [r3, #11]
 800fbb0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	7a9b      	ldrb	r3, [r3, #10]
 800fbb6:	757b      	strb	r3, [r7, #21]
 800fbb8:	e003      	b.n	800fbc2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800fbba:	23ff      	movs	r3, #255	; 0xff
 800fbbc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800fbc2:	7dba      	ldrb	r2, [r7, #22]
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	9302      	str	r3, [sp, #8]
 800fbc8:	2306      	movs	r3, #6
 800fbca:	9301      	str	r3, [sp, #4]
 800fbcc:	7d7b      	ldrb	r3, [r7, #21]
 800fbce:	9300      	str	r3, [sp, #0]
 800fbd0:	4613      	mov	r3, r2
 800fbd2:	683a      	ldr	r2, [r7, #0]
 800fbd4:	6879      	ldr	r1, [r7, #4]
 800fbd6:	68b8      	ldr	r0, [r7, #8]
 800fbd8:	f001 ffa0 	bl	8011b1c <ip4_output_if>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fbe0:	68b8      	ldr	r0, [r7, #8]
 800fbe2:	f7fa fddd 	bl	800a7a0 <pbuf_free>
  return err;
 800fbe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3718      	adds	r7, #24
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	08015750 	.word	0x08015750
 800fbf8:	08015ea8 	.word	0x08015ea8
 800fbfc:	080157a4 	.word	0x080157a4

0800fc00 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fc00:	b590      	push	{r4, r7, lr}
 800fc02:	b08b      	sub	sp, #44	; 0x2c
 800fc04:	af04      	add	r7, sp, #16
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	607a      	str	r2, [r7, #4]
 800fc0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d106      	bne.n	800fc22 <tcp_rst+0x22>
 800fc14:	4b1f      	ldr	r3, [pc, #124]	; (800fc94 <tcp_rst+0x94>)
 800fc16:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fc1a:	491f      	ldr	r1, [pc, #124]	; (800fc98 <tcp_rst+0x98>)
 800fc1c:	481f      	ldr	r0, [pc, #124]	; (800fc9c <tcp_rst+0x9c>)
 800fc1e:	f003 faab 	bl	8013178 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d106      	bne.n	800fc36 <tcp_rst+0x36>
 800fc28:	4b1a      	ldr	r3, [pc, #104]	; (800fc94 <tcp_rst+0x94>)
 800fc2a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fc2e:	491c      	ldr	r1, [pc, #112]	; (800fca0 <tcp_rst+0xa0>)
 800fc30:	481a      	ldr	r0, [pc, #104]	; (800fc9c <tcp_rst+0x9c>)
 800fc32:	f003 faa1 	bl	8013178 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fc36:	2300      	movs	r3, #0
 800fc38:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fc3a:	f246 0308 	movw	r3, #24584	; 0x6008
 800fc3e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fc40:	7dfb      	ldrb	r3, [r7, #23]
 800fc42:	b29c      	uxth	r4, r3
 800fc44:	68b8      	ldr	r0, [r7, #8]
 800fc46:	f7f9 fa78 	bl	800913a <lwip_htonl>
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	8abb      	ldrh	r3, [r7, #20]
 800fc4e:	9303      	str	r3, [sp, #12]
 800fc50:	2314      	movs	r3, #20
 800fc52:	9302      	str	r3, [sp, #8]
 800fc54:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fc56:	9301      	str	r3, [sp, #4]
 800fc58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	2200      	movs	r2, #0
 800fc60:	4621      	mov	r1, r4
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f7ff fe92 	bl	800f98c <tcp_output_alloc_header_common>
 800fc68:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d00c      	beq.n	800fc8a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fc70:	7dfb      	ldrb	r3, [r7, #23]
 800fc72:	2200      	movs	r2, #0
 800fc74:	6939      	ldr	r1, [r7, #16]
 800fc76:	68f8      	ldr	r0, [r7, #12]
 800fc78:	f7ff ff38 	bl	800faec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7e:	683a      	ldr	r2, [r7, #0]
 800fc80:	6939      	ldr	r1, [r7, #16]
 800fc82:	68f8      	ldr	r0, [r7, #12]
 800fc84:	f7ff ff72 	bl	800fb6c <tcp_output_control_segment>
 800fc88:	e000      	b.n	800fc8c <tcp_rst+0x8c>
    return;
 800fc8a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fc8c:	371c      	adds	r7, #28
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd90      	pop	{r4, r7, pc}
 800fc92:	bf00      	nop
 800fc94:	08015750 	.word	0x08015750
 800fc98:	08015ed4 	.word	0x08015ed4
 800fc9c:	080157a4 	.word	0x080157a4
 800fca0:	08015ef0 	.word	0x08015ef0

0800fca4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fca4:	b590      	push	{r4, r7, lr}
 800fca6:	b087      	sub	sp, #28
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fcac:	2300      	movs	r3, #0
 800fcae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d106      	bne.n	800fcc8 <tcp_send_empty_ack+0x24>
 800fcba:	4b28      	ldr	r3, [pc, #160]	; (800fd5c <tcp_send_empty_ack+0xb8>)
 800fcbc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800fcc0:	4927      	ldr	r1, [pc, #156]	; (800fd60 <tcp_send_empty_ack+0xbc>)
 800fcc2:	4828      	ldr	r0, [pc, #160]	; (800fd64 <tcp_send_empty_ack+0xc0>)
 800fcc4:	f003 fa58 	bl	8013178 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fcc8:	7dfb      	ldrb	r3, [r7, #23]
 800fcca:	009b      	lsls	r3, r3, #2
 800fccc:	b2db      	uxtb	r3, r3
 800fcce:	f003 0304 	and.w	r3, r3, #4
 800fcd2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fcd4:	7d7b      	ldrb	r3, [r7, #21]
 800fcd6:	b29c      	uxth	r4, r3
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7f9 fa2c 	bl	800913a <lwip_htonl>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2200      	movs	r2, #0
 800fce6:	4621      	mov	r1, r4
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f7ff fec1 	bl	800fa70 <tcp_output_alloc_header>
 800fcee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d109      	bne.n	800fd0a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	8b5b      	ldrh	r3, [r3, #26]
 800fcfa:	f043 0303 	orr.w	r3, r3, #3
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fd04:	f06f 0301 	mvn.w	r3, #1
 800fd08:	e023      	b.n	800fd52 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fd0a:	7dbb      	ldrb	r3, [r7, #22]
 800fd0c:	7dfa      	ldrb	r2, [r7, #23]
 800fd0e:	6939      	ldr	r1, [r7, #16]
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f7ff feeb 	bl	800faec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	3304      	adds	r3, #4
 800fd1c:	6939      	ldr	r1, [r7, #16]
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f7ff ff24 	bl	800fb6c <tcp_output_control_segment>
 800fd24:	4603      	mov	r3, r0
 800fd26:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fd28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d007      	beq.n	800fd40 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	8b5b      	ldrh	r3, [r3, #26]
 800fd34:	f043 0303 	orr.w	r3, r3, #3
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	835a      	strh	r2, [r3, #26]
 800fd3e:	e006      	b.n	800fd4e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	8b5b      	ldrh	r3, [r3, #26]
 800fd44:	f023 0303 	bic.w	r3, r3, #3
 800fd48:	b29a      	uxth	r2, r3
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fd4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	371c      	adds	r7, #28
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd90      	pop	{r4, r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	08015750 	.word	0x08015750
 800fd60:	08015f0c 	.word	0x08015f0c
 800fd64:	080157a4 	.word	0x080157a4

0800fd68 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fd68:	b590      	push	{r4, r7, lr}
 800fd6a:	b087      	sub	sp, #28
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fd70:	2300      	movs	r3, #0
 800fd72:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d106      	bne.n	800fd88 <tcp_keepalive+0x20>
 800fd7a:	4b18      	ldr	r3, [pc, #96]	; (800fddc <tcp_keepalive+0x74>)
 800fd7c:	f640 0224 	movw	r2, #2084	; 0x824
 800fd80:	4917      	ldr	r1, [pc, #92]	; (800fde0 <tcp_keepalive+0x78>)
 800fd82:	4818      	ldr	r0, [pc, #96]	; (800fde4 <tcp_keepalive+0x7c>)
 800fd84:	f003 f9f8 	bl	8013178 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fd88:	7dfb      	ldrb	r3, [r7, #23]
 800fd8a:	b29c      	uxth	r4, r3
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd90:	3b01      	subs	r3, #1
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7f9 f9d1 	bl	800913a <lwip_htonl>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	4621      	mov	r1, r4
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f7ff fe66 	bl	800fa70 <tcp_output_alloc_header>
 800fda4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d102      	bne.n	800fdb2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fdac:	f04f 33ff 	mov.w	r3, #4294967295
 800fdb0:	e010      	b.n	800fdd4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fdb2:	7dfb      	ldrb	r3, [r7, #23]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	6939      	ldr	r1, [r7, #16]
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f7ff fe97 	bl	800faec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	3304      	adds	r3, #4
 800fdc4:	6939      	ldr	r1, [r7, #16]
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f7ff fed0 	bl	800fb6c <tcp_output_control_segment>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fdd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	371c      	adds	r7, #28
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd90      	pop	{r4, r7, pc}
 800fddc:	08015750 	.word	0x08015750
 800fde0:	08015f2c 	.word	0x08015f2c
 800fde4:	080157a4 	.word	0x080157a4

0800fde8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fde8:	b590      	push	{r4, r7, lr}
 800fdea:	b08b      	sub	sp, #44	; 0x2c
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d106      	bne.n	800fe0a <tcp_zero_window_probe+0x22>
 800fdfc:	4b4c      	ldr	r3, [pc, #304]	; (800ff30 <tcp_zero_window_probe+0x148>)
 800fdfe:	f640 024f 	movw	r2, #2127	; 0x84f
 800fe02:	494c      	ldr	r1, [pc, #304]	; (800ff34 <tcp_zero_window_probe+0x14c>)
 800fe04:	484c      	ldr	r0, [pc, #304]	; (800ff38 <tcp_zero_window_probe+0x150>)
 800fe06:	f003 f9b7 	bl	8013178 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe0e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fe10:	6a3b      	ldr	r3, [r7, #32]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d101      	bne.n	800fe1a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fe16:	2300      	movs	r3, #0
 800fe18:	e086      	b.n	800ff28 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fe20:	2bff      	cmp	r3, #255	; 0xff
 800fe22:	d007      	beq.n	800fe34 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	b2da      	uxtb	r2, r3
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fe34:	6a3b      	ldr	r3, [r7, #32]
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	899b      	ldrh	r3, [r3, #12]
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7f9 f967 	bl	8009110 <lwip_htons>
 800fe42:	4603      	mov	r3, r0
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	f003 0301 	and.w	r3, r3, #1
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d005      	beq.n	800fe5a <tcp_zero_window_probe+0x72>
 800fe4e:	6a3b      	ldr	r3, [r7, #32]
 800fe50:	891b      	ldrh	r3, [r3, #8]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d101      	bne.n	800fe5a <tcp_zero_window_probe+0x72>
 800fe56:	2301      	movs	r3, #1
 800fe58:	e000      	b.n	800fe5c <tcp_zero_window_probe+0x74>
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fe5e:	7ffb      	ldrb	r3, [r7, #31]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	bf0c      	ite	eq
 800fe64:	2301      	moveq	r3, #1
 800fe66:	2300      	movne	r3, #0
 800fe68:	b2db      	uxtb	r3, r3
 800fe6a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fe6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe70:	b299      	uxth	r1, r3
 800fe72:	6a3b      	ldr	r3, [r7, #32]
 800fe74:	68db      	ldr	r3, [r3, #12]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	8bba      	ldrh	r2, [r7, #28]
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7ff fdf8 	bl	800fa70 <tcp_output_alloc_header>
 800fe80:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fe82:	69bb      	ldr	r3, [r7, #24]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d102      	bne.n	800fe8e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fe88:	f04f 33ff 	mov.w	r3, #4294967295
 800fe8c:	e04c      	b.n	800ff28 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fe8e:	69bb      	ldr	r3, [r7, #24]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fe94:	7ffb      	ldrb	r3, [r7, #31]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d011      	beq.n	800febe <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	899b      	ldrh	r3, [r3, #12]
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	b21b      	sxth	r3, r3
 800fea2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fea6:	b21c      	sxth	r4, r3
 800fea8:	2011      	movs	r0, #17
 800feaa:	f7f9 f931 	bl	8009110 <lwip_htons>
 800feae:	4603      	mov	r3, r0
 800feb0:	b21b      	sxth	r3, r3
 800feb2:	4323      	orrs	r3, r4
 800feb4:	b21b      	sxth	r3, r3
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	819a      	strh	r2, [r3, #12]
 800febc:	e010      	b.n	800fee0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800febe:	69bb      	ldr	r3, [r7, #24]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	3314      	adds	r3, #20
 800fec4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fec6:	6a3b      	ldr	r3, [r7, #32]
 800fec8:	6858      	ldr	r0, [r3, #4]
 800feca:	6a3b      	ldr	r3, [r7, #32]
 800fecc:	685b      	ldr	r3, [r3, #4]
 800fece:	891a      	ldrh	r2, [r3, #8]
 800fed0:	6a3b      	ldr	r3, [r7, #32]
 800fed2:	891b      	ldrh	r3, [r3, #8]
 800fed4:	1ad3      	subs	r3, r2, r3
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	2201      	movs	r2, #1
 800feda:	6939      	ldr	r1, [r7, #16]
 800fedc:	f7fa fe56 	bl	800ab8c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fee0:	6a3b      	ldr	r3, [r7, #32]
 800fee2:	68db      	ldr	r3, [r3, #12]
 800fee4:	685b      	ldr	r3, [r3, #4]
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7f9 f927 	bl	800913a <lwip_htonl>
 800feec:	4603      	mov	r3, r0
 800feee:	3301      	adds	r3, #1
 800fef0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	1ad3      	subs	r3, r2, r3
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	da02      	bge.n	800ff04 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	68fa      	ldr	r2, [r7, #12]
 800ff02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ff04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff08:	2200      	movs	r2, #0
 800ff0a:	69b9      	ldr	r1, [r7, #24]
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f7ff fded 	bl	800faec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ff12:	687a      	ldr	r2, [r7, #4]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	3304      	adds	r3, #4
 800ff18:	69b9      	ldr	r1, [r7, #24]
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f7ff fe26 	bl	800fb6c <tcp_output_control_segment>
 800ff20:	4603      	mov	r3, r0
 800ff22:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ff24:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	372c      	adds	r7, #44	; 0x2c
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd90      	pop	{r4, r7, pc}
 800ff30:	08015750 	.word	0x08015750
 800ff34:	08015f48 	.word	0x08015f48
 800ff38:	080157a4 	.word	0x080157a4

0800ff3c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ff44:	f7fa ff10 	bl	800ad68 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ff48:	4b0a      	ldr	r3, [pc, #40]	; (800ff74 <tcpip_tcp_timer+0x38>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d103      	bne.n	800ff58 <tcpip_tcp_timer+0x1c>
 800ff50:	4b09      	ldr	r3, [pc, #36]	; (800ff78 <tcpip_tcp_timer+0x3c>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d005      	beq.n	800ff64 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ff58:	2200      	movs	r2, #0
 800ff5a:	4908      	ldr	r1, [pc, #32]	; (800ff7c <tcpip_tcp_timer+0x40>)
 800ff5c:	20fa      	movs	r0, #250	; 0xfa
 800ff5e:	f000 f8f3 	bl	8010148 <sys_timeout>
 800ff62:	e003      	b.n	800ff6c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ff64:	4b06      	ldr	r3, [pc, #24]	; (800ff80 <tcpip_tcp_timer+0x44>)
 800ff66:	2200      	movs	r2, #0
 800ff68:	601a      	str	r2, [r3, #0]
  }
}
 800ff6a:	bf00      	nop
 800ff6c:	bf00      	nop
 800ff6e:	3708      	adds	r7, #8
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	2000d3e8 	.word	0x2000d3e8
 800ff78:	2000d3f8 	.word	0x2000d3f8
 800ff7c:	0800ff3d 	.word	0x0800ff3d
 800ff80:	20006880 	.word	0x20006880

0800ff84 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ff88:	4b0a      	ldr	r3, [pc, #40]	; (800ffb4 <tcp_timer_needed+0x30>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d10f      	bne.n	800ffb0 <tcp_timer_needed+0x2c>
 800ff90:	4b09      	ldr	r3, [pc, #36]	; (800ffb8 <tcp_timer_needed+0x34>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d103      	bne.n	800ffa0 <tcp_timer_needed+0x1c>
 800ff98:	4b08      	ldr	r3, [pc, #32]	; (800ffbc <tcp_timer_needed+0x38>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d007      	beq.n	800ffb0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ffa0:	4b04      	ldr	r3, [pc, #16]	; (800ffb4 <tcp_timer_needed+0x30>)
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	4905      	ldr	r1, [pc, #20]	; (800ffc0 <tcp_timer_needed+0x3c>)
 800ffaa:	20fa      	movs	r0, #250	; 0xfa
 800ffac:	f000 f8cc 	bl	8010148 <sys_timeout>
  }
}
 800ffb0:	bf00      	nop
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	20006880 	.word	0x20006880
 800ffb8:	2000d3e8 	.word	0x2000d3e8
 800ffbc:	2000d3f8 	.word	0x2000d3f8
 800ffc0:	0800ff3d 	.word	0x0800ff3d

0800ffc4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b086      	sub	sp, #24
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ffd0:	200a      	movs	r0, #10
 800ffd2:	f7f9 fd53 	bl	8009a7c <memp_malloc>
 800ffd6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d109      	bne.n	800fff2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d151      	bne.n	8010088 <sys_timeout_abs+0xc4>
 800ffe4:	4b2a      	ldr	r3, [pc, #168]	; (8010090 <sys_timeout_abs+0xcc>)
 800ffe6:	22be      	movs	r2, #190	; 0xbe
 800ffe8:	492a      	ldr	r1, [pc, #168]	; (8010094 <sys_timeout_abs+0xd0>)
 800ffea:	482b      	ldr	r0, [pc, #172]	; (8010098 <sys_timeout_abs+0xd4>)
 800ffec:	f003 f8c4 	bl	8013178 <iprintf>
    return;
 800fff0:	e04a      	b.n	8010088 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	2200      	movs	r2, #0
 800fff6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	68ba      	ldr	r2, [r7, #8]
 800fffc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	68fa      	ldr	r2, [r7, #12]
 8010008:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801000a:	4b24      	ldr	r3, [pc, #144]	; (801009c <sys_timeout_abs+0xd8>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d103      	bne.n	801001a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010012:	4a22      	ldr	r2, [pc, #136]	; (801009c <sys_timeout_abs+0xd8>)
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	6013      	str	r3, [r2, #0]
    return;
 8010018:	e037      	b.n	801008a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	685a      	ldr	r2, [r3, #4]
 801001e:	4b1f      	ldr	r3, [pc, #124]	; (801009c <sys_timeout_abs+0xd8>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	1ad3      	subs	r3, r2, r3
 8010026:	0fdb      	lsrs	r3, r3, #31
 8010028:	f003 0301 	and.w	r3, r3, #1
 801002c:	b2db      	uxtb	r3, r3
 801002e:	2b00      	cmp	r3, #0
 8010030:	d007      	beq.n	8010042 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010032:	4b1a      	ldr	r3, [pc, #104]	; (801009c <sys_timeout_abs+0xd8>)
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801003a:	4a18      	ldr	r2, [pc, #96]	; (801009c <sys_timeout_abs+0xd8>)
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	6013      	str	r3, [r2, #0]
 8010040:	e023      	b.n	801008a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010042:	4b16      	ldr	r3, [pc, #88]	; (801009c <sys_timeout_abs+0xd8>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	617b      	str	r3, [r7, #20]
 8010048:	e01a      	b.n	8010080 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d00b      	beq.n	801006a <sys_timeout_abs+0xa6>
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	685a      	ldr	r2, [r3, #4]
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	1ad3      	subs	r3, r2, r3
 801005e:	0fdb      	lsrs	r3, r3, #31
 8010060:	f003 0301 	and.w	r3, r3, #1
 8010064:	b2db      	uxtb	r3, r3
 8010066:	2b00      	cmp	r3, #0
 8010068:	d007      	beq.n	801007a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	681a      	ldr	r2, [r3, #0]
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	693a      	ldr	r2, [r7, #16]
 8010076:	601a      	str	r2, [r3, #0]
        break;
 8010078:	e007      	b.n	801008a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	617b      	str	r3, [r7, #20]
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d1e1      	bne.n	801004a <sys_timeout_abs+0x86>
 8010086:	e000      	b.n	801008a <sys_timeout_abs+0xc6>
    return;
 8010088:	bf00      	nop
      }
    }
  }
}
 801008a:	3718      	adds	r7, #24
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	08015f6c 	.word	0x08015f6c
 8010094:	08015fa0 	.word	0x08015fa0
 8010098:	08015fe0 	.word	0x08015fe0
 801009c:	20006878 	.word	0x20006878

080100a0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b086      	sub	sp, #24
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	4798      	blx	r3

  now = sys_now();
 80100b2:	f7f5 fecb 	bl	8005e4c <sys_now>
 80100b6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	4b0f      	ldr	r3, [pc, #60]	; (80100fc <lwip_cyclic_timer+0x5c>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	4413      	add	r3, r2
 80100c2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80100c4:	68fa      	ldr	r2, [r7, #12]
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	0fdb      	lsrs	r3, r3, #31
 80100cc:	f003 0301 	and.w	r3, r3, #1
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d009      	beq.n	80100ea <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	4413      	add	r3, r2
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	4907      	ldr	r1, [pc, #28]	; (8010100 <lwip_cyclic_timer+0x60>)
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7ff ff6e 	bl	800ffc4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80100e8:	e004      	b.n	80100f4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80100ea:	687a      	ldr	r2, [r7, #4]
 80100ec:	4904      	ldr	r1, [pc, #16]	; (8010100 <lwip_cyclic_timer+0x60>)
 80100ee:	68f8      	ldr	r0, [r7, #12]
 80100f0:	f7ff ff68 	bl	800ffc4 <sys_timeout_abs>
}
 80100f4:	bf00      	nop
 80100f6:	3718      	adds	r7, #24
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	2000687c 	.word	0x2000687c
 8010100:	080100a1 	.word	0x080100a1

08010104 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801010a:	2301      	movs	r3, #1
 801010c:	607b      	str	r3, [r7, #4]
 801010e:	e00e      	b.n	801012e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010110:	4a0b      	ldr	r2, [pc, #44]	; (8010140 <sys_timeouts_init+0x3c>)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	00db      	lsls	r3, r3, #3
 801011c:	4a08      	ldr	r2, [pc, #32]	; (8010140 <sys_timeouts_init+0x3c>)
 801011e:	4413      	add	r3, r2
 8010120:	461a      	mov	r2, r3
 8010122:	4908      	ldr	r1, [pc, #32]	; (8010144 <sys_timeouts_init+0x40>)
 8010124:	f000 f810 	bl	8010148 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	3301      	adds	r3, #1
 801012c:	607b      	str	r3, [r7, #4]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2b02      	cmp	r3, #2
 8010132:	d9ed      	bls.n	8010110 <sys_timeouts_init+0xc>
  }
}
 8010134:	bf00      	nop
 8010136:	bf00      	nop
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	bf00      	nop
 8010140:	08016b94 	.word	0x08016b94
 8010144:	080100a1 	.word	0x080100a1

08010148 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b086      	sub	sp, #24
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801015a:	d306      	bcc.n	801016a <sys_timeout+0x22>
 801015c:	4b0a      	ldr	r3, [pc, #40]	; (8010188 <sys_timeout+0x40>)
 801015e:	f240 1229 	movw	r2, #297	; 0x129
 8010162:	490a      	ldr	r1, [pc, #40]	; (801018c <sys_timeout+0x44>)
 8010164:	480a      	ldr	r0, [pc, #40]	; (8010190 <sys_timeout+0x48>)
 8010166:	f003 f807 	bl	8013178 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801016a:	f7f5 fe6f 	bl	8005e4c <sys_now>
 801016e:	4602      	mov	r2, r0
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	4413      	add	r3, r2
 8010174:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	68b9      	ldr	r1, [r7, #8]
 801017a:	6978      	ldr	r0, [r7, #20]
 801017c:	f7ff ff22 	bl	800ffc4 <sys_timeout_abs>
#endif
}
 8010180:	bf00      	nop
 8010182:	3718      	adds	r7, #24
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	08015f6c 	.word	0x08015f6c
 801018c:	08016008 	.word	0x08016008
 8010190:	08015fe0 	.word	0x08015fe0

08010194 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b084      	sub	sp, #16
 8010198:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801019a:	f7f5 fe57 	bl	8005e4c <sys_now>
 801019e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80101a0:	4b17      	ldr	r3, [pc, #92]	; (8010200 <sys_check_timeouts+0x6c>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d022      	beq.n	80101f2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	68fa      	ldr	r2, [r7, #12]
 80101b2:	1ad3      	subs	r3, r2, r3
 80101b4:	0fdb      	lsrs	r3, r3, #31
 80101b6:	f003 0301 	and.w	r3, r3, #1
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d11a      	bne.n	80101f6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4a0e      	ldr	r2, [pc, #56]	; (8010200 <sys_check_timeouts+0x6c>)
 80101c6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	689b      	ldr	r3, [r3, #8]
 80101cc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	4a0a      	ldr	r2, [pc, #40]	; (8010204 <sys_check_timeouts+0x70>)
 80101da:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80101dc:	68b9      	ldr	r1, [r7, #8]
 80101de:	200a      	movs	r0, #10
 80101e0:	f7f9 fc9e 	bl	8009b20 <memp_free>
    if (handler != NULL) {
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d0da      	beq.n	80101a0 <sys_check_timeouts+0xc>
      handler(arg);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6838      	ldr	r0, [r7, #0]
 80101ee:	4798      	blx	r3
  do {
 80101f0:	e7d6      	b.n	80101a0 <sys_check_timeouts+0xc>
      return;
 80101f2:	bf00      	nop
 80101f4:	e000      	b.n	80101f8 <sys_check_timeouts+0x64>
      return;
 80101f6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80101f8:	3710      	adds	r7, #16
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	20006878 	.word	0x20006878
 8010204:	2000687c 	.word	0x2000687c

08010208 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801020e:	4b16      	ldr	r3, [pc, #88]	; (8010268 <sys_timeouts_sleeptime+0x60>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d102      	bne.n	801021c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8010216:	f04f 33ff 	mov.w	r3, #4294967295
 801021a:	e020      	b.n	801025e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801021c:	f7f5 fe16 	bl	8005e4c <sys_now>
 8010220:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8010222:	4b11      	ldr	r3, [pc, #68]	; (8010268 <sys_timeouts_sleeptime+0x60>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	685a      	ldr	r2, [r3, #4]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	1ad3      	subs	r3, r2, r3
 801022c:	0fdb      	lsrs	r3, r3, #31
 801022e:	f003 0301 	and.w	r3, r3, #1
 8010232:	b2db      	uxtb	r3, r3
 8010234:	2b00      	cmp	r3, #0
 8010236:	d001      	beq.n	801023c <sys_timeouts_sleeptime+0x34>
    return 0;
 8010238:	2300      	movs	r3, #0
 801023a:	e010      	b.n	801025e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801023c:	4b0a      	ldr	r3, [pc, #40]	; (8010268 <sys_timeouts_sleeptime+0x60>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	685a      	ldr	r2, [r3, #4]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	1ad3      	subs	r3, r2, r3
 8010246:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	da06      	bge.n	801025c <sys_timeouts_sleeptime+0x54>
 801024e:	4b07      	ldr	r3, [pc, #28]	; (801026c <sys_timeouts_sleeptime+0x64>)
 8010250:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010254:	4906      	ldr	r1, [pc, #24]	; (8010270 <sys_timeouts_sleeptime+0x68>)
 8010256:	4807      	ldr	r0, [pc, #28]	; (8010274 <sys_timeouts_sleeptime+0x6c>)
 8010258:	f002 ff8e 	bl	8013178 <iprintf>
    return ret;
 801025c:	683b      	ldr	r3, [r7, #0]
  }
}
 801025e:	4618      	mov	r0, r3
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
 8010266:	bf00      	nop
 8010268:	20006878 	.word	0x20006878
 801026c:	08015f6c 	.word	0x08015f6c
 8010270:	08016040 	.word	0x08016040
 8010274:	08015fe0 	.word	0x08015fe0

08010278 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801027c:	f002 ff94 	bl	80131a8 <rand>
 8010280:	4603      	mov	r3, r0
 8010282:	b29b      	uxth	r3, r3
 8010284:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010288:	b29b      	uxth	r3, r3
 801028a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801028e:	b29a      	uxth	r2, r3
 8010290:	4b01      	ldr	r3, [pc, #4]	; (8010298 <udp_init+0x20>)
 8010292:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010294:	bf00      	nop
 8010296:	bd80      	pop	{r7, pc}
 8010298:	20000018 	.word	0x20000018

0801029c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b084      	sub	sp, #16
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	60f8      	str	r0, [r7, #12]
 80102a4:	60b9      	str	r1, [r7, #8]
 80102a6:	4613      	mov	r3, r2
 80102a8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d105      	bne.n	80102bc <udp_input_local_match+0x20>
 80102b0:	4b27      	ldr	r3, [pc, #156]	; (8010350 <udp_input_local_match+0xb4>)
 80102b2:	2287      	movs	r2, #135	; 0x87
 80102b4:	4927      	ldr	r1, [pc, #156]	; (8010354 <udp_input_local_match+0xb8>)
 80102b6:	4828      	ldr	r0, [pc, #160]	; (8010358 <udp_input_local_match+0xbc>)
 80102b8:	f002 ff5e 	bl	8013178 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d105      	bne.n	80102ce <udp_input_local_match+0x32>
 80102c2:	4b23      	ldr	r3, [pc, #140]	; (8010350 <udp_input_local_match+0xb4>)
 80102c4:	2288      	movs	r2, #136	; 0x88
 80102c6:	4925      	ldr	r1, [pc, #148]	; (801035c <udp_input_local_match+0xc0>)
 80102c8:	4823      	ldr	r0, [pc, #140]	; (8010358 <udp_input_local_match+0xbc>)
 80102ca:	f002 ff55 	bl	8013178 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	7a1b      	ldrb	r3, [r3, #8]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d00b      	beq.n	80102ee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	7a1a      	ldrb	r2, [r3, #8]
 80102da:	4b21      	ldr	r3, [pc, #132]	; (8010360 <udp_input_local_match+0xc4>)
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80102e2:	3301      	adds	r3, #1
 80102e4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d001      	beq.n	80102ee <udp_input_local_match+0x52>
    return 0;
 80102ea:	2300      	movs	r3, #0
 80102ec:	e02b      	b.n	8010346 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80102ee:	79fb      	ldrb	r3, [r7, #7]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d018      	beq.n	8010326 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d013      	beq.n	8010322 <udp_input_local_match+0x86>
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d00f      	beq.n	8010322 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010302:	4b17      	ldr	r3, [pc, #92]	; (8010360 <udp_input_local_match+0xc4>)
 8010304:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010306:	f1b3 3fff 	cmp.w	r3, #4294967295
 801030a:	d00a      	beq.n	8010322 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	681a      	ldr	r2, [r3, #0]
 8010310:	4b13      	ldr	r3, [pc, #76]	; (8010360 <udp_input_local_match+0xc4>)
 8010312:	695b      	ldr	r3, [r3, #20]
 8010314:	405a      	eors	r2, r3
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	3308      	adds	r3, #8
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801031e:	2b00      	cmp	r3, #0
 8010320:	d110      	bne.n	8010344 <udp_input_local_match+0xa8>
          return 1;
 8010322:	2301      	movs	r3, #1
 8010324:	e00f      	b.n	8010346 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d009      	beq.n	8010340 <udp_input_local_match+0xa4>
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d005      	beq.n	8010340 <udp_input_local_match+0xa4>
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	4b09      	ldr	r3, [pc, #36]	; (8010360 <udp_input_local_match+0xc4>)
 801033a:	695b      	ldr	r3, [r3, #20]
 801033c:	429a      	cmp	r2, r3
 801033e:	d101      	bne.n	8010344 <udp_input_local_match+0xa8>
        return 1;
 8010340:	2301      	movs	r3, #1
 8010342:	e000      	b.n	8010346 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010344:	2300      	movs	r3, #0
}
 8010346:	4618      	mov	r0, r3
 8010348:	3710      	adds	r7, #16
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop
 8010350:	08016054 	.word	0x08016054
 8010354:	08016084 	.word	0x08016084
 8010358:	080160a8 	.word	0x080160a8
 801035c:	080160d0 	.word	0x080160d0
 8010360:	20009cd4 	.word	0x20009cd4

08010364 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010364:	b590      	push	{r4, r7, lr}
 8010366:	b08d      	sub	sp, #52	; 0x34
 8010368:	af02      	add	r7, sp, #8
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801036e:	2300      	movs	r3, #0
 8010370:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d105      	bne.n	8010384 <udp_input+0x20>
 8010378:	4b7c      	ldr	r3, [pc, #496]	; (801056c <udp_input+0x208>)
 801037a:	22cf      	movs	r2, #207	; 0xcf
 801037c:	497c      	ldr	r1, [pc, #496]	; (8010570 <udp_input+0x20c>)
 801037e:	487d      	ldr	r0, [pc, #500]	; (8010574 <udp_input+0x210>)
 8010380:	f002 fefa 	bl	8013178 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d105      	bne.n	8010396 <udp_input+0x32>
 801038a:	4b78      	ldr	r3, [pc, #480]	; (801056c <udp_input+0x208>)
 801038c:	22d0      	movs	r2, #208	; 0xd0
 801038e:	497a      	ldr	r1, [pc, #488]	; (8010578 <udp_input+0x214>)
 8010390:	4878      	ldr	r0, [pc, #480]	; (8010574 <udp_input+0x210>)
 8010392:	f002 fef1 	bl	8013178 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	895b      	ldrh	r3, [r3, #10]
 801039a:	2b07      	cmp	r3, #7
 801039c:	d803      	bhi.n	80103a6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f7fa f9fe 	bl	800a7a0 <pbuf_free>
    goto end;
 80103a4:	e0de      	b.n	8010564 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80103ac:	4b73      	ldr	r3, [pc, #460]	; (801057c <udp_input+0x218>)
 80103ae:	695b      	ldr	r3, [r3, #20]
 80103b0:	4a72      	ldr	r2, [pc, #456]	; (801057c <udp_input+0x218>)
 80103b2:	6812      	ldr	r2, [r2, #0]
 80103b4:	4611      	mov	r1, r2
 80103b6:	4618      	mov	r0, r3
 80103b8:	f001 fc88 	bl	8011ccc <ip4_addr_isbroadcast_u32>
 80103bc:	4603      	mov	r3, r0
 80103be:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	881b      	ldrh	r3, [r3, #0]
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7f8 fea2 	bl	8009110 <lwip_htons>
 80103cc:	4603      	mov	r3, r0
 80103ce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	885b      	ldrh	r3, [r3, #2]
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7f8 fe9a 	bl	8009110 <lwip_htons>
 80103dc:	4603      	mov	r3, r0
 80103de:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80103e0:	2300      	movs	r3, #0
 80103e2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80103e4:	2300      	movs	r3, #0
 80103e6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80103e8:	2300      	movs	r3, #0
 80103ea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80103ec:	4b64      	ldr	r3, [pc, #400]	; (8010580 <udp_input+0x21c>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	627b      	str	r3, [r7, #36]	; 0x24
 80103f2:	e054      	b.n	801049e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80103f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f6:	8a5b      	ldrh	r3, [r3, #18]
 80103f8:	89fa      	ldrh	r2, [r7, #14]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d14a      	bne.n	8010494 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80103fe:	7cfb      	ldrb	r3, [r7, #19]
 8010400:	461a      	mov	r2, r3
 8010402:	6839      	ldr	r1, [r7, #0]
 8010404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010406:	f7ff ff49 	bl	801029c <udp_input_local_match>
 801040a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801040c:	2b00      	cmp	r3, #0
 801040e:	d041      	beq.n	8010494 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010412:	7c1b      	ldrb	r3, [r3, #16]
 8010414:	f003 0304 	and.w	r3, r3, #4
 8010418:	2b00      	cmp	r3, #0
 801041a:	d11d      	bne.n	8010458 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d102      	bne.n	8010428 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010424:	61fb      	str	r3, [r7, #28]
 8010426:	e017      	b.n	8010458 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010428:	7cfb      	ldrb	r3, [r7, #19]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d014      	beq.n	8010458 <udp_input+0xf4>
 801042e:	4b53      	ldr	r3, [pc, #332]	; (801057c <udp_input+0x218>)
 8010430:	695b      	ldr	r3, [r3, #20]
 8010432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010436:	d10f      	bne.n	8010458 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	3304      	adds	r3, #4
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	429a      	cmp	r2, r3
 8010444:	d008      	beq.n	8010458 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	3304      	adds	r3, #4
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	429a      	cmp	r2, r3
 8010452:	d101      	bne.n	8010458 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010456:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045a:	8a9b      	ldrh	r3, [r3, #20]
 801045c:	8a3a      	ldrh	r2, [r7, #16]
 801045e:	429a      	cmp	r2, r3
 8010460:	d118      	bne.n	8010494 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010464:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010466:	2b00      	cmp	r3, #0
 8010468:	d005      	beq.n	8010476 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801046a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046c:	685a      	ldr	r2, [r3, #4]
 801046e:	4b43      	ldr	r3, [pc, #268]	; (801057c <udp_input+0x218>)
 8010470:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010472:	429a      	cmp	r2, r3
 8010474:	d10e      	bne.n	8010494 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010476:	6a3b      	ldr	r3, [r7, #32]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d014      	beq.n	80104a6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801047c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047e:	68da      	ldr	r2, [r3, #12]
 8010480:	6a3b      	ldr	r3, [r7, #32]
 8010482:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010484:	4b3e      	ldr	r3, [pc, #248]	; (8010580 <udp_input+0x21c>)
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801048c:	4a3c      	ldr	r2, [pc, #240]	; (8010580 <udp_input+0x21c>)
 801048e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010490:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010492:	e008      	b.n	80104a6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010496:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	627b      	str	r3, [r7, #36]	; 0x24
 801049e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d1a7      	bne.n	80103f4 <udp_input+0x90>
 80104a4:	e000      	b.n	80104a8 <udp_input+0x144>
        break;
 80104a6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80104a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d101      	bne.n	80104b2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80104ae:	69fb      	ldr	r3, [r7, #28]
 80104b0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80104b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d002      	beq.n	80104be <udp_input+0x15a>
    for_us = 1;
 80104b8:	2301      	movs	r3, #1
 80104ba:	76fb      	strb	r3, [r7, #27]
 80104bc:	e00a      	b.n	80104d4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	3304      	adds	r3, #4
 80104c2:	681a      	ldr	r2, [r3, #0]
 80104c4:	4b2d      	ldr	r3, [pc, #180]	; (801057c <udp_input+0x218>)
 80104c6:	695b      	ldr	r3, [r3, #20]
 80104c8:	429a      	cmp	r2, r3
 80104ca:	bf0c      	ite	eq
 80104cc:	2301      	moveq	r3, #1
 80104ce:	2300      	movne	r3, #0
 80104d0:	b2db      	uxtb	r3, r3
 80104d2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80104d4:	7efb      	ldrb	r3, [r7, #27]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d041      	beq.n	801055e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80104da:	2108      	movs	r1, #8
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f7fa f8d9 	bl	800a694 <pbuf_remove_header>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d00a      	beq.n	80104fe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80104e8:	4b20      	ldr	r3, [pc, #128]	; (801056c <udp_input+0x208>)
 80104ea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80104ee:	4925      	ldr	r1, [pc, #148]	; (8010584 <udp_input+0x220>)
 80104f0:	4820      	ldr	r0, [pc, #128]	; (8010574 <udp_input+0x210>)
 80104f2:	f002 fe41 	bl	8013178 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f7fa f952 	bl	800a7a0 <pbuf_free>
      goto end;
 80104fc:	e032      	b.n	8010564 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80104fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010500:	2b00      	cmp	r3, #0
 8010502:	d012      	beq.n	801052a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010506:	699b      	ldr	r3, [r3, #24]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00a      	beq.n	8010522 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050e:	699c      	ldr	r4, [r3, #24]
 8010510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010512:	69d8      	ldr	r0, [r3, #28]
 8010514:	8a3b      	ldrh	r3, [r7, #16]
 8010516:	9300      	str	r3, [sp, #0]
 8010518:	4b1b      	ldr	r3, [pc, #108]	; (8010588 <udp_input+0x224>)
 801051a:	687a      	ldr	r2, [r7, #4]
 801051c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801051e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010520:	e021      	b.n	8010566 <udp_input+0x202>
        pbuf_free(p);
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f7fa f93c 	bl	800a7a0 <pbuf_free>
        goto end;
 8010528:	e01c      	b.n	8010564 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801052a:	7cfb      	ldrb	r3, [r7, #19]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d112      	bne.n	8010556 <udp_input+0x1f2>
 8010530:	4b12      	ldr	r3, [pc, #72]	; (801057c <udp_input+0x218>)
 8010532:	695b      	ldr	r3, [r3, #20]
 8010534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010538:	2be0      	cmp	r3, #224	; 0xe0
 801053a:	d00c      	beq.n	8010556 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801053c:	4b0f      	ldr	r3, [pc, #60]	; (801057c <udp_input+0x218>)
 801053e:	899b      	ldrh	r3, [r3, #12]
 8010540:	3308      	adds	r3, #8
 8010542:	b29b      	uxth	r3, r3
 8010544:	b21b      	sxth	r3, r3
 8010546:	4619      	mov	r1, r3
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f7fa f916 	bl	800a77a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801054e:	2103      	movs	r1, #3
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f001 f89b 	bl	801168c <icmp_dest_unreach>
      pbuf_free(p);
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f7fa f922 	bl	800a7a0 <pbuf_free>
  return;
 801055c:	e003      	b.n	8010566 <udp_input+0x202>
    pbuf_free(p);
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7fa f91e 	bl	800a7a0 <pbuf_free>
  return;
 8010564:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010566:	372c      	adds	r7, #44	; 0x2c
 8010568:	46bd      	mov	sp, r7
 801056a:	bd90      	pop	{r4, r7, pc}
 801056c:	08016054 	.word	0x08016054
 8010570:	080160f8 	.word	0x080160f8
 8010574:	080160a8 	.word	0x080160a8
 8010578:	08016110 	.word	0x08016110
 801057c:	20009cd4 	.word	0x20009cd4
 8010580:	2000d400 	.word	0x2000d400
 8010584:	0801612c 	.word	0x0801612c
 8010588:	20009ce4 	.word	0x20009ce4

0801058c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801058c:	b480      	push	{r7}
 801058e:	b085      	sub	sp, #20
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d01e      	beq.n	80105da <udp_netif_ip_addr_changed+0x4e>
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d01a      	beq.n	80105da <udp_netif_ip_addr_changed+0x4e>
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d017      	beq.n	80105da <udp_netif_ip_addr_changed+0x4e>
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d013      	beq.n	80105da <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80105b2:	4b0d      	ldr	r3, [pc, #52]	; (80105e8 <udp_netif_ip_addr_changed+0x5c>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	60fb      	str	r3, [r7, #12]
 80105b8:	e00c      	b.n	80105d4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	681a      	ldr	r2, [r3, #0]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d103      	bne.n	80105ce <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	681a      	ldr	r2, [r3, #0]
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	68db      	ldr	r3, [r3, #12]
 80105d2:	60fb      	str	r3, [r7, #12]
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d1ef      	bne.n	80105ba <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80105da:	bf00      	nop
 80105dc:	3714      	adds	r7, #20
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr
 80105e6:	bf00      	nop
 80105e8:	2000d400 	.word	0x2000d400

080105ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80105f4:	4915      	ldr	r1, [pc, #84]	; (801064c <etharp_free_entry+0x60>)
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	4613      	mov	r3, r2
 80105fa:	005b      	lsls	r3, r3, #1
 80105fc:	4413      	add	r3, r2
 80105fe:	00db      	lsls	r3, r3, #3
 8010600:	440b      	add	r3, r1
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d013      	beq.n	8010630 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010608:	4910      	ldr	r1, [pc, #64]	; (801064c <etharp_free_entry+0x60>)
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	4613      	mov	r3, r2
 801060e:	005b      	lsls	r3, r3, #1
 8010610:	4413      	add	r3, r2
 8010612:	00db      	lsls	r3, r3, #3
 8010614:	440b      	add	r3, r1
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4618      	mov	r0, r3
 801061a:	f7fa f8c1 	bl	800a7a0 <pbuf_free>
    arp_table[i].q = NULL;
 801061e:	490b      	ldr	r1, [pc, #44]	; (801064c <etharp_free_entry+0x60>)
 8010620:	687a      	ldr	r2, [r7, #4]
 8010622:	4613      	mov	r3, r2
 8010624:	005b      	lsls	r3, r3, #1
 8010626:	4413      	add	r3, r2
 8010628:	00db      	lsls	r3, r3, #3
 801062a:	440b      	add	r3, r1
 801062c:	2200      	movs	r2, #0
 801062e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010630:	4906      	ldr	r1, [pc, #24]	; (801064c <etharp_free_entry+0x60>)
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	4613      	mov	r3, r2
 8010636:	005b      	lsls	r3, r3, #1
 8010638:	4413      	add	r3, r2
 801063a:	00db      	lsls	r3, r3, #3
 801063c:	440b      	add	r3, r1
 801063e:	3314      	adds	r3, #20
 8010640:	2200      	movs	r2, #0
 8010642:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010644:	bf00      	nop
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}
 801064c:	20006884 	.word	0x20006884

08010650 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010656:	2300      	movs	r3, #0
 8010658:	607b      	str	r3, [r7, #4]
 801065a:	e096      	b.n	801078a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801065c:	494f      	ldr	r1, [pc, #316]	; (801079c <etharp_tmr+0x14c>)
 801065e:	687a      	ldr	r2, [r7, #4]
 8010660:	4613      	mov	r3, r2
 8010662:	005b      	lsls	r3, r3, #1
 8010664:	4413      	add	r3, r2
 8010666:	00db      	lsls	r3, r3, #3
 8010668:	440b      	add	r3, r1
 801066a:	3314      	adds	r3, #20
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010670:	78fb      	ldrb	r3, [r7, #3]
 8010672:	2b00      	cmp	r3, #0
 8010674:	f000 8086 	beq.w	8010784 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010678:	4948      	ldr	r1, [pc, #288]	; (801079c <etharp_tmr+0x14c>)
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	4613      	mov	r3, r2
 801067e:	005b      	lsls	r3, r3, #1
 8010680:	4413      	add	r3, r2
 8010682:	00db      	lsls	r3, r3, #3
 8010684:	440b      	add	r3, r1
 8010686:	3312      	adds	r3, #18
 8010688:	881b      	ldrh	r3, [r3, #0]
 801068a:	3301      	adds	r3, #1
 801068c:	b298      	uxth	r0, r3
 801068e:	4943      	ldr	r1, [pc, #268]	; (801079c <etharp_tmr+0x14c>)
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	4613      	mov	r3, r2
 8010694:	005b      	lsls	r3, r3, #1
 8010696:	4413      	add	r3, r2
 8010698:	00db      	lsls	r3, r3, #3
 801069a:	440b      	add	r3, r1
 801069c:	3312      	adds	r3, #18
 801069e:	4602      	mov	r2, r0
 80106a0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80106a2:	493e      	ldr	r1, [pc, #248]	; (801079c <etharp_tmr+0x14c>)
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	4613      	mov	r3, r2
 80106a8:	005b      	lsls	r3, r3, #1
 80106aa:	4413      	add	r3, r2
 80106ac:	00db      	lsls	r3, r3, #3
 80106ae:	440b      	add	r3, r1
 80106b0:	3312      	adds	r3, #18
 80106b2:	881b      	ldrh	r3, [r3, #0]
 80106b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80106b8:	d215      	bcs.n	80106e6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80106ba:	4938      	ldr	r1, [pc, #224]	; (801079c <etharp_tmr+0x14c>)
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	4613      	mov	r3, r2
 80106c0:	005b      	lsls	r3, r3, #1
 80106c2:	4413      	add	r3, r2
 80106c4:	00db      	lsls	r3, r3, #3
 80106c6:	440b      	add	r3, r1
 80106c8:	3314      	adds	r3, #20
 80106ca:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	d10e      	bne.n	80106ee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80106d0:	4932      	ldr	r1, [pc, #200]	; (801079c <etharp_tmr+0x14c>)
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	4613      	mov	r3, r2
 80106d6:	005b      	lsls	r3, r3, #1
 80106d8:	4413      	add	r3, r2
 80106da:	00db      	lsls	r3, r3, #3
 80106dc:	440b      	add	r3, r1
 80106de:	3312      	adds	r3, #18
 80106e0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80106e2:	2b04      	cmp	r3, #4
 80106e4:	d903      	bls.n	80106ee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f7ff ff80 	bl	80105ec <etharp_free_entry>
 80106ec:	e04a      	b.n	8010784 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80106ee:	492b      	ldr	r1, [pc, #172]	; (801079c <etharp_tmr+0x14c>)
 80106f0:	687a      	ldr	r2, [r7, #4]
 80106f2:	4613      	mov	r3, r2
 80106f4:	005b      	lsls	r3, r3, #1
 80106f6:	4413      	add	r3, r2
 80106f8:	00db      	lsls	r3, r3, #3
 80106fa:	440b      	add	r3, r1
 80106fc:	3314      	adds	r3, #20
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	2b03      	cmp	r3, #3
 8010702:	d10a      	bne.n	801071a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010704:	4925      	ldr	r1, [pc, #148]	; (801079c <etharp_tmr+0x14c>)
 8010706:	687a      	ldr	r2, [r7, #4]
 8010708:	4613      	mov	r3, r2
 801070a:	005b      	lsls	r3, r3, #1
 801070c:	4413      	add	r3, r2
 801070e:	00db      	lsls	r3, r3, #3
 8010710:	440b      	add	r3, r1
 8010712:	3314      	adds	r3, #20
 8010714:	2204      	movs	r2, #4
 8010716:	701a      	strb	r2, [r3, #0]
 8010718:	e034      	b.n	8010784 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801071a:	4920      	ldr	r1, [pc, #128]	; (801079c <etharp_tmr+0x14c>)
 801071c:	687a      	ldr	r2, [r7, #4]
 801071e:	4613      	mov	r3, r2
 8010720:	005b      	lsls	r3, r3, #1
 8010722:	4413      	add	r3, r2
 8010724:	00db      	lsls	r3, r3, #3
 8010726:	440b      	add	r3, r1
 8010728:	3314      	adds	r3, #20
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	2b04      	cmp	r3, #4
 801072e:	d10a      	bne.n	8010746 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010730:	491a      	ldr	r1, [pc, #104]	; (801079c <etharp_tmr+0x14c>)
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	4613      	mov	r3, r2
 8010736:	005b      	lsls	r3, r3, #1
 8010738:	4413      	add	r3, r2
 801073a:	00db      	lsls	r3, r3, #3
 801073c:	440b      	add	r3, r1
 801073e:	3314      	adds	r3, #20
 8010740:	2202      	movs	r2, #2
 8010742:	701a      	strb	r2, [r3, #0]
 8010744:	e01e      	b.n	8010784 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010746:	4915      	ldr	r1, [pc, #84]	; (801079c <etharp_tmr+0x14c>)
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	4613      	mov	r3, r2
 801074c:	005b      	lsls	r3, r3, #1
 801074e:	4413      	add	r3, r2
 8010750:	00db      	lsls	r3, r3, #3
 8010752:	440b      	add	r3, r1
 8010754:	3314      	adds	r3, #20
 8010756:	781b      	ldrb	r3, [r3, #0]
 8010758:	2b01      	cmp	r3, #1
 801075a:	d113      	bne.n	8010784 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801075c:	490f      	ldr	r1, [pc, #60]	; (801079c <etharp_tmr+0x14c>)
 801075e:	687a      	ldr	r2, [r7, #4]
 8010760:	4613      	mov	r3, r2
 8010762:	005b      	lsls	r3, r3, #1
 8010764:	4413      	add	r3, r2
 8010766:	00db      	lsls	r3, r3, #3
 8010768:	440b      	add	r3, r1
 801076a:	3308      	adds	r3, #8
 801076c:	6818      	ldr	r0, [r3, #0]
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	4613      	mov	r3, r2
 8010772:	005b      	lsls	r3, r3, #1
 8010774:	4413      	add	r3, r2
 8010776:	00db      	lsls	r3, r3, #3
 8010778:	4a08      	ldr	r2, [pc, #32]	; (801079c <etharp_tmr+0x14c>)
 801077a:	4413      	add	r3, r2
 801077c:	3304      	adds	r3, #4
 801077e:	4619      	mov	r1, r3
 8010780:	f000 fe6e 	bl	8011460 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	3301      	adds	r3, #1
 8010788:	607b      	str	r3, [r7, #4]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2b09      	cmp	r3, #9
 801078e:	f77f af65 	ble.w	801065c <etharp_tmr+0xc>
      }
    }
  }
}
 8010792:	bf00      	nop
 8010794:	bf00      	nop
 8010796:	3708      	adds	r7, #8
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	20006884 	.word	0x20006884

080107a0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b08a      	sub	sp, #40	; 0x28
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	60f8      	str	r0, [r7, #12]
 80107a8:	460b      	mov	r3, r1
 80107aa:	607a      	str	r2, [r7, #4]
 80107ac:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80107ae:	230a      	movs	r3, #10
 80107b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80107b2:	230a      	movs	r3, #10
 80107b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80107b6:	230a      	movs	r3, #10
 80107b8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80107ba:	2300      	movs	r3, #0
 80107bc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80107be:	230a      	movs	r3, #10
 80107c0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80107c2:	2300      	movs	r3, #0
 80107c4:	83bb      	strh	r3, [r7, #28]
 80107c6:	2300      	movs	r3, #0
 80107c8:	837b      	strh	r3, [r7, #26]
 80107ca:	2300      	movs	r3, #0
 80107cc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80107ce:	2300      	movs	r3, #0
 80107d0:	843b      	strh	r3, [r7, #32]
 80107d2:	e0ae      	b.n	8010932 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80107d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107d8:	49a6      	ldr	r1, [pc, #664]	; (8010a74 <etharp_find_entry+0x2d4>)
 80107da:	4613      	mov	r3, r2
 80107dc:	005b      	lsls	r3, r3, #1
 80107de:	4413      	add	r3, r2
 80107e0:	00db      	lsls	r3, r3, #3
 80107e2:	440b      	add	r3, r1
 80107e4:	3314      	adds	r3, #20
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80107ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80107ee:	2b0a      	cmp	r3, #10
 80107f0:	d105      	bne.n	80107fe <etharp_find_entry+0x5e>
 80107f2:	7dfb      	ldrb	r3, [r7, #23]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d102      	bne.n	80107fe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80107f8:	8c3b      	ldrh	r3, [r7, #32]
 80107fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80107fc:	e095      	b.n	801092a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80107fe:	7dfb      	ldrb	r3, [r7, #23]
 8010800:	2b00      	cmp	r3, #0
 8010802:	f000 8092 	beq.w	801092a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010806:	7dfb      	ldrb	r3, [r7, #23]
 8010808:	2b01      	cmp	r3, #1
 801080a:	d009      	beq.n	8010820 <etharp_find_entry+0x80>
 801080c:	7dfb      	ldrb	r3, [r7, #23]
 801080e:	2b01      	cmp	r3, #1
 8010810:	d806      	bhi.n	8010820 <etharp_find_entry+0x80>
 8010812:	4b99      	ldr	r3, [pc, #612]	; (8010a78 <etharp_find_entry+0x2d8>)
 8010814:	f240 1223 	movw	r2, #291	; 0x123
 8010818:	4998      	ldr	r1, [pc, #608]	; (8010a7c <etharp_find_entry+0x2dc>)
 801081a:	4899      	ldr	r0, [pc, #612]	; (8010a80 <etharp_find_entry+0x2e0>)
 801081c:	f002 fcac 	bl	8013178 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d020      	beq.n	8010868 <etharp_find_entry+0xc8>
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	6819      	ldr	r1, [r3, #0]
 801082a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801082e:	4891      	ldr	r0, [pc, #580]	; (8010a74 <etharp_find_entry+0x2d4>)
 8010830:	4613      	mov	r3, r2
 8010832:	005b      	lsls	r3, r3, #1
 8010834:	4413      	add	r3, r2
 8010836:	00db      	lsls	r3, r3, #3
 8010838:	4403      	add	r3, r0
 801083a:	3304      	adds	r3, #4
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	4299      	cmp	r1, r3
 8010840:	d112      	bne.n	8010868 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d00c      	beq.n	8010862 <etharp_find_entry+0xc2>
 8010848:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801084c:	4989      	ldr	r1, [pc, #548]	; (8010a74 <etharp_find_entry+0x2d4>)
 801084e:	4613      	mov	r3, r2
 8010850:	005b      	lsls	r3, r3, #1
 8010852:	4413      	add	r3, r2
 8010854:	00db      	lsls	r3, r3, #3
 8010856:	440b      	add	r3, r1
 8010858:	3308      	adds	r3, #8
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	429a      	cmp	r2, r3
 8010860:	d102      	bne.n	8010868 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010862:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010866:	e100      	b.n	8010a6a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010868:	7dfb      	ldrb	r3, [r7, #23]
 801086a:	2b01      	cmp	r3, #1
 801086c:	d140      	bne.n	80108f0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801086e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010872:	4980      	ldr	r1, [pc, #512]	; (8010a74 <etharp_find_entry+0x2d4>)
 8010874:	4613      	mov	r3, r2
 8010876:	005b      	lsls	r3, r3, #1
 8010878:	4413      	add	r3, r2
 801087a:	00db      	lsls	r3, r3, #3
 801087c:	440b      	add	r3, r1
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d01a      	beq.n	80108ba <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010884:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010888:	497a      	ldr	r1, [pc, #488]	; (8010a74 <etharp_find_entry+0x2d4>)
 801088a:	4613      	mov	r3, r2
 801088c:	005b      	lsls	r3, r3, #1
 801088e:	4413      	add	r3, r2
 8010890:	00db      	lsls	r3, r3, #3
 8010892:	440b      	add	r3, r1
 8010894:	3312      	adds	r3, #18
 8010896:	881b      	ldrh	r3, [r3, #0]
 8010898:	8bba      	ldrh	r2, [r7, #28]
 801089a:	429a      	cmp	r2, r3
 801089c:	d845      	bhi.n	801092a <etharp_find_entry+0x18a>
            old_queue = i;
 801089e:	8c3b      	ldrh	r3, [r7, #32]
 80108a0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80108a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108a6:	4973      	ldr	r1, [pc, #460]	; (8010a74 <etharp_find_entry+0x2d4>)
 80108a8:	4613      	mov	r3, r2
 80108aa:	005b      	lsls	r3, r3, #1
 80108ac:	4413      	add	r3, r2
 80108ae:	00db      	lsls	r3, r3, #3
 80108b0:	440b      	add	r3, r1
 80108b2:	3312      	adds	r3, #18
 80108b4:	881b      	ldrh	r3, [r3, #0]
 80108b6:	83bb      	strh	r3, [r7, #28]
 80108b8:	e037      	b.n	801092a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80108ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108be:	496d      	ldr	r1, [pc, #436]	; (8010a74 <etharp_find_entry+0x2d4>)
 80108c0:	4613      	mov	r3, r2
 80108c2:	005b      	lsls	r3, r3, #1
 80108c4:	4413      	add	r3, r2
 80108c6:	00db      	lsls	r3, r3, #3
 80108c8:	440b      	add	r3, r1
 80108ca:	3312      	adds	r3, #18
 80108cc:	881b      	ldrh	r3, [r3, #0]
 80108ce:	8b7a      	ldrh	r2, [r7, #26]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d82a      	bhi.n	801092a <etharp_find_entry+0x18a>
            old_pending = i;
 80108d4:	8c3b      	ldrh	r3, [r7, #32]
 80108d6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80108d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108dc:	4965      	ldr	r1, [pc, #404]	; (8010a74 <etharp_find_entry+0x2d4>)
 80108de:	4613      	mov	r3, r2
 80108e0:	005b      	lsls	r3, r3, #1
 80108e2:	4413      	add	r3, r2
 80108e4:	00db      	lsls	r3, r3, #3
 80108e6:	440b      	add	r3, r1
 80108e8:	3312      	adds	r3, #18
 80108ea:	881b      	ldrh	r3, [r3, #0]
 80108ec:	837b      	strh	r3, [r7, #26]
 80108ee:	e01c      	b.n	801092a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80108f0:	7dfb      	ldrb	r3, [r7, #23]
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	d919      	bls.n	801092a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80108f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108fa:	495e      	ldr	r1, [pc, #376]	; (8010a74 <etharp_find_entry+0x2d4>)
 80108fc:	4613      	mov	r3, r2
 80108fe:	005b      	lsls	r3, r3, #1
 8010900:	4413      	add	r3, r2
 8010902:	00db      	lsls	r3, r3, #3
 8010904:	440b      	add	r3, r1
 8010906:	3312      	adds	r3, #18
 8010908:	881b      	ldrh	r3, [r3, #0]
 801090a:	8b3a      	ldrh	r2, [r7, #24]
 801090c:	429a      	cmp	r2, r3
 801090e:	d80c      	bhi.n	801092a <etharp_find_entry+0x18a>
            old_stable = i;
 8010910:	8c3b      	ldrh	r3, [r7, #32]
 8010912:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010914:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010918:	4956      	ldr	r1, [pc, #344]	; (8010a74 <etharp_find_entry+0x2d4>)
 801091a:	4613      	mov	r3, r2
 801091c:	005b      	lsls	r3, r3, #1
 801091e:	4413      	add	r3, r2
 8010920:	00db      	lsls	r3, r3, #3
 8010922:	440b      	add	r3, r1
 8010924:	3312      	adds	r3, #18
 8010926:	881b      	ldrh	r3, [r3, #0]
 8010928:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801092a:	8c3b      	ldrh	r3, [r7, #32]
 801092c:	3301      	adds	r3, #1
 801092e:	b29b      	uxth	r3, r3
 8010930:	843b      	strh	r3, [r7, #32]
 8010932:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010936:	2b09      	cmp	r3, #9
 8010938:	f77f af4c 	ble.w	80107d4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801093c:	7afb      	ldrb	r3, [r7, #11]
 801093e:	f003 0302 	and.w	r3, r3, #2
 8010942:	2b00      	cmp	r3, #0
 8010944:	d108      	bne.n	8010958 <etharp_find_entry+0x1b8>
 8010946:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801094a:	2b0a      	cmp	r3, #10
 801094c:	d107      	bne.n	801095e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801094e:	7afb      	ldrb	r3, [r7, #11]
 8010950:	f003 0301 	and.w	r3, r3, #1
 8010954:	2b00      	cmp	r3, #0
 8010956:	d102      	bne.n	801095e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010958:	f04f 33ff 	mov.w	r3, #4294967295
 801095c:	e085      	b.n	8010a6a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801095e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010962:	2b09      	cmp	r3, #9
 8010964:	dc02      	bgt.n	801096c <etharp_find_entry+0x1cc>
    i = empty;
 8010966:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010968:	843b      	strh	r3, [r7, #32]
 801096a:	e039      	b.n	80109e0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801096c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010970:	2b09      	cmp	r3, #9
 8010972:	dc14      	bgt.n	801099e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010974:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010976:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010978:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801097c:	493d      	ldr	r1, [pc, #244]	; (8010a74 <etharp_find_entry+0x2d4>)
 801097e:	4613      	mov	r3, r2
 8010980:	005b      	lsls	r3, r3, #1
 8010982:	4413      	add	r3, r2
 8010984:	00db      	lsls	r3, r3, #3
 8010986:	440b      	add	r3, r1
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d018      	beq.n	80109c0 <etharp_find_entry+0x220>
 801098e:	4b3a      	ldr	r3, [pc, #232]	; (8010a78 <etharp_find_entry+0x2d8>)
 8010990:	f240 126d 	movw	r2, #365	; 0x16d
 8010994:	493b      	ldr	r1, [pc, #236]	; (8010a84 <etharp_find_entry+0x2e4>)
 8010996:	483a      	ldr	r0, [pc, #232]	; (8010a80 <etharp_find_entry+0x2e0>)
 8010998:	f002 fbee 	bl	8013178 <iprintf>
 801099c:	e010      	b.n	80109c0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801099e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80109a2:	2b09      	cmp	r3, #9
 80109a4:	dc02      	bgt.n	80109ac <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80109a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80109a8:	843b      	strh	r3, [r7, #32]
 80109aa:	e009      	b.n	80109c0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80109ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80109b0:	2b09      	cmp	r3, #9
 80109b2:	dc02      	bgt.n	80109ba <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80109b4:	8bfb      	ldrh	r3, [r7, #30]
 80109b6:	843b      	strh	r3, [r7, #32]
 80109b8:	e002      	b.n	80109c0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80109ba:	f04f 33ff 	mov.w	r3, #4294967295
 80109be:	e054      	b.n	8010a6a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80109c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80109c4:	2b09      	cmp	r3, #9
 80109c6:	dd06      	ble.n	80109d6 <etharp_find_entry+0x236>
 80109c8:	4b2b      	ldr	r3, [pc, #172]	; (8010a78 <etharp_find_entry+0x2d8>)
 80109ca:	f240 127f 	movw	r2, #383	; 0x17f
 80109ce:	492e      	ldr	r1, [pc, #184]	; (8010a88 <etharp_find_entry+0x2e8>)
 80109d0:	482b      	ldr	r0, [pc, #172]	; (8010a80 <etharp_find_entry+0x2e0>)
 80109d2:	f002 fbd1 	bl	8013178 <iprintf>
    etharp_free_entry(i);
 80109d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80109da:	4618      	mov	r0, r3
 80109dc:	f7ff fe06 	bl	80105ec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80109e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80109e4:	2b09      	cmp	r3, #9
 80109e6:	dd06      	ble.n	80109f6 <etharp_find_entry+0x256>
 80109e8:	4b23      	ldr	r3, [pc, #140]	; (8010a78 <etharp_find_entry+0x2d8>)
 80109ea:	f240 1283 	movw	r2, #387	; 0x183
 80109ee:	4926      	ldr	r1, [pc, #152]	; (8010a88 <etharp_find_entry+0x2e8>)
 80109f0:	4823      	ldr	r0, [pc, #140]	; (8010a80 <etharp_find_entry+0x2e0>)
 80109f2:	f002 fbc1 	bl	8013178 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80109f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109fa:	491e      	ldr	r1, [pc, #120]	; (8010a74 <etharp_find_entry+0x2d4>)
 80109fc:	4613      	mov	r3, r2
 80109fe:	005b      	lsls	r3, r3, #1
 8010a00:	4413      	add	r3, r2
 8010a02:	00db      	lsls	r3, r3, #3
 8010a04:	440b      	add	r3, r1
 8010a06:	3314      	adds	r3, #20
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d006      	beq.n	8010a1c <etharp_find_entry+0x27c>
 8010a0e:	4b1a      	ldr	r3, [pc, #104]	; (8010a78 <etharp_find_entry+0x2d8>)
 8010a10:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010a14:	491d      	ldr	r1, [pc, #116]	; (8010a8c <etharp_find_entry+0x2ec>)
 8010a16:	481a      	ldr	r0, [pc, #104]	; (8010a80 <etharp_find_entry+0x2e0>)
 8010a18:	f002 fbae 	bl	8013178 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d00b      	beq.n	8010a3a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010a22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	6819      	ldr	r1, [r3, #0]
 8010a2a:	4812      	ldr	r0, [pc, #72]	; (8010a74 <etharp_find_entry+0x2d4>)
 8010a2c:	4613      	mov	r3, r2
 8010a2e:	005b      	lsls	r3, r3, #1
 8010a30:	4413      	add	r3, r2
 8010a32:	00db      	lsls	r3, r3, #3
 8010a34:	4403      	add	r3, r0
 8010a36:	3304      	adds	r3, #4
 8010a38:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010a3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a3e:	490d      	ldr	r1, [pc, #52]	; (8010a74 <etharp_find_entry+0x2d4>)
 8010a40:	4613      	mov	r3, r2
 8010a42:	005b      	lsls	r3, r3, #1
 8010a44:	4413      	add	r3, r2
 8010a46:	00db      	lsls	r3, r3, #3
 8010a48:	440b      	add	r3, r1
 8010a4a:	3312      	adds	r3, #18
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010a50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a54:	4907      	ldr	r1, [pc, #28]	; (8010a74 <etharp_find_entry+0x2d4>)
 8010a56:	4613      	mov	r3, r2
 8010a58:	005b      	lsls	r3, r3, #1
 8010a5a:	4413      	add	r3, r2
 8010a5c:	00db      	lsls	r3, r3, #3
 8010a5e:	440b      	add	r3, r1
 8010a60:	3308      	adds	r3, #8
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010a66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3728      	adds	r7, #40	; 0x28
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop
 8010a74:	20006884 	.word	0x20006884
 8010a78:	080163b8 	.word	0x080163b8
 8010a7c:	080163f0 	.word	0x080163f0
 8010a80:	08016430 	.word	0x08016430
 8010a84:	08016458 	.word	0x08016458
 8010a88:	08016470 	.word	0x08016470
 8010a8c:	08016484 	.word	0x08016484

08010a90 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b088      	sub	sp, #32
 8010a94:	af02      	add	r7, sp, #8
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	607a      	str	r2, [r7, #4]
 8010a9c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010aa4:	2b06      	cmp	r3, #6
 8010aa6:	d006      	beq.n	8010ab6 <etharp_update_arp_entry+0x26>
 8010aa8:	4b48      	ldr	r3, [pc, #288]	; (8010bcc <etharp_update_arp_entry+0x13c>)
 8010aaa:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010aae:	4948      	ldr	r1, [pc, #288]	; (8010bd0 <etharp_update_arp_entry+0x140>)
 8010ab0:	4848      	ldr	r0, [pc, #288]	; (8010bd4 <etharp_update_arp_entry+0x144>)
 8010ab2:	f002 fb61 	bl	8013178 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d012      	beq.n	8010ae2 <etharp_update_arp_entry+0x52>
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d00e      	beq.n	8010ae2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	68f9      	ldr	r1, [r7, #12]
 8010aca:	4618      	mov	r0, r3
 8010acc:	f001 f8fe 	bl	8011ccc <ip4_addr_isbroadcast_u32>
 8010ad0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d105      	bne.n	8010ae2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010ade:	2be0      	cmp	r3, #224	; 0xe0
 8010ae0:	d102      	bne.n	8010ae8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010ae2:	f06f 030f 	mvn.w	r3, #15
 8010ae6:	e06c      	b.n	8010bc2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010ae8:	78fb      	ldrb	r3, [r7, #3]
 8010aea:	68fa      	ldr	r2, [r7, #12]
 8010aec:	4619      	mov	r1, r3
 8010aee:	68b8      	ldr	r0, [r7, #8]
 8010af0:	f7ff fe56 	bl	80107a0 <etharp_find_entry>
 8010af4:	4603      	mov	r3, r0
 8010af6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010af8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	da02      	bge.n	8010b06 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010b00:	8afb      	ldrh	r3, [r7, #22]
 8010b02:	b25b      	sxtb	r3, r3
 8010b04:	e05d      	b.n	8010bc2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010b06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b0a:	4933      	ldr	r1, [pc, #204]	; (8010bd8 <etharp_update_arp_entry+0x148>)
 8010b0c:	4613      	mov	r3, r2
 8010b0e:	005b      	lsls	r3, r3, #1
 8010b10:	4413      	add	r3, r2
 8010b12:	00db      	lsls	r3, r3, #3
 8010b14:	440b      	add	r3, r1
 8010b16:	3314      	adds	r3, #20
 8010b18:	2202      	movs	r2, #2
 8010b1a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010b1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b20:	492d      	ldr	r1, [pc, #180]	; (8010bd8 <etharp_update_arp_entry+0x148>)
 8010b22:	4613      	mov	r3, r2
 8010b24:	005b      	lsls	r3, r3, #1
 8010b26:	4413      	add	r3, r2
 8010b28:	00db      	lsls	r3, r3, #3
 8010b2a:	440b      	add	r3, r1
 8010b2c:	3308      	adds	r3, #8
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010b32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b36:	4613      	mov	r3, r2
 8010b38:	005b      	lsls	r3, r3, #1
 8010b3a:	4413      	add	r3, r2
 8010b3c:	00db      	lsls	r3, r3, #3
 8010b3e:	3308      	adds	r3, #8
 8010b40:	4a25      	ldr	r2, [pc, #148]	; (8010bd8 <etharp_update_arp_entry+0x148>)
 8010b42:	4413      	add	r3, r2
 8010b44:	3304      	adds	r3, #4
 8010b46:	2206      	movs	r2, #6
 8010b48:	6879      	ldr	r1, [r7, #4]
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f002 fa54 	bl	8012ff8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010b50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b54:	4920      	ldr	r1, [pc, #128]	; (8010bd8 <etharp_update_arp_entry+0x148>)
 8010b56:	4613      	mov	r3, r2
 8010b58:	005b      	lsls	r3, r3, #1
 8010b5a:	4413      	add	r3, r2
 8010b5c:	00db      	lsls	r3, r3, #3
 8010b5e:	440b      	add	r3, r1
 8010b60:	3312      	adds	r3, #18
 8010b62:	2200      	movs	r2, #0
 8010b64:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010b66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b6a:	491b      	ldr	r1, [pc, #108]	; (8010bd8 <etharp_update_arp_entry+0x148>)
 8010b6c:	4613      	mov	r3, r2
 8010b6e:	005b      	lsls	r3, r3, #1
 8010b70:	4413      	add	r3, r2
 8010b72:	00db      	lsls	r3, r3, #3
 8010b74:	440b      	add	r3, r1
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d021      	beq.n	8010bc0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010b7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b80:	4915      	ldr	r1, [pc, #84]	; (8010bd8 <etharp_update_arp_entry+0x148>)
 8010b82:	4613      	mov	r3, r2
 8010b84:	005b      	lsls	r3, r3, #1
 8010b86:	4413      	add	r3, r2
 8010b88:	00db      	lsls	r3, r3, #3
 8010b8a:	440b      	add	r3, r1
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010b90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b94:	4910      	ldr	r1, [pc, #64]	; (8010bd8 <etharp_update_arp_entry+0x148>)
 8010b96:	4613      	mov	r3, r2
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	4413      	add	r3, r2
 8010b9c:	00db      	lsls	r3, r3, #3
 8010b9e:	440b      	add	r3, r1
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010baa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010bae:	9300      	str	r3, [sp, #0]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6939      	ldr	r1, [r7, #16]
 8010bb4:	68f8      	ldr	r0, [r7, #12]
 8010bb6:	f001 ff91 	bl	8012adc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010bba:	6938      	ldr	r0, [r7, #16]
 8010bbc:	f7f9 fdf0 	bl	800a7a0 <pbuf_free>
  }
  return ERR_OK;
 8010bc0:	2300      	movs	r3, #0
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3718      	adds	r7, #24
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	080163b8 	.word	0x080163b8
 8010bd0:	080164b0 	.word	0x080164b0
 8010bd4:	08016430 	.word	0x08016430
 8010bd8:	20006884 	.word	0x20006884

08010bdc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b084      	sub	sp, #16
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010be4:	2300      	movs	r3, #0
 8010be6:	60fb      	str	r3, [r7, #12]
 8010be8:	e01e      	b.n	8010c28 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010bea:	4913      	ldr	r1, [pc, #76]	; (8010c38 <etharp_cleanup_netif+0x5c>)
 8010bec:	68fa      	ldr	r2, [r7, #12]
 8010bee:	4613      	mov	r3, r2
 8010bf0:	005b      	lsls	r3, r3, #1
 8010bf2:	4413      	add	r3, r2
 8010bf4:	00db      	lsls	r3, r3, #3
 8010bf6:	440b      	add	r3, r1
 8010bf8:	3314      	adds	r3, #20
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010bfe:	7afb      	ldrb	r3, [r7, #11]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d00e      	beq.n	8010c22 <etharp_cleanup_netif+0x46>
 8010c04:	490c      	ldr	r1, [pc, #48]	; (8010c38 <etharp_cleanup_netif+0x5c>)
 8010c06:	68fa      	ldr	r2, [r7, #12]
 8010c08:	4613      	mov	r3, r2
 8010c0a:	005b      	lsls	r3, r3, #1
 8010c0c:	4413      	add	r3, r2
 8010c0e:	00db      	lsls	r3, r3, #3
 8010c10:	440b      	add	r3, r1
 8010c12:	3308      	adds	r3, #8
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d102      	bne.n	8010c22 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010c1c:	68f8      	ldr	r0, [r7, #12]
 8010c1e:	f7ff fce5 	bl	80105ec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	3301      	adds	r3, #1
 8010c26:	60fb      	str	r3, [r7, #12]
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2b09      	cmp	r3, #9
 8010c2c:	dddd      	ble.n	8010bea <etharp_cleanup_netif+0xe>
    }
  }
}
 8010c2e:	bf00      	nop
 8010c30:	bf00      	nop
 8010c32:	3710      	adds	r7, #16
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	20006884 	.word	0x20006884

08010c3c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010c3c:	b5b0      	push	{r4, r5, r7, lr}
 8010c3e:	b08a      	sub	sp, #40	; 0x28
 8010c40:	af04      	add	r7, sp, #16
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d107      	bne.n	8010c5c <etharp_input+0x20>
 8010c4c:	4b3d      	ldr	r3, [pc, #244]	; (8010d44 <etharp_input+0x108>)
 8010c4e:	f240 228a 	movw	r2, #650	; 0x28a
 8010c52:	493d      	ldr	r1, [pc, #244]	; (8010d48 <etharp_input+0x10c>)
 8010c54:	483d      	ldr	r0, [pc, #244]	; (8010d4c <etharp_input+0x110>)
 8010c56:	f002 fa8f 	bl	8013178 <iprintf>
 8010c5a:	e06f      	b.n	8010d3c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	881b      	ldrh	r3, [r3, #0]
 8010c66:	b29b      	uxth	r3, r3
 8010c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c6c:	d10c      	bne.n	8010c88 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010c72:	2b06      	cmp	r3, #6
 8010c74:	d108      	bne.n	8010c88 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010c7a:	2b04      	cmp	r3, #4
 8010c7c:	d104      	bne.n	8010c88 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	885b      	ldrh	r3, [r3, #2]
 8010c82:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010c84:	2b08      	cmp	r3, #8
 8010c86:	d003      	beq.n	8010c90 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f7f9 fd89 	bl	800a7a0 <pbuf_free>
    return;
 8010c8e:	e055      	b.n	8010d3c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	330e      	adds	r3, #14
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	3318      	adds	r3, #24
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	3304      	adds	r3, #4
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d102      	bne.n	8010cb0 <etharp_input+0x74>
    for_us = 0;
 8010caa:	2300      	movs	r3, #0
 8010cac:	75fb      	strb	r3, [r7, #23]
 8010cae:	e009      	b.n	8010cc4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010cb0:	68ba      	ldr	r2, [r7, #8]
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	3304      	adds	r3, #4
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	bf0c      	ite	eq
 8010cbc:	2301      	moveq	r3, #1
 8010cbe:	2300      	movne	r3, #0
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	f103 0208 	add.w	r2, r3, #8
 8010cca:	7dfb      	ldrb	r3, [r7, #23]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d001      	beq.n	8010cd4 <etharp_input+0x98>
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	e000      	b.n	8010cd6 <etharp_input+0x9a>
 8010cd4:	2302      	movs	r3, #2
 8010cd6:	f107 010c 	add.w	r1, r7, #12
 8010cda:	6838      	ldr	r0, [r7, #0]
 8010cdc:	f7ff fed8 	bl	8010a90 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	88db      	ldrh	r3, [r3, #6]
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cea:	d003      	beq.n	8010cf4 <etharp_input+0xb8>
 8010cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010cf0:	d01e      	beq.n	8010d30 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010cf2:	e020      	b.n	8010d36 <etharp_input+0xfa>
      if (for_us) {
 8010cf4:	7dfb      	ldrb	r3, [r7, #23]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d01c      	beq.n	8010d34 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010d10:	693a      	ldr	r2, [r7, #16]
 8010d12:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010d14:	2102      	movs	r1, #2
 8010d16:	9103      	str	r1, [sp, #12]
 8010d18:	f107 010c 	add.w	r1, r7, #12
 8010d1c:	9102      	str	r1, [sp, #8]
 8010d1e:	9201      	str	r2, [sp, #4]
 8010d20:	9300      	str	r3, [sp, #0]
 8010d22:	462b      	mov	r3, r5
 8010d24:	4622      	mov	r2, r4
 8010d26:	4601      	mov	r1, r0
 8010d28:	6838      	ldr	r0, [r7, #0]
 8010d2a:	f000 faeb 	bl	8011304 <etharp_raw>
      break;
 8010d2e:	e001      	b.n	8010d34 <etharp_input+0xf8>
      break;
 8010d30:	bf00      	nop
 8010d32:	e000      	b.n	8010d36 <etharp_input+0xfa>
      break;
 8010d34:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f7f9 fd32 	bl	800a7a0 <pbuf_free>
}
 8010d3c:	3718      	adds	r7, #24
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bdb0      	pop	{r4, r5, r7, pc}
 8010d42:	bf00      	nop
 8010d44:	080163b8 	.word	0x080163b8
 8010d48:	08016508 	.word	0x08016508
 8010d4c:	08016430 	.word	0x08016430

08010d50 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b086      	sub	sp, #24
 8010d54:	af02      	add	r7, sp, #8
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	60b9      	str	r1, [r7, #8]
 8010d5a:	4613      	mov	r3, r2
 8010d5c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010d5e:	79fa      	ldrb	r2, [r7, #7]
 8010d60:	4944      	ldr	r1, [pc, #272]	; (8010e74 <etharp_output_to_arp_index+0x124>)
 8010d62:	4613      	mov	r3, r2
 8010d64:	005b      	lsls	r3, r3, #1
 8010d66:	4413      	add	r3, r2
 8010d68:	00db      	lsls	r3, r3, #3
 8010d6a:	440b      	add	r3, r1
 8010d6c:	3314      	adds	r3, #20
 8010d6e:	781b      	ldrb	r3, [r3, #0]
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	d806      	bhi.n	8010d82 <etharp_output_to_arp_index+0x32>
 8010d74:	4b40      	ldr	r3, [pc, #256]	; (8010e78 <etharp_output_to_arp_index+0x128>)
 8010d76:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010d7a:	4940      	ldr	r1, [pc, #256]	; (8010e7c <etharp_output_to_arp_index+0x12c>)
 8010d7c:	4840      	ldr	r0, [pc, #256]	; (8010e80 <etharp_output_to_arp_index+0x130>)
 8010d7e:	f002 f9fb 	bl	8013178 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010d82:	79fa      	ldrb	r2, [r7, #7]
 8010d84:	493b      	ldr	r1, [pc, #236]	; (8010e74 <etharp_output_to_arp_index+0x124>)
 8010d86:	4613      	mov	r3, r2
 8010d88:	005b      	lsls	r3, r3, #1
 8010d8a:	4413      	add	r3, r2
 8010d8c:	00db      	lsls	r3, r3, #3
 8010d8e:	440b      	add	r3, r1
 8010d90:	3314      	adds	r3, #20
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	2b02      	cmp	r3, #2
 8010d96:	d153      	bne.n	8010e40 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010d98:	79fa      	ldrb	r2, [r7, #7]
 8010d9a:	4936      	ldr	r1, [pc, #216]	; (8010e74 <etharp_output_to_arp_index+0x124>)
 8010d9c:	4613      	mov	r3, r2
 8010d9e:	005b      	lsls	r3, r3, #1
 8010da0:	4413      	add	r3, r2
 8010da2:	00db      	lsls	r3, r3, #3
 8010da4:	440b      	add	r3, r1
 8010da6:	3312      	adds	r3, #18
 8010da8:	881b      	ldrh	r3, [r3, #0]
 8010daa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010dae:	d919      	bls.n	8010de4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010db0:	79fa      	ldrb	r2, [r7, #7]
 8010db2:	4613      	mov	r3, r2
 8010db4:	005b      	lsls	r3, r3, #1
 8010db6:	4413      	add	r3, r2
 8010db8:	00db      	lsls	r3, r3, #3
 8010dba:	4a2e      	ldr	r2, [pc, #184]	; (8010e74 <etharp_output_to_arp_index+0x124>)
 8010dbc:	4413      	add	r3, r2
 8010dbe:	3304      	adds	r3, #4
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	68f8      	ldr	r0, [r7, #12]
 8010dc4:	f000 fb4c 	bl	8011460 <etharp_request>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d138      	bne.n	8010e40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010dce:	79fa      	ldrb	r2, [r7, #7]
 8010dd0:	4928      	ldr	r1, [pc, #160]	; (8010e74 <etharp_output_to_arp_index+0x124>)
 8010dd2:	4613      	mov	r3, r2
 8010dd4:	005b      	lsls	r3, r3, #1
 8010dd6:	4413      	add	r3, r2
 8010dd8:	00db      	lsls	r3, r3, #3
 8010dda:	440b      	add	r3, r1
 8010ddc:	3314      	adds	r3, #20
 8010dde:	2203      	movs	r2, #3
 8010de0:	701a      	strb	r2, [r3, #0]
 8010de2:	e02d      	b.n	8010e40 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010de4:	79fa      	ldrb	r2, [r7, #7]
 8010de6:	4923      	ldr	r1, [pc, #140]	; (8010e74 <etharp_output_to_arp_index+0x124>)
 8010de8:	4613      	mov	r3, r2
 8010dea:	005b      	lsls	r3, r3, #1
 8010dec:	4413      	add	r3, r2
 8010dee:	00db      	lsls	r3, r3, #3
 8010df0:	440b      	add	r3, r1
 8010df2:	3312      	adds	r3, #18
 8010df4:	881b      	ldrh	r3, [r3, #0]
 8010df6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010dfa:	d321      	bcc.n	8010e40 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010dfc:	79fa      	ldrb	r2, [r7, #7]
 8010dfe:	4613      	mov	r3, r2
 8010e00:	005b      	lsls	r3, r3, #1
 8010e02:	4413      	add	r3, r2
 8010e04:	00db      	lsls	r3, r3, #3
 8010e06:	4a1b      	ldr	r2, [pc, #108]	; (8010e74 <etharp_output_to_arp_index+0x124>)
 8010e08:	4413      	add	r3, r2
 8010e0a:	1d19      	adds	r1, r3, #4
 8010e0c:	79fa      	ldrb	r2, [r7, #7]
 8010e0e:	4613      	mov	r3, r2
 8010e10:	005b      	lsls	r3, r3, #1
 8010e12:	4413      	add	r3, r2
 8010e14:	00db      	lsls	r3, r3, #3
 8010e16:	3308      	adds	r3, #8
 8010e18:	4a16      	ldr	r2, [pc, #88]	; (8010e74 <etharp_output_to_arp_index+0x124>)
 8010e1a:	4413      	add	r3, r2
 8010e1c:	3304      	adds	r3, #4
 8010e1e:	461a      	mov	r2, r3
 8010e20:	68f8      	ldr	r0, [r7, #12]
 8010e22:	f000 fafb 	bl	801141c <etharp_request_dst>
 8010e26:	4603      	mov	r3, r0
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d109      	bne.n	8010e40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010e2c:	79fa      	ldrb	r2, [r7, #7]
 8010e2e:	4911      	ldr	r1, [pc, #68]	; (8010e74 <etharp_output_to_arp_index+0x124>)
 8010e30:	4613      	mov	r3, r2
 8010e32:	005b      	lsls	r3, r3, #1
 8010e34:	4413      	add	r3, r2
 8010e36:	00db      	lsls	r3, r3, #3
 8010e38:	440b      	add	r3, r1
 8010e3a:	3314      	adds	r3, #20
 8010e3c:	2203      	movs	r2, #3
 8010e3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010e46:	79fa      	ldrb	r2, [r7, #7]
 8010e48:	4613      	mov	r3, r2
 8010e4a:	005b      	lsls	r3, r3, #1
 8010e4c:	4413      	add	r3, r2
 8010e4e:	00db      	lsls	r3, r3, #3
 8010e50:	3308      	adds	r3, #8
 8010e52:	4a08      	ldr	r2, [pc, #32]	; (8010e74 <etharp_output_to_arp_index+0x124>)
 8010e54:	4413      	add	r3, r2
 8010e56:	3304      	adds	r3, #4
 8010e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e5c:	9200      	str	r2, [sp, #0]
 8010e5e:	460a      	mov	r2, r1
 8010e60:	68b9      	ldr	r1, [r7, #8]
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	f001 fe3a 	bl	8012adc <ethernet_output>
 8010e68:	4603      	mov	r3, r0
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3710      	adds	r7, #16
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	20006884 	.word	0x20006884
 8010e78:	080163b8 	.word	0x080163b8
 8010e7c:	08016528 	.word	0x08016528
 8010e80:	08016430 	.word	0x08016430

08010e84 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b08a      	sub	sp, #40	; 0x28
 8010e88:	af02      	add	r7, sp, #8
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d106      	bne.n	8010ea8 <etharp_output+0x24>
 8010e9a:	4b73      	ldr	r3, [pc, #460]	; (8011068 <etharp_output+0x1e4>)
 8010e9c:	f240 321e 	movw	r2, #798	; 0x31e
 8010ea0:	4972      	ldr	r1, [pc, #456]	; (801106c <etharp_output+0x1e8>)
 8010ea2:	4873      	ldr	r0, [pc, #460]	; (8011070 <etharp_output+0x1ec>)
 8010ea4:	f002 f968 	bl	8013178 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d106      	bne.n	8010ebc <etharp_output+0x38>
 8010eae:	4b6e      	ldr	r3, [pc, #440]	; (8011068 <etharp_output+0x1e4>)
 8010eb0:	f240 321f 	movw	r2, #799	; 0x31f
 8010eb4:	496f      	ldr	r1, [pc, #444]	; (8011074 <etharp_output+0x1f0>)
 8010eb6:	486e      	ldr	r0, [pc, #440]	; (8011070 <etharp_output+0x1ec>)
 8010eb8:	f002 f95e 	bl	8013178 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d106      	bne.n	8010ed0 <etharp_output+0x4c>
 8010ec2:	4b69      	ldr	r3, [pc, #420]	; (8011068 <etharp_output+0x1e4>)
 8010ec4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010ec8:	496b      	ldr	r1, [pc, #428]	; (8011078 <etharp_output+0x1f4>)
 8010eca:	4869      	ldr	r0, [pc, #420]	; (8011070 <etharp_output+0x1ec>)
 8010ecc:	f002 f954 	bl	8013178 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	68f9      	ldr	r1, [r7, #12]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f000 fef8 	bl	8011ccc <ip4_addr_isbroadcast_u32>
 8010edc:	4603      	mov	r3, r0
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d002      	beq.n	8010ee8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010ee2:	4b66      	ldr	r3, [pc, #408]	; (801107c <etharp_output+0x1f8>)
 8010ee4:	61fb      	str	r3, [r7, #28]
 8010ee6:	e0af      	b.n	8011048 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ef0:	2be0      	cmp	r3, #224	; 0xe0
 8010ef2:	d118      	bne.n	8010f26 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010efc:	235e      	movs	r3, #94	; 0x5e
 8010efe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	3301      	adds	r3, #1
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	3302      	adds	r3, #2
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	3303      	adds	r3, #3
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010f1e:	f107 0310 	add.w	r3, r7, #16
 8010f22:	61fb      	str	r3, [r7, #28]
 8010f24:	e090      	b.n	8011048 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	3304      	adds	r3, #4
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	405a      	eors	r2, r3
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	3308      	adds	r3, #8
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	4013      	ands	r3, r2
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d012      	beq.n	8010f64 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010f44:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010f48:	4293      	cmp	r3, r2
 8010f4a:	d00b      	beq.n	8010f64 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	330c      	adds	r3, #12
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d003      	beq.n	8010f5e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	330c      	adds	r3, #12
 8010f5a:	61bb      	str	r3, [r7, #24]
 8010f5c:	e002      	b.n	8010f64 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010f5e:	f06f 0303 	mvn.w	r3, #3
 8010f62:	e07d      	b.n	8011060 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010f64:	4b46      	ldr	r3, [pc, #280]	; (8011080 <etharp_output+0x1fc>)
 8010f66:	781b      	ldrb	r3, [r3, #0]
 8010f68:	4619      	mov	r1, r3
 8010f6a:	4a46      	ldr	r2, [pc, #280]	; (8011084 <etharp_output+0x200>)
 8010f6c:	460b      	mov	r3, r1
 8010f6e:	005b      	lsls	r3, r3, #1
 8010f70:	440b      	add	r3, r1
 8010f72:	00db      	lsls	r3, r3, #3
 8010f74:	4413      	add	r3, r2
 8010f76:	3314      	adds	r3, #20
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	2b01      	cmp	r3, #1
 8010f7c:	d925      	bls.n	8010fca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010f7e:	4b40      	ldr	r3, [pc, #256]	; (8011080 <etharp_output+0x1fc>)
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	4619      	mov	r1, r3
 8010f84:	4a3f      	ldr	r2, [pc, #252]	; (8011084 <etharp_output+0x200>)
 8010f86:	460b      	mov	r3, r1
 8010f88:	005b      	lsls	r3, r3, #1
 8010f8a:	440b      	add	r3, r1
 8010f8c:	00db      	lsls	r3, r3, #3
 8010f8e:	4413      	add	r3, r2
 8010f90:	3308      	adds	r3, #8
 8010f92:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010f94:	68fa      	ldr	r2, [r7, #12]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d117      	bne.n	8010fca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010f9a:	69bb      	ldr	r3, [r7, #24]
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	4b38      	ldr	r3, [pc, #224]	; (8011080 <etharp_output+0x1fc>)
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	4937      	ldr	r1, [pc, #220]	; (8011084 <etharp_output+0x200>)
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	005b      	lsls	r3, r3, #1
 8010faa:	4403      	add	r3, r0
 8010fac:	00db      	lsls	r3, r3, #3
 8010fae:	440b      	add	r3, r1
 8010fb0:	3304      	adds	r3, #4
 8010fb2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d108      	bne.n	8010fca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010fb8:	4b31      	ldr	r3, [pc, #196]	; (8011080 <etharp_output+0x1fc>)
 8010fba:	781b      	ldrb	r3, [r3, #0]
 8010fbc:	461a      	mov	r2, r3
 8010fbe:	68b9      	ldr	r1, [r7, #8]
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	f7ff fec5 	bl	8010d50 <etharp_output_to_arp_index>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	e04a      	b.n	8011060 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010fca:	2300      	movs	r3, #0
 8010fcc:	75fb      	strb	r3, [r7, #23]
 8010fce:	e031      	b.n	8011034 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010fd0:	7dfa      	ldrb	r2, [r7, #23]
 8010fd2:	492c      	ldr	r1, [pc, #176]	; (8011084 <etharp_output+0x200>)
 8010fd4:	4613      	mov	r3, r2
 8010fd6:	005b      	lsls	r3, r3, #1
 8010fd8:	4413      	add	r3, r2
 8010fda:	00db      	lsls	r3, r3, #3
 8010fdc:	440b      	add	r3, r1
 8010fde:	3314      	adds	r3, #20
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d923      	bls.n	801102e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010fe6:	7dfa      	ldrb	r2, [r7, #23]
 8010fe8:	4926      	ldr	r1, [pc, #152]	; (8011084 <etharp_output+0x200>)
 8010fea:	4613      	mov	r3, r2
 8010fec:	005b      	lsls	r3, r3, #1
 8010fee:	4413      	add	r3, r2
 8010ff0:	00db      	lsls	r3, r3, #3
 8010ff2:	440b      	add	r3, r1
 8010ff4:	3308      	adds	r3, #8
 8010ff6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010ff8:	68fa      	ldr	r2, [r7, #12]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d117      	bne.n	801102e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	6819      	ldr	r1, [r3, #0]
 8011002:	7dfa      	ldrb	r2, [r7, #23]
 8011004:	481f      	ldr	r0, [pc, #124]	; (8011084 <etharp_output+0x200>)
 8011006:	4613      	mov	r3, r2
 8011008:	005b      	lsls	r3, r3, #1
 801100a:	4413      	add	r3, r2
 801100c:	00db      	lsls	r3, r3, #3
 801100e:	4403      	add	r3, r0
 8011010:	3304      	adds	r3, #4
 8011012:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011014:	4299      	cmp	r1, r3
 8011016:	d10a      	bne.n	801102e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011018:	4a19      	ldr	r2, [pc, #100]	; (8011080 <etharp_output+0x1fc>)
 801101a:	7dfb      	ldrb	r3, [r7, #23]
 801101c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801101e:	7dfb      	ldrb	r3, [r7, #23]
 8011020:	461a      	mov	r2, r3
 8011022:	68b9      	ldr	r1, [r7, #8]
 8011024:	68f8      	ldr	r0, [r7, #12]
 8011026:	f7ff fe93 	bl	8010d50 <etharp_output_to_arp_index>
 801102a:	4603      	mov	r3, r0
 801102c:	e018      	b.n	8011060 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801102e:	7dfb      	ldrb	r3, [r7, #23]
 8011030:	3301      	adds	r3, #1
 8011032:	75fb      	strb	r3, [r7, #23]
 8011034:	7dfb      	ldrb	r3, [r7, #23]
 8011036:	2b09      	cmp	r3, #9
 8011038:	d9ca      	bls.n	8010fd0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801103a:	68ba      	ldr	r2, [r7, #8]
 801103c:	69b9      	ldr	r1, [r7, #24]
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	f000 f822 	bl	8011088 <etharp_query>
 8011044:	4603      	mov	r3, r0
 8011046:	e00b      	b.n	8011060 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801104e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011052:	9300      	str	r3, [sp, #0]
 8011054:	69fb      	ldr	r3, [r7, #28]
 8011056:	68b9      	ldr	r1, [r7, #8]
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	f001 fd3f 	bl	8012adc <ethernet_output>
 801105e:	4603      	mov	r3, r0
}
 8011060:	4618      	mov	r0, r3
 8011062:	3720      	adds	r7, #32
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}
 8011068:	080163b8 	.word	0x080163b8
 801106c:	08016508 	.word	0x08016508
 8011070:	08016430 	.word	0x08016430
 8011074:	08016558 	.word	0x08016558
 8011078:	080164f8 	.word	0x080164f8
 801107c:	08016bb0 	.word	0x08016bb0
 8011080:	20006974 	.word	0x20006974
 8011084:	20006884 	.word	0x20006884

08011088 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b08c      	sub	sp, #48	; 0x30
 801108c:	af02      	add	r7, sp, #8
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	3326      	adds	r3, #38	; 0x26
 8011098:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801109a:	23ff      	movs	r3, #255	; 0xff
 801109c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80110a0:	2300      	movs	r3, #0
 80110a2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	68f9      	ldr	r1, [r7, #12]
 80110aa:	4618      	mov	r0, r3
 80110ac:	f000 fe0e 	bl	8011ccc <ip4_addr_isbroadcast_u32>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d10c      	bne.n	80110d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80110be:	2be0      	cmp	r3, #224	; 0xe0
 80110c0:	d006      	beq.n	80110d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d003      	beq.n	80110d0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d102      	bne.n	80110d6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80110d0:	f06f 030f 	mvn.w	r3, #15
 80110d4:	e101      	b.n	80112da <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80110d6:	68fa      	ldr	r2, [r7, #12]
 80110d8:	2101      	movs	r1, #1
 80110da:	68b8      	ldr	r0, [r7, #8]
 80110dc:	f7ff fb60 	bl	80107a0 <etharp_find_entry>
 80110e0:	4603      	mov	r3, r0
 80110e2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80110e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	da02      	bge.n	80110f2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80110ec:	8a7b      	ldrh	r3, [r7, #18]
 80110ee:	b25b      	sxtb	r3, r3
 80110f0:	e0f3      	b.n	80112da <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80110f2:	8a7b      	ldrh	r3, [r7, #18]
 80110f4:	2b7e      	cmp	r3, #126	; 0x7e
 80110f6:	d906      	bls.n	8011106 <etharp_query+0x7e>
 80110f8:	4b7a      	ldr	r3, [pc, #488]	; (80112e4 <etharp_query+0x25c>)
 80110fa:	f240 32c1 	movw	r2, #961	; 0x3c1
 80110fe:	497a      	ldr	r1, [pc, #488]	; (80112e8 <etharp_query+0x260>)
 8011100:	487a      	ldr	r0, [pc, #488]	; (80112ec <etharp_query+0x264>)
 8011102:	f002 f839 	bl	8013178 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011106:	8a7b      	ldrh	r3, [r7, #18]
 8011108:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801110a:	7c7a      	ldrb	r2, [r7, #17]
 801110c:	4978      	ldr	r1, [pc, #480]	; (80112f0 <etharp_query+0x268>)
 801110e:	4613      	mov	r3, r2
 8011110:	005b      	lsls	r3, r3, #1
 8011112:	4413      	add	r3, r2
 8011114:	00db      	lsls	r3, r3, #3
 8011116:	440b      	add	r3, r1
 8011118:	3314      	adds	r3, #20
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d115      	bne.n	801114c <etharp_query+0xc4>
    is_new_entry = 1;
 8011120:	2301      	movs	r3, #1
 8011122:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011124:	7c7a      	ldrb	r2, [r7, #17]
 8011126:	4972      	ldr	r1, [pc, #456]	; (80112f0 <etharp_query+0x268>)
 8011128:	4613      	mov	r3, r2
 801112a:	005b      	lsls	r3, r3, #1
 801112c:	4413      	add	r3, r2
 801112e:	00db      	lsls	r3, r3, #3
 8011130:	440b      	add	r3, r1
 8011132:	3314      	adds	r3, #20
 8011134:	2201      	movs	r2, #1
 8011136:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011138:	7c7a      	ldrb	r2, [r7, #17]
 801113a:	496d      	ldr	r1, [pc, #436]	; (80112f0 <etharp_query+0x268>)
 801113c:	4613      	mov	r3, r2
 801113e:	005b      	lsls	r3, r3, #1
 8011140:	4413      	add	r3, r2
 8011142:	00db      	lsls	r3, r3, #3
 8011144:	440b      	add	r3, r1
 8011146:	3308      	adds	r3, #8
 8011148:	68fa      	ldr	r2, [r7, #12]
 801114a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801114c:	7c7a      	ldrb	r2, [r7, #17]
 801114e:	4968      	ldr	r1, [pc, #416]	; (80112f0 <etharp_query+0x268>)
 8011150:	4613      	mov	r3, r2
 8011152:	005b      	lsls	r3, r3, #1
 8011154:	4413      	add	r3, r2
 8011156:	00db      	lsls	r3, r3, #3
 8011158:	440b      	add	r3, r1
 801115a:	3314      	adds	r3, #20
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	2b01      	cmp	r3, #1
 8011160:	d011      	beq.n	8011186 <etharp_query+0xfe>
 8011162:	7c7a      	ldrb	r2, [r7, #17]
 8011164:	4962      	ldr	r1, [pc, #392]	; (80112f0 <etharp_query+0x268>)
 8011166:	4613      	mov	r3, r2
 8011168:	005b      	lsls	r3, r3, #1
 801116a:	4413      	add	r3, r2
 801116c:	00db      	lsls	r3, r3, #3
 801116e:	440b      	add	r3, r1
 8011170:	3314      	adds	r3, #20
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	2b01      	cmp	r3, #1
 8011176:	d806      	bhi.n	8011186 <etharp_query+0xfe>
 8011178:	4b5a      	ldr	r3, [pc, #360]	; (80112e4 <etharp_query+0x25c>)
 801117a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801117e:	495d      	ldr	r1, [pc, #372]	; (80112f4 <etharp_query+0x26c>)
 8011180:	485a      	ldr	r0, [pc, #360]	; (80112ec <etharp_query+0x264>)
 8011182:	f001 fff9 	bl	8013178 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011186:	6a3b      	ldr	r3, [r7, #32]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d102      	bne.n	8011192 <etharp_query+0x10a>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d10c      	bne.n	80111ac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011192:	68b9      	ldr	r1, [r7, #8]
 8011194:	68f8      	ldr	r0, [r7, #12]
 8011196:	f000 f963 	bl	8011460 <etharp_request>
 801119a:	4603      	mov	r3, r0
 801119c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d102      	bne.n	80111ac <etharp_query+0x124>
      return result;
 80111a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80111aa:	e096      	b.n	80112da <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d106      	bne.n	80111c0 <etharp_query+0x138>
 80111b2:	4b4c      	ldr	r3, [pc, #304]	; (80112e4 <etharp_query+0x25c>)
 80111b4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80111b8:	494f      	ldr	r1, [pc, #316]	; (80112f8 <etharp_query+0x270>)
 80111ba:	484c      	ldr	r0, [pc, #304]	; (80112ec <etharp_query+0x264>)
 80111bc:	f001 ffdc 	bl	8013178 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80111c0:	7c7a      	ldrb	r2, [r7, #17]
 80111c2:	494b      	ldr	r1, [pc, #300]	; (80112f0 <etharp_query+0x268>)
 80111c4:	4613      	mov	r3, r2
 80111c6:	005b      	lsls	r3, r3, #1
 80111c8:	4413      	add	r3, r2
 80111ca:	00db      	lsls	r3, r3, #3
 80111cc:	440b      	add	r3, r1
 80111ce:	3314      	adds	r3, #20
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	d917      	bls.n	8011206 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80111d6:	4a49      	ldr	r2, [pc, #292]	; (80112fc <etharp_query+0x274>)
 80111d8:	7c7b      	ldrb	r3, [r7, #17]
 80111da:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80111dc:	7c7a      	ldrb	r2, [r7, #17]
 80111de:	4613      	mov	r3, r2
 80111e0:	005b      	lsls	r3, r3, #1
 80111e2:	4413      	add	r3, r2
 80111e4:	00db      	lsls	r3, r3, #3
 80111e6:	3308      	adds	r3, #8
 80111e8:	4a41      	ldr	r2, [pc, #260]	; (80112f0 <etharp_query+0x268>)
 80111ea:	4413      	add	r3, r2
 80111ec:	3304      	adds	r3, #4
 80111ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80111f2:	9200      	str	r2, [sp, #0]
 80111f4:	697a      	ldr	r2, [r7, #20]
 80111f6:	6879      	ldr	r1, [r7, #4]
 80111f8:	68f8      	ldr	r0, [r7, #12]
 80111fa:	f001 fc6f 	bl	8012adc <ethernet_output>
 80111fe:	4603      	mov	r3, r0
 8011200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011204:	e067      	b.n	80112d6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011206:	7c7a      	ldrb	r2, [r7, #17]
 8011208:	4939      	ldr	r1, [pc, #228]	; (80112f0 <etharp_query+0x268>)
 801120a:	4613      	mov	r3, r2
 801120c:	005b      	lsls	r3, r3, #1
 801120e:	4413      	add	r3, r2
 8011210:	00db      	lsls	r3, r3, #3
 8011212:	440b      	add	r3, r1
 8011214:	3314      	adds	r3, #20
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	2b01      	cmp	r3, #1
 801121a:	d15c      	bne.n	80112d6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801121c:	2300      	movs	r3, #0
 801121e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011224:	e01c      	b.n	8011260 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	895a      	ldrh	r2, [r3, #10]
 801122a:	69fb      	ldr	r3, [r7, #28]
 801122c:	891b      	ldrh	r3, [r3, #8]
 801122e:	429a      	cmp	r2, r3
 8011230:	d10a      	bne.n	8011248 <etharp_query+0x1c0>
 8011232:	69fb      	ldr	r3, [r7, #28]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d006      	beq.n	8011248 <etharp_query+0x1c0>
 801123a:	4b2a      	ldr	r3, [pc, #168]	; (80112e4 <etharp_query+0x25c>)
 801123c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011240:	492f      	ldr	r1, [pc, #188]	; (8011300 <etharp_query+0x278>)
 8011242:	482a      	ldr	r0, [pc, #168]	; (80112ec <etharp_query+0x264>)
 8011244:	f001 ff98 	bl	8013178 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011248:	69fb      	ldr	r3, [r7, #28]
 801124a:	7b1b      	ldrb	r3, [r3, #12]
 801124c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011250:	2b00      	cmp	r3, #0
 8011252:	d002      	beq.n	801125a <etharp_query+0x1d2>
        copy_needed = 1;
 8011254:	2301      	movs	r3, #1
 8011256:	61bb      	str	r3, [r7, #24]
        break;
 8011258:	e005      	b.n	8011266 <etharp_query+0x1de>
      }
      p = p->next;
 801125a:	69fb      	ldr	r3, [r7, #28]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d1df      	bne.n	8011226 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011266:	69bb      	ldr	r3, [r7, #24]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d007      	beq.n	801127c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801126c:	687a      	ldr	r2, [r7, #4]
 801126e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011272:	200e      	movs	r0, #14
 8011274:	f7f9 fcfc 	bl	800ac70 <pbuf_clone>
 8011278:	61f8      	str	r0, [r7, #28]
 801127a:	e004      	b.n	8011286 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011280:	69f8      	ldr	r0, [r7, #28]
 8011282:	f7f9 fb33 	bl	800a8ec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011286:	69fb      	ldr	r3, [r7, #28]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d021      	beq.n	80112d0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801128c:	7c7a      	ldrb	r2, [r7, #17]
 801128e:	4918      	ldr	r1, [pc, #96]	; (80112f0 <etharp_query+0x268>)
 8011290:	4613      	mov	r3, r2
 8011292:	005b      	lsls	r3, r3, #1
 8011294:	4413      	add	r3, r2
 8011296:	00db      	lsls	r3, r3, #3
 8011298:	440b      	add	r3, r1
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d00a      	beq.n	80112b6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80112a0:	7c7a      	ldrb	r2, [r7, #17]
 80112a2:	4913      	ldr	r1, [pc, #76]	; (80112f0 <etharp_query+0x268>)
 80112a4:	4613      	mov	r3, r2
 80112a6:	005b      	lsls	r3, r3, #1
 80112a8:	4413      	add	r3, r2
 80112aa:	00db      	lsls	r3, r3, #3
 80112ac:	440b      	add	r3, r1
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7f9 fa75 	bl	800a7a0 <pbuf_free>
      }
      arp_table[i].q = p;
 80112b6:	7c7a      	ldrb	r2, [r7, #17]
 80112b8:	490d      	ldr	r1, [pc, #52]	; (80112f0 <etharp_query+0x268>)
 80112ba:	4613      	mov	r3, r2
 80112bc:	005b      	lsls	r3, r3, #1
 80112be:	4413      	add	r3, r2
 80112c0:	00db      	lsls	r3, r3, #3
 80112c2:	440b      	add	r3, r1
 80112c4:	69fa      	ldr	r2, [r7, #28]
 80112c6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80112c8:	2300      	movs	r3, #0
 80112ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80112ce:	e002      	b.n	80112d6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80112d0:	23ff      	movs	r3, #255	; 0xff
 80112d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80112d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3728      	adds	r7, #40	; 0x28
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	080163b8 	.word	0x080163b8
 80112e8:	08016564 	.word	0x08016564
 80112ec:	08016430 	.word	0x08016430
 80112f0:	20006884 	.word	0x20006884
 80112f4:	08016574 	.word	0x08016574
 80112f8:	08016558 	.word	0x08016558
 80112fc:	20006974 	.word	0x20006974
 8011300:	0801659c 	.word	0x0801659c

08011304 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b08a      	sub	sp, #40	; 0x28
 8011308:	af02      	add	r7, sp, #8
 801130a:	60f8      	str	r0, [r7, #12]
 801130c:	60b9      	str	r1, [r7, #8]
 801130e:	607a      	str	r2, [r7, #4]
 8011310:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011312:	2300      	movs	r3, #0
 8011314:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d106      	bne.n	801132a <etharp_raw+0x26>
 801131c:	4b3a      	ldr	r3, [pc, #232]	; (8011408 <etharp_raw+0x104>)
 801131e:	f240 4257 	movw	r2, #1111	; 0x457
 8011322:	493a      	ldr	r1, [pc, #232]	; (801140c <etharp_raw+0x108>)
 8011324:	483a      	ldr	r0, [pc, #232]	; (8011410 <etharp_raw+0x10c>)
 8011326:	f001 ff27 	bl	8013178 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801132a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801132e:	211c      	movs	r1, #28
 8011330:	200e      	movs	r0, #14
 8011332:	f7f8 ff51 	bl	800a1d8 <pbuf_alloc>
 8011336:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011338:	69bb      	ldr	r3, [r7, #24]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d102      	bne.n	8011344 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801133e:	f04f 33ff 	mov.w	r3, #4294967295
 8011342:	e05d      	b.n	8011400 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011344:	69bb      	ldr	r3, [r7, #24]
 8011346:	895b      	ldrh	r3, [r3, #10]
 8011348:	2b1b      	cmp	r3, #27
 801134a:	d806      	bhi.n	801135a <etharp_raw+0x56>
 801134c:	4b2e      	ldr	r3, [pc, #184]	; (8011408 <etharp_raw+0x104>)
 801134e:	f240 4262 	movw	r2, #1122	; 0x462
 8011352:	4930      	ldr	r1, [pc, #192]	; (8011414 <etharp_raw+0x110>)
 8011354:	482e      	ldr	r0, [pc, #184]	; (8011410 <etharp_raw+0x10c>)
 8011356:	f001 ff0f 	bl	8013178 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801135a:	69bb      	ldr	r3, [r7, #24]
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011360:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011362:	4618      	mov	r0, r3
 8011364:	f7f7 fed4 	bl	8009110 <lwip_htons>
 8011368:	4603      	mov	r3, r0
 801136a:	461a      	mov	r2, r3
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011376:	2b06      	cmp	r3, #6
 8011378:	d006      	beq.n	8011388 <etharp_raw+0x84>
 801137a:	4b23      	ldr	r3, [pc, #140]	; (8011408 <etharp_raw+0x104>)
 801137c:	f240 4269 	movw	r2, #1129	; 0x469
 8011380:	4925      	ldr	r1, [pc, #148]	; (8011418 <etharp_raw+0x114>)
 8011382:	4823      	ldr	r0, [pc, #140]	; (8011410 <etharp_raw+0x10c>)
 8011384:	f001 fef8 	bl	8013178 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	3308      	adds	r3, #8
 801138c:	2206      	movs	r2, #6
 801138e:	6839      	ldr	r1, [r7, #0]
 8011390:	4618      	mov	r0, r3
 8011392:	f001 fe31 	bl	8012ff8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	3312      	adds	r3, #18
 801139a:	2206      	movs	r2, #6
 801139c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801139e:	4618      	mov	r0, r3
 80113a0:	f001 fe2a 	bl	8012ff8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	330e      	adds	r3, #14
 80113a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113aa:	6812      	ldr	r2, [r2, #0]
 80113ac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	3318      	adds	r3, #24
 80113b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113b4:	6812      	ldr	r2, [r2, #0]
 80113b6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	2200      	movs	r2, #0
 80113bc:	701a      	strb	r2, [r3, #0]
 80113be:	2200      	movs	r2, #0
 80113c0:	f042 0201 	orr.w	r2, r2, #1
 80113c4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	2200      	movs	r2, #0
 80113ca:	f042 0208 	orr.w	r2, r2, #8
 80113ce:	709a      	strb	r2, [r3, #2]
 80113d0:	2200      	movs	r2, #0
 80113d2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	2206      	movs	r2, #6
 80113d8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	2204      	movs	r2, #4
 80113de:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80113e0:	f640 0306 	movw	r3, #2054	; 0x806
 80113e4:	9300      	str	r3, [sp, #0]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	68ba      	ldr	r2, [r7, #8]
 80113ea:	69b9      	ldr	r1, [r7, #24]
 80113ec:	68f8      	ldr	r0, [r7, #12]
 80113ee:	f001 fb75 	bl	8012adc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80113f2:	69b8      	ldr	r0, [r7, #24]
 80113f4:	f7f9 f9d4 	bl	800a7a0 <pbuf_free>
  p = NULL;
 80113f8:	2300      	movs	r3, #0
 80113fa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80113fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011400:	4618      	mov	r0, r3
 8011402:	3720      	adds	r7, #32
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}
 8011408:	080163b8 	.word	0x080163b8
 801140c:	08016508 	.word	0x08016508
 8011410:	08016430 	.word	0x08016430
 8011414:	080165b8 	.word	0x080165b8
 8011418:	080165ec 	.word	0x080165ec

0801141c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b088      	sub	sp, #32
 8011420:	af04      	add	r7, sp, #16
 8011422:	60f8      	str	r0, [r7, #12]
 8011424:	60b9      	str	r1, [r7, #8]
 8011426:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011438:	2201      	movs	r2, #1
 801143a:	9203      	str	r2, [sp, #12]
 801143c:	68ba      	ldr	r2, [r7, #8]
 801143e:	9202      	str	r2, [sp, #8]
 8011440:	4a06      	ldr	r2, [pc, #24]	; (801145c <etharp_request_dst+0x40>)
 8011442:	9201      	str	r2, [sp, #4]
 8011444:	9300      	str	r3, [sp, #0]
 8011446:	4603      	mov	r3, r0
 8011448:	687a      	ldr	r2, [r7, #4]
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f7ff ff5a 	bl	8011304 <etharp_raw>
 8011450:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011452:	4618      	mov	r0, r3
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	08016bb8 	.word	0x08016bb8

08011460 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801146a:	4a05      	ldr	r2, [pc, #20]	; (8011480 <etharp_request+0x20>)
 801146c:	6839      	ldr	r1, [r7, #0]
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f7ff ffd4 	bl	801141c <etharp_request_dst>
 8011474:	4603      	mov	r3, r0
}
 8011476:	4618      	mov	r0, r3
 8011478:	3708      	adds	r7, #8
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	bf00      	nop
 8011480:	08016bb0 	.word	0x08016bb0

08011484 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b08e      	sub	sp, #56	; 0x38
 8011488:	af04      	add	r7, sp, #16
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801148e:	4b79      	ldr	r3, [pc, #484]	; (8011674 <icmp_input+0x1f0>)
 8011490:	689b      	ldr	r3, [r3, #8]
 8011492:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	f003 030f 	and.w	r3, r3, #15
 801149c:	b2db      	uxtb	r3, r3
 801149e:	009b      	lsls	r3, r3, #2
 80114a0:	b2db      	uxtb	r3, r3
 80114a2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80114a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114a6:	2b13      	cmp	r3, #19
 80114a8:	f240 80cd 	bls.w	8011646 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	895b      	ldrh	r3, [r3, #10]
 80114b0:	2b03      	cmp	r3, #3
 80114b2:	f240 80ca 	bls.w	801164a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80114c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	f000 80b7 	beq.w	8011638 <icmp_input+0x1b4>
 80114ca:	2b08      	cmp	r3, #8
 80114cc:	f040 80b7 	bne.w	801163e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80114d0:	4b69      	ldr	r3, [pc, #420]	; (8011678 <icmp_input+0x1f4>)
 80114d2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80114d4:	4b67      	ldr	r3, [pc, #412]	; (8011674 <icmp_input+0x1f0>)
 80114d6:	695b      	ldr	r3, [r3, #20]
 80114d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80114dc:	2be0      	cmp	r3, #224	; 0xe0
 80114de:	f000 80bb 	beq.w	8011658 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80114e2:	4b64      	ldr	r3, [pc, #400]	; (8011674 <icmp_input+0x1f0>)
 80114e4:	695b      	ldr	r3, [r3, #20]
 80114e6:	4a63      	ldr	r2, [pc, #396]	; (8011674 <icmp_input+0x1f0>)
 80114e8:	6812      	ldr	r2, [r2, #0]
 80114ea:	4611      	mov	r1, r2
 80114ec:	4618      	mov	r0, r3
 80114ee:	f000 fbed 	bl	8011ccc <ip4_addr_isbroadcast_u32>
 80114f2:	4603      	mov	r3, r0
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	f040 80b1 	bne.w	801165c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	891b      	ldrh	r3, [r3, #8]
 80114fe:	2b07      	cmp	r3, #7
 8011500:	f240 80a5 	bls.w	801164e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011504:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011506:	330e      	adds	r3, #14
 8011508:	4619      	mov	r1, r3
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f7f9 f8b2 	bl	800a674 <pbuf_add_header>
 8011510:	4603      	mov	r3, r0
 8011512:	2b00      	cmp	r3, #0
 8011514:	d04b      	beq.n	80115ae <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	891a      	ldrh	r2, [r3, #8]
 801151a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801151c:	4413      	add	r3, r2
 801151e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	891b      	ldrh	r3, [r3, #8]
 8011524:	8b7a      	ldrh	r2, [r7, #26]
 8011526:	429a      	cmp	r2, r3
 8011528:	f0c0 809a 	bcc.w	8011660 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801152c:	8b7b      	ldrh	r3, [r7, #26]
 801152e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011532:	4619      	mov	r1, r3
 8011534:	200e      	movs	r0, #14
 8011536:	f7f8 fe4f 	bl	800a1d8 <pbuf_alloc>
 801153a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	2b00      	cmp	r3, #0
 8011540:	f000 8090 	beq.w	8011664 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	895b      	ldrh	r3, [r3, #10]
 8011548:	461a      	mov	r2, r3
 801154a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801154c:	3308      	adds	r3, #8
 801154e:	429a      	cmp	r2, r3
 8011550:	d203      	bcs.n	801155a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011552:	6978      	ldr	r0, [r7, #20]
 8011554:	f7f9 f924 	bl	800a7a0 <pbuf_free>
          goto icmperr;
 8011558:	e085      	b.n	8011666 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011562:	4618      	mov	r0, r3
 8011564:	f001 fd48 	bl	8012ff8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011568:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801156a:	4619      	mov	r1, r3
 801156c:	6978      	ldr	r0, [r7, #20]
 801156e:	f7f9 f891 	bl	800a694 <pbuf_remove_header>
 8011572:	4603      	mov	r3, r0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d009      	beq.n	801158c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011578:	4b40      	ldr	r3, [pc, #256]	; (801167c <icmp_input+0x1f8>)
 801157a:	22b6      	movs	r2, #182	; 0xb6
 801157c:	4940      	ldr	r1, [pc, #256]	; (8011680 <icmp_input+0x1fc>)
 801157e:	4841      	ldr	r0, [pc, #260]	; (8011684 <icmp_input+0x200>)
 8011580:	f001 fdfa 	bl	8013178 <iprintf>
          pbuf_free(r);
 8011584:	6978      	ldr	r0, [r7, #20]
 8011586:	f7f9 f90b 	bl	800a7a0 <pbuf_free>
          goto icmperr;
 801158a:	e06c      	b.n	8011666 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801158c:	6879      	ldr	r1, [r7, #4]
 801158e:	6978      	ldr	r0, [r7, #20]
 8011590:	f7f9 fa2a 	bl	800a9e8 <pbuf_copy>
 8011594:	4603      	mov	r3, r0
 8011596:	2b00      	cmp	r3, #0
 8011598:	d003      	beq.n	80115a2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801159a:	6978      	ldr	r0, [r7, #20]
 801159c:	f7f9 f900 	bl	800a7a0 <pbuf_free>
          goto icmperr;
 80115a0:	e061      	b.n	8011666 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f7f9 f8fc 	bl	800a7a0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	607b      	str	r3, [r7, #4]
 80115ac:	e00f      	b.n	80115ce <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80115ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80115b0:	330e      	adds	r3, #14
 80115b2:	4619      	mov	r1, r3
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f7f9 f86d 	bl	800a694 <pbuf_remove_header>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d006      	beq.n	80115ce <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80115c0:	4b2e      	ldr	r3, [pc, #184]	; (801167c <icmp_input+0x1f8>)
 80115c2:	22c7      	movs	r2, #199	; 0xc7
 80115c4:	4930      	ldr	r1, [pc, #192]	; (8011688 <icmp_input+0x204>)
 80115c6:	482f      	ldr	r0, [pc, #188]	; (8011684 <icmp_input+0x200>)
 80115c8:	f001 fdd6 	bl	8013178 <iprintf>
          goto icmperr;
 80115cc:	e04b      	b.n	8011666 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80115d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80115d6:	4619      	mov	r1, r3
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f7f9 f84b 	bl	800a674 <pbuf_add_header>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d12b      	bne.n	801163c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80115ea:	69fb      	ldr	r3, [r7, #28]
 80115ec:	681a      	ldr	r2, [r3, #0]
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80115f2:	4b20      	ldr	r3, [pc, #128]	; (8011674 <icmp_input+0x1f0>)
 80115f4:	691a      	ldr	r2, [r3, #16]
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	2200      	movs	r2, #0
 80115fe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	2200      	movs	r2, #0
 8011604:	709a      	strb	r2, [r3, #2]
 8011606:	2200      	movs	r2, #0
 8011608:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	22ff      	movs	r2, #255	; 0xff
 801160e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2200      	movs	r2, #0
 8011614:	729a      	strb	r2, [r3, #10]
 8011616:	2200      	movs	r2, #0
 8011618:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	9302      	str	r3, [sp, #8]
 801161e:	2301      	movs	r3, #1
 8011620:	9301      	str	r3, [sp, #4]
 8011622:	2300      	movs	r3, #0
 8011624:	9300      	str	r3, [sp, #0]
 8011626:	23ff      	movs	r3, #255	; 0xff
 8011628:	2200      	movs	r2, #0
 801162a:	69f9      	ldr	r1, [r7, #28]
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f000 fa75 	bl	8011b1c <ip4_output_if>
 8011632:	4603      	mov	r3, r0
 8011634:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011636:	e001      	b.n	801163c <icmp_input+0x1b8>
      break;
 8011638:	bf00      	nop
 801163a:	e000      	b.n	801163e <icmp_input+0x1ba>
      break;
 801163c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f7f9 f8ae 	bl	800a7a0 <pbuf_free>
  return;
 8011644:	e013      	b.n	801166e <icmp_input+0x1ea>
    goto lenerr;
 8011646:	bf00      	nop
 8011648:	e002      	b.n	8011650 <icmp_input+0x1cc>
    goto lenerr;
 801164a:	bf00      	nop
 801164c:	e000      	b.n	8011650 <icmp_input+0x1cc>
        goto lenerr;
 801164e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f7f9 f8a5 	bl	800a7a0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011656:	e00a      	b.n	801166e <icmp_input+0x1ea>
        goto icmperr;
 8011658:	bf00      	nop
 801165a:	e004      	b.n	8011666 <icmp_input+0x1e2>
        goto icmperr;
 801165c:	bf00      	nop
 801165e:	e002      	b.n	8011666 <icmp_input+0x1e2>
          goto icmperr;
 8011660:	bf00      	nop
 8011662:	e000      	b.n	8011666 <icmp_input+0x1e2>
          goto icmperr;
 8011664:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f7f9 f89a 	bl	800a7a0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801166c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801166e:	3728      	adds	r7, #40	; 0x28
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}
 8011674:	20009cd4 	.word	0x20009cd4
 8011678:	20009ce8 	.word	0x20009ce8
 801167c:	08016630 	.word	0x08016630
 8011680:	08016668 	.word	0x08016668
 8011684:	080166a0 	.word	0x080166a0
 8011688:	080166c8 	.word	0x080166c8

0801168c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	460b      	mov	r3, r1
 8011696:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011698:	78fb      	ldrb	r3, [r7, #3]
 801169a:	461a      	mov	r2, r3
 801169c:	2103      	movs	r1, #3
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f000 f814 	bl	80116cc <icmp_send_response>
}
 80116a4:	bf00      	nop
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	460b      	mov	r3, r1
 80116b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80116b8:	78fb      	ldrb	r3, [r7, #3]
 80116ba:	461a      	mov	r2, r3
 80116bc:	210b      	movs	r1, #11
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f000 f804 	bl	80116cc <icmp_send_response>
}
 80116c4:	bf00      	nop
 80116c6:	3708      	adds	r7, #8
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}

080116cc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b08c      	sub	sp, #48	; 0x30
 80116d0:	af04      	add	r7, sp, #16
 80116d2:	6078      	str	r0, [r7, #4]
 80116d4:	460b      	mov	r3, r1
 80116d6:	70fb      	strb	r3, [r7, #3]
 80116d8:	4613      	mov	r3, r2
 80116da:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80116dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116e0:	2124      	movs	r1, #36	; 0x24
 80116e2:	2022      	movs	r0, #34	; 0x22
 80116e4:	f7f8 fd78 	bl	800a1d8 <pbuf_alloc>
 80116e8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80116ea:	69fb      	ldr	r3, [r7, #28]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d04c      	beq.n	801178a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80116f0:	69fb      	ldr	r3, [r7, #28]
 80116f2:	895b      	ldrh	r3, [r3, #10]
 80116f4:	2b23      	cmp	r3, #35	; 0x23
 80116f6:	d806      	bhi.n	8011706 <icmp_send_response+0x3a>
 80116f8:	4b26      	ldr	r3, [pc, #152]	; (8011794 <icmp_send_response+0xc8>)
 80116fa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80116fe:	4926      	ldr	r1, [pc, #152]	; (8011798 <icmp_send_response+0xcc>)
 8011700:	4826      	ldr	r0, [pc, #152]	; (801179c <icmp_send_response+0xd0>)
 8011702:	f001 fd39 	bl	8013178 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	78fa      	ldrb	r2, [r7, #3]
 8011716:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	78ba      	ldrb	r2, [r7, #2]
 801171c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	2200      	movs	r2, #0
 8011722:	711a      	strb	r2, [r3, #4]
 8011724:	2200      	movs	r2, #0
 8011726:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	2200      	movs	r2, #0
 801172c:	719a      	strb	r2, [r3, #6]
 801172e:	2200      	movs	r2, #0
 8011730:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011732:	69fb      	ldr	r3, [r7, #28]
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	f103 0008 	add.w	r0, r3, #8
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	221c      	movs	r2, #28
 8011740:	4619      	mov	r1, r3
 8011742:	f001 fc59 	bl	8012ff8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011746:	69bb      	ldr	r3, [r7, #24]
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801174c:	f107 030c 	add.w	r3, r7, #12
 8011750:	4618      	mov	r0, r3
 8011752:	f000 f825 	bl	80117a0 <ip4_route>
 8011756:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d011      	beq.n	8011782 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	2200      	movs	r2, #0
 8011762:	709a      	strb	r2, [r3, #2]
 8011764:	2200      	movs	r2, #0
 8011766:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011768:	f107 020c 	add.w	r2, r7, #12
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	9302      	str	r3, [sp, #8]
 8011770:	2301      	movs	r3, #1
 8011772:	9301      	str	r3, [sp, #4]
 8011774:	2300      	movs	r3, #0
 8011776:	9300      	str	r3, [sp, #0]
 8011778:	23ff      	movs	r3, #255	; 0xff
 801177a:	2100      	movs	r1, #0
 801177c:	69f8      	ldr	r0, [r7, #28]
 801177e:	f000 f9cd 	bl	8011b1c <ip4_output_if>
  }
  pbuf_free(q);
 8011782:	69f8      	ldr	r0, [r7, #28]
 8011784:	f7f9 f80c 	bl	800a7a0 <pbuf_free>
 8011788:	e000      	b.n	801178c <icmp_send_response+0xc0>
    return;
 801178a:	bf00      	nop
}
 801178c:	3720      	adds	r7, #32
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	08016630 	.word	0x08016630
 8011798:	080166fc 	.word	0x080166fc
 801179c:	080166a0 	.word	0x080166a0

080117a0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b085      	sub	sp, #20
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80117a8:	4b33      	ldr	r3, [pc, #204]	; (8011878 <ip4_route+0xd8>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	60fb      	str	r3, [r7, #12]
 80117ae:	e036      	b.n	801181e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80117b6:	f003 0301 	and.w	r3, r3, #1
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d02b      	beq.n	8011818 <ip4_route+0x78>
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80117c6:	089b      	lsrs	r3, r3, #2
 80117c8:	f003 0301 	and.w	r3, r3, #1
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d022      	beq.n	8011818 <ip4_route+0x78>
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	3304      	adds	r3, #4
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d01d      	beq.n	8011818 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681a      	ldr	r2, [r3, #0]
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	3304      	adds	r3, #4
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	405a      	eors	r2, r3
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	3308      	adds	r3, #8
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	4013      	ands	r3, r2
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d101      	bne.n	80117f8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	e038      	b.n	801186a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80117fe:	f003 0302 	and.w	r3, r3, #2
 8011802:	2b00      	cmp	r3, #0
 8011804:	d108      	bne.n	8011818 <ip4_route+0x78>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	330c      	adds	r3, #12
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	429a      	cmp	r2, r3
 8011812:	d101      	bne.n	8011818 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	e028      	b.n	801186a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	60fb      	str	r3, [r7, #12]
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d1c5      	bne.n	80117b0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011824:	4b15      	ldr	r3, [pc, #84]	; (801187c <ip4_route+0xdc>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d01a      	beq.n	8011862 <ip4_route+0xc2>
 801182c:	4b13      	ldr	r3, [pc, #76]	; (801187c <ip4_route+0xdc>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011834:	f003 0301 	and.w	r3, r3, #1
 8011838:	2b00      	cmp	r3, #0
 801183a:	d012      	beq.n	8011862 <ip4_route+0xc2>
 801183c:	4b0f      	ldr	r3, [pc, #60]	; (801187c <ip4_route+0xdc>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011844:	f003 0304 	and.w	r3, r3, #4
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00a      	beq.n	8011862 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801184c:	4b0b      	ldr	r3, [pc, #44]	; (801187c <ip4_route+0xdc>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	3304      	adds	r3, #4
 8011852:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011854:	2b00      	cmp	r3, #0
 8011856:	d004      	beq.n	8011862 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	b2db      	uxtb	r3, r3
 801185e:	2b7f      	cmp	r3, #127	; 0x7f
 8011860:	d101      	bne.n	8011866 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011862:	2300      	movs	r3, #0
 8011864:	e001      	b.n	801186a <ip4_route+0xca>
  }

  return netif_default;
 8011866:	4b05      	ldr	r3, [pc, #20]	; (801187c <ip4_route+0xdc>)
 8011868:	681b      	ldr	r3, [r3, #0]
}
 801186a:	4618      	mov	r0, r3
 801186c:	3714      	adds	r7, #20
 801186e:	46bd      	mov	sp, r7
 8011870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011874:	4770      	bx	lr
 8011876:	bf00      	nop
 8011878:	2000d3d8 	.word	0x2000d3d8
 801187c:	2000d3dc 	.word	0x2000d3dc

08011880 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b082      	sub	sp, #8
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801188e:	f003 0301 	and.w	r3, r3, #1
 8011892:	b2db      	uxtb	r3, r3
 8011894:	2b00      	cmp	r3, #0
 8011896:	d016      	beq.n	80118c6 <ip4_input_accept+0x46>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	3304      	adds	r3, #4
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d011      	beq.n	80118c6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80118a2:	4b0b      	ldr	r3, [pc, #44]	; (80118d0 <ip4_input_accept+0x50>)
 80118a4:	695a      	ldr	r2, [r3, #20]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	3304      	adds	r3, #4
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d008      	beq.n	80118c2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80118b0:	4b07      	ldr	r3, [pc, #28]	; (80118d0 <ip4_input_accept+0x50>)
 80118b2:	695b      	ldr	r3, [r3, #20]
 80118b4:	6879      	ldr	r1, [r7, #4]
 80118b6:	4618      	mov	r0, r3
 80118b8:	f000 fa08 	bl	8011ccc <ip4_addr_isbroadcast_u32>
 80118bc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d001      	beq.n	80118c6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80118c2:	2301      	movs	r3, #1
 80118c4:	e000      	b.n	80118c8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80118c6:	2300      	movs	r3, #0
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	3708      	adds	r7, #8
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	20009cd4 	.word	0x20009cd4

080118d4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b086      	sub	sp, #24
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	091b      	lsrs	r3, r3, #4
 80118ea:	b2db      	uxtb	r3, r3
 80118ec:	2b04      	cmp	r3, #4
 80118ee:	d004      	beq.n	80118fa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f7f8 ff55 	bl	800a7a0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80118f6:	2300      	movs	r3, #0
 80118f8:	e107      	b.n	8011b0a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	781b      	ldrb	r3, [r3, #0]
 80118fe:	f003 030f 	and.w	r3, r3, #15
 8011902:	b2db      	uxtb	r3, r3
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	b2db      	uxtb	r3, r3
 8011908:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	885b      	ldrh	r3, [r3, #2]
 801190e:	b29b      	uxth	r3, r3
 8011910:	4618      	mov	r0, r3
 8011912:	f7f7 fbfd 	bl	8009110 <lwip_htons>
 8011916:	4603      	mov	r3, r0
 8011918:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	891b      	ldrh	r3, [r3, #8]
 801191e:	89ba      	ldrh	r2, [r7, #12]
 8011920:	429a      	cmp	r2, r3
 8011922:	d204      	bcs.n	801192e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011924:	89bb      	ldrh	r3, [r7, #12]
 8011926:	4619      	mov	r1, r3
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f7f8 fdb3 	bl	800a494 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	895b      	ldrh	r3, [r3, #10]
 8011932:	89fa      	ldrh	r2, [r7, #14]
 8011934:	429a      	cmp	r2, r3
 8011936:	d807      	bhi.n	8011948 <ip4_input+0x74>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	891b      	ldrh	r3, [r3, #8]
 801193c:	89ba      	ldrh	r2, [r7, #12]
 801193e:	429a      	cmp	r2, r3
 8011940:	d802      	bhi.n	8011948 <ip4_input+0x74>
 8011942:	89fb      	ldrh	r3, [r7, #14]
 8011944:	2b13      	cmp	r3, #19
 8011946:	d804      	bhi.n	8011952 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f7f8 ff29 	bl	800a7a0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801194e:	2300      	movs	r3, #0
 8011950:	e0db      	b.n	8011b0a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	691b      	ldr	r3, [r3, #16]
 8011956:	4a6f      	ldr	r2, [pc, #444]	; (8011b14 <ip4_input+0x240>)
 8011958:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	68db      	ldr	r3, [r3, #12]
 801195e:	4a6d      	ldr	r2, [pc, #436]	; (8011b14 <ip4_input+0x240>)
 8011960:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011962:	4b6c      	ldr	r3, [pc, #432]	; (8011b14 <ip4_input+0x240>)
 8011964:	695b      	ldr	r3, [r3, #20]
 8011966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801196a:	2be0      	cmp	r3, #224	; 0xe0
 801196c:	d112      	bne.n	8011994 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011974:	f003 0301 	and.w	r3, r3, #1
 8011978:	b2db      	uxtb	r3, r3
 801197a:	2b00      	cmp	r3, #0
 801197c:	d007      	beq.n	801198e <ip4_input+0xba>
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	3304      	adds	r3, #4
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d002      	beq.n	801198e <ip4_input+0xba>
      netif = inp;
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	613b      	str	r3, [r7, #16]
 801198c:	e02a      	b.n	80119e4 <ip4_input+0x110>
    } else {
      netif = NULL;
 801198e:	2300      	movs	r3, #0
 8011990:	613b      	str	r3, [r7, #16]
 8011992:	e027      	b.n	80119e4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011994:	6838      	ldr	r0, [r7, #0]
 8011996:	f7ff ff73 	bl	8011880 <ip4_input_accept>
 801199a:	4603      	mov	r3, r0
 801199c:	2b00      	cmp	r3, #0
 801199e:	d002      	beq.n	80119a6 <ip4_input+0xd2>
      netif = inp;
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	613b      	str	r3, [r7, #16]
 80119a4:	e01e      	b.n	80119e4 <ip4_input+0x110>
    } else {
      netif = NULL;
 80119a6:	2300      	movs	r3, #0
 80119a8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80119aa:	4b5a      	ldr	r3, [pc, #360]	; (8011b14 <ip4_input+0x240>)
 80119ac:	695b      	ldr	r3, [r3, #20]
 80119ae:	b2db      	uxtb	r3, r3
 80119b0:	2b7f      	cmp	r3, #127	; 0x7f
 80119b2:	d017      	beq.n	80119e4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80119b4:	4b58      	ldr	r3, [pc, #352]	; (8011b18 <ip4_input+0x244>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	613b      	str	r3, [r7, #16]
 80119ba:	e00e      	b.n	80119da <ip4_input+0x106>
          if (netif == inp) {
 80119bc:	693a      	ldr	r2, [r7, #16]
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d006      	beq.n	80119d2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80119c4:	6938      	ldr	r0, [r7, #16]
 80119c6:	f7ff ff5b 	bl	8011880 <ip4_input_accept>
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d108      	bne.n	80119e2 <ip4_input+0x10e>
 80119d0:	e000      	b.n	80119d4 <ip4_input+0x100>
            continue;
 80119d2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	613b      	str	r3, [r7, #16]
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d1ed      	bne.n	80119bc <ip4_input+0xe8>
 80119e0:	e000      	b.n	80119e4 <ip4_input+0x110>
            break;
 80119e2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80119e4:	4b4b      	ldr	r3, [pc, #300]	; (8011b14 <ip4_input+0x240>)
 80119e6:	691b      	ldr	r3, [r3, #16]
 80119e8:	6839      	ldr	r1, [r7, #0]
 80119ea:	4618      	mov	r0, r3
 80119ec:	f000 f96e 	bl	8011ccc <ip4_addr_isbroadcast_u32>
 80119f0:	4603      	mov	r3, r0
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d105      	bne.n	8011a02 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80119f6:	4b47      	ldr	r3, [pc, #284]	; (8011b14 <ip4_input+0x240>)
 80119f8:	691b      	ldr	r3, [r3, #16]
 80119fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80119fe:	2be0      	cmp	r3, #224	; 0xe0
 8011a00:	d104      	bne.n	8011a0c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f7f8 fecc 	bl	800a7a0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	e07e      	b.n	8011b0a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d104      	bne.n	8011a1c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f7f8 fec4 	bl	800a7a0 <pbuf_free>
    return ERR_OK;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	e076      	b.n	8011b0a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	88db      	ldrh	r3, [r3, #6]
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	461a      	mov	r2, r3
 8011a24:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011a28:	4013      	ands	r3, r2
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d00b      	beq.n	8011a46 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f000 fc92 	bl	8012358 <ip4_reass>
 8011a34:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d101      	bne.n	8011a40 <ip4_input+0x16c>
      return ERR_OK;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	e064      	b.n	8011b0a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011a46:	4a33      	ldr	r2, [pc, #204]	; (8011b14 <ip4_input+0x240>)
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011a4c:	4a31      	ldr	r2, [pc, #196]	; (8011b14 <ip4_input+0x240>)
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011a52:	4a30      	ldr	r2, [pc, #192]	; (8011b14 <ip4_input+0x240>)
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	781b      	ldrb	r3, [r3, #0]
 8011a5c:	f003 030f 	and.w	r3, r3, #15
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	009b      	lsls	r3, r3, #2
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	b29a      	uxth	r2, r3
 8011a68:	4b2a      	ldr	r3, [pc, #168]	; (8011b14 <ip4_input+0x240>)
 8011a6a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011a6c:	89fb      	ldrh	r3, [r7, #14]
 8011a6e:	4619      	mov	r1, r3
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f7f8 fe0f 	bl	800a694 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	7a5b      	ldrb	r3, [r3, #9]
 8011a7a:	2b11      	cmp	r3, #17
 8011a7c:	d006      	beq.n	8011a8c <ip4_input+0x1b8>
 8011a7e:	2b11      	cmp	r3, #17
 8011a80:	dc13      	bgt.n	8011aaa <ip4_input+0x1d6>
 8011a82:	2b01      	cmp	r3, #1
 8011a84:	d00c      	beq.n	8011aa0 <ip4_input+0x1cc>
 8011a86:	2b06      	cmp	r3, #6
 8011a88:	d005      	beq.n	8011a96 <ip4_input+0x1c2>
 8011a8a:	e00e      	b.n	8011aaa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011a8c:	6839      	ldr	r1, [r7, #0]
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f7fe fc68 	bl	8010364 <udp_input>
        break;
 8011a94:	e026      	b.n	8011ae4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011a96:	6839      	ldr	r1, [r7, #0]
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f7fa fcb5 	bl	800c408 <tcp_input>
        break;
 8011a9e:	e021      	b.n	8011ae4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011aa0:	6839      	ldr	r1, [r7, #0]
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f7ff fcee 	bl	8011484 <icmp_input>
        break;
 8011aa8:	e01c      	b.n	8011ae4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011aaa:	4b1a      	ldr	r3, [pc, #104]	; (8011b14 <ip4_input+0x240>)
 8011aac:	695b      	ldr	r3, [r3, #20]
 8011aae:	6939      	ldr	r1, [r7, #16]
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f000 f90b 	bl	8011ccc <ip4_addr_isbroadcast_u32>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d10f      	bne.n	8011adc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011abc:	4b15      	ldr	r3, [pc, #84]	; (8011b14 <ip4_input+0x240>)
 8011abe:	695b      	ldr	r3, [r3, #20]
 8011ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011ac4:	2be0      	cmp	r3, #224	; 0xe0
 8011ac6:	d009      	beq.n	8011adc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011ac8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011acc:	4619      	mov	r1, r3
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f7f8 fe53 	bl	800a77a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011ad4:	2102      	movs	r1, #2
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f7ff fdd8 	bl	801168c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f7f8 fe5f 	bl	800a7a0 <pbuf_free>
        break;
 8011ae2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011ae4:	4b0b      	ldr	r3, [pc, #44]	; (8011b14 <ip4_input+0x240>)
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011aea:	4b0a      	ldr	r3, [pc, #40]	; (8011b14 <ip4_input+0x240>)
 8011aec:	2200      	movs	r2, #0
 8011aee:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011af0:	4b08      	ldr	r3, [pc, #32]	; (8011b14 <ip4_input+0x240>)
 8011af2:	2200      	movs	r2, #0
 8011af4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011af6:	4b07      	ldr	r3, [pc, #28]	; (8011b14 <ip4_input+0x240>)
 8011af8:	2200      	movs	r2, #0
 8011afa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011afc:	4b05      	ldr	r3, [pc, #20]	; (8011b14 <ip4_input+0x240>)
 8011afe:	2200      	movs	r2, #0
 8011b00:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011b02:	4b04      	ldr	r3, [pc, #16]	; (8011b14 <ip4_input+0x240>)
 8011b04:	2200      	movs	r2, #0
 8011b06:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011b08:	2300      	movs	r3, #0
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3718      	adds	r7, #24
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop
 8011b14:	20009cd4 	.word	0x20009cd4
 8011b18:	2000d3d8 	.word	0x2000d3d8

08011b1c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b08a      	sub	sp, #40	; 0x28
 8011b20:	af04      	add	r7, sp, #16
 8011b22:	60f8      	str	r0, [r7, #12]
 8011b24:	60b9      	str	r1, [r7, #8]
 8011b26:	607a      	str	r2, [r7, #4]
 8011b28:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d009      	beq.n	8011b48 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d003      	beq.n	8011b42 <ip4_output_if+0x26>
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d102      	bne.n	8011b48 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b44:	3304      	adds	r3, #4
 8011b46:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011b48:	78fa      	ldrb	r2, [r7, #3]
 8011b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b4c:	9302      	str	r3, [sp, #8]
 8011b4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011b52:	9301      	str	r3, [sp, #4]
 8011b54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011b58:	9300      	str	r3, [sp, #0]
 8011b5a:	4613      	mov	r3, r2
 8011b5c:	687a      	ldr	r2, [r7, #4]
 8011b5e:	6979      	ldr	r1, [r7, #20]
 8011b60:	68f8      	ldr	r0, [r7, #12]
 8011b62:	f000 f805 	bl	8011b70 <ip4_output_if_src>
 8011b66:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3718      	adds	r7, #24
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b088      	sub	sp, #32
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	60f8      	str	r0, [r7, #12]
 8011b78:	60b9      	str	r1, [r7, #8]
 8011b7a:	607a      	str	r2, [r7, #4]
 8011b7c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	7b9b      	ldrb	r3, [r3, #14]
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	d006      	beq.n	8011b94 <ip4_output_if_src+0x24>
 8011b86:	4b4b      	ldr	r3, [pc, #300]	; (8011cb4 <ip4_output_if_src+0x144>)
 8011b88:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011b8c:	494a      	ldr	r1, [pc, #296]	; (8011cb8 <ip4_output_if_src+0x148>)
 8011b8e:	484b      	ldr	r0, [pc, #300]	; (8011cbc <ip4_output_if_src+0x14c>)
 8011b90:	f001 faf2 	bl	8013178 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d060      	beq.n	8011c5c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011b9a:	2314      	movs	r3, #20
 8011b9c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011b9e:	2114      	movs	r1, #20
 8011ba0:	68f8      	ldr	r0, [r7, #12]
 8011ba2:	f7f8 fd67 	bl	800a674 <pbuf_add_header>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d002      	beq.n	8011bb2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011bac:	f06f 0301 	mvn.w	r3, #1
 8011bb0:	e07c      	b.n	8011cac <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	685b      	ldr	r3, [r3, #4]
 8011bb6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	895b      	ldrh	r3, [r3, #10]
 8011bbc:	2b13      	cmp	r3, #19
 8011bbe:	d806      	bhi.n	8011bce <ip4_output_if_src+0x5e>
 8011bc0:	4b3c      	ldr	r3, [pc, #240]	; (8011cb4 <ip4_output_if_src+0x144>)
 8011bc2:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011bc6:	493e      	ldr	r1, [pc, #248]	; (8011cc0 <ip4_output_if_src+0x150>)
 8011bc8:	483c      	ldr	r0, [pc, #240]	; (8011cbc <ip4_output_if_src+0x14c>)
 8011bca:	f001 fad5 	bl	8013178 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011bce:	69fb      	ldr	r3, [r7, #28]
 8011bd0:	78fa      	ldrb	r2, [r7, #3]
 8011bd2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011bd4:	69fb      	ldr	r3, [r7, #28]
 8011bd6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011bda:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681a      	ldr	r2, [r3, #0]
 8011be0:	69fb      	ldr	r3, [r7, #28]
 8011be2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011be4:	8b7b      	ldrh	r3, [r7, #26]
 8011be6:	089b      	lsrs	r3, r3, #2
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	b2db      	uxtb	r3, r3
 8011bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bf0:	b2da      	uxtb	r2, r3
 8011bf2:	69fb      	ldr	r3, [r7, #28]
 8011bf4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011bf6:	69fb      	ldr	r3, [r7, #28]
 8011bf8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011bfc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	891b      	ldrh	r3, [r3, #8]
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7f7 fa84 	bl	8009110 <lwip_htons>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	69fb      	ldr	r3, [r7, #28]
 8011c0e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011c10:	69fb      	ldr	r3, [r7, #28]
 8011c12:	2200      	movs	r2, #0
 8011c14:	719a      	strb	r2, [r3, #6]
 8011c16:	2200      	movs	r2, #0
 8011c18:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011c1a:	4b2a      	ldr	r3, [pc, #168]	; (8011cc4 <ip4_output_if_src+0x154>)
 8011c1c:	881b      	ldrh	r3, [r3, #0]
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7f7 fa76 	bl	8009110 <lwip_htons>
 8011c24:	4603      	mov	r3, r0
 8011c26:	461a      	mov	r2, r3
 8011c28:	69fb      	ldr	r3, [r7, #28]
 8011c2a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011c2c:	4b25      	ldr	r3, [pc, #148]	; (8011cc4 <ip4_output_if_src+0x154>)
 8011c2e:	881b      	ldrh	r3, [r3, #0]
 8011c30:	3301      	adds	r3, #1
 8011c32:	b29a      	uxth	r2, r3
 8011c34:	4b23      	ldr	r3, [pc, #140]	; (8011cc4 <ip4_output_if_src+0x154>)
 8011c36:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d104      	bne.n	8011c48 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011c3e:	4b22      	ldr	r3, [pc, #136]	; (8011cc8 <ip4_output_if_src+0x158>)
 8011c40:	681a      	ldr	r2, [r3, #0]
 8011c42:	69fb      	ldr	r3, [r7, #28]
 8011c44:	60da      	str	r2, [r3, #12]
 8011c46:	e003      	b.n	8011c50 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	681a      	ldr	r2, [r3, #0]
 8011c4c:	69fb      	ldr	r3, [r7, #28]
 8011c4e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	2200      	movs	r2, #0
 8011c54:	729a      	strb	r2, [r3, #10]
 8011c56:	2200      	movs	r2, #0
 8011c58:	72da      	strb	r2, [r3, #11]
 8011c5a:	e00f      	b.n	8011c7c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	895b      	ldrh	r3, [r3, #10]
 8011c60:	2b13      	cmp	r3, #19
 8011c62:	d802      	bhi.n	8011c6a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011c64:	f06f 0301 	mvn.w	r3, #1
 8011c68:	e020      	b.n	8011cac <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	691b      	ldr	r3, [r3, #16]
 8011c74:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011c76:	f107 0314 	add.w	r3, r7, #20
 8011c7a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d00c      	beq.n	8011c9e <ip4_output_if_src+0x12e>
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	891a      	ldrh	r2, [r3, #8]
 8011c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	d906      	bls.n	8011c9e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011c90:	687a      	ldr	r2, [r7, #4]
 8011c92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011c94:	68f8      	ldr	r0, [r7, #12]
 8011c96:	f000 fd4d 	bl	8012734 <ip4_frag>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	e006      	b.n	8011cac <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca0:	695b      	ldr	r3, [r3, #20]
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	68f9      	ldr	r1, [r7, #12]
 8011ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ca8:	4798      	blx	r3
 8011caa:	4603      	mov	r3, r0
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3720      	adds	r7, #32
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}
 8011cb4:	08016728 	.word	0x08016728
 8011cb8:	0801675c 	.word	0x0801675c
 8011cbc:	08016768 	.word	0x08016768
 8011cc0:	08016790 	.word	0x08016790
 8011cc4:	20006976 	.word	0x20006976
 8011cc8:	08016bac 	.word	0x08016bac

08011ccc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b085      	sub	sp, #20
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
 8011cd4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ce0:	d002      	beq.n	8011ce8 <ip4_addr_isbroadcast_u32+0x1c>
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d101      	bne.n	8011cec <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011ce8:	2301      	movs	r3, #1
 8011cea:	e02a      	b.n	8011d42 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011cf2:	f003 0302 	and.w	r3, r3, #2
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d101      	bne.n	8011cfe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	e021      	b.n	8011d42 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	3304      	adds	r3, #4
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	687a      	ldr	r2, [r7, #4]
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d101      	bne.n	8011d0e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	e019      	b.n	8011d42 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011d0e:	68fa      	ldr	r2, [r7, #12]
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	3304      	adds	r3, #4
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	405a      	eors	r2, r3
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	3308      	adds	r3, #8
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	4013      	ands	r3, r2
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d10d      	bne.n	8011d40 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	3308      	adds	r3, #8
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	43da      	mvns	r2, r3
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	3308      	adds	r3, #8
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d101      	bne.n	8011d40 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	e000      	b.n	8011d42 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011d40:	2300      	movs	r3, #0
  }
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3714      	adds	r7, #20
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr
	...

08011d50 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b084      	sub	sp, #16
 8011d54:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011d56:	2300      	movs	r3, #0
 8011d58:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011d5a:	4b12      	ldr	r3, [pc, #72]	; (8011da4 <ip_reass_tmr+0x54>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011d60:	e018      	b.n	8011d94 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	7fdb      	ldrb	r3, [r3, #31]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d00b      	beq.n	8011d82 <ip_reass_tmr+0x32>
      r->timer--;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	7fdb      	ldrb	r3, [r3, #31]
 8011d6e:	3b01      	subs	r3, #1
 8011d70:	b2da      	uxtb	r2, r3
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	60fb      	str	r3, [r7, #12]
 8011d80:	e008      	b.n	8011d94 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011d8c:	68b9      	ldr	r1, [r7, #8]
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f000 f80a 	bl	8011da8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d1e3      	bne.n	8011d62 <ip_reass_tmr+0x12>
    }
  }
}
 8011d9a:	bf00      	nop
 8011d9c:	bf00      	nop
 8011d9e:	3710      	adds	r7, #16
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}
 8011da4:	20006978 	.word	0x20006978

08011da8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b088      	sub	sp, #32
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
 8011db0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011db2:	2300      	movs	r3, #0
 8011db4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011db6:	683a      	ldr	r2, [r7, #0]
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d105      	bne.n	8011dca <ip_reass_free_complete_datagram+0x22>
 8011dbe:	4b45      	ldr	r3, [pc, #276]	; (8011ed4 <ip_reass_free_complete_datagram+0x12c>)
 8011dc0:	22ab      	movs	r2, #171	; 0xab
 8011dc2:	4945      	ldr	r1, [pc, #276]	; (8011ed8 <ip_reass_free_complete_datagram+0x130>)
 8011dc4:	4845      	ldr	r0, [pc, #276]	; (8011edc <ip_reass_free_complete_datagram+0x134>)
 8011dc6:	f001 f9d7 	bl	8013178 <iprintf>
  if (prev != NULL) {
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00a      	beq.n	8011de6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	687a      	ldr	r2, [r7, #4]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d005      	beq.n	8011de6 <ip_reass_free_complete_datagram+0x3e>
 8011dda:	4b3e      	ldr	r3, [pc, #248]	; (8011ed4 <ip_reass_free_complete_datagram+0x12c>)
 8011ddc:	22ad      	movs	r2, #173	; 0xad
 8011dde:	4940      	ldr	r1, [pc, #256]	; (8011ee0 <ip_reass_free_complete_datagram+0x138>)
 8011de0:	483e      	ldr	r0, [pc, #248]	; (8011edc <ip_reass_free_complete_datagram+0x134>)
 8011de2:	f001 f9c9 	bl	8013178 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	889b      	ldrh	r3, [r3, #4]
 8011df2:	b29b      	uxth	r3, r3
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d12a      	bne.n	8011e4e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	685b      	ldr	r3, [r3, #4]
 8011dfc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	681a      	ldr	r2, [r3, #0]
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011e06:	69bb      	ldr	r3, [r7, #24]
 8011e08:	6858      	ldr	r0, [r3, #4]
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	3308      	adds	r3, #8
 8011e0e:	2214      	movs	r2, #20
 8011e10:	4619      	mov	r1, r3
 8011e12:	f001 f8f1 	bl	8012ff8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011e16:	2101      	movs	r1, #1
 8011e18:	69b8      	ldr	r0, [r7, #24]
 8011e1a:	f7ff fc47 	bl	80116ac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011e1e:	69b8      	ldr	r0, [r7, #24]
 8011e20:	f7f8 fd4c 	bl	800a8bc <pbuf_clen>
 8011e24:	4603      	mov	r3, r0
 8011e26:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011e28:	8bfa      	ldrh	r2, [r7, #30]
 8011e2a:	8a7b      	ldrh	r3, [r7, #18]
 8011e2c:	4413      	add	r3, r2
 8011e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e32:	db05      	blt.n	8011e40 <ip_reass_free_complete_datagram+0x98>
 8011e34:	4b27      	ldr	r3, [pc, #156]	; (8011ed4 <ip_reass_free_complete_datagram+0x12c>)
 8011e36:	22bc      	movs	r2, #188	; 0xbc
 8011e38:	492a      	ldr	r1, [pc, #168]	; (8011ee4 <ip_reass_free_complete_datagram+0x13c>)
 8011e3a:	4828      	ldr	r0, [pc, #160]	; (8011edc <ip_reass_free_complete_datagram+0x134>)
 8011e3c:	f001 f99c 	bl	8013178 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011e40:	8bfa      	ldrh	r2, [r7, #30]
 8011e42:	8a7b      	ldrh	r3, [r7, #18]
 8011e44:	4413      	add	r3, r2
 8011e46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011e48:	69b8      	ldr	r0, [r7, #24]
 8011e4a:	f7f8 fca9 	bl	800a7a0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011e54:	e01f      	b.n	8011e96 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011e56:	69bb      	ldr	r3, [r7, #24]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011e5c:	69bb      	ldr	r3, [r7, #24]
 8011e5e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011e66:	68f8      	ldr	r0, [r7, #12]
 8011e68:	f7f8 fd28 	bl	800a8bc <pbuf_clen>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011e70:	8bfa      	ldrh	r2, [r7, #30]
 8011e72:	8a7b      	ldrh	r3, [r7, #18]
 8011e74:	4413      	add	r3, r2
 8011e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e7a:	db05      	blt.n	8011e88 <ip_reass_free_complete_datagram+0xe0>
 8011e7c:	4b15      	ldr	r3, [pc, #84]	; (8011ed4 <ip_reass_free_complete_datagram+0x12c>)
 8011e7e:	22cc      	movs	r2, #204	; 0xcc
 8011e80:	4918      	ldr	r1, [pc, #96]	; (8011ee4 <ip_reass_free_complete_datagram+0x13c>)
 8011e82:	4816      	ldr	r0, [pc, #88]	; (8011edc <ip_reass_free_complete_datagram+0x134>)
 8011e84:	f001 f978 	bl	8013178 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011e88:	8bfa      	ldrh	r2, [r7, #30]
 8011e8a:	8a7b      	ldrh	r3, [r7, #18]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011e90:	68f8      	ldr	r0, [r7, #12]
 8011e92:	f7f8 fc85 	bl	800a7a0 <pbuf_free>
  while (p != NULL) {
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d1dc      	bne.n	8011e56 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011e9c:	6839      	ldr	r1, [r7, #0]
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f000 f8c2 	bl	8012028 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011ea4:	4b10      	ldr	r3, [pc, #64]	; (8011ee8 <ip_reass_free_complete_datagram+0x140>)
 8011ea6:	881b      	ldrh	r3, [r3, #0]
 8011ea8:	8bfa      	ldrh	r2, [r7, #30]
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d905      	bls.n	8011eba <ip_reass_free_complete_datagram+0x112>
 8011eae:	4b09      	ldr	r3, [pc, #36]	; (8011ed4 <ip_reass_free_complete_datagram+0x12c>)
 8011eb0:	22d2      	movs	r2, #210	; 0xd2
 8011eb2:	490e      	ldr	r1, [pc, #56]	; (8011eec <ip_reass_free_complete_datagram+0x144>)
 8011eb4:	4809      	ldr	r0, [pc, #36]	; (8011edc <ip_reass_free_complete_datagram+0x134>)
 8011eb6:	f001 f95f 	bl	8013178 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011eba:	4b0b      	ldr	r3, [pc, #44]	; (8011ee8 <ip_reass_free_complete_datagram+0x140>)
 8011ebc:	881a      	ldrh	r2, [r3, #0]
 8011ebe:	8bfb      	ldrh	r3, [r7, #30]
 8011ec0:	1ad3      	subs	r3, r2, r3
 8011ec2:	b29a      	uxth	r2, r3
 8011ec4:	4b08      	ldr	r3, [pc, #32]	; (8011ee8 <ip_reass_free_complete_datagram+0x140>)
 8011ec6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011ec8:	8bfb      	ldrh	r3, [r7, #30]
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3720      	adds	r7, #32
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	080167c0 	.word	0x080167c0
 8011ed8:	080167fc 	.word	0x080167fc
 8011edc:	08016808 	.word	0x08016808
 8011ee0:	08016830 	.word	0x08016830
 8011ee4:	08016844 	.word	0x08016844
 8011ee8:	2000697c 	.word	0x2000697c
 8011eec:	08016864 	.word	0x08016864

08011ef0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b08a      	sub	sp, #40	; 0x28
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
 8011ef8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011efa:	2300      	movs	r3, #0
 8011efc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011efe:	2300      	movs	r3, #0
 8011f00:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011f02:	2300      	movs	r3, #0
 8011f04:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011f06:	2300      	movs	r3, #0
 8011f08:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011f0e:	4b28      	ldr	r3, [pc, #160]	; (8011fb0 <ip_reass_remove_oldest_datagram+0xc0>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011f14:	e030      	b.n	8011f78 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f18:	695a      	ldr	r2, [r3, #20]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d10c      	bne.n	8011f3c <ip_reass_remove_oldest_datagram+0x4c>
 8011f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f24:	699a      	ldr	r2, [r3, #24]
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	691b      	ldr	r3, [r3, #16]
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d106      	bne.n	8011f3c <ip_reass_remove_oldest_datagram+0x4c>
 8011f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f30:	899a      	ldrh	r2, [r3, #12]
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	889b      	ldrh	r3, [r3, #4]
 8011f36:	b29b      	uxth	r3, r3
 8011f38:	429a      	cmp	r2, r3
 8011f3a:	d014      	beq.n	8011f66 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	3301      	adds	r3, #1
 8011f40:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011f42:	6a3b      	ldr	r3, [r7, #32]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d104      	bne.n	8011f52 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011f4c:	69fb      	ldr	r3, [r7, #28]
 8011f4e:	61bb      	str	r3, [r7, #24]
 8011f50:	e009      	b.n	8011f66 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f54:	7fda      	ldrb	r2, [r3, #31]
 8011f56:	6a3b      	ldr	r3, [r7, #32]
 8011f58:	7fdb      	ldrb	r3, [r3, #31]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d803      	bhi.n	8011f66 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f60:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d001      	beq.n	8011f72 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f70:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d1cb      	bne.n	8011f16 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011f7e:	6a3b      	ldr	r3, [r7, #32]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d008      	beq.n	8011f96 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011f84:	69b9      	ldr	r1, [r7, #24]
 8011f86:	6a38      	ldr	r0, [r7, #32]
 8011f88:	f7ff ff0e 	bl	8011da8 <ip_reass_free_complete_datagram>
 8011f8c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011f8e:	697a      	ldr	r2, [r7, #20]
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	4413      	add	r3, r2
 8011f94:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011f96:	697a      	ldr	r2, [r7, #20]
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	da02      	bge.n	8011fa4 <ip_reass_remove_oldest_datagram+0xb4>
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	2b01      	cmp	r3, #1
 8011fa2:	dcac      	bgt.n	8011efe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011fa4:	697b      	ldr	r3, [r7, #20]
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3728      	adds	r7, #40	; 0x28
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
 8011fae:	bf00      	nop
 8011fb0:	20006978 	.word	0x20006978

08011fb4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b084      	sub	sp, #16
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
 8011fbc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011fbe:	2004      	movs	r0, #4
 8011fc0:	f7f7 fd5c 	bl	8009a7c <memp_malloc>
 8011fc4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d110      	bne.n	8011fee <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011fcc:	6839      	ldr	r1, [r7, #0]
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f7ff ff8e 	bl	8011ef0 <ip_reass_remove_oldest_datagram>
 8011fd4:	4602      	mov	r2, r0
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	4293      	cmp	r3, r2
 8011fda:	dc03      	bgt.n	8011fe4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011fdc:	2004      	movs	r0, #4
 8011fde:	f7f7 fd4d 	bl	8009a7c <memp_malloc>
 8011fe2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d101      	bne.n	8011fee <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011fea:	2300      	movs	r3, #0
 8011fec:	e016      	b.n	801201c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011fee:	2220      	movs	r2, #32
 8011ff0:	2100      	movs	r1, #0
 8011ff2:	68f8      	ldr	r0, [r7, #12]
 8011ff4:	f001 f80e 	bl	8013014 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	220f      	movs	r2, #15
 8011ffc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011ffe:	4b09      	ldr	r3, [pc, #36]	; (8012024 <ip_reass_enqueue_new_datagram+0x70>)
 8012000:	681a      	ldr	r2, [r3, #0]
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012006:	4a07      	ldr	r2, [pc, #28]	; (8012024 <ip_reass_enqueue_new_datagram+0x70>)
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	3308      	adds	r3, #8
 8012010:	2214      	movs	r2, #20
 8012012:	6879      	ldr	r1, [r7, #4]
 8012014:	4618      	mov	r0, r3
 8012016:	f000 ffef 	bl	8012ff8 <memcpy>
  return ipr;
 801201a:	68fb      	ldr	r3, [r7, #12]
}
 801201c:	4618      	mov	r0, r3
 801201e:	3710      	adds	r7, #16
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	20006978 	.word	0x20006978

08012028 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b082      	sub	sp, #8
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012032:	4b10      	ldr	r3, [pc, #64]	; (8012074 <ip_reass_dequeue_datagram+0x4c>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	429a      	cmp	r2, r3
 801203a:	d104      	bne.n	8012046 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	4a0c      	ldr	r2, [pc, #48]	; (8012074 <ip_reass_dequeue_datagram+0x4c>)
 8012042:	6013      	str	r3, [r2, #0]
 8012044:	e00d      	b.n	8012062 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d106      	bne.n	801205a <ip_reass_dequeue_datagram+0x32>
 801204c:	4b0a      	ldr	r3, [pc, #40]	; (8012078 <ip_reass_dequeue_datagram+0x50>)
 801204e:	f240 1245 	movw	r2, #325	; 0x145
 8012052:	490a      	ldr	r1, [pc, #40]	; (801207c <ip_reass_dequeue_datagram+0x54>)
 8012054:	480a      	ldr	r0, [pc, #40]	; (8012080 <ip_reass_dequeue_datagram+0x58>)
 8012056:	f001 f88f 	bl	8013178 <iprintf>
    prev->next = ipr->next;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681a      	ldr	r2, [r3, #0]
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012062:	6879      	ldr	r1, [r7, #4]
 8012064:	2004      	movs	r0, #4
 8012066:	f7f7 fd5b 	bl	8009b20 <memp_free>
}
 801206a:	bf00      	nop
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}
 8012072:	bf00      	nop
 8012074:	20006978 	.word	0x20006978
 8012078:	080167c0 	.word	0x080167c0
 801207c:	08016888 	.word	0x08016888
 8012080:	08016808 	.word	0x08016808

08012084 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b08c      	sub	sp, #48	; 0x30
 8012088:	af00      	add	r7, sp, #0
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	60b9      	str	r1, [r7, #8]
 801208e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012090:	2300      	movs	r3, #0
 8012092:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012094:	2301      	movs	r3, #1
 8012096:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012098:	68bb      	ldr	r3, [r7, #8]
 801209a:	685b      	ldr	r3, [r3, #4]
 801209c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801209e:	69fb      	ldr	r3, [r7, #28]
 80120a0:	885b      	ldrh	r3, [r3, #2]
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7f7 f833 	bl	8009110 <lwip_htons>
 80120aa:	4603      	mov	r3, r0
 80120ac:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80120ae:	69fb      	ldr	r3, [r7, #28]
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	f003 030f 	and.w	r3, r3, #15
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	009b      	lsls	r3, r3, #2
 80120ba:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80120bc:	7e7b      	ldrb	r3, [r7, #25]
 80120be:	b29b      	uxth	r3, r3
 80120c0:	8b7a      	ldrh	r2, [r7, #26]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d202      	bcs.n	80120cc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80120c6:	f04f 33ff 	mov.w	r3, #4294967295
 80120ca:	e135      	b.n	8012338 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80120cc:	7e7b      	ldrb	r3, [r7, #25]
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	8b7a      	ldrh	r2, [r7, #26]
 80120d2:	1ad3      	subs	r3, r2, r3
 80120d4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	88db      	ldrh	r3, [r3, #6]
 80120da:	b29b      	uxth	r3, r3
 80120dc:	4618      	mov	r0, r3
 80120de:	f7f7 f817 	bl	8009110 <lwip_htons>
 80120e2:	4603      	mov	r3, r0
 80120e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80120e8:	b29b      	uxth	r3, r3
 80120ea:	00db      	lsls	r3, r3, #3
 80120ec:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80120f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f6:	2200      	movs	r2, #0
 80120f8:	701a      	strb	r2, [r3, #0]
 80120fa:	2200      	movs	r2, #0
 80120fc:	705a      	strb	r2, [r3, #1]
 80120fe:	2200      	movs	r2, #0
 8012100:	709a      	strb	r2, [r3, #2]
 8012102:	2200      	movs	r2, #0
 8012104:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012108:	8afa      	ldrh	r2, [r7, #22]
 801210a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801210c:	8afa      	ldrh	r2, [r7, #22]
 801210e:	8b7b      	ldrh	r3, [r7, #26]
 8012110:	4413      	add	r3, r2
 8012112:	b29a      	uxth	r2, r3
 8012114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012116:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801211a:	88db      	ldrh	r3, [r3, #6]
 801211c:	b29b      	uxth	r3, r3
 801211e:	8afa      	ldrh	r2, [r7, #22]
 8012120:	429a      	cmp	r2, r3
 8012122:	d902      	bls.n	801212a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012124:	f04f 33ff 	mov.w	r3, #4294967295
 8012128:	e106      	b.n	8012338 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	685b      	ldr	r3, [r3, #4]
 801212e:	627b      	str	r3, [r7, #36]	; 0x24
 8012130:	e068      	b.n	8012204 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012134:	685b      	ldr	r3, [r3, #4]
 8012136:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801213a:	889b      	ldrh	r3, [r3, #4]
 801213c:	b29a      	uxth	r2, r3
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	889b      	ldrh	r3, [r3, #4]
 8012142:	b29b      	uxth	r3, r3
 8012144:	429a      	cmp	r2, r3
 8012146:	d235      	bcs.n	80121b4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801214c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012150:	2b00      	cmp	r3, #0
 8012152:	d020      	beq.n	8012196 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012156:	889b      	ldrh	r3, [r3, #4]
 8012158:	b29a      	uxth	r2, r3
 801215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215c:	88db      	ldrh	r3, [r3, #6]
 801215e:	b29b      	uxth	r3, r3
 8012160:	429a      	cmp	r2, r3
 8012162:	d307      	bcc.n	8012174 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012166:	88db      	ldrh	r3, [r3, #6]
 8012168:	b29a      	uxth	r2, r3
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	889b      	ldrh	r3, [r3, #4]
 801216e:	b29b      	uxth	r3, r3
 8012170:	429a      	cmp	r2, r3
 8012172:	d902      	bls.n	801217a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012174:	f04f 33ff 	mov.w	r3, #4294967295
 8012178:	e0de      	b.n	8012338 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801217c:	68ba      	ldr	r2, [r7, #8]
 801217e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012182:	88db      	ldrh	r3, [r3, #6]
 8012184:	b29a      	uxth	r2, r3
 8012186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012188:	889b      	ldrh	r3, [r3, #4]
 801218a:	b29b      	uxth	r3, r3
 801218c:	429a      	cmp	r2, r3
 801218e:	d03d      	beq.n	801220c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012190:	2300      	movs	r3, #0
 8012192:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012194:	e03a      	b.n	801220c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012198:	88db      	ldrh	r3, [r3, #6]
 801219a:	b29a      	uxth	r2, r3
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	889b      	ldrh	r3, [r3, #4]
 80121a0:	b29b      	uxth	r3, r3
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d902      	bls.n	80121ac <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80121a6:	f04f 33ff 	mov.w	r3, #4294967295
 80121aa:	e0c5      	b.n	8012338 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	68ba      	ldr	r2, [r7, #8]
 80121b0:	605a      	str	r2, [r3, #4]
      break;
 80121b2:	e02b      	b.n	801220c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80121b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b6:	889b      	ldrh	r3, [r3, #4]
 80121b8:	b29a      	uxth	r2, r3
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	889b      	ldrh	r3, [r3, #4]
 80121be:	b29b      	uxth	r3, r3
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d102      	bne.n	80121ca <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80121c4:	f04f 33ff 	mov.w	r3, #4294967295
 80121c8:	e0b6      	b.n	8012338 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80121ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121cc:	889b      	ldrh	r3, [r3, #4]
 80121ce:	b29a      	uxth	r2, r3
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	88db      	ldrh	r3, [r3, #6]
 80121d4:	b29b      	uxth	r3, r3
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d202      	bcs.n	80121e0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80121da:	f04f 33ff 	mov.w	r3, #4294967295
 80121de:	e0ab      	b.n	8012338 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80121e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d009      	beq.n	80121fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80121e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e8:	88db      	ldrh	r3, [r3, #6]
 80121ea:	b29a      	uxth	r2, r3
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	889b      	ldrh	r3, [r3, #4]
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d001      	beq.n	80121fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80121f6:	2300      	movs	r3, #0
 80121f8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012206:	2b00      	cmp	r3, #0
 8012208:	d193      	bne.n	8012132 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801220a:	e000      	b.n	801220e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801220c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012210:	2b00      	cmp	r3, #0
 8012212:	d12d      	bne.n	8012270 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012216:	2b00      	cmp	r3, #0
 8012218:	d01c      	beq.n	8012254 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801221c:	88db      	ldrh	r3, [r3, #6]
 801221e:	b29a      	uxth	r2, r3
 8012220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012222:	889b      	ldrh	r3, [r3, #4]
 8012224:	b29b      	uxth	r3, r3
 8012226:	429a      	cmp	r2, r3
 8012228:	d906      	bls.n	8012238 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801222a:	4b45      	ldr	r3, [pc, #276]	; (8012340 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801222c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012230:	4944      	ldr	r1, [pc, #272]	; (8012344 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012232:	4845      	ldr	r0, [pc, #276]	; (8012348 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012234:	f000 ffa0 	bl	8013178 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223a:	68ba      	ldr	r2, [r7, #8]
 801223c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012240:	88db      	ldrh	r3, [r3, #6]
 8012242:	b29a      	uxth	r2, r3
 8012244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012246:	889b      	ldrh	r3, [r3, #4]
 8012248:	b29b      	uxth	r3, r3
 801224a:	429a      	cmp	r2, r3
 801224c:	d010      	beq.n	8012270 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801224e:	2300      	movs	r3, #0
 8012250:	623b      	str	r3, [r7, #32]
 8012252:	e00d      	b.n	8012270 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d006      	beq.n	801226a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801225c:	4b38      	ldr	r3, [pc, #224]	; (8012340 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801225e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012262:	493a      	ldr	r1, [pc, #232]	; (801234c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012264:	4838      	ldr	r0, [pc, #224]	; (8012348 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012266:	f000 ff87 	bl	8013178 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	68ba      	ldr	r2, [r7, #8]
 801226e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d105      	bne.n	8012282 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	7f9b      	ldrb	r3, [r3, #30]
 801227a:	f003 0301 	and.w	r3, r3, #1
 801227e:	2b00      	cmp	r3, #0
 8012280:	d059      	beq.n	8012336 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012282:	6a3b      	ldr	r3, [r7, #32]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d04f      	beq.n	8012328 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	685b      	ldr	r3, [r3, #4]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d006      	beq.n	801229e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	685b      	ldr	r3, [r3, #4]
 8012294:	685b      	ldr	r3, [r3, #4]
 8012296:	889b      	ldrh	r3, [r3, #4]
 8012298:	b29b      	uxth	r3, r3
 801229a:	2b00      	cmp	r3, #0
 801229c:	d002      	beq.n	80122a4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801229e:	2300      	movs	r3, #0
 80122a0:	623b      	str	r3, [r7, #32]
 80122a2:	e041      	b.n	8012328 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80122a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80122a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80122ae:	e012      	b.n	80122d6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80122b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b2:	685b      	ldr	r3, [r3, #4]
 80122b4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80122b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b8:	88db      	ldrh	r3, [r3, #6]
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122be:	889b      	ldrh	r3, [r3, #4]
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	429a      	cmp	r2, r3
 80122c4:	d002      	beq.n	80122cc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80122c6:	2300      	movs	r3, #0
 80122c8:	623b      	str	r3, [r7, #32]
            break;
 80122ca:	e007      	b.n	80122dc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80122cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ce:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80122d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80122d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d1e9      	bne.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80122dc:	6a3b      	ldr	r3, [r7, #32]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d022      	beq.n	8012328 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d106      	bne.n	80122f8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80122ea:	4b15      	ldr	r3, [pc, #84]	; (8012340 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80122ec:	f240 12df 	movw	r2, #479	; 0x1df
 80122f0:	4917      	ldr	r1, [pc, #92]	; (8012350 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80122f2:	4815      	ldr	r0, [pc, #84]	; (8012348 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80122f4:	f000 ff40 	bl	8013178 <iprintf>
          LWIP_ASSERT("sanity check",
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	685b      	ldr	r3, [r3, #4]
 80122fc:	685b      	ldr	r3, [r3, #4]
 80122fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012300:	429a      	cmp	r2, r3
 8012302:	d106      	bne.n	8012312 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012304:	4b0e      	ldr	r3, [pc, #56]	; (8012340 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012306:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801230a:	4911      	ldr	r1, [pc, #68]	; (8012350 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801230c:	480e      	ldr	r0, [pc, #56]	; (8012348 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801230e:	f000 ff33 	bl	8013178 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d006      	beq.n	8012328 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801231a:	4b09      	ldr	r3, [pc, #36]	; (8012340 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801231c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012320:	490c      	ldr	r1, [pc, #48]	; (8012354 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012322:	4809      	ldr	r0, [pc, #36]	; (8012348 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012324:	f000 ff28 	bl	8013178 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012328:	6a3b      	ldr	r3, [r7, #32]
 801232a:	2b00      	cmp	r3, #0
 801232c:	bf14      	ite	ne
 801232e:	2301      	movne	r3, #1
 8012330:	2300      	moveq	r3, #0
 8012332:	b2db      	uxtb	r3, r3
 8012334:	e000      	b.n	8012338 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012336:	2300      	movs	r3, #0
}
 8012338:	4618      	mov	r0, r3
 801233a:	3730      	adds	r7, #48	; 0x30
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}
 8012340:	080167c0 	.word	0x080167c0
 8012344:	080168a4 	.word	0x080168a4
 8012348:	08016808 	.word	0x08016808
 801234c:	080168c4 	.word	0x080168c4
 8012350:	080168fc 	.word	0x080168fc
 8012354:	0801690c 	.word	0x0801690c

08012358 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b08e      	sub	sp, #56	; 0x38
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	685b      	ldr	r3, [r3, #4]
 8012364:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	f003 030f 	and.w	r3, r3, #15
 801236e:	b2db      	uxtb	r3, r3
 8012370:	009b      	lsls	r3, r3, #2
 8012372:	b2db      	uxtb	r3, r3
 8012374:	2b14      	cmp	r3, #20
 8012376:	f040 8167 	bne.w	8012648 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801237c:	88db      	ldrh	r3, [r3, #6]
 801237e:	b29b      	uxth	r3, r3
 8012380:	4618      	mov	r0, r3
 8012382:	f7f6 fec5 	bl	8009110 <lwip_htons>
 8012386:	4603      	mov	r3, r0
 8012388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801238c:	b29b      	uxth	r3, r3
 801238e:	00db      	lsls	r3, r3, #3
 8012390:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012394:	885b      	ldrh	r3, [r3, #2]
 8012396:	b29b      	uxth	r3, r3
 8012398:	4618      	mov	r0, r3
 801239a:	f7f6 feb9 	bl	8009110 <lwip_htons>
 801239e:	4603      	mov	r3, r0
 80123a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80123a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a4:	781b      	ldrb	r3, [r3, #0]
 80123a6:	f003 030f 	and.w	r3, r3, #15
 80123aa:	b2db      	uxtb	r3, r3
 80123ac:	009b      	lsls	r3, r3, #2
 80123ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80123b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80123b6:	b29b      	uxth	r3, r3
 80123b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80123ba:	429a      	cmp	r2, r3
 80123bc:	f0c0 8146 	bcc.w	801264c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80123c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80123c4:	b29b      	uxth	r3, r3
 80123c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80123c8:	1ad3      	subs	r3, r2, r3
 80123ca:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f7f8 fa75 	bl	800a8bc <pbuf_clen>
 80123d2:	4603      	mov	r3, r0
 80123d4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80123d6:	4b9f      	ldr	r3, [pc, #636]	; (8012654 <ip4_reass+0x2fc>)
 80123d8:	881b      	ldrh	r3, [r3, #0]
 80123da:	461a      	mov	r2, r3
 80123dc:	8c3b      	ldrh	r3, [r7, #32]
 80123de:	4413      	add	r3, r2
 80123e0:	2b0a      	cmp	r3, #10
 80123e2:	dd10      	ble.n	8012406 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80123e4:	8c3b      	ldrh	r3, [r7, #32]
 80123e6:	4619      	mov	r1, r3
 80123e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123ea:	f7ff fd81 	bl	8011ef0 <ip_reass_remove_oldest_datagram>
 80123ee:	4603      	mov	r3, r0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	f000 812d 	beq.w	8012650 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80123f6:	4b97      	ldr	r3, [pc, #604]	; (8012654 <ip4_reass+0x2fc>)
 80123f8:	881b      	ldrh	r3, [r3, #0]
 80123fa:	461a      	mov	r2, r3
 80123fc:	8c3b      	ldrh	r3, [r7, #32]
 80123fe:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012400:	2b0a      	cmp	r3, #10
 8012402:	f300 8125 	bgt.w	8012650 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012406:	4b94      	ldr	r3, [pc, #592]	; (8012658 <ip4_reass+0x300>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	633b      	str	r3, [r7, #48]	; 0x30
 801240c:	e015      	b.n	801243a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012410:	695a      	ldr	r2, [r3, #20]
 8012412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012414:	68db      	ldr	r3, [r3, #12]
 8012416:	429a      	cmp	r2, r3
 8012418:	d10c      	bne.n	8012434 <ip4_reass+0xdc>
 801241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241c:	699a      	ldr	r2, [r3, #24]
 801241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012420:	691b      	ldr	r3, [r3, #16]
 8012422:	429a      	cmp	r2, r3
 8012424:	d106      	bne.n	8012434 <ip4_reass+0xdc>
 8012426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012428:	899a      	ldrh	r2, [r3, #12]
 801242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242c:	889b      	ldrh	r3, [r3, #4]
 801242e:	b29b      	uxth	r3, r3
 8012430:	429a      	cmp	r2, r3
 8012432:	d006      	beq.n	8012442 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	633b      	str	r3, [r7, #48]	; 0x30
 801243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243c:	2b00      	cmp	r3, #0
 801243e:	d1e6      	bne.n	801240e <ip4_reass+0xb6>
 8012440:	e000      	b.n	8012444 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012442:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012446:	2b00      	cmp	r3, #0
 8012448:	d109      	bne.n	801245e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801244a:	8c3b      	ldrh	r3, [r7, #32]
 801244c:	4619      	mov	r1, r3
 801244e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012450:	f7ff fdb0 	bl	8011fb4 <ip_reass_enqueue_new_datagram>
 8012454:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012458:	2b00      	cmp	r3, #0
 801245a:	d11c      	bne.n	8012496 <ip4_reass+0x13e>
      goto nullreturn;
 801245c:	e109      	b.n	8012672 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012460:	88db      	ldrh	r3, [r3, #6]
 8012462:	b29b      	uxth	r3, r3
 8012464:	4618      	mov	r0, r3
 8012466:	f7f6 fe53 	bl	8009110 <lwip_htons>
 801246a:	4603      	mov	r3, r0
 801246c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012470:	2b00      	cmp	r3, #0
 8012472:	d110      	bne.n	8012496 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012476:	89db      	ldrh	r3, [r3, #14]
 8012478:	4618      	mov	r0, r3
 801247a:	f7f6 fe49 	bl	8009110 <lwip_htons>
 801247e:	4603      	mov	r3, r0
 8012480:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012484:	2b00      	cmp	r3, #0
 8012486:	d006      	beq.n	8012496 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801248a:	3308      	adds	r3, #8
 801248c:	2214      	movs	r2, #20
 801248e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012490:	4618      	mov	r0, r3
 8012492:	f000 fdb1 	bl	8012ff8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012498:	88db      	ldrh	r3, [r3, #6]
 801249a:	b29b      	uxth	r3, r3
 801249c:	f003 0320 	and.w	r3, r3, #32
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	bf0c      	ite	eq
 80124a4:	2301      	moveq	r3, #1
 80124a6:	2300      	movne	r3, #0
 80124a8:	b2db      	uxtb	r3, r3
 80124aa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80124ac:	69fb      	ldr	r3, [r7, #28]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d00e      	beq.n	80124d0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80124b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80124b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124b6:	4413      	add	r3, r2
 80124b8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80124ba:	8b7a      	ldrh	r2, [r7, #26]
 80124bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80124be:	429a      	cmp	r2, r3
 80124c0:	f0c0 80a0 	bcc.w	8012604 <ip4_reass+0x2ac>
 80124c4:	8b7b      	ldrh	r3, [r7, #26]
 80124c6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80124ca:	4293      	cmp	r3, r2
 80124cc:	f200 809a 	bhi.w	8012604 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80124d0:	69fa      	ldr	r2, [r7, #28]
 80124d2:	6879      	ldr	r1, [r7, #4]
 80124d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124d6:	f7ff fdd5 	bl	8012084 <ip_reass_chain_frag_into_datagram_and_validate>
 80124da:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124e2:	f000 8091 	beq.w	8012608 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80124e6:	4b5b      	ldr	r3, [pc, #364]	; (8012654 <ip4_reass+0x2fc>)
 80124e8:	881a      	ldrh	r2, [r3, #0]
 80124ea:	8c3b      	ldrh	r3, [r7, #32]
 80124ec:	4413      	add	r3, r2
 80124ee:	b29a      	uxth	r2, r3
 80124f0:	4b58      	ldr	r3, [pc, #352]	; (8012654 <ip4_reass+0x2fc>)
 80124f2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80124f4:	69fb      	ldr	r3, [r7, #28]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d00d      	beq.n	8012516 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80124fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80124fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124fe:	4413      	add	r3, r2
 8012500:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012504:	8a7a      	ldrh	r2, [r7, #18]
 8012506:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801250a:	7f9b      	ldrb	r3, [r3, #30]
 801250c:	f043 0301 	orr.w	r3, r3, #1
 8012510:	b2da      	uxtb	r2, r3
 8012512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012514:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	2b01      	cmp	r3, #1
 801251a:	d171      	bne.n	8012600 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801251e:	8b9b      	ldrh	r3, [r3, #28]
 8012520:	3314      	adds	r3, #20
 8012522:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	685b      	ldr	r3, [r3, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012538:	3308      	adds	r3, #8
 801253a:	2214      	movs	r2, #20
 801253c:	4619      	mov	r1, r3
 801253e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012540:	f000 fd5a 	bl	8012ff8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012544:	8a3b      	ldrh	r3, [r7, #16]
 8012546:	4618      	mov	r0, r3
 8012548:	f7f6 fde2 	bl	8009110 <lwip_htons>
 801254c:	4603      	mov	r3, r0
 801254e:	461a      	mov	r2, r3
 8012550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012552:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012556:	2200      	movs	r2, #0
 8012558:	719a      	strb	r2, [r3, #6]
 801255a:	2200      	movs	r2, #0
 801255c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012560:	2200      	movs	r2, #0
 8012562:	729a      	strb	r2, [r3, #10]
 8012564:	2200      	movs	r2, #0
 8012566:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801256e:	e00d      	b.n	801258c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012576:	2114      	movs	r1, #20
 8012578:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801257a:	f7f8 f88b 	bl	800a694 <pbuf_remove_header>
      pbuf_cat(p, r);
 801257e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f7f8 f9db 	bl	800a93c <pbuf_cat>
      r = iprh->next_pbuf;
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801258c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801258e:	2b00      	cmp	r3, #0
 8012590:	d1ee      	bne.n	8012570 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012592:	4b31      	ldr	r3, [pc, #196]	; (8012658 <ip4_reass+0x300>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012598:	429a      	cmp	r2, r3
 801259a:	d102      	bne.n	80125a2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801259c:	2300      	movs	r3, #0
 801259e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125a0:	e010      	b.n	80125c4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80125a2:	4b2d      	ldr	r3, [pc, #180]	; (8012658 <ip4_reass+0x300>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125a8:	e007      	b.n	80125ba <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80125aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d006      	beq.n	80125c2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80125b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d1f4      	bne.n	80125aa <ip4_reass+0x252>
 80125c0:	e000      	b.n	80125c4 <ip4_reass+0x26c>
          break;
 80125c2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80125c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80125c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125c8:	f7ff fd2e 	bl	8012028 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f7f8 f975 	bl	800a8bc <pbuf_clen>
 80125d2:	4603      	mov	r3, r0
 80125d4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80125d6:	4b1f      	ldr	r3, [pc, #124]	; (8012654 <ip4_reass+0x2fc>)
 80125d8:	881b      	ldrh	r3, [r3, #0]
 80125da:	8c3a      	ldrh	r2, [r7, #32]
 80125dc:	429a      	cmp	r2, r3
 80125de:	d906      	bls.n	80125ee <ip4_reass+0x296>
 80125e0:	4b1e      	ldr	r3, [pc, #120]	; (801265c <ip4_reass+0x304>)
 80125e2:	f240 229b 	movw	r2, #667	; 0x29b
 80125e6:	491e      	ldr	r1, [pc, #120]	; (8012660 <ip4_reass+0x308>)
 80125e8:	481e      	ldr	r0, [pc, #120]	; (8012664 <ip4_reass+0x30c>)
 80125ea:	f000 fdc5 	bl	8013178 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80125ee:	4b19      	ldr	r3, [pc, #100]	; (8012654 <ip4_reass+0x2fc>)
 80125f0:	881a      	ldrh	r2, [r3, #0]
 80125f2:	8c3b      	ldrh	r3, [r7, #32]
 80125f4:	1ad3      	subs	r3, r2, r3
 80125f6:	b29a      	uxth	r2, r3
 80125f8:	4b16      	ldr	r3, [pc, #88]	; (8012654 <ip4_reass+0x2fc>)
 80125fa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	e03c      	b.n	801267a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012600:	2300      	movs	r3, #0
 8012602:	e03a      	b.n	801267a <ip4_reass+0x322>
      goto nullreturn_ipr;
 8012604:	bf00      	nop
 8012606:	e000      	b.n	801260a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012608:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801260c:	2b00      	cmp	r3, #0
 801260e:	d106      	bne.n	801261e <ip4_reass+0x2c6>
 8012610:	4b12      	ldr	r3, [pc, #72]	; (801265c <ip4_reass+0x304>)
 8012612:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012616:	4914      	ldr	r1, [pc, #80]	; (8012668 <ip4_reass+0x310>)
 8012618:	4812      	ldr	r0, [pc, #72]	; (8012664 <ip4_reass+0x30c>)
 801261a:	f000 fdad 	bl	8013178 <iprintf>
  if (ipr->p == NULL) {
 801261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012620:	685b      	ldr	r3, [r3, #4]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d124      	bne.n	8012670 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012626:	4b0c      	ldr	r3, [pc, #48]	; (8012658 <ip4_reass+0x300>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801262c:	429a      	cmp	r2, r3
 801262e:	d006      	beq.n	801263e <ip4_reass+0x2e6>
 8012630:	4b0a      	ldr	r3, [pc, #40]	; (801265c <ip4_reass+0x304>)
 8012632:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012636:	490d      	ldr	r1, [pc, #52]	; (801266c <ip4_reass+0x314>)
 8012638:	480a      	ldr	r0, [pc, #40]	; (8012664 <ip4_reass+0x30c>)
 801263a:	f000 fd9d 	bl	8013178 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801263e:	2100      	movs	r1, #0
 8012640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012642:	f7ff fcf1 	bl	8012028 <ip_reass_dequeue_datagram>
 8012646:	e014      	b.n	8012672 <ip4_reass+0x31a>
    goto nullreturn;
 8012648:	bf00      	nop
 801264a:	e012      	b.n	8012672 <ip4_reass+0x31a>
    goto nullreturn;
 801264c:	bf00      	nop
 801264e:	e010      	b.n	8012672 <ip4_reass+0x31a>
      goto nullreturn;
 8012650:	bf00      	nop
 8012652:	e00e      	b.n	8012672 <ip4_reass+0x31a>
 8012654:	2000697c 	.word	0x2000697c
 8012658:	20006978 	.word	0x20006978
 801265c:	080167c0 	.word	0x080167c0
 8012660:	08016930 	.word	0x08016930
 8012664:	08016808 	.word	0x08016808
 8012668:	0801694c 	.word	0x0801694c
 801266c:	08016958 	.word	0x08016958
  }

nullreturn:
 8012670:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f7f8 f894 	bl	800a7a0 <pbuf_free>
  return NULL;
 8012678:	2300      	movs	r3, #0
}
 801267a:	4618      	mov	r0, r3
 801267c:	3738      	adds	r7, #56	; 0x38
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
 8012682:	bf00      	nop

08012684 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012688:	2005      	movs	r0, #5
 801268a:	f7f7 f9f7 	bl	8009a7c <memp_malloc>
 801268e:	4603      	mov	r3, r0
}
 8012690:	4618      	mov	r0, r3
 8012692:	bd80      	pop	{r7, pc}

08012694 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d106      	bne.n	80126b0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80126a2:	4b07      	ldr	r3, [pc, #28]	; (80126c0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80126a4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80126a8:	4906      	ldr	r1, [pc, #24]	; (80126c4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80126aa:	4807      	ldr	r0, [pc, #28]	; (80126c8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80126ac:	f000 fd64 	bl	8013178 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80126b0:	6879      	ldr	r1, [r7, #4]
 80126b2:	2005      	movs	r0, #5
 80126b4:	f7f7 fa34 	bl	8009b20 <memp_free>
}
 80126b8:	bf00      	nop
 80126ba:	3708      	adds	r7, #8
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}
 80126c0:	080167c0 	.word	0x080167c0
 80126c4:	08016978 	.word	0x08016978
 80126c8:	08016808 	.word	0x08016808

080126cc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b084      	sub	sp, #16
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d106      	bne.n	80126ec <ipfrag_free_pbuf_custom+0x20>
 80126de:	4b11      	ldr	r3, [pc, #68]	; (8012724 <ipfrag_free_pbuf_custom+0x58>)
 80126e0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80126e4:	4910      	ldr	r1, [pc, #64]	; (8012728 <ipfrag_free_pbuf_custom+0x5c>)
 80126e6:	4811      	ldr	r0, [pc, #68]	; (801272c <ipfrag_free_pbuf_custom+0x60>)
 80126e8:	f000 fd46 	bl	8013178 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80126ec:	68fa      	ldr	r2, [r7, #12]
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	429a      	cmp	r2, r3
 80126f2:	d006      	beq.n	8012702 <ipfrag_free_pbuf_custom+0x36>
 80126f4:	4b0b      	ldr	r3, [pc, #44]	; (8012724 <ipfrag_free_pbuf_custom+0x58>)
 80126f6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80126fa:	490d      	ldr	r1, [pc, #52]	; (8012730 <ipfrag_free_pbuf_custom+0x64>)
 80126fc:	480b      	ldr	r0, [pc, #44]	; (801272c <ipfrag_free_pbuf_custom+0x60>)
 80126fe:	f000 fd3b 	bl	8013178 <iprintf>
  if (pcr->original != NULL) {
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	695b      	ldr	r3, [r3, #20]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d004      	beq.n	8012714 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	695b      	ldr	r3, [r3, #20]
 801270e:	4618      	mov	r0, r3
 8012710:	f7f8 f846 	bl	800a7a0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012714:	68f8      	ldr	r0, [r7, #12]
 8012716:	f7ff ffbd 	bl	8012694 <ip_frag_free_pbuf_custom_ref>
}
 801271a:	bf00      	nop
 801271c:	3710      	adds	r7, #16
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
 8012722:	bf00      	nop
 8012724:	080167c0 	.word	0x080167c0
 8012728:	08016984 	.word	0x08016984
 801272c:	08016808 	.word	0x08016808
 8012730:	08016990 	.word	0x08016990

08012734 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b094      	sub	sp, #80	; 0x50
 8012738:	af02      	add	r7, sp, #8
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012740:	2300      	movs	r3, #0
 8012742:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801274a:	3b14      	subs	r3, #20
 801274c:	2b00      	cmp	r3, #0
 801274e:	da00      	bge.n	8012752 <ip4_frag+0x1e>
 8012750:	3307      	adds	r3, #7
 8012752:	10db      	asrs	r3, r3, #3
 8012754:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012756:	2314      	movs	r3, #20
 8012758:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012762:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	f003 030f 	and.w	r3, r3, #15
 801276c:	b2db      	uxtb	r3, r3
 801276e:	009b      	lsls	r3, r3, #2
 8012770:	b2db      	uxtb	r3, r3
 8012772:	2b14      	cmp	r3, #20
 8012774:	d002      	beq.n	801277c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012776:	f06f 0305 	mvn.w	r3, #5
 801277a:	e110      	b.n	801299e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	895b      	ldrh	r3, [r3, #10]
 8012780:	2b13      	cmp	r3, #19
 8012782:	d809      	bhi.n	8012798 <ip4_frag+0x64>
 8012784:	4b88      	ldr	r3, [pc, #544]	; (80129a8 <ip4_frag+0x274>)
 8012786:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801278a:	4988      	ldr	r1, [pc, #544]	; (80129ac <ip4_frag+0x278>)
 801278c:	4888      	ldr	r0, [pc, #544]	; (80129b0 <ip4_frag+0x27c>)
 801278e:	f000 fcf3 	bl	8013178 <iprintf>
 8012792:	f06f 0305 	mvn.w	r3, #5
 8012796:	e102      	b.n	801299e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279a:	88db      	ldrh	r3, [r3, #6]
 801279c:	b29b      	uxth	r3, r3
 801279e:	4618      	mov	r0, r3
 80127a0:	f7f6 fcb6 	bl	8009110 <lwip_htons>
 80127a4:	4603      	mov	r3, r0
 80127a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80127a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80127aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80127ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80127b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80127b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80127b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	891b      	ldrh	r3, [r3, #8]
 80127be:	3b14      	subs	r3, #20
 80127c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80127c4:	e0e1      	b.n	801298a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80127c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80127c8:	00db      	lsls	r3, r3, #3
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80127d0:	4293      	cmp	r3, r2
 80127d2:	bf28      	it	cs
 80127d4:	4613      	movcs	r3, r2
 80127d6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80127d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127dc:	2114      	movs	r1, #20
 80127de:	200e      	movs	r0, #14
 80127e0:	f7f7 fcfa 	bl	800a1d8 <pbuf_alloc>
 80127e4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80127e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	f000 80d5 	beq.w	8012998 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80127ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f0:	895b      	ldrh	r3, [r3, #10]
 80127f2:	2b13      	cmp	r3, #19
 80127f4:	d806      	bhi.n	8012804 <ip4_frag+0xd0>
 80127f6:	4b6c      	ldr	r3, [pc, #432]	; (80129a8 <ip4_frag+0x274>)
 80127f8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80127fc:	496d      	ldr	r1, [pc, #436]	; (80129b4 <ip4_frag+0x280>)
 80127fe:	486c      	ldr	r0, [pc, #432]	; (80129b0 <ip4_frag+0x27c>)
 8012800:	f000 fcba 	bl	8013178 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	2214      	movs	r2, #20
 801280a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801280c:	4618      	mov	r0, r3
 801280e:	f000 fbf3 	bl	8012ff8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012814:	685b      	ldr	r3, [r3, #4]
 8012816:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012818:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801281a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801281e:	e064      	b.n	80128ea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	895a      	ldrh	r2, [r3, #10]
 8012824:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012826:	1ad3      	subs	r3, r2, r3
 8012828:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	895b      	ldrh	r3, [r3, #10]
 801282e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012830:	429a      	cmp	r2, r3
 8012832:	d906      	bls.n	8012842 <ip4_frag+0x10e>
 8012834:	4b5c      	ldr	r3, [pc, #368]	; (80129a8 <ip4_frag+0x274>)
 8012836:	f240 322d 	movw	r2, #813	; 0x32d
 801283a:	495f      	ldr	r1, [pc, #380]	; (80129b8 <ip4_frag+0x284>)
 801283c:	485c      	ldr	r0, [pc, #368]	; (80129b0 <ip4_frag+0x27c>)
 801283e:	f000 fc9b 	bl	8013178 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012842:	8bfa      	ldrh	r2, [r7, #30]
 8012844:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012848:	4293      	cmp	r3, r2
 801284a:	bf28      	it	cs
 801284c:	4613      	movcs	r3, r2
 801284e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012852:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012856:	2b00      	cmp	r3, #0
 8012858:	d105      	bne.n	8012866 <ip4_frag+0x132>
        poff = 0;
 801285a:	2300      	movs	r3, #0
 801285c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	60fb      	str	r3, [r7, #12]
        continue;
 8012864:	e041      	b.n	80128ea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012866:	f7ff ff0d 	bl	8012684 <ip_frag_alloc_pbuf_custom_ref>
 801286a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801286c:	69bb      	ldr	r3, [r7, #24]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d103      	bne.n	801287a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012874:	f7f7 ff94 	bl	800a7a0 <pbuf_free>
        goto memerr;
 8012878:	e08f      	b.n	801299a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801287a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012880:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012882:	4413      	add	r3, r2
 8012884:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012888:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801288c:	9201      	str	r2, [sp, #4]
 801288e:	9300      	str	r3, [sp, #0]
 8012890:	4603      	mov	r3, r0
 8012892:	2241      	movs	r2, #65	; 0x41
 8012894:	2000      	movs	r0, #0
 8012896:	f7f7 fdc9 	bl	800a42c <pbuf_alloced_custom>
 801289a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d106      	bne.n	80128b0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80128a2:	69b8      	ldr	r0, [r7, #24]
 80128a4:	f7ff fef6 	bl	8012694 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80128a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128aa:	f7f7 ff79 	bl	800a7a0 <pbuf_free>
        goto memerr;
 80128ae:	e074      	b.n	801299a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80128b0:	68f8      	ldr	r0, [r7, #12]
 80128b2:	f7f8 f81b 	bl	800a8ec <pbuf_ref>
      pcr->original = p;
 80128b6:	69bb      	ldr	r3, [r7, #24]
 80128b8:	68fa      	ldr	r2, [r7, #12]
 80128ba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80128bc:	69bb      	ldr	r3, [r7, #24]
 80128be:	4a3f      	ldr	r2, [pc, #252]	; (80129bc <ip4_frag+0x288>)
 80128c0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80128c2:	6979      	ldr	r1, [r7, #20]
 80128c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128c6:	f7f8 f839 	bl	800a93c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80128ca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80128ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80128d2:	1ad3      	subs	r3, r2, r3
 80128d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80128d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d004      	beq.n	80128ea <ip4_frag+0x1b6>
        poff = 0;
 80128e0:	2300      	movs	r3, #0
 80128e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80128ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d196      	bne.n	8012820 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80128f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80128f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80128f8:	4413      	add	r3, r2
 80128fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012900:	f1a3 0213 	sub.w	r2, r3, #19
 8012904:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012908:	429a      	cmp	r2, r3
 801290a:	bfcc      	ite	gt
 801290c:	2301      	movgt	r3, #1
 801290e:	2300      	movle	r3, #0
 8012910:	b2db      	uxtb	r3, r3
 8012912:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012914:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801291c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801291e:	6a3b      	ldr	r3, [r7, #32]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d002      	beq.n	801292a <ip4_frag+0x1f6>
 8012924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012926:	2b00      	cmp	r3, #0
 8012928:	d003      	beq.n	8012932 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801292a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801292c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012930:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012932:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012934:	4618      	mov	r0, r3
 8012936:	f7f6 fbeb 	bl	8009110 <lwip_htons>
 801293a:	4603      	mov	r3, r0
 801293c:	461a      	mov	r2, r3
 801293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012940:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012942:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012944:	3314      	adds	r3, #20
 8012946:	b29b      	uxth	r3, r3
 8012948:	4618      	mov	r0, r3
 801294a:	f7f6 fbe1 	bl	8009110 <lwip_htons>
 801294e:	4603      	mov	r3, r0
 8012950:	461a      	mov	r2, r3
 8012952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012954:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012958:	2200      	movs	r2, #0
 801295a:	729a      	strb	r2, [r3, #10]
 801295c:	2200      	movs	r2, #0
 801295e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	695b      	ldr	r3, [r3, #20]
 8012964:	687a      	ldr	r2, [r7, #4]
 8012966:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012968:	68b8      	ldr	r0, [r7, #8]
 801296a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801296c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801296e:	f7f7 ff17 	bl	800a7a0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012972:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012976:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012978:	1ad3      	subs	r3, r2, r3
 801297a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801297e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012982:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012984:	4413      	add	r3, r2
 8012986:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801298a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801298e:	2b00      	cmp	r3, #0
 8012990:	f47f af19 	bne.w	80127c6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012994:	2300      	movs	r3, #0
 8012996:	e002      	b.n	801299e <ip4_frag+0x26a>
      goto memerr;
 8012998:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801299a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801299e:	4618      	mov	r0, r3
 80129a0:	3748      	adds	r7, #72	; 0x48
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
 80129a6:	bf00      	nop
 80129a8:	080167c0 	.word	0x080167c0
 80129ac:	0801699c 	.word	0x0801699c
 80129b0:	08016808 	.word	0x08016808
 80129b4:	080169b8 	.word	0x080169b8
 80129b8:	080169d8 	.word	0x080169d8
 80129bc:	080126cd 	.word	0x080126cd

080129c0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b086      	sub	sp, #24
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80129ca:	230e      	movs	r3, #14
 80129cc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	895b      	ldrh	r3, [r3, #10]
 80129d2:	2b0e      	cmp	r3, #14
 80129d4:	d96e      	bls.n	8012ab4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	7bdb      	ldrb	r3, [r3, #15]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d106      	bne.n	80129ec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80129e4:	3301      	adds	r3, #1
 80129e6:	b2da      	uxtb	r2, r3
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	685b      	ldr	r3, [r3, #4]
 80129f0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80129f2:	693b      	ldr	r3, [r7, #16]
 80129f4:	7b1a      	ldrb	r2, [r3, #12]
 80129f6:	7b5b      	ldrb	r3, [r3, #13]
 80129f8:	021b      	lsls	r3, r3, #8
 80129fa:	4313      	orrs	r3, r2
 80129fc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80129fe:	693b      	ldr	r3, [r7, #16]
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	f003 0301 	and.w	r3, r3, #1
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d023      	beq.n	8012a52 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	2b01      	cmp	r3, #1
 8012a10:	d10f      	bne.n	8012a32 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	785b      	ldrb	r3, [r3, #1]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d11b      	bne.n	8012a52 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012a1a:	693b      	ldr	r3, [r7, #16]
 8012a1c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012a1e:	2b5e      	cmp	r3, #94	; 0x5e
 8012a20:	d117      	bne.n	8012a52 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	7b5b      	ldrb	r3, [r3, #13]
 8012a26:	f043 0310 	orr.w	r3, r3, #16
 8012a2a:	b2da      	uxtb	r2, r3
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	735a      	strb	r2, [r3, #13]
 8012a30:	e00f      	b.n	8012a52 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	2206      	movs	r2, #6
 8012a36:	4928      	ldr	r1, [pc, #160]	; (8012ad8 <ethernet_input+0x118>)
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f000 facf 	bl	8012fdc <memcmp>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d106      	bne.n	8012a52 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	7b5b      	ldrb	r3, [r3, #13]
 8012a48:	f043 0308 	orr.w	r3, r3, #8
 8012a4c:	b2da      	uxtb	r2, r3
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012a52:	89fb      	ldrh	r3, [r7, #14]
 8012a54:	2b08      	cmp	r3, #8
 8012a56:	d003      	beq.n	8012a60 <ethernet_input+0xa0>
 8012a58:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012a5c:	d014      	beq.n	8012a88 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012a5e:	e032      	b.n	8012ac6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a66:	f003 0308 	and.w	r3, r3, #8
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d024      	beq.n	8012ab8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012a6e:	8afb      	ldrh	r3, [r7, #22]
 8012a70:	4619      	mov	r1, r3
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f7f7 fe0e 	bl	800a694 <pbuf_remove_header>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d11e      	bne.n	8012abc <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012a7e:	6839      	ldr	r1, [r7, #0]
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f7fe ff27 	bl	80118d4 <ip4_input>
      break;
 8012a86:	e013      	b.n	8012ab0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a8e:	f003 0308 	and.w	r3, r3, #8
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d014      	beq.n	8012ac0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012a96:	8afb      	ldrh	r3, [r7, #22]
 8012a98:	4619      	mov	r1, r3
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f7f7 fdfa 	bl	800a694 <pbuf_remove_header>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d10e      	bne.n	8012ac4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012aa6:	6839      	ldr	r1, [r7, #0]
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f7fe f8c7 	bl	8010c3c <etharp_input>
      break;
 8012aae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	e00c      	b.n	8012ace <ethernet_input+0x10e>
    goto free_and_return;
 8012ab4:	bf00      	nop
 8012ab6:	e006      	b.n	8012ac6 <ethernet_input+0x106>
        goto free_and_return;
 8012ab8:	bf00      	nop
 8012aba:	e004      	b.n	8012ac6 <ethernet_input+0x106>
        goto free_and_return;
 8012abc:	bf00      	nop
 8012abe:	e002      	b.n	8012ac6 <ethernet_input+0x106>
        goto free_and_return;
 8012ac0:	bf00      	nop
 8012ac2:	e000      	b.n	8012ac6 <ethernet_input+0x106>
        goto free_and_return;
 8012ac4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f7f7 fe6a 	bl	800a7a0 <pbuf_free>
  return ERR_OK;
 8012acc:	2300      	movs	r3, #0
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3718      	adds	r7, #24
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}
 8012ad6:	bf00      	nop
 8012ad8:	08016bb0 	.word	0x08016bb0

08012adc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b086      	sub	sp, #24
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	60f8      	str	r0, [r7, #12]
 8012ae4:	60b9      	str	r1, [r7, #8]
 8012ae6:	607a      	str	r2, [r7, #4]
 8012ae8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012aea:	8c3b      	ldrh	r3, [r7, #32]
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7f6 fb0f 	bl	8009110 <lwip_htons>
 8012af2:	4603      	mov	r3, r0
 8012af4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012af6:	210e      	movs	r1, #14
 8012af8:	68b8      	ldr	r0, [r7, #8]
 8012afa:	f7f7 fdbb 	bl	800a674 <pbuf_add_header>
 8012afe:	4603      	mov	r3, r0
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d125      	bne.n	8012b50 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	685b      	ldr	r3, [r3, #4]
 8012b08:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	8afa      	ldrh	r2, [r7, #22]
 8012b0e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012b10:	693b      	ldr	r3, [r7, #16]
 8012b12:	2206      	movs	r2, #6
 8012b14:	6839      	ldr	r1, [r7, #0]
 8012b16:	4618      	mov	r0, r3
 8012b18:	f000 fa6e 	bl	8012ff8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	3306      	adds	r3, #6
 8012b20:	2206      	movs	r2, #6
 8012b22:	6879      	ldr	r1, [r7, #4]
 8012b24:	4618      	mov	r0, r3
 8012b26:	f000 fa67 	bl	8012ff8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012b30:	2b06      	cmp	r3, #6
 8012b32:	d006      	beq.n	8012b42 <ethernet_output+0x66>
 8012b34:	4b0a      	ldr	r3, [pc, #40]	; (8012b60 <ethernet_output+0x84>)
 8012b36:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012b3a:	490a      	ldr	r1, [pc, #40]	; (8012b64 <ethernet_output+0x88>)
 8012b3c:	480a      	ldr	r0, [pc, #40]	; (8012b68 <ethernet_output+0x8c>)
 8012b3e:	f000 fb1b 	bl	8013178 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	699b      	ldr	r3, [r3, #24]
 8012b46:	68b9      	ldr	r1, [r7, #8]
 8012b48:	68f8      	ldr	r0, [r7, #12]
 8012b4a:	4798      	blx	r3
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	e002      	b.n	8012b56 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012b50:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012b52:	f06f 0301 	mvn.w	r3, #1
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3718      	adds	r7, #24
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	080169e8 	.word	0x080169e8
 8012b64:	08016a20 	.word	0x08016a20
 8012b68:	08016a54 	.word	0x08016a54

08012b6c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b086      	sub	sp, #24
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	60bb      	str	r3, [r7, #8]
 8012b7a:	2304      	movs	r3, #4
 8012b7c:	60fb      	str	r3, [r7, #12]
 8012b7e:	2300      	movs	r3, #0
 8012b80:	613b      	str	r3, [r7, #16]
 8012b82:	2300      	movs	r3, #0
 8012b84:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8012b86:	f107 0308 	add.w	r3, r7, #8
 8012b8a:	2100      	movs	r1, #0
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7f3 fbdf 	bl	8006350 <osMessageCreate>
 8012b92:	4602      	mov	r2, r0
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d102      	bne.n	8012ba6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8012ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ba4:	e000      	b.n	8012ba8 <sys_mbox_new+0x3c>

  return ERR_OK;
 8012ba6:	2300      	movs	r3, #0
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3718      	adds	r7, #24
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b084      	sub	sp, #16
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	6839      	ldr	r1, [r7, #0]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7f3 fbec 	bl	80063a0 <osMessagePut>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d102      	bne.n	8012bd4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	73fb      	strb	r3, [r7, #15]
 8012bd2:	e001      	b.n	8012bd8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8012bd4:	23ff      	movs	r3, #255	; 0xff
 8012bd6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3710      	adds	r7, #16
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b08c      	sub	sp, #48	; 0x30
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	61f8      	str	r0, [r7, #28]
 8012bec:	61b9      	str	r1, [r7, #24]
 8012bee:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8012bf0:	f7f3 f9eb 	bl	8005fca <osKernelSysTick>
 8012bf4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d017      	beq.n	8012c2c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	6819      	ldr	r1, [r3, #0]
 8012c00:	f107 0320 	add.w	r3, r7, #32
 8012c04:	697a      	ldr	r2, [r7, #20]
 8012c06:	4618      	mov	r0, r3
 8012c08:	f7f3 fc0a 	bl	8006420 <osMessageGet>

    if(event.status == osEventMessage)
 8012c0c:	6a3b      	ldr	r3, [r7, #32]
 8012c0e:	2b10      	cmp	r3, #16
 8012c10:	d109      	bne.n	8012c26 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8012c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c14:	461a      	mov	r2, r3
 8012c16:	69bb      	ldr	r3, [r7, #24]
 8012c18:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8012c1a:	f7f3 f9d6 	bl	8005fca <osKernelSysTick>
 8012c1e:	4602      	mov	r2, r0
 8012c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c22:	1ad3      	subs	r3, r2, r3
 8012c24:	e019      	b.n	8012c5a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012c26:	f04f 33ff 	mov.w	r3, #4294967295
 8012c2a:	e016      	b.n	8012c5a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	6819      	ldr	r1, [r3, #0]
 8012c30:	463b      	mov	r3, r7
 8012c32:	f04f 32ff 	mov.w	r2, #4294967295
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7f3 fbf2 	bl	8006420 <osMessageGet>
 8012c3c:	f107 0320 	add.w	r3, r7, #32
 8012c40:	463a      	mov	r2, r7
 8012c42:	ca07      	ldmia	r2, {r0, r1, r2}
 8012c44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8012c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4a:	461a      	mov	r2, r3
 8012c4c:	69bb      	ldr	r3, [r7, #24]
 8012c4e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8012c50:	f7f3 f9bb 	bl	8005fca <osKernelSysTick>
 8012c54:	4602      	mov	r2, r0
 8012c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c58:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3730      	adds	r7, #48	; 0x30
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}

08012c62 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8012c62:	b480      	push	{r7}
 8012c64:	b083      	sub	sp, #12
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d101      	bne.n	8012c76 <sys_mbox_valid+0x14>
    return 0;
 8012c72:	2300      	movs	r3, #0
 8012c74:	e000      	b.n	8012c78 <sys_mbox_valid+0x16>
  else
    return 1;
 8012c76:	2301      	movs	r3, #1
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	370c      	adds	r7, #12
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr

08012c84 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8012c88:	4803      	ldr	r0, [pc, #12]	; (8012c98 <sys_init+0x14>)
 8012c8a:	f7f3 fa0e 	bl	80060aa <osMutexCreate>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	4a02      	ldr	r2, [pc, #8]	; (8012c9c <sys_init+0x18>)
 8012c92:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8012c94:	bf00      	nop
 8012c96:	bd80      	pop	{r7, pc}
 8012c98:	08016bc0 	.word	0x08016bc0
 8012c9c:	2000d408 	.word	0x2000d408

08012ca0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b084      	sub	sp, #16
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8012ca8:	2300      	movs	r3, #0
 8012caa:	60bb      	str	r3, [r7, #8]
 8012cac:	2300      	movs	r3, #0
 8012cae:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8012cb0:	f107 0308 	add.w	r3, r7, #8
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7f3 f9f8 	bl	80060aa <osMutexCreate>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d102      	bne.n	8012cce <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8012cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8012ccc:	e000      	b.n	8012cd0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8012cce:	2300      	movs	r3, #0
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	3710      	adds	r7, #16
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}

08012cd8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b082      	sub	sp, #8
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f7f3 f9f7 	bl	80060dc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8012cee:	bf00      	nop
 8012cf0:	3708      	adds	r7, #8
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}

08012cf6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8012cf6:	b580      	push	{r7, lr}
 8012cf8:	b082      	sub	sp, #8
 8012cfa:	af00      	add	r7, sp, #0
 8012cfc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7f3 fa38 	bl	8006178 <osMutexRelease>
}
 8012d08:	bf00      	nop
 8012d0a:	3708      	adds	r7, #8
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b08c      	sub	sp, #48	; 0x30
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	60f8      	str	r0, [r7, #12]
 8012d18:	60b9      	str	r1, [r7, #8]
 8012d1a:	607a      	str	r2, [r7, #4]
 8012d1c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8012d1e:	f107 0314 	add.w	r3, r7, #20
 8012d22:	2200      	movs	r2, #0
 8012d24:	601a      	str	r2, [r3, #0]
 8012d26:	605a      	str	r2, [r3, #4]
 8012d28:	609a      	str	r2, [r3, #8]
 8012d2a:	60da      	str	r2, [r3, #12]
 8012d2c:	611a      	str	r2, [r3, #16]
 8012d2e:	615a      	str	r2, [r3, #20]
 8012d30:	619a      	str	r2, [r3, #24]
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	617b      	str	r3, [r7, #20]
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	61bb      	str	r3, [r7, #24]
 8012d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3c:	b21b      	sxth	r3, r3
 8012d3e:	83bb      	strh	r3, [r7, #28]
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8012d44:	f107 0314 	add.w	r3, r7, #20
 8012d48:	6879      	ldr	r1, [r7, #4]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7f3 f94d 	bl	8005fea <osThreadCreate>
 8012d50:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	3730      	adds	r7, #48	; 0x30
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
	...

08012d5c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8012d60:	4b04      	ldr	r3, [pc, #16]	; (8012d74 <sys_arch_protect+0x18>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	f04f 31ff 	mov.w	r1, #4294967295
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7f3 f9b7 	bl	80060dc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8012d6e:	2301      	movs	r3, #1
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	bd80      	pop	{r7, pc}
 8012d74:	2000d408 	.word	0x2000d408

08012d78 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b082      	sub	sp, #8
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8012d80:	4b04      	ldr	r3, [pc, #16]	; (8012d94 <sys_arch_unprotect+0x1c>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7f3 f9f7 	bl	8006178 <osMutexRelease>
}
 8012d8a:	bf00      	nop
 8012d8c:	3708      	adds	r7, #8
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
 8012d92:	bf00      	nop
 8012d94:	2000d408 	.word	0x2000d408

08012d98 <std>:
 8012d98:	2300      	movs	r3, #0
 8012d9a:	b510      	push	{r4, lr}
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8012da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012da6:	6083      	str	r3, [r0, #8]
 8012da8:	8181      	strh	r1, [r0, #12]
 8012daa:	6643      	str	r3, [r0, #100]	; 0x64
 8012dac:	81c2      	strh	r2, [r0, #14]
 8012dae:	6183      	str	r3, [r0, #24]
 8012db0:	4619      	mov	r1, r3
 8012db2:	2208      	movs	r2, #8
 8012db4:	305c      	adds	r0, #92	; 0x5c
 8012db6:	f000 f92d 	bl	8013014 <memset>
 8012dba:	4b05      	ldr	r3, [pc, #20]	; (8012dd0 <std+0x38>)
 8012dbc:	6263      	str	r3, [r4, #36]	; 0x24
 8012dbe:	4b05      	ldr	r3, [pc, #20]	; (8012dd4 <std+0x3c>)
 8012dc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8012dc2:	4b05      	ldr	r3, [pc, #20]	; (8012dd8 <std+0x40>)
 8012dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012dc6:	4b05      	ldr	r3, [pc, #20]	; (8012ddc <std+0x44>)
 8012dc8:	6224      	str	r4, [r4, #32]
 8012dca:	6323      	str	r3, [r4, #48]	; 0x30
 8012dcc:	bd10      	pop	{r4, pc}
 8012dce:	bf00      	nop
 8012dd0:	0801331d 	.word	0x0801331d
 8012dd4:	0801333f 	.word	0x0801333f
 8012dd8:	08013377 	.word	0x08013377
 8012ddc:	0801339b 	.word	0x0801339b

08012de0 <_cleanup_r>:
 8012de0:	4901      	ldr	r1, [pc, #4]	; (8012de8 <_cleanup_r+0x8>)
 8012de2:	f000 b8af 	b.w	8012f44 <_fwalk_reent>
 8012de6:	bf00      	nop
 8012de8:	08013531 	.word	0x08013531

08012dec <__sfmoreglue>:
 8012dec:	b570      	push	{r4, r5, r6, lr}
 8012dee:	1e4a      	subs	r2, r1, #1
 8012df0:	2568      	movs	r5, #104	; 0x68
 8012df2:	4355      	muls	r5, r2
 8012df4:	460e      	mov	r6, r1
 8012df6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012dfa:	f000 f963 	bl	80130c4 <_malloc_r>
 8012dfe:	4604      	mov	r4, r0
 8012e00:	b140      	cbz	r0, 8012e14 <__sfmoreglue+0x28>
 8012e02:	2100      	movs	r1, #0
 8012e04:	e9c0 1600 	strd	r1, r6, [r0]
 8012e08:	300c      	adds	r0, #12
 8012e0a:	60a0      	str	r0, [r4, #8]
 8012e0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012e10:	f000 f900 	bl	8013014 <memset>
 8012e14:	4620      	mov	r0, r4
 8012e16:	bd70      	pop	{r4, r5, r6, pc}

08012e18 <__sfp_lock_acquire>:
 8012e18:	4801      	ldr	r0, [pc, #4]	; (8012e20 <__sfp_lock_acquire+0x8>)
 8012e1a:	f7ee bc37 	b.w	800168c <__retarget_lock_acquire_recursive>
 8012e1e:	bf00      	nop
 8012e20:	2000036c 	.word	0x2000036c

08012e24 <__sfp_lock_release>:
 8012e24:	4801      	ldr	r0, [pc, #4]	; (8012e2c <__sfp_lock_release+0x8>)
 8012e26:	f7ee bc45 	b.w	80016b4 <__retarget_lock_release_recursive>
 8012e2a:	bf00      	nop
 8012e2c:	2000036c 	.word	0x2000036c

08012e30 <__sinit_lock_acquire>:
 8012e30:	4801      	ldr	r0, [pc, #4]	; (8012e38 <__sinit_lock_acquire+0x8>)
 8012e32:	f7ee bc2b 	b.w	800168c <__retarget_lock_acquire_recursive>
 8012e36:	bf00      	nop
 8012e38:	20000360 	.word	0x20000360

08012e3c <__sinit_lock_release>:
 8012e3c:	4801      	ldr	r0, [pc, #4]	; (8012e44 <__sinit_lock_release+0x8>)
 8012e3e:	f7ee bc39 	b.w	80016b4 <__retarget_lock_release_recursive>
 8012e42:	bf00      	nop
 8012e44:	20000360 	.word	0x20000360

08012e48 <__sinit>:
 8012e48:	b510      	push	{r4, lr}
 8012e4a:	4604      	mov	r4, r0
 8012e4c:	f7ff fff0 	bl	8012e30 <__sinit_lock_acquire>
 8012e50:	69a3      	ldr	r3, [r4, #24]
 8012e52:	b11b      	cbz	r3, 8012e5c <__sinit+0x14>
 8012e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e58:	f7ff bff0 	b.w	8012e3c <__sinit_lock_release>
 8012e5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012e60:	6523      	str	r3, [r4, #80]	; 0x50
 8012e62:	4b13      	ldr	r3, [pc, #76]	; (8012eb0 <__sinit+0x68>)
 8012e64:	4a13      	ldr	r2, [pc, #76]	; (8012eb4 <__sinit+0x6c>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	62a2      	str	r2, [r4, #40]	; 0x28
 8012e6a:	42a3      	cmp	r3, r4
 8012e6c:	bf04      	itt	eq
 8012e6e:	2301      	moveq	r3, #1
 8012e70:	61a3      	streq	r3, [r4, #24]
 8012e72:	4620      	mov	r0, r4
 8012e74:	f000 f820 	bl	8012eb8 <__sfp>
 8012e78:	6060      	str	r0, [r4, #4]
 8012e7a:	4620      	mov	r0, r4
 8012e7c:	f000 f81c 	bl	8012eb8 <__sfp>
 8012e80:	60a0      	str	r0, [r4, #8]
 8012e82:	4620      	mov	r0, r4
 8012e84:	f000 f818 	bl	8012eb8 <__sfp>
 8012e88:	2200      	movs	r2, #0
 8012e8a:	60e0      	str	r0, [r4, #12]
 8012e8c:	2104      	movs	r1, #4
 8012e8e:	6860      	ldr	r0, [r4, #4]
 8012e90:	f7ff ff82 	bl	8012d98 <std>
 8012e94:	68a0      	ldr	r0, [r4, #8]
 8012e96:	2201      	movs	r2, #1
 8012e98:	2109      	movs	r1, #9
 8012e9a:	f7ff ff7d 	bl	8012d98 <std>
 8012e9e:	68e0      	ldr	r0, [r4, #12]
 8012ea0:	2202      	movs	r2, #2
 8012ea2:	2112      	movs	r1, #18
 8012ea4:	f7ff ff78 	bl	8012d98 <std>
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	61a3      	str	r3, [r4, #24]
 8012eac:	e7d2      	b.n	8012e54 <__sinit+0xc>
 8012eae:	bf00      	nop
 8012eb0:	08016c28 	.word	0x08016c28
 8012eb4:	08012de1 	.word	0x08012de1

08012eb8 <__sfp>:
 8012eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eba:	4607      	mov	r7, r0
 8012ebc:	f7ff ffac 	bl	8012e18 <__sfp_lock_acquire>
 8012ec0:	4b1e      	ldr	r3, [pc, #120]	; (8012f3c <__sfp+0x84>)
 8012ec2:	681e      	ldr	r6, [r3, #0]
 8012ec4:	69b3      	ldr	r3, [r6, #24]
 8012ec6:	b913      	cbnz	r3, 8012ece <__sfp+0x16>
 8012ec8:	4630      	mov	r0, r6
 8012eca:	f7ff ffbd 	bl	8012e48 <__sinit>
 8012ece:	3648      	adds	r6, #72	; 0x48
 8012ed0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012ed4:	3b01      	subs	r3, #1
 8012ed6:	d503      	bpl.n	8012ee0 <__sfp+0x28>
 8012ed8:	6833      	ldr	r3, [r6, #0]
 8012eda:	b30b      	cbz	r3, 8012f20 <__sfp+0x68>
 8012edc:	6836      	ldr	r6, [r6, #0]
 8012ede:	e7f7      	b.n	8012ed0 <__sfp+0x18>
 8012ee0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012ee4:	b9d5      	cbnz	r5, 8012f1c <__sfp+0x64>
 8012ee6:	4b16      	ldr	r3, [pc, #88]	; (8012f40 <__sfp+0x88>)
 8012ee8:	60e3      	str	r3, [r4, #12]
 8012eea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012eee:	6665      	str	r5, [r4, #100]	; 0x64
 8012ef0:	f7ee fba6 	bl	8001640 <__retarget_lock_init_recursive>
 8012ef4:	f7ff ff96 	bl	8012e24 <__sfp_lock_release>
 8012ef8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012efc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012f00:	6025      	str	r5, [r4, #0]
 8012f02:	61a5      	str	r5, [r4, #24]
 8012f04:	2208      	movs	r2, #8
 8012f06:	4629      	mov	r1, r5
 8012f08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012f0c:	f000 f882 	bl	8013014 <memset>
 8012f10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012f14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012f18:	4620      	mov	r0, r4
 8012f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f1c:	3468      	adds	r4, #104	; 0x68
 8012f1e:	e7d9      	b.n	8012ed4 <__sfp+0x1c>
 8012f20:	2104      	movs	r1, #4
 8012f22:	4638      	mov	r0, r7
 8012f24:	f7ff ff62 	bl	8012dec <__sfmoreglue>
 8012f28:	4604      	mov	r4, r0
 8012f2a:	6030      	str	r0, [r6, #0]
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	d1d5      	bne.n	8012edc <__sfp+0x24>
 8012f30:	f7ff ff78 	bl	8012e24 <__sfp_lock_release>
 8012f34:	230c      	movs	r3, #12
 8012f36:	603b      	str	r3, [r7, #0]
 8012f38:	e7ee      	b.n	8012f18 <__sfp+0x60>
 8012f3a:	bf00      	nop
 8012f3c:	08016c28 	.word	0x08016c28
 8012f40:	ffff0001 	.word	0xffff0001

08012f44 <_fwalk_reent>:
 8012f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f48:	4606      	mov	r6, r0
 8012f4a:	4688      	mov	r8, r1
 8012f4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012f50:	2700      	movs	r7, #0
 8012f52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f56:	f1b9 0901 	subs.w	r9, r9, #1
 8012f5a:	d505      	bpl.n	8012f68 <_fwalk_reent+0x24>
 8012f5c:	6824      	ldr	r4, [r4, #0]
 8012f5e:	2c00      	cmp	r4, #0
 8012f60:	d1f7      	bne.n	8012f52 <_fwalk_reent+0xe>
 8012f62:	4638      	mov	r0, r7
 8012f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f68:	89ab      	ldrh	r3, [r5, #12]
 8012f6a:	2b01      	cmp	r3, #1
 8012f6c:	d907      	bls.n	8012f7e <_fwalk_reent+0x3a>
 8012f6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f72:	3301      	adds	r3, #1
 8012f74:	d003      	beq.n	8012f7e <_fwalk_reent+0x3a>
 8012f76:	4629      	mov	r1, r5
 8012f78:	4630      	mov	r0, r6
 8012f7a:	47c0      	blx	r8
 8012f7c:	4307      	orrs	r7, r0
 8012f7e:	3568      	adds	r5, #104	; 0x68
 8012f80:	e7e9      	b.n	8012f56 <_fwalk_reent+0x12>
	...

08012f84 <__libc_init_array>:
 8012f84:	b570      	push	{r4, r5, r6, lr}
 8012f86:	4d0d      	ldr	r5, [pc, #52]	; (8012fbc <__libc_init_array+0x38>)
 8012f88:	4c0d      	ldr	r4, [pc, #52]	; (8012fc0 <__libc_init_array+0x3c>)
 8012f8a:	1b64      	subs	r4, r4, r5
 8012f8c:	10a4      	asrs	r4, r4, #2
 8012f8e:	2600      	movs	r6, #0
 8012f90:	42a6      	cmp	r6, r4
 8012f92:	d109      	bne.n	8012fa8 <__libc_init_array+0x24>
 8012f94:	4d0b      	ldr	r5, [pc, #44]	; (8012fc4 <__libc_init_array+0x40>)
 8012f96:	4c0c      	ldr	r4, [pc, #48]	; (8012fc8 <__libc_init_array+0x44>)
 8012f98:	f000 ffc8 	bl	8013f2c <_init>
 8012f9c:	1b64      	subs	r4, r4, r5
 8012f9e:	10a4      	asrs	r4, r4, #2
 8012fa0:	2600      	movs	r6, #0
 8012fa2:	42a6      	cmp	r6, r4
 8012fa4:	d105      	bne.n	8012fb2 <__libc_init_array+0x2e>
 8012fa6:	bd70      	pop	{r4, r5, r6, pc}
 8012fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fac:	4798      	blx	r3
 8012fae:	3601      	adds	r6, #1
 8012fb0:	e7ee      	b.n	8012f90 <__libc_init_array+0xc>
 8012fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fb6:	4798      	blx	r3
 8012fb8:	3601      	adds	r6, #1
 8012fba:	e7f2      	b.n	8012fa2 <__libc_init_array+0x1e>
 8012fbc:	08016d1c 	.word	0x08016d1c
 8012fc0:	08016d1c 	.word	0x08016d1c
 8012fc4:	08016d1c 	.word	0x08016d1c
 8012fc8:	08016d20 	.word	0x08016d20

08012fcc <malloc>:
 8012fcc:	4b02      	ldr	r3, [pc, #8]	; (8012fd8 <malloc+0xc>)
 8012fce:	4601      	mov	r1, r0
 8012fd0:	6818      	ldr	r0, [r3, #0]
 8012fd2:	f000 b877 	b.w	80130c4 <_malloc_r>
 8012fd6:	bf00      	nop
 8012fd8:	2000001c 	.word	0x2000001c

08012fdc <memcmp>:
 8012fdc:	b530      	push	{r4, r5, lr}
 8012fde:	3901      	subs	r1, #1
 8012fe0:	2400      	movs	r4, #0
 8012fe2:	42a2      	cmp	r2, r4
 8012fe4:	d101      	bne.n	8012fea <memcmp+0xe>
 8012fe6:	2000      	movs	r0, #0
 8012fe8:	e005      	b.n	8012ff6 <memcmp+0x1a>
 8012fea:	5d03      	ldrb	r3, [r0, r4]
 8012fec:	3401      	adds	r4, #1
 8012fee:	5d0d      	ldrb	r5, [r1, r4]
 8012ff0:	42ab      	cmp	r3, r5
 8012ff2:	d0f6      	beq.n	8012fe2 <memcmp+0x6>
 8012ff4:	1b58      	subs	r0, r3, r5
 8012ff6:	bd30      	pop	{r4, r5, pc}

08012ff8 <memcpy>:
 8012ff8:	440a      	add	r2, r1
 8012ffa:	4291      	cmp	r1, r2
 8012ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8013000:	d100      	bne.n	8013004 <memcpy+0xc>
 8013002:	4770      	bx	lr
 8013004:	b510      	push	{r4, lr}
 8013006:	f811 4b01 	ldrb.w	r4, [r1], #1
 801300a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801300e:	4291      	cmp	r1, r2
 8013010:	d1f9      	bne.n	8013006 <memcpy+0xe>
 8013012:	bd10      	pop	{r4, pc}

08013014 <memset>:
 8013014:	4402      	add	r2, r0
 8013016:	4603      	mov	r3, r0
 8013018:	4293      	cmp	r3, r2
 801301a:	d100      	bne.n	801301e <memset+0xa>
 801301c:	4770      	bx	lr
 801301e:	f803 1b01 	strb.w	r1, [r3], #1
 8013022:	e7f9      	b.n	8013018 <memset+0x4>

08013024 <_free_r>:
 8013024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013026:	2900      	cmp	r1, #0
 8013028:	d048      	beq.n	80130bc <_free_r+0x98>
 801302a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801302e:	9001      	str	r0, [sp, #4]
 8013030:	2b00      	cmp	r3, #0
 8013032:	f1a1 0404 	sub.w	r4, r1, #4
 8013036:	bfb8      	it	lt
 8013038:	18e4      	addlt	r4, r4, r3
 801303a:	f000 fad9 	bl	80135f0 <__malloc_lock>
 801303e:	4a20      	ldr	r2, [pc, #128]	; (80130c0 <_free_r+0x9c>)
 8013040:	9801      	ldr	r0, [sp, #4]
 8013042:	6813      	ldr	r3, [r2, #0]
 8013044:	4615      	mov	r5, r2
 8013046:	b933      	cbnz	r3, 8013056 <_free_r+0x32>
 8013048:	6063      	str	r3, [r4, #4]
 801304a:	6014      	str	r4, [r2, #0]
 801304c:	b003      	add	sp, #12
 801304e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013052:	f000 bad3 	b.w	80135fc <__malloc_unlock>
 8013056:	42a3      	cmp	r3, r4
 8013058:	d90b      	bls.n	8013072 <_free_r+0x4e>
 801305a:	6821      	ldr	r1, [r4, #0]
 801305c:	1862      	adds	r2, r4, r1
 801305e:	4293      	cmp	r3, r2
 8013060:	bf04      	itt	eq
 8013062:	681a      	ldreq	r2, [r3, #0]
 8013064:	685b      	ldreq	r3, [r3, #4]
 8013066:	6063      	str	r3, [r4, #4]
 8013068:	bf04      	itt	eq
 801306a:	1852      	addeq	r2, r2, r1
 801306c:	6022      	streq	r2, [r4, #0]
 801306e:	602c      	str	r4, [r5, #0]
 8013070:	e7ec      	b.n	801304c <_free_r+0x28>
 8013072:	461a      	mov	r2, r3
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	b10b      	cbz	r3, 801307c <_free_r+0x58>
 8013078:	42a3      	cmp	r3, r4
 801307a:	d9fa      	bls.n	8013072 <_free_r+0x4e>
 801307c:	6811      	ldr	r1, [r2, #0]
 801307e:	1855      	adds	r5, r2, r1
 8013080:	42a5      	cmp	r5, r4
 8013082:	d10b      	bne.n	801309c <_free_r+0x78>
 8013084:	6824      	ldr	r4, [r4, #0]
 8013086:	4421      	add	r1, r4
 8013088:	1854      	adds	r4, r2, r1
 801308a:	42a3      	cmp	r3, r4
 801308c:	6011      	str	r1, [r2, #0]
 801308e:	d1dd      	bne.n	801304c <_free_r+0x28>
 8013090:	681c      	ldr	r4, [r3, #0]
 8013092:	685b      	ldr	r3, [r3, #4]
 8013094:	6053      	str	r3, [r2, #4]
 8013096:	4421      	add	r1, r4
 8013098:	6011      	str	r1, [r2, #0]
 801309a:	e7d7      	b.n	801304c <_free_r+0x28>
 801309c:	d902      	bls.n	80130a4 <_free_r+0x80>
 801309e:	230c      	movs	r3, #12
 80130a0:	6003      	str	r3, [r0, #0]
 80130a2:	e7d3      	b.n	801304c <_free_r+0x28>
 80130a4:	6825      	ldr	r5, [r4, #0]
 80130a6:	1961      	adds	r1, r4, r5
 80130a8:	428b      	cmp	r3, r1
 80130aa:	bf04      	itt	eq
 80130ac:	6819      	ldreq	r1, [r3, #0]
 80130ae:	685b      	ldreq	r3, [r3, #4]
 80130b0:	6063      	str	r3, [r4, #4]
 80130b2:	bf04      	itt	eq
 80130b4:	1949      	addeq	r1, r1, r5
 80130b6:	6021      	streq	r1, [r4, #0]
 80130b8:	6054      	str	r4, [r2, #4]
 80130ba:	e7c7      	b.n	801304c <_free_r+0x28>
 80130bc:	b003      	add	sp, #12
 80130be:	bd30      	pop	{r4, r5, pc}
 80130c0:	20006980 	.word	0x20006980

080130c4 <_malloc_r>:
 80130c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c6:	1ccd      	adds	r5, r1, #3
 80130c8:	f025 0503 	bic.w	r5, r5, #3
 80130cc:	3508      	adds	r5, #8
 80130ce:	2d0c      	cmp	r5, #12
 80130d0:	bf38      	it	cc
 80130d2:	250c      	movcc	r5, #12
 80130d4:	2d00      	cmp	r5, #0
 80130d6:	4606      	mov	r6, r0
 80130d8:	db01      	blt.n	80130de <_malloc_r+0x1a>
 80130da:	42a9      	cmp	r1, r5
 80130dc:	d903      	bls.n	80130e6 <_malloc_r+0x22>
 80130de:	230c      	movs	r3, #12
 80130e0:	6033      	str	r3, [r6, #0]
 80130e2:	2000      	movs	r0, #0
 80130e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130e6:	f000 fa83 	bl	80135f0 <__malloc_lock>
 80130ea:	4921      	ldr	r1, [pc, #132]	; (8013170 <_malloc_r+0xac>)
 80130ec:	680a      	ldr	r2, [r1, #0]
 80130ee:	4614      	mov	r4, r2
 80130f0:	b99c      	cbnz	r4, 801311a <_malloc_r+0x56>
 80130f2:	4f20      	ldr	r7, [pc, #128]	; (8013174 <_malloc_r+0xb0>)
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	b923      	cbnz	r3, 8013102 <_malloc_r+0x3e>
 80130f8:	4621      	mov	r1, r4
 80130fa:	4630      	mov	r0, r6
 80130fc:	f000 f8fe 	bl	80132fc <_sbrk_r>
 8013100:	6038      	str	r0, [r7, #0]
 8013102:	4629      	mov	r1, r5
 8013104:	4630      	mov	r0, r6
 8013106:	f000 f8f9 	bl	80132fc <_sbrk_r>
 801310a:	1c43      	adds	r3, r0, #1
 801310c:	d123      	bne.n	8013156 <_malloc_r+0x92>
 801310e:	230c      	movs	r3, #12
 8013110:	6033      	str	r3, [r6, #0]
 8013112:	4630      	mov	r0, r6
 8013114:	f000 fa72 	bl	80135fc <__malloc_unlock>
 8013118:	e7e3      	b.n	80130e2 <_malloc_r+0x1e>
 801311a:	6823      	ldr	r3, [r4, #0]
 801311c:	1b5b      	subs	r3, r3, r5
 801311e:	d417      	bmi.n	8013150 <_malloc_r+0x8c>
 8013120:	2b0b      	cmp	r3, #11
 8013122:	d903      	bls.n	801312c <_malloc_r+0x68>
 8013124:	6023      	str	r3, [r4, #0]
 8013126:	441c      	add	r4, r3
 8013128:	6025      	str	r5, [r4, #0]
 801312a:	e004      	b.n	8013136 <_malloc_r+0x72>
 801312c:	6863      	ldr	r3, [r4, #4]
 801312e:	42a2      	cmp	r2, r4
 8013130:	bf0c      	ite	eq
 8013132:	600b      	streq	r3, [r1, #0]
 8013134:	6053      	strne	r3, [r2, #4]
 8013136:	4630      	mov	r0, r6
 8013138:	f000 fa60 	bl	80135fc <__malloc_unlock>
 801313c:	f104 000b 	add.w	r0, r4, #11
 8013140:	1d23      	adds	r3, r4, #4
 8013142:	f020 0007 	bic.w	r0, r0, #7
 8013146:	1ac2      	subs	r2, r0, r3
 8013148:	d0cc      	beq.n	80130e4 <_malloc_r+0x20>
 801314a:	1a1b      	subs	r3, r3, r0
 801314c:	50a3      	str	r3, [r4, r2]
 801314e:	e7c9      	b.n	80130e4 <_malloc_r+0x20>
 8013150:	4622      	mov	r2, r4
 8013152:	6864      	ldr	r4, [r4, #4]
 8013154:	e7cc      	b.n	80130f0 <_malloc_r+0x2c>
 8013156:	1cc4      	adds	r4, r0, #3
 8013158:	f024 0403 	bic.w	r4, r4, #3
 801315c:	42a0      	cmp	r0, r4
 801315e:	d0e3      	beq.n	8013128 <_malloc_r+0x64>
 8013160:	1a21      	subs	r1, r4, r0
 8013162:	4630      	mov	r0, r6
 8013164:	f000 f8ca 	bl	80132fc <_sbrk_r>
 8013168:	3001      	adds	r0, #1
 801316a:	d1dd      	bne.n	8013128 <_malloc_r+0x64>
 801316c:	e7cf      	b.n	801310e <_malloc_r+0x4a>
 801316e:	bf00      	nop
 8013170:	20006980 	.word	0x20006980
 8013174:	20006984 	.word	0x20006984

08013178 <iprintf>:
 8013178:	b40f      	push	{r0, r1, r2, r3}
 801317a:	4b0a      	ldr	r3, [pc, #40]	; (80131a4 <iprintf+0x2c>)
 801317c:	b513      	push	{r0, r1, r4, lr}
 801317e:	681c      	ldr	r4, [r3, #0]
 8013180:	b124      	cbz	r4, 801318c <iprintf+0x14>
 8013182:	69a3      	ldr	r3, [r4, #24]
 8013184:	b913      	cbnz	r3, 801318c <iprintf+0x14>
 8013186:	4620      	mov	r0, r4
 8013188:	f7ff fe5e 	bl	8012e48 <__sinit>
 801318c:	ab05      	add	r3, sp, #20
 801318e:	9a04      	ldr	r2, [sp, #16]
 8013190:	68a1      	ldr	r1, [r4, #8]
 8013192:	9301      	str	r3, [sp, #4]
 8013194:	4620      	mov	r0, r4
 8013196:	f000 fa61 	bl	801365c <_vfiprintf_r>
 801319a:	b002      	add	sp, #8
 801319c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131a0:	b004      	add	sp, #16
 80131a2:	4770      	bx	lr
 80131a4:	2000001c 	.word	0x2000001c

080131a8 <rand>:
 80131a8:	4b17      	ldr	r3, [pc, #92]	; (8013208 <rand+0x60>)
 80131aa:	b510      	push	{r4, lr}
 80131ac:	681c      	ldr	r4, [r3, #0]
 80131ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80131b0:	b9b3      	cbnz	r3, 80131e0 <rand+0x38>
 80131b2:	2018      	movs	r0, #24
 80131b4:	f7ff ff0a 	bl	8012fcc <malloc>
 80131b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80131ba:	b928      	cbnz	r0, 80131c8 <rand+0x20>
 80131bc:	4602      	mov	r2, r0
 80131be:	4b13      	ldr	r3, [pc, #76]	; (801320c <rand+0x64>)
 80131c0:	4813      	ldr	r0, [pc, #76]	; (8013210 <rand+0x68>)
 80131c2:	214e      	movs	r1, #78	; 0x4e
 80131c4:	f000 f900 	bl	80133c8 <__assert_func>
 80131c8:	4a12      	ldr	r2, [pc, #72]	; (8013214 <rand+0x6c>)
 80131ca:	4b13      	ldr	r3, [pc, #76]	; (8013218 <rand+0x70>)
 80131cc:	e9c0 2300 	strd	r2, r3, [r0]
 80131d0:	4b12      	ldr	r3, [pc, #72]	; (801321c <rand+0x74>)
 80131d2:	6083      	str	r3, [r0, #8]
 80131d4:	230b      	movs	r3, #11
 80131d6:	8183      	strh	r3, [r0, #12]
 80131d8:	2201      	movs	r2, #1
 80131da:	2300      	movs	r3, #0
 80131dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80131e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80131e2:	480f      	ldr	r0, [pc, #60]	; (8013220 <rand+0x78>)
 80131e4:	690a      	ldr	r2, [r1, #16]
 80131e6:	694b      	ldr	r3, [r1, #20]
 80131e8:	4c0e      	ldr	r4, [pc, #56]	; (8013224 <rand+0x7c>)
 80131ea:	4350      	muls	r0, r2
 80131ec:	fb04 0003 	mla	r0, r4, r3, r0
 80131f0:	fba2 3404 	umull	r3, r4, r2, r4
 80131f4:	1c5a      	adds	r2, r3, #1
 80131f6:	4404      	add	r4, r0
 80131f8:	f144 0000 	adc.w	r0, r4, #0
 80131fc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8013200:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013204:	bd10      	pop	{r4, pc}
 8013206:	bf00      	nop
 8013208:	2000001c 	.word	0x2000001c
 801320c:	08016c2c 	.word	0x08016c2c
 8013210:	08016c43 	.word	0x08016c43
 8013214:	abcd330e 	.word	0xabcd330e
 8013218:	e66d1234 	.word	0xe66d1234
 801321c:	0005deec 	.word	0x0005deec
 8013220:	5851f42d 	.word	0x5851f42d
 8013224:	4c957f2d 	.word	0x4c957f2d

08013228 <cleanup_glue>:
 8013228:	b538      	push	{r3, r4, r5, lr}
 801322a:	460c      	mov	r4, r1
 801322c:	6809      	ldr	r1, [r1, #0]
 801322e:	4605      	mov	r5, r0
 8013230:	b109      	cbz	r1, 8013236 <cleanup_glue+0xe>
 8013232:	f7ff fff9 	bl	8013228 <cleanup_glue>
 8013236:	4621      	mov	r1, r4
 8013238:	4628      	mov	r0, r5
 801323a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801323e:	f7ff bef1 	b.w	8013024 <_free_r>
	...

08013244 <_reclaim_reent>:
 8013244:	4b2c      	ldr	r3, [pc, #176]	; (80132f8 <_reclaim_reent+0xb4>)
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	4283      	cmp	r3, r0
 801324a:	b570      	push	{r4, r5, r6, lr}
 801324c:	4604      	mov	r4, r0
 801324e:	d051      	beq.n	80132f4 <_reclaim_reent+0xb0>
 8013250:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013252:	b143      	cbz	r3, 8013266 <_reclaim_reent+0x22>
 8013254:	68db      	ldr	r3, [r3, #12]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d14a      	bne.n	80132f0 <_reclaim_reent+0xac>
 801325a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801325c:	6819      	ldr	r1, [r3, #0]
 801325e:	b111      	cbz	r1, 8013266 <_reclaim_reent+0x22>
 8013260:	4620      	mov	r0, r4
 8013262:	f7ff fedf 	bl	8013024 <_free_r>
 8013266:	6961      	ldr	r1, [r4, #20]
 8013268:	b111      	cbz	r1, 8013270 <_reclaim_reent+0x2c>
 801326a:	4620      	mov	r0, r4
 801326c:	f7ff feda 	bl	8013024 <_free_r>
 8013270:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013272:	b111      	cbz	r1, 801327a <_reclaim_reent+0x36>
 8013274:	4620      	mov	r0, r4
 8013276:	f7ff fed5 	bl	8013024 <_free_r>
 801327a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801327c:	b111      	cbz	r1, 8013284 <_reclaim_reent+0x40>
 801327e:	4620      	mov	r0, r4
 8013280:	f7ff fed0 	bl	8013024 <_free_r>
 8013284:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013286:	b111      	cbz	r1, 801328e <_reclaim_reent+0x4a>
 8013288:	4620      	mov	r0, r4
 801328a:	f7ff fecb 	bl	8013024 <_free_r>
 801328e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013290:	b111      	cbz	r1, 8013298 <_reclaim_reent+0x54>
 8013292:	4620      	mov	r0, r4
 8013294:	f7ff fec6 	bl	8013024 <_free_r>
 8013298:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801329a:	b111      	cbz	r1, 80132a2 <_reclaim_reent+0x5e>
 801329c:	4620      	mov	r0, r4
 801329e:	f7ff fec1 	bl	8013024 <_free_r>
 80132a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80132a4:	b111      	cbz	r1, 80132ac <_reclaim_reent+0x68>
 80132a6:	4620      	mov	r0, r4
 80132a8:	f7ff febc 	bl	8013024 <_free_r>
 80132ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132ae:	b111      	cbz	r1, 80132b6 <_reclaim_reent+0x72>
 80132b0:	4620      	mov	r0, r4
 80132b2:	f7ff feb7 	bl	8013024 <_free_r>
 80132b6:	69a3      	ldr	r3, [r4, #24]
 80132b8:	b1e3      	cbz	r3, 80132f4 <_reclaim_reent+0xb0>
 80132ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80132bc:	4620      	mov	r0, r4
 80132be:	4798      	blx	r3
 80132c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80132c2:	b1b9      	cbz	r1, 80132f4 <_reclaim_reent+0xb0>
 80132c4:	4620      	mov	r0, r4
 80132c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132ca:	f7ff bfad 	b.w	8013228 <cleanup_glue>
 80132ce:	5949      	ldr	r1, [r1, r5]
 80132d0:	b941      	cbnz	r1, 80132e4 <_reclaim_reent+0xa0>
 80132d2:	3504      	adds	r5, #4
 80132d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132d6:	2d80      	cmp	r5, #128	; 0x80
 80132d8:	68d9      	ldr	r1, [r3, #12]
 80132da:	d1f8      	bne.n	80132ce <_reclaim_reent+0x8a>
 80132dc:	4620      	mov	r0, r4
 80132de:	f7ff fea1 	bl	8013024 <_free_r>
 80132e2:	e7ba      	b.n	801325a <_reclaim_reent+0x16>
 80132e4:	680e      	ldr	r6, [r1, #0]
 80132e6:	4620      	mov	r0, r4
 80132e8:	f7ff fe9c 	bl	8013024 <_free_r>
 80132ec:	4631      	mov	r1, r6
 80132ee:	e7ef      	b.n	80132d0 <_reclaim_reent+0x8c>
 80132f0:	2500      	movs	r5, #0
 80132f2:	e7ef      	b.n	80132d4 <_reclaim_reent+0x90>
 80132f4:	bd70      	pop	{r4, r5, r6, pc}
 80132f6:	bf00      	nop
 80132f8:	2000001c 	.word	0x2000001c

080132fc <_sbrk_r>:
 80132fc:	b538      	push	{r3, r4, r5, lr}
 80132fe:	4d06      	ldr	r5, [pc, #24]	; (8013318 <_sbrk_r+0x1c>)
 8013300:	2300      	movs	r3, #0
 8013302:	4604      	mov	r4, r0
 8013304:	4608      	mov	r0, r1
 8013306:	602b      	str	r3, [r5, #0]
 8013308:	f7ee f882 	bl	8001410 <_sbrk>
 801330c:	1c43      	adds	r3, r0, #1
 801330e:	d102      	bne.n	8013316 <_sbrk_r+0x1a>
 8013310:	682b      	ldr	r3, [r5, #0]
 8013312:	b103      	cbz	r3, 8013316 <_sbrk_r+0x1a>
 8013314:	6023      	str	r3, [r4, #0]
 8013316:	bd38      	pop	{r3, r4, r5, pc}
 8013318:	2000d404 	.word	0x2000d404

0801331c <__sread>:
 801331c:	b510      	push	{r4, lr}
 801331e:	460c      	mov	r4, r1
 8013320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013324:	f000 fc5e 	bl	8013be4 <_read_r>
 8013328:	2800      	cmp	r0, #0
 801332a:	bfab      	itete	ge
 801332c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801332e:	89a3      	ldrhlt	r3, [r4, #12]
 8013330:	181b      	addge	r3, r3, r0
 8013332:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013336:	bfac      	ite	ge
 8013338:	6563      	strge	r3, [r4, #84]	; 0x54
 801333a:	81a3      	strhlt	r3, [r4, #12]
 801333c:	bd10      	pop	{r4, pc}

0801333e <__swrite>:
 801333e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013342:	461f      	mov	r7, r3
 8013344:	898b      	ldrh	r3, [r1, #12]
 8013346:	05db      	lsls	r3, r3, #23
 8013348:	4605      	mov	r5, r0
 801334a:	460c      	mov	r4, r1
 801334c:	4616      	mov	r6, r2
 801334e:	d505      	bpl.n	801335c <__swrite+0x1e>
 8013350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013354:	2302      	movs	r3, #2
 8013356:	2200      	movs	r2, #0
 8013358:	f000 f938 	bl	80135cc <_lseek_r>
 801335c:	89a3      	ldrh	r3, [r4, #12]
 801335e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013366:	81a3      	strh	r3, [r4, #12]
 8013368:	4632      	mov	r2, r6
 801336a:	463b      	mov	r3, r7
 801336c:	4628      	mov	r0, r5
 801336e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013372:	f000 b817 	b.w	80133a4 <_write_r>

08013376 <__sseek>:
 8013376:	b510      	push	{r4, lr}
 8013378:	460c      	mov	r4, r1
 801337a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801337e:	f000 f925 	bl	80135cc <_lseek_r>
 8013382:	1c43      	adds	r3, r0, #1
 8013384:	89a3      	ldrh	r3, [r4, #12]
 8013386:	bf15      	itete	ne
 8013388:	6560      	strne	r0, [r4, #84]	; 0x54
 801338a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801338e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013392:	81a3      	strheq	r3, [r4, #12]
 8013394:	bf18      	it	ne
 8013396:	81a3      	strhne	r3, [r4, #12]
 8013398:	bd10      	pop	{r4, pc}

0801339a <__sclose>:
 801339a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801339e:	f000 b831 	b.w	8013404 <_close_r>
	...

080133a4 <_write_r>:
 80133a4:	b538      	push	{r3, r4, r5, lr}
 80133a6:	4d07      	ldr	r5, [pc, #28]	; (80133c4 <_write_r+0x20>)
 80133a8:	4604      	mov	r4, r0
 80133aa:	4608      	mov	r0, r1
 80133ac:	4611      	mov	r1, r2
 80133ae:	2200      	movs	r2, #0
 80133b0:	602a      	str	r2, [r5, #0]
 80133b2:	461a      	mov	r2, r3
 80133b4:	f7ed ffdb 	bl	800136e <_write>
 80133b8:	1c43      	adds	r3, r0, #1
 80133ba:	d102      	bne.n	80133c2 <_write_r+0x1e>
 80133bc:	682b      	ldr	r3, [r5, #0]
 80133be:	b103      	cbz	r3, 80133c2 <_write_r+0x1e>
 80133c0:	6023      	str	r3, [r4, #0]
 80133c2:	bd38      	pop	{r3, r4, r5, pc}
 80133c4:	2000d404 	.word	0x2000d404

080133c8 <__assert_func>:
 80133c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80133ca:	4614      	mov	r4, r2
 80133cc:	461a      	mov	r2, r3
 80133ce:	4b09      	ldr	r3, [pc, #36]	; (80133f4 <__assert_func+0x2c>)
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	4605      	mov	r5, r0
 80133d4:	68d8      	ldr	r0, [r3, #12]
 80133d6:	b14c      	cbz	r4, 80133ec <__assert_func+0x24>
 80133d8:	4b07      	ldr	r3, [pc, #28]	; (80133f8 <__assert_func+0x30>)
 80133da:	9100      	str	r1, [sp, #0]
 80133dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80133e0:	4906      	ldr	r1, [pc, #24]	; (80133fc <__assert_func+0x34>)
 80133e2:	462b      	mov	r3, r5
 80133e4:	f000 f8e0 	bl	80135a8 <fiprintf>
 80133e8:	f000 fcce 	bl	8013d88 <abort>
 80133ec:	4b04      	ldr	r3, [pc, #16]	; (8013400 <__assert_func+0x38>)
 80133ee:	461c      	mov	r4, r3
 80133f0:	e7f3      	b.n	80133da <__assert_func+0x12>
 80133f2:	bf00      	nop
 80133f4:	2000001c 	.word	0x2000001c
 80133f8:	08016ca2 	.word	0x08016ca2
 80133fc:	08016caf 	.word	0x08016caf
 8013400:	08016cdd 	.word	0x08016cdd

08013404 <_close_r>:
 8013404:	b538      	push	{r3, r4, r5, lr}
 8013406:	4d06      	ldr	r5, [pc, #24]	; (8013420 <_close_r+0x1c>)
 8013408:	2300      	movs	r3, #0
 801340a:	4604      	mov	r4, r0
 801340c:	4608      	mov	r0, r1
 801340e:	602b      	str	r3, [r5, #0]
 8013410:	f7ed ffc9 	bl	80013a6 <_close>
 8013414:	1c43      	adds	r3, r0, #1
 8013416:	d102      	bne.n	801341e <_close_r+0x1a>
 8013418:	682b      	ldr	r3, [r5, #0]
 801341a:	b103      	cbz	r3, 801341e <_close_r+0x1a>
 801341c:	6023      	str	r3, [r4, #0]
 801341e:	bd38      	pop	{r3, r4, r5, pc}
 8013420:	2000d404 	.word	0x2000d404

08013424 <__sflush_r>:
 8013424:	898a      	ldrh	r2, [r1, #12]
 8013426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801342a:	4605      	mov	r5, r0
 801342c:	0710      	lsls	r0, r2, #28
 801342e:	460c      	mov	r4, r1
 8013430:	d458      	bmi.n	80134e4 <__sflush_r+0xc0>
 8013432:	684b      	ldr	r3, [r1, #4]
 8013434:	2b00      	cmp	r3, #0
 8013436:	dc05      	bgt.n	8013444 <__sflush_r+0x20>
 8013438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801343a:	2b00      	cmp	r3, #0
 801343c:	dc02      	bgt.n	8013444 <__sflush_r+0x20>
 801343e:	2000      	movs	r0, #0
 8013440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013446:	2e00      	cmp	r6, #0
 8013448:	d0f9      	beq.n	801343e <__sflush_r+0x1a>
 801344a:	2300      	movs	r3, #0
 801344c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013450:	682f      	ldr	r7, [r5, #0]
 8013452:	602b      	str	r3, [r5, #0]
 8013454:	d032      	beq.n	80134bc <__sflush_r+0x98>
 8013456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013458:	89a3      	ldrh	r3, [r4, #12]
 801345a:	075a      	lsls	r2, r3, #29
 801345c:	d505      	bpl.n	801346a <__sflush_r+0x46>
 801345e:	6863      	ldr	r3, [r4, #4]
 8013460:	1ac0      	subs	r0, r0, r3
 8013462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013464:	b10b      	cbz	r3, 801346a <__sflush_r+0x46>
 8013466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013468:	1ac0      	subs	r0, r0, r3
 801346a:	2300      	movs	r3, #0
 801346c:	4602      	mov	r2, r0
 801346e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013470:	6a21      	ldr	r1, [r4, #32]
 8013472:	4628      	mov	r0, r5
 8013474:	47b0      	blx	r6
 8013476:	1c43      	adds	r3, r0, #1
 8013478:	89a3      	ldrh	r3, [r4, #12]
 801347a:	d106      	bne.n	801348a <__sflush_r+0x66>
 801347c:	6829      	ldr	r1, [r5, #0]
 801347e:	291d      	cmp	r1, #29
 8013480:	d82c      	bhi.n	80134dc <__sflush_r+0xb8>
 8013482:	4a2a      	ldr	r2, [pc, #168]	; (801352c <__sflush_r+0x108>)
 8013484:	40ca      	lsrs	r2, r1
 8013486:	07d6      	lsls	r6, r2, #31
 8013488:	d528      	bpl.n	80134dc <__sflush_r+0xb8>
 801348a:	2200      	movs	r2, #0
 801348c:	6062      	str	r2, [r4, #4]
 801348e:	04d9      	lsls	r1, r3, #19
 8013490:	6922      	ldr	r2, [r4, #16]
 8013492:	6022      	str	r2, [r4, #0]
 8013494:	d504      	bpl.n	80134a0 <__sflush_r+0x7c>
 8013496:	1c42      	adds	r2, r0, #1
 8013498:	d101      	bne.n	801349e <__sflush_r+0x7a>
 801349a:	682b      	ldr	r3, [r5, #0]
 801349c:	b903      	cbnz	r3, 80134a0 <__sflush_r+0x7c>
 801349e:	6560      	str	r0, [r4, #84]	; 0x54
 80134a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80134a2:	602f      	str	r7, [r5, #0]
 80134a4:	2900      	cmp	r1, #0
 80134a6:	d0ca      	beq.n	801343e <__sflush_r+0x1a>
 80134a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80134ac:	4299      	cmp	r1, r3
 80134ae:	d002      	beq.n	80134b6 <__sflush_r+0x92>
 80134b0:	4628      	mov	r0, r5
 80134b2:	f7ff fdb7 	bl	8013024 <_free_r>
 80134b6:	2000      	movs	r0, #0
 80134b8:	6360      	str	r0, [r4, #52]	; 0x34
 80134ba:	e7c1      	b.n	8013440 <__sflush_r+0x1c>
 80134bc:	6a21      	ldr	r1, [r4, #32]
 80134be:	2301      	movs	r3, #1
 80134c0:	4628      	mov	r0, r5
 80134c2:	47b0      	blx	r6
 80134c4:	1c41      	adds	r1, r0, #1
 80134c6:	d1c7      	bne.n	8013458 <__sflush_r+0x34>
 80134c8:	682b      	ldr	r3, [r5, #0]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d0c4      	beq.n	8013458 <__sflush_r+0x34>
 80134ce:	2b1d      	cmp	r3, #29
 80134d0:	d001      	beq.n	80134d6 <__sflush_r+0xb2>
 80134d2:	2b16      	cmp	r3, #22
 80134d4:	d101      	bne.n	80134da <__sflush_r+0xb6>
 80134d6:	602f      	str	r7, [r5, #0]
 80134d8:	e7b1      	b.n	801343e <__sflush_r+0x1a>
 80134da:	89a3      	ldrh	r3, [r4, #12]
 80134dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134e0:	81a3      	strh	r3, [r4, #12]
 80134e2:	e7ad      	b.n	8013440 <__sflush_r+0x1c>
 80134e4:	690f      	ldr	r7, [r1, #16]
 80134e6:	2f00      	cmp	r7, #0
 80134e8:	d0a9      	beq.n	801343e <__sflush_r+0x1a>
 80134ea:	0793      	lsls	r3, r2, #30
 80134ec:	680e      	ldr	r6, [r1, #0]
 80134ee:	bf08      	it	eq
 80134f0:	694b      	ldreq	r3, [r1, #20]
 80134f2:	600f      	str	r7, [r1, #0]
 80134f4:	bf18      	it	ne
 80134f6:	2300      	movne	r3, #0
 80134f8:	eba6 0807 	sub.w	r8, r6, r7
 80134fc:	608b      	str	r3, [r1, #8]
 80134fe:	f1b8 0f00 	cmp.w	r8, #0
 8013502:	dd9c      	ble.n	801343e <__sflush_r+0x1a>
 8013504:	6a21      	ldr	r1, [r4, #32]
 8013506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013508:	4643      	mov	r3, r8
 801350a:	463a      	mov	r2, r7
 801350c:	4628      	mov	r0, r5
 801350e:	47b0      	blx	r6
 8013510:	2800      	cmp	r0, #0
 8013512:	dc06      	bgt.n	8013522 <__sflush_r+0xfe>
 8013514:	89a3      	ldrh	r3, [r4, #12]
 8013516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801351a:	81a3      	strh	r3, [r4, #12]
 801351c:	f04f 30ff 	mov.w	r0, #4294967295
 8013520:	e78e      	b.n	8013440 <__sflush_r+0x1c>
 8013522:	4407      	add	r7, r0
 8013524:	eba8 0800 	sub.w	r8, r8, r0
 8013528:	e7e9      	b.n	80134fe <__sflush_r+0xda>
 801352a:	bf00      	nop
 801352c:	20400001 	.word	0x20400001

08013530 <_fflush_r>:
 8013530:	b538      	push	{r3, r4, r5, lr}
 8013532:	690b      	ldr	r3, [r1, #16]
 8013534:	4605      	mov	r5, r0
 8013536:	460c      	mov	r4, r1
 8013538:	b913      	cbnz	r3, 8013540 <_fflush_r+0x10>
 801353a:	2500      	movs	r5, #0
 801353c:	4628      	mov	r0, r5
 801353e:	bd38      	pop	{r3, r4, r5, pc}
 8013540:	b118      	cbz	r0, 801354a <_fflush_r+0x1a>
 8013542:	6983      	ldr	r3, [r0, #24]
 8013544:	b90b      	cbnz	r3, 801354a <_fflush_r+0x1a>
 8013546:	f7ff fc7f 	bl	8012e48 <__sinit>
 801354a:	4b14      	ldr	r3, [pc, #80]	; (801359c <_fflush_r+0x6c>)
 801354c:	429c      	cmp	r4, r3
 801354e:	d11b      	bne.n	8013588 <_fflush_r+0x58>
 8013550:	686c      	ldr	r4, [r5, #4]
 8013552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d0ef      	beq.n	801353a <_fflush_r+0xa>
 801355a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801355c:	07d0      	lsls	r0, r2, #31
 801355e:	d404      	bmi.n	801356a <_fflush_r+0x3a>
 8013560:	0599      	lsls	r1, r3, #22
 8013562:	d402      	bmi.n	801356a <_fflush_r+0x3a>
 8013564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013566:	f7ee f891 	bl	800168c <__retarget_lock_acquire_recursive>
 801356a:	4628      	mov	r0, r5
 801356c:	4621      	mov	r1, r4
 801356e:	f7ff ff59 	bl	8013424 <__sflush_r>
 8013572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013574:	07da      	lsls	r2, r3, #31
 8013576:	4605      	mov	r5, r0
 8013578:	d4e0      	bmi.n	801353c <_fflush_r+0xc>
 801357a:	89a3      	ldrh	r3, [r4, #12]
 801357c:	059b      	lsls	r3, r3, #22
 801357e:	d4dd      	bmi.n	801353c <_fflush_r+0xc>
 8013580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013582:	f7ee f897 	bl	80016b4 <__retarget_lock_release_recursive>
 8013586:	e7d9      	b.n	801353c <_fflush_r+0xc>
 8013588:	4b05      	ldr	r3, [pc, #20]	; (80135a0 <_fflush_r+0x70>)
 801358a:	429c      	cmp	r4, r3
 801358c:	d101      	bne.n	8013592 <_fflush_r+0x62>
 801358e:	68ac      	ldr	r4, [r5, #8]
 8013590:	e7df      	b.n	8013552 <_fflush_r+0x22>
 8013592:	4b04      	ldr	r3, [pc, #16]	; (80135a4 <_fflush_r+0x74>)
 8013594:	429c      	cmp	r4, r3
 8013596:	bf08      	it	eq
 8013598:	68ec      	ldreq	r4, [r5, #12]
 801359a:	e7da      	b.n	8013552 <_fflush_r+0x22>
 801359c:	08016be8 	.word	0x08016be8
 80135a0:	08016c08 	.word	0x08016c08
 80135a4:	08016bc8 	.word	0x08016bc8

080135a8 <fiprintf>:
 80135a8:	b40e      	push	{r1, r2, r3}
 80135aa:	b503      	push	{r0, r1, lr}
 80135ac:	4601      	mov	r1, r0
 80135ae:	ab03      	add	r3, sp, #12
 80135b0:	4805      	ldr	r0, [pc, #20]	; (80135c8 <fiprintf+0x20>)
 80135b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80135b6:	6800      	ldr	r0, [r0, #0]
 80135b8:	9301      	str	r3, [sp, #4]
 80135ba:	f000 f84f 	bl	801365c <_vfiprintf_r>
 80135be:	b002      	add	sp, #8
 80135c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80135c4:	b003      	add	sp, #12
 80135c6:	4770      	bx	lr
 80135c8:	2000001c 	.word	0x2000001c

080135cc <_lseek_r>:
 80135cc:	b538      	push	{r3, r4, r5, lr}
 80135ce:	4d07      	ldr	r5, [pc, #28]	; (80135ec <_lseek_r+0x20>)
 80135d0:	4604      	mov	r4, r0
 80135d2:	4608      	mov	r0, r1
 80135d4:	4611      	mov	r1, r2
 80135d6:	2200      	movs	r2, #0
 80135d8:	602a      	str	r2, [r5, #0]
 80135da:	461a      	mov	r2, r3
 80135dc:	f7ed ff0a 	bl	80013f4 <_lseek>
 80135e0:	1c43      	adds	r3, r0, #1
 80135e2:	d102      	bne.n	80135ea <_lseek_r+0x1e>
 80135e4:	682b      	ldr	r3, [r5, #0]
 80135e6:	b103      	cbz	r3, 80135ea <_lseek_r+0x1e>
 80135e8:	6023      	str	r3, [r4, #0]
 80135ea:	bd38      	pop	{r3, r4, r5, pc}
 80135ec:	2000d404 	.word	0x2000d404

080135f0 <__malloc_lock>:
 80135f0:	4801      	ldr	r0, [pc, #4]	; (80135f8 <__malloc_lock+0x8>)
 80135f2:	f7ee b84b 	b.w	800168c <__retarget_lock_acquire_recursive>
 80135f6:	bf00      	nop
 80135f8:	20000378 	.word	0x20000378

080135fc <__malloc_unlock>:
 80135fc:	4801      	ldr	r0, [pc, #4]	; (8013604 <__malloc_unlock+0x8>)
 80135fe:	f7ee b859 	b.w	80016b4 <__retarget_lock_release_recursive>
 8013602:	bf00      	nop
 8013604:	20000378 	.word	0x20000378

08013608 <__sfputc_r>:
 8013608:	6893      	ldr	r3, [r2, #8]
 801360a:	3b01      	subs	r3, #1
 801360c:	2b00      	cmp	r3, #0
 801360e:	b410      	push	{r4}
 8013610:	6093      	str	r3, [r2, #8]
 8013612:	da08      	bge.n	8013626 <__sfputc_r+0x1e>
 8013614:	6994      	ldr	r4, [r2, #24]
 8013616:	42a3      	cmp	r3, r4
 8013618:	db01      	blt.n	801361e <__sfputc_r+0x16>
 801361a:	290a      	cmp	r1, #10
 801361c:	d103      	bne.n	8013626 <__sfputc_r+0x1e>
 801361e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013622:	f000 baf1 	b.w	8013c08 <__swbuf_r>
 8013626:	6813      	ldr	r3, [r2, #0]
 8013628:	1c58      	adds	r0, r3, #1
 801362a:	6010      	str	r0, [r2, #0]
 801362c:	7019      	strb	r1, [r3, #0]
 801362e:	4608      	mov	r0, r1
 8013630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013634:	4770      	bx	lr

08013636 <__sfputs_r>:
 8013636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013638:	4606      	mov	r6, r0
 801363a:	460f      	mov	r7, r1
 801363c:	4614      	mov	r4, r2
 801363e:	18d5      	adds	r5, r2, r3
 8013640:	42ac      	cmp	r4, r5
 8013642:	d101      	bne.n	8013648 <__sfputs_r+0x12>
 8013644:	2000      	movs	r0, #0
 8013646:	e007      	b.n	8013658 <__sfputs_r+0x22>
 8013648:	f814 1b01 	ldrb.w	r1, [r4], #1
 801364c:	463a      	mov	r2, r7
 801364e:	4630      	mov	r0, r6
 8013650:	f7ff ffda 	bl	8013608 <__sfputc_r>
 8013654:	1c43      	adds	r3, r0, #1
 8013656:	d1f3      	bne.n	8013640 <__sfputs_r+0xa>
 8013658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801365c <_vfiprintf_r>:
 801365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013660:	460d      	mov	r5, r1
 8013662:	b09d      	sub	sp, #116	; 0x74
 8013664:	4614      	mov	r4, r2
 8013666:	4698      	mov	r8, r3
 8013668:	4606      	mov	r6, r0
 801366a:	b118      	cbz	r0, 8013674 <_vfiprintf_r+0x18>
 801366c:	6983      	ldr	r3, [r0, #24]
 801366e:	b90b      	cbnz	r3, 8013674 <_vfiprintf_r+0x18>
 8013670:	f7ff fbea 	bl	8012e48 <__sinit>
 8013674:	4b89      	ldr	r3, [pc, #548]	; (801389c <_vfiprintf_r+0x240>)
 8013676:	429d      	cmp	r5, r3
 8013678:	d11b      	bne.n	80136b2 <_vfiprintf_r+0x56>
 801367a:	6875      	ldr	r5, [r6, #4]
 801367c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801367e:	07d9      	lsls	r1, r3, #31
 8013680:	d405      	bmi.n	801368e <_vfiprintf_r+0x32>
 8013682:	89ab      	ldrh	r3, [r5, #12]
 8013684:	059a      	lsls	r2, r3, #22
 8013686:	d402      	bmi.n	801368e <_vfiprintf_r+0x32>
 8013688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801368a:	f7ed ffff 	bl	800168c <__retarget_lock_acquire_recursive>
 801368e:	89ab      	ldrh	r3, [r5, #12]
 8013690:	071b      	lsls	r3, r3, #28
 8013692:	d501      	bpl.n	8013698 <_vfiprintf_r+0x3c>
 8013694:	692b      	ldr	r3, [r5, #16]
 8013696:	b9eb      	cbnz	r3, 80136d4 <_vfiprintf_r+0x78>
 8013698:	4629      	mov	r1, r5
 801369a:	4630      	mov	r0, r6
 801369c:	f000 fb06 	bl	8013cac <__swsetup_r>
 80136a0:	b1c0      	cbz	r0, 80136d4 <_vfiprintf_r+0x78>
 80136a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80136a4:	07dc      	lsls	r4, r3, #31
 80136a6:	d50e      	bpl.n	80136c6 <_vfiprintf_r+0x6a>
 80136a8:	f04f 30ff 	mov.w	r0, #4294967295
 80136ac:	b01d      	add	sp, #116	; 0x74
 80136ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136b2:	4b7b      	ldr	r3, [pc, #492]	; (80138a0 <_vfiprintf_r+0x244>)
 80136b4:	429d      	cmp	r5, r3
 80136b6:	d101      	bne.n	80136bc <_vfiprintf_r+0x60>
 80136b8:	68b5      	ldr	r5, [r6, #8]
 80136ba:	e7df      	b.n	801367c <_vfiprintf_r+0x20>
 80136bc:	4b79      	ldr	r3, [pc, #484]	; (80138a4 <_vfiprintf_r+0x248>)
 80136be:	429d      	cmp	r5, r3
 80136c0:	bf08      	it	eq
 80136c2:	68f5      	ldreq	r5, [r6, #12]
 80136c4:	e7da      	b.n	801367c <_vfiprintf_r+0x20>
 80136c6:	89ab      	ldrh	r3, [r5, #12]
 80136c8:	0598      	lsls	r0, r3, #22
 80136ca:	d4ed      	bmi.n	80136a8 <_vfiprintf_r+0x4c>
 80136cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80136ce:	f7ed fff1 	bl	80016b4 <__retarget_lock_release_recursive>
 80136d2:	e7e9      	b.n	80136a8 <_vfiprintf_r+0x4c>
 80136d4:	2300      	movs	r3, #0
 80136d6:	9309      	str	r3, [sp, #36]	; 0x24
 80136d8:	2320      	movs	r3, #32
 80136da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136de:	f8cd 800c 	str.w	r8, [sp, #12]
 80136e2:	2330      	movs	r3, #48	; 0x30
 80136e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80138a8 <_vfiprintf_r+0x24c>
 80136e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136ec:	f04f 0901 	mov.w	r9, #1
 80136f0:	4623      	mov	r3, r4
 80136f2:	469a      	mov	sl, r3
 80136f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136f8:	b10a      	cbz	r2, 80136fe <_vfiprintf_r+0xa2>
 80136fa:	2a25      	cmp	r2, #37	; 0x25
 80136fc:	d1f9      	bne.n	80136f2 <_vfiprintf_r+0x96>
 80136fe:	ebba 0b04 	subs.w	fp, sl, r4
 8013702:	d00b      	beq.n	801371c <_vfiprintf_r+0xc0>
 8013704:	465b      	mov	r3, fp
 8013706:	4622      	mov	r2, r4
 8013708:	4629      	mov	r1, r5
 801370a:	4630      	mov	r0, r6
 801370c:	f7ff ff93 	bl	8013636 <__sfputs_r>
 8013710:	3001      	adds	r0, #1
 8013712:	f000 80aa 	beq.w	801386a <_vfiprintf_r+0x20e>
 8013716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013718:	445a      	add	r2, fp
 801371a:	9209      	str	r2, [sp, #36]	; 0x24
 801371c:	f89a 3000 	ldrb.w	r3, [sl]
 8013720:	2b00      	cmp	r3, #0
 8013722:	f000 80a2 	beq.w	801386a <_vfiprintf_r+0x20e>
 8013726:	2300      	movs	r3, #0
 8013728:	f04f 32ff 	mov.w	r2, #4294967295
 801372c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013730:	f10a 0a01 	add.w	sl, sl, #1
 8013734:	9304      	str	r3, [sp, #16]
 8013736:	9307      	str	r3, [sp, #28]
 8013738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801373c:	931a      	str	r3, [sp, #104]	; 0x68
 801373e:	4654      	mov	r4, sl
 8013740:	2205      	movs	r2, #5
 8013742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013746:	4858      	ldr	r0, [pc, #352]	; (80138a8 <_vfiprintf_r+0x24c>)
 8013748:	f7ec fd42 	bl	80001d0 <memchr>
 801374c:	9a04      	ldr	r2, [sp, #16]
 801374e:	b9d8      	cbnz	r0, 8013788 <_vfiprintf_r+0x12c>
 8013750:	06d1      	lsls	r1, r2, #27
 8013752:	bf44      	itt	mi
 8013754:	2320      	movmi	r3, #32
 8013756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801375a:	0713      	lsls	r3, r2, #28
 801375c:	bf44      	itt	mi
 801375e:	232b      	movmi	r3, #43	; 0x2b
 8013760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013764:	f89a 3000 	ldrb.w	r3, [sl]
 8013768:	2b2a      	cmp	r3, #42	; 0x2a
 801376a:	d015      	beq.n	8013798 <_vfiprintf_r+0x13c>
 801376c:	9a07      	ldr	r2, [sp, #28]
 801376e:	4654      	mov	r4, sl
 8013770:	2000      	movs	r0, #0
 8013772:	f04f 0c0a 	mov.w	ip, #10
 8013776:	4621      	mov	r1, r4
 8013778:	f811 3b01 	ldrb.w	r3, [r1], #1
 801377c:	3b30      	subs	r3, #48	; 0x30
 801377e:	2b09      	cmp	r3, #9
 8013780:	d94e      	bls.n	8013820 <_vfiprintf_r+0x1c4>
 8013782:	b1b0      	cbz	r0, 80137b2 <_vfiprintf_r+0x156>
 8013784:	9207      	str	r2, [sp, #28]
 8013786:	e014      	b.n	80137b2 <_vfiprintf_r+0x156>
 8013788:	eba0 0308 	sub.w	r3, r0, r8
 801378c:	fa09 f303 	lsl.w	r3, r9, r3
 8013790:	4313      	orrs	r3, r2
 8013792:	9304      	str	r3, [sp, #16]
 8013794:	46a2      	mov	sl, r4
 8013796:	e7d2      	b.n	801373e <_vfiprintf_r+0xe2>
 8013798:	9b03      	ldr	r3, [sp, #12]
 801379a:	1d19      	adds	r1, r3, #4
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	9103      	str	r1, [sp, #12]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	bfbb      	ittet	lt
 80137a4:	425b      	neglt	r3, r3
 80137a6:	f042 0202 	orrlt.w	r2, r2, #2
 80137aa:	9307      	strge	r3, [sp, #28]
 80137ac:	9307      	strlt	r3, [sp, #28]
 80137ae:	bfb8      	it	lt
 80137b0:	9204      	strlt	r2, [sp, #16]
 80137b2:	7823      	ldrb	r3, [r4, #0]
 80137b4:	2b2e      	cmp	r3, #46	; 0x2e
 80137b6:	d10c      	bne.n	80137d2 <_vfiprintf_r+0x176>
 80137b8:	7863      	ldrb	r3, [r4, #1]
 80137ba:	2b2a      	cmp	r3, #42	; 0x2a
 80137bc:	d135      	bne.n	801382a <_vfiprintf_r+0x1ce>
 80137be:	9b03      	ldr	r3, [sp, #12]
 80137c0:	1d1a      	adds	r2, r3, #4
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	9203      	str	r2, [sp, #12]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	bfb8      	it	lt
 80137ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80137ce:	3402      	adds	r4, #2
 80137d0:	9305      	str	r3, [sp, #20]
 80137d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80138b8 <_vfiprintf_r+0x25c>
 80137d6:	7821      	ldrb	r1, [r4, #0]
 80137d8:	2203      	movs	r2, #3
 80137da:	4650      	mov	r0, sl
 80137dc:	f7ec fcf8 	bl	80001d0 <memchr>
 80137e0:	b140      	cbz	r0, 80137f4 <_vfiprintf_r+0x198>
 80137e2:	2340      	movs	r3, #64	; 0x40
 80137e4:	eba0 000a 	sub.w	r0, r0, sl
 80137e8:	fa03 f000 	lsl.w	r0, r3, r0
 80137ec:	9b04      	ldr	r3, [sp, #16]
 80137ee:	4303      	orrs	r3, r0
 80137f0:	3401      	adds	r4, #1
 80137f2:	9304      	str	r3, [sp, #16]
 80137f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137f8:	482c      	ldr	r0, [pc, #176]	; (80138ac <_vfiprintf_r+0x250>)
 80137fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137fe:	2206      	movs	r2, #6
 8013800:	f7ec fce6 	bl	80001d0 <memchr>
 8013804:	2800      	cmp	r0, #0
 8013806:	d03f      	beq.n	8013888 <_vfiprintf_r+0x22c>
 8013808:	4b29      	ldr	r3, [pc, #164]	; (80138b0 <_vfiprintf_r+0x254>)
 801380a:	bb1b      	cbnz	r3, 8013854 <_vfiprintf_r+0x1f8>
 801380c:	9b03      	ldr	r3, [sp, #12]
 801380e:	3307      	adds	r3, #7
 8013810:	f023 0307 	bic.w	r3, r3, #7
 8013814:	3308      	adds	r3, #8
 8013816:	9303      	str	r3, [sp, #12]
 8013818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801381a:	443b      	add	r3, r7
 801381c:	9309      	str	r3, [sp, #36]	; 0x24
 801381e:	e767      	b.n	80136f0 <_vfiprintf_r+0x94>
 8013820:	fb0c 3202 	mla	r2, ip, r2, r3
 8013824:	460c      	mov	r4, r1
 8013826:	2001      	movs	r0, #1
 8013828:	e7a5      	b.n	8013776 <_vfiprintf_r+0x11a>
 801382a:	2300      	movs	r3, #0
 801382c:	3401      	adds	r4, #1
 801382e:	9305      	str	r3, [sp, #20]
 8013830:	4619      	mov	r1, r3
 8013832:	f04f 0c0a 	mov.w	ip, #10
 8013836:	4620      	mov	r0, r4
 8013838:	f810 2b01 	ldrb.w	r2, [r0], #1
 801383c:	3a30      	subs	r2, #48	; 0x30
 801383e:	2a09      	cmp	r2, #9
 8013840:	d903      	bls.n	801384a <_vfiprintf_r+0x1ee>
 8013842:	2b00      	cmp	r3, #0
 8013844:	d0c5      	beq.n	80137d2 <_vfiprintf_r+0x176>
 8013846:	9105      	str	r1, [sp, #20]
 8013848:	e7c3      	b.n	80137d2 <_vfiprintf_r+0x176>
 801384a:	fb0c 2101 	mla	r1, ip, r1, r2
 801384e:	4604      	mov	r4, r0
 8013850:	2301      	movs	r3, #1
 8013852:	e7f0      	b.n	8013836 <_vfiprintf_r+0x1da>
 8013854:	ab03      	add	r3, sp, #12
 8013856:	9300      	str	r3, [sp, #0]
 8013858:	462a      	mov	r2, r5
 801385a:	4b16      	ldr	r3, [pc, #88]	; (80138b4 <_vfiprintf_r+0x258>)
 801385c:	a904      	add	r1, sp, #16
 801385e:	4630      	mov	r0, r6
 8013860:	f3af 8000 	nop.w
 8013864:	4607      	mov	r7, r0
 8013866:	1c78      	adds	r0, r7, #1
 8013868:	d1d6      	bne.n	8013818 <_vfiprintf_r+0x1bc>
 801386a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801386c:	07d9      	lsls	r1, r3, #31
 801386e:	d405      	bmi.n	801387c <_vfiprintf_r+0x220>
 8013870:	89ab      	ldrh	r3, [r5, #12]
 8013872:	059a      	lsls	r2, r3, #22
 8013874:	d402      	bmi.n	801387c <_vfiprintf_r+0x220>
 8013876:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013878:	f7ed ff1c 	bl	80016b4 <__retarget_lock_release_recursive>
 801387c:	89ab      	ldrh	r3, [r5, #12]
 801387e:	065b      	lsls	r3, r3, #25
 8013880:	f53f af12 	bmi.w	80136a8 <_vfiprintf_r+0x4c>
 8013884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013886:	e711      	b.n	80136ac <_vfiprintf_r+0x50>
 8013888:	ab03      	add	r3, sp, #12
 801388a:	9300      	str	r3, [sp, #0]
 801388c:	462a      	mov	r2, r5
 801388e:	4b09      	ldr	r3, [pc, #36]	; (80138b4 <_vfiprintf_r+0x258>)
 8013890:	a904      	add	r1, sp, #16
 8013892:	4630      	mov	r0, r6
 8013894:	f000 f880 	bl	8013998 <_printf_i>
 8013898:	e7e4      	b.n	8013864 <_vfiprintf_r+0x208>
 801389a:	bf00      	nop
 801389c:	08016be8 	.word	0x08016be8
 80138a0:	08016c08 	.word	0x08016c08
 80138a4:	08016bc8 	.word	0x08016bc8
 80138a8:	08016cde 	.word	0x08016cde
 80138ac:	08016ce8 	.word	0x08016ce8
 80138b0:	00000000 	.word	0x00000000
 80138b4:	08013637 	.word	0x08013637
 80138b8:	08016ce4 	.word	0x08016ce4

080138bc <_printf_common>:
 80138bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138c0:	4616      	mov	r6, r2
 80138c2:	4699      	mov	r9, r3
 80138c4:	688a      	ldr	r2, [r1, #8]
 80138c6:	690b      	ldr	r3, [r1, #16]
 80138c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80138cc:	4293      	cmp	r3, r2
 80138ce:	bfb8      	it	lt
 80138d0:	4613      	movlt	r3, r2
 80138d2:	6033      	str	r3, [r6, #0]
 80138d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80138d8:	4607      	mov	r7, r0
 80138da:	460c      	mov	r4, r1
 80138dc:	b10a      	cbz	r2, 80138e2 <_printf_common+0x26>
 80138de:	3301      	adds	r3, #1
 80138e0:	6033      	str	r3, [r6, #0]
 80138e2:	6823      	ldr	r3, [r4, #0]
 80138e4:	0699      	lsls	r1, r3, #26
 80138e6:	bf42      	ittt	mi
 80138e8:	6833      	ldrmi	r3, [r6, #0]
 80138ea:	3302      	addmi	r3, #2
 80138ec:	6033      	strmi	r3, [r6, #0]
 80138ee:	6825      	ldr	r5, [r4, #0]
 80138f0:	f015 0506 	ands.w	r5, r5, #6
 80138f4:	d106      	bne.n	8013904 <_printf_common+0x48>
 80138f6:	f104 0a19 	add.w	sl, r4, #25
 80138fa:	68e3      	ldr	r3, [r4, #12]
 80138fc:	6832      	ldr	r2, [r6, #0]
 80138fe:	1a9b      	subs	r3, r3, r2
 8013900:	42ab      	cmp	r3, r5
 8013902:	dc26      	bgt.n	8013952 <_printf_common+0x96>
 8013904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013908:	1e13      	subs	r3, r2, #0
 801390a:	6822      	ldr	r2, [r4, #0]
 801390c:	bf18      	it	ne
 801390e:	2301      	movne	r3, #1
 8013910:	0692      	lsls	r2, r2, #26
 8013912:	d42b      	bmi.n	801396c <_printf_common+0xb0>
 8013914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013918:	4649      	mov	r1, r9
 801391a:	4638      	mov	r0, r7
 801391c:	47c0      	blx	r8
 801391e:	3001      	adds	r0, #1
 8013920:	d01e      	beq.n	8013960 <_printf_common+0xa4>
 8013922:	6823      	ldr	r3, [r4, #0]
 8013924:	68e5      	ldr	r5, [r4, #12]
 8013926:	6832      	ldr	r2, [r6, #0]
 8013928:	f003 0306 	and.w	r3, r3, #6
 801392c:	2b04      	cmp	r3, #4
 801392e:	bf08      	it	eq
 8013930:	1aad      	subeq	r5, r5, r2
 8013932:	68a3      	ldr	r3, [r4, #8]
 8013934:	6922      	ldr	r2, [r4, #16]
 8013936:	bf0c      	ite	eq
 8013938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801393c:	2500      	movne	r5, #0
 801393e:	4293      	cmp	r3, r2
 8013940:	bfc4      	itt	gt
 8013942:	1a9b      	subgt	r3, r3, r2
 8013944:	18ed      	addgt	r5, r5, r3
 8013946:	2600      	movs	r6, #0
 8013948:	341a      	adds	r4, #26
 801394a:	42b5      	cmp	r5, r6
 801394c:	d11a      	bne.n	8013984 <_printf_common+0xc8>
 801394e:	2000      	movs	r0, #0
 8013950:	e008      	b.n	8013964 <_printf_common+0xa8>
 8013952:	2301      	movs	r3, #1
 8013954:	4652      	mov	r2, sl
 8013956:	4649      	mov	r1, r9
 8013958:	4638      	mov	r0, r7
 801395a:	47c0      	blx	r8
 801395c:	3001      	adds	r0, #1
 801395e:	d103      	bne.n	8013968 <_printf_common+0xac>
 8013960:	f04f 30ff 	mov.w	r0, #4294967295
 8013964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013968:	3501      	adds	r5, #1
 801396a:	e7c6      	b.n	80138fa <_printf_common+0x3e>
 801396c:	18e1      	adds	r1, r4, r3
 801396e:	1c5a      	adds	r2, r3, #1
 8013970:	2030      	movs	r0, #48	; 0x30
 8013972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013976:	4422      	add	r2, r4
 8013978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801397c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013980:	3302      	adds	r3, #2
 8013982:	e7c7      	b.n	8013914 <_printf_common+0x58>
 8013984:	2301      	movs	r3, #1
 8013986:	4622      	mov	r2, r4
 8013988:	4649      	mov	r1, r9
 801398a:	4638      	mov	r0, r7
 801398c:	47c0      	blx	r8
 801398e:	3001      	adds	r0, #1
 8013990:	d0e6      	beq.n	8013960 <_printf_common+0xa4>
 8013992:	3601      	adds	r6, #1
 8013994:	e7d9      	b.n	801394a <_printf_common+0x8e>
	...

08013998 <_printf_i>:
 8013998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801399c:	460c      	mov	r4, r1
 801399e:	4691      	mov	r9, r2
 80139a0:	7e27      	ldrb	r7, [r4, #24]
 80139a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80139a4:	2f78      	cmp	r7, #120	; 0x78
 80139a6:	4680      	mov	r8, r0
 80139a8:	469a      	mov	sl, r3
 80139aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80139ae:	d807      	bhi.n	80139c0 <_printf_i+0x28>
 80139b0:	2f62      	cmp	r7, #98	; 0x62
 80139b2:	d80a      	bhi.n	80139ca <_printf_i+0x32>
 80139b4:	2f00      	cmp	r7, #0
 80139b6:	f000 80d8 	beq.w	8013b6a <_printf_i+0x1d2>
 80139ba:	2f58      	cmp	r7, #88	; 0x58
 80139bc:	f000 80a3 	beq.w	8013b06 <_printf_i+0x16e>
 80139c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80139c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80139c8:	e03a      	b.n	8013a40 <_printf_i+0xa8>
 80139ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80139ce:	2b15      	cmp	r3, #21
 80139d0:	d8f6      	bhi.n	80139c0 <_printf_i+0x28>
 80139d2:	a001      	add	r0, pc, #4	; (adr r0, 80139d8 <_printf_i+0x40>)
 80139d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80139d8:	08013a31 	.word	0x08013a31
 80139dc:	08013a45 	.word	0x08013a45
 80139e0:	080139c1 	.word	0x080139c1
 80139e4:	080139c1 	.word	0x080139c1
 80139e8:	080139c1 	.word	0x080139c1
 80139ec:	080139c1 	.word	0x080139c1
 80139f0:	08013a45 	.word	0x08013a45
 80139f4:	080139c1 	.word	0x080139c1
 80139f8:	080139c1 	.word	0x080139c1
 80139fc:	080139c1 	.word	0x080139c1
 8013a00:	080139c1 	.word	0x080139c1
 8013a04:	08013b51 	.word	0x08013b51
 8013a08:	08013a75 	.word	0x08013a75
 8013a0c:	08013b33 	.word	0x08013b33
 8013a10:	080139c1 	.word	0x080139c1
 8013a14:	080139c1 	.word	0x080139c1
 8013a18:	08013b73 	.word	0x08013b73
 8013a1c:	080139c1 	.word	0x080139c1
 8013a20:	08013a75 	.word	0x08013a75
 8013a24:	080139c1 	.word	0x080139c1
 8013a28:	080139c1 	.word	0x080139c1
 8013a2c:	08013b3b 	.word	0x08013b3b
 8013a30:	680b      	ldr	r3, [r1, #0]
 8013a32:	1d1a      	adds	r2, r3, #4
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	600a      	str	r2, [r1, #0]
 8013a38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013a40:	2301      	movs	r3, #1
 8013a42:	e0a3      	b.n	8013b8c <_printf_i+0x1f4>
 8013a44:	6825      	ldr	r5, [r4, #0]
 8013a46:	6808      	ldr	r0, [r1, #0]
 8013a48:	062e      	lsls	r6, r5, #24
 8013a4a:	f100 0304 	add.w	r3, r0, #4
 8013a4e:	d50a      	bpl.n	8013a66 <_printf_i+0xce>
 8013a50:	6805      	ldr	r5, [r0, #0]
 8013a52:	600b      	str	r3, [r1, #0]
 8013a54:	2d00      	cmp	r5, #0
 8013a56:	da03      	bge.n	8013a60 <_printf_i+0xc8>
 8013a58:	232d      	movs	r3, #45	; 0x2d
 8013a5a:	426d      	negs	r5, r5
 8013a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a60:	485e      	ldr	r0, [pc, #376]	; (8013bdc <_printf_i+0x244>)
 8013a62:	230a      	movs	r3, #10
 8013a64:	e019      	b.n	8013a9a <_printf_i+0x102>
 8013a66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013a6a:	6805      	ldr	r5, [r0, #0]
 8013a6c:	600b      	str	r3, [r1, #0]
 8013a6e:	bf18      	it	ne
 8013a70:	b22d      	sxthne	r5, r5
 8013a72:	e7ef      	b.n	8013a54 <_printf_i+0xbc>
 8013a74:	680b      	ldr	r3, [r1, #0]
 8013a76:	6825      	ldr	r5, [r4, #0]
 8013a78:	1d18      	adds	r0, r3, #4
 8013a7a:	6008      	str	r0, [r1, #0]
 8013a7c:	0628      	lsls	r0, r5, #24
 8013a7e:	d501      	bpl.n	8013a84 <_printf_i+0xec>
 8013a80:	681d      	ldr	r5, [r3, #0]
 8013a82:	e002      	b.n	8013a8a <_printf_i+0xf2>
 8013a84:	0669      	lsls	r1, r5, #25
 8013a86:	d5fb      	bpl.n	8013a80 <_printf_i+0xe8>
 8013a88:	881d      	ldrh	r5, [r3, #0]
 8013a8a:	4854      	ldr	r0, [pc, #336]	; (8013bdc <_printf_i+0x244>)
 8013a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8013a8e:	bf0c      	ite	eq
 8013a90:	2308      	moveq	r3, #8
 8013a92:	230a      	movne	r3, #10
 8013a94:	2100      	movs	r1, #0
 8013a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013a9a:	6866      	ldr	r6, [r4, #4]
 8013a9c:	60a6      	str	r6, [r4, #8]
 8013a9e:	2e00      	cmp	r6, #0
 8013aa0:	bfa2      	ittt	ge
 8013aa2:	6821      	ldrge	r1, [r4, #0]
 8013aa4:	f021 0104 	bicge.w	r1, r1, #4
 8013aa8:	6021      	strge	r1, [r4, #0]
 8013aaa:	b90d      	cbnz	r5, 8013ab0 <_printf_i+0x118>
 8013aac:	2e00      	cmp	r6, #0
 8013aae:	d04d      	beq.n	8013b4c <_printf_i+0x1b4>
 8013ab0:	4616      	mov	r6, r2
 8013ab2:	fbb5 f1f3 	udiv	r1, r5, r3
 8013ab6:	fb03 5711 	mls	r7, r3, r1, r5
 8013aba:	5dc7      	ldrb	r7, [r0, r7]
 8013abc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013ac0:	462f      	mov	r7, r5
 8013ac2:	42bb      	cmp	r3, r7
 8013ac4:	460d      	mov	r5, r1
 8013ac6:	d9f4      	bls.n	8013ab2 <_printf_i+0x11a>
 8013ac8:	2b08      	cmp	r3, #8
 8013aca:	d10b      	bne.n	8013ae4 <_printf_i+0x14c>
 8013acc:	6823      	ldr	r3, [r4, #0]
 8013ace:	07df      	lsls	r7, r3, #31
 8013ad0:	d508      	bpl.n	8013ae4 <_printf_i+0x14c>
 8013ad2:	6923      	ldr	r3, [r4, #16]
 8013ad4:	6861      	ldr	r1, [r4, #4]
 8013ad6:	4299      	cmp	r1, r3
 8013ad8:	bfde      	ittt	le
 8013ada:	2330      	movle	r3, #48	; 0x30
 8013adc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013ae0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013ae4:	1b92      	subs	r2, r2, r6
 8013ae6:	6122      	str	r2, [r4, #16]
 8013ae8:	f8cd a000 	str.w	sl, [sp]
 8013aec:	464b      	mov	r3, r9
 8013aee:	aa03      	add	r2, sp, #12
 8013af0:	4621      	mov	r1, r4
 8013af2:	4640      	mov	r0, r8
 8013af4:	f7ff fee2 	bl	80138bc <_printf_common>
 8013af8:	3001      	adds	r0, #1
 8013afa:	d14c      	bne.n	8013b96 <_printf_i+0x1fe>
 8013afc:	f04f 30ff 	mov.w	r0, #4294967295
 8013b00:	b004      	add	sp, #16
 8013b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b06:	4835      	ldr	r0, [pc, #212]	; (8013bdc <_printf_i+0x244>)
 8013b08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013b0c:	6823      	ldr	r3, [r4, #0]
 8013b0e:	680e      	ldr	r6, [r1, #0]
 8013b10:	061f      	lsls	r7, r3, #24
 8013b12:	f856 5b04 	ldr.w	r5, [r6], #4
 8013b16:	600e      	str	r6, [r1, #0]
 8013b18:	d514      	bpl.n	8013b44 <_printf_i+0x1ac>
 8013b1a:	07d9      	lsls	r1, r3, #31
 8013b1c:	bf44      	itt	mi
 8013b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8013b22:	6023      	strmi	r3, [r4, #0]
 8013b24:	b91d      	cbnz	r5, 8013b2e <_printf_i+0x196>
 8013b26:	6823      	ldr	r3, [r4, #0]
 8013b28:	f023 0320 	bic.w	r3, r3, #32
 8013b2c:	6023      	str	r3, [r4, #0]
 8013b2e:	2310      	movs	r3, #16
 8013b30:	e7b0      	b.n	8013a94 <_printf_i+0xfc>
 8013b32:	6823      	ldr	r3, [r4, #0]
 8013b34:	f043 0320 	orr.w	r3, r3, #32
 8013b38:	6023      	str	r3, [r4, #0]
 8013b3a:	2378      	movs	r3, #120	; 0x78
 8013b3c:	4828      	ldr	r0, [pc, #160]	; (8013be0 <_printf_i+0x248>)
 8013b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b42:	e7e3      	b.n	8013b0c <_printf_i+0x174>
 8013b44:	065e      	lsls	r6, r3, #25
 8013b46:	bf48      	it	mi
 8013b48:	b2ad      	uxthmi	r5, r5
 8013b4a:	e7e6      	b.n	8013b1a <_printf_i+0x182>
 8013b4c:	4616      	mov	r6, r2
 8013b4e:	e7bb      	b.n	8013ac8 <_printf_i+0x130>
 8013b50:	680b      	ldr	r3, [r1, #0]
 8013b52:	6826      	ldr	r6, [r4, #0]
 8013b54:	6960      	ldr	r0, [r4, #20]
 8013b56:	1d1d      	adds	r5, r3, #4
 8013b58:	600d      	str	r5, [r1, #0]
 8013b5a:	0635      	lsls	r5, r6, #24
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	d501      	bpl.n	8013b64 <_printf_i+0x1cc>
 8013b60:	6018      	str	r0, [r3, #0]
 8013b62:	e002      	b.n	8013b6a <_printf_i+0x1d2>
 8013b64:	0671      	lsls	r1, r6, #25
 8013b66:	d5fb      	bpl.n	8013b60 <_printf_i+0x1c8>
 8013b68:	8018      	strh	r0, [r3, #0]
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	6123      	str	r3, [r4, #16]
 8013b6e:	4616      	mov	r6, r2
 8013b70:	e7ba      	b.n	8013ae8 <_printf_i+0x150>
 8013b72:	680b      	ldr	r3, [r1, #0]
 8013b74:	1d1a      	adds	r2, r3, #4
 8013b76:	600a      	str	r2, [r1, #0]
 8013b78:	681e      	ldr	r6, [r3, #0]
 8013b7a:	6862      	ldr	r2, [r4, #4]
 8013b7c:	2100      	movs	r1, #0
 8013b7e:	4630      	mov	r0, r6
 8013b80:	f7ec fb26 	bl	80001d0 <memchr>
 8013b84:	b108      	cbz	r0, 8013b8a <_printf_i+0x1f2>
 8013b86:	1b80      	subs	r0, r0, r6
 8013b88:	6060      	str	r0, [r4, #4]
 8013b8a:	6863      	ldr	r3, [r4, #4]
 8013b8c:	6123      	str	r3, [r4, #16]
 8013b8e:	2300      	movs	r3, #0
 8013b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b94:	e7a8      	b.n	8013ae8 <_printf_i+0x150>
 8013b96:	6923      	ldr	r3, [r4, #16]
 8013b98:	4632      	mov	r2, r6
 8013b9a:	4649      	mov	r1, r9
 8013b9c:	4640      	mov	r0, r8
 8013b9e:	47d0      	blx	sl
 8013ba0:	3001      	adds	r0, #1
 8013ba2:	d0ab      	beq.n	8013afc <_printf_i+0x164>
 8013ba4:	6823      	ldr	r3, [r4, #0]
 8013ba6:	079b      	lsls	r3, r3, #30
 8013ba8:	d413      	bmi.n	8013bd2 <_printf_i+0x23a>
 8013baa:	68e0      	ldr	r0, [r4, #12]
 8013bac:	9b03      	ldr	r3, [sp, #12]
 8013bae:	4298      	cmp	r0, r3
 8013bb0:	bfb8      	it	lt
 8013bb2:	4618      	movlt	r0, r3
 8013bb4:	e7a4      	b.n	8013b00 <_printf_i+0x168>
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	4632      	mov	r2, r6
 8013bba:	4649      	mov	r1, r9
 8013bbc:	4640      	mov	r0, r8
 8013bbe:	47d0      	blx	sl
 8013bc0:	3001      	adds	r0, #1
 8013bc2:	d09b      	beq.n	8013afc <_printf_i+0x164>
 8013bc4:	3501      	adds	r5, #1
 8013bc6:	68e3      	ldr	r3, [r4, #12]
 8013bc8:	9903      	ldr	r1, [sp, #12]
 8013bca:	1a5b      	subs	r3, r3, r1
 8013bcc:	42ab      	cmp	r3, r5
 8013bce:	dcf2      	bgt.n	8013bb6 <_printf_i+0x21e>
 8013bd0:	e7eb      	b.n	8013baa <_printf_i+0x212>
 8013bd2:	2500      	movs	r5, #0
 8013bd4:	f104 0619 	add.w	r6, r4, #25
 8013bd8:	e7f5      	b.n	8013bc6 <_printf_i+0x22e>
 8013bda:	bf00      	nop
 8013bdc:	08016cef 	.word	0x08016cef
 8013be0:	08016d00 	.word	0x08016d00

08013be4 <_read_r>:
 8013be4:	b538      	push	{r3, r4, r5, lr}
 8013be6:	4d07      	ldr	r5, [pc, #28]	; (8013c04 <_read_r+0x20>)
 8013be8:	4604      	mov	r4, r0
 8013bea:	4608      	mov	r0, r1
 8013bec:	4611      	mov	r1, r2
 8013bee:	2200      	movs	r2, #0
 8013bf0:	602a      	str	r2, [r5, #0]
 8013bf2:	461a      	mov	r2, r3
 8013bf4:	f7ed fb9e 	bl	8001334 <_read>
 8013bf8:	1c43      	adds	r3, r0, #1
 8013bfa:	d102      	bne.n	8013c02 <_read_r+0x1e>
 8013bfc:	682b      	ldr	r3, [r5, #0]
 8013bfe:	b103      	cbz	r3, 8013c02 <_read_r+0x1e>
 8013c00:	6023      	str	r3, [r4, #0]
 8013c02:	bd38      	pop	{r3, r4, r5, pc}
 8013c04:	2000d404 	.word	0x2000d404

08013c08 <__swbuf_r>:
 8013c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c0a:	460e      	mov	r6, r1
 8013c0c:	4614      	mov	r4, r2
 8013c0e:	4605      	mov	r5, r0
 8013c10:	b118      	cbz	r0, 8013c1a <__swbuf_r+0x12>
 8013c12:	6983      	ldr	r3, [r0, #24]
 8013c14:	b90b      	cbnz	r3, 8013c1a <__swbuf_r+0x12>
 8013c16:	f7ff f917 	bl	8012e48 <__sinit>
 8013c1a:	4b21      	ldr	r3, [pc, #132]	; (8013ca0 <__swbuf_r+0x98>)
 8013c1c:	429c      	cmp	r4, r3
 8013c1e:	d12b      	bne.n	8013c78 <__swbuf_r+0x70>
 8013c20:	686c      	ldr	r4, [r5, #4]
 8013c22:	69a3      	ldr	r3, [r4, #24]
 8013c24:	60a3      	str	r3, [r4, #8]
 8013c26:	89a3      	ldrh	r3, [r4, #12]
 8013c28:	071a      	lsls	r2, r3, #28
 8013c2a:	d52f      	bpl.n	8013c8c <__swbuf_r+0x84>
 8013c2c:	6923      	ldr	r3, [r4, #16]
 8013c2e:	b36b      	cbz	r3, 8013c8c <__swbuf_r+0x84>
 8013c30:	6923      	ldr	r3, [r4, #16]
 8013c32:	6820      	ldr	r0, [r4, #0]
 8013c34:	1ac0      	subs	r0, r0, r3
 8013c36:	6963      	ldr	r3, [r4, #20]
 8013c38:	b2f6      	uxtb	r6, r6
 8013c3a:	4283      	cmp	r3, r0
 8013c3c:	4637      	mov	r7, r6
 8013c3e:	dc04      	bgt.n	8013c4a <__swbuf_r+0x42>
 8013c40:	4621      	mov	r1, r4
 8013c42:	4628      	mov	r0, r5
 8013c44:	f7ff fc74 	bl	8013530 <_fflush_r>
 8013c48:	bb30      	cbnz	r0, 8013c98 <__swbuf_r+0x90>
 8013c4a:	68a3      	ldr	r3, [r4, #8]
 8013c4c:	3b01      	subs	r3, #1
 8013c4e:	60a3      	str	r3, [r4, #8]
 8013c50:	6823      	ldr	r3, [r4, #0]
 8013c52:	1c5a      	adds	r2, r3, #1
 8013c54:	6022      	str	r2, [r4, #0]
 8013c56:	701e      	strb	r6, [r3, #0]
 8013c58:	6963      	ldr	r3, [r4, #20]
 8013c5a:	3001      	adds	r0, #1
 8013c5c:	4283      	cmp	r3, r0
 8013c5e:	d004      	beq.n	8013c6a <__swbuf_r+0x62>
 8013c60:	89a3      	ldrh	r3, [r4, #12]
 8013c62:	07db      	lsls	r3, r3, #31
 8013c64:	d506      	bpl.n	8013c74 <__swbuf_r+0x6c>
 8013c66:	2e0a      	cmp	r6, #10
 8013c68:	d104      	bne.n	8013c74 <__swbuf_r+0x6c>
 8013c6a:	4621      	mov	r1, r4
 8013c6c:	4628      	mov	r0, r5
 8013c6e:	f7ff fc5f 	bl	8013530 <_fflush_r>
 8013c72:	b988      	cbnz	r0, 8013c98 <__swbuf_r+0x90>
 8013c74:	4638      	mov	r0, r7
 8013c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c78:	4b0a      	ldr	r3, [pc, #40]	; (8013ca4 <__swbuf_r+0x9c>)
 8013c7a:	429c      	cmp	r4, r3
 8013c7c:	d101      	bne.n	8013c82 <__swbuf_r+0x7a>
 8013c7e:	68ac      	ldr	r4, [r5, #8]
 8013c80:	e7cf      	b.n	8013c22 <__swbuf_r+0x1a>
 8013c82:	4b09      	ldr	r3, [pc, #36]	; (8013ca8 <__swbuf_r+0xa0>)
 8013c84:	429c      	cmp	r4, r3
 8013c86:	bf08      	it	eq
 8013c88:	68ec      	ldreq	r4, [r5, #12]
 8013c8a:	e7ca      	b.n	8013c22 <__swbuf_r+0x1a>
 8013c8c:	4621      	mov	r1, r4
 8013c8e:	4628      	mov	r0, r5
 8013c90:	f000 f80c 	bl	8013cac <__swsetup_r>
 8013c94:	2800      	cmp	r0, #0
 8013c96:	d0cb      	beq.n	8013c30 <__swbuf_r+0x28>
 8013c98:	f04f 37ff 	mov.w	r7, #4294967295
 8013c9c:	e7ea      	b.n	8013c74 <__swbuf_r+0x6c>
 8013c9e:	bf00      	nop
 8013ca0:	08016be8 	.word	0x08016be8
 8013ca4:	08016c08 	.word	0x08016c08
 8013ca8:	08016bc8 	.word	0x08016bc8

08013cac <__swsetup_r>:
 8013cac:	4b32      	ldr	r3, [pc, #200]	; (8013d78 <__swsetup_r+0xcc>)
 8013cae:	b570      	push	{r4, r5, r6, lr}
 8013cb0:	681d      	ldr	r5, [r3, #0]
 8013cb2:	4606      	mov	r6, r0
 8013cb4:	460c      	mov	r4, r1
 8013cb6:	b125      	cbz	r5, 8013cc2 <__swsetup_r+0x16>
 8013cb8:	69ab      	ldr	r3, [r5, #24]
 8013cba:	b913      	cbnz	r3, 8013cc2 <__swsetup_r+0x16>
 8013cbc:	4628      	mov	r0, r5
 8013cbe:	f7ff f8c3 	bl	8012e48 <__sinit>
 8013cc2:	4b2e      	ldr	r3, [pc, #184]	; (8013d7c <__swsetup_r+0xd0>)
 8013cc4:	429c      	cmp	r4, r3
 8013cc6:	d10f      	bne.n	8013ce8 <__swsetup_r+0x3c>
 8013cc8:	686c      	ldr	r4, [r5, #4]
 8013cca:	89a3      	ldrh	r3, [r4, #12]
 8013ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013cd0:	0719      	lsls	r1, r3, #28
 8013cd2:	d42c      	bmi.n	8013d2e <__swsetup_r+0x82>
 8013cd4:	06dd      	lsls	r5, r3, #27
 8013cd6:	d411      	bmi.n	8013cfc <__swsetup_r+0x50>
 8013cd8:	2309      	movs	r3, #9
 8013cda:	6033      	str	r3, [r6, #0]
 8013cdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013ce0:	81a3      	strh	r3, [r4, #12]
 8013ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ce6:	e03e      	b.n	8013d66 <__swsetup_r+0xba>
 8013ce8:	4b25      	ldr	r3, [pc, #148]	; (8013d80 <__swsetup_r+0xd4>)
 8013cea:	429c      	cmp	r4, r3
 8013cec:	d101      	bne.n	8013cf2 <__swsetup_r+0x46>
 8013cee:	68ac      	ldr	r4, [r5, #8]
 8013cf0:	e7eb      	b.n	8013cca <__swsetup_r+0x1e>
 8013cf2:	4b24      	ldr	r3, [pc, #144]	; (8013d84 <__swsetup_r+0xd8>)
 8013cf4:	429c      	cmp	r4, r3
 8013cf6:	bf08      	it	eq
 8013cf8:	68ec      	ldreq	r4, [r5, #12]
 8013cfa:	e7e6      	b.n	8013cca <__swsetup_r+0x1e>
 8013cfc:	0758      	lsls	r0, r3, #29
 8013cfe:	d512      	bpl.n	8013d26 <__swsetup_r+0x7a>
 8013d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d02:	b141      	cbz	r1, 8013d16 <__swsetup_r+0x6a>
 8013d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d08:	4299      	cmp	r1, r3
 8013d0a:	d002      	beq.n	8013d12 <__swsetup_r+0x66>
 8013d0c:	4630      	mov	r0, r6
 8013d0e:	f7ff f989 	bl	8013024 <_free_r>
 8013d12:	2300      	movs	r3, #0
 8013d14:	6363      	str	r3, [r4, #52]	; 0x34
 8013d16:	89a3      	ldrh	r3, [r4, #12]
 8013d18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013d1c:	81a3      	strh	r3, [r4, #12]
 8013d1e:	2300      	movs	r3, #0
 8013d20:	6063      	str	r3, [r4, #4]
 8013d22:	6923      	ldr	r3, [r4, #16]
 8013d24:	6023      	str	r3, [r4, #0]
 8013d26:	89a3      	ldrh	r3, [r4, #12]
 8013d28:	f043 0308 	orr.w	r3, r3, #8
 8013d2c:	81a3      	strh	r3, [r4, #12]
 8013d2e:	6923      	ldr	r3, [r4, #16]
 8013d30:	b94b      	cbnz	r3, 8013d46 <__swsetup_r+0x9a>
 8013d32:	89a3      	ldrh	r3, [r4, #12]
 8013d34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013d3c:	d003      	beq.n	8013d46 <__swsetup_r+0x9a>
 8013d3e:	4621      	mov	r1, r4
 8013d40:	4630      	mov	r0, r6
 8013d42:	f000 f84d 	bl	8013de0 <__smakebuf_r>
 8013d46:	89a0      	ldrh	r0, [r4, #12]
 8013d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013d4c:	f010 0301 	ands.w	r3, r0, #1
 8013d50:	d00a      	beq.n	8013d68 <__swsetup_r+0xbc>
 8013d52:	2300      	movs	r3, #0
 8013d54:	60a3      	str	r3, [r4, #8]
 8013d56:	6963      	ldr	r3, [r4, #20]
 8013d58:	425b      	negs	r3, r3
 8013d5a:	61a3      	str	r3, [r4, #24]
 8013d5c:	6923      	ldr	r3, [r4, #16]
 8013d5e:	b943      	cbnz	r3, 8013d72 <__swsetup_r+0xc6>
 8013d60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013d64:	d1ba      	bne.n	8013cdc <__swsetup_r+0x30>
 8013d66:	bd70      	pop	{r4, r5, r6, pc}
 8013d68:	0781      	lsls	r1, r0, #30
 8013d6a:	bf58      	it	pl
 8013d6c:	6963      	ldrpl	r3, [r4, #20]
 8013d6e:	60a3      	str	r3, [r4, #8]
 8013d70:	e7f4      	b.n	8013d5c <__swsetup_r+0xb0>
 8013d72:	2000      	movs	r0, #0
 8013d74:	e7f7      	b.n	8013d66 <__swsetup_r+0xba>
 8013d76:	bf00      	nop
 8013d78:	2000001c 	.word	0x2000001c
 8013d7c:	08016be8 	.word	0x08016be8
 8013d80:	08016c08 	.word	0x08016c08
 8013d84:	08016bc8 	.word	0x08016bc8

08013d88 <abort>:
 8013d88:	b508      	push	{r3, lr}
 8013d8a:	2006      	movs	r0, #6
 8013d8c:	f000 f890 	bl	8013eb0 <raise>
 8013d90:	2001      	movs	r0, #1
 8013d92:	f7ed fac5 	bl	8001320 <_exit>

08013d96 <__swhatbuf_r>:
 8013d96:	b570      	push	{r4, r5, r6, lr}
 8013d98:	460e      	mov	r6, r1
 8013d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d9e:	2900      	cmp	r1, #0
 8013da0:	b096      	sub	sp, #88	; 0x58
 8013da2:	4614      	mov	r4, r2
 8013da4:	461d      	mov	r5, r3
 8013da6:	da07      	bge.n	8013db8 <__swhatbuf_r+0x22>
 8013da8:	2300      	movs	r3, #0
 8013daa:	602b      	str	r3, [r5, #0]
 8013dac:	89b3      	ldrh	r3, [r6, #12]
 8013dae:	061a      	lsls	r2, r3, #24
 8013db0:	d410      	bmi.n	8013dd4 <__swhatbuf_r+0x3e>
 8013db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013db6:	e00e      	b.n	8013dd6 <__swhatbuf_r+0x40>
 8013db8:	466a      	mov	r2, sp
 8013dba:	f000 f895 	bl	8013ee8 <_fstat_r>
 8013dbe:	2800      	cmp	r0, #0
 8013dc0:	dbf2      	blt.n	8013da8 <__swhatbuf_r+0x12>
 8013dc2:	9a01      	ldr	r2, [sp, #4]
 8013dc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013dc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013dcc:	425a      	negs	r2, r3
 8013dce:	415a      	adcs	r2, r3
 8013dd0:	602a      	str	r2, [r5, #0]
 8013dd2:	e7ee      	b.n	8013db2 <__swhatbuf_r+0x1c>
 8013dd4:	2340      	movs	r3, #64	; 0x40
 8013dd6:	2000      	movs	r0, #0
 8013dd8:	6023      	str	r3, [r4, #0]
 8013dda:	b016      	add	sp, #88	; 0x58
 8013ddc:	bd70      	pop	{r4, r5, r6, pc}
	...

08013de0 <__smakebuf_r>:
 8013de0:	898b      	ldrh	r3, [r1, #12]
 8013de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013de4:	079d      	lsls	r5, r3, #30
 8013de6:	4606      	mov	r6, r0
 8013de8:	460c      	mov	r4, r1
 8013dea:	d507      	bpl.n	8013dfc <__smakebuf_r+0x1c>
 8013dec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013df0:	6023      	str	r3, [r4, #0]
 8013df2:	6123      	str	r3, [r4, #16]
 8013df4:	2301      	movs	r3, #1
 8013df6:	6163      	str	r3, [r4, #20]
 8013df8:	b002      	add	sp, #8
 8013dfa:	bd70      	pop	{r4, r5, r6, pc}
 8013dfc:	ab01      	add	r3, sp, #4
 8013dfe:	466a      	mov	r2, sp
 8013e00:	f7ff ffc9 	bl	8013d96 <__swhatbuf_r>
 8013e04:	9900      	ldr	r1, [sp, #0]
 8013e06:	4605      	mov	r5, r0
 8013e08:	4630      	mov	r0, r6
 8013e0a:	f7ff f95b 	bl	80130c4 <_malloc_r>
 8013e0e:	b948      	cbnz	r0, 8013e24 <__smakebuf_r+0x44>
 8013e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e14:	059a      	lsls	r2, r3, #22
 8013e16:	d4ef      	bmi.n	8013df8 <__smakebuf_r+0x18>
 8013e18:	f023 0303 	bic.w	r3, r3, #3
 8013e1c:	f043 0302 	orr.w	r3, r3, #2
 8013e20:	81a3      	strh	r3, [r4, #12]
 8013e22:	e7e3      	b.n	8013dec <__smakebuf_r+0xc>
 8013e24:	4b0d      	ldr	r3, [pc, #52]	; (8013e5c <__smakebuf_r+0x7c>)
 8013e26:	62b3      	str	r3, [r6, #40]	; 0x28
 8013e28:	89a3      	ldrh	r3, [r4, #12]
 8013e2a:	6020      	str	r0, [r4, #0]
 8013e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e30:	81a3      	strh	r3, [r4, #12]
 8013e32:	9b00      	ldr	r3, [sp, #0]
 8013e34:	6163      	str	r3, [r4, #20]
 8013e36:	9b01      	ldr	r3, [sp, #4]
 8013e38:	6120      	str	r0, [r4, #16]
 8013e3a:	b15b      	cbz	r3, 8013e54 <__smakebuf_r+0x74>
 8013e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e40:	4630      	mov	r0, r6
 8013e42:	f000 f863 	bl	8013f0c <_isatty_r>
 8013e46:	b128      	cbz	r0, 8013e54 <__smakebuf_r+0x74>
 8013e48:	89a3      	ldrh	r3, [r4, #12]
 8013e4a:	f023 0303 	bic.w	r3, r3, #3
 8013e4e:	f043 0301 	orr.w	r3, r3, #1
 8013e52:	81a3      	strh	r3, [r4, #12]
 8013e54:	89a0      	ldrh	r0, [r4, #12]
 8013e56:	4305      	orrs	r5, r0
 8013e58:	81a5      	strh	r5, [r4, #12]
 8013e5a:	e7cd      	b.n	8013df8 <__smakebuf_r+0x18>
 8013e5c:	08012de1 	.word	0x08012de1

08013e60 <_raise_r>:
 8013e60:	291f      	cmp	r1, #31
 8013e62:	b538      	push	{r3, r4, r5, lr}
 8013e64:	4604      	mov	r4, r0
 8013e66:	460d      	mov	r5, r1
 8013e68:	d904      	bls.n	8013e74 <_raise_r+0x14>
 8013e6a:	2316      	movs	r3, #22
 8013e6c:	6003      	str	r3, [r0, #0]
 8013e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8013e72:	bd38      	pop	{r3, r4, r5, pc}
 8013e74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013e76:	b112      	cbz	r2, 8013e7e <_raise_r+0x1e>
 8013e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013e7c:	b94b      	cbnz	r3, 8013e92 <_raise_r+0x32>
 8013e7e:	4620      	mov	r0, r4
 8013e80:	f000 f830 	bl	8013ee4 <_getpid_r>
 8013e84:	462a      	mov	r2, r5
 8013e86:	4601      	mov	r1, r0
 8013e88:	4620      	mov	r0, r4
 8013e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e8e:	f000 b817 	b.w	8013ec0 <_kill_r>
 8013e92:	2b01      	cmp	r3, #1
 8013e94:	d00a      	beq.n	8013eac <_raise_r+0x4c>
 8013e96:	1c59      	adds	r1, r3, #1
 8013e98:	d103      	bne.n	8013ea2 <_raise_r+0x42>
 8013e9a:	2316      	movs	r3, #22
 8013e9c:	6003      	str	r3, [r0, #0]
 8013e9e:	2001      	movs	r0, #1
 8013ea0:	e7e7      	b.n	8013e72 <_raise_r+0x12>
 8013ea2:	2400      	movs	r4, #0
 8013ea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013ea8:	4628      	mov	r0, r5
 8013eaa:	4798      	blx	r3
 8013eac:	2000      	movs	r0, #0
 8013eae:	e7e0      	b.n	8013e72 <_raise_r+0x12>

08013eb0 <raise>:
 8013eb0:	4b02      	ldr	r3, [pc, #8]	; (8013ebc <raise+0xc>)
 8013eb2:	4601      	mov	r1, r0
 8013eb4:	6818      	ldr	r0, [r3, #0]
 8013eb6:	f7ff bfd3 	b.w	8013e60 <_raise_r>
 8013eba:	bf00      	nop
 8013ebc:	2000001c 	.word	0x2000001c

08013ec0 <_kill_r>:
 8013ec0:	b538      	push	{r3, r4, r5, lr}
 8013ec2:	4d07      	ldr	r5, [pc, #28]	; (8013ee0 <_kill_r+0x20>)
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	4604      	mov	r4, r0
 8013ec8:	4608      	mov	r0, r1
 8013eca:	4611      	mov	r1, r2
 8013ecc:	602b      	str	r3, [r5, #0]
 8013ece:	f7ed fa15 	bl	80012fc <_kill>
 8013ed2:	1c43      	adds	r3, r0, #1
 8013ed4:	d102      	bne.n	8013edc <_kill_r+0x1c>
 8013ed6:	682b      	ldr	r3, [r5, #0]
 8013ed8:	b103      	cbz	r3, 8013edc <_kill_r+0x1c>
 8013eda:	6023      	str	r3, [r4, #0]
 8013edc:	bd38      	pop	{r3, r4, r5, pc}
 8013ede:	bf00      	nop
 8013ee0:	2000d404 	.word	0x2000d404

08013ee4 <_getpid_r>:
 8013ee4:	f7ed ba02 	b.w	80012ec <_getpid>

08013ee8 <_fstat_r>:
 8013ee8:	b538      	push	{r3, r4, r5, lr}
 8013eea:	4d07      	ldr	r5, [pc, #28]	; (8013f08 <_fstat_r+0x20>)
 8013eec:	2300      	movs	r3, #0
 8013eee:	4604      	mov	r4, r0
 8013ef0:	4608      	mov	r0, r1
 8013ef2:	4611      	mov	r1, r2
 8013ef4:	602b      	str	r3, [r5, #0]
 8013ef6:	f7ed fa62 	bl	80013be <_fstat>
 8013efa:	1c43      	adds	r3, r0, #1
 8013efc:	d102      	bne.n	8013f04 <_fstat_r+0x1c>
 8013efe:	682b      	ldr	r3, [r5, #0]
 8013f00:	b103      	cbz	r3, 8013f04 <_fstat_r+0x1c>
 8013f02:	6023      	str	r3, [r4, #0]
 8013f04:	bd38      	pop	{r3, r4, r5, pc}
 8013f06:	bf00      	nop
 8013f08:	2000d404 	.word	0x2000d404

08013f0c <_isatty_r>:
 8013f0c:	b538      	push	{r3, r4, r5, lr}
 8013f0e:	4d06      	ldr	r5, [pc, #24]	; (8013f28 <_isatty_r+0x1c>)
 8013f10:	2300      	movs	r3, #0
 8013f12:	4604      	mov	r4, r0
 8013f14:	4608      	mov	r0, r1
 8013f16:	602b      	str	r3, [r5, #0]
 8013f18:	f7ed fa61 	bl	80013de <_isatty>
 8013f1c:	1c43      	adds	r3, r0, #1
 8013f1e:	d102      	bne.n	8013f26 <_isatty_r+0x1a>
 8013f20:	682b      	ldr	r3, [r5, #0]
 8013f22:	b103      	cbz	r3, 8013f26 <_isatty_r+0x1a>
 8013f24:	6023      	str	r3, [r4, #0]
 8013f26:	bd38      	pop	{r3, r4, r5, pc}
 8013f28:	2000d404 	.word	0x2000d404

08013f2c <_init>:
 8013f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f2e:	bf00      	nop
 8013f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f32:	bc08      	pop	{r3}
 8013f34:	469e      	mov	lr, r3
 8013f36:	4770      	bx	lr

08013f38 <_fini>:
 8013f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f3a:	bf00      	nop
 8013f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f3e:	bc08      	pop	{r3}
 8013f40:	469e      	mov	lr, r3
 8013f42:	4770      	bx	lr
