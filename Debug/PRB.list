
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003824  08015cb0  08015cb0  00025cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080194d4  080194d4  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  080194d4  080194d4  000294d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080194dc  080194dc  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080194dc  080194dc  000294dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080194e0  080194e0  000294e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080194e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
 10 .bss          0000d2cc  20000084  20000084  00030084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000d350  2000d350  00030084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00045de5  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000865b  00000000  00000000  00075e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002070  00000000  00000000  0007e4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ec8  00000000  00000000  00080568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032e24  00000000  00000000  00082430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034c00  00000000  00000000  000b5254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef9e1  00000000  00000000  000e9e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d9835  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008b50  00000000  00000000  001d9888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015c98 	.word	0x08015c98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08015c98 	.word	0x08015c98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <set_bit>:
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	80fb      	strh	r3, [r7, #6]
 8000574:	4613      	mov	r3, r2
 8000576:	717b      	strb	r3, [r7, #5]
 8000578:	797b      	ldrb	r3, [r7, #5]
 800057a:	2201      	movs	r2, #1
 800057c:	fa02 f303 	lsl.w	r3, r2, r3
 8000580:	b21a      	sxth	r2, r3
 8000582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000586:	4313      	orrs	r3, r2
 8000588:	b21b      	sxth	r3, r3
 800058a:	b29b      	uxth	r3, r3
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <ethernet_thread>:

static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer);
static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf);

void ethernet_thread(void *arg)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b0cc      	sub	sp, #304	; 0x130
 800059c:	af02      	add	r7, sp, #8
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	6018      	str	r0, [r3, #0]
	struct netconn *conn;
	struct netbuf *buf;
	ip_addr_t *client_addr;
	unsigned short local_port;
	unsigned short client_port;
	local_port = *((unsigned short*)arg);
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	void* data;
	uint8_t answer[256];
	u16_t len;
	uint16_t answer_len;
	conn = netconn_new(NETCONN_UDP);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	2020      	movs	r0, #32
 80005b2:	f007 f9b5 	bl	8007920 <netconn_new_with_proto_and_callback>
 80005b6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	if (conn!= NULL)
 80005ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d05b      	beq.n	800067a <ethernet_thread+0xe2>
	{
	  err = netconn_bind(conn, IP_ADDR_ANY, local_port);
 80005c2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80005c6:	461a      	mov	r2, r3
 80005c8:	492e      	ldr	r1, [pc, #184]	; (8000684 <ethernet_thread+0xec>)
 80005ca:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80005ce:	f007 fa61 	bl	8007a94 <netconn_bind>
 80005d2:	4603      	mov	r3, r0
 80005d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (err == ERR_OK)
 80005d8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d148      	bne.n	8000672 <ethernet_thread+0xda>
	  {
		  for(;;)
		  {
			  recv_err = netconn_recv(conn, &buf);
 80005e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80005e4:	4619      	mov	r1, r3
 80005e6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80005ea:	f007 fc07 	bl	8007dfc <netconn_recv>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
			  if (recv_err == ERR_OK)
 80005f4:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1f1      	bne.n	80005e0 <ethernet_thread+0x48>
			  {
				  client_addr = netbuf_fromaddr(buf);
 80005fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000600:	3308      	adds	r3, #8
 8000602:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				  client_port = netbuf_fromport(buf);
 8000606:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800060a:	899b      	ldrh	r3, [r3, #12]
 800060c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

				  netbuf_data(buf, &data, &len);
 8000610:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000614:	f107 020a 	add.w	r2, r7, #10
 8000618:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800061c:	4618      	mov	r0, r3
 800061e:	f008 ffbf 	bl	80095a0 <netbuf_data>
				  answer_len = ethernet_answer(data, len, answer);
 8000622:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000626:	f107 030a 	add.w	r3, r7, #10
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	f107 020c 	add.w	r2, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	f000 f859 	bl	80006e8 <ethernet_answer>
 8000636:	4603      	mov	r3, r0
 8000638:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				  if(answer_len)
 800063c:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000640:	2b00      	cmp	r3, #0
 8000642:	d010      	beq.n	8000666 <ethernet_thread+0xce>
				  {
					  Send(conn, answer, answer_len, client_addr, client_port, buf);
 8000644:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000648:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800064c:	f107 010c 	add.w	r1, r7, #12
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800065c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000660:	f000 f812 	bl	8000688 <Send>
 8000664:	e7bc      	b.n	80005e0 <ethernet_thread+0x48>
				  }
				  else netbuf_delete(buf);
 8000666:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800066a:	4618      	mov	r0, r3
 800066c:	f008 ff2e 	bl	80094cc <netbuf_delete>
			  recv_err = netconn_recv(conn, &buf);
 8000670:	e7b6      	b.n	80005e0 <ethernet_thread+0x48>

		  }
	  }
	  else
	  {
	    netconn_delete(conn);
 8000672:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000676:	f007 f9f1 	bl	8007a5c <netconn_delete>
	  }
	}
}
 800067a:	bf00      	nop
 800067c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	0801936c 	.word	0x0801936c

08000688 <Send>:

static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4613      	mov	r3, r2
 8000696:	80fb      	strh	r3, [r7, #6]
	u32_t address = addr->addr;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	617b      	str	r3, [r7, #20]
	netbuf_delete(buf);
 800069e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006a0:	f008 ff14 	bl	80094cc <netbuf_delete>
	buf = netbuf_new();
 80006a4:	f008 fefe 	bl	80094a4 <netbuf_new>
 80006a8:	6278      	str	r0, [r7, #36]	; 0x24
	buf->port = port;
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	8c3a      	ldrh	r2, [r7, #32]
 80006ae:	819a      	strh	r2, [r3, #12]
	addr->addr = address;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	697a      	ldr	r2, [r7, #20]
 80006b4:	601a      	str	r2, [r3, #0]
	err_t err;
	err  = netbuf_ref(buf, pointer, size);
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	461a      	mov	r2, r3
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006be:	f008 ff25 	bl	800950c <netbuf_ref>
 80006c2:	4603      	mov	r3, r0
 80006c4:	74fb      	strb	r3, [r7, #19]
	if(err==ERR_OK)
 80006c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d108      	bne.n	80006e0 <Send+0x58>
	{
		netconn_sendto(conn, buf, addr, port);
 80006ce:	8c3b      	ldrh	r3, [r7, #32]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f007 fc0b 	bl	8007ef0 <netconn_sendto>
		netbuf_delete(buf);
 80006da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006dc:	f008 fef6 	bl	80094cc <netbuf_delete>
	}
}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <ethernet_answer>:

//Возвращает кол-во байт для отправки клиенту
static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	460b      	mov	r3, r1
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	817b      	strh	r3, [r7, #10]
	int result = ModbusParse(data, data_length, answer, ETHERNET);
 80006f6:	8979      	ldrh	r1, [r7, #10]
 80006f8:	2301      	movs	r3, #1
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f000 f99d 	bl	8000a3c <ModbusParse>
 8000702:	6178      	str	r0, [r7, #20]
	if(result)return result;
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <ethernet_answer+0x26>
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	e000      	b.n	8000710 <ethernet_answer+0x28>
	return 0;
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4a07      	ldr	r2, [pc, #28]	; (8000744 <vApplicationGetIdleTaskMemory+0x2c>)
 8000728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <vApplicationGetIdleTaskMemory+0x30>)
 800072e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	200000a0 	.word	0x200000a0
 8000748:	20000154 	.word	0x20000154

0800074c <task_init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task_init()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af02      	add	r7, sp, #8
	size_t fre = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
	fre=xPortGetFreeHeapSize();
 8000756:	f006 fffd 	bl	8007754 <xPortGetFreeHeapSize>
 800075a:	6078      	str	r0, [r7, #4]
	sys_thread_new("eth_thread1", ethernet_thread, (void*)&port1, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 800075c:	2300      	movs	r3, #0
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <task_init+0x48>)
 8000766:	490c      	ldr	r1, [pc, #48]	; (8000798 <task_init+0x4c>)
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <task_init+0x50>)
 800076a:	f014 f987 	bl	8014a7c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 800076e:	f006 fff1 	bl	8007754 <xPortGetFreeHeapSize>
 8000772:	6078      	str	r0, [r7, #4]
	sys_thread_new("eth_thread2", ethernet_thread, (void*)&port2, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000774:	2300      	movs	r3, #0
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <task_init+0x54>)
 800077e:	4906      	ldr	r1, [pc, #24]	; (8000798 <task_init+0x4c>)
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <task_init+0x58>)
 8000782:	f014 f97b 	bl	8014a7c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8000786:	f006 ffe5 	bl	8007754 <xPortGetFreeHeapSize>
 800078a:	6078      	str	r0, [r7, #4]
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000000 	.word	0x20000000
 8000798:	08000599 	.word	0x08000599
 800079c:	08015cb0 	.word	0x08015cb0
 80007a0:	20000002 	.word	0x20000002
 80007a4:	08015cbc 	.word	0x08015cbc

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b5b0      	push	{r4, r5, r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ModbusInit();
 80007ae:	f000 f91d 	bl	80009ec <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 ff6b 	bl	800168c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f829 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f897 	bl	80008ec <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2101      	movs	r1, #1
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 f9bf 	bl	8004b50 <osSemaphoreCreate>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <main+0x58>)
 80007d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <main+0x5c>)
 80007da:	1d3c      	adds	r4, r7, #4
 80007dc:	461d      	mov	r5, r3
 80007de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f004 f8b1 	bl	8004956 <osThreadCreate>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <main+0x60>)
 80007f8:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007fa:	f004 f895 	bl	8004928 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <main+0x56>
 8000800:	20006990 	.word	0x20006990
 8000804:	08015cd4 	.word	0x08015cd4
 8000808:	2000698c 	.word	0x2000698c

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2230      	movs	r2, #48	; 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f014 fab0 	bl	8014d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <SystemClock_Config+0xd8>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a2a      	ldr	r2, [pc, #168]	; (80008e4 <SystemClock_Config+0xd8>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <SystemClock_Config+0xd8>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <SystemClock_Config+0xdc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <SystemClock_Config+0xdc>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <SystemClock_Config+0xdc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000868:	2301      	movs	r3, #1
 800086a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800087c:	2319      	movs	r3, #25
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000880:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000884:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800088a:	2304      	movs	r3, #4
 800088c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	4618      	mov	r0, r3
 8000894:	f002 fb84 	bl	8002fa0 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800089e:	f000 f89f 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2302      	movs	r3, #2
 80008a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2105      	movs	r1, #5
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 fde5 	bl	8003490 <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008cc:	f000 f888 	bl	80009e0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80008d6:	2000      	movs	r0, #0
 80008d8:	f002 fec0 	bl	800365c <HAL_RCC_MCOConfig>
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	; 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <MX_GPIO_Init+0xb0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a24      	ldr	r2, [pc, #144]	; (800099c <MX_GPIO_Init+0xb0>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b22      	ldr	r3, [pc, #136]	; (800099c <MX_GPIO_Init+0xb0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_GPIO_Init+0xb0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a1d      	ldr	r2, [pc, #116]	; (800099c <MX_GPIO_Init+0xb0>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_GPIO_Init+0xb0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_GPIO_Init+0xb0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a16      	ldr	r2, [pc, #88]	; (800099c <MX_GPIO_Init+0xb0>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_GPIO_Init+0xb0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_GPIO_Init+0xb0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <MX_GPIO_Init+0xb0>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_GPIO_Init+0xb0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_GPIO_Init+0xb4>)
 8000990:	f002 f96a 	bl	8002c68 <HAL_GPIO_Init>

}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	; 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000

080009a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80009ac:	f003 fa74 	bl	8003e98 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  task_init();
 80009b0:	f7ff fecc 	bl	800074c <task_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f004 f81a 	bl	80049ee <osDelay>
 80009ba:	e7fb      	b.n	80009b4 <StartDefaultTask+0x10>

080009bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d101      	bne.n	80009d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ce:	f000 fe7f 	bl	80016d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40010000 	.word	0x40010000

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <ModbusInit+0x38>)
 80009f2:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <ModbusInit+0x3c>)
 80009f4:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <ModbusInit+0x40>)
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <ModbusInit+0x44>)
 80009fa:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(settings)/2;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <ModbusInit+0x48>)
 80009fe:	2233      	movs	r2, #51	; 0x33
 8000a00:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <ModbusInit+0x4c>)
 8000a04:	2228      	movs	r2, #40	; 0x28
 8000a06:	801a      	strh	r2, [r3, #0]
	if(settings.mb_addr==0)settings.mb_addr = 1;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <ModbusInit+0x3c>)
 8000a0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d103      	bne.n	8000a1a <ModbusInit+0x2e>
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <ModbusInit+0x3c>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	20000354 	.word	0x20000354
 8000a28:	20006994 	.word	0x20006994
 8000a2c:	20000358 	.word	0x20000358
 8000a30:	200069fc 	.word	0x200069fc
 8000a34:	2000035c 	.word	0x2000035c
 8000a38:	2000035e 	.word	0x2000035e

08000a3c <ModbusParse>:


//Ф-я парсинга входящего буфера, если это Modbus, то возвращает кол-во байт
int ModbusParse(uint8_t *request, uint16_t req_length, uint8_t *answer, ModbusSource source)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	461a      	mov	r2, r3
 8000a48:	460b      	mov	r3, r1
 8000a4a:	817b      	strh	r3, [r7, #10]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	727b      	strb	r3, [r7, #9]
	settings.data[37]++;
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <ModbusParse+0xb0>)
 8000a52:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8000a56:	3301      	adds	r3, #1
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b24      	ldr	r3, [pc, #144]	; (8000aec <ModbusParse+0xb0>)
 8000a5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	if(answer==NULL)return 0; // Проверка, выделилась ли память под ответ
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <ModbusParse+0x2e>
 8000a66:	2300      	movs	r3, #0
 8000a68:	e03c      	b.n	8000ae4 <ModbusParse+0xa8>
	if(!CheckRequestLength(request,req_length,source))return 0; // Проверка корректности длины пакета
 8000a6a:	897b      	ldrh	r3, [r7, #10]
 8000a6c:	7a7a      	ldrb	r2, [r7, #9]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f000 f83d 	bl	8000af0 <CheckRequestLength>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d101      	bne.n	8000a80 <ModbusParse+0x44>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e031      	b.n	8000ae4 <ModbusParse+0xa8>
	if(!CheckMbAddr(request, source))return 0; // Проверка корректности адреса
 8000a80:	7a7b      	ldrb	r3, [r7, #9]
 8000a82:	4619      	mov	r1, r3
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f000 f857 	bl	8000b38 <CheckMbAddr>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d101      	bne.n	8000a94 <ModbusParse+0x58>
 8000a90:	2300      	movs	r3, #0
 8000a92:	e027      	b.n	8000ae4 <ModbusParse+0xa8>
	if(!IsCorrectMbCommand(request, source))// Проверка корректности функционального кода
 8000a94:	7a7b      	ldrb	r3, [r7, #9]
 8000a96:	4619      	mov	r1, r3
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f000 f875 	bl	8000b88 <IsCorrectMbCommand>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d107      	bne.n	8000ab4 <ModbusParse+0x78>
	{
		return SetInvalidCommand(request, answer, 1, source);
 8000aa4:	7a7b      	ldrb	r3, [r7, #9]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	6879      	ldr	r1, [r7, #4]
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f000 f8a0 	bl	8000bf0 <SetInvalidCommand>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	e017      	b.n	8000ae4 <ModbusParse+0xa8>
	}
	if(!CheckCrc(request, req_length, source))
 8000ab4:	897b      	ldrh	r3, [r7, #10]
 8000ab6:	7a7a      	ldrb	r2, [r7, #9]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f000 f941 	bl	8000d42 <CheckCrc>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d107      	bne.n	8000ad6 <ModbusParse+0x9a>
	{
		return SetInvalidCommand(request, answer, 3, source);
 8000ac6:	7a7b      	ldrb	r3, [r7, #9]
 8000ac8:	2203      	movs	r2, #3
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f000 f88f 	bl	8000bf0 <SetInvalidCommand>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	e006      	b.n	8000ae4 <ModbusParse+0xa8>
	}
	return GetModbusAnswer(request, answer, source);
 8000ad6:	7a7b      	ldrb	r3, [r7, #9]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f000 f965 	bl	8000dac <GetModbusAnswer>
 8000ae2:	4603      	mov	r3, r0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20006994 	.word	0x20006994

08000af0 <CheckRequestLength>:

//Проверка соответствия длины данных, передаваемых в буфере
static uint8_t CheckRequestLength(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b087      	sub	sp, #28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	4613      	mov	r3, r2
 8000afc:	71fb      	strb	r3, [r7, #7]
	if(source==RS485)return 1;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <CheckRequestLength+0x18>
 8000b04:	2301      	movs	r3, #1
 8000b06:	e010      	b.n	8000b2a <CheckRequestLength+0x3a>
    int len_from_packet = (*(request_pointer+4))*256 + *(request_pointer+5);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	3205      	adds	r2, #5
 8000b14:	7812      	ldrb	r2, [r2, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	617b      	str	r3, [r7, #20]
    return len_from_packet+6 == request_length;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3306      	adds	r3, #6
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	bf0c      	ite	eq
 8000b24:	2301      	moveq	r3, #1
 8000b26:	2300      	movne	r3, #0
 8000b28:	b2db      	uxtb	r3, r3
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	371c      	adds	r7, #28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <CheckMbAddr>:

//Проверка соответсия адреса в сети Modbus сервера
static uint8_t CheckMbAddr(uint8_t *request,ModbusSource source)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d103      	bne.n	8000b56 <CheckMbAddr+0x1e>
	{
		addr =  *(request+6);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	799b      	ldrb	r3, [r3, #6]
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	e005      	b.n	8000b62 <CheckMbAddr+0x2a>
	}
	else if(source==RS485)
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <CheckMbAddr+0x2a>
	{
		addr =  *(request);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	73fb      	strb	r3, [r7, #15]
	}
	return addr == settings.mb_addr;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <CheckMbAddr+0x4c>)
 8000b68:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	bf0c      	ite	eq
 8000b70:	2301      	moveq	r3, #1
 8000b72:	2300      	movne	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20006994 	.word	0x20006994

08000b88 <IsCorrectMbCommand>:

//Проверка корректности функционального кода
static uint8_t IsCorrectMbCommand(uint8_t *request,ModbusSource source)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d103      	bne.n	8000ba6 <IsCorrectMbCommand+0x1e>
	{
		cmd = *(request+7);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	79db      	ldrb	r3, [r3, #7]
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	e005      	b.n	8000bb2 <IsCorrectMbCommand+0x2a>
	}
	else if(source==RS485)
 8000ba6:	78fb      	ldrb	r3, [r7, #3]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <IsCorrectMbCommand+0x2a>
	{
		cmd = *(request+1);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	785b      	ldrb	r3, [r3, #1]
 8000bb0:	73fb      	strb	r3, [r7, #15]
	}
	/*
	 * Функция возвращает 1, если номер команды корректен, 0 - если некорректен
	 * cmd - номер команды
	 * */
	switch (cmd) {
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	2b10      	cmp	r3, #16
 8000bb6:	bf8c      	ite	hi
 8000bb8:	2201      	movhi	r2, #1
 8000bba:	2200      	movls	r2, #0
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d10c      	bne.n	8000bdc <IsCorrectMbCommand+0x54>
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <IsCorrectMbCommand+0x64>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	bf14      	ite	ne
 8000bce:	2301      	movne	r3, #1
 8000bd0:	2300      	moveq	r3, #0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <IsCorrectMbCommand+0x54>
		case 3:
		case 4:
		case 6:
		//case 5:
        case 16:
            return 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <IsCorrectMbCommand+0x56>
		default:
			return 0;
 8000bdc:	2300      	movs	r3, #0
	}
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	00010058 	.word	0x00010058

08000bf0 <SetInvalidCommand>:

//Формирует телеграмму ошиобного запроса
static int SetInvalidCommand(uint8_t *request, uint8_t *answer, uint8_t code, ModbusSource source)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	460b      	mov	r3, r1
 8000c00:	71fb      	strb	r3, [r7, #7]
 8000c02:	4613      	mov	r3, r2
 8000c04:	71bb      	strb	r3, [r7, #6]
	uint8_t func_code = source ? *(request+1) : *(request+1);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	785b      	ldrb	r3, [r3, #1]
 8000c0a:	75fb      	strb	r3, [r7, #23]
	func_code = set_bit(func_code, 7);
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	2107      	movs	r1, #7
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fca8 	bl	8000568 <set_bit>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	75fb      	strb	r3, [r7, #23]
	if(source==RS485)
 8000c1c:	79bb      	ldrb	r3, [r7, #6]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d11d      	bne.n	8000c5e <SetInvalidCommand+0x6e>
	{
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8000c22:	2300      	movs	r3, #0
 8000c24:	82bb      	strh	r3, [r7, #20]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	781a      	ldrb	r2, [r3, #0]
		memcpy(answer,request,1);
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	701a      	strb	r2, [r3, #0]
		*(answer+1) = func_code;//Функциональный код с измененным битом
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	3301      	adds	r3, #1
 8000c32:	7dfa      	ldrb	r2, [r7, #23]
 8000c34:	701a      	strb	r2, [r3, #0]
		*(answer+2) = code;//Функциональный код с измененным битом
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	3302      	adds	r3, #2
 8000c3a:	79fa      	ldrb	r2, [r7, #7]
 8000c3c:	701a      	strb	r2, [r3, #0]
		CRC16_CALC(answer,check_sum,3);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	2203      	movs	r2, #3
 8000c44:	4619      	mov	r1, r3
 8000c46:	68b8      	ldr	r0, [r7, #8]
 8000c48:	f000 f832 	bl	8000cb0 <CRC16_CALC>
		*(answer+3) = check_sum[0];
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	3303      	adds	r3, #3
 8000c50:	7d3a      	ldrb	r2, [r7, #20]
 8000c52:	701a      	strb	r2, [r3, #0]
		*(answer+4) = check_sum[1];
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	3304      	adds	r3, #4
 8000c58:	7d7a      	ldrb	r2, [r7, #21]
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e01c      	b.n	8000c98 <SetInvalidCommand+0xa8>
	}
	else if(source==ETHERNET)
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d119      	bne.n	8000c98 <SetInvalidCommand+0xa8>
	{
		memcpy(answer,request,8);
 8000c64:	2208      	movs	r2, #8
 8000c66:	68f9      	ldr	r1, [r7, #12]
 8000c68:	68b8      	ldr	r0, [r7, #8]
 8000c6a:	f014 f87b 	bl	8014d64 <memcpy>
		*(answer+4) = 0;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
		*(answer+5) = 3;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3305      	adds	r3, #5
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	701a      	strb	r2, [r3, #0]
		*(answer+7) |= 128;
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	3307      	adds	r3, #7
 8000c82:	781a      	ldrb	r2, [r3, #0]
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	3307      	adds	r3, #7
 8000c88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	701a      	strb	r2, [r3, #0]
		*(answer+8) = code;
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	3308      	adds	r3, #8
 8000c94:	79fa      	ldrb	r2, [r7, #7]
 8000c96:	701a      	strb	r2, [r3, #0]
	}

	uint8_t len = source==RS485 ? 5 : 9;
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <SetInvalidCommand+0xb2>
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	e000      	b.n	8000ca4 <SetInvalidCommand+0xb4>
 8000ca2:	2309      	movs	r3, #9
 8000ca4:	75bb      	strb	r3, [r7, #22]
	return len;
 8000ca6:	7dbb      	ldrb	r3, [r7, #22]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <CRC16_CALC>:

static void CRC16_CALC(uint8_t* arr, uint8_t* checkSum, uint8_t messageLength)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	71fb      	strb	r3, [r7, #7]
	/*Функция расчета контрольной суммы
		 * arr - указатель на массив байт, по которым нужно посчитать CRC
		 * checkSum - указатель на массив из 2 байт, куда нужно положить CRC
		 * messageLength - ко-во байт, по которым нужно считать CRC	 *
		 * */
		uint16_t reg = 0xFFFF;
 8000cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc2:	83fb      	strh	r3, [r7, #30]
		uint16_t polinom = 0xA001;
 8000cc4:	f24a 0301 	movw	r3, #40961	; 0xa001
 8000cc8:	827b      	strh	r3, [r7, #18]
		for(int i=0;i < messageLength;i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
 8000cce:	e023      	b.n	8000d18 <CRC16_CALC+0x68>
		{
			reg^=*(arr+i);
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	8bfb      	ldrh	r3, [r7, #30]
 8000cdc:	4053      	eors	r3, r2
 8000cde:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	e012      	b.n	8000d0c <CRC16_CALC+0x5c>
			{
				if ((reg&1)==1) {
 8000ce6:	8bfb      	ldrh	r3, [r7, #30]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d007      	beq.n	8000d00 <CRC16_CALC+0x50>
					reg>>=1;
 8000cf0:	8bfb      	ldrh	r3, [r7, #30]
 8000cf2:	085b      	lsrs	r3, r3, #1
 8000cf4:	83fb      	strh	r3, [r7, #30]
					reg^=polinom;
 8000cf6:	8bfa      	ldrh	r2, [r7, #30]
 8000cf8:	8a7b      	ldrh	r3, [r7, #18]
 8000cfa:	4053      	eors	r3, r2
 8000cfc:	83fb      	strh	r3, [r7, #30]
 8000cfe:	e002      	b.n	8000d06 <CRC16_CALC+0x56>
				}
				else reg>>=1;
 8000d00:	8bfb      	ldrh	r3, [r7, #30]
 8000d02:	085b      	lsrs	r3, r3, #1
 8000d04:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	2b07      	cmp	r3, #7
 8000d10:	dde9      	ble.n	8000ce6 <CRC16_CALC+0x36>
		for(int i=0;i < messageLength;i++)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	3301      	adds	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbd7      	blt.n	8000cd0 <CRC16_CALC+0x20>
			}
		}
		*(checkSum+1)=(uint8_t)(reg>>8);
 8000d20:	8bfb      	ldrh	r3, [r7, #30]
 8000d22:	0a1b      	lsrs	r3, r3, #8
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	701a      	strb	r2, [r3, #0]
		*checkSum = (uint8_t)(reg & 0x00FF);
 8000d2e:	8bfb      	ldrh	r3, [r7, #30]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	701a      	strb	r2, [r3, #0]
}
 8000d36:	bf00      	nop
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <CheckCrc>:

//Проверка контрольной суммы запроса
static uint8_t CheckCrc(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	71fb      	strb	r3, [r7, #7]
	if(source==ETHERNET)return 1;
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d101      	bne.n	8000d5a <CheckCrc+0x18>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e024      	b.n	8000da4 <CheckCrc+0x62>
	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	82bb      	strh	r3, [r7, #20]
	if(request_length<4)return 0;
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	dc01      	bgt.n	8000d68 <CheckCrc+0x26>
 8000d64:	2300      	movs	r3, #0
 8000d66:	e01d      	b.n	8000da4 <CheckCrc+0x62>
	CRC16_CALC(request_pointer, check_sum, request_length-2);
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f7ff ff9a 	bl	8000cb0 <CRC16_CALC>
	return request_pointer[request_length-2]==check_sum[0] && request_pointer[request_length-1]==check_sum[1];
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	781a      	ldrb	r2, [r3, #0]
 8000d86:	7d3b      	ldrb	r3, [r7, #20]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d109      	bne.n	8000da0 <CheckCrc+0x5e>
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	7d7b      	ldrb	r3, [r7, #21]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d101      	bne.n	8000da0 <CheckCrc+0x5e>
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <CheckCrc+0x60>
 8000da0:	2300      	movs	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <GetModbusAnswer>:

//Возвращает кол-во байт, котрые нужно передать обратно
static int GetModbusAnswer(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	4613      	mov	r3, r2
 8000db8:	71fb      	strb	r3, [r7, #7]
	uint8_t func_code = source==RS485 ? *(request+1) : *(request+7);
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <GetModbusAnswer+0x1a>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	785b      	ldrb	r3, [r3, #1]
 8000dc4:	e001      	b.n	8000dca <GetModbusAnswer+0x1e>
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	79db      	ldrb	r3, [r3, #7]
 8000dca:	75fb      	strb	r3, [r7, #23]

	switch (func_code) {
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
 8000dce:	3b03      	subs	r3, #3
 8000dd0:	2b0d      	cmp	r3, #13
 8000dd2:	d849      	bhi.n	8000e68 <GetModbusAnswer+0xbc>
 8000dd4:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <GetModbusAnswer+0x30>)
 8000dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dda:	bf00      	nop
 8000ddc:	08000e15 	.word	0x08000e15
 8000de0:	08000e2f 	.word	0x08000e2f
 8000de4:	08000e69 	.word	0x08000e69
 8000de8:	08000e49 	.word	0x08000e49
 8000dec:	08000e69 	.word	0x08000e69
 8000df0:	08000e69 	.word	0x08000e69
 8000df4:	08000e69 	.word	0x08000e69
 8000df8:	08000e69 	.word	0x08000e69
 8000dfc:	08000e69 	.word	0x08000e69
 8000e00:	08000e69 	.word	0x08000e69
 8000e04:	08000e69 	.word	0x08000e69
 8000e08:	08000e69 	.word	0x08000e69
 8000e0c:	08000e69 	.word	0x08000e69
 8000e10:	08000e59 	.word	0x08000e59
		case READ_HOLDING_REGS:
			return ReadRegisters(request, answer, holding_pointer, holding_size, source);
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <GetModbusAnswer+0xc8>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <GetModbusAnswer+0xcc>)
 8000e1a:	8819      	ldrh	r1, [r3, #0]
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	460b      	mov	r3, r1
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f000 f831 	bl	8000e8c <ReadRegisters>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	e01e      	b.n	8000e6c <GetModbusAnswer+0xc0>
		case READ_INPUT_REGS:
			return ReadRegisters(request, answer, reading_pointer, reading_size, source);
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <GetModbusAnswer+0xd0>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <GetModbusAnswer+0xd4>)
 8000e34:	8819      	ldrh	r1, [r3, #0]
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f000 f824 	bl	8000e8c <ReadRegisters>
 8000e44:	4603      	mov	r3, r0
 8000e46:	e011      	b.n	8000e6c <GetModbusAnswer+0xc0>
		case WRITE_SINGLE_REG:
			return WriteToHoldings(request, answer, source, &WriteSingleRegister);
 8000e48:	79fa      	ldrb	r2, [r7, #7]
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <GetModbusAnswer+0xd8>)
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f000 f974 	bl	800113c <WriteToHoldings>
 8000e54:	4603      	mov	r3, r0
 8000e56:	e009      	b.n	8000e6c <GetModbusAnswer+0xc0>
		case WRITE_MULTIPLY_REGS:
			return WriteToHoldings(request, answer, source, &WrieMultiplyRegisters);
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <GetModbusAnswer+0xdc>)
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f000 f96c 	bl	800113c <WriteToHoldings>
 8000e64:	4603      	mov	r3, r0
 8000e66:	e001      	b.n	8000e6c <GetModbusAnswer+0xc0>
		default:
			break;
 8000e68:	bf00      	nop
	}
	return 0;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000354 	.word	0x20000354
 8000e78:	2000035c 	.word	0x2000035c
 8000e7c:	20000358 	.word	0x20000358
 8000e80:	2000035e 	.word	0x2000035e
 8000e84:	08001001 	.word	0x08001001
 8000e88:	08001085 	.word	0x08001085

08000e8c <ReadRegisters>:

//Ф-я чтения регистров из памяти memory_pointer размером memory_size
static int ReadRegisters(uint8_t *request, uint8_t *answer, uint16_t *memory_pointer, uint16_t memory_size, ModbusSource source)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	807b      	strh	r3, [r7, #2]
	uint16_t  maxAddr = memory_size-1;
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8000ea0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <ReadRegisters+0x20>
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	e000      	b.n	8000eae <ReadRegisters+0x22>
 8000eac:	2308      	movs	r3, #8
 8000eae:	4619      	mov	r1, r3
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f000 f84d 	bl	8000f50 <GetWordFromBytes>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8000eba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <ReadRegisters+0x3a>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e000      	b.n	8000ec8 <ReadRegisters+0x3c>
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	4619      	mov	r1, r3
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f000 f840 	bl	8000f50 <GetWordFromBytes>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	827b      	strh	r3, [r7, #18]
	if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8000ed4:	8aba      	ldrh	r2, [r7, #20]
 8000ed6:	8a7b      	ldrh	r3, [r7, #18]
 8000ed8:	4413      	add	r3, r2
 8000eda:	1e5a      	subs	r2, r3, #1
 8000edc:	8afb      	ldrh	r3, [r7, #22]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	dd08      	ble.n	8000ef4 <ReadRegisters+0x68>
 8000ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff fe80 	bl	8000bf0 <SetInvalidCommand>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	e029      	b.n	8000f48 <ReadRegisters+0xbc>
	if(source==ETHERNET)
 8000ef4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d124      	bne.n	8000f46 <ReadRegisters+0xba>
	{
		memcpy(answer,request,8);
 8000efc:	2208      	movs	r2, #8
 8000efe:	68f9      	ldr	r1, [r7, #12]
 8000f00:	68b8      	ldr	r0, [r7, #8]
 8000f02:	f013 ff2f 	bl	8014d64 <memcpy>
		InsertWordToMemory(reg_count*2+3, answer+4);//Длина сообщения
 8000f06:	8a7b      	ldrh	r3, [r7, #18]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3303      	adds	r3, #3
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	3304      	adds	r3, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4610      	mov	r0, r2
 8000f18:	f000 f835 	bl	8000f86 <InsertWordToMemory>
		*(answer+8) = reg_count*2;//количесво байт далее
 8000f1c:	8a7b      	ldrh	r3, [r7, #18]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	3308      	adds	r3, #8
 8000f24:	0052      	lsls	r2, r2, #1
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+9,reg_count);
 8000f2a:	8abb      	ldrh	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	18d0      	adds	r0, r2, r3
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	3309      	adds	r3, #9
 8000f36:	8a7a      	ldrh	r2, [r7, #18]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f000 f834 	bl	8000fa6 <InsertWordsToMemory>
		return 9+reg_count*2;
 8000f3e:	8a7b      	ldrh	r3, [r7, #18]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	3309      	adds	r3, #9
 8000f44:	e000      	b.n	8000f48 <ReadRegisters+0xbc>
	}
	else
	{

	}
	return 0;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <GetWordFromBytes>:

static uint16_t GetWordFromBytes(uint8_t *arr, uint8_t pos)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
	/*Получает 16 битное число из 2x байт, и возвращает его
	 * arr -  указатель на массив байт, из которого нужно получить word
	 * pos - индекс первого байта в массиве
	 *
	 * */
	return (((uint16_t)(*(arr+pos)))<<8) + (uint16_t)(*(arr + pos+1));
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	78fb      	ldrb	r3, [r7, #3]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	440b      	add	r3, r1
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	4413      	add	r3, r2
 8000f78:	b29b      	uxth	r3, r3
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <InsertWordToMemory>:

static void InsertWordToMemory(uint16_t value, uint8_t* memory)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	6039      	str	r1, [r7, #0]
 8000f90:	80fb      	strh	r3, [r7, #6]
    InsertWordsToMemory(&value,memory,1);
 8000f92:	1dbb      	adds	r3, r7, #6
 8000f94:	2201      	movs	r2, #1
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f804 	bl	8000fa6 <InsertWordsToMemory>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <InsertWordsToMemory>:

static void InsertWordsToMemory(uint16_t *source, uint8_t * destination, uint16_t count)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b087      	sub	sp, #28
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
    for(i=0;i<count*2;i+=2)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e014      	b.n	8000fe8 <InsertWordsToMemory+0x42>
    {
        *(destination+i+1)=*((uint8_t*)source+i);
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	441a      	add	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	440b      	add	r3, r1
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	701a      	strb	r2, [r3, #0]
        *(destination+i)=*((uint8_t*)source+i+1);
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	441a      	add	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	440b      	add	r3, r1
 8000fde:	7812      	ldrb	r2, [r2, #0]
 8000fe0:	701a      	strb	r2, [r3, #0]
    for(i=0;i<count*2;i+=2)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	dbe5      	blt.n	8000fbe <InsertWordsToMemory+0x18>
    }
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <WriteSingleRegister>:


static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	4613      	mov	r3, r2
 800100c:	71fb      	strb	r3, [r7, #7]
    uint16_t  maxAddr = holding_size-1;
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <WriteSingleRegister+0x7c>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	3b01      	subs	r3, #1
 8001014:	82fb      	strh	r3, [r7, #22]
    uint16_t addr = GetWordFromBytes(request,source==RS485?2:8);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <WriteSingleRegister+0x20>
 800101c:	2302      	movs	r3, #2
 800101e:	e000      	b.n	8001022 <WriteSingleRegister+0x22>
 8001020:	2308      	movs	r3, #8
 8001022:	4619      	mov	r1, r3
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff ff93 	bl	8000f50 <GetWordFromBytes>
 800102a:	4603      	mov	r3, r0
 800102c:	82bb      	strh	r3, [r7, #20]
    if(addr>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 800102e:	8aba      	ldrh	r2, [r7, #20]
 8001030:	8afb      	ldrh	r3, [r7, #22]
 8001032:	429a      	cmp	r2, r3
 8001034:	d907      	bls.n	8001046 <WriteSingleRegister+0x46>
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2202      	movs	r2, #2
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f7ff fdd7 	bl	8000bf0 <SetInvalidCommand>
 8001042:	4603      	mov	r3, r0
 8001044:	e016      	b.n	8001074 <WriteSingleRegister+0x74>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d112      	bne.n	8001072 <WriteSingleRegister+0x72>
    {
    	InsertWordsToMemory((uint16_t*)(request+10), ((uint8_t*)holding_pointer)+addr*2,1);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f103 000a 	add.w	r0, r3, #10
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <WriteSingleRegister+0x80>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	8aba      	ldrh	r2, [r7, #20]
 8001058:	0052      	lsls	r2, r2, #1
 800105a:	4413      	add	r3, r2
 800105c:	2201      	movs	r2, #1
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff ffa1 	bl	8000fa6 <InsertWordsToMemory>
    	memcpy(answer, request,12);
 8001064:	220c      	movs	r2, #12
 8001066:	68f9      	ldr	r1, [r7, #12]
 8001068:	68b8      	ldr	r0, [r7, #8]
 800106a:	f013 fe7b 	bl	8014d64 <memcpy>
    	return 12;
 800106e:	230c      	movs	r3, #12
 8001070:	e000      	b.n	8001074 <WriteSingleRegister+0x74>
    }
    else
    {

    }
    return 0;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000035c 	.word	0x2000035c
 8001080:	20000354 	.word	0x20000354

08001084 <WrieMultiplyRegisters>:

static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	71fb      	strb	r3, [r7, #7]
	uint16_t  maxAddr = holding_size-1;
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <WrieMultiplyRegisters+0xb0>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	3b01      	subs	r3, #1
 8001098:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <WrieMultiplyRegisters+0x20>
 80010a0:	2302      	movs	r3, #2
 80010a2:	e000      	b.n	80010a6 <WrieMultiplyRegisters+0x22>
 80010a4:	2308      	movs	r3, #8
 80010a6:	4619      	mov	r1, r3
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f7ff ff51 	bl	8000f50 <GetWordFromBytes>
 80010ae:	4603      	mov	r3, r0
 80010b0:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <WrieMultiplyRegisters+0x38>
 80010b8:	2304      	movs	r3, #4
 80010ba:	e000      	b.n	80010be <WrieMultiplyRegisters+0x3a>
 80010bc:	230a      	movs	r3, #10
 80010be:	4619      	mov	r1, r3
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f7ff ff45 	bl	8000f50 <GetWordFromBytes>
 80010c6:	4603      	mov	r3, r0
 80010c8:	827b      	strh	r3, [r7, #18]
    if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 80010ca:	8aba      	ldrh	r2, [r7, #20]
 80010cc:	8a7b      	ldrh	r3, [r7, #18]
 80010ce:	4413      	add	r3, r2
 80010d0:	1e5a      	subs	r2, r3, #1
 80010d2:	8afb      	ldrh	r3, [r7, #22]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dd07      	ble.n	80010e8 <WrieMultiplyRegisters+0x64>
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2202      	movs	r2, #2
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f7ff fd86 	bl	8000bf0 <SetInvalidCommand>
 80010e4:	4603      	mov	r3, r0
 80010e6:	e021      	b.n	800112c <WrieMultiplyRegisters+0xa8>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d11d      	bne.n	800112a <WrieMultiplyRegisters+0xa6>
    {
    	memcpy(answer, request,12);//сначала повторяющиеся с запросом данные
 80010ee:	220c      	movs	r2, #12
 80010f0:	68f9      	ldr	r1, [r7, #12]
 80010f2:	68b8      	ldr	r0, [r7, #8]
 80010f4:	f013 fe36 	bl	8014d64 <memcpy>
    	InsertWordToMemory(reg_count*2+4, answer+4);//Длина сообщения
 80010f8:	8a7b      	ldrh	r3, [r7, #18]
 80010fa:	3302      	adds	r3, #2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	b29a      	uxth	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3304      	adds	r3, #4
 8001106:	4619      	mov	r1, r3
 8001108:	4610      	mov	r0, r2
 800110a:	f7ff ff3c 	bl	8000f86 <InsertWordToMemory>
    	InsertWordsToMemory((uint16_t*)(request+13), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f103 000d 	add.w	r0, r3, #13
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <WrieMultiplyRegisters+0xb4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	8aba      	ldrh	r2, [r7, #20]
 800111a:	0052      	lsls	r2, r2, #1
 800111c:	4413      	add	r3, r2
 800111e:	8a7a      	ldrh	r2, [r7, #18]
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff ff40 	bl	8000fa6 <InsertWordsToMemory>
        return 12;
 8001126:	230c      	movs	r3, #12
 8001128:	e000      	b.n	800112c <WrieMultiplyRegisters+0xa8>
    }
    else
    {

    }
    return 0;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000035c 	.word	0x2000035c
 8001138:	20000354 	.word	0x20000354

0800113c <WriteToHoldings>:

static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource))
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	4613      	mov	r3, r2
 800114a:	71fb      	strb	r3, [r7, #7]
	int result = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
	if(writeMemorySemaphoreHandle!=NULL)
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <WriteToHoldings+0x50>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d014      	beq.n	8001182 <WriteToHoldings+0x46>
	{
		if(osSemaphoreWait(writeMemorySemaphoreHandle, 1000)==osOK)
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <WriteToHoldings+0x50>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001160:	4618      	mov	r0, r3
 8001162:	f003 fd27 	bl	8004bb4 <osSemaphoreWait>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10a      	bne.n	8001182 <WriteToHoldings+0x46>
		{
			result =  (*write)(request,answer,source);
 800116c:	79fa      	ldrb	r2, [r7, #7]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	4798      	blx	r3
 8001176:	6178      	str	r0, [r7, #20]
			osSemaphoreRelease(writeMemorySemaphoreHandle);
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <WriteToHoldings+0x50>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f003 fd67 	bl	8004c50 <osSemaphoreRelease>
		}
	}
	return result;
 8001182:	697b      	ldr	r3, [r7, #20]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20006990 	.word	0x20006990

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_MspInit+0x54>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <HAL_MspInit+0x54>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_MspInit+0x54>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_MspInit+0x54>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <HAL_MspInit+0x54>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_MspInit+0x54>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	210f      	movs	r1, #15
 80011d2:	f06f 0001 	mvn.w	r0, #1
 80011d6:	f000 fb77 	bl	80018c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800

080011e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	2019      	movs	r0, #25
 80011fe:	f000 fb63 	bl	80018c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001202:	2019      	movs	r0, #25
 8001204:	f000 fb7c 	bl	8001900 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <HAL_InitTick+0xa4>)
 800120e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001210:	4a1e      	ldr	r2, [pc, #120]	; (800128c <HAL_InitTick+0xa4>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6453      	str	r3, [r2, #68]	; 0x44
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <HAL_InitTick+0xa4>)
 800121a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001224:	f107 0210 	add.w	r2, r7, #16
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f002 fb52 	bl	80038d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001234:	f002 fb3c 	bl	80038b0 <HAL_RCC_GetPCLK2Freq>
 8001238:	4603      	mov	r3, r0
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800123e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001240:	4a13      	ldr	r2, [pc, #76]	; (8001290 <HAL_InitTick+0xa8>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	0c9b      	lsrs	r3, r3, #18
 8001248:	3b01      	subs	r3, #1
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_InitTick+0xac>)
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <HAL_InitTick+0xb0>)
 8001250:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_InitTick+0xac>)
 8001254:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001258:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <HAL_InitTick+0xac>)
 800125c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_InitTick+0xac>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_InitTick+0xac>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800126c:	4809      	ldr	r0, [pc, #36]	; (8001294 <HAL_InitTick+0xac>)
 800126e:	f002 fb65 	bl	800393c <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d104      	bne.n	8001282 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <HAL_InitTick+0xac>)
 800127a:	f002 fbb9 	bl	80039f0 <HAL_TIM_Base_Start_IT>
 800127e:	4603      	mov	r3, r0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3730      	adds	r7, #48	; 0x30
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	431bde83 	.word	0x431bde83
 8001294:	20006a4c 	.word	0x20006a4c
 8001298:	40010000 	.word	0x40010000

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <NMI_Handler+0x4>

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012ce:	f002 fbff 	bl	8003ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20006a4c 	.word	0x20006a4c

080012dc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <ETH_IRQHandler+0x10>)
 80012e2:	f000 feff 	bl	80020e4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200083bc 	.word	0x200083bc

080012f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
	return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_kill>:

int _kill(int pid, int sig)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <_kill+0x20>)
 800130c:	2216      	movs	r2, #22
 800130e:	601a      	str	r2, [r3, #0]
	return -1;
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2000d348 	.word	0x2000d348

08001324 <_exit>:

void _exit (int status)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ffe5 	bl	8001300 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001336:	e7fe      	b.n	8001336 <_exit+0x12>

08001338 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e00a      	b.n	8001360 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800134a:	f3af 8000 	nop.w
 800134e:	4601      	mov	r1, r0
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	60ba      	str	r2, [r7, #8]
 8001356:	b2ca      	uxtb	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbf0      	blt.n	800134a <_read+0x12>
	}

return len;
 8001368:	687b      	ldr	r3, [r7, #4]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	e009      	b.n	8001398 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	60ba      	str	r2, [r7, #8]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dbf1      	blt.n	8001384 <_write+0x12>
	}
	return len;
 80013a0:	687b      	ldr	r3, [r7, #4]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_close>:

int _close(int file)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
	return -1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d2:	605a      	str	r2, [r3, #4]
	return 0;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <_isatty>:

int _isatty(int file)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
	return 1;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
	return 0;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <_sbrk+0x5c>)
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <_sbrk+0x60>)
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <_sbrk+0x64>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <_sbrk+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	429a      	cmp	r2, r3
 8001442:	d205      	bcs.n	8001450 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <_sbrk+0x6c>)
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a06      	ldr	r2, [pc, #24]	; (8001478 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	20020000 	.word	0x20020000
 8001474:	00000400 	.word	0x00000400
 8001478:	20000360 	.word	0x20000360
 800147c:	2000d350 	.word	0x2000d350
 8001480:	2000d348 	.word	0x2000d348

08001484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <SystemInit+0x20>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <SystemInit+0x20>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <Reset_Handler>:
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopFillZerobss+0x12>
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <LoopFillZerobss+0x16>)
 80014ae:	490e      	ldr	r1, [pc, #56]	; (80014e8 <LoopFillZerobss+0x1a>)
 80014b0:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <LoopFillZerobss+0x1e>)
 80014b2:	2300      	movs	r3, #0
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:
 80014b6:	58d4      	ldr	r4, [r2, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:
 80014bc:	18c4      	adds	r4, r0, r3
 80014be:	428c      	cmp	r4, r1
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <LoopFillZerobss+0x22>)
 80014c4:	4c0b      	ldr	r4, [pc, #44]	; (80014f4 <LoopFillZerobss+0x26>)
 80014c6:	2300      	movs	r3, #0
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:
 80014ce:	42a2      	cmp	r2, r4
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>
 80014d2:	f7ff ffd7 	bl	8001484 <SystemInit>
 80014d6:	f013 fc0b 	bl	8014cf0 <__libc_init_array>
 80014da:	f7ff f965 	bl	80007a8 <main>
 80014de:	4770      	bx	lr
 80014e0:	20020000 	.word	0x20020000
 80014e4:	20000000 	.word	0x20000000
 80014e8:	20000084 	.word	0x20000084
 80014ec:	080194e4 	.word	0x080194e4
 80014f0:	20000084 	.word	0x20000084
 80014f4:	2000d350 	.word	0x2000d350

080014f8 <ADC_IRQHandler>:
 80014f8:	e7fe      	b.n	80014f8 <ADC_IRQHandler>

080014fa <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d104      	bne.n	8001512 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
 800150c:	f7ff fa68 	bl	80009e0 <Error_Handler>
 8001510:	e7fe      	b.n	8001510 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	e007      	b.n	8001528 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	2100      	movs	r1, #0
 800151e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3301      	adds	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d9f4      	bls.n	8001518 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	721a      	strb	r2, [r3, #8]
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d104      	bne.n	8001554 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800154a:	b672      	cpsid	i
}
 800154c:	bf00      	nop
 800154e:	f7ff fa47 	bl	80009e0 <Error_Handler>
 8001552:	e7fe      	b.n	8001552 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7a1b      	ldrb	r3, [r3, #8]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d904      	bls.n	8001566 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
 8001560:	f7ff fa3e 	bl	80009e0 <Error_Handler>
 8001564:	e7fe      	b.n	8001564 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7a1b      	ldrb	r3, [r3, #8]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	b2d1      	uxtb	r1, r2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	7211      	strb	r1, [r2, #8]
 8001572:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001574:	f3ef 8211 	mrs	r2, BASEPRI
 8001578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157c:	f383 8811 	msr	BASEPRI, r3
 8001580:	f3bf 8f6f 	isb	sy
 8001584:	f3bf 8f4f 	dsb	sy
 8001588:	60fa      	str	r2, [r7, #12]
 800158a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d104      	bne.n	80015b4 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80015aa:	b672      	cpsid	i
}
 80015ac:	bf00      	nop
 80015ae:	f7ff fa17 	bl	80009e0 <Error_Handler>
 80015b2:	e7fe      	b.n	80015b2 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7a1b      	ldrb	r3, [r3, #8]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7a1b      	ldrb	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d904      	bls.n	80015d2 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80015c8:	b672      	cpsid	i
}
 80015ca:	bf00      	nop
 80015cc:	f7ff fa08 	bl	80009e0 <Error_Handler>
 80015d0:	e7fe      	b.n	80015d0 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7a1b      	ldrb	r3, [r3, #8]
 80015d6:	461a      	mov	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015de:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80015e6:	bf00      	nop
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d103      	bne.n	8001606 <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <__retarget_lock_init_recursive+0x48>)
 8001600:	2216      	movs	r2, #22
 8001602:	601a      	str	r2, [r3, #0]
    return;
 8001604:	e015      	b.n	8001632 <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001606:	200c      	movs	r0, #12
 8001608:	f013 fb96 	bl	8014d38 <malloc>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff6a 	bl	80014fa <stm32_lock_init>
    return;
 8001626:	e004      	b.n	8001632 <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 800162c:	f7ff f9d8 	bl	80009e0 <Error_Handler>
 8001630:	e7fe      	b.n	8001630 <__retarget_lock_init_recursive+0x40>
}
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000d348 	.word	0x2000d348

0800163c <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d104      	bne.n	8001654 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800164a:	b672      	cpsid	i
}
 800164c:	bf00      	nop
 800164e:	f7ff f9c7 	bl	80009e0 <Error_Handler>
 8001652:	e7fe      	b.n	8001652 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff70 	bl	800153c <stm32_lock_acquire>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d104      	bne.n	800167c <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001672:	b672      	cpsid	i
}
 8001674:	bf00      	nop
 8001676:	f7ff f9b3 	bl	80009e0 <Error_Handler>
 800167a:	e7fe      	b.n	800167a <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff8c 	bl	800159c <stm32_lock_release>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <HAL_Init+0x40>)
 8001696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_Init+0x40>)
 80016a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_Init+0x40>)
 80016ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b4:	2003      	movs	r0, #3
 80016b6:	f000 f8fc 	bl	80018b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ba:	200f      	movs	r0, #15
 80016bc:	f7ff fd94 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c0:	f7ff fd66 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023c00 	.word	0x40023c00

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	2000000c 	.word	0x2000000c
 80016f4:	20006a94 	.word	0x20006a94

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20006a94 	.word	0x20006a94

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffde 	bl	80016f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000000c 	.word	0x2000000c

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ff4c 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018da:	f7ff ff61 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 80018de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	6978      	ldr	r0, [r7, #20]
 80018e6:	f7ff ffb1 	bl	800184c <NVIC_EncodePriority>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff80 	bl	80017f8 <__NVIC_SetPriority>
}
 80018f8:	bf00      	nop
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff54 	bl	80017bc <__NVIC_EnableIRQ>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800192c:	4baa      	ldr	r3, [pc, #680]	; (8001bd8 <HAL_ETH_Init+0x2bc>)
 800192e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e183      	b.n	8001c4a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f002 fbea 	bl	8004130 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	4b9e      	ldr	r3, [pc, #632]	; (8001bdc <HAL_ETH_Init+0x2c0>)
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	4a9d      	ldr	r2, [pc, #628]	; (8001bdc <HAL_ETH_Init+0x2c0>)
 8001966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196a:	6453      	str	r3, [r2, #68]	; 0x44
 800196c:	4b9b      	ldr	r3, [pc, #620]	; (8001bdc <HAL_ETH_Init+0x2c0>)
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001978:	4b99      	ldr	r3, [pc, #612]	; (8001be0 <HAL_ETH_Init+0x2c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4a98      	ldr	r2, [pc, #608]	; (8001be0 <HAL_ETH_Init+0x2c4>)
 800197e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001982:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001984:	4b96      	ldr	r3, [pc, #600]	; (8001be0 <HAL_ETH_Init+0x2c4>)
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4994      	ldr	r1, [pc, #592]	; (8001be0 <HAL_ETH_Init+0x2c4>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0201 	orr.w	r2, r2, #1
 80019a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019aa:	f7ff fea5 	bl	80016f8 <HAL_GetTick>
 80019ae:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019b0:	e011      	b.n	80019d6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80019b2:	f7ff fea1 	bl	80016f8 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019c0:	d909      	bls.n	80019d6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2203      	movs	r2, #3
 80019c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e139      	b.n	8001c4a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1e4      	bne.n	80019b2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f023 031c 	bic.w	r3, r3, #28
 80019f6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80019f8:	f001 ff4e 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80019fc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4a78      	ldr	r2, [pc, #480]	; (8001be4 <HAL_ETH_Init+0x2c8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d908      	bls.n	8001a18 <HAL_ETH_Init+0xfc>
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4a77      	ldr	r2, [pc, #476]	; (8001be8 <HAL_ETH_Init+0x2cc>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d804      	bhi.n	8001a18 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	e027      	b.n	8001a68 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	4a73      	ldr	r2, [pc, #460]	; (8001be8 <HAL_ETH_Init+0x2cc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d908      	bls.n	8001a32 <HAL_ETH_Init+0x116>
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	4a6d      	ldr	r2, [pc, #436]	; (8001bd8 <HAL_ETH_Init+0x2bc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d204      	bcs.n	8001a32 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f043 030c 	orr.w	r3, r3, #12
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	e01a      	b.n	8001a68 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4a68      	ldr	r2, [pc, #416]	; (8001bd8 <HAL_ETH_Init+0x2bc>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d303      	bcc.n	8001a42 <HAL_ETH_Init+0x126>
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4a6b      	ldr	r2, [pc, #428]	; (8001bec <HAL_ETH_Init+0x2d0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d911      	bls.n	8001a66 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4a69      	ldr	r2, [pc, #420]	; (8001bec <HAL_ETH_Init+0x2d0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d908      	bls.n	8001a5c <HAL_ETH_Init+0x140>
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4a68      	ldr	r2, [pc, #416]	; (8001bf0 <HAL_ETH_Init+0x2d4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d804      	bhi.n	8001a5c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	e005      	b.n	8001a68 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	e000      	b.n	8001a68 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001a66:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001a70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a74:	2100      	movs	r1, #0
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fc17 	bl	80022aa <HAL_ETH_WritePHYRegister>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001a86:	6939      	ldr	r1, [r7, #16]
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fdcd 	bl	8002628 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e0d7      	b.n	8001c4a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001a9a:	20ff      	movs	r0, #255	; 0xff
 8001a9c:	f7ff fe38 	bl	8001710 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a5 	beq.w	8001bf4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001aaa:	f7ff fe25 	bl	80016f8 <HAL_GetTick>
 8001aae:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fb8e 	bl	80021da <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001abe:	f7ff fe1b 	bl	80016f8 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d90f      	bls.n	8001af0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001ad4:	6939      	ldr	r1, [r7, #16]
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fda6 	bl	8002628 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e0ac      	b.n	8001c4a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0da      	beq.n	8001ab0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001afa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001afe:	2100      	movs	r1, #0
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fbd2 	bl	80022aa <HAL_ETH_WritePHYRegister>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00b      	beq.n	8001b24 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001b10:	6939      	ldr	r1, [r7, #16]
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fd88 	bl	8002628 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001b20:	2301      	movs	r3, #1
 8001b22:	e092      	b.n	8001c4a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b24:	f7ff fde8 	bl	80016f8 <HAL_GetTick>
 8001b28:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2101      	movs	r1, #1
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fb51 	bl	80021da <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001b38:	f7ff fdde 	bl	80016f8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d90f      	bls.n	8001b6a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b4e:	6939      	ldr	r1, [r7, #16]
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fd69 	bl	8002628 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e06f      	b.n	8001c4a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0da      	beq.n	8001b2a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 fb2c 	bl	80021da <HAL_ETH_ReadPHYRegister>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00b      	beq.n	8001ba0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001b8c:	6939      	ldr	r1, [r7, #16]
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 fd4a 	bl	8002628 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e054      	b.n	8001c4a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d004      	beq.n	8001bb4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	e002      	b.n	8001bba <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	e035      	b.n	8001c38 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	e030      	b.n	8001c38 <HAL_ETH_Init+0x31c>
 8001bd6:	bf00      	nop
 8001bd8:	03938700 	.word	0x03938700
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40013800 	.word	0x40013800
 8001be4:	01312cff 	.word	0x01312cff
 8001be8:	02160ebf 	.word	0x02160ebf
 8001bec:	05f5e0ff 	.word	0x05f5e0ff
 8001bf0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fb4c 	bl	80022aa <HAL_ETH_WritePHYRegister>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c1c:	6939      	ldr	r1, [r7, #16]
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 fd02 	bl	8002628 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e00c      	b.n	8001c4a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001c30:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001c34:	f7ff fd6c 	bl	8001710 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001c38:	6939      	ldr	r1, [r7, #16]
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fcf4 	bl	8002628 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop

08001c54 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_ETH_DMATxDescListInit+0x20>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e052      	b.n	8001d1a <HAL_ETH_DMATxDescListInit+0xc6>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e030      	b.n	8001cf2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	015b      	lsls	r3, r3, #5
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	4413      	add	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ca0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d105      	bne.n	8001cca <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d208      	bcs.n	8001ce6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	015b      	lsls	r3, r3, #5
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	4413      	add	r3, r2
 8001cde:	461a      	mov	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	e002      	b.n	8001cec <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d3ca      	bcc.n	8001c90 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d04:	3310      	adds	r3, #16
 8001d06:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b087      	sub	sp, #28
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_ETH_DMARxDescListInit+0x20>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e056      	b.n	8001df4 <HAL_ETH_DMARxDescListInit+0xce>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2202      	movs	r2, #2
 8001d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	e034      	b.n	8001dcc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	015b      	lsls	r3, r3, #5
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	4413      	add	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d72:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001d7a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d208      	bcs.n	8001dc0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	015b      	lsls	r3, r3, #5
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	4413      	add	r3, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	e002      	b.n	8001dc6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3c6      	bcc.n	8001d62 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dde:	330c      	adds	r3, #12
 8001de0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	371c      	adds	r7, #28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_ETH_TransmitFrame+0x24>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e0cd      	b.n	8001fc0 <HAL_ETH_TransmitFrame+0x1c0>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0b8      	b.n	8001fc0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da09      	bge.n	8001e6c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2212      	movs	r2, #18
 8001e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0a9      	b.n	8001fc0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d915      	bls.n	8001ea2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	4a54      	ldr	r2, [pc, #336]	; (8001fcc <HAL_ETH_TransmitFrame+0x1cc>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0a9b      	lsrs	r3, r3, #10
 8001e80:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	4b51      	ldr	r3, [pc, #324]	; (8001fcc <HAL_ETH_TransmitFrame+0x1cc>)
 8001e86:	fba3 1302 	umull	r1, r3, r3, r2
 8001e8a:	0a9b      	lsrs	r3, r3, #10
 8001e8c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e001      	b.n	8001ea6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d11c      	bne.n	8001ee6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001eba:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001ec6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ed6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ee4:	e04b      	b.n	8001f7e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e044      	b.n	8001f76 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001efa:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d107      	bne.n	8001f12 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f10:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f1a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d116      	bne.n	8001f54 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001f34:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	4a25      	ldr	r2, [pc, #148]	; (8001fd0 <HAL_ETH_TransmitFrame+0x1d0>)
 8001f3a:	fb02 f203 	mul.w	r2, r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	4413      	add	r3, r2
 8001f42:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001f46:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001f52:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f62:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	3301      	adds	r3, #1
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d3b6      	bcc.n	8001eec <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f86:	3314      	adds	r3, #20
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00d      	beq.n	8001fae <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9a:	3314      	adds	r3, #20
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	ac02b00b 	.word	0xac02b00b
 8001fd0:	fffffa0c 	.word	0xfffffa0c

08001fd4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e074      	b.n	80020d8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ffe:	e05a      	b.n	80020b6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3301      	adds	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002014:	d10d      	bne.n	8002032 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	461a      	mov	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	; 0x28
 8002030:	e041      	b.n	80020b6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10b      	bne.n	8002058 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	461a      	mov	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
 8002056:	e02e      	b.n	80020b6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	2b01      	cmp	r3, #1
 8002070:	d103      	bne.n	800207a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002086:	1f1a      	subs	r2, r3, #4
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	461a      	mov	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e010      	b.n	80020d8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db02      	blt.n	80020c6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d99c      	bls.n	8002000 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f4:	3314      	adds	r3, #20
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fc:	2b40      	cmp	r3, #64	; 0x40
 80020fe:	d112      	bne.n	8002126 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f002 f8c3 	bl	800428c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210e:	3314      	adds	r3, #20
 8002110:	2240      	movs	r2, #64	; 0x40
 8002112:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002124:	e01b      	b.n	800215e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212e:	3314      	adds	r3, #20
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b01      	cmp	r3, #1
 8002138:	d111      	bne.n	800215e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f839 	bl	80021b2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002148:	3314      	adds	r3, #20
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002166:	3314      	adds	r3, #20
 8002168:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800216c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002176:	3314      	adds	r3, #20
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800217e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002182:	d112      	bne.n	80021aa <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f81e 	bl	80021c6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002192:	3314      	adds	r3, #20
 8002194:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002198:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	460b      	mov	r3, r1
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b82      	cmp	r3, #130	; 0x82
 80021fa:	d101      	bne.n	8002200 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80021fc:	2302      	movs	r3, #2
 80021fe:	e050      	b.n	80022a2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2282      	movs	r2, #130	; 0x82
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f003 031c 	and.w	r3, r3, #28
 8002216:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8a1b      	ldrh	r3, [r3, #16]
 800221c:	02db      	lsls	r3, r3, #11
 800221e:	b29b      	uxth	r3, r3
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002226:	897b      	ldrh	r3, [r7, #10]
 8002228:	019b      	lsls	r3, r3, #6
 800222a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4313      	orrs	r3, r2
 8002232:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f023 0302 	bic.w	r3, r3, #2
 800223a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800224c:	f7ff fa54 	bl	80016f8 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002252:	e015      	b.n	8002280 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002254:	f7ff fa50 	bl	80016f8 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002262:	d309      	bcc.n	8002278 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e014      	b.n	80022a2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1e4      	bne.n	8002254 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	b29b      	uxth	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	460b      	mov	r3, r1
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b42      	cmp	r3, #66	; 0x42
 80022ca:	d101      	bne.n	80022d0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
 80022ce:	e04e      	b.n	800236e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2242      	movs	r2, #66	; 0x42
 80022d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 031c 	and.w	r3, r3, #28
 80022e6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8a1b      	ldrh	r3, [r3, #16]
 80022ec:	02db      	lsls	r3, r3, #11
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80022f6:	897b      	ldrh	r3, [r7, #10]
 80022f8:	019b      	lsls	r3, r3, #6
 80022fa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f043 0302 	orr.w	r3, r3, #2
 800230a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002326:	f7ff f9e7 	bl	80016f8 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800232c:	e015      	b.n	800235a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800232e:	f7ff f9e3 	bl	80016f8 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d309      	bcc.n	8002352 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e00d      	b.n	800236e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e4      	bne.n	800232e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_ETH_Start+0x16>
 8002388:	2302      	movs	r3, #2
 800238a:	e01f      	b.n	80023cc <HAL_ETH_Start+0x56>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fb45 	bl	8002a2c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fb7c 	bl	8002aa0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fc13 	bl	8002bd4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fbb0 	bl	8002b14 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 fbdd 	bl	8002b74 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_ETH_Stop+0x16>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e01f      	b.n	800242a <HAL_ETH_Stop+0x56>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fba2 	bl	8002b44 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 fbcf 	bl	8002ba4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fb67 	bl	8002ada <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fbe1 	bl	8002bd4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fb27 	bl	8002a66 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_ETH_ConfigMAC+0x1c>
 800244c:	2302      	movs	r3, #2
 800244e:	e0e4      	b.n	800261a <HAL_ETH_ConfigMAC+0x1e6>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80b1 	beq.w	80025ca <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4b6c      	ldr	r3, [pc, #432]	; (8002624 <HAL_ETH_ConfigMAC+0x1f0>)
 8002474:	4013      	ands	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002480:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002486:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800248c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002492:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002498:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800249e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80024a4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80024aa:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80024b0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80024b6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80024bc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80024c2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024da:	2001      	movs	r0, #1
 80024dc:	f7ff f918 	bl	8001710 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024f0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80024f6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80024fc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002502:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002508:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800250e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800251a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800251c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002526:	2001      	movs	r0, #1
 8002528:	f7ff f8f2 	bl	8001710 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800253c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002546:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002556:	4013      	ands	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002564:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800256a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002570:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002576:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800257c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002594:	2001      	movs	r0, #1
 8002596:	f7ff f8bb 	bl	8001710 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ba:	2001      	movs	r0, #1
 80025bc:	f7ff f8a8 	bl	8001710 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	61da      	str	r2, [r3, #28]
 80025c8:	e01e      	b.n	8002608 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80025d8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f7ff f888 	bl	8001710 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	ff20810f 	.word	0xff20810f

08002628 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0b0      	sub	sp, #192	; 0xc0
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d007      	beq.n	800264e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002644:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800264c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002656:	2300      	movs	r3, #0
 8002658:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d103      	bne.n	8002676 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800266e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002672:	663b      	str	r3, [r7, #96]	; 0x60
 8002674:	e001      	b.n	800267a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002676:	2300      	movs	r3, #0
 8002678:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800267a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800267e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002684:	2300      	movs	r3, #0
 8002686:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002694:	2340      	movs	r3, #64	; 0x40
 8002696:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80026fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002700:	4bac      	ldr	r3, [pc, #688]	; (80029b4 <ETH_MACDMAConfig+0x38c>)
 8002702:	4013      	ands	r3, r2
 8002704:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002708:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800270a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800270c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800270e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002710:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002714:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800271a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800271c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800271e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002722:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002728:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800272a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800272c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800272e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002730:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002732:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002734:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002738:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800273a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800273c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800273e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002750:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800275c:	2001      	movs	r0, #1
 800275e:	f7fe ffd7 	bl	8001710 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800276a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800276c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800276e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002770:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002772:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002774:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800277a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800277c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002780:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002782:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002786:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002788:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800278c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002790:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002798:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800279a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f7fe ffb2 	bl	8001710 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027b4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027be:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80027c8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80027d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027d8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80027dc:	4013      	ands	r3, r2
 80027de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80027e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027e6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80027e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80027ec:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80027ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80027f2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80027f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80027f8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80027fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80027fe:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002800:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002804:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002806:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002818:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002824:	2001      	movs	r0, #1
 8002826:	f7fe ff73 	bl	8001710 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002832:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002834:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002838:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800284e:	2001      	movs	r0, #1
 8002850:	f7fe ff5e 	bl	8001710 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800285c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002866:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800286c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002870:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002882:	2304      	movs	r3, #4
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800288c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002896:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800289c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80028a6:	2300      	movs	r3, #0
 80028a8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b2:	3318      	adds	r3, #24
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80028ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028be:	4b3e      	ldr	r3, [pc, #248]	; (80029b8 <ETH_MACDMAConfig+0x390>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80028c6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80028c8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80028ca:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80028cc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80028ce:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80028d0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80028d2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80028d4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80028d6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80028d8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80028da:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80028dc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80028de:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80028e2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80028e6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80028e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fa:	3318      	adds	r3, #24
 80028fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002900:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800290a:	3318      	adds	r3, #24
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002912:	2001      	movs	r0, #1
 8002914:	f7fe fefc 	bl	8001710 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002920:	3318      	adds	r3, #24
 8002922:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002926:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800292c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002930:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002934:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002938:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800293a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800293e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002942:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800294c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002950:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002960:	2001      	movs	r0, #1
 8002962:	f7fe fed5 	bl	8001710 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800296e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002972:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d10f      	bne.n	800299c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002984:	331c      	adds	r3, #28
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002998:	331c      	adds	r3, #28
 800299a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	461a      	mov	r2, r3
 80029a2:	2100      	movs	r1, #0
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f809 	bl	80029bc <ETH_MACAddressConfig>
}
 80029aa:	bf00      	nop
 80029ac:	37c0      	adds	r7, #192	; 0xc0
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	ff20810f 	.word	0xff20810f
 80029b8:	f8de3f23 	.word	0xf8de3f23

080029bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3305      	adds	r3, #5
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	3204      	adds	r2, #4
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <ETH_MACAddressConfig+0x68>)
 80029de:	4413      	add	r3, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3303      	adds	r3, #3
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	061a      	lsls	r2, r3, #24
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3302      	adds	r3, #2
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3301      	adds	r3, #1
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	4313      	orrs	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	7812      	ldrb	r2, [r2, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <ETH_MACAddressConfig+0x6c>)
 8002a0e:	4413      	add	r3, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	6013      	str	r3, [r2, #0]
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40028040 	.word	0x40028040
 8002a28:	40028044 	.word	0x40028044

08002a2c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0208 	orr.w	r2, r2, #8
 8002a46:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a50:	2001      	movs	r0, #1
 8002a52:	f000 f8e9 	bl	8002c28 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	601a      	str	r2, [r3, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0208 	bic.w	r2, r2, #8
 8002a80:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f000 f8cc 	bl	8002c28 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	601a      	str	r2, [r3, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0204 	orr.w	r2, r2, #4
 8002aba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f000 f8af 	bl	8002c28 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	601a      	str	r2, [r3, #0]
}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0204 	bic.w	r2, r2, #4
 8002af4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002afe:	2001      	movs	r0, #1
 8002b00:	f000 f892 	bl	8002c28 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b24:	3318      	adds	r3, #24
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b34:	3318      	adds	r3, #24
 8002b36:	601a      	str	r2, [r3, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b54:	3318      	adds	r3, #24
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b64:	3318      	adds	r3, #24
 8002b66:	601a      	str	r2, [r3, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b84:	3318      	adds	r3, #24
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0202 	orr.w	r2, r2, #2
 8002b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b94:	3318      	adds	r3, #24
 8002b96:	601a      	str	r2, [r3, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb4:	3318      	adds	r3, #24
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0202 	bic.w	r2, r2, #2
 8002bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc4:	3318      	adds	r3, #24
 8002bc6:	601a      	str	r2, [r3, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be8:	3318      	adds	r3, #24
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf8:	3318      	adds	r3, #24
 8002bfa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c04:	3318      	adds	r3, #24
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f000 f80c 	bl	8002c28 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c1a:	3318      	adds	r3, #24
 8002c1c:	601a      	str	r2, [r3, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <ETH_Delay+0x38>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <ETH_Delay+0x3c>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0a5b      	lsrs	r3, r3, #9
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002c44:	bf00      	nop
  } 
  while (Delay --);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1e5a      	subs	r2, r3, #1
 8002c4a:	60fa      	str	r2, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f9      	bne.n	8002c44 <ETH_Delay+0x1c>
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000004 	.word	0x20000004
 8002c64:	10624dd3 	.word	0x10624dd3

08002c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	; 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e16b      	b.n	8002f5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c84:	2201      	movs	r2, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f040 815a 	bne.w	8002f56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d005      	beq.n	8002cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d130      	bne.n	8002d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 0201 	and.w	r2, r3, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d017      	beq.n	8002d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d123      	bne.n	8002dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	08da      	lsrs	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3208      	adds	r2, #8
 8002d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	220f      	movs	r2, #15
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	08da      	lsrs	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3208      	adds	r2, #8
 8002da6:	69b9      	ldr	r1, [r7, #24]
 8002da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0203 	and.w	r2, r3, #3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80b4 	beq.w	8002f56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b60      	ldr	r3, [pc, #384]	; (8002f74 <HAL_GPIO_Init+0x30c>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	4a5f      	ldr	r2, [pc, #380]	; (8002f74 <HAL_GPIO_Init+0x30c>)
 8002df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dfe:	4b5d      	ldr	r3, [pc, #372]	; (8002f74 <HAL_GPIO_Init+0x30c>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e0a:	4a5b      	ldr	r2, [pc, #364]	; (8002f78 <HAL_GPIO_Init+0x310>)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	3302      	adds	r3, #2
 8002e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	220f      	movs	r2, #15
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a52      	ldr	r2, [pc, #328]	; (8002f7c <HAL_GPIO_Init+0x314>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d02b      	beq.n	8002e8e <HAL_GPIO_Init+0x226>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a51      	ldr	r2, [pc, #324]	; (8002f80 <HAL_GPIO_Init+0x318>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d025      	beq.n	8002e8a <HAL_GPIO_Init+0x222>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a50      	ldr	r2, [pc, #320]	; (8002f84 <HAL_GPIO_Init+0x31c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01f      	beq.n	8002e86 <HAL_GPIO_Init+0x21e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a4f      	ldr	r2, [pc, #316]	; (8002f88 <HAL_GPIO_Init+0x320>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0x21a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4e      	ldr	r2, [pc, #312]	; (8002f8c <HAL_GPIO_Init+0x324>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0x216>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a4d      	ldr	r2, [pc, #308]	; (8002f90 <HAL_GPIO_Init+0x328>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_Init+0x212>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a4c      	ldr	r2, [pc, #304]	; (8002f94 <HAL_GPIO_Init+0x32c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_Init+0x20e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4b      	ldr	r2, [pc, #300]	; (8002f98 <HAL_GPIO_Init+0x330>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_Init+0x20a>
 8002e6e:	2307      	movs	r3, #7
 8002e70:	e00e      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e72:	2308      	movs	r3, #8
 8002e74:	e00c      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e76:	2306      	movs	r3, #6
 8002e78:	e00a      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e7a:	2305      	movs	r3, #5
 8002e7c:	e008      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e7e:	2304      	movs	r3, #4
 8002e80:	e006      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e82:	2303      	movs	r3, #3
 8002e84:	e004      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f002 0203 	and.w	r2, r2, #3
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	4093      	lsls	r3, r2
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea0:	4935      	ldr	r1, [pc, #212]	; (8002f78 <HAL_GPIO_Init+0x310>)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eae:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ed2:	4a32      	ldr	r2, [pc, #200]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ed8:	4b30      	ldr	r3, [pc, #192]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002efc:	4a27      	ldr	r2, [pc, #156]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f02:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f26:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f50:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b0f      	cmp	r3, #15
 8002f60:	f67f ae90 	bls.w	8002c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3724      	adds	r7, #36	; 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40013800 	.word	0x40013800
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	40020400 	.word	0x40020400
 8002f84:	40020800 	.word	0x40020800
 8002f88:	40020c00 	.word	0x40020c00
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40021400 	.word	0x40021400
 8002f94:	40021800 	.word	0x40021800
 8002f98:	40021c00 	.word	0x40021c00
 8002f9c:	40013c00 	.word	0x40013c00

08002fa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e264      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d075      	beq.n	80030aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fbe:	4ba3      	ldr	r3, [pc, #652]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d00c      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fca:	4ba0      	ldr	r3, [pc, #640]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d112      	bne.n	8002ffc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd6:	4b9d      	ldr	r3, [pc, #628]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe2:	d10b      	bne.n	8002ffc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe4:	4b99      	ldr	r3, [pc, #612]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d05b      	beq.n	80030a8 <HAL_RCC_OscConfig+0x108>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d157      	bne.n	80030a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e23f      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003004:	d106      	bne.n	8003014 <HAL_RCC_OscConfig+0x74>
 8003006:	4b91      	ldr	r3, [pc, #580]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a90      	ldr	r2, [pc, #576]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e01d      	b.n	8003050 <HAL_RCC_OscConfig+0xb0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x98>
 800301e:	4b8b      	ldr	r3, [pc, #556]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a8a      	ldr	r2, [pc, #552]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a87      	ldr	r2, [pc, #540]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e00b      	b.n	8003050 <HAL_RCC_OscConfig+0xb0>
 8003038:	4b84      	ldr	r3, [pc, #528]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a83      	ldr	r2, [pc, #524]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800303e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b81      	ldr	r3, [pc, #516]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a80      	ldr	r2, [pc, #512]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800304a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d013      	beq.n	8003080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fe fb4e 	bl	80016f8 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003060:	f7fe fb4a 	bl	80016f8 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e204      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0xc0>
 800307e:	e014      	b.n	80030aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fe fb3a 	bl	80016f8 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003088:	f7fe fb36 	bl	80016f8 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e1f0      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309a:	4b6c      	ldr	r3, [pc, #432]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0xe8>
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d063      	beq.n	800317e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b6:	4b65      	ldr	r3, [pc, #404]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c2:	4b62      	ldr	r3, [pc, #392]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d11c      	bne.n	8003108 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ce:	4b5f      	ldr	r3, [pc, #380]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d116      	bne.n	8003108 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030da:	4b5c      	ldr	r3, [pc, #368]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_RCC_OscConfig+0x152>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d001      	beq.n	80030f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e1c4      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f2:	4b56      	ldr	r3, [pc, #344]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4952      	ldr	r1, [pc, #328]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003106:	e03a      	b.n	800317e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d020      	beq.n	8003152 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003110:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <HAL_RCC_OscConfig+0x2b0>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fe faef 	bl	80016f8 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800311e:	f7fe faeb 	bl	80016f8 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e1a5      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003130:	4b46      	ldr	r3, [pc, #280]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313c:	4b43      	ldr	r3, [pc, #268]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4940      	ldr	r1, [pc, #256]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800314c:	4313      	orrs	r3, r2
 800314e:	600b      	str	r3, [r1, #0]
 8003150:	e015      	b.n	800317e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003152:	4b3f      	ldr	r3, [pc, #252]	; (8003250 <HAL_RCC_OscConfig+0x2b0>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe face 	bl	80016f8 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003160:	f7fe faca 	bl	80016f8 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e184      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003172:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d030      	beq.n	80031ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003192:	4b30      	ldr	r3, [pc, #192]	; (8003254 <HAL_RCC_OscConfig+0x2b4>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003198:	f7fe faae 	bl	80016f8 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a0:	f7fe faaa 	bl	80016f8 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e164      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x200>
 80031be:	e015      	b.n	80031ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c0:	4b24      	ldr	r3, [pc, #144]	; (8003254 <HAL_RCC_OscConfig+0x2b4>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c6:	f7fe fa97 	bl	80016f8 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ce:	f7fe fa93 	bl	80016f8 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e14d      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	4b1a      	ldr	r3, [pc, #104]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80031e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80a0 	beq.w	800333a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fe:	4b13      	ldr	r3, [pc, #76]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10f      	bne.n	800322a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_OscConfig+0x2b8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d121      	bne.n	800327a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_RCC_OscConfig+0x2b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a07      	ldr	r2, [pc, #28]	; (8003258 <HAL_RCC_OscConfig+0x2b8>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003242:	f7fe fa59 	bl	80016f8 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003248:	e011      	b.n	800326e <HAL_RCC_OscConfig+0x2ce>
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	42470000 	.word	0x42470000
 8003254:	42470e80 	.word	0x42470e80
 8003258:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325c:	f7fe fa4c 	bl	80016f8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e106      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326e:	4b85      	ldr	r3, [pc, #532]	; (8003484 <HAL_RCC_OscConfig+0x4e4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d106      	bne.n	8003290 <HAL_RCC_OscConfig+0x2f0>
 8003282:	4b81      	ldr	r3, [pc, #516]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a80      	ldr	r2, [pc, #512]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6713      	str	r3, [r2, #112]	; 0x70
 800328e:	e01c      	b.n	80032ca <HAL_RCC_OscConfig+0x32a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b05      	cmp	r3, #5
 8003296:	d10c      	bne.n	80032b2 <HAL_RCC_OscConfig+0x312>
 8003298:	4b7b      	ldr	r3, [pc, #492]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	4a7a      	ldr	r2, [pc, #488]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	6713      	str	r3, [r2, #112]	; 0x70
 80032a4:	4b78      	ldr	r3, [pc, #480]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a77      	ldr	r2, [pc, #476]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	e00b      	b.n	80032ca <HAL_RCC_OscConfig+0x32a>
 80032b2:	4b75      	ldr	r3, [pc, #468]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a74      	ldr	r2, [pc, #464]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	4b72      	ldr	r3, [pc, #456]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a71      	ldr	r2, [pc, #452]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d015      	beq.n	80032fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fe fa11 	bl	80016f8 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fe fa0d 	bl	80016f8 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0c5      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f0:	4b65      	ldr	r3, [pc, #404]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ee      	beq.n	80032da <HAL_RCC_OscConfig+0x33a>
 80032fc:	e014      	b.n	8003328 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fe:	f7fe f9fb 	bl	80016f8 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003304:	e00a      	b.n	800331c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fe f9f7 	bl	80016f8 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e0af      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331c:	4b5a      	ldr	r3, [pc, #360]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1ee      	bne.n	8003306 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d105      	bne.n	800333a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332e:	4b56      	ldr	r3, [pc, #344]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a55      	ldr	r2, [pc, #340]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 8003334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 809b 	beq.w	800347a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003344:	4b50      	ldr	r3, [pc, #320]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d05c      	beq.n	800340a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d141      	bne.n	80033dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_RCC_OscConfig+0x4ec>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fe f9cb 	bl	80016f8 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003366:	f7fe f9c7 	bl	80016f8 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e081      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003378:	4b43      	ldr	r3, [pc, #268]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f0      	bne.n	8003366 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	019b      	lsls	r3, r3, #6
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	3b01      	subs	r3, #1
 800339e:	041b      	lsls	r3, r3, #16
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	061b      	lsls	r3, r3, #24
 80033a8:	4937      	ldr	r1, [pc, #220]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <HAL_RCC_OscConfig+0x4ec>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7fe f9a0 	bl	80016f8 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033bc:	f7fe f99c 	bl	80016f8 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e056      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ce:	4b2e      	ldr	r3, [pc, #184]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x41c>
 80033da:	e04e      	b.n	800347a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033dc:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_RCC_OscConfig+0x4ec>)
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e2:	f7fe f989 	bl	80016f8 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ea:	f7fe f985 	bl	80016f8 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e03f      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fc:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f0      	bne.n	80033ea <HAL_RCC_OscConfig+0x44a>
 8003408:	e037      	b.n	800347a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e032      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003416:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <HAL_RCC_OscConfig+0x4e8>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d028      	beq.n	8003476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d121      	bne.n	8003476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d11a      	bne.n	8003476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003446:	4013      	ands	r3, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800344c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800344e:	4293      	cmp	r3, r2
 8003450:	d111      	bne.n	8003476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	3b01      	subs	r3, #1
 8003460:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003462:	429a      	cmp	r2, r3
 8003464:	d107      	bne.n	8003476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40007000 	.word	0x40007000
 8003488:	40023800 	.word	0x40023800
 800348c:	42470060 	.word	0x42470060

08003490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0cc      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a4:	4b68      	ldr	r3, [pc, #416]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d90c      	bls.n	80034cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b65      	ldr	r3, [pc, #404]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b63      	ldr	r3, [pc, #396]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0b8      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e4:	4b59      	ldr	r3, [pc, #356]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4a58      	ldr	r2, [pc, #352]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034fc:	4b53      	ldr	r3, [pc, #332]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a52      	ldr	r2, [pc, #328]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003508:	4b50      	ldr	r3, [pc, #320]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	494d      	ldr	r1, [pc, #308]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d044      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b47      	ldr	r3, [pc, #284]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d119      	bne.n	800356e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e07f      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d003      	beq.n	800354e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354a:	2b03      	cmp	r3, #3
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354e:	4b3f      	ldr	r3, [pc, #252]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e06f      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355e:	4b3b      	ldr	r3, [pc, #236]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e067      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800356e:	4b37      	ldr	r3, [pc, #220]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f023 0203 	bic.w	r2, r3, #3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4934      	ldr	r1, [pc, #208]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	4313      	orrs	r3, r2
 800357e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003580:	f7fe f8ba 	bl	80016f8 <HAL_GetTick>
 8003584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003586:	e00a      	b.n	800359e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003588:	f7fe f8b6 	bl	80016f8 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	; 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e04f      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359e:	4b2b      	ldr	r3, [pc, #172]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 020c 	and.w	r2, r3, #12
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d1eb      	bne.n	8003588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d20c      	bcs.n	80035d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b22      	ldr	r3, [pc, #136]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e032      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e4:	4b19      	ldr	r3, [pc, #100]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4916      	ldr	r1, [pc, #88]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	490e      	ldr	r1, [pc, #56]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003616:	f000 f889 	bl	800372c <HAL_RCC_GetSysClockFreq>
 800361a:	4602      	mov	r2, r0
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	490a      	ldr	r1, [pc, #40]	; (8003650 <HAL_RCC_ClockConfig+0x1c0>)
 8003628:	5ccb      	ldrb	r3, [r1, r3]
 800362a:	fa22 f303 	lsr.w	r3, r2, r3
 800362e:	4a09      	ldr	r2, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_RCC_ClockConfig+0x1c8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fdd6 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023c00 	.word	0x40023c00
 800364c:	40023800 	.word	0x40023800
 8003650:	08019240 	.word	0x08019240
 8003654:	20000004 	.word	0x20000004
 8003658:	20000008 	.word	0x20000008

0800365c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08c      	sub	sp, #48	; 0x30
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d129      	bne.n	80036c2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_RCC_MCOConfig+0xc4>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a2a      	ldr	r2, [pc, #168]	; (8003720 <HAL_RCC_MCOConfig+0xc4>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b28      	ldr	r3, [pc, #160]	; (8003720 <HAL_RCC_MCOConfig+0xc4>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800368a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800368e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003690:	2302      	movs	r3, #2
 8003692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	2303      	movs	r3, #3
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	2300      	movs	r3, #0
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800369c:	2300      	movs	r3, #0
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80036a0:	f107 031c 	add.w	r3, r7, #28
 80036a4:	4619      	mov	r1, r3
 80036a6:	481f      	ldr	r0, [pc, #124]	; (8003724 <HAL_RCC_MCOConfig+0xc8>)
 80036a8:	f7ff fade 	bl	8002c68 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80036ac:	4b1c      	ldr	r3, [pc, #112]	; (8003720 <HAL_RCC_MCOConfig+0xc4>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	430b      	orrs	r3, r1
 80036ba:	4919      	ldr	r1, [pc, #100]	; (8003720 <HAL_RCC_MCOConfig+0xc4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80036c0:	e029      	b.n	8003716 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	4b16      	ldr	r3, [pc, #88]	; (8003720 <HAL_RCC_MCOConfig+0xc4>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4a15      	ldr	r2, [pc, #84]	; (8003720 <HAL_RCC_MCOConfig+0xc4>)
 80036cc:	f043 0304 	orr.w	r3, r3, #4
 80036d0:	6313      	str	r3, [r2, #48]	; 0x30
 80036d2:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_RCC_MCOConfig+0xc4>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80036de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	2302      	movs	r3, #2
 80036e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e8:	2303      	movs	r3, #3
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80036f0:	2300      	movs	r3, #0
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80036f4:	f107 031c 	add.w	r3, r7, #28
 80036f8:	4619      	mov	r1, r3
 80036fa:	480b      	ldr	r0, [pc, #44]	; (8003728 <HAL_RCC_MCOConfig+0xcc>)
 80036fc:	f7ff fab4 	bl	8002c68 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_RCC_MCOConfig+0xc4>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	00d9      	lsls	r1, r3, #3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	430b      	orrs	r3, r1
 8003710:	4903      	ldr	r1, [pc, #12]	; (8003720 <HAL_RCC_MCOConfig+0xc4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
}
 8003716:	bf00      	nop
 8003718:	3730      	adds	r7, #48	; 0x30
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800
 8003724:	40020000 	.word	0x40020000
 8003728:	40020800 	.word	0x40020800

0800372c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800372c:	b5b0      	push	{r4, r5, r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003732:	2100      	movs	r1, #0
 8003734:	6079      	str	r1, [r7, #4]
 8003736:	2100      	movs	r1, #0
 8003738:	60f9      	str	r1, [r7, #12]
 800373a:	2100      	movs	r1, #0
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800373e:	2100      	movs	r1, #0
 8003740:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003742:	4952      	ldr	r1, [pc, #328]	; (800388c <HAL_RCC_GetSysClockFreq+0x160>)
 8003744:	6889      	ldr	r1, [r1, #8]
 8003746:	f001 010c 	and.w	r1, r1, #12
 800374a:	2908      	cmp	r1, #8
 800374c:	d00d      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0x3e>
 800374e:	2908      	cmp	r1, #8
 8003750:	f200 8094 	bhi.w	800387c <HAL_RCC_GetSysClockFreq+0x150>
 8003754:	2900      	cmp	r1, #0
 8003756:	d002      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x32>
 8003758:	2904      	cmp	r1, #4
 800375a:	d003      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x38>
 800375c:	e08e      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800375e:	4b4c      	ldr	r3, [pc, #304]	; (8003890 <HAL_RCC_GetSysClockFreq+0x164>)
 8003760:	60bb      	str	r3, [r7, #8]
       break;
 8003762:	e08e      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003764:	4b4b      	ldr	r3, [pc, #300]	; (8003894 <HAL_RCC_GetSysClockFreq+0x168>)
 8003766:	60bb      	str	r3, [r7, #8]
      break;
 8003768:	e08b      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800376a:	4948      	ldr	r1, [pc, #288]	; (800388c <HAL_RCC_GetSysClockFreq+0x160>)
 800376c:	6849      	ldr	r1, [r1, #4]
 800376e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003772:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003774:	4945      	ldr	r1, [pc, #276]	; (800388c <HAL_RCC_GetSysClockFreq+0x160>)
 8003776:	6849      	ldr	r1, [r1, #4]
 8003778:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800377c:	2900      	cmp	r1, #0
 800377e:	d024      	beq.n	80037ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003780:	4942      	ldr	r1, [pc, #264]	; (800388c <HAL_RCC_GetSysClockFreq+0x160>)
 8003782:	6849      	ldr	r1, [r1, #4]
 8003784:	0989      	lsrs	r1, r1, #6
 8003786:	4608      	mov	r0, r1
 8003788:	f04f 0100 	mov.w	r1, #0
 800378c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003790:	f04f 0500 	mov.w	r5, #0
 8003794:	ea00 0204 	and.w	r2, r0, r4
 8003798:	ea01 0305 	and.w	r3, r1, r5
 800379c:	493d      	ldr	r1, [pc, #244]	; (8003894 <HAL_RCC_GetSysClockFreq+0x168>)
 800379e:	fb01 f003 	mul.w	r0, r1, r3
 80037a2:	2100      	movs	r1, #0
 80037a4:	fb01 f102 	mul.w	r1, r1, r2
 80037a8:	1844      	adds	r4, r0, r1
 80037aa:	493a      	ldr	r1, [pc, #232]	; (8003894 <HAL_RCC_GetSysClockFreq+0x168>)
 80037ac:	fba2 0101 	umull	r0, r1, r2, r1
 80037b0:	1863      	adds	r3, r4, r1
 80037b2:	4619      	mov	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	461a      	mov	r2, r3
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	f7fc fd58 	bl	8000270 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4613      	mov	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e04a      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ca:	4b30      	ldr	r3, [pc, #192]	; (800388c <HAL_RCC_GetSysClockFreq+0x160>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	461a      	mov	r2, r3
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	ea02 0400 	and.w	r4, r2, r0
 80037e2:	ea03 0501 	and.w	r5, r3, r1
 80037e6:	4620      	mov	r0, r4
 80037e8:	4629      	mov	r1, r5
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	014b      	lsls	r3, r1, #5
 80037f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037f8:	0142      	lsls	r2, r0, #5
 80037fa:	4610      	mov	r0, r2
 80037fc:	4619      	mov	r1, r3
 80037fe:	1b00      	subs	r0, r0, r4
 8003800:	eb61 0105 	sbc.w	r1, r1, r5
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	018b      	lsls	r3, r1, #6
 800380e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003812:	0182      	lsls	r2, r0, #6
 8003814:	1a12      	subs	r2, r2, r0
 8003816:	eb63 0301 	sbc.w	r3, r3, r1
 800381a:	f04f 0000 	mov.w	r0, #0
 800381e:	f04f 0100 	mov.w	r1, #0
 8003822:	00d9      	lsls	r1, r3, #3
 8003824:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003828:	00d0      	lsls	r0, r2, #3
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	1912      	adds	r2, r2, r4
 8003830:	eb45 0303 	adc.w	r3, r5, r3
 8003834:	f04f 0000 	mov.w	r0, #0
 8003838:	f04f 0100 	mov.w	r1, #0
 800383c:	0299      	lsls	r1, r3, #10
 800383e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003842:	0290      	lsls	r0, r2, #10
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	461a      	mov	r2, r3
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	f7fc fd0c 	bl	8000270 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4613      	mov	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003860:	4b0a      	ldr	r3, [pc, #40]	; (800388c <HAL_RCC_GetSysClockFreq+0x160>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	3301      	adds	r3, #1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	60bb      	str	r3, [r7, #8]
      break;
 800387a:	e002      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <HAL_RCC_GetSysClockFreq+0x164>)
 800387e:	60bb      	str	r3, [r7, #8]
      break;
 8003880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003882:	68bb      	ldr	r3, [r7, #8]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bdb0      	pop	{r4, r5, r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400
 8003894:	017d7840 	.word	0x017d7840

08003898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_RCC_GetHCLKFreq+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000004 	.word	0x20000004

080038b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038b4:	f7ff fff0 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0b5b      	lsrs	r3, r3, #13
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4903      	ldr	r1, [pc, #12]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	08019250 	.word	0x08019250

080038d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	220f      	movs	r2, #15
 80038e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038e8:	4b12      	ldr	r3, [pc, #72]	; (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0203 	and.w	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	08db      	lsrs	r3, r3, #3
 8003912:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800391a:	4b07      	ldr	r3, [pc, #28]	; (8003938 <HAL_RCC_GetClockConfig+0x60>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0207 	and.w	r2, r3, #7
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	601a      	str	r2, [r3, #0]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
 8003938:	40023c00 	.word	0x40023c00

0800393c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e041      	b.n	80039d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f839 	bl	80039da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f000 f9d8 	bl	8003d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d001      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e04e      	b.n	8003aa6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a23      	ldr	r2, [pc, #140]	; (8003ab4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d022      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a32:	d01d      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d018      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <HAL_TIM_Base_Start_IT+0xcc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00e      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d009      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a18      	ldr	r2, [pc, #96]	; (8003acc <HAL_TIM_Base_Start_IT+0xdc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d111      	bne.n	8003a94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d010      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a92:	e007      	b.n	8003aa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40010400 	.word	0x40010400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40001800 	.word	0x40001800

08003ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0202 	mvn.w	r2, #2
 8003afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f8ee 	bl	8003cf4 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f8e0 	bl	8003ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f8f1 	bl	8003d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0204 	mvn.w	r2, #4
 8003b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2202      	movs	r2, #2
 8003b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f8c4 	bl	8003cf4 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8b6 	bl	8003ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f8c7 	bl	8003d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0208 	mvn.w	r2, #8
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f89a 	bl	8003cf4 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f88c 	bl	8003ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f89d 	bl	8003d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b10      	cmp	r3, #16
 8003be0:	d122      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d11b      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0210 	mvn.w	r2, #16
 8003bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f870 	bl	8003cf4 <HAL_TIM_IC_CaptureCallback>
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f862 	bl	8003ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f873 	bl	8003d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d10e      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d107      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0201 	mvn.w	r2, #1
 8003c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fc feb4 	bl	80009bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b80      	cmp	r3, #128	; 0x80
 8003c60:	d10e      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6c:	2b80      	cmp	r3, #128	; 0x80
 8003c6e:	d107      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f902 	bl	8003e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d10e      	bne.n	8003cac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d107      	bne.n	8003cac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f838 	bl	8003d1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d107      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0220 	mvn.w	r2, #32
 8003cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f8cc 	bl	8003e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a40      	ldr	r2, [pc, #256]	; (8003e44 <TIM_Base_SetConfig+0x114>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4e:	d00f      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a3d      	ldr	r2, [pc, #244]	; (8003e48 <TIM_Base_SetConfig+0x118>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a3c      	ldr	r2, [pc, #240]	; (8003e4c <TIM_Base_SetConfig+0x11c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a3b      	ldr	r2, [pc, #236]	; (8003e50 <TIM_Base_SetConfig+0x120>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a3a      	ldr	r2, [pc, #232]	; (8003e54 <TIM_Base_SetConfig+0x124>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d108      	bne.n	8003d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a2f      	ldr	r2, [pc, #188]	; (8003e44 <TIM_Base_SetConfig+0x114>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d02b      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d90:	d027      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a2c      	ldr	r2, [pc, #176]	; (8003e48 <TIM_Base_SetConfig+0x118>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d023      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a2b      	ldr	r2, [pc, #172]	; (8003e4c <TIM_Base_SetConfig+0x11c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d01f      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a2a      	ldr	r2, [pc, #168]	; (8003e50 <TIM_Base_SetConfig+0x120>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01b      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a29      	ldr	r2, [pc, #164]	; (8003e54 <TIM_Base_SetConfig+0x124>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d017      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <TIM_Base_SetConfig+0x128>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a27      	ldr	r2, [pc, #156]	; (8003e5c <TIM_Base_SetConfig+0x12c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00f      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a26      	ldr	r2, [pc, #152]	; (8003e60 <TIM_Base_SetConfig+0x130>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00b      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a25      	ldr	r2, [pc, #148]	; (8003e64 <TIM_Base_SetConfig+0x134>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d007      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a24      	ldr	r2, [pc, #144]	; (8003e68 <TIM_Base_SetConfig+0x138>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d003      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <TIM_Base_SetConfig+0x13c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d108      	bne.n	8003df4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <TIM_Base_SetConfig+0x114>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d003      	beq.n	8003e28 <TIM_Base_SetConfig+0xf8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a0c      	ldr	r2, [pc, #48]	; (8003e54 <TIM_Base_SetConfig+0x124>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d103      	bne.n	8003e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	615a      	str	r2, [r3, #20]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40010000 	.word	0x40010000
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40000c00 	.word	0x40000c00
 8003e54:	40010400 	.word	0x40010400
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400
 8003e60:	40014800 	.word	0x40014800
 8003e64:	40001800 	.word	0x40001800
 8003e68:	40001c00 	.word	0x40001c00
 8003e6c:	40002000 	.word	0x40002000

08003e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003e9e:	4b98      	ldr	r3, [pc, #608]	; (8004100 <MX_LWIP_Init+0x268>)
 8003ea0:	22c0      	movs	r2, #192	; 0xc0
 8003ea2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003ea4:	4b96      	ldr	r3, [pc, #600]	; (8004100 <MX_LWIP_Init+0x268>)
 8003ea6:	22a8      	movs	r2, #168	; 0xa8
 8003ea8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003eaa:	4b95      	ldr	r3, [pc, #596]	; (8004100 <MX_LWIP_Init+0x268>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 8003eb0:	4b93      	ldr	r3, [pc, #588]	; (8004100 <MX_LWIP_Init+0x268>)
 8003eb2:	22b1      	movs	r2, #177	; 0xb1
 8003eb4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003eb6:	4b93      	ldr	r3, [pc, #588]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003eb8:	22ff      	movs	r2, #255	; 0xff
 8003eba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003ebc:	4b91      	ldr	r3, [pc, #580]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003ebe:	22ff      	movs	r2, #255	; 0xff
 8003ec0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003ec2:	4b90      	ldr	r3, [pc, #576]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003ec4:	22ff      	movs	r2, #255	; 0xff
 8003ec6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003ec8:	4b8e      	ldr	r3, [pc, #568]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003ece:	4b8e      	ldr	r3, [pc, #568]	; (8004108 <MX_LWIP_Init+0x270>)
 8003ed0:	22c0      	movs	r2, #192	; 0xc0
 8003ed2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003ed4:	4b8c      	ldr	r3, [pc, #560]	; (8004108 <MX_LWIP_Init+0x270>)
 8003ed6:	22a8      	movs	r2, #168	; 0xa8
 8003ed8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003eda:	4b8b      	ldr	r3, [pc, #556]	; (8004108 <MX_LWIP_Init+0x270>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003ee0:	4b89      	ldr	r3, [pc, #548]	; (8004108 <MX_LWIP_Init+0x270>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	2000      	movs	r0, #0
 8003eea:	f005 fd11 	bl	8009910 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003eee:	4b84      	ldr	r3, [pc, #528]	; (8004100 <MX_LWIP_Init+0x268>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	061a      	lsls	r2, r3, #24
 8003ef4:	4b82      	ldr	r3, [pc, #520]	; (8004100 <MX_LWIP_Init+0x268>)
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	041b      	lsls	r3, r3, #16
 8003efa:	431a      	orrs	r2, r3
 8003efc:	4b80      	ldr	r3, [pc, #512]	; (8004100 <MX_LWIP_Init+0x268>)
 8003efe:	789b      	ldrb	r3, [r3, #2]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	4313      	orrs	r3, r2
 8003f04:	4a7e      	ldr	r2, [pc, #504]	; (8004100 <MX_LWIP_Init+0x268>)
 8003f06:	78d2      	ldrb	r2, [r2, #3]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	061a      	lsls	r2, r3, #24
 8003f0c:	4b7c      	ldr	r3, [pc, #496]	; (8004100 <MX_LWIP_Init+0x268>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	0619      	lsls	r1, r3, #24
 8003f12:	4b7b      	ldr	r3, [pc, #492]	; (8004100 <MX_LWIP_Init+0x268>)
 8003f14:	785b      	ldrb	r3, [r3, #1]
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	4319      	orrs	r1, r3
 8003f1a:	4b79      	ldr	r3, [pc, #484]	; (8004100 <MX_LWIP_Init+0x268>)
 8003f1c:	789b      	ldrb	r3, [r3, #2]
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	430b      	orrs	r3, r1
 8003f22:	4977      	ldr	r1, [pc, #476]	; (8004100 <MX_LWIP_Init+0x268>)
 8003f24:	78c9      	ldrb	r1, [r1, #3]
 8003f26:	430b      	orrs	r3, r1
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	4b73      	ldr	r3, [pc, #460]	; (8004100 <MX_LWIP_Init+0x268>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	0619      	lsls	r1, r3, #24
 8003f36:	4b72      	ldr	r3, [pc, #456]	; (8004100 <MX_LWIP_Init+0x268>)
 8003f38:	785b      	ldrb	r3, [r3, #1]
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	4319      	orrs	r1, r3
 8003f3e:	4b70      	ldr	r3, [pc, #448]	; (8004100 <MX_LWIP_Init+0x268>)
 8003f40:	789b      	ldrb	r3, [r3, #2]
 8003f42:	021b      	lsls	r3, r3, #8
 8003f44:	430b      	orrs	r3, r1
 8003f46:	496e      	ldr	r1, [pc, #440]	; (8004100 <MX_LWIP_Init+0x268>)
 8003f48:	78c9      	ldrb	r1, [r1, #3]
 8003f4a:	430b      	orrs	r3, r1
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f52:	431a      	orrs	r2, r3
 8003f54:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <MX_LWIP_Init+0x268>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	0619      	lsls	r1, r3, #24
 8003f5a:	4b69      	ldr	r3, [pc, #420]	; (8004100 <MX_LWIP_Init+0x268>)
 8003f5c:	785b      	ldrb	r3, [r3, #1]
 8003f5e:	041b      	lsls	r3, r3, #16
 8003f60:	4319      	orrs	r1, r3
 8003f62:	4b67      	ldr	r3, [pc, #412]	; (8004100 <MX_LWIP_Init+0x268>)
 8003f64:	789b      	ldrb	r3, [r3, #2]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	4965      	ldr	r1, [pc, #404]	; (8004100 <MX_LWIP_Init+0x268>)
 8003f6c:	78c9      	ldrb	r1, [r1, #3]
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	0e1b      	lsrs	r3, r3, #24
 8003f72:	4313      	orrs	r3, r2
 8003f74:	4a65      	ldr	r2, [pc, #404]	; (800410c <MX_LWIP_Init+0x274>)
 8003f76:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003f78:	4b62      	ldr	r3, [pc, #392]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	061a      	lsls	r2, r3, #24
 8003f7e:	4b61      	ldr	r3, [pc, #388]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003f80:	785b      	ldrb	r3, [r3, #1]
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	431a      	orrs	r2, r3
 8003f86:	4b5f      	ldr	r3, [pc, #380]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003f88:	789b      	ldrb	r3, [r3, #2]
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	4a5d      	ldr	r2, [pc, #372]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003f90:	78d2      	ldrb	r2, [r2, #3]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	061a      	lsls	r2, r3, #24
 8003f96:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	0619      	lsls	r1, r3, #24
 8003f9c:	4b59      	ldr	r3, [pc, #356]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003f9e:	785b      	ldrb	r3, [r3, #1]
 8003fa0:	041b      	lsls	r3, r3, #16
 8003fa2:	4319      	orrs	r1, r3
 8003fa4:	4b57      	ldr	r3, [pc, #348]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003fa6:	789b      	ldrb	r3, [r3, #2]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	430b      	orrs	r3, r1
 8003fac:	4955      	ldr	r1, [pc, #340]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003fae:	78c9      	ldrb	r1, [r1, #3]
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	4b52      	ldr	r3, [pc, #328]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	0619      	lsls	r1, r3, #24
 8003fc0:	4b50      	ldr	r3, [pc, #320]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003fc2:	785b      	ldrb	r3, [r3, #1]
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	4319      	orrs	r1, r3
 8003fc8:	4b4e      	ldr	r3, [pc, #312]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003fca:	789b      	ldrb	r3, [r3, #2]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	494c      	ldr	r1, [pc, #304]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003fd2:	78c9      	ldrb	r1, [r1, #3]
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	4b49      	ldr	r3, [pc, #292]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	0619      	lsls	r1, r3, #24
 8003fe4:	4b47      	ldr	r3, [pc, #284]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003fe6:	785b      	ldrb	r3, [r3, #1]
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	4319      	orrs	r1, r3
 8003fec:	4b45      	ldr	r3, [pc, #276]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003fee:	789b      	ldrb	r3, [r3, #2]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	4943      	ldr	r1, [pc, #268]	; (8004104 <MX_LWIP_Init+0x26c>)
 8003ff6:	78c9      	ldrb	r1, [r1, #3]
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	0e1b      	lsrs	r3, r3, #24
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	4a44      	ldr	r2, [pc, #272]	; (8004110 <MX_LWIP_Init+0x278>)
 8004000:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004002:	4b41      	ldr	r3, [pc, #260]	; (8004108 <MX_LWIP_Init+0x270>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	061a      	lsls	r2, r3, #24
 8004008:	4b3f      	ldr	r3, [pc, #252]	; (8004108 <MX_LWIP_Init+0x270>)
 800400a:	785b      	ldrb	r3, [r3, #1]
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	431a      	orrs	r2, r3
 8004010:	4b3d      	ldr	r3, [pc, #244]	; (8004108 <MX_LWIP_Init+0x270>)
 8004012:	789b      	ldrb	r3, [r3, #2]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	4313      	orrs	r3, r2
 8004018:	4a3b      	ldr	r2, [pc, #236]	; (8004108 <MX_LWIP_Init+0x270>)
 800401a:	78d2      	ldrb	r2, [r2, #3]
 800401c:	4313      	orrs	r3, r2
 800401e:	061a      	lsls	r2, r3, #24
 8004020:	4b39      	ldr	r3, [pc, #228]	; (8004108 <MX_LWIP_Init+0x270>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	0619      	lsls	r1, r3, #24
 8004026:	4b38      	ldr	r3, [pc, #224]	; (8004108 <MX_LWIP_Init+0x270>)
 8004028:	785b      	ldrb	r3, [r3, #1]
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	4319      	orrs	r1, r3
 800402e:	4b36      	ldr	r3, [pc, #216]	; (8004108 <MX_LWIP_Init+0x270>)
 8004030:	789b      	ldrb	r3, [r3, #2]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	430b      	orrs	r3, r1
 8004036:	4934      	ldr	r1, [pc, #208]	; (8004108 <MX_LWIP_Init+0x270>)
 8004038:	78c9      	ldrb	r1, [r1, #3]
 800403a:	430b      	orrs	r3, r1
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004042:	431a      	orrs	r2, r3
 8004044:	4b30      	ldr	r3, [pc, #192]	; (8004108 <MX_LWIP_Init+0x270>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	0619      	lsls	r1, r3, #24
 800404a:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <MX_LWIP_Init+0x270>)
 800404c:	785b      	ldrb	r3, [r3, #1]
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	4319      	orrs	r1, r3
 8004052:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <MX_LWIP_Init+0x270>)
 8004054:	789b      	ldrb	r3, [r3, #2]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	430b      	orrs	r3, r1
 800405a:	492b      	ldr	r1, [pc, #172]	; (8004108 <MX_LWIP_Init+0x270>)
 800405c:	78c9      	ldrb	r1, [r1, #3]
 800405e:	430b      	orrs	r3, r1
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004066:	431a      	orrs	r2, r3
 8004068:	4b27      	ldr	r3, [pc, #156]	; (8004108 <MX_LWIP_Init+0x270>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	0619      	lsls	r1, r3, #24
 800406e:	4b26      	ldr	r3, [pc, #152]	; (8004108 <MX_LWIP_Init+0x270>)
 8004070:	785b      	ldrb	r3, [r3, #1]
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	4319      	orrs	r1, r3
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <MX_LWIP_Init+0x270>)
 8004078:	789b      	ldrb	r3, [r3, #2]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	430b      	orrs	r3, r1
 800407e:	4922      	ldr	r1, [pc, #136]	; (8004108 <MX_LWIP_Init+0x270>)
 8004080:	78c9      	ldrb	r1, [r1, #3]
 8004082:	430b      	orrs	r3, r1
 8004084:	0e1b      	lsrs	r3, r3, #24
 8004086:	4313      	orrs	r3, r2
 8004088:	4a22      	ldr	r2, [pc, #136]	; (8004114 <MX_LWIP_Init+0x27c>)
 800408a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800408c:	4b22      	ldr	r3, [pc, #136]	; (8004118 <MX_LWIP_Init+0x280>)
 800408e:	9302      	str	r3, [sp, #8]
 8004090:	4b22      	ldr	r3, [pc, #136]	; (800411c <MX_LWIP_Init+0x284>)
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	2300      	movs	r3, #0
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <MX_LWIP_Init+0x27c>)
 800409a:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <MX_LWIP_Init+0x278>)
 800409c:	491b      	ldr	r1, [pc, #108]	; (800410c <MX_LWIP_Init+0x274>)
 800409e:	4820      	ldr	r0, [pc, #128]	; (8004120 <MX_LWIP_Init+0x288>)
 80040a0:	f006 f9ba 	bl	800a418 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80040a4:	481e      	ldr	r0, [pc, #120]	; (8004120 <MX_LWIP_Init+0x288>)
 80040a6:	f006 fb69 	bl	800a77c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <MX_LWIP_Init+0x288>)
 80040ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80040bc:	4818      	ldr	r0, [pc, #96]	; (8004120 <MX_LWIP_Init+0x288>)
 80040be:	f006 fb6d 	bl	800a79c <netif_set_up>
 80040c2:	e002      	b.n	80040ca <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80040c4:	4816      	ldr	r0, [pc, #88]	; (8004120 <MX_LWIP_Init+0x288>)
 80040c6:	f006 fbd5 	bl	800a874 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80040ca:	4916      	ldr	r1, [pc, #88]	; (8004124 <MX_LWIP_Init+0x28c>)
 80040cc:	4814      	ldr	r0, [pc, #80]	; (8004120 <MX_LWIP_Init+0x288>)
 80040ce:	f006 fc03 	bl	800a8d8 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80040d2:	2300      	movs	r3, #0
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	2300      	movs	r3, #0
 80040d8:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80040da:	463b      	mov	r3, r7
 80040dc:	2101      	movs	r1, #1
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fd36 	bl	8004b50 <osSemaphoreCreate>
 80040e4:	4603      	mov	r3, r0
 80040e6:	4a10      	ldr	r2, [pc, #64]	; (8004128 <MX_LWIP_Init+0x290>)
 80040e8:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <MX_LWIP_Init+0x294>)
 80040ec:	4a0c      	ldr	r2, [pc, #48]	; (8004120 <MX_LWIP_Init+0x288>)
 80040ee:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80040f0:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <MX_LWIP_Init+0x290>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0d      	ldr	r2, [pc, #52]	; (800412c <MX_LWIP_Init+0x294>)
 80040f6:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20006ae0 	.word	0x20006ae0
 8004104:	20006adc 	.word	0x20006adc
 8004108:	20006aa0 	.word	0x20006aa0
 800410c:	20006ad8 	.word	0x20006ad8
 8004110:	20006ae4 	.word	0x20006ae4
 8004114:	20006ae8 	.word	0x20006ae8
 8004118:	08009821 	.word	0x08009821
 800411c:	0800475d 	.word	0x0800475d
 8004120:	20006aa4 	.word	0x20006aa4
 8004124:	080047c9 	.word	0x080047c9
 8004128:	20000388 	.word	0x20000388
 800412c:	20006a98 	.word	0x20006a98

08004130 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08e      	sub	sp, #56	; 0x38
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a4a      	ldr	r2, [pc, #296]	; (8004278 <HAL_ETH_MspInit+0x148>)
 800414e:	4293      	cmp	r3, r2
 8004150:	f040 808d 	bne.w	800426e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004154:	2300      	movs	r3, #0
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	4b48      	ldr	r3, [pc, #288]	; (800427c <HAL_ETH_MspInit+0x14c>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	4a47      	ldr	r2, [pc, #284]	; (800427c <HAL_ETH_MspInit+0x14c>)
 800415e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004162:	6313      	str	r3, [r2, #48]	; 0x30
 8004164:	4b45      	ldr	r3, [pc, #276]	; (800427c <HAL_ETH_MspInit+0x14c>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	623b      	str	r3, [r7, #32]
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	4b41      	ldr	r3, [pc, #260]	; (800427c <HAL_ETH_MspInit+0x14c>)
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	4a40      	ldr	r2, [pc, #256]	; (800427c <HAL_ETH_MspInit+0x14c>)
 800417a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800417e:	6313      	str	r3, [r2, #48]	; 0x30
 8004180:	4b3e      	ldr	r3, [pc, #248]	; (800427c <HAL_ETH_MspInit+0x14c>)
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	2300      	movs	r3, #0
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	4b3a      	ldr	r3, [pc, #232]	; (800427c <HAL_ETH_MspInit+0x14c>)
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	4a39      	ldr	r2, [pc, #228]	; (800427c <HAL_ETH_MspInit+0x14c>)
 8004196:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800419a:	6313      	str	r3, [r2, #48]	; 0x30
 800419c:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_ETH_MspInit+0x14c>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	4b33      	ldr	r3, [pc, #204]	; (800427c <HAL_ETH_MspInit+0x14c>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	4a32      	ldr	r2, [pc, #200]	; (800427c <HAL_ETH_MspInit+0x14c>)
 80041b2:	f043 0304 	orr.w	r3, r3, #4
 80041b6:	6313      	str	r3, [r2, #48]	; 0x30
 80041b8:	4b30      	ldr	r3, [pc, #192]	; (800427c <HAL_ETH_MspInit+0x14c>)
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	4b2c      	ldr	r3, [pc, #176]	; (800427c <HAL_ETH_MspInit+0x14c>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	4a2b      	ldr	r2, [pc, #172]	; (800427c <HAL_ETH_MspInit+0x14c>)
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	6313      	str	r3, [r2, #48]	; 0x30
 80041d4:	4b29      	ldr	r3, [pc, #164]	; (800427c <HAL_ETH_MspInit+0x14c>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_ETH_MspInit+0x14c>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	4a24      	ldr	r2, [pc, #144]	; (800427c <HAL_ETH_MspInit+0x14c>)
 80041ea:	f043 0302 	orr.w	r3, r3, #2
 80041ee:	6313      	str	r3, [r2, #48]	; 0x30
 80041f0:	4b22      	ldr	r3, [pc, #136]	; (800427c <HAL_ETH_MspInit+0x14c>)
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80041fc:	2332      	movs	r3, #50	; 0x32
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004200:	2302      	movs	r3, #2
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	2300      	movs	r3, #0
 8004206:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004208:	2303      	movs	r3, #3
 800420a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800420c:	230b      	movs	r3, #11
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004214:	4619      	mov	r1, r3
 8004216:	481a      	ldr	r0, [pc, #104]	; (8004280 <HAL_ETH_MspInit+0x150>)
 8004218:	f7fe fd26 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800421c:	2386      	movs	r3, #134	; 0x86
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004220:	2302      	movs	r3, #2
 8004222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004224:	2300      	movs	r3, #0
 8004226:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004228:	2303      	movs	r3, #3
 800422a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800422c:	230b      	movs	r3, #11
 800422e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004234:	4619      	mov	r1, r3
 8004236:	4813      	ldr	r0, [pc, #76]	; (8004284 <HAL_ETH_MspInit+0x154>)
 8004238:	f7fe fd16 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800423c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004242:	2302      	movs	r3, #2
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004246:	2300      	movs	r3, #0
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800424a:	2303      	movs	r3, #3
 800424c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800424e:	230b      	movs	r3, #11
 8004250:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004256:	4619      	mov	r1, r3
 8004258:	480b      	ldr	r0, [pc, #44]	; (8004288 <HAL_ETH_MspInit+0x158>)
 800425a:	f7fe fd05 	bl	8002c68 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800425e:	2200      	movs	r2, #0
 8004260:	2105      	movs	r1, #5
 8004262:	203d      	movs	r0, #61	; 0x3d
 8004264:	f7fd fb30 	bl	80018c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004268:	203d      	movs	r0, #61	; 0x3d
 800426a:	f7fd fb49 	bl	8001900 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800426e:	bf00      	nop
 8004270:	3738      	adds	r7, #56	; 0x38
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40028000 	.word	0x40028000
 800427c:	40023800 	.word	0x40023800
 8004280:	40020800 	.word	0x40020800
 8004284:	40020000 	.word	0x40020000
 8004288:	40020400 	.word	0x40020400

0800428c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <HAL_ETH_RxCpltCallback+0x1c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fcd9 	bl	8004c50 <osSemaphoreRelease>
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	2000038c 	.word	0x2000038c

080042ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80042ac:	b5b0      	push	{r4, r5, r7, lr}
 80042ae:	b090      	sub	sp, #64	; 0x40
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80042b8:	4b5f      	ldr	r3, [pc, #380]	; (8004438 <low_level_init+0x18c>)
 80042ba:	4a60      	ldr	r2, [pc, #384]	; (800443c <low_level_init+0x190>)
 80042bc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 80042be:	4b5e      	ldr	r3, [pc, #376]	; (8004438 <low_level_init+0x18c>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80042c4:	4b5c      	ldr	r3, [pc, #368]	; (8004438 <low_level_init+0x18c>)
 80042c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042ca:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80042cc:	4b5a      	ldr	r3, [pc, #360]	; (8004438 <low_level_init+0x18c>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80042d2:	4b59      	ldr	r3, [pc, #356]	; (8004438 <low_level_init+0x18c>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80042d8:	2300      	movs	r3, #0
 80042da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80042e4:	23e1      	movs	r3, #225	; 0xe1
 80042e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80042f6:	2300      	movs	r3, #0
 80042f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80042fc:	4a4e      	ldr	r2, [pc, #312]	; (8004438 <low_level_init+0x18c>)
 80042fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004302:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004304:	4b4c      	ldr	r3, [pc, #304]	; (8004438 <low_level_init+0x18c>)
 8004306:	2201      	movs	r2, #1
 8004308:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800430a:	4b4b      	ldr	r3, [pc, #300]	; (8004438 <low_level_init+0x18c>)
 800430c:	2200      	movs	r2, #0
 800430e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004310:	4b49      	ldr	r3, [pc, #292]	; (8004438 <low_level_init+0x18c>)
 8004312:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004316:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004318:	4847      	ldr	r0, [pc, #284]	; (8004438 <low_level_init+0x18c>)
 800431a:	f7fd faff 	bl	800191c <HAL_ETH_Init>
 800431e:	4603      	mov	r3, r0
 8004320:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004324:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004328:	2b00      	cmp	r3, #0
 800432a:	d108      	bne.n	800433e <low_level_init+0x92>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004332:	f043 0304 	orr.w	r3, r3, #4
 8004336:	b2da      	uxtb	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800433e:	2304      	movs	r3, #4
 8004340:	4a3f      	ldr	r2, [pc, #252]	; (8004440 <low_level_init+0x194>)
 8004342:	4940      	ldr	r1, [pc, #256]	; (8004444 <low_level_init+0x198>)
 8004344:	483c      	ldr	r0, [pc, #240]	; (8004438 <low_level_init+0x18c>)
 8004346:	f7fd fc85 	bl	8001c54 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800434a:	2304      	movs	r3, #4
 800434c:	4a3e      	ldr	r2, [pc, #248]	; (8004448 <low_level_init+0x19c>)
 800434e:	493f      	ldr	r1, [pc, #252]	; (800444c <low_level_init+0x1a0>)
 8004350:	4839      	ldr	r0, [pc, #228]	; (8004438 <low_level_init+0x18c>)
 8004352:	f7fd fce8 	bl	8001d26 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2206      	movs	r2, #6
 800435a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800435e:	4b36      	ldr	r3, [pc, #216]	; (8004438 <low_level_init+0x18c>)
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800436a:	4b33      	ldr	r3, [pc, #204]	; (8004438 <low_level_init+0x18c>)
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	785a      	ldrb	r2, [r3, #1]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004376:	4b30      	ldr	r3, [pc, #192]	; (8004438 <low_level_init+0x18c>)
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	789a      	ldrb	r2, [r3, #2]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004382:	4b2d      	ldr	r3, [pc, #180]	; (8004438 <low_level_init+0x18c>)
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	78da      	ldrb	r2, [r3, #3]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800438e:	4b2a      	ldr	r3, [pc, #168]	; (8004438 <low_level_init+0x18c>)
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	791a      	ldrb	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800439a:	4b27      	ldr	r3, [pc, #156]	; (8004438 <low_level_init+0x18c>)
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	795a      	ldrb	r2, [r3, #5]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80043ac:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80043b4:	f043 030a 	orr.w	r3, r3, #10
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80043c0:	2300      	movs	r3, #0
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c4:	2300      	movs	r3, #0
 80043c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80043c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043cc:	2101      	movs	r1, #1
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fbbe 	bl	8004b50 <osSemaphoreCreate>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <low_level_init+0x1a4>)
 80043d8:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <low_level_init+0x1a8>)
 80043dc:	f107 040c 	add.w	r4, r7, #12
 80043e0:	461d      	mov	r5, r3
 80043e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80043ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80043ee:	f107 030c 	add.w	r3, r7, #12
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 faae 	bl	8004956 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80043fa:	480f      	ldr	r0, [pc, #60]	; (8004438 <low_level_init+0x18c>)
 80043fc:	f7fd ffbb 	bl	8002376 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004400:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004404:	461a      	mov	r2, r3
 8004406:	211d      	movs	r1, #29
 8004408:	480b      	ldr	r0, [pc, #44]	; (8004438 <low_level_init+0x18c>)
 800440a:	f7fd fee6 	bl	80021da <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	f043 030b 	orr.w	r3, r3, #11
 8004414:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004418:	461a      	mov	r2, r3
 800441a:	211d      	movs	r1, #29
 800441c:	4806      	ldr	r0, [pc, #24]	; (8004438 <low_level_init+0x18c>)
 800441e:	f7fd ff44 	bl	80022aa <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004422:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004426:	461a      	mov	r2, r3
 8004428:	211d      	movs	r1, #29
 800442a:	4803      	ldr	r0, [pc, #12]	; (8004438 <low_level_init+0x18c>)
 800442c:	f7fd fed5 	bl	80021da <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004430:	bf00      	nop
 8004432:	3740      	adds	r7, #64	; 0x40
 8004434:	46bd      	mov	sp, r7
 8004436:	bdb0      	pop	{r4, r5, r7, pc}
 8004438:	200083bc 	.word	0x200083bc
 800443c:	40028000 	.word	0x40028000
 8004440:	20008404 	.word	0x20008404
 8004444:	20006aec 	.word	0x20006aec
 8004448:	20006b6c 	.word	0x20006b6c
 800444c:	2000833c 	.word	0x2000833c
 8004450:	2000038c 	.word	0x2000038c
 8004454:	08015cf8 	.word	0x08015cf8

08004458 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	; 0x28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004462:	4b4b      	ldr	r3, [pc, #300]	; (8004590 <low_level_output+0x138>)
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800447a:	4b45      	ldr	r3, [pc, #276]	; (8004590 <low_level_output+0x138>)
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	e05a      	b.n	8004540 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	da03      	bge.n	800449a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004492:	23f8      	movs	r3, #248	; 0xf8
 8004494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004498:	e05c      	b.n	8004554 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	895b      	ldrh	r3, [r3, #10]
 800449e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80044a4:	e02f      	b.n	8004506 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	18d0      	adds	r0, r2, r3
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	18d1      	adds	r1, r2, r3
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80044ba:	3304      	adds	r3, #4
 80044bc:	461a      	mov	r2, r3
 80044be:	f010 fc51 	bl	8014d64 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	da03      	bge.n	80044d8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80044d0:	23f8      	movs	r3, #248	; 0xf8
 80044d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80044d6:	e03d      	b.n	8004554 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80044e8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80044f4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004500:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4413      	add	r3, r2
 800450c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004510:	4293      	cmp	r3, r2
 8004512:	d8c8      	bhi.n	80044a6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	18d0      	adds	r0, r2, r3
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4413      	add	r3, r2
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4619      	mov	r1, r3
 8004526:	f010 fc1d 	bl	8014d64 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	623b      	str	r3, [r7, #32]
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1a1      	bne.n	800448a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004546:	6979      	ldr	r1, [r7, #20]
 8004548:	4811      	ldr	r0, [pc, #68]	; (8004590 <low_level_output+0x138>)
 800454a:	f7fd fc59 	bl	8001e00 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <low_level_output+0x138>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455c:	3314      	adds	r3, #20
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00d      	beq.n	8004584 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004568:	4b09      	ldr	r3, [pc, #36]	; (8004590 <low_level_output+0x138>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004570:	3314      	adds	r3, #20
 8004572:	2220      	movs	r2, #32
 8004574:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004576:	4b06      	ldr	r3, [pc, #24]	; (8004590 <low_level_output+0x138>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800457e:	3304      	adds	r3, #4
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004584:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004588:	4618      	mov	r0, r3
 800458a:	3728      	adds	r7, #40	; 0x28
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	200083bc 	.word	0x200083bc

08004594 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08c      	sub	sp, #48	; 0x30
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800459c:	2300      	movs	r3, #0
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80045b8:	484f      	ldr	r0, [pc, #316]	; (80046f8 <low_level_input+0x164>)
 80045ba:	f7fd fd0b 	bl	8001fd4 <HAL_ETH_GetReceivedFrame_IT>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <low_level_input+0x34>

    return NULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	e092      	b.n	80046ee <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80045c8:	4b4b      	ldr	r3, [pc, #300]	; (80046f8 <low_level_input+0x164>)
 80045ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045cc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80045ce:	4b4a      	ldr	r3, [pc, #296]	; (80046f8 <low_level_input+0x164>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80045d4:	89fb      	ldrh	r3, [r7, #14]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80045da:	89fb      	ldrh	r3, [r7, #14]
 80045dc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80045e0:	4619      	mov	r1, r3
 80045e2:	2000      	movs	r0, #0
 80045e4:	f006 fa42 	bl	800aa6c <pbuf_alloc>
 80045e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d04b      	beq.n	8004688 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80045f0:	4b41      	ldr	r3, [pc, #260]	; (80046f8 <low_level_input+0x164>)
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045fe:	e040      	b.n	8004682 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	895b      	ldrh	r3, [r3, #10]
 8004604:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800460a:	e021      	b.n	8004650 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	18d0      	adds	r0, r2, r3
 8004614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	18d1      	adds	r1, r2, r3
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004620:	3304      	adds	r3, #4
 8004622:	461a      	mov	r2, r3
 8004624:	f010 fb9e 	bl	8014d64 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	4413      	add	r3, r2
 800463a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800463e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800464a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	4413      	add	r3, r2
 8004656:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800465a:	4293      	cmp	r3, r2
 800465c:	d8d6      	bhi.n	800460c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	18d0      	adds	r0, r2, r3
 8004666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	4413      	add	r3, r2
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4619      	mov	r1, r3
 8004670:	f010 fb78 	bl	8014d64 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	4413      	add	r3, r2
 800467a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800467c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1bb      	bne.n	8004600 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004688:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <low_level_input+0x164>)
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	e00b      	b.n	80046ac <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	3301      	adds	r3, #1
 80046aa:	613b      	str	r3, [r7, #16]
 80046ac:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <low_level_input+0x164>)
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d3ee      	bcc.n	8004694 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <low_level_input+0x164>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80046bc:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <low_level_input+0x164>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c4:	3314      	adds	r3, #20
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00d      	beq.n	80046ec <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80046d0:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <low_level_input+0x164>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d8:	3314      	adds	r3, #20
 80046da:	2280      	movs	r2, #128	; 0x80
 80046dc:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <low_level_input+0x164>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e6:	3308      	adds	r3, #8
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
  }
  return p;
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3730      	adds	r7, #48	; 0x30
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	200083bc 	.word	0x200083bc

080046fc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004708:	4b12      	ldr	r3, [pc, #72]	; (8004754 <ethernetif_input+0x58>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f04f 31ff 	mov.w	r1, #4294967295
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fa4f 	bl	8004bb4 <osSemaphoreWait>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f5      	bne.n	8004708 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800471c:	480e      	ldr	r0, [pc, #56]	; (8004758 <ethernetif_input+0x5c>)
 800471e:	f010 f991 	bl	8014a44 <sys_mutex_lock>
        p = low_level_input( netif );
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7ff ff36 	bl	8004594 <low_level_input>
 8004728:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	68f9      	ldr	r1, [r7, #12]
 8004736:	68b8      	ldr	r0, [r7, #8]
 8004738:	4798      	blx	r3
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004740:	68b8      	ldr	r0, [r7, #8]
 8004742:	f006 fc77 	bl	800b034 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004746:	4804      	ldr	r0, [pc, #16]	; (8004758 <ethernetif_input+0x5c>)
 8004748:	f010 f98b 	bl	8014a62 <sys_mutex_unlock>
      } while(p!=NULL);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e4      	bne.n	800471c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004752:	e7d9      	b.n	8004708 <ethernetif_input+0xc>
 8004754:	2000038c 	.word	0x2000038c
 8004758:	20009c14 	.word	0x20009c14

0800475c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <ethernetif_init+0x1c>
 800476a:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <ethernetif_init+0x48>)
 800476c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8004770:	490d      	ldr	r1, [pc, #52]	; (80047a8 <ethernetif_init+0x4c>)
 8004772:	480e      	ldr	r0, [pc, #56]	; (80047ac <ethernetif_init+0x50>)
 8004774:	f010 fbb6 	bl	8014ee4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2273      	movs	r2, #115	; 0x73
 800477c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2274      	movs	r2, #116	; 0x74
 8004784:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <ethernetif_init+0x54>)
 800478c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <ethernetif_init+0x58>)
 8004792:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fd89 	bl	80042ac <low_level_init>

  return ERR_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	08015d14 	.word	0x08015d14
 80047a8:	08015d30 	.word	0x08015d30
 80047ac:	08015d40 	.word	0x08015d40
 80047b0:	08012a59 	.word	0x08012a59
 80047b4:	08004459 	.word	0x08004459

080047b8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80047bc:	f7fc ff9c 	bl	80016f8 <HAL_GetTick>
 80047c0:	4603      	mov	r3, r0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047de:	089b      	lsrs	r3, r3, #2
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d05d      	beq.n	80048a6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80047ea:	4b34      	ldr	r3, [pc, #208]	; (80048bc <ethernetif_update_config+0xf4>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d03f      	beq.n	8004872 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80047f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047f6:	2100      	movs	r1, #0
 80047f8:	4830      	ldr	r0, [pc, #192]	; (80048bc <ethernetif_update_config+0xf4>)
 80047fa:	f7fd fd56 	bl	80022aa <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80047fe:	f7fc ff7b 	bl	80016f8 <HAL_GetTick>
 8004802:	4603      	mov	r3, r0
 8004804:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004806:	f107 0308 	add.w	r3, r7, #8
 800480a:	461a      	mov	r2, r3
 800480c:	2101      	movs	r1, #1
 800480e:	482b      	ldr	r0, [pc, #172]	; (80048bc <ethernetif_update_config+0xf4>)
 8004810:	f7fd fce3 	bl	80021da <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004814:	f7fc ff70 	bl	80016f8 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004822:	d828      	bhi.n	8004876 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0eb      	beq.n	8004806 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800482e:	f107 0308 	add.w	r3, r7, #8
 8004832:	461a      	mov	r2, r3
 8004834:	2110      	movs	r1, #16
 8004836:	4821      	ldr	r0, [pc, #132]	; (80048bc <ethernetif_update_config+0xf4>)
 8004838:	f7fd fccf 	bl	80021da <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d004      	beq.n	8004850 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004846:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <ethernetif_update_config+0xf4>)
 8004848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800484c:	60da      	str	r2, [r3, #12]
 800484e:	e002      	b.n	8004856 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <ethernetif_update_config+0xf4>)
 8004852:	2200      	movs	r2, #0
 8004854:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004860:	4b16      	ldr	r3, [pc, #88]	; (80048bc <ethernetif_update_config+0xf4>)
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
 8004866:	e016      	b.n	8004896 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004868:	4b14      	ldr	r3, [pc, #80]	; (80048bc <ethernetif_update_config+0xf4>)
 800486a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	e011      	b.n	8004896 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <ethernetif_update_config+0xb0>
          goto error;
 8004876:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004878:	4b10      	ldr	r3, [pc, #64]	; (80048bc <ethernetif_update_config+0xf4>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	08db      	lsrs	r3, r3, #3
 800487e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004880:	4b0e      	ldr	r3, [pc, #56]	; (80048bc <ethernetif_update_config+0xf4>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004888:	4313      	orrs	r3, r2
 800488a:	b29b      	uxth	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	2100      	movs	r1, #0
 8004890:	480a      	ldr	r0, [pc, #40]	; (80048bc <ethernetif_update_config+0xf4>)
 8004892:	f7fd fd0a 	bl	80022aa <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004896:	2100      	movs	r1, #0
 8004898:	4808      	ldr	r0, [pc, #32]	; (80048bc <ethernetif_update_config+0xf4>)
 800489a:	f7fd fdcb 	bl	8002434 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800489e:	4807      	ldr	r0, [pc, #28]	; (80048bc <ethernetif_update_config+0xf4>)
 80048a0:	f7fd fd69 	bl	8002376 <HAL_ETH_Start>
 80048a4:	e002      	b.n	80048ac <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80048a6:	4805      	ldr	r0, [pc, #20]	; (80048bc <ethernetif_update_config+0xf4>)
 80048a8:	f7fd fd94 	bl	80023d4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f807 	bl	80048c0 <ethernetif_notify_conn_changed>
}
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	200083bc 	.word	0x200083bc

080048c0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80048e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048e6:	2b84      	cmp	r3, #132	; 0x84
 80048e8:	d005      	beq.n	80048f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80048ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	3303      	adds	r3, #3
 80048f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80048f6:	68fb      	ldr	r3, [r7, #12]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800490a:	f3ef 8305 	mrs	r3, IPSR
 800490e:	607b      	str	r3, [r7, #4]
  return(result);
 8004910:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004912:	2b00      	cmp	r3, #0
 8004914:	bf14      	ite	ne
 8004916:	2301      	movne	r3, #1
 8004918:	2300      	moveq	r3, #0
 800491a:	b2db      	uxtb	r3, r3
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800492c:	f001 fd3c 	bl	80063a8 <vTaskStartScheduler>
  
  return osOK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	bd80      	pop	{r7, pc}

08004936 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800493a:	f7ff ffe3 	bl	8004904 <inHandlerMode>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004944:	f001 fe54 	bl	80065f0 <xTaskGetTickCountFromISR>
 8004948:	4603      	mov	r3, r0
 800494a:	e002      	b.n	8004952 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800494c:	f001 fe40 	bl	80065d0 <xTaskGetTickCount>
 8004950:	4603      	mov	r3, r0
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	bd80      	pop	{r7, pc}

08004956 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004956:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004958:	b089      	sub	sp, #36	; 0x24
 800495a:	af04      	add	r7, sp, #16
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d020      	beq.n	80049aa <osThreadCreate+0x54>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01c      	beq.n	80049aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685c      	ldr	r4, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681d      	ldr	r5, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691e      	ldr	r6, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff ffa6 	bl	80048d4 <makeFreeRtosPriority>
 8004988:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004992:	9202      	str	r2, [sp, #8]
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	9100      	str	r1, [sp, #0]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	4632      	mov	r2, r6
 800499c:	4629      	mov	r1, r5
 800499e:	4620      	mov	r0, r4
 80049a0:	f001 fb24 	bl	8005fec <xTaskCreateStatic>
 80049a4:	4603      	mov	r3, r0
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e01c      	b.n	80049e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685c      	ldr	r4, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049b6:	b29e      	uxth	r6, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff ff88 	bl	80048d4 <makeFreeRtosPriority>
 80049c4:	4602      	mov	r2, r0
 80049c6:	f107 030c 	add.w	r3, r7, #12
 80049ca:	9301      	str	r3, [sp, #4]
 80049cc:	9200      	str	r2, [sp, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	4632      	mov	r2, r6
 80049d2:	4629      	mov	r1, r5
 80049d4:	4620      	mov	r0, r4
 80049d6:	f001 fb66 	bl	80060a6 <xTaskCreate>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d001      	beq.n	80049e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	e000      	b.n	80049e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80049e4:	68fb      	ldr	r3, [r7, #12]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <osDelay+0x16>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	e000      	b.n	8004a06 <osDelay+0x18>
 8004a04:	2301      	movs	r3, #1
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 fc9a 	bl	8006340 <vTaskDelay>
  
  return osOK;
 8004a0c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	f000 fc7e 	bl	800532e <xQueueCreateMutexStatic>
 8004a32:	4603      	mov	r3, r0
 8004a34:	e003      	b.n	8004a3e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004a36:	2001      	movs	r0, #1
 8004a38:	f000 fc61 	bl	80052fe <xQueueCreateMutex>
 8004a3c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <osMutexWait+0x18>
    return osErrorParameter;
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	e03a      	b.n	8004ad6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d103      	bne.n	8004a74 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e009      	b.n	8004a88 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d006      	beq.n	8004a88 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <osMutexWait+0x40>
      ticks = 1;
 8004a84:	2301      	movs	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004a88:	f7ff ff3c 	bl	8004904 <inHandlerMode>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d017      	beq.n	8004ac2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004a92:	f107 0308 	add.w	r3, r7, #8
 8004a96:	461a      	mov	r2, r3
 8004a98:	2100      	movs	r1, #0
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f001 f874 	bl	8005b88 <xQueueReceiveFromISR>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d001      	beq.n	8004aaa <osMutexWait+0x62>
      return osErrorOS;
 8004aa6:	23ff      	movs	r3, #255	; 0xff
 8004aa8:	e015      	b.n	8004ad6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d011      	beq.n	8004ad4 <osMutexWait+0x8c>
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <osMutexWait+0x98>)
 8004ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	e008      	b.n	8004ad4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 ff53 	bl	8005970 <xQueueSemaphoreTake>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d001      	beq.n	8004ad4 <osMutexWait+0x8c>
    return osErrorOS;
 8004ad0:	23ff      	movs	r3, #255	; 0xff
 8004ad2:	e000      	b.n	8004ad6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004af4:	f7ff ff06 	bl	8004904 <inHandlerMode>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d016      	beq.n	8004b2c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004afe:	f107 0308 	add.w	r3, r7, #8
 8004b02:	4619      	mov	r1, r3
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fdc6 	bl	8005696 <xQueueGiveFromISR>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d001      	beq.n	8004b14 <osMutexRelease+0x30>
      return osErrorOS;
 8004b10:	23ff      	movs	r3, #255	; 0xff
 8004b12:	e017      	b.n	8004b44 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d013      	beq.n	8004b42 <osMutexRelease+0x5e>
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <osMutexRelease+0x68>)
 8004b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	e00a      	b.n	8004b42 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2100      	movs	r1, #0
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fc16 	bl	8005364 <xQueueGenericSend>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d001      	beq.n	8004b42 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004b3e:	23ff      	movs	r3, #255	; 0xff
 8004b40:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004b42:	68fb      	ldr	r3, [r7, #12]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	e000ed04 	.word	0xe000ed04

08004b50 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00f      	beq.n	8004b82 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d10a      	bne.n	8004b7e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	9200      	str	r2, [sp, #0]
 8004b70:	2200      	movs	r2, #0
 8004b72:	2100      	movs	r1, #0
 8004b74:	2001      	movs	r0, #1
 8004b76:	f000 fad7 	bl	8005128 <xQueueGenericCreateStatic>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	e016      	b.n	8004bac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e014      	b.n	8004bac <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d110      	bne.n	8004baa <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004b88:	2203      	movs	r2, #3
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	f000 fb43 	bl	8005218 <xQueueGenericCreate>
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <osSemaphoreCreate+0x56>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fbdf 	bl	8005364 <xQueueGenericSend>
      return sema;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	e000      	b.n	8004bac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004baa:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004bc8:	2380      	movs	r3, #128	; 0x80
 8004bca:	e03a      	b.n	8004c42 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d103      	bne.n	8004be0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e009      	b.n	8004bf4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d006      	beq.n	8004bf4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <osSemaphoreWait+0x40>
      ticks = 1;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004bf4:	f7ff fe86 	bl	8004904 <inHandlerMode>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d017      	beq.n	8004c2e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004bfe:	f107 0308 	add.w	r3, r7, #8
 8004c02:	461a      	mov	r2, r3
 8004c04:	2100      	movs	r1, #0
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 ffbe 	bl	8005b88 <xQueueReceiveFromISR>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d001      	beq.n	8004c16 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004c12:	23ff      	movs	r3, #255	; 0xff
 8004c14:	e015      	b.n	8004c42 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d011      	beq.n	8004c40 <osSemaphoreWait+0x8c>
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <osSemaphoreWait+0x98>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	e008      	b.n	8004c40 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004c2e:	68f9      	ldr	r1, [r7, #12]
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fe9d 	bl	8005970 <xQueueSemaphoreTake>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d001      	beq.n	8004c40 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004c3c:	23ff      	movs	r3, #255	; 0xff
 8004c3e:	e000      	b.n	8004c42 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	e000ed04 	.word	0xe000ed04

08004c50 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004c60:	f7ff fe50 	bl	8004904 <inHandlerMode>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d016      	beq.n	8004c98 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004c6a:	f107 0308 	add.w	r3, r7, #8
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fd10 	bl	8005696 <xQueueGiveFromISR>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d001      	beq.n	8004c80 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004c7c:	23ff      	movs	r3, #255	; 0xff
 8004c7e:	e017      	b.n	8004cb0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d013      	beq.n	8004cae <osSemaphoreRelease+0x5e>
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <osSemaphoreRelease+0x68>)
 8004c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	e00a      	b.n	8004cae <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004c98:	2300      	movs	r3, #0
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fb60 	bl	8005364 <xQueueGenericSend>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d001      	beq.n	8004cae <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004caa:	23ff      	movs	r3, #255	; 0xff
 8004cac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004cae:	68fb      	ldr	r3, [r7, #12]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004cc4:	f7ff fe1e 	bl	8004904 <inHandlerMode>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004cce:	2382      	movs	r3, #130	; 0x82
 8004cd0:	e003      	b.n	8004cda <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f001 f814 	bl	8005d00 <vQueueDelete>

  return osOK; 
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004ce2:	b590      	push	{r4, r7, lr}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af02      	add	r7, sp, #8
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d011      	beq.n	8004d18 <osMessageCreate+0x36>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00d      	beq.n	8004d18 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6859      	ldr	r1, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2400      	movs	r4, #0
 8004d0e:	9400      	str	r4, [sp, #0]
 8004d10:	f000 fa0a 	bl	8005128 <xQueueGenericCreateStatic>
 8004d14:	4603      	mov	r3, r0
 8004d16:	e008      	b.n	8004d2a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	4619      	mov	r1, r3
 8004d24:	f000 fa78 	bl	8005218 <xQueueGenericCreate>
 8004d28:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd90      	pop	{r4, r7, pc}
	...

08004d34 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <osMessagePut+0x1e>
    ticks = 1;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004d52:	f7ff fdd7 	bl	8004904 <inHandlerMode>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d018      	beq.n	8004d8e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004d5c:	f107 0210 	add.w	r2, r7, #16
 8004d60:	f107 0108 	add.w	r1, r7, #8
 8004d64:	2300      	movs	r3, #0
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fbfa 	bl	8005560 <xQueueGenericSendFromISR>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d001      	beq.n	8004d76 <osMessagePut+0x42>
      return osErrorOS;
 8004d72:	23ff      	movs	r3, #255	; 0xff
 8004d74:	e018      	b.n	8004da8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d014      	beq.n	8004da6 <osMessagePut+0x72>
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <osMessagePut+0x7c>)
 8004d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	e00b      	b.n	8004da6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004d8e:	f107 0108 	add.w	r1, r7, #8
 8004d92:	2300      	movs	r3, #0
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fae4 	bl	8005364 <xQueueGenericSend>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d001      	beq.n	8004da6 <osMessagePut+0x72>
      return osErrorOS;
 8004da2:	23ff      	movs	r3, #255	; 0xff
 8004da4:	e000      	b.n	8004da8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	e000ed04 	.word	0xe000ed04

08004db4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004db4:	b590      	push	{r4, r7, lr}
 8004db6:	b08b      	sub	sp, #44	; 0x2c
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	617b      	str	r3, [r7, #20]
    return event;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	461c      	mov	r4, r3
 8004dd6:	f107 0314 	add.w	r3, r7, #20
 8004dda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004dde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004de2:	e054      	b.n	8004e8e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df2:	d103      	bne.n	8004dfc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004df4:	f04f 33ff 	mov.w	r3, #4294967295
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfa:	e009      	b.n	8004e10 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d006      	beq.n	8004e10 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <osMessageGet+0x5c>
      ticks = 1;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004e10:	f7ff fd78 	bl	8004904 <inHandlerMode>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01c      	beq.n	8004e54 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004e1a:	f107 0220 	add.w	r2, r7, #32
 8004e1e:	f107 0314 	add.w	r3, r7, #20
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	68b8      	ldr	r0, [r7, #8]
 8004e28:	f000 feae 	bl	8005b88 <xQueueReceiveFromISR>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d102      	bne.n	8004e38 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004e32:	2310      	movs	r3, #16
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	e001      	b.n	8004e3c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01d      	beq.n	8004e7e <osMessageGet+0xca>
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <osMessageGet+0xe4>)
 8004e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	e014      	b.n	8004e7e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004e54:	f107 0314 	add.w	r3, r7, #20
 8004e58:	3304      	adds	r3, #4
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	68b8      	ldr	r0, [r7, #8]
 8004e60:	f000 fca6 	bl	80057b0 <xQueueReceive>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d102      	bne.n	8004e70 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004e6a:	2310      	movs	r3, #16
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e006      	b.n	8004e7e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <osMessageGet+0xc6>
 8004e76:	2300      	movs	r3, #0
 8004e78:	e000      	b.n	8004e7c <osMessageGet+0xc8>
 8004e7a:	2340      	movs	r3, #64	; 0x40
 8004e7c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	461c      	mov	r4, r3
 8004e82:	f107 0314 	add.w	r3, r7, #20
 8004e86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	372c      	adds	r7, #44	; 0x2c
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd90      	pop	{r4, r7, pc}
 8004e96:	bf00      	nop
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004ea4:	f7ff fd2e 	bl	8004904 <inHandlerMode>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 ff08 	bl	8005cc4 <uxQueueMessagesWaitingFromISR>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	e003      	b.n	8004ec0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fee5 	bl	8005c88 <uxQueueMessagesWaiting>
 8004ebe:	4603      	mov	r3, r0
  }
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004ed0:	f7ff fd18 	bl	8004904 <inHandlerMode>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <osMessageDelete+0x16>
    return osErrorISR;
 8004eda:	2382      	movs	r3, #130	; 0x82
 8004edc:	e003      	b.n	8004ee6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 ff0e 	bl	8005d00 <vQueueDelete>

  return osOK; 
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f103 0208 	add.w	r2, r3, #8
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f04f 32ff 	mov.w	r2, #4294967295
 8004f06:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f103 0208 	add.w	r2, r3, #8
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f103 0208 	add.w	r2, r3, #8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	601a      	str	r2, [r3, #0]
}
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d103      	bne.n	8004fb0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	e00c      	b.n	8004fca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e002      	b.n	8004fbe <vListInsert+0x2e>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d2f6      	bcs.n	8004fb8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	601a      	str	r2, [r3, #0]
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6892      	ldr	r2, [r2, #8]
 8005018:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6852      	ldr	r2, [r2, #4]
 8005022:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d103      	bne.n	8005036 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	1e5a      	subs	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
	...

08005058 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <xQueueGenericReset+0x2a>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	60bb      	str	r3, [r7, #8]
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005082:	f002 f917 	bl	80072b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	68f9      	ldr	r1, [r7, #12]
 8005090:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005092:	fb01 f303 	mul.w	r3, r1, r3
 8005096:	441a      	add	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b2:	3b01      	subs	r3, #1
 80050b4:	68f9      	ldr	r1, [r7, #12]
 80050b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	441a      	add	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	22ff      	movs	r2, #255	; 0xff
 80050c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	22ff      	movs	r2, #255	; 0xff
 80050ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d114      	bne.n	8005102 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01a      	beq.n	8005116 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3310      	adds	r3, #16
 80050e4:	4618      	mov	r0, r3
 80050e6:	f001 fbd3 	bl	8006890 <xTaskRemoveFromEventList>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d012      	beq.n	8005116 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050f0:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <xQueueGenericReset+0xcc>)
 80050f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	e009      	b.n	8005116 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3310      	adds	r3, #16
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff fef1 	bl	8004eee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3324      	adds	r3, #36	; 0x24
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff feec 	bl	8004eee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005116:	f002 f8fd 	bl	8007314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800511a:	2301      	movs	r3, #1
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08e      	sub	sp, #56	; 0x38
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
}
 800516a:	bf00      	nop
 800516c:	e7fe      	b.n	800516c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <xQueueGenericCreateStatic+0x52>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <xQueueGenericCreateStatic+0x56>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <xQueueGenericCreateStatic+0x58>
 800517e:	2300      	movs	r3, #0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	623b      	str	r3, [r7, #32]
}
 8005196:	bf00      	nop
 8005198:	e7fe      	b.n	8005198 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d102      	bne.n	80051a6 <xQueueGenericCreateStatic+0x7e>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <xQueueGenericCreateStatic+0x82>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <xQueueGenericCreateStatic+0x84>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	61fb      	str	r3, [r7, #28]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051c6:	2348      	movs	r3, #72	; 0x48
 80051c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b48      	cmp	r3, #72	; 0x48
 80051ce:	d00a      	beq.n	80051e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	61bb      	str	r3, [r7, #24]
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80051fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	4613      	mov	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f83f 	bl	800528c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005210:	4618      	mov	r0, r3
 8005212:	3730      	adds	r7, #48	; 0x30
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xQueueGenericCreate+0x2a>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	613b      	str	r3, [r7, #16]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	3348      	adds	r3, #72	; 0x48
 8005250:	4618      	mov	r0, r3
 8005252:	f002 f951 	bl	80074f8 <pvPortMalloc>
 8005256:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d011      	beq.n	8005282 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	3348      	adds	r3, #72	; 0x48
 8005266:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005270:	79fa      	ldrb	r2, [r7, #7]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	4613      	mov	r3, r2
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f805 	bl	800528c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005282:	69bb      	ldr	r3, [r7, #24]
	}
 8005284:	4618      	mov	r0, r3
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d103      	bne.n	80052a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e002      	b.n	80052ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052ba:	2101      	movs	r1, #1
 80052bc:	69b8      	ldr	r0, [r7, #24]
 80052be:	f7ff fecb 	bl	8005058 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00e      	beq.n	80052f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80052ea:	2300      	movs	r3, #0
 80052ec:	2200      	movs	r2, #0
 80052ee:	2100      	movs	r1, #0
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f837 	bl	8005364 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b086      	sub	sp, #24
 8005302:	af00      	add	r7, sp, #0
 8005304:	4603      	mov	r3, r0
 8005306:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005308:	2301      	movs	r3, #1
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	2300      	movs	r3, #0
 800530e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	461a      	mov	r2, r3
 8005314:	6939      	ldr	r1, [r7, #16]
 8005316:	6978      	ldr	r0, [r7, #20]
 8005318:	f7ff ff7e 	bl	8005218 <xQueueGenericCreate>
 800531c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff ffd3 	bl	80052ca <prvInitialiseMutex>

		return xNewQueue;
 8005324:	68fb      	ldr	r3, [r7, #12]
	}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800532e:	b580      	push	{r7, lr}
 8005330:	b088      	sub	sp, #32
 8005332:	af02      	add	r7, sp, #8
 8005334:	4603      	mov	r3, r0
 8005336:	6039      	str	r1, [r7, #0]
 8005338:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800533a:	2301      	movs	r3, #1
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2200      	movs	r2, #0
 800534a:	6939      	ldr	r1, [r7, #16]
 800534c:	6978      	ldr	r0, [r7, #20]
 800534e:	f7ff feeb 	bl	8005128 <xQueueGenericCreateStatic>
 8005352:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7ff ffb8 	bl	80052ca <prvInitialiseMutex>

		return xNewQueue;
 800535a:	68fb      	ldr	r3, [r7, #12]
	}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08e      	sub	sp, #56	; 0x38
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005372:	2300      	movs	r3, #0
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <xQueueGenericSend+0x32>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d103      	bne.n	80053a4 <xQueueGenericSend+0x40>
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <xQueueGenericSend+0x44>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <xQueueGenericSend+0x46>
 80053a8:	2300      	movs	r3, #0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <xQueueGenericSend+0x60>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d103      	bne.n	80053d2 <xQueueGenericSend+0x6e>
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <xQueueGenericSend+0x72>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <xQueueGenericSend+0x74>
 80053d6:	2300      	movs	r3, #0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	623b      	str	r3, [r7, #32]
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053f2:	f001 fc0d 	bl	8006c10 <xTaskGetSchedulerState>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d102      	bne.n	8005402 <xQueueGenericSend+0x9e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <xQueueGenericSend+0xa2>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <xQueueGenericSend+0xa4>
 8005406:	2300      	movs	r3, #0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <xQueueGenericSend+0xbe>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	61fb      	str	r3, [r7, #28]
}
 800541e:	bf00      	nop
 8005420:	e7fe      	b.n	8005420 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005422:	f001 ff47 	bl	80072b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542e:	429a      	cmp	r2, r3
 8005430:	d302      	bcc.n	8005438 <xQueueGenericSend+0xd4>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b02      	cmp	r3, #2
 8005436:	d129      	bne.n	800548c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	68b9      	ldr	r1, [r7, #8]
 800543c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800543e:	f000 fc9a 	bl	8005d76 <prvCopyDataToQueue>
 8005442:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d010      	beq.n	800546e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544e:	3324      	adds	r3, #36	; 0x24
 8005450:	4618      	mov	r0, r3
 8005452:	f001 fa1d 	bl	8006890 <xTaskRemoveFromEventList>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d013      	beq.n	8005484 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800545c:	4b3f      	ldr	r3, [pc, #252]	; (800555c <xQueueGenericSend+0x1f8>)
 800545e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	e00a      	b.n	8005484 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005474:	4b39      	ldr	r3, [pc, #228]	; (800555c <xQueueGenericSend+0x1f8>)
 8005476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005484:	f001 ff46 	bl	8007314 <vPortExitCritical>
				return pdPASS;
 8005488:	2301      	movs	r3, #1
 800548a:	e063      	b.n	8005554 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005492:	f001 ff3f 	bl	8007314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005496:	2300      	movs	r3, #0
 8005498:	e05c      	b.n	8005554 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	2b00      	cmp	r3, #0
 800549e:	d106      	bne.n	80054ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054a0:	f107 0314 	add.w	r3, r7, #20
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 fa55 	bl	8006954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054aa:	2301      	movs	r3, #1
 80054ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054ae:	f001 ff31 	bl	8007314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054b2:	f000 ffe3 	bl	800647c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054b6:	f001 fefd 	bl	80072b4 <vPortEnterCritical>
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054c0:	b25b      	sxtb	r3, r3
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d103      	bne.n	80054d0 <xQueueGenericSend+0x16c>
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054d6:	b25b      	sxtb	r3, r3
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054dc:	d103      	bne.n	80054e6 <xQueueGenericSend+0x182>
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054e6:	f001 ff15 	bl	8007314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ea:	1d3a      	adds	r2, r7, #4
 80054ec:	f107 0314 	add.w	r3, r7, #20
 80054f0:	4611      	mov	r1, r2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f001 fa44 	bl	8006980 <xTaskCheckForTimeOut>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d124      	bne.n	8005548 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005500:	f000 fd31 	bl	8005f66 <prvIsQueueFull>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d018      	beq.n	800553c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	3310      	adds	r3, #16
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4611      	mov	r1, r2
 8005512:	4618      	mov	r0, r3
 8005514:	f001 f998 	bl	8006848 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800551a:	f000 fcbc 	bl	8005e96 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800551e:	f000 ffbb 	bl	8006498 <xTaskResumeAll>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	f47f af7c 	bne.w	8005422 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800552a:	4b0c      	ldr	r3, [pc, #48]	; (800555c <xQueueGenericSend+0x1f8>)
 800552c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	e772      	b.n	8005422 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800553c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800553e:	f000 fcaa 	bl	8005e96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005542:	f000 ffa9 	bl	8006498 <xTaskResumeAll>
 8005546:	e76c      	b.n	8005422 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800554a:	f000 fca4 	bl	8005e96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800554e:	f000 ffa3 	bl	8006498 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005554:	4618      	mov	r0, r3
 8005556:	3738      	adds	r7, #56	; 0x38
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	e000ed04 	.word	0xe000ed04

08005560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b090      	sub	sp, #64	; 0x40
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d103      	bne.n	800559c <xQueueGenericSendFromISR+0x3c>
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <xQueueGenericSendFromISR+0x40>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <xQueueGenericSendFromISR+0x42>
 80055a0:	2300      	movs	r3, #0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055b8:	bf00      	nop
 80055ba:	e7fe      	b.n	80055ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d103      	bne.n	80055ca <xQueueGenericSendFromISR+0x6a>
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <xQueueGenericSendFromISR+0x6e>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <xQueueGenericSendFromISR+0x70>
 80055ce:	2300      	movs	r3, #0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	623b      	str	r3, [r7, #32]
}
 80055e6:	bf00      	nop
 80055e8:	e7fe      	b.n	80055e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055ea:	f001 ff45 	bl	8007478 <vPortValidateInterruptPriority>
	__asm volatile
 80055ee:	f3ef 8211 	mrs	r2, BASEPRI
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	61fa      	str	r2, [r7, #28]
 8005604:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005606:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005608:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	429a      	cmp	r2, r3
 8005614:	d302      	bcc.n	800561c <xQueueGenericSendFromISR+0xbc>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b02      	cmp	r3, #2
 800561a:	d12f      	bne.n	800567c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005632:	f000 fba0 	bl	8005d76 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005636:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800563a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563e:	d112      	bne.n	8005666 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	d016      	beq.n	8005676 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	3324      	adds	r3, #36	; 0x24
 800564c:	4618      	mov	r0, r3
 800564e:	f001 f91f 	bl	8006890 <xTaskRemoveFromEventList>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00e      	beq.n	8005676 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00b      	beq.n	8005676 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	e007      	b.n	8005676 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005666:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800566a:	3301      	adds	r3, #1
 800566c:	b2db      	uxtb	r3, r3
 800566e:	b25a      	sxtb	r2, r3
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005676:	2301      	movs	r3, #1
 8005678:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800567a:	e001      	b.n	8005680 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800567c:	2300      	movs	r3, #0
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005682:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f383 8811 	msr	BASEPRI, r3
}
 800568a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800568c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800568e:	4618      	mov	r0, r3
 8005690:	3740      	adds	r7, #64	; 0x40
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b08e      	sub	sp, #56	; 0x38
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	623b      	str	r3, [r7, #32]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <xQueueGiveFromISR+0x48>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	61fb      	str	r3, [r7, #28]
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <xQueueGiveFromISR+0x58>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <xQueueGiveFromISR+0x5c>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <xQueueGiveFromISR+0x5e>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <xQueueGiveFromISR+0x78>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	61bb      	str	r3, [r7, #24]
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800570e:	f001 feb3 	bl	8007478 <vPortValidateInterruptPriority>
	__asm volatile
 8005712:	f3ef 8211 	mrs	r2, BASEPRI
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	617a      	str	r2, [r7, #20]
 8005728:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800572a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800572c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800573a:	429a      	cmp	r2, r3
 800573c:	d22b      	bcs.n	8005796 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005750:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005758:	d112      	bne.n	8005780 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d016      	beq.n	8005790 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	3324      	adds	r3, #36	; 0x24
 8005766:	4618      	mov	r0, r3
 8005768:	f001 f892 	bl	8006890 <xTaskRemoveFromEventList>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00e      	beq.n	8005790 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00b      	beq.n	8005790 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	e007      	b.n	8005790 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005784:	3301      	adds	r3, #1
 8005786:	b2db      	uxtb	r3, r3
 8005788:	b25a      	sxtb	r2, r3
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005790:	2301      	movs	r3, #1
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
 8005794:	e001      	b.n	800579a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005796:	2300      	movs	r3, #0
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f383 8811 	msr	BASEPRI, r3
}
 80057a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3738      	adds	r7, #56	; 0x38
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08c      	sub	sp, #48	; 0x30
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057bc:	2300      	movs	r3, #0
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <xQueueReceive+0x30>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	623b      	str	r3, [r7, #32]
}
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <xQueueReceive+0x3e>
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <xQueueReceive+0x42>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <xQueueReceive+0x44>
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <xQueueReceive+0x5e>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	61fb      	str	r3, [r7, #28]
}
 800580a:	bf00      	nop
 800580c:	e7fe      	b.n	800580c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800580e:	f001 f9ff 	bl	8006c10 <xTaskGetSchedulerState>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d102      	bne.n	800581e <xQueueReceive+0x6e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <xQueueReceive+0x72>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <xQueueReceive+0x74>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <xQueueReceive+0x8e>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	61bb      	str	r3, [r7, #24]
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800583e:	f001 fd39 	bl	80072b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	2b00      	cmp	r3, #0
 800584c:	d01f      	beq.n	800588e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005852:	f000 fafa 	bl	8005e4a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	1e5a      	subs	r2, r3, #1
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00f      	beq.n	8005886 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	3310      	adds	r3, #16
 800586a:	4618      	mov	r0, r3
 800586c:	f001 f810 	bl	8006890 <xTaskRemoveFromEventList>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005876:	4b3d      	ldr	r3, [pc, #244]	; (800596c <xQueueReceive+0x1bc>)
 8005878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005886:	f001 fd45 	bl	8007314 <vPortExitCritical>
				return pdPASS;
 800588a:	2301      	movs	r3, #1
 800588c:	e069      	b.n	8005962 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d103      	bne.n	800589c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005894:	f001 fd3e 	bl	8007314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005898:	2300      	movs	r3, #0
 800589a:	e062      	b.n	8005962 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058a2:	f107 0310 	add.w	r3, r7, #16
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 f854 	bl	8006954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058b0:	f001 fd30 	bl	8007314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058b4:	f000 fde2 	bl	800647c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058b8:	f001 fcfc 	bl	80072b4 <vPortEnterCritical>
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058c2:	b25b      	sxtb	r3, r3
 80058c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c8:	d103      	bne.n	80058d2 <xQueueReceive+0x122>
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058d8:	b25b      	sxtb	r3, r3
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058de:	d103      	bne.n	80058e8 <xQueueReceive+0x138>
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058e8:	f001 fd14 	bl	8007314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058ec:	1d3a      	adds	r2, r7, #4
 80058ee:	f107 0310 	add.w	r3, r7, #16
 80058f2:	4611      	mov	r1, r2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f001 f843 	bl	8006980 <xTaskCheckForTimeOut>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d123      	bne.n	8005948 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005902:	f000 fb1a 	bl	8005f3a <prvIsQueueEmpty>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d017      	beq.n	800593c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	3324      	adds	r3, #36	; 0x24
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	4611      	mov	r1, r2
 8005914:	4618      	mov	r0, r3
 8005916:	f000 ff97 	bl	8006848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800591a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800591c:	f000 fabb 	bl	8005e96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005920:	f000 fdba 	bl	8006498 <xTaskResumeAll>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d189      	bne.n	800583e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800592a:	4b10      	ldr	r3, [pc, #64]	; (800596c <xQueueReceive+0x1bc>)
 800592c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	e780      	b.n	800583e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800593c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800593e:	f000 faaa 	bl	8005e96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005942:	f000 fda9 	bl	8006498 <xTaskResumeAll>
 8005946:	e77a      	b.n	800583e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800594a:	f000 faa4 	bl	8005e96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800594e:	f000 fda3 	bl	8006498 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005954:	f000 faf1 	bl	8005f3a <prvIsQueueEmpty>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	f43f af6f 	beq.w	800583e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005960:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005962:	4618      	mov	r0, r3
 8005964:	3730      	adds	r7, #48	; 0x30
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	e000ed04 	.word	0xe000ed04

08005970 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08e      	sub	sp, #56	; 0x38
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800597a:	2300      	movs	r3, #0
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005982:	2300      	movs	r3, #0
 8005984:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	623b      	str	r3, [r7, #32]
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	61fb      	str	r3, [r7, #28]
}
 80059bc:	bf00      	nop
 80059be:	e7fe      	b.n	80059be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059c0:	f001 f926 	bl	8006c10 <xTaskGetSchedulerState>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <xQueueSemaphoreTake+0x60>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <xQueueSemaphoreTake+0x64>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <xQueueSemaphoreTake+0x66>
 80059d4:	2300      	movs	r3, #0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	61bb      	str	r3, [r7, #24]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059f0:	f001 fc60 	bl	80072b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d024      	beq.n	8005a4a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	1e5a      	subs	r2, r3, #1
 8005a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a06:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d104      	bne.n	8005a1a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005a10:	f001 faa6 	bl	8006f60 <pvTaskIncrementMutexHeldCount>
 8005a14:	4602      	mov	r2, r0
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00f      	beq.n	8005a42 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	3310      	adds	r3, #16
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 ff32 	bl	8006890 <xTaskRemoveFromEventList>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a32:	4b54      	ldr	r3, [pc, #336]	; (8005b84 <xQueueSemaphoreTake+0x214>)
 8005a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a42:	f001 fc67 	bl	8007314 <vPortExitCritical>
				return pdPASS;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e097      	b.n	8005b7a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d111      	bne.n	8005a74 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	617b      	str	r3, [r7, #20]
}
 8005a68:	bf00      	nop
 8005a6a:	e7fe      	b.n	8005a6a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a6c:	f001 fc52 	bl	8007314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e082      	b.n	8005b7a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a7a:	f107 030c 	add.w	r3, r7, #12
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 ff68 	bl	8006954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a84:	2301      	movs	r3, #1
 8005a86:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a88:	f001 fc44 	bl	8007314 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a8c:	f000 fcf6 	bl	800647c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a90:	f001 fc10 	bl	80072b4 <vPortEnterCritical>
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a9a:	b25b      	sxtb	r3, r3
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa0:	d103      	bne.n	8005aaa <xQueueSemaphoreTake+0x13a>
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ab0:	b25b      	sxtb	r3, r3
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab6:	d103      	bne.n	8005ac0 <xQueueSemaphoreTake+0x150>
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ac0:	f001 fc28 	bl	8007314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ac4:	463a      	mov	r2, r7
 8005ac6:	f107 030c 	add.w	r3, r7, #12
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 ff57 	bl	8006980 <xTaskCheckForTimeOut>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d132      	bne.n	8005b3e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ad8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ada:	f000 fa2e 	bl	8005f3a <prvIsQueueEmpty>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d026      	beq.n	8005b32 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d109      	bne.n	8005b00 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005aec:	f001 fbe2 	bl	80072b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 f8a9 	bl	8006c4c <xTaskPriorityInherit>
 8005afa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005afc:	f001 fc0a 	bl	8007314 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	3324      	adds	r3, #36	; 0x24
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fe9d 	bl	8006848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b10:	f000 f9c1 	bl	8005e96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b14:	f000 fcc0 	bl	8006498 <xTaskResumeAll>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f47f af68 	bne.w	80059f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005b20:	4b18      	ldr	r3, [pc, #96]	; (8005b84 <xQueueSemaphoreTake+0x214>)
 8005b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	e75e      	b.n	80059f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b34:	f000 f9af 	bl	8005e96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b38:	f000 fcae 	bl	8006498 <xTaskResumeAll>
 8005b3c:	e758      	b.n	80059f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b40:	f000 f9a9 	bl	8005e96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b44:	f000 fca8 	bl	8006498 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b4a:	f000 f9f6 	bl	8005f3a <prvIsQueueEmpty>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f43f af4d 	beq.w	80059f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00d      	beq.n	8005b78 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005b5c:	f001 fbaa 	bl	80072b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b62:	f000 f8f0 	bl	8005d46 <prvGetDisinheritPriorityAfterTimeout>
 8005b66:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 f968 	bl	8006e44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b74:	f001 fbce 	bl	8007314 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3738      	adds	r7, #56	; 0x38
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	e000ed04 	.word	0xe000ed04

08005b88 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08e      	sub	sp, #56	; 0x38
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	623b      	str	r3, [r7, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	e7fe      	b.n	8005bb2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d103      	bne.n	8005bc2 <xQueueReceiveFromISR+0x3a>
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <xQueueReceiveFromISR+0x3e>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <xQueueReceiveFromISR+0x40>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	61fb      	str	r3, [r7, #28]
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005be2:	f001 fc49 	bl	8007478 <vPortValidateInterruptPriority>
	__asm volatile
 8005be6:	f3ef 8211 	mrs	r2, BASEPRI
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	61ba      	str	r2, [r7, #24]
 8005bfc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005bfe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d02f      	beq.n	8005c6e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c1c:	f000 f915 	bl	8005e4a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	1e5a      	subs	r2, r3, #1
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005c28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d112      	bne.n	8005c58 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d016      	beq.n	8005c68 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	3310      	adds	r3, #16
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fe26 	bl	8006890 <xTaskRemoveFromEventList>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00e      	beq.n	8005c68 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00b      	beq.n	8005c68 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	e007      	b.n	8005c68 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	b25a      	sxtb	r2, r3
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6c:	e001      	b.n	8005c72 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f383 8811 	msr	BASEPRI, r3
}
 8005c7c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3738      	adds	r7, #56	; 0x38
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	60bb      	str	r3, [r7, #8]
}
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005cac:	f001 fb02 	bl	80072b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005cb6:	f001 fb2d 	bl	8007314 <vPortExitCritical>

	return uxReturn;
 8005cba:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	60fb      	str	r3, [r7, #12]
}
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005cf2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10a      	bne.n	8005d28 <vQueueDelete+0x28>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	60bb      	str	r3, [r7, #8]
}
 8005d24:	bf00      	nop
 8005d26:	e7fe      	b.n	8005d26 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f935 	bl	8005f98 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f001 fca9 	bl	8007690 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d006      	beq.n	8005d64 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f1c3 0307 	rsb	r3, r3, #7
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	e001      	b.n	8005d68 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d68:	68fb      	ldr	r3, [r7, #12]
	}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b086      	sub	sp, #24
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10d      	bne.n	8005db0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d14d      	bne.n	8005e38 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 ffc9 	bl	8006d38 <xTaskPriorityDisinherit>
 8005da6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	609a      	str	r2, [r3, #8]
 8005dae:	e043      	b.n	8005e38 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d119      	bne.n	8005dea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6858      	ldr	r0, [r3, #4]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	f00e ffcf 	bl	8014d64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	441a      	add	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d32b      	bcc.n	8005e38 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	605a      	str	r2, [r3, #4]
 8005de8:	e026      	b.n	8005e38 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	68d8      	ldr	r0, [r3, #12]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	461a      	mov	r2, r3
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	f00e ffb5 	bl	8014d64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	425b      	negs	r3, r3
 8005e04:	441a      	add	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d207      	bcs.n	8005e26 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	425b      	negs	r3, r3
 8005e20:	441a      	add	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d105      	bne.n	8005e38 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e40:	697b      	ldr	r3, [r7, #20]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d018      	beq.n	8005e8e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e64:	441a      	add	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d303      	bcc.n	8005e7e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68d9      	ldr	r1, [r3, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	461a      	mov	r2, r3
 8005e88:	6838      	ldr	r0, [r7, #0]
 8005e8a:	f00e ff6b 	bl	8014d64 <memcpy>
	}
}
 8005e8e:	bf00      	nop
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e9e:	f001 fa09 	bl	80072b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ea8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eaa:	e011      	b.n	8005ed0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d012      	beq.n	8005eda <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3324      	adds	r3, #36	; 0x24
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fce9 	bl	8006890 <xTaskRemoveFromEventList>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ec4:	f000 fdbe 	bl	8006a44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	dce9      	bgt.n	8005eac <prvUnlockQueue+0x16>
 8005ed8:	e000      	b.n	8005edc <prvUnlockQueue+0x46>
					break;
 8005eda:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	22ff      	movs	r2, #255	; 0xff
 8005ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ee4:	f001 fa16 	bl	8007314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ee8:	f001 f9e4 	bl	80072b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ef2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ef4:	e011      	b.n	8005f1a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d012      	beq.n	8005f24 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3310      	adds	r3, #16
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fcc4 	bl	8006890 <xTaskRemoveFromEventList>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f0e:	f000 fd99 	bl	8006a44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f12:	7bbb      	ldrb	r3, [r7, #14]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	dce9      	bgt.n	8005ef6 <prvUnlockQueue+0x60>
 8005f22:	e000      	b.n	8005f26 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f24:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	22ff      	movs	r2, #255	; 0xff
 8005f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f2e:	f001 f9f1 	bl	8007314 <vPortExitCritical>
}
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f42:	f001 f9b7 	bl	80072b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	e001      	b.n	8005f58 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f58:	f001 f9dc 	bl	8007314 <vPortExitCritical>

	return xReturn;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f6e:	f001 f9a1 	bl	80072b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d102      	bne.n	8005f84 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e001      	b.n	8005f88 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f88:	f001 f9c4 	bl	8007314 <vPortExitCritical>

	return xReturn;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	e016      	b.n	8005fd4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005fa6:	4a10      	ldr	r2, [pc, #64]	; (8005fe8 <vQueueUnregisterQueue+0x50>)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	4413      	add	r3, r2
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d10b      	bne.n	8005fce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005fb6:	4a0c      	ldr	r2, [pc, #48]	; (8005fe8 <vQueueUnregisterQueue+0x50>)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2100      	movs	r1, #0
 8005fbc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005fc0:	4a09      	ldr	r2, [pc, #36]	; (8005fe8 <vQueueUnregisterQueue+0x50>)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	2200      	movs	r2, #0
 8005fca:	605a      	str	r2, [r3, #4]
				break;
 8005fcc:	e006      	b.n	8005fdc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b07      	cmp	r3, #7
 8005fd8:	d9e5      	bls.n	8005fa6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	20009bd4 	.word	0x20009bd4

08005fec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08e      	sub	sp, #56	; 0x38
 8005ff0:	af04      	add	r7, sp, #16
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	623b      	str	r3, [r7, #32]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <xTaskCreateStatic+0x46>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	61fb      	str	r3, [r7, #28]
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006032:	23b4      	movs	r3, #180	; 0xb4
 8006034:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2bb4      	cmp	r3, #180	; 0xb4
 800603a:	d00a      	beq.n	8006052 <xTaskCreateStatic+0x66>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	61bb      	str	r3, [r7, #24]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006052:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01e      	beq.n	8006098 <xTaskCreateStatic+0xac>
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01b      	beq.n	8006098 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006068:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	2202      	movs	r2, #2
 800606e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006072:	2300      	movs	r3, #0
 8006074:	9303      	str	r3, [sp, #12]
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	9302      	str	r3, [sp, #8]
 800607a:	f107 0314 	add.w	r3, r7, #20
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	68b9      	ldr	r1, [r7, #8]
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 f850 	bl	8006130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006092:	f000 f8eb 	bl	800626c <prvAddNewTaskToReadyList>
 8006096:	e001      	b.n	800609c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800609c:	697b      	ldr	r3, [r7, #20]
	}
 800609e:	4618      	mov	r0, r3
 80060a0:	3728      	adds	r7, #40	; 0x28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b08c      	sub	sp, #48	; 0x30
 80060aa:	af04      	add	r7, sp, #16
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	603b      	str	r3, [r7, #0]
 80060b2:	4613      	mov	r3, r2
 80060b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4618      	mov	r0, r3
 80060bc:	f001 fa1c 	bl	80074f8 <pvPortMalloc>
 80060c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00e      	beq.n	80060e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060c8:	20b4      	movs	r0, #180	; 0xb4
 80060ca:	f001 fa15 	bl	80074f8 <pvPortMalloc>
 80060ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
 80060dc:	e005      	b.n	80060ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060de:	6978      	ldr	r0, [r7, #20]
 80060e0:	f001 fad6 	bl	8007690 <vPortFree>
 80060e4:	e001      	b.n	80060ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d017      	beq.n	8006120 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060f8:	88fa      	ldrh	r2, [r7, #6]
 80060fa:	2300      	movs	r3, #0
 80060fc:	9303      	str	r3, [sp, #12]
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	9302      	str	r3, [sp, #8]
 8006102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f80e 	bl	8006130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006114:	69f8      	ldr	r0, [r7, #28]
 8006116:	f000 f8a9 	bl	800626c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800611a:	2301      	movs	r3, #1
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	e002      	b.n	8006126 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006120:	f04f 33ff 	mov.w	r3, #4294967295
 8006124:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006126:	69bb      	ldr	r3, [r7, #24]
	}
 8006128:	4618      	mov	r0, r3
 800612a:	3720      	adds	r7, #32
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006148:	3b01      	subs	r3, #1
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f023 0307 	bic.w	r3, r3, #7
 8006156:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	617b      	str	r3, [r7, #20]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01f      	beq.n	80061be <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	e012      	b.n	80061aa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	7819      	ldrb	r1, [r3, #0]
 800618c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	4413      	add	r3, r2
 8006192:	3334      	adds	r3, #52	; 0x34
 8006194:	460a      	mov	r2, r1
 8006196:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	4413      	add	r3, r2
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d006      	beq.n	80061b2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	3301      	adds	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2b0f      	cmp	r3, #15
 80061ae:	d9e9      	bls.n	8006184 <prvInitialiseNewTask+0x54>
 80061b0:	e000      	b.n	80061b4 <prvInitialiseNewTask+0x84>
			{
				break;
 80061b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061bc:	e003      	b.n	80061c6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	2b06      	cmp	r3, #6
 80061ca:	d901      	bls.n	80061d0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061cc:	2306      	movs	r3, #6
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	2200      	movs	r2, #0
 80061e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	3304      	adds	r3, #4
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe fea1 	bl	8004f2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	3318      	adds	r3, #24
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fe fe9c 	bl	8004f2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	f1c3 0207 	rsb	r2, r3, #7
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800620a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	2200      	movs	r2, #0
 8006210:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	2200      	movs	r2, #0
 8006218:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	334c      	adds	r3, #76	; 0x4c
 8006220:	2260      	movs	r2, #96	; 0x60
 8006222:	2100      	movs	r1, #0
 8006224:	4618      	mov	r0, r3
 8006226:	f00e fdab 	bl	8014d80 <memset>
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	4a0c      	ldr	r2, [pc, #48]	; (8006260 <prvInitialiseNewTask+0x130>)
 800622e:	651a      	str	r2, [r3, #80]	; 0x50
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	4a0c      	ldr	r2, [pc, #48]	; (8006264 <prvInitialiseNewTask+0x134>)
 8006234:	655a      	str	r2, [r3, #84]	; 0x54
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	4a0b      	ldr	r2, [pc, #44]	; (8006268 <prvInitialiseNewTask+0x138>)
 800623a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	68f9      	ldr	r1, [r7, #12]
 8006240:	69b8      	ldr	r0, [r7, #24]
 8006242:	f000 ff07 	bl	8007054 <pxPortInitialiseStack>
 8006246:	4602      	mov	r2, r0
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006256:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006258:	bf00      	nop
 800625a:	3720      	adds	r7, #32
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	080193a8 	.word	0x080193a8
 8006264:	080193c8 	.word	0x080193c8
 8006268:	08019388 	.word	0x08019388

0800626c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006274:	f001 f81e 	bl	80072b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006278:	4b2a      	ldr	r3, [pc, #168]	; (8006324 <prvAddNewTaskToReadyList+0xb8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3301      	adds	r3, #1
 800627e:	4a29      	ldr	r2, [pc, #164]	; (8006324 <prvAddNewTaskToReadyList+0xb8>)
 8006280:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006282:	4b29      	ldr	r3, [pc, #164]	; (8006328 <prvAddNewTaskToReadyList+0xbc>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d109      	bne.n	800629e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800628a:	4a27      	ldr	r2, [pc, #156]	; (8006328 <prvAddNewTaskToReadyList+0xbc>)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006290:	4b24      	ldr	r3, [pc, #144]	; (8006324 <prvAddNewTaskToReadyList+0xb8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d110      	bne.n	80062ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006298:	f000 fbf8 	bl	8006a8c <prvInitialiseTaskLists>
 800629c:	e00d      	b.n	80062ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800629e:	4b23      	ldr	r3, [pc, #140]	; (800632c <prvAddNewTaskToReadyList+0xc0>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d109      	bne.n	80062ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062a6:	4b20      	ldr	r3, [pc, #128]	; (8006328 <prvAddNewTaskToReadyList+0xbc>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d802      	bhi.n	80062ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062b4:	4a1c      	ldr	r2, [pc, #112]	; (8006328 <prvAddNewTaskToReadyList+0xbc>)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062ba:	4b1d      	ldr	r3, [pc, #116]	; (8006330 <prvAddNewTaskToReadyList+0xc4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3301      	adds	r3, #1
 80062c0:	4a1b      	ldr	r2, [pc, #108]	; (8006330 <prvAddNewTaskToReadyList+0xc4>)
 80062c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	2201      	movs	r2, #1
 80062ca:	409a      	lsls	r2, r3
 80062cc:	4b19      	ldr	r3, [pc, #100]	; (8006334 <prvAddNewTaskToReadyList+0xc8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	4a18      	ldr	r2, [pc, #96]	; (8006334 <prvAddNewTaskToReadyList+0xc8>)
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4a15      	ldr	r2, [pc, #84]	; (8006338 <prvAddNewTaskToReadyList+0xcc>)
 80062e4:	441a      	add	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3304      	adds	r3, #4
 80062ea:	4619      	mov	r1, r3
 80062ec:	4610      	mov	r0, r2
 80062ee:	f7fe fe2b 	bl	8004f48 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062f2:	f001 f80f 	bl	8007314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062f6:	4b0d      	ldr	r3, [pc, #52]	; (800632c <prvAddNewTaskToReadyList+0xc0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00e      	beq.n	800631c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062fe:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <prvAddNewTaskToReadyList+0xbc>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	429a      	cmp	r2, r3
 800630a:	d207      	bcs.n	800631c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <prvAddNewTaskToReadyList+0xd0>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800631c:	bf00      	nop
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	20000490 	.word	0x20000490
 8006328:	20000390 	.word	0x20000390
 800632c:	2000049c 	.word	0x2000049c
 8006330:	200004ac 	.word	0x200004ac
 8006334:	20000498 	.word	0x20000498
 8006338:	20000394 	.word	0x20000394
 800633c:	e000ed04 	.word	0xe000ed04

08006340 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d017      	beq.n	8006382 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006352:	4b13      	ldr	r3, [pc, #76]	; (80063a0 <vTaskDelay+0x60>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <vTaskDelay+0x30>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	60bb      	str	r3, [r7, #8]
}
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006370:	f000 f884 	bl	800647c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006374:	2100      	movs	r1, #0
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fe06 	bl	8006f88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800637c:	f000 f88c 	bl	8006498 <xTaskResumeAll>
 8006380:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d107      	bne.n	8006398 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006388:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <vTaskDelay+0x64>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	200004b8 	.word	0x200004b8
 80063a4:	e000ed04 	.word	0xe000ed04

080063a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	; 0x28
 80063ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063b6:	463a      	mov	r2, r7
 80063b8:	1d39      	adds	r1, r7, #4
 80063ba:	f107 0308 	add.w	r3, r7, #8
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fa f9aa 	bl	8000718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	9202      	str	r2, [sp, #8]
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	2300      	movs	r3, #0
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	2300      	movs	r3, #0
 80063d4:	460a      	mov	r2, r1
 80063d6:	4921      	ldr	r1, [pc, #132]	; (800645c <vTaskStartScheduler+0xb4>)
 80063d8:	4821      	ldr	r0, [pc, #132]	; (8006460 <vTaskStartScheduler+0xb8>)
 80063da:	f7ff fe07 	bl	8005fec <xTaskCreateStatic>
 80063de:	4603      	mov	r3, r0
 80063e0:	4a20      	ldr	r2, [pc, #128]	; (8006464 <vTaskStartScheduler+0xbc>)
 80063e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063e4:	4b1f      	ldr	r3, [pc, #124]	; (8006464 <vTaskStartScheduler+0xbc>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063ec:	2301      	movs	r3, #1
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	e001      	b.n	80063f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d11b      	bne.n	8006434 <vTaskStartScheduler+0x8c>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	613b      	str	r3, [r7, #16]
}
 800640e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006410:	4b15      	ldr	r3, [pc, #84]	; (8006468 <vTaskStartScheduler+0xc0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	334c      	adds	r3, #76	; 0x4c
 8006416:	4a15      	ldr	r2, [pc, #84]	; (800646c <vTaskStartScheduler+0xc4>)
 8006418:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800641a:	4b15      	ldr	r3, [pc, #84]	; (8006470 <vTaskStartScheduler+0xc8>)
 800641c:	f04f 32ff 	mov.w	r2, #4294967295
 8006420:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006422:	4b14      	ldr	r3, [pc, #80]	; (8006474 <vTaskStartScheduler+0xcc>)
 8006424:	2201      	movs	r2, #1
 8006426:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006428:	4b13      	ldr	r3, [pc, #76]	; (8006478 <vTaskStartScheduler+0xd0>)
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800642e:	f000 fe9f 	bl	8007170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006432:	e00e      	b.n	8006452 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643a:	d10a      	bne.n	8006452 <vTaskStartScheduler+0xaa>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	60fb      	str	r3, [r7, #12]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <vTaskStartScheduler+0xa8>
}
 8006452:	bf00      	nop
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	08015d68 	.word	0x08015d68
 8006460:	08006a5d 	.word	0x08006a5d
 8006464:	200004b4 	.word	0x200004b4
 8006468:	20000390 	.word	0x20000390
 800646c:	20000020 	.word	0x20000020
 8006470:	200004b0 	.word	0x200004b0
 8006474:	2000049c 	.word	0x2000049c
 8006478:	20000494 	.word	0x20000494

0800647c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006480:	4b04      	ldr	r3, [pc, #16]	; (8006494 <vTaskSuspendAll+0x18>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3301      	adds	r3, #1
 8006486:	4a03      	ldr	r2, [pc, #12]	; (8006494 <vTaskSuspendAll+0x18>)
 8006488:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800648a:	bf00      	nop
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	200004b8 	.word	0x200004b8

08006498 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064a6:	4b41      	ldr	r3, [pc, #260]	; (80065ac <xTaskResumeAll+0x114>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	603b      	str	r3, [r7, #0]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064c4:	f000 fef6 	bl	80072b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064c8:	4b38      	ldr	r3, [pc, #224]	; (80065ac <xTaskResumeAll+0x114>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	4a37      	ldr	r2, [pc, #220]	; (80065ac <xTaskResumeAll+0x114>)
 80064d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064d2:	4b36      	ldr	r3, [pc, #216]	; (80065ac <xTaskResumeAll+0x114>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d161      	bne.n	800659e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064da:	4b35      	ldr	r3, [pc, #212]	; (80065b0 <xTaskResumeAll+0x118>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d05d      	beq.n	800659e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064e2:	e02e      	b.n	8006542 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064e4:	4b33      	ldr	r3, [pc, #204]	; (80065b4 <xTaskResumeAll+0x11c>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3318      	adds	r3, #24
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fe fd86 	bl	8005002 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3304      	adds	r3, #4
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe fd81 	bl	8005002 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	2201      	movs	r2, #1
 8006506:	409a      	lsls	r2, r3
 8006508:	4b2b      	ldr	r3, [pc, #172]	; (80065b8 <xTaskResumeAll+0x120>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4313      	orrs	r3, r2
 800650e:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <xTaskResumeAll+0x120>)
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4a27      	ldr	r2, [pc, #156]	; (80065bc <xTaskResumeAll+0x124>)
 8006520:	441a      	add	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3304      	adds	r3, #4
 8006526:	4619      	mov	r1, r3
 8006528:	4610      	mov	r0, r2
 800652a:	f7fe fd0d 	bl	8004f48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006532:	4b23      	ldr	r3, [pc, #140]	; (80065c0 <xTaskResumeAll+0x128>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	429a      	cmp	r2, r3
 800653a:	d302      	bcc.n	8006542 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800653c:	4b21      	ldr	r3, [pc, #132]	; (80065c4 <xTaskResumeAll+0x12c>)
 800653e:	2201      	movs	r2, #1
 8006540:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006542:	4b1c      	ldr	r3, [pc, #112]	; (80065b4 <xTaskResumeAll+0x11c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1cc      	bne.n	80064e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006550:	f000 fb3e 	bl	8006bd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006554:	4b1c      	ldr	r3, [pc, #112]	; (80065c8 <xTaskResumeAll+0x130>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d010      	beq.n	8006582 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006560:	f000 f858 	bl	8006614 <xTaskIncrementTick>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800656a:	4b16      	ldr	r3, [pc, #88]	; (80065c4 <xTaskResumeAll+0x12c>)
 800656c:	2201      	movs	r2, #1
 800656e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3b01      	subs	r3, #1
 8006574:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f1      	bne.n	8006560 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800657c:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <xTaskResumeAll+0x130>)
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006582:	4b10      	ldr	r3, [pc, #64]	; (80065c4 <xTaskResumeAll+0x12c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800658a:	2301      	movs	r3, #1
 800658c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800658e:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <xTaskResumeAll+0x134>)
 8006590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800659e:	f000 feb9 	bl	8007314 <vPortExitCritical>

	return xAlreadyYielded;
 80065a2:	68bb      	ldr	r3, [r7, #8]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	200004b8 	.word	0x200004b8
 80065b0:	20000490 	.word	0x20000490
 80065b4:	20000450 	.word	0x20000450
 80065b8:	20000498 	.word	0x20000498
 80065bc:	20000394 	.word	0x20000394
 80065c0:	20000390 	.word	0x20000390
 80065c4:	200004a4 	.word	0x200004a4
 80065c8:	200004a0 	.word	0x200004a0
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065d6:	4b05      	ldr	r3, [pc, #20]	; (80065ec <xTaskGetTickCount+0x1c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065dc:	687b      	ldr	r3, [r7, #4]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	20000494 	.word	0x20000494

080065f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065f6:	f000 ff3f 	bl	8007478 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80065fa:	2300      	movs	r3, #0
 80065fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80065fe:	4b04      	ldr	r3, [pc, #16]	; (8006610 <xTaskGetTickCountFromISR+0x20>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006604:	683b      	ldr	r3, [r7, #0]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000494 	.word	0x20000494

08006614 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661e:	4b4e      	ldr	r3, [pc, #312]	; (8006758 <xTaskIncrementTick+0x144>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	f040 808e 	bne.w	8006744 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006628:	4b4c      	ldr	r3, [pc, #304]	; (800675c <xTaskIncrementTick+0x148>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3301      	adds	r3, #1
 800662e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006630:	4a4a      	ldr	r2, [pc, #296]	; (800675c <xTaskIncrementTick+0x148>)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d120      	bne.n	800667e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800663c:	4b48      	ldr	r3, [pc, #288]	; (8006760 <xTaskIncrementTick+0x14c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <xTaskIncrementTick+0x48>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	603b      	str	r3, [r7, #0]
}
 8006658:	bf00      	nop
 800665a:	e7fe      	b.n	800665a <xTaskIncrementTick+0x46>
 800665c:	4b40      	ldr	r3, [pc, #256]	; (8006760 <xTaskIncrementTick+0x14c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	4b40      	ldr	r3, [pc, #256]	; (8006764 <xTaskIncrementTick+0x150>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a3e      	ldr	r2, [pc, #248]	; (8006760 <xTaskIncrementTick+0x14c>)
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	4a3e      	ldr	r2, [pc, #248]	; (8006764 <xTaskIncrementTick+0x150>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	4b3d      	ldr	r3, [pc, #244]	; (8006768 <xTaskIncrementTick+0x154>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	4a3c      	ldr	r2, [pc, #240]	; (8006768 <xTaskIncrementTick+0x154>)
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	f000 faa9 	bl	8006bd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800667e:	4b3b      	ldr	r3, [pc, #236]	; (800676c <xTaskIncrementTick+0x158>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	429a      	cmp	r2, r3
 8006686:	d348      	bcc.n	800671a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006688:	4b35      	ldr	r3, [pc, #212]	; (8006760 <xTaskIncrementTick+0x14c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d104      	bne.n	800669c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006692:	4b36      	ldr	r3, [pc, #216]	; (800676c <xTaskIncrementTick+0x158>)
 8006694:	f04f 32ff 	mov.w	r2, #4294967295
 8006698:	601a      	str	r2, [r3, #0]
					break;
 800669a:	e03e      	b.n	800671a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800669c:	4b30      	ldr	r3, [pc, #192]	; (8006760 <xTaskIncrementTick+0x14c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d203      	bcs.n	80066bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066b4:	4a2d      	ldr	r2, [pc, #180]	; (800676c <xTaskIncrementTick+0x158>)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066ba:	e02e      	b.n	800671a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	3304      	adds	r3, #4
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe fc9e 	bl	8005002 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	3318      	adds	r3, #24
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fe fc95 	bl	8005002 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	2201      	movs	r2, #1
 80066de:	409a      	lsls	r2, r3
 80066e0:	4b23      	ldr	r3, [pc, #140]	; (8006770 <xTaskIncrementTick+0x15c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	4a22      	ldr	r2, [pc, #136]	; (8006770 <xTaskIncrementTick+0x15c>)
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4a1f      	ldr	r2, [pc, #124]	; (8006774 <xTaskIncrementTick+0x160>)
 80066f8:	441a      	add	r2, r3
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	3304      	adds	r3, #4
 80066fe:	4619      	mov	r1, r3
 8006700:	4610      	mov	r0, r2
 8006702:	f7fe fc21 	bl	8004f48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670a:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <xTaskIncrementTick+0x164>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	429a      	cmp	r2, r3
 8006712:	d3b9      	bcc.n	8006688 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006714:	2301      	movs	r3, #1
 8006716:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006718:	e7b6      	b.n	8006688 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800671a:	4b17      	ldr	r3, [pc, #92]	; (8006778 <xTaskIncrementTick+0x164>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006720:	4914      	ldr	r1, [pc, #80]	; (8006774 <xTaskIncrementTick+0x160>)
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	440b      	add	r3, r1
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d901      	bls.n	8006736 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006732:	2301      	movs	r3, #1
 8006734:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006736:	4b11      	ldr	r3, [pc, #68]	; (800677c <xTaskIncrementTick+0x168>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d007      	beq.n	800674e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800673e:	2301      	movs	r3, #1
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	e004      	b.n	800674e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006744:	4b0e      	ldr	r3, [pc, #56]	; (8006780 <xTaskIncrementTick+0x16c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3301      	adds	r3, #1
 800674a:	4a0d      	ldr	r2, [pc, #52]	; (8006780 <xTaskIncrementTick+0x16c>)
 800674c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800674e:	697b      	ldr	r3, [r7, #20]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	200004b8 	.word	0x200004b8
 800675c:	20000494 	.word	0x20000494
 8006760:	20000448 	.word	0x20000448
 8006764:	2000044c 	.word	0x2000044c
 8006768:	200004a8 	.word	0x200004a8
 800676c:	200004b0 	.word	0x200004b0
 8006770:	20000498 	.word	0x20000498
 8006774:	20000394 	.word	0x20000394
 8006778:	20000390 	.word	0x20000390
 800677c:	200004a4 	.word	0x200004a4
 8006780:	200004a0 	.word	0x200004a0

08006784 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800678a:	4b29      	ldr	r3, [pc, #164]	; (8006830 <vTaskSwitchContext+0xac>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006792:	4b28      	ldr	r3, [pc, #160]	; (8006834 <vTaskSwitchContext+0xb0>)
 8006794:	2201      	movs	r2, #1
 8006796:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006798:	e044      	b.n	8006824 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800679a:	4b26      	ldr	r3, [pc, #152]	; (8006834 <vTaskSwitchContext+0xb0>)
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a0:	4b25      	ldr	r3, [pc, #148]	; (8006838 <vTaskSwitchContext+0xb4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	fab3 f383 	clz	r3, r3
 80067ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80067ae:	7afb      	ldrb	r3, [r7, #11]
 80067b0:	f1c3 031f 	rsb	r3, r3, #31
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	4921      	ldr	r1, [pc, #132]	; (800683c <vTaskSwitchContext+0xb8>)
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	607b      	str	r3, [r7, #4]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <vTaskSwitchContext+0x5a>
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4a14      	ldr	r2, [pc, #80]	; (800683c <vTaskSwitchContext+0xb8>)
 80067ec:	4413      	add	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	605a      	str	r2, [r3, #4]
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3308      	adds	r3, #8
 8006802:	429a      	cmp	r2, r3
 8006804:	d104      	bne.n	8006810 <vTaskSwitchContext+0x8c>
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	605a      	str	r2, [r3, #4]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	4a0a      	ldr	r2, [pc, #40]	; (8006840 <vTaskSwitchContext+0xbc>)
 8006818:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800681a:	4b09      	ldr	r3, [pc, #36]	; (8006840 <vTaskSwitchContext+0xbc>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	334c      	adds	r3, #76	; 0x4c
 8006820:	4a08      	ldr	r2, [pc, #32]	; (8006844 <vTaskSwitchContext+0xc0>)
 8006822:	6013      	str	r3, [r2, #0]
}
 8006824:	bf00      	nop
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	200004b8 	.word	0x200004b8
 8006834:	200004a4 	.word	0x200004a4
 8006838:	20000498 	.word	0x20000498
 800683c:	20000394 	.word	0x20000394
 8006840:	20000390 	.word	0x20000390
 8006844:	20000020 	.word	0x20000020

08006848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	60fb      	str	r3, [r7, #12]
}
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800686e:	4b07      	ldr	r3, [pc, #28]	; (800688c <vTaskPlaceOnEventList+0x44>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3318      	adds	r3, #24
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fe fb8a 	bl	8004f90 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800687c:	2101      	movs	r1, #1
 800687e:	6838      	ldr	r0, [r7, #0]
 8006880:	f000 fb82 	bl	8006f88 <prvAddCurrentTaskToDelayedList>
}
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000390 	.word	0x20000390

08006890 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10a      	bne.n	80068bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	60fb      	str	r3, [r7, #12]
}
 80068b8:	bf00      	nop
 80068ba:	e7fe      	b.n	80068ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	3318      	adds	r3, #24
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fe fb9e 	bl	8005002 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068c6:	4b1d      	ldr	r3, [pc, #116]	; (800693c <xTaskRemoveFromEventList+0xac>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d11c      	bne.n	8006908 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fb95 	bl	8005002 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	2201      	movs	r2, #1
 80068de:	409a      	lsls	r2, r3
 80068e0:	4b17      	ldr	r3, [pc, #92]	; (8006940 <xTaskRemoveFromEventList+0xb0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	4a16      	ldr	r2, [pc, #88]	; (8006940 <xTaskRemoveFromEventList+0xb0>)
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4a13      	ldr	r2, [pc, #76]	; (8006944 <xTaskRemoveFromEventList+0xb4>)
 80068f8:	441a      	add	r2, r3
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	3304      	adds	r3, #4
 80068fe:	4619      	mov	r1, r3
 8006900:	4610      	mov	r0, r2
 8006902:	f7fe fb21 	bl	8004f48 <vListInsertEnd>
 8006906:	e005      	b.n	8006914 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	3318      	adds	r3, #24
 800690c:	4619      	mov	r1, r3
 800690e:	480e      	ldr	r0, [pc, #56]	; (8006948 <xTaskRemoveFromEventList+0xb8>)
 8006910:	f7fe fb1a 	bl	8004f48 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006918:	4b0c      	ldr	r3, [pc, #48]	; (800694c <xTaskRemoveFromEventList+0xbc>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	429a      	cmp	r2, r3
 8006920:	d905      	bls.n	800692e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006922:	2301      	movs	r3, #1
 8006924:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006926:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <xTaskRemoveFromEventList+0xc0>)
 8006928:	2201      	movs	r2, #1
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	e001      	b.n	8006932 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006932:	697b      	ldr	r3, [r7, #20]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	200004b8 	.word	0x200004b8
 8006940:	20000498 	.word	0x20000498
 8006944:	20000394 	.word	0x20000394
 8006948:	20000450 	.word	0x20000450
 800694c:	20000390 	.word	0x20000390
 8006950:	200004a4 	.word	0x200004a4

08006954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800695c:	4b06      	ldr	r3, [pc, #24]	; (8006978 <vTaskInternalSetTimeOutState+0x24>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006964:	4b05      	ldr	r3, [pc, #20]	; (800697c <vTaskInternalSetTimeOutState+0x28>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	605a      	str	r2, [r3, #4]
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	200004a8 	.word	0x200004a8
 800697c:	20000494 	.word	0x20000494

08006980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	613b      	str	r3, [r7, #16]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	60fb      	str	r3, [r7, #12]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80069c2:	f000 fc77 	bl	80072b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069c6:	4b1d      	ldr	r3, [pc, #116]	; (8006a3c <xTaskCheckForTimeOut+0xbc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069de:	d102      	bne.n	80069e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	e023      	b.n	8006a2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <xTaskCheckForTimeOut+0xc0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d007      	beq.n	8006a02 <xTaskCheckForTimeOut+0x82>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d302      	bcc.n	8006a02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069fc:	2301      	movs	r3, #1
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	e015      	b.n	8006a2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d20b      	bcs.n	8006a24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	1ad2      	subs	r2, r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7ff ff9b 	bl	8006954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
 8006a22:	e004      	b.n	8006a2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a2e:	f000 fc71 	bl	8007314 <vPortExitCritical>

	return xReturn;
 8006a32:	69fb      	ldr	r3, [r7, #28]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3720      	adds	r7, #32
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	20000494 	.word	0x20000494
 8006a40:	200004a8 	.word	0x200004a8

08006a44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a48:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <vTaskMissedYield+0x14>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
}
 8006a4e:	bf00      	nop
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	200004a4 	.word	0x200004a4

08006a5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a64:	f000 f852 	bl	8006b0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <prvIdleTask+0x28>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d9f9      	bls.n	8006a64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a70:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <prvIdleTask+0x2c>)
 8006a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a80:	e7f0      	b.n	8006a64 <prvIdleTask+0x8>
 8006a82:	bf00      	nop
 8006a84:	20000394 	.word	0x20000394
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a92:	2300      	movs	r3, #0
 8006a94:	607b      	str	r3, [r7, #4]
 8006a96:	e00c      	b.n	8006ab2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4a12      	ldr	r2, [pc, #72]	; (8006aec <prvInitialiseTaskLists+0x60>)
 8006aa4:	4413      	add	r3, r2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fa21 	bl	8004eee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	607b      	str	r3, [r7, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b06      	cmp	r3, #6
 8006ab6:	d9ef      	bls.n	8006a98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ab8:	480d      	ldr	r0, [pc, #52]	; (8006af0 <prvInitialiseTaskLists+0x64>)
 8006aba:	f7fe fa18 	bl	8004eee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006abe:	480d      	ldr	r0, [pc, #52]	; (8006af4 <prvInitialiseTaskLists+0x68>)
 8006ac0:	f7fe fa15 	bl	8004eee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ac4:	480c      	ldr	r0, [pc, #48]	; (8006af8 <prvInitialiseTaskLists+0x6c>)
 8006ac6:	f7fe fa12 	bl	8004eee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006aca:	480c      	ldr	r0, [pc, #48]	; (8006afc <prvInitialiseTaskLists+0x70>)
 8006acc:	f7fe fa0f 	bl	8004eee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ad0:	480b      	ldr	r0, [pc, #44]	; (8006b00 <prvInitialiseTaskLists+0x74>)
 8006ad2:	f7fe fa0c 	bl	8004eee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <prvInitialiseTaskLists+0x78>)
 8006ad8:	4a05      	ldr	r2, [pc, #20]	; (8006af0 <prvInitialiseTaskLists+0x64>)
 8006ada:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006adc:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <prvInitialiseTaskLists+0x7c>)
 8006ade:	4a05      	ldr	r2, [pc, #20]	; (8006af4 <prvInitialiseTaskLists+0x68>)
 8006ae0:	601a      	str	r2, [r3, #0]
}
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000394 	.word	0x20000394
 8006af0:	20000420 	.word	0x20000420
 8006af4:	20000434 	.word	0x20000434
 8006af8:	20000450 	.word	0x20000450
 8006afc:	20000464 	.word	0x20000464
 8006b00:	2000047c 	.word	0x2000047c
 8006b04:	20000448 	.word	0x20000448
 8006b08:	2000044c 	.word	0x2000044c

08006b0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b12:	e019      	b.n	8006b48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b14:	f000 fbce 	bl	80072b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b18:	4b10      	ldr	r3, [pc, #64]	; (8006b5c <prvCheckTasksWaitingTermination+0x50>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fe fa6c 	bl	8005002 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	; (8006b60 <prvCheckTasksWaitingTermination+0x54>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	4a0b      	ldr	r2, [pc, #44]	; (8006b60 <prvCheckTasksWaitingTermination+0x54>)
 8006b32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b34:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <prvCheckTasksWaitingTermination+0x58>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	4a0a      	ldr	r2, [pc, #40]	; (8006b64 <prvCheckTasksWaitingTermination+0x58>)
 8006b3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b3e:	f000 fbe9 	bl	8007314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f810 	bl	8006b68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b48:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <prvCheckTasksWaitingTermination+0x58>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e1      	bne.n	8006b14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b50:	bf00      	nop
 8006b52:	bf00      	nop
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000464 	.word	0x20000464
 8006b60:	20000490 	.word	0x20000490
 8006b64:	20000478 	.word	0x20000478

08006b68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	334c      	adds	r3, #76	; 0x4c
 8006b74:	4618      	mov	r0, r3
 8006b76:	f00e fa1b 	bl	8014fb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d108      	bne.n	8006b96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fd81 	bl	8007690 <vPortFree>
				vPortFree( pxTCB );
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fd7e 	bl	8007690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b94:	e018      	b.n	8006bc8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d103      	bne.n	8006ba8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fd75 	bl	8007690 <vPortFree>
	}
 8006ba6:	e00f      	b.n	8006bc8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d00a      	beq.n	8006bc8 <prvDeleteTCB+0x60>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	60fb      	str	r3, [r7, #12]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <prvDeleteTCB+0x5e>
	}
 8006bc8:	bf00      	nop
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <prvResetNextTaskUnblockTime+0x38>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006be0:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <prvResetNextTaskUnblockTime+0x3c>)
 8006be2:	f04f 32ff 	mov.w	r2, #4294967295
 8006be6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006be8:	e008      	b.n	8006bfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bea:	4b07      	ldr	r3, [pc, #28]	; (8006c08 <prvResetNextTaskUnblockTime+0x38>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	4a04      	ldr	r2, [pc, #16]	; (8006c0c <prvResetNextTaskUnblockTime+0x3c>)
 8006bfa:	6013      	str	r3, [r2, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	20000448 	.word	0x20000448
 8006c0c:	200004b0 	.word	0x200004b0

08006c10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c16:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <xTaskGetSchedulerState+0x34>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d102      	bne.n	8006c24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	607b      	str	r3, [r7, #4]
 8006c22:	e008      	b.n	8006c36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c24:	4b08      	ldr	r3, [pc, #32]	; (8006c48 <xTaskGetSchedulerState+0x38>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d102      	bne.n	8006c32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	607b      	str	r3, [r7, #4]
 8006c30:	e001      	b.n	8006c36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c32:	2300      	movs	r3, #0
 8006c34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c36:	687b      	ldr	r3, [r7, #4]
	}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	2000049c 	.word	0x2000049c
 8006c48:	200004b8 	.word	0x200004b8

08006c4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d05e      	beq.n	8006d20 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c66:	4b31      	ldr	r3, [pc, #196]	; (8006d2c <xTaskPriorityInherit+0xe0>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d24e      	bcs.n	8006d0e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	db06      	blt.n	8006c86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c78:	4b2c      	ldr	r3, [pc, #176]	; (8006d2c <xTaskPriorityInherit+0xe0>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7e:	f1c3 0207 	rsb	r2, r3, #7
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6959      	ldr	r1, [r3, #20]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4a26      	ldr	r2, [pc, #152]	; (8006d30 <xTaskPriorityInherit+0xe4>)
 8006c98:	4413      	add	r3, r2
 8006c9a:	4299      	cmp	r1, r3
 8006c9c:	d12f      	bne.n	8006cfe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fe f9ad 	bl	8005002 <uxListRemove>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb8:	43da      	mvns	r2, r3
 8006cba:	4b1e      	ldr	r3, [pc, #120]	; (8006d34 <xTaskPriorityInherit+0xe8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	4a1c      	ldr	r2, [pc, #112]	; (8006d34 <xTaskPriorityInherit+0xe8>)
 8006cc2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cc4:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <xTaskPriorityInherit+0xe0>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	409a      	lsls	r2, r3
 8006cd6:	4b17      	ldr	r3, [pc, #92]	; (8006d34 <xTaskPriorityInherit+0xe8>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	4a15      	ldr	r2, [pc, #84]	; (8006d34 <xTaskPriorityInherit+0xe8>)
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4a10      	ldr	r2, [pc, #64]	; (8006d30 <xTaskPriorityInherit+0xe4>)
 8006cee:	441a      	add	r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f7fe f926 	bl	8004f48 <vListInsertEnd>
 8006cfc:	e004      	b.n	8006d08 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cfe:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <xTaskPriorityInherit+0xe0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	e008      	b.n	8006d20 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d12:	4b06      	ldr	r3, [pc, #24]	; (8006d2c <xTaskPriorityInherit+0xe0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d201      	bcs.n	8006d20 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d20:	68fb      	ldr	r3, [r7, #12]
	}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000390 	.word	0x20000390
 8006d30:	20000394 	.word	0x20000394
 8006d34:	20000498 	.word	0x20000498

08006d38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d06e      	beq.n	8006e2c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d4e:	4b3a      	ldr	r3, [pc, #232]	; (8006e38 <xTaskPriorityDisinherit+0x100>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d00a      	beq.n	8006d6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	60fb      	str	r3, [r7, #12]
}
 8006d6a:	bf00      	nop
 8006d6c:	e7fe      	b.n	8006d6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10a      	bne.n	8006d8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	60bb      	str	r3, [r7, #8]
}
 8006d88:	bf00      	nop
 8006d8a:	e7fe      	b.n	8006d8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d90:	1e5a      	subs	r2, r3, #1
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d044      	beq.n	8006e2c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d140      	bne.n	8006e2c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	3304      	adds	r3, #4
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fe f927 	bl	8005002 <uxListRemove>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d115      	bne.n	8006de6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbe:	491f      	ldr	r1, [pc, #124]	; (8006e3c <xTaskPriorityDisinherit+0x104>)
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10a      	bne.n	8006de6 <xTaskPriorityDisinherit+0xae>
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	43da      	mvns	r2, r3
 8006ddc:	4b18      	ldr	r3, [pc, #96]	; (8006e40 <xTaskPriorityDisinherit+0x108>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4013      	ands	r3, r2
 8006de2:	4a17      	ldr	r2, [pc, #92]	; (8006e40 <xTaskPriorityDisinherit+0x108>)
 8006de4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	f1c3 0207 	rsb	r2, r3, #7
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfe:	2201      	movs	r2, #1
 8006e00:	409a      	lsls	r2, r3
 8006e02:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <xTaskPriorityDisinherit+0x108>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	4a0d      	ldr	r2, [pc, #52]	; (8006e40 <xTaskPriorityDisinherit+0x108>)
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4a08      	ldr	r2, [pc, #32]	; (8006e3c <xTaskPriorityDisinherit+0x104>)
 8006e1a:	441a      	add	r2, r3
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7fe f890 	bl	8004f48 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e2c:	697b      	ldr	r3, [r7, #20]
	}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000390 	.word	0x20000390
 8006e3c:	20000394 	.word	0x20000394
 8006e40:	20000498 	.word	0x20000498

08006e44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e52:	2301      	movs	r3, #1
 8006e54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d077      	beq.n	8006f4c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	60fb      	str	r3, [r7, #12]
}
 8006e76:	bf00      	nop
 8006e78:	e7fe      	b.n	8006e78 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d902      	bls.n	8006e8a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	61fb      	str	r3, [r7, #28]
 8006e88:	e002      	b.n	8006e90 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d058      	beq.n	8006f4c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d153      	bne.n	8006f4c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006ea4:	4b2b      	ldr	r3, [pc, #172]	; (8006f54 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d10a      	bne.n	8006ec4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	60bb      	str	r3, [r7, #8]
}
 8006ec0:	bf00      	nop
 8006ec2:	e7fe      	b.n	8006ec2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	db04      	blt.n	8006ee2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	f1c3 0207 	rsb	r2, r3, #7
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	6959      	ldr	r1, [r3, #20]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4a19      	ldr	r2, [pc, #100]	; (8006f58 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006ef2:	4413      	add	r3, r2
 8006ef4:	4299      	cmp	r1, r3
 8006ef6:	d129      	bne.n	8006f4c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe f880 	bl	8005002 <uxListRemove>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10a      	bne.n	8006f1e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	43da      	mvns	r2, r3
 8006f14:	4b11      	ldr	r3, [pc, #68]	; (8006f5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4013      	ands	r3, r2
 8006f1a:	4a10      	ldr	r2, [pc, #64]	; (8006f5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f1c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	2201      	movs	r2, #1
 8006f24:	409a      	lsls	r2, r3
 8006f26:	4b0d      	ldr	r3, [pc, #52]	; (8006f5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	4a0b      	ldr	r2, [pc, #44]	; (8006f5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4a06      	ldr	r2, [pc, #24]	; (8006f58 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006f3e:	441a      	add	r2, r3
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	3304      	adds	r3, #4
 8006f44:	4619      	mov	r1, r3
 8006f46:	4610      	mov	r0, r2
 8006f48:	f7fd fffe 	bl	8004f48 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f4c:	bf00      	nop
 8006f4e:	3720      	adds	r7, #32
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20000390 	.word	0x20000390
 8006f58:	20000394 	.word	0x20000394
 8006f5c:	20000498 	.word	0x20000498

08006f60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f64:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f6c:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f72:	3201      	adds	r2, #1
 8006f74:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006f76:	4b03      	ldr	r3, [pc, #12]	; (8006f84 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f78:	681b      	ldr	r3, [r3, #0]
	}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	20000390 	.word	0x20000390

08006f88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f92:	4b29      	ldr	r3, [pc, #164]	; (8007038 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f98:	4b28      	ldr	r3, [pc, #160]	; (800703c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe f82f 	bl	8005002 <uxListRemove>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10b      	bne.n	8006fc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006faa:	4b24      	ldr	r3, [pc, #144]	; (800703c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	43da      	mvns	r2, r3
 8006fb8:	4b21      	ldr	r3, [pc, #132]	; (8007040 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	4a20      	ldr	r2, [pc, #128]	; (8007040 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006fc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d10a      	bne.n	8006fe0 <prvAddCurrentTaskToDelayedList+0x58>
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d007      	beq.n	8006fe0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fd0:	4b1a      	ldr	r3, [pc, #104]	; (800703c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	481a      	ldr	r0, [pc, #104]	; (8007044 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006fda:	f7fd ffb5 	bl	8004f48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fde:	e026      	b.n	800702e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fe8:	4b14      	ldr	r3, [pc, #80]	; (800703c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d209      	bcs.n	800700c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ff8:	4b13      	ldr	r3, [pc, #76]	; (8007048 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	4b0f      	ldr	r3, [pc, #60]	; (800703c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3304      	adds	r3, #4
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f7fd ffc3 	bl	8004f90 <vListInsert>
}
 800700a:	e010      	b.n	800702e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800700c:	4b0f      	ldr	r3, [pc, #60]	; (800704c <prvAddCurrentTaskToDelayedList+0xc4>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	4b0a      	ldr	r3, [pc, #40]	; (800703c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3304      	adds	r3, #4
 8007016:	4619      	mov	r1, r3
 8007018:	4610      	mov	r0, r2
 800701a:	f7fd ffb9 	bl	8004f90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800701e:	4b0c      	ldr	r3, [pc, #48]	; (8007050 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	429a      	cmp	r2, r3
 8007026:	d202      	bcs.n	800702e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007028:	4a09      	ldr	r2, [pc, #36]	; (8007050 <prvAddCurrentTaskToDelayedList+0xc8>)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6013      	str	r3, [r2, #0]
}
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20000494 	.word	0x20000494
 800703c:	20000390 	.word	0x20000390
 8007040:	20000498 	.word	0x20000498
 8007044:	2000047c 	.word	0x2000047c
 8007048:	2000044c 	.word	0x2000044c
 800704c:	20000448 	.word	0x20000448
 8007050:	200004b0 	.word	0x200004b0

08007054 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3b04      	subs	r3, #4
 8007064:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800706c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3b04      	subs	r3, #4
 8007072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f023 0201 	bic.w	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3b04      	subs	r3, #4
 8007082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007084:	4a0c      	ldr	r2, [pc, #48]	; (80070b8 <pxPortInitialiseStack+0x64>)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3b14      	subs	r3, #20
 800708e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3b04      	subs	r3, #4
 800709a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f06f 0202 	mvn.w	r2, #2
 80070a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3b20      	subs	r3, #32
 80070a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070aa:	68fb      	ldr	r3, [r7, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	080070bd 	.word	0x080070bd

080070bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070c6:	4b12      	ldr	r3, [pc, #72]	; (8007110 <prvTaskExitError+0x54>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d00a      	beq.n	80070e6 <prvTaskExitError+0x2a>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60fb      	str	r3, [r7, #12]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <prvTaskExitError+0x28>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	60bb      	str	r3, [r7, #8]
}
 80070f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070fa:	bf00      	nop
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0fc      	beq.n	80070fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	20000010 	.word	0x20000010
	...

08007120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007120:	4b07      	ldr	r3, [pc, #28]	; (8007140 <pxCurrentTCBConst2>)
 8007122:	6819      	ldr	r1, [r3, #0]
 8007124:	6808      	ldr	r0, [r1, #0]
 8007126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712a:	f380 8809 	msr	PSP, r0
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f04f 0000 	mov.w	r0, #0
 8007136:	f380 8811 	msr	BASEPRI, r0
 800713a:	4770      	bx	lr
 800713c:	f3af 8000 	nop.w

08007140 <pxCurrentTCBConst2>:
 8007140:	20000390 	.word	0x20000390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop

08007148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007148:	4808      	ldr	r0, [pc, #32]	; (800716c <prvPortStartFirstTask+0x24>)
 800714a:	6800      	ldr	r0, [r0, #0]
 800714c:	6800      	ldr	r0, [r0, #0]
 800714e:	f380 8808 	msr	MSP, r0
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	f380 8814 	msr	CONTROL, r0
 800715a:	b662      	cpsie	i
 800715c:	b661      	cpsie	f
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	df00      	svc	0
 8007168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800716a:	bf00      	nop
 800716c:	e000ed08 	.word	0xe000ed08

08007170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007176:	4b46      	ldr	r3, [pc, #280]	; (8007290 <xPortStartScheduler+0x120>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a46      	ldr	r2, [pc, #280]	; (8007294 <xPortStartScheduler+0x124>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d10a      	bne.n	8007196 <xPortStartScheduler+0x26>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	613b      	str	r3, [r7, #16]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007196:	4b3e      	ldr	r3, [pc, #248]	; (8007290 <xPortStartScheduler+0x120>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a3f      	ldr	r2, [pc, #252]	; (8007298 <xPortStartScheduler+0x128>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d10a      	bne.n	80071b6 <xPortStartScheduler+0x46>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	60fb      	str	r3, [r7, #12]
}
 80071b2:	bf00      	nop
 80071b4:	e7fe      	b.n	80071b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071b6:	4b39      	ldr	r3, [pc, #228]	; (800729c <xPortStartScheduler+0x12c>)
 80071b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	22ff      	movs	r2, #255	; 0xff
 80071c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	4b31      	ldr	r3, [pc, #196]	; (80072a0 <xPortStartScheduler+0x130>)
 80071dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071de:	4b31      	ldr	r3, [pc, #196]	; (80072a4 <xPortStartScheduler+0x134>)
 80071e0:	2207      	movs	r2, #7
 80071e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071e4:	e009      	b.n	80071fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80071e6:	4b2f      	ldr	r3, [pc, #188]	; (80072a4 <xPortStartScheduler+0x134>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	4a2d      	ldr	r2, [pc, #180]	; (80072a4 <xPortStartScheduler+0x134>)
 80071ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007202:	2b80      	cmp	r3, #128	; 0x80
 8007204:	d0ef      	beq.n	80071e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007206:	4b27      	ldr	r3, [pc, #156]	; (80072a4 <xPortStartScheduler+0x134>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f1c3 0307 	rsb	r3, r3, #7
 800720e:	2b04      	cmp	r3, #4
 8007210:	d00a      	beq.n	8007228 <xPortStartScheduler+0xb8>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	60bb      	str	r3, [r7, #8]
}
 8007224:	bf00      	nop
 8007226:	e7fe      	b.n	8007226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007228:	4b1e      	ldr	r3, [pc, #120]	; (80072a4 <xPortStartScheduler+0x134>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	021b      	lsls	r3, r3, #8
 800722e:	4a1d      	ldr	r2, [pc, #116]	; (80072a4 <xPortStartScheduler+0x134>)
 8007230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007232:	4b1c      	ldr	r3, [pc, #112]	; (80072a4 <xPortStartScheduler+0x134>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800723a:	4a1a      	ldr	r2, [pc, #104]	; (80072a4 <xPortStartScheduler+0x134>)
 800723c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	b2da      	uxtb	r2, r3
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007246:	4b18      	ldr	r3, [pc, #96]	; (80072a8 <xPortStartScheduler+0x138>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a17      	ldr	r2, [pc, #92]	; (80072a8 <xPortStartScheduler+0x138>)
 800724c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007252:	4b15      	ldr	r3, [pc, #84]	; (80072a8 <xPortStartScheduler+0x138>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a14      	ldr	r2, [pc, #80]	; (80072a8 <xPortStartScheduler+0x138>)
 8007258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800725c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800725e:	f000 f8dd 	bl	800741c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007262:	4b12      	ldr	r3, [pc, #72]	; (80072ac <xPortStartScheduler+0x13c>)
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007268:	f000 f8fc 	bl	8007464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800726c:	4b10      	ldr	r3, [pc, #64]	; (80072b0 <xPortStartScheduler+0x140>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a0f      	ldr	r2, [pc, #60]	; (80072b0 <xPortStartScheduler+0x140>)
 8007272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007278:	f7ff ff66 	bl	8007148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800727c:	f7ff fa82 	bl	8006784 <vTaskSwitchContext>
	prvTaskExitError();
 8007280:	f7ff ff1c 	bl	80070bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	e000ed00 	.word	0xe000ed00
 8007294:	410fc271 	.word	0x410fc271
 8007298:	410fc270 	.word	0x410fc270
 800729c:	e000e400 	.word	0xe000e400
 80072a0:	200004bc 	.word	0x200004bc
 80072a4:	200004c0 	.word	0x200004c0
 80072a8:	e000ed20 	.word	0xe000ed20
 80072ac:	20000010 	.word	0x20000010
 80072b0:	e000ef34 	.word	0xe000ef34

080072b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	607b      	str	r3, [r7, #4]
}
 80072cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072ce:	4b0f      	ldr	r3, [pc, #60]	; (800730c <vPortEnterCritical+0x58>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3301      	adds	r3, #1
 80072d4:	4a0d      	ldr	r2, [pc, #52]	; (800730c <vPortEnterCritical+0x58>)
 80072d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <vPortEnterCritical+0x58>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d10f      	bne.n	8007300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072e0:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <vPortEnterCritical+0x5c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <vPortEnterCritical+0x4c>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	603b      	str	r3, [r7, #0]
}
 80072fc:	bf00      	nop
 80072fe:	e7fe      	b.n	80072fe <vPortEnterCritical+0x4a>
	}
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	20000010 	.word	0x20000010
 8007310:	e000ed04 	.word	0xe000ed04

08007314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800731a:	4b12      	ldr	r3, [pc, #72]	; (8007364 <vPortExitCritical+0x50>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <vPortExitCritical+0x24>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	607b      	str	r3, [r7, #4]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <vPortExitCritical+0x50>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3b01      	subs	r3, #1
 800733e:	4a09      	ldr	r2, [pc, #36]	; (8007364 <vPortExitCritical+0x50>)
 8007340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007342:	4b08      	ldr	r3, [pc, #32]	; (8007364 <vPortExitCritical+0x50>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d105      	bne.n	8007356 <vPortExitCritical+0x42>
 800734a:	2300      	movs	r3, #0
 800734c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	f383 8811 	msr	BASEPRI, r3
}
 8007354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	20000010 	.word	0x20000010
	...

08007370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007370:	f3ef 8009 	mrs	r0, PSP
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	4b15      	ldr	r3, [pc, #84]	; (80073d0 <pxCurrentTCBConst>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	f01e 0f10 	tst.w	lr, #16
 8007380:	bf08      	it	eq
 8007382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738a:	6010      	str	r0, [r2, #0]
 800738c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007394:	f380 8811 	msr	BASEPRI, r0
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f7ff f9f0 	bl	8006784 <vTaskSwitchContext>
 80073a4:	f04f 0000 	mov.w	r0, #0
 80073a8:	f380 8811 	msr	BASEPRI, r0
 80073ac:	bc09      	pop	{r0, r3}
 80073ae:	6819      	ldr	r1, [r3, #0]
 80073b0:	6808      	ldr	r0, [r1, #0]
 80073b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b6:	f01e 0f10 	tst.w	lr, #16
 80073ba:	bf08      	it	eq
 80073bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80073c0:	f380 8809 	msr	PSP, r0
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	f3af 8000 	nop.w

080073d0 <pxCurrentTCBConst>:
 80073d0:	20000390 	.word	0x20000390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop

080073d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	607b      	str	r3, [r7, #4]
}
 80073f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073f2:	f7ff f90f 	bl	8006614 <xTaskIncrementTick>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <SysTick_Handler+0x40>)
 80073fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	2300      	movs	r3, #0
 8007406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	f383 8811 	msr	BASEPRI, r3
}
 800740e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	e000ed04 	.word	0xe000ed04

0800741c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <vPortSetupTimerInterrupt+0x34>)
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007426:	4b0b      	ldr	r3, [pc, #44]	; (8007454 <vPortSetupTimerInterrupt+0x38>)
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800742c:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <vPortSetupTimerInterrupt+0x3c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a0a      	ldr	r2, [pc, #40]	; (800745c <vPortSetupTimerInterrupt+0x40>)
 8007432:	fba2 2303 	umull	r2, r3, r2, r3
 8007436:	099b      	lsrs	r3, r3, #6
 8007438:	4a09      	ldr	r2, [pc, #36]	; (8007460 <vPortSetupTimerInterrupt+0x44>)
 800743a:	3b01      	subs	r3, #1
 800743c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800743e:	4b04      	ldr	r3, [pc, #16]	; (8007450 <vPortSetupTimerInterrupt+0x34>)
 8007440:	2207      	movs	r2, #7
 8007442:	601a      	str	r2, [r3, #0]
}
 8007444:	bf00      	nop
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	e000e010 	.word	0xe000e010
 8007454:	e000e018 	.word	0xe000e018
 8007458:	20000004 	.word	0x20000004
 800745c:	10624dd3 	.word	0x10624dd3
 8007460:	e000e014 	.word	0xe000e014

08007464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007474 <vPortEnableVFP+0x10>
 8007468:	6801      	ldr	r1, [r0, #0]
 800746a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800746e:	6001      	str	r1, [r0, #0]
 8007470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007472:	bf00      	nop
 8007474:	e000ed88 	.word	0xe000ed88

08007478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800747e:	f3ef 8305 	mrs	r3, IPSR
 8007482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b0f      	cmp	r3, #15
 8007488:	d914      	bls.n	80074b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800748a:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <vPortValidateInterruptPriority+0x70>)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007494:	4b15      	ldr	r3, [pc, #84]	; (80074ec <vPortValidateInterruptPriority+0x74>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	7afa      	ldrb	r2, [r7, #11]
 800749a:	429a      	cmp	r2, r3
 800749c:	d20a      	bcs.n	80074b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	607b      	str	r3, [r7, #4]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074b4:	4b0e      	ldr	r3, [pc, #56]	; (80074f0 <vPortValidateInterruptPriority+0x78>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80074bc:	4b0d      	ldr	r3, [pc, #52]	; (80074f4 <vPortValidateInterruptPriority+0x7c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d90a      	bls.n	80074da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	603b      	str	r3, [r7, #0]
}
 80074d6:	bf00      	nop
 80074d8:	e7fe      	b.n	80074d8 <vPortValidateInterruptPriority+0x60>
	}
 80074da:	bf00      	nop
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	e000e3f0 	.word	0xe000e3f0
 80074ec:	200004bc 	.word	0x200004bc
 80074f0:	e000ed0c 	.word	0xe000ed0c
 80074f4:	200004c0 	.word	0x200004c0

080074f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08a      	sub	sp, #40	; 0x28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007500:	2300      	movs	r3, #0
 8007502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007504:	f7fe ffba 	bl	800647c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007508:	4b5b      	ldr	r3, [pc, #364]	; (8007678 <pvPortMalloc+0x180>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007510:	f000 f92c 	bl	800776c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007514:	4b59      	ldr	r3, [pc, #356]	; (800767c <pvPortMalloc+0x184>)
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4013      	ands	r3, r2
 800751c:	2b00      	cmp	r3, #0
 800751e:	f040 8093 	bne.w	8007648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01d      	beq.n	8007564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007528:	2208      	movs	r2, #8
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4413      	add	r3, r2
 800752e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	2b00      	cmp	r3, #0
 8007538:	d014      	beq.n	8007564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f023 0307 	bic.w	r3, r3, #7
 8007540:	3308      	adds	r3, #8
 8007542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <pvPortMalloc+0x6c>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	617b      	str	r3, [r7, #20]
}
 8007560:	bf00      	nop
 8007562:	e7fe      	b.n	8007562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d06e      	beq.n	8007648 <pvPortMalloc+0x150>
 800756a:	4b45      	ldr	r3, [pc, #276]	; (8007680 <pvPortMalloc+0x188>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	429a      	cmp	r2, r3
 8007572:	d869      	bhi.n	8007648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007574:	4b43      	ldr	r3, [pc, #268]	; (8007684 <pvPortMalloc+0x18c>)
 8007576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007578:	4b42      	ldr	r3, [pc, #264]	; (8007684 <pvPortMalloc+0x18c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800757e:	e004      	b.n	800758a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	d903      	bls.n	800759c <pvPortMalloc+0xa4>
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1f1      	bne.n	8007580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800759c:	4b36      	ldr	r3, [pc, #216]	; (8007678 <pvPortMalloc+0x180>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d050      	beq.n	8007648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2208      	movs	r2, #8
 80075ac:	4413      	add	r3, r2
 80075ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	2308      	movs	r3, #8
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d91f      	bls.n	8007608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <pvPortMalloc+0xf8>
	__asm volatile
 80075da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	613b      	str	r3, [r7, #16]
}
 80075ec:	bf00      	nop
 80075ee:	e7fe      	b.n	80075ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	1ad2      	subs	r2, r2, r3
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007602:	69b8      	ldr	r0, [r7, #24]
 8007604:	f000 f914 	bl	8007830 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007608:	4b1d      	ldr	r3, [pc, #116]	; (8007680 <pvPortMalloc+0x188>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	4a1b      	ldr	r2, [pc, #108]	; (8007680 <pvPortMalloc+0x188>)
 8007614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007616:	4b1a      	ldr	r3, [pc, #104]	; (8007680 <pvPortMalloc+0x188>)
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	4b1b      	ldr	r3, [pc, #108]	; (8007688 <pvPortMalloc+0x190>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d203      	bcs.n	800762a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007622:	4b17      	ldr	r3, [pc, #92]	; (8007680 <pvPortMalloc+0x188>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a18      	ldr	r2, [pc, #96]	; (8007688 <pvPortMalloc+0x190>)
 8007628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <pvPortMalloc+0x184>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	431a      	orrs	r2, r3
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800763e:	4b13      	ldr	r3, [pc, #76]	; (800768c <pvPortMalloc+0x194>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3301      	adds	r3, #1
 8007644:	4a11      	ldr	r2, [pc, #68]	; (800768c <pvPortMalloc+0x194>)
 8007646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007648:	f7fe ff26 	bl	8006498 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	f003 0307 	and.w	r3, r3, #7
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <pvPortMalloc+0x174>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	60fb      	str	r3, [r7, #12]
}
 8007668:	bf00      	nop
 800766a:	e7fe      	b.n	800766a <pvPortMalloc+0x172>
	return pvReturn;
 800766c:	69fb      	ldr	r3, [r7, #28]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3728      	adds	r7, #40	; 0x28
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	200067dc 	.word	0x200067dc
 800767c:	200067f0 	.word	0x200067f0
 8007680:	200067e0 	.word	0x200067e0
 8007684:	200067d4 	.word	0x200067d4
 8007688:	200067e4 	.word	0x200067e4
 800768c:	200067e8 	.word	0x200067e8

08007690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d04d      	beq.n	800773e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076a2:	2308      	movs	r3, #8
 80076a4:	425b      	negs	r3, r3
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4413      	add	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	4b24      	ldr	r3, [pc, #144]	; (8007748 <vPortFree+0xb8>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4013      	ands	r3, r2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10a      	bne.n	80076d4 <vPortFree+0x44>
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	60fb      	str	r3, [r7, #12]
}
 80076d0:	bf00      	nop
 80076d2:	e7fe      	b.n	80076d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00a      	beq.n	80076f2 <vPortFree+0x62>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	60bb      	str	r3, [r7, #8]
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	4b14      	ldr	r3, [pc, #80]	; (8007748 <vPortFree+0xb8>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4013      	ands	r3, r2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d01e      	beq.n	800773e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d11a      	bne.n	800773e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <vPortFree+0xb8>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	43db      	mvns	r3, r3
 8007712:	401a      	ands	r2, r3
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007718:	f7fe feb0 	bl	800647c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	4b0a      	ldr	r3, [pc, #40]	; (800774c <vPortFree+0xbc>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4413      	add	r3, r2
 8007726:	4a09      	ldr	r2, [pc, #36]	; (800774c <vPortFree+0xbc>)
 8007728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800772a:	6938      	ldr	r0, [r7, #16]
 800772c:	f000 f880 	bl	8007830 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007730:	4b07      	ldr	r3, [pc, #28]	; (8007750 <vPortFree+0xc0>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3301      	adds	r3, #1
 8007736:	4a06      	ldr	r2, [pc, #24]	; (8007750 <vPortFree+0xc0>)
 8007738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800773a:	f7fe fead 	bl	8006498 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800773e:	bf00      	nop
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	200067f0 	.word	0x200067f0
 800774c:	200067e0 	.word	0x200067e0
 8007750:	200067ec 	.word	0x200067ec

08007754 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8007754:	b480      	push	{r7}
 8007756:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8007758:	4b03      	ldr	r3, [pc, #12]	; (8007768 <xPortGetFreeHeapSize+0x14>)
 800775a:	681b      	ldr	r3, [r3, #0]
}
 800775c:	4618      	mov	r0, r3
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	200067e0 	.word	0x200067e0

0800776c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007772:	f246 3310 	movw	r3, #25360	; 0x6310
 8007776:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007778:	4b27      	ldr	r3, [pc, #156]	; (8007818 <prvHeapInit+0xac>)
 800777a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00c      	beq.n	80077a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3307      	adds	r3, #7
 800778a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0307 	bic.w	r3, r3, #7
 8007792:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	4a1f      	ldr	r2, [pc, #124]	; (8007818 <prvHeapInit+0xac>)
 800779c:	4413      	add	r3, r2
 800779e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077a4:	4a1d      	ldr	r2, [pc, #116]	; (800781c <prvHeapInit+0xb0>)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077aa:	4b1c      	ldr	r3, [pc, #112]	; (800781c <prvHeapInit+0xb0>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	4413      	add	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077b8:	2208      	movs	r2, #8
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	1a9b      	subs	r3, r3, r2
 80077be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0307 	bic.w	r3, r3, #7
 80077c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4a15      	ldr	r2, [pc, #84]	; (8007820 <prvHeapInit+0xb4>)
 80077cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077ce:	4b14      	ldr	r3, [pc, #80]	; (8007820 <prvHeapInit+0xb4>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2200      	movs	r2, #0
 80077d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077d6:	4b12      	ldr	r3, [pc, #72]	; (8007820 <prvHeapInit+0xb4>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	1ad2      	subs	r2, r2, r3
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077ec:	4b0c      	ldr	r3, [pc, #48]	; (8007820 <prvHeapInit+0xb4>)
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	4a0a      	ldr	r2, [pc, #40]	; (8007824 <prvHeapInit+0xb8>)
 80077fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	4a09      	ldr	r2, [pc, #36]	; (8007828 <prvHeapInit+0xbc>)
 8007802:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007804:	4b09      	ldr	r3, [pc, #36]	; (800782c <prvHeapInit+0xc0>)
 8007806:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800780a:	601a      	str	r2, [r3, #0]
}
 800780c:	bf00      	nop
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	200004c4 	.word	0x200004c4
 800781c:	200067d4 	.word	0x200067d4
 8007820:	200067dc 	.word	0x200067dc
 8007824:	200067e4 	.word	0x200067e4
 8007828:	200067e0 	.word	0x200067e0
 800782c:	200067f0 	.word	0x200067f0

08007830 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007838:	4b28      	ldr	r3, [pc, #160]	; (80078dc <prvInsertBlockIntoFreeList+0xac>)
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	e002      	b.n	8007844 <prvInsertBlockIntoFreeList+0x14>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	429a      	cmp	r2, r3
 800784c:	d8f7      	bhi.n	800783e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	4413      	add	r3, r2
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	429a      	cmp	r2, r3
 800785e:	d108      	bne.n	8007872 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	441a      	add	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	441a      	add	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d118      	bne.n	80078b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	4b15      	ldr	r3, [pc, #84]	; (80078e0 <prvInsertBlockIntoFreeList+0xb0>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d00d      	beq.n	80078ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	441a      	add	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	e008      	b.n	80078c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078ae:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <prvInsertBlockIntoFreeList+0xb0>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	e003      	b.n	80078c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d002      	beq.n	80078ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078ce:	bf00      	nop
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	200067d4 	.word	0x200067d4
 80078e0:	200067dc 	.word	0x200067dc

080078e4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	330c      	adds	r3, #12
 80078f4:	461a      	mov	r2, r3
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 fff3 	bl	80098e4 <tcpip_send_msg_wait_sem>
 80078fe:	4603      	mov	r3, r0
 8007900:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d103      	bne.n	8007912 <netconn_apimsg+0x2e>
    return apimsg->err;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007910:	e001      	b.n	8007916 <netconn_apimsg+0x32>
  }
  return err;
 8007912:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08c      	sub	sp, #48	; 0x30
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	603a      	str	r2, [r7, #0]
 800792a:	71fb      	strb	r3, [r7, #7]
 800792c:	460b      	mov	r3, r1
 800792e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	4618      	mov	r0, r3
 8007936:	f000 ff21 	bl	800877c <netconn_alloc>
 800793a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d054      	beq.n	80079ec <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007942:	79bb      	ldrb	r3, [r7, #6]
 8007944:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007948:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800794a:	f107 0308 	add.w	r3, r7, #8
 800794e:	4619      	mov	r1, r3
 8007950:	4829      	ldr	r0, [pc, #164]	; (80079f8 <netconn_new_with_proto_and_callback+0xd8>)
 8007952:	f7ff ffc7 	bl	80078e4 <netconn_apimsg>
 8007956:	4603      	mov	r3, r0
 8007958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800795c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007960:	2b00      	cmp	r3, #0
 8007962:	d043      	beq.n	80079ec <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <netconn_new_with_proto_and_callback+0x58>
 800796c:	4b23      	ldr	r3, [pc, #140]	; (80079fc <netconn_new_with_proto_and_callback+0xdc>)
 800796e:	22a3      	movs	r2, #163	; 0xa3
 8007970:	4923      	ldr	r1, [pc, #140]	; (8007a00 <netconn_new_with_proto_and_callback+0xe0>)
 8007972:	4824      	ldr	r0, [pc, #144]	; (8007a04 <netconn_new_with_proto_and_callback+0xe4>)
 8007974:	f00d fab6 	bl	8014ee4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	3310      	adds	r3, #16
 800797c:	4618      	mov	r0, r3
 800797e:	f00c ff88 	bl	8014892 <sys_mbox_valid>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d105      	bne.n	8007994 <netconn_new_with_proto_and_callback+0x74>
 8007988:	4b1c      	ldr	r3, [pc, #112]	; (80079fc <netconn_new_with_proto_and_callback+0xdc>)
 800798a:	22a4      	movs	r2, #164	; 0xa4
 800798c:	491e      	ldr	r1, [pc, #120]	; (8007a08 <netconn_new_with_proto_and_callback+0xe8>)
 800798e:	481d      	ldr	r0, [pc, #116]	; (8007a04 <netconn_new_with_proto_and_callback+0xe4>)
 8007990:	f00d faa8 	bl	8014ee4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007996:	3314      	adds	r3, #20
 8007998:	4618      	mov	r0, r3
 800799a:	f00c ff7a 	bl	8014892 <sys_mbox_valid>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d005      	beq.n	80079b0 <netconn_new_with_proto_and_callback+0x90>
 80079a4:	4b15      	ldr	r3, [pc, #84]	; (80079fc <netconn_new_with_proto_and_callback+0xdc>)
 80079a6:	22a6      	movs	r2, #166	; 0xa6
 80079a8:	4918      	ldr	r1, [pc, #96]	; (8007a0c <netconn_new_with_proto_and_callback+0xec>)
 80079aa:	4816      	ldr	r0, [pc, #88]	; (8007a04 <netconn_new_with_proto_and_callback+0xe4>)
 80079ac:	f00d fa9a 	bl	8014ee4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	330c      	adds	r3, #12
 80079b4:	4618      	mov	r0, r3
 80079b6:	f00c fffd 	bl	80149b4 <sys_sem_valid>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d105      	bne.n	80079cc <netconn_new_with_proto_and_callback+0xac>
 80079c0:	4b0e      	ldr	r3, [pc, #56]	; (80079fc <netconn_new_with_proto_and_callback+0xdc>)
 80079c2:	22a9      	movs	r2, #169	; 0xa9
 80079c4:	4912      	ldr	r1, [pc, #72]	; (8007a10 <netconn_new_with_proto_and_callback+0xf0>)
 80079c6:	480f      	ldr	r0, [pc, #60]	; (8007a04 <netconn_new_with_proto_and_callback+0xe4>)
 80079c8:	f00d fa8c 	bl	8014ee4 <iprintf>
      sys_sem_free(&conn->op_completed);
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ce:	330c      	adds	r3, #12
 80079d0:	4618      	mov	r0, r3
 80079d2:	f00c ffe2 	bl	801499a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80079d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d8:	3310      	adds	r3, #16
 80079da:	4618      	mov	r0, r3
 80079dc:	f00c fed2 	bl	8014784 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80079e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079e2:	2007      	movs	r0, #7
 80079e4:	f002 fce6 	bl	800a3b4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80079e8:	2300      	movs	r3, #0
 80079ea:	e000      	b.n	80079ee <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3730      	adds	r7, #48	; 0x30
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	08008751 	.word	0x08008751
 80079fc:	08015d70 	.word	0x08015d70
 8007a00:	08015da4 	.word	0x08015da4
 8007a04:	08015dc8 	.word	0x08015dc8
 8007a08:	08015df0 	.word	0x08015df0
 8007a0c:	08015e08 	.word	0x08015e08
 8007a10:	08015e2c 	.word	0x08015e2c

08007a14 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08c      	sub	sp, #48	; 0x30
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	e014      	b.n	8007a50 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007a2a:	2329      	movs	r3, #41	; 0x29
 8007a2c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007a2e:	f107 030c 	add.w	r3, r7, #12
 8007a32:	4619      	mov	r1, r3
 8007a34:	4808      	ldr	r0, [pc, #32]	; (8007a58 <netconn_prepare_delete+0x44>)
 8007a36:	f7ff ff55 	bl	80078e4 <netconn_apimsg>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007a40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <netconn_prepare_delete+0x3a>
    return err;
 8007a48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a4c:	e000      	b.n	8007a50 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3730      	adds	r7, #48	; 0x30
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	08008cb5 	.word	0x08008cb5

08007a5c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <netconn_delete+0x12>
    return ERR_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e00d      	b.n	8007a8a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7ff ffd0 	bl	8007a14 <netconn_prepare_delete>
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <netconn_delete+0x2a>
    netconn_free(conn);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fee9 	bl	8008858 <netconn_free>
  }
  return err;
 8007a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08e      	sub	sp, #56	; 0x38
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d109      	bne.n	8007abc <netconn_bind+0x28>
 8007aa8:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <netconn_bind+0x5c>)
 8007aaa:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007aae:	4911      	ldr	r1, [pc, #68]	; (8007af4 <netconn_bind+0x60>)
 8007ab0:	4811      	ldr	r0, [pc, #68]	; (8007af8 <netconn_bind+0x64>)
 8007ab2:	f00d fa17 	bl	8014ee4 <iprintf>
 8007ab6:	f06f 030f 	mvn.w	r3, #15
 8007aba:	e015      	b.n	8007ae8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007ac2:	4b0e      	ldr	r3, [pc, #56]	; (8007afc <netconn_bind+0x68>)
 8007ac4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007ace:	88fb      	ldrh	r3, [r7, #6]
 8007ad0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007ad2:	f107 0314 	add.w	r3, r7, #20
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4809      	ldr	r0, [pc, #36]	; (8007b00 <netconn_bind+0x6c>)
 8007ada:	f7ff ff03 	bl	80078e4 <netconn_apimsg>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007ae4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3738      	adds	r7, #56	; 0x38
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	08015d70 	.word	0x08015d70
 8007af4:	08015ea8 	.word	0x08015ea8
 8007af8:	08015dc8 	.word	0x08015dc8
 8007afc:	0801936c 	.word	0x0801936c
 8007b00:	08008e7d 	.word	0x08008e7d

08007b04 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d109      	bne.n	8007b30 <netconn_recv_data+0x2c>
 8007b1c:	4b58      	ldr	r3, [pc, #352]	; (8007c80 <netconn_recv_data+0x17c>)
 8007b1e:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007b22:	4958      	ldr	r1, [pc, #352]	; (8007c84 <netconn_recv_data+0x180>)
 8007b24:	4858      	ldr	r0, [pc, #352]	; (8007c88 <netconn_recv_data+0x184>)
 8007b26:	f00d f9dd 	bl	8014ee4 <iprintf>
 8007b2a:	f06f 030f 	mvn.w	r3, #15
 8007b2e:	e0a2      	b.n	8007c76 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d109      	bne.n	8007b50 <netconn_recv_data+0x4c>
 8007b3c:	4b50      	ldr	r3, [pc, #320]	; (8007c80 <netconn_recv_data+0x17c>)
 8007b3e:	f240 224a 	movw	r2, #586	; 0x24a
 8007b42:	4952      	ldr	r1, [pc, #328]	; (8007c8c <netconn_recv_data+0x188>)
 8007b44:	4850      	ldr	r0, [pc, #320]	; (8007c88 <netconn_recv_data+0x184>)
 8007b46:	f00d f9cd 	bl	8014ee4 <iprintf>
 8007b4a:	f06f 030f 	mvn.w	r3, #15
 8007b4e:	e092      	b.n	8007c76 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3310      	adds	r3, #16
 8007b54:	4618      	mov	r0, r3
 8007b56:	f00c fe9c 	bl	8014892 <sys_mbox_valid>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10e      	bne.n	8007b7e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fa45 	bl	8007ff0 <netconn_err>
 8007b66:	4603      	mov	r3, r0
 8007b68:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007b6a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007b72:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007b76:	e07e      	b.n	8007c76 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007b78:	f06f 030a 	mvn.w	r3, #10
 8007b7c:	e07b      	b.n	8007c76 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	7f1b      	ldrb	r3, [r3, #28]
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10f      	bne.n	8007baa <netconn_recv_data+0xa6>
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	f003 0304 	and.w	r3, r3, #4
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	7f1b      	ldrb	r3, [r3, #28]
 8007b98:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d104      	bne.n	8007baa <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d023      	beq.n	8007bf2 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3310      	adds	r3, #16
 8007bae:	f107 0218 	add.w	r2, r7, #24
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f00c fe50 	bl	801485a <sys_arch_mbox_tryfetch>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc0:	d11f      	bne.n	8007c02 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fa14 	bl	8007ff0 <netconn_err>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007bcc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d002      	beq.n	8007bda <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007bd4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007bd8:	e04d      	b.n	8007c76 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	7f1b      	ldrb	r3, [r3, #28]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007be6:	f06f 030a 	mvn.w	r3, #10
 8007bea:	e044      	b.n	8007c76 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007bec:	f06f 0306 	mvn.w	r3, #6
 8007bf0:	e041      	b.n	8007c76 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3310      	adds	r3, #16
 8007bf6:	f107 0118 	add.w	r1, r7, #24
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f00c fded 	bl	80147dc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c0a:	2b10      	cmp	r3, #16
 8007c0c:	d117      	bne.n	8007c3e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	f107 0217 	add.w	r2, r7, #23
 8007c14:	4611      	mov	r1, r2
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fa3c 	bl	8008094 <lwip_netconn_is_err_msg>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d009      	beq.n	8007c36 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8007c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c26:	f113 0f0f 	cmn.w	r3, #15
 8007c2a:	d101      	bne.n	8007c30 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	e022      	b.n	8007c76 <netconn_recv_data+0x172>
      }
      return err;
 8007c30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c34:	e01f      	b.n	8007c76 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	891b      	ldrh	r3, [r3, #8]
 8007c3a:	83fb      	strh	r3, [r7, #30]
 8007c3c:	e00d      	b.n	8007c5a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d106      	bne.n	8007c52 <netconn_recv_data+0x14e>
 8007c44:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <netconn_recv_data+0x17c>)
 8007c46:	f240 2291 	movw	r2, #657	; 0x291
 8007c4a:	4911      	ldr	r1, [pc, #68]	; (8007c90 <netconn_recv_data+0x18c>)
 8007c4c:	480e      	ldr	r0, [pc, #56]	; (8007c88 <netconn_recv_data+0x184>)
 8007c4e:	f00d f949 	bl	8014ee4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	891b      	ldrh	r3, [r3, #8]
 8007c58:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <netconn_recv_data+0x16a>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c66:	8bfa      	ldrh	r2, [r7, #30]
 8007c68:	2101      	movs	r1, #1
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3720      	adds	r7, #32
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	08015d70 	.word	0x08015d70
 8007c84:	08015f88 	.word	0x08015f88
 8007c88:	08015dc8 	.word	0x08015dc8
 8007c8c:	08015fa8 	.word	0x08015fa8
 8007c90:	08015fc4 	.word	0x08015fc4

08007c94 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d005      	beq.n	8007cb2 <netconn_tcp_recvd_msg+0x1e>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cae:	2b10      	cmp	r3, #16
 8007cb0:	d009      	beq.n	8007cc6 <netconn_tcp_recvd_msg+0x32>
 8007cb2:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <netconn_tcp_recvd_msg+0x50>)
 8007cb4:	f240 22a7 	movw	r2, #679	; 0x2a7
 8007cb8:	490b      	ldr	r1, [pc, #44]	; (8007ce8 <netconn_tcp_recvd_msg+0x54>)
 8007cba:	480c      	ldr	r0, [pc, #48]	; (8007cec <netconn_tcp_recvd_msg+0x58>)
 8007cbc:	f00d f912 	bl	8014ee4 <iprintf>
 8007cc0:	f06f 030f 	mvn.w	r3, #15
 8007cc4:	e00a      	b.n	8007cdc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	4806      	ldr	r0, [pc, #24]	; (8007cf0 <netconn_tcp_recvd_msg+0x5c>)
 8007cd6:	f7ff fe05 	bl	80078e4 <netconn_apimsg>
 8007cda:	4603      	mov	r3, r0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	08015d70 	.word	0x08015d70
 8007ce8:	08015fd0 	.word	0x08015fd0
 8007cec:	08015dc8 	.word	0x08015dc8
 8007cf0:	08008f8b 	.word	0x08008f8b

08007cf4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b090      	sub	sp, #64	; 0x40
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3310      	adds	r3, #16
 8007d06:	4618      	mov	r0, r3
 8007d08:	f00c fdc3 	bl	8014892 <sys_mbox_valid>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d102      	bne.n	8007d18 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8007d12:	f06f 030a 	mvn.w	r3, #10
 8007d16:	e06d      	b.n	8007df4 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	7f1b      	ldrb	r3, [r3, #28]
 8007d1c:	b25b      	sxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	da07      	bge.n	8007d32 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	7f1b      	ldrb	r3, [r3, #28]
 8007d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8007d30:	e039      	b.n	8007da6 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8007d32:	79fb      	ldrb	r3, [r7, #7]
 8007d34:	461a      	mov	r2, r3
 8007d36:	68b9      	ldr	r1, [r7, #8]
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f7ff fee3 	bl	8007b04 <netconn_recv_data>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8007d44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8007d4c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007d50:	e050      	b.n	8007df4 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	f003 0308 	and.w	r3, r3, #8
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10e      	bne.n	8007d80 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <netconn_recv_data_tcp+0x7a>
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	891b      	ldrh	r3, [r3, #8]
 8007d6c:	e000      	b.n	8007d70 <netconn_recv_data_tcp+0x7c>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8007d72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d74:	f107 0214 	add.w	r2, r7, #20
 8007d78:	4619      	mov	r1, r3
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f7ff ff8a 	bl	8007c94 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8007d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d134      	bne.n	8007df0 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8007d86:	79fb      	ldrb	r3, [r7, #7]
 8007d88:	f003 0310 	and.w	r3, r3, #16
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d009      	beq.n	8007da4 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	7f1b      	ldrb	r3, [r3, #28]
 8007d94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8007d9e:	f06f 0306 	mvn.w	r3, #6
 8007da2:	e027      	b.n	8007df4 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8007da4:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d005      	beq.n	8007dba <netconn_recv_data_tcp+0xc6>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	2200      	movs	r2, #0
 8007db4:	2101      	movs	r1, #1
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10f      	bne.n	8007de2 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 f914 	bl	8007ff0 <netconn_err>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8007dce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <netconn_recv_data_tcp+0xe8>
          return err;
 8007dd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007dda:	e00b      	b.n	8007df4 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8007ddc:	f06f 030d 	mvn.w	r3, #13
 8007de0:	e008      	b.n	8007df4 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8007de2:	2101      	movs	r1, #1
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 f8d3 	bl	8007f90 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8007dea:	f06f 030e 	mvn.w	r3, #14
 8007dee:	e001      	b.n	8007df4 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8007df0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3740      	adds	r7, #64	; 0x40
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d109      	bne.n	8007e24 <netconn_recv+0x28>
 8007e10:	4b32      	ldr	r3, [pc, #200]	; (8007edc <netconn_recv+0xe0>)
 8007e12:	f240 3263 	movw	r2, #867	; 0x363
 8007e16:	4932      	ldr	r1, [pc, #200]	; (8007ee0 <netconn_recv+0xe4>)
 8007e18:	4832      	ldr	r0, [pc, #200]	; (8007ee4 <netconn_recv+0xe8>)
 8007e1a:	f00d f863 	bl	8014ee4 <iprintf>
 8007e1e:	f06f 030f 	mvn.w	r3, #15
 8007e22:	e056      	b.n	8007ed2 <netconn_recv+0xd6>
  *new_buf = NULL;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2200      	movs	r2, #0
 8007e28:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d109      	bne.n	8007e44 <netconn_recv+0x48>
 8007e30:	4b2a      	ldr	r3, [pc, #168]	; (8007edc <netconn_recv+0xe0>)
 8007e32:	f240 3265 	movw	r2, #869	; 0x365
 8007e36:	492c      	ldr	r1, [pc, #176]	; (8007ee8 <netconn_recv+0xec>)
 8007e38:	482a      	ldr	r0, [pc, #168]	; (8007ee4 <netconn_recv+0xe8>)
 8007e3a:	f00d f853 	bl	8014ee4 <iprintf>
 8007e3e:	f06f 030f 	mvn.w	r3, #15
 8007e42:	e046      	b.n	8007ed2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e4c:	2b10      	cmp	r3, #16
 8007e4e:	d13a      	bne.n	8007ec6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007e54:	2006      	movs	r0, #6
 8007e56:	f002 fa5b 	bl	800a310 <memp_malloc>
 8007e5a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d102      	bne.n	8007e68 <netconn_recv+0x6c>
      return ERR_MEM;
 8007e62:	f04f 33ff 	mov.w	r3, #4294967295
 8007e66:	e034      	b.n	8007ed2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8007e68:	f107 030c 	add.w	r3, r7, #12
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7ff ff3f 	bl	8007cf4 <netconn_recv_data_tcp>
 8007e76:	4603      	mov	r3, r0
 8007e78:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8007e7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d006      	beq.n	8007e90 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8007e82:	6979      	ldr	r1, [r7, #20]
 8007e84:	2006      	movs	r0, #6
 8007e86:	f002 fa95 	bl	800a3b4 <memp_free>
      return err;
 8007e8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e8e:	e020      	b.n	8007ed2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d106      	bne.n	8007ea4 <netconn_recv+0xa8>
 8007e96:	4b11      	ldr	r3, [pc, #68]	; (8007edc <netconn_recv+0xe0>)
 8007e98:	f240 3279 	movw	r2, #889	; 0x379
 8007e9c:	4913      	ldr	r1, [pc, #76]	; (8007eec <netconn_recv+0xf0>)
 8007e9e:	4811      	ldr	r0, [pc, #68]	; (8007ee4 <netconn_recv+0xe8>)
 8007ea0:	f00d f820 	bl	8014ee4 <iprintf>

    buf->p = p;
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e005      	b.n	8007ed2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7ff fe1a 	bl	8007b04 <netconn_recv_data>
 8007ed0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	08015d70 	.word	0x08015d70
 8007ee0:	08015f88 	.word	0x08015f88
 8007ee4:	08015dc8 	.word	0x08015dc8
 8007ee8:	08015fa8 	.word	0x08015fa8
 8007eec:	08016020 	.word	0x08016020

08007ef0 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d011      	beq.n	8007f28 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <netconn_sendto+0x20>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	e000      	b.n	8007f12 <netconn_sendto+0x22>
 8007f10:	2300      	movs	r3, #0
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	887a      	ldrh	r2, [r7, #2]
 8007f1a:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 f808 	bl	8007f34 <netconn_send>
 8007f24:	4603      	mov	r3, r0
 8007f26:	e001      	b.n	8007f2c <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 8007f28:	f06f 0305 	mvn.w	r3, #5
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08c      	sub	sp, #48	; 0x30
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d109      	bne.n	8007f58 <netconn_send+0x24>
 8007f44:	4b0e      	ldr	r3, [pc, #56]	; (8007f80 <netconn_send+0x4c>)
 8007f46:	f240 32b2 	movw	r2, #946	; 0x3b2
 8007f4a:	490e      	ldr	r1, [pc, #56]	; (8007f84 <netconn_send+0x50>)
 8007f4c:	480e      	ldr	r0, [pc, #56]	; (8007f88 <netconn_send+0x54>)
 8007f4e:	f00c ffc9 	bl	8014ee4 <iprintf>
 8007f52:	f06f 030f 	mvn.w	r3, #15
 8007f56:	e00e      	b.n	8007f76 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8007f60:	f107 030c 	add.w	r3, r7, #12
 8007f64:	4619      	mov	r1, r3
 8007f66:	4809      	ldr	r0, [pc, #36]	; (8007f8c <netconn_send+0x58>)
 8007f68:	f7ff fcbc 	bl	80078e4 <netconn_apimsg>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007f72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3730      	adds	r7, #48	; 0x30
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	08015d70 	.word	0x08015d70
 8007f84:	0801602c 	.word	0x0801602c
 8007f88:	08015dc8 	.word	0x08015dc8
 8007f8c:	08008ef1 	.word	0x08008ef1

08007f90 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b08c      	sub	sp, #48	; 0x30
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d109      	bne.n	8007fb6 <netconn_close_shutdown+0x26>
 8007fa2:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <netconn_close_shutdown+0x50>)
 8007fa4:	f240 4247 	movw	r2, #1095	; 0x447
 8007fa8:	490e      	ldr	r1, [pc, #56]	; (8007fe4 <netconn_close_shutdown+0x54>)
 8007faa:	480f      	ldr	r0, [pc, #60]	; (8007fe8 <netconn_close_shutdown+0x58>)
 8007fac:	f00c ff9a 	bl	8014ee4 <iprintf>
 8007fb0:	f06f 030f 	mvn.w	r3, #15
 8007fb4:	e010      	b.n	8007fd8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8007fba:	78fb      	ldrb	r3, [r7, #3]
 8007fbc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007fbe:	2329      	movs	r3, #41	; 0x29
 8007fc0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8007fc2:	f107 030c 	add.w	r3, r7, #12
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4808      	ldr	r0, [pc, #32]	; (8007fec <netconn_close_shutdown+0x5c>)
 8007fca:	f7ff fc8b 	bl	80078e4 <netconn_apimsg>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007fd4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3730      	adds	r7, #48	; 0x30
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	08015d70 	.word	0x08015d70
 8007fe4:	080160ac 	.word	0x080160ac
 8007fe8:	08015dc8 	.word	0x08015dc8
 8007fec:	0800938d 	.word	0x0800938d

08007ff0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <netconn_err+0x12>
    return ERR_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	e00d      	b.n	800801e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008002:	f00c fd61 	bl	8014ac8 <sys_arch_protect>
 8008006:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7a1b      	ldrb	r3, [r3, #8]
 800800c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f00c fd65 	bl	8014ae4 <sys_arch_unprotect>
  return err;
 800801a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008036:	f113 0f0d 	cmn.w	r3, #13
 800803a:	d009      	beq.n	8008050 <lwip_netconn_err_to_msg+0x28>
 800803c:	f113 0f0d 	cmn.w	r3, #13
 8008040:	dc0c      	bgt.n	800805c <lwip_netconn_err_to_msg+0x34>
 8008042:	f113 0f0f 	cmn.w	r3, #15
 8008046:	d007      	beq.n	8008058 <lwip_netconn_err_to_msg+0x30>
 8008048:	f113 0f0e 	cmn.w	r3, #14
 800804c:	d002      	beq.n	8008054 <lwip_netconn_err_to_msg+0x2c>
 800804e:	e005      	b.n	800805c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008050:	4b0a      	ldr	r3, [pc, #40]	; (800807c <lwip_netconn_err_to_msg+0x54>)
 8008052:	e00e      	b.n	8008072 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <lwip_netconn_err_to_msg+0x58>)
 8008056:	e00c      	b.n	8008072 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008058:	4b0a      	ldr	r3, [pc, #40]	; (8008084 <lwip_netconn_err_to_msg+0x5c>)
 800805a:	e00a      	b.n	8008072 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800805c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d005      	beq.n	8008070 <lwip_netconn_err_to_msg+0x48>
 8008064:	4b08      	ldr	r3, [pc, #32]	; (8008088 <lwip_netconn_err_to_msg+0x60>)
 8008066:	227d      	movs	r2, #125	; 0x7d
 8008068:	4908      	ldr	r1, [pc, #32]	; (800808c <lwip_netconn_err_to_msg+0x64>)
 800806a:	4809      	ldr	r0, [pc, #36]	; (8008090 <lwip_netconn_err_to_msg+0x68>)
 800806c:	f00c ff3a 	bl	8014ee4 <iprintf>
      return NULL;
 8008070:	2300      	movs	r3, #0
  }
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	08019258 	.word	0x08019258
 8008080:	08019259 	.word	0x08019259
 8008084:	0801925a 	.word	0x0801925a
 8008088:	080160c8 	.word	0x080160c8
 800808c:	080160fc 	.word	0x080160fc
 8008090:	0801610c 	.word	0x0801610c

08008094 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d105      	bne.n	80080b0 <lwip_netconn_is_err_msg+0x1c>
 80080a4:	4b12      	ldr	r3, [pc, #72]	; (80080f0 <lwip_netconn_is_err_msg+0x5c>)
 80080a6:	2285      	movs	r2, #133	; 0x85
 80080a8:	4912      	ldr	r1, [pc, #72]	; (80080f4 <lwip_netconn_is_err_msg+0x60>)
 80080aa:	4813      	ldr	r0, [pc, #76]	; (80080f8 <lwip_netconn_is_err_msg+0x64>)
 80080ac:	f00c ff1a 	bl	8014ee4 <iprintf>

  if (msg == &netconn_aborted) {
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a12      	ldr	r2, [pc, #72]	; (80080fc <lwip_netconn_is_err_msg+0x68>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d104      	bne.n	80080c2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	22f3      	movs	r2, #243	; 0xf3
 80080bc:	701a      	strb	r2, [r3, #0]
    return 1;
 80080be:	2301      	movs	r3, #1
 80080c0:	e012      	b.n	80080e8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a0e      	ldr	r2, [pc, #56]	; (8008100 <lwip_netconn_is_err_msg+0x6c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d104      	bne.n	80080d4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	22f2      	movs	r2, #242	; 0xf2
 80080ce:	701a      	strb	r2, [r3, #0]
    return 1;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e009      	b.n	80080e8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a0b      	ldr	r2, [pc, #44]	; (8008104 <lwip_netconn_is_err_msg+0x70>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d104      	bne.n	80080e6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	22f1      	movs	r2, #241	; 0xf1
 80080e0:	701a      	strb	r2, [r3, #0]
    return 1;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e000      	b.n	80080e8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	080160c8 	.word	0x080160c8
 80080f4:	08016134 	.word	0x08016134
 80080f8:	0801610c 	.word	0x0801610c
 80080fc:	08019258 	.word	0x08019258
 8008100:	08019259 	.word	0x08019259
 8008104:	0801925a 	.word	0x0801925a

08008108 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d105      	bne.n	8008128 <recv_udp+0x20>
 800811c:	4b34      	ldr	r3, [pc, #208]	; (80081f0 <recv_udp+0xe8>)
 800811e:	22e5      	movs	r2, #229	; 0xe5
 8008120:	4934      	ldr	r1, [pc, #208]	; (80081f4 <recv_udp+0xec>)
 8008122:	4835      	ldr	r0, [pc, #212]	; (80081f8 <recv_udp+0xf0>)
 8008124:	f00c fede 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d105      	bne.n	800813a <recv_udp+0x32>
 800812e:	4b30      	ldr	r3, [pc, #192]	; (80081f0 <recv_udp+0xe8>)
 8008130:	22e6      	movs	r2, #230	; 0xe6
 8008132:	4932      	ldr	r1, [pc, #200]	; (80081fc <recv_udp+0xf4>)
 8008134:	4830      	ldr	r0, [pc, #192]	; (80081f8 <recv_udp+0xf0>)
 8008136:	f00c fed5 	bl	8014ee4 <iprintf>
  conn = (struct netconn *)arg;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d103      	bne.n	800814c <recv_udp+0x44>
    pbuf_free(p);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f002 ff75 	bl	800b034 <pbuf_free>
    return;
 800814a:	e04d      	b.n	80081e8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	429a      	cmp	r2, r3
 8008154:	d005      	beq.n	8008162 <recv_udp+0x5a>
 8008156:	4b26      	ldr	r3, [pc, #152]	; (80081f0 <recv_udp+0xe8>)
 8008158:	22ee      	movs	r2, #238	; 0xee
 800815a:	4929      	ldr	r1, [pc, #164]	; (8008200 <recv_udp+0xf8>)
 800815c:	4826      	ldr	r0, [pc, #152]	; (80081f8 <recv_udp+0xf0>)
 800815e:	f00c fec1 	bl	8014ee4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	3310      	adds	r3, #16
 8008166:	4618      	mov	r0, r3
 8008168:	f00c fb93 	bl	8014892 <sys_mbox_valid>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d103      	bne.n	800817a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f002 ff5e 	bl	800b034 <pbuf_free>
    return;
 8008178:	e036      	b.n	80081e8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800817a:	2006      	movs	r0, #6
 800817c:	f002 f8c8 	bl	800a310 <memp_malloc>
 8008180:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d103      	bne.n	8008190 <recv_udp+0x88>
    pbuf_free(p);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f002 ff53 	bl	800b034 <pbuf_free>
    return;
 800818e:	e02b      	b.n	80081e8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <recv_udp+0xa0>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	e000      	b.n	80081aa <recv_udp+0xa2>
 80081a8:	2300      	movs	r3, #0
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80081b2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	891b      	ldrh	r3, [r3, #8]
 80081b8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	3310      	adds	r3, #16
 80081be:	69b9      	ldr	r1, [r7, #24]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f00c faf1 	bl	80147a8 <sys_mbox_trypost>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <recv_udp+0xcc>
    netbuf_delete(buf);
 80081cc:	69b8      	ldr	r0, [r7, #24]
 80081ce:	f001 f97d 	bl	80094cc <netbuf_delete>
    return;
 80081d2:	e009      	b.n	80081e8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <recv_udp+0xe0>
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	8afa      	ldrh	r2, [r7, #22]
 80081e2:	2100      	movs	r1, #0
 80081e4:	69f8      	ldr	r0, [r7, #28]
 80081e6:	4798      	blx	r3
  }
}
 80081e8:	3720      	adds	r7, #32
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	080160c8 	.word	0x080160c8
 80081f4:	08016140 	.word	0x08016140
 80081f8:	0801610c 	.word	0x0801610c
 80081fc:	08016164 	.word	0x08016164
 8008200:	08016184 	.word	0x08016184

08008204 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d106      	bne.n	8008226 <recv_tcp+0x22>
 8008218:	4b36      	ldr	r3, [pc, #216]	; (80082f4 <recv_tcp+0xf0>)
 800821a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800821e:	4936      	ldr	r1, [pc, #216]	; (80082f8 <recv_tcp+0xf4>)
 8008220:	4836      	ldr	r0, [pc, #216]	; (80082fc <recv_tcp+0xf8>)
 8008222:	f00c fe5f 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d106      	bne.n	800823a <recv_tcp+0x36>
 800822c:	4b31      	ldr	r3, [pc, #196]	; (80082f4 <recv_tcp+0xf0>)
 800822e:	f240 122d 	movw	r2, #301	; 0x12d
 8008232:	4933      	ldr	r1, [pc, #204]	; (8008300 <recv_tcp+0xfc>)
 8008234:	4831      	ldr	r0, [pc, #196]	; (80082fc <recv_tcp+0xf8>)
 8008236:	f00c fe55 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800823a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d006      	beq.n	8008250 <recv_tcp+0x4c>
 8008242:	4b2c      	ldr	r3, [pc, #176]	; (80082f4 <recv_tcp+0xf0>)
 8008244:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008248:	492e      	ldr	r1, [pc, #184]	; (8008304 <recv_tcp+0x100>)
 800824a:	482c      	ldr	r0, [pc, #176]	; (80082fc <recv_tcp+0xf8>)
 800824c:	f00c fe4a 	bl	8014ee4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d102      	bne.n	8008260 <recv_tcp+0x5c>
    return ERR_VAL;
 800825a:	f06f 0305 	mvn.w	r3, #5
 800825e:	e045      	b.n	80082ec <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	429a      	cmp	r2, r3
 8008268:	d006      	beq.n	8008278 <recv_tcp+0x74>
 800826a:	4b22      	ldr	r3, [pc, #136]	; (80082f4 <recv_tcp+0xf0>)
 800826c:	f240 1235 	movw	r2, #309	; 0x135
 8008270:	4925      	ldr	r1, [pc, #148]	; (8008308 <recv_tcp+0x104>)
 8008272:	4822      	ldr	r0, [pc, #136]	; (80082fc <recv_tcp+0xf8>)
 8008274:	f00c fe36 	bl	8014ee4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	3310      	adds	r3, #16
 800827c:	4618      	mov	r0, r3
 800827e:	f00c fb08 	bl	8014892 <sys_mbox_valid>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10d      	bne.n	80082a4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d008      	beq.n	80082a0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	891b      	ldrh	r3, [r3, #8]
 8008292:	4619      	mov	r1, r3
 8008294:	68b8      	ldr	r0, [r7, #8]
 8008296:	f003 fdcb 	bl	800be30 <tcp_recved>
      pbuf_free(p);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f002 feca 	bl	800b034 <pbuf_free>
    }
    return ERR_OK;
 80082a0:	2300      	movs	r3, #0
 80082a2:	e023      	b.n	80082ec <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d005      	beq.n	80082b6 <recv_tcp+0xb2>
    msg = p;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	891b      	ldrh	r3, [r3, #8]
 80082b2:	83fb      	strh	r3, [r7, #30]
 80082b4:	e003      	b.n	80082be <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80082b6:	4b15      	ldr	r3, [pc, #84]	; (800830c <recv_tcp+0x108>)
 80082b8:	61bb      	str	r3, [r7, #24]
    len = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	3310      	adds	r3, #16
 80082c2:	69b9      	ldr	r1, [r7, #24]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f00c fa6f 	bl	80147a8 <sys_mbox_trypost>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80082d0:	f04f 33ff 	mov.w	r3, #4294967295
 80082d4:	e00a      	b.n	80082ec <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d005      	beq.n	80082ea <recv_tcp+0xe6>
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	8bfa      	ldrh	r2, [r7, #30]
 80082e4:	2100      	movs	r1, #0
 80082e6:	6978      	ldr	r0, [r7, #20]
 80082e8:	4798      	blx	r3
  }

  return ERR_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3720      	adds	r7, #32
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	080160c8 	.word	0x080160c8
 80082f8:	080161a4 	.word	0x080161a4
 80082fc:	0801610c 	.word	0x0801610c
 8008300:	080161c8 	.word	0x080161c8
 8008304:	080161e8 	.word	0x080161e8
 8008308:	08016200 	.word	0x08016200
 800830c:	0801925a 	.word	0x0801925a

08008310 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d106      	bne.n	8008332 <poll_tcp+0x22>
 8008324:	4b29      	ldr	r3, [pc, #164]	; (80083cc <poll_tcp+0xbc>)
 8008326:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800832a:	4929      	ldr	r1, [pc, #164]	; (80083d0 <poll_tcp+0xc0>)
 800832c:	4829      	ldr	r0, [pc, #164]	; (80083d4 <poll_tcp+0xc4>)
 800832e:	f00c fdd9 	bl	8014ee4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d104      	bne.n	8008344 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800833a:	2101      	movs	r1, #1
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 fe59 	bl	8008ff4 <lwip_netconn_do_writemore>
 8008342:	e016      	b.n	8008372 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	785b      	ldrb	r3, [r3, #1]
 8008348:	2b04      	cmp	r3, #4
 800834a:	d112      	bne.n	8008372 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00a      	beq.n	800836a <poll_tcp+0x5a>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6a1b      	ldr	r3, [r3, #32]
 8008358:	7a5b      	ldrb	r3, [r3, #9]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d005      	beq.n	800836a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	7a5a      	ldrb	r2, [r3, #9]
 8008364:	3a01      	subs	r2, #1
 8008366:	b2d2      	uxtb	r2, r2
 8008368:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800836a:	2101      	movs	r1, #1
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 fb3b 	bl	80089e8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	7f1b      	ldrb	r3, [r3, #28]
 8008376:	f003 0310 	and.w	r3, r3, #16
 800837a:	2b00      	cmp	r3, #0
 800837c:	d021      	beq.n	80083c2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d01d      	beq.n	80083c2 <poll_tcp+0xb2>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800838e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008392:	d316      	bcc.n	80083c2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800839c:	2b04      	cmp	r3, #4
 800839e:	d810      	bhi.n	80083c2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	7f1b      	ldrb	r3, [r3, #28]
 80083a4:	f023 0310 	bic.w	r3, r3, #16
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <poll_tcp+0xb2>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	2200      	movs	r2, #0
 80083bc:	2102      	movs	r1, #2
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	080160c8 	.word	0x080160c8
 80083d0:	08016220 	.word	0x08016220
 80083d4:	0801610c 	.word	0x0801610c

080083d8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d106      	bne.n	80083fe <sent_tcp+0x26>
 80083f0:	4b20      	ldr	r3, [pc, #128]	; (8008474 <sent_tcp+0x9c>)
 80083f2:	f240 1293 	movw	r2, #403	; 0x193
 80083f6:	4920      	ldr	r1, [pc, #128]	; (8008478 <sent_tcp+0xa0>)
 80083f8:	4820      	ldr	r0, [pc, #128]	; (800847c <sent_tcp+0xa4>)
 80083fa:	f00c fd73 	bl	8014ee4 <iprintf>

  if (conn) {
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d032      	beq.n	800846a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	785b      	ldrb	r3, [r3, #1]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d104      	bne.n	8008416 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800840c:	2101      	movs	r1, #1
 800840e:	6978      	ldr	r0, [r7, #20]
 8008410:	f000 fdf0 	bl	8008ff4 <lwip_netconn_do_writemore>
 8008414:	e007      	b.n	8008426 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	2b04      	cmp	r3, #4
 800841c:	d103      	bne.n	8008426 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800841e:	2101      	movs	r1, #1
 8008420:	6978      	ldr	r0, [r7, #20]
 8008422:	f000 fae1 	bl	80089e8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d01d      	beq.n	800846a <sent_tcp+0x92>
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008436:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800843a:	d316      	bcc.n	800846a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008444:	2b04      	cmp	r3, #4
 8008446:	d810      	bhi.n	800846a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	7f1b      	ldrb	r3, [r3, #28]
 800844c:	f023 0310 	bic.w	r3, r3, #16
 8008450:	b2da      	uxtb	r2, r3
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	2b00      	cmp	r3, #0
 800845c:	d005      	beq.n	800846a <sent_tcp+0x92>
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	88fa      	ldrh	r2, [r7, #6]
 8008464:	2102      	movs	r1, #2
 8008466:	6978      	ldr	r0, [r7, #20]
 8008468:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	080160c8 	.word	0x080160c8
 8008478:	08016220 	.word	0x08016220
 800847c:	0801610c 	.word	0x0801610c

08008480 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	460b      	mov	r3, r1
 800848a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d106      	bne.n	80084a4 <err_tcp+0x24>
 8008496:	4b5f      	ldr	r3, [pc, #380]	; (8008614 <err_tcp+0x194>)
 8008498:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800849c:	495e      	ldr	r1, [pc, #376]	; (8008618 <err_tcp+0x198>)
 800849e:	485f      	ldr	r0, [pc, #380]	; (800861c <err_tcp+0x19c>)
 80084a0:	f00c fd20 	bl	8014ee4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80084a4:	f00c fb10 	bl	8014ac8 <sys_arch_protect>
 80084a8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	2200      	movs	r2, #0
 80084ae:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	7f1b      	ldrb	r3, [r3, #28]
 80084ba:	f043 0301 	orr.w	r3, r3, #1
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	785b      	ldrb	r3, [r3, #1]
 80084c8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	2200      	movs	r2, #0
 80084ce:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80084d0:	69b8      	ldr	r0, [r7, #24]
 80084d2:	f00c fb07 	bl	8014ae4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d005      	beq.n	80084ea <err_tcp+0x6a>
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	2200      	movs	r2, #0
 80084e4:	2104      	movs	r1, #4
 80084e6:	69f8      	ldr	r0, [r7, #28]
 80084e8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d005      	beq.n	80084fe <err_tcp+0x7e>
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	2200      	movs	r2, #0
 80084f8:	2100      	movs	r1, #0
 80084fa:	69f8      	ldr	r0, [r7, #28]
 80084fc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	2b00      	cmp	r3, #0
 8008504:	d005      	beq.n	8008512 <err_tcp+0x92>
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	2200      	movs	r2, #0
 800850c:	2102      	movs	r1, #2
 800850e:	69f8      	ldr	r0, [r7, #28]
 8008510:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008516:	4618      	mov	r0, r3
 8008518:	f7ff fd86 	bl	8008028 <lwip_netconn_err_to_msg>
 800851c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	3310      	adds	r3, #16
 8008522:	4618      	mov	r0, r3
 8008524:	f00c f9b5 	bl	8014892 <sys_mbox_valid>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	3310      	adds	r3, #16
 8008532:	6939      	ldr	r1, [r7, #16]
 8008534:	4618      	mov	r0, r3
 8008536:	f00c f937 	bl	80147a8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	3314      	adds	r3, #20
 800853e:	4618      	mov	r0, r3
 8008540:	f00c f9a7 	bl	8014892 <sys_mbox_valid>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d005      	beq.n	8008556 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	3314      	adds	r3, #20
 800854e:	6939      	ldr	r1, [r7, #16]
 8008550:	4618      	mov	r0, r3
 8008552:	f00c f929 	bl	80147a8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d005      	beq.n	8008568 <err_tcp+0xe8>
 800855c:	7dfb      	ldrb	r3, [r7, #23]
 800855e:	2b04      	cmp	r3, #4
 8008560:	d002      	beq.n	8008568 <err_tcp+0xe8>
 8008562:	7dfb      	ldrb	r3, [r7, #23]
 8008564:	2b03      	cmp	r3, #3
 8008566:	d143      	bne.n	80085f0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	7f1b      	ldrb	r3, [r3, #28]
 800856c:	f003 0304 	and.w	r3, r3, #4
 8008570:	2b00      	cmp	r3, #0
 8008572:	bf14      	ite	ne
 8008574:	2301      	movne	r3, #1
 8008576:	2300      	moveq	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	7f1b      	ldrb	r3, [r3, #28]
 8008580:	f023 0304 	bic.w	r3, r3, #4
 8008584:	b2da      	uxtb	r2, r3
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d13b      	bne.n	8008608 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d106      	bne.n	80085a6 <err_tcp+0x126>
 8008598:	4b1e      	ldr	r3, [pc, #120]	; (8008614 <err_tcp+0x194>)
 800859a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800859e:	4920      	ldr	r1, [pc, #128]	; (8008620 <err_tcp+0x1a0>)
 80085a0:	481e      	ldr	r0, [pc, #120]	; (800861c <err_tcp+0x19c>)
 80085a2:	f00c fc9f 	bl	8014ee4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80085a6:	7dfb      	ldrb	r3, [r7, #23]
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d104      	bne.n	80085b6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	6a1b      	ldr	r3, [r3, #32]
 80085b0:	2200      	movs	r2, #0
 80085b2:	711a      	strb	r2, [r3, #4]
 80085b4:	e003      	b.n	80085be <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	330c      	adds	r3, #12
 80085c6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80085c8:	68b8      	ldr	r0, [r7, #8]
 80085ca:	f00c f9f3 	bl	80149b4 <sys_sem_valid>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d106      	bne.n	80085e2 <err_tcp+0x162>
 80085d4:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <err_tcp+0x194>)
 80085d6:	f240 12ef 	movw	r2, #495	; 0x1ef
 80085da:	4912      	ldr	r1, [pc, #72]	; (8008624 <err_tcp+0x1a4>)
 80085dc:	480f      	ldr	r0, [pc, #60]	; (800861c <err_tcp+0x19c>)
 80085de:	f00c fc81 	bl	8014ee4 <iprintf>
      conn->current_msg = NULL;
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	2200      	movs	r2, #0
 80085e6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80085e8:	68b8      	ldr	r0, [r7, #8]
 80085ea:	f00c f9c9 	bl	8014980 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80085ee:	e00b      	b.n	8008608 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	6a1b      	ldr	r3, [r3, #32]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d008      	beq.n	800860a <err_tcp+0x18a>
 80085f8:	4b06      	ldr	r3, [pc, #24]	; (8008614 <err_tcp+0x194>)
 80085fa:	f240 12f7 	movw	r2, #503	; 0x1f7
 80085fe:	490a      	ldr	r1, [pc, #40]	; (8008628 <err_tcp+0x1a8>)
 8008600:	4806      	ldr	r0, [pc, #24]	; (800861c <err_tcp+0x19c>)
 8008602:	f00c fc6f 	bl	8014ee4 <iprintf>
  }
}
 8008606:	e000      	b.n	800860a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008608:	bf00      	nop
}
 800860a:	bf00      	nop
 800860c:	3720      	adds	r7, #32
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	080160c8 	.word	0x080160c8
 8008618:	08016220 	.word	0x08016220
 800861c:	0801610c 	.word	0x0801610c
 8008620:	08016230 	.word	0x08016230
 8008624:	0801624c 	.word	0x0801624c
 8008628:	08016268 	.word	0x08016268

0800862c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f004 fabd 	bl	800cbbc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008642:	490a      	ldr	r1, [pc, #40]	; (800866c <setup_tcp+0x40>)
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f004 facb 	bl	800cbe0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800864a:	4909      	ldr	r1, [pc, #36]	; (8008670 <setup_tcp+0x44>)
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f004 fae9 	bl	800cc24 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008652:	2202      	movs	r2, #2
 8008654:	4907      	ldr	r1, [pc, #28]	; (8008674 <setup_tcp+0x48>)
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f004 fb40 	bl	800ccdc <tcp_poll>
  tcp_err(pcb, err_tcp);
 800865c:	4906      	ldr	r1, [pc, #24]	; (8008678 <setup_tcp+0x4c>)
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f004 fb02 	bl	800cc68 <tcp_err>
}
 8008664:	bf00      	nop
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	08008205 	.word	0x08008205
 8008670:	080083d9 	.word	0x080083d9
 8008674:	08008311 	.word	0x08008311
 8008678:	08008481 	.word	0x08008481

0800867c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800867c:	b590      	push	{r4, r7, lr}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008684:	2300      	movs	r3, #0
 8008686:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d006      	beq.n	80086a0 <pcb_new+0x24>
 8008692:	4b2b      	ldr	r3, [pc, #172]	; (8008740 <pcb_new+0xc4>)
 8008694:	f240 2265 	movw	r2, #613	; 0x265
 8008698:	492a      	ldr	r1, [pc, #168]	; (8008744 <pcb_new+0xc8>)
 800869a:	482b      	ldr	r0, [pc, #172]	; (8008748 <pcb_new+0xcc>)
 800869c:	f00c fc22 	bl	8014ee4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086aa:	2b10      	cmp	r3, #16
 80086ac:	d022      	beq.n	80086f4 <pcb_new+0x78>
 80086ae:	2b20      	cmp	r3, #32
 80086b0:	d133      	bne.n	800871a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681c      	ldr	r4, [r3, #0]
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f009 fd44 	bl	8012146 <udp_new_ip_type>
 80086be:	4603      	mov	r3, r0
 80086c0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d02a      	beq.n	8008722 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b22      	cmp	r3, #34	; 0x22
 80086d4:	d104      	bne.n	80086e0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6858      	ldr	r0, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	4917      	ldr	r1, [pc, #92]	; (800874c <pcb_new+0xd0>)
 80086ee:	f009 fcb1 	bl	8012054 <udp_recv>
      }
      break;
 80086f2:	e016      	b.n	8008722 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681c      	ldr	r4, [r3, #0]
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f004 fa50 	bl	800cba0 <tcp_new_ip_type>
 8008700:	4603      	mov	r3, r0
 8008702:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00b      	beq.n	8008726 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4618      	mov	r0, r3
 8008714:	f7ff ff8a 	bl	800862c <setup_tcp>
      }
      break;
 8008718:	e005      	b.n	8008726 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	22fa      	movs	r2, #250	; 0xfa
 800871e:	711a      	strb	r2, [r3, #4]
      return;
 8008720:	e00a      	b.n	8008738 <pcb_new+0xbc>
      break;
 8008722:	bf00      	nop
 8008724:	e000      	b.n	8008728 <pcb_new+0xac>
      break;
 8008726:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	22ff      	movs	r2, #255	; 0xff
 8008736:	711a      	strb	r2, [r3, #4]
  }
}
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	bd90      	pop	{r4, r7, pc}
 800873e:	bf00      	nop
 8008740:	080160c8 	.word	0x080160c8
 8008744:	080162ac 	.word	0x080162ac
 8008748:	0801610c 	.word	0x0801610c
 800874c:	08008109 	.word	0x08008109

08008750 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d102      	bne.n	8008772 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f7ff ff85 	bl	800867c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008772:	bf00      	nop
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
	...

0800877c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800878c:	2007      	movs	r0, #7
 800878e:	f001 fdbf 	bl	800a310 <memp_malloc>
 8008792:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <netconn_alloc+0x22>
    return NULL;
 800879a:	2300      	movs	r3, #0
 800879c:	e052      	b.n	8008844 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	79fa      	ldrb	r2, [r7, #7]
 80087a8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087b6:	2b10      	cmp	r3, #16
 80087b8:	d004      	beq.n	80087c4 <netconn_alloc+0x48>
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	d105      	bne.n	80087ca <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80087be:	2306      	movs	r3, #6
 80087c0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80087c2:	e00a      	b.n	80087da <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80087c4:	2306      	movs	r3, #6
 80087c6:	617b      	str	r3, [r7, #20]
      break;
 80087c8:	e007      	b.n	80087da <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80087ca:	4b20      	ldr	r3, [pc, #128]	; (800884c <netconn_alloc+0xd0>)
 80087cc:	f240 22e5 	movw	r2, #741	; 0x2e5
 80087d0:	491f      	ldr	r1, [pc, #124]	; (8008850 <netconn_alloc+0xd4>)
 80087d2:	4820      	ldr	r0, [pc, #128]	; (8008854 <netconn_alloc+0xd8>)
 80087d4:	f00c fb86 	bl	8014ee4 <iprintf>
      goto free_and_return;
 80087d8:	e02f      	b.n	800883a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3310      	adds	r3, #16
 80087de:	6979      	ldr	r1, [r7, #20]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f00b ffad 	bl	8014740 <sys_mbox_new>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d125      	bne.n	8008838 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	330c      	adds	r3, #12
 80087f0:	2100      	movs	r1, #0
 80087f2:	4618      	mov	r0, r3
 80087f4:	f00c f86b 	bl	80148ce <sys_sem_new>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d005      	beq.n	800880a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3310      	adds	r3, #16
 8008802:	4618      	mov	r0, r3
 8008804:	f00b ffbe 	bl	8014784 <sys_mbox_free>
    goto free_and_return;
 8008808:	e017      	b.n	800883a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3314      	adds	r3, #20
 800880e:	4618      	mov	r0, r3
 8008810:	f00c f850 	bl	80148b4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f04f 32ff 	mov.w	r2, #4294967295
 8008820:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	7cfa      	ldrb	r2, [r7, #19]
 8008832:	771a      	strb	r2, [r3, #28]
  return conn;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	e005      	b.n	8008844 <netconn_alloc+0xc8>
    goto free_and_return;
 8008838:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800883a:	68f9      	ldr	r1, [r7, #12]
 800883c:	2007      	movs	r0, #7
 800883e:	f001 fdb9 	bl	800a3b4 <memp_free>
  return NULL;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	080160c8 	.word	0x080160c8
 8008850:	080162cc 	.word	0x080162cc
 8008854:	0801610c 	.word	0x0801610c

08008858 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d006      	beq.n	8008876 <netconn_free+0x1e>
 8008868:	4b1b      	ldr	r3, [pc, #108]	; (80088d8 <netconn_free+0x80>)
 800886a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800886e:	491b      	ldr	r1, [pc, #108]	; (80088dc <netconn_free+0x84>)
 8008870:	481b      	ldr	r0, [pc, #108]	; (80088e0 <netconn_free+0x88>)
 8008872:	f00c fb37 	bl	8014ee4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3310      	adds	r3, #16
 800887a:	4618      	mov	r0, r3
 800887c:	f00c f809 	bl	8014892 <sys_mbox_valid>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d006      	beq.n	8008894 <netconn_free+0x3c>
 8008886:	4b14      	ldr	r3, [pc, #80]	; (80088d8 <netconn_free+0x80>)
 8008888:	f240 3223 	movw	r2, #803	; 0x323
 800888c:	4915      	ldr	r1, [pc, #84]	; (80088e4 <netconn_free+0x8c>)
 800888e:	4814      	ldr	r0, [pc, #80]	; (80088e0 <netconn_free+0x88>)
 8008890:	f00c fb28 	bl	8014ee4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3314      	adds	r3, #20
 8008898:	4618      	mov	r0, r3
 800889a:	f00b fffa 	bl	8014892 <sys_mbox_valid>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d006      	beq.n	80088b2 <netconn_free+0x5a>
 80088a4:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <netconn_free+0x80>)
 80088a6:	f240 3226 	movw	r2, #806	; 0x326
 80088aa:	490f      	ldr	r1, [pc, #60]	; (80088e8 <netconn_free+0x90>)
 80088ac:	480c      	ldr	r0, [pc, #48]	; (80088e0 <netconn_free+0x88>)
 80088ae:	f00c fb19 	bl	8014ee4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	330c      	adds	r3, #12
 80088b6:	4618      	mov	r0, r3
 80088b8:	f00c f86f 	bl	801499a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	330c      	adds	r3, #12
 80088c0:	4618      	mov	r0, r3
 80088c2:	f00c f888 	bl	80149d6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80088c6:	6879      	ldr	r1, [r7, #4]
 80088c8:	2007      	movs	r0, #7
 80088ca:	f001 fd73 	bl	800a3b4 <memp_free>
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	080160c8 	.word	0x080160c8
 80088dc:	080162f4 	.word	0x080162f4
 80088e0:	0801610c 	.word	0x0801610c
 80088e4:	08016324 	.word	0x08016324
 80088e8:	08016360 	.word	0x08016360

080088ec <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3310      	adds	r3, #16
 80088f8:	4618      	mov	r0, r3
 80088fa:	f00b ffca 	bl	8014892 <sys_mbox_valid>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d02f      	beq.n	8008964 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008904:	e018      	b.n	8008938 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800890e:	2b10      	cmp	r3, #16
 8008910:	d10e      	bne.n	8008930 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f107 020f 	add.w	r2, r7, #15
 8008918:	4611      	mov	r1, r2
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff fbba 	bl	8008094 <lwip_netconn_is_err_msg>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d108      	bne.n	8008938 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	4618      	mov	r0, r3
 800892a:	f002 fb83 	bl	800b034 <pbuf_free>
 800892e:	e003      	b.n	8008938 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	4618      	mov	r0, r3
 8008934:	f000 fdca 	bl	80094cc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3310      	adds	r3, #16
 800893c:	f107 0210 	add.w	r2, r7, #16
 8008940:	4611      	mov	r1, r2
 8008942:	4618      	mov	r0, r3
 8008944:	f00b ff89 	bl	801485a <sys_arch_mbox_tryfetch>
 8008948:	4603      	mov	r3, r0
 800894a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894e:	d1da      	bne.n	8008906 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3310      	adds	r3, #16
 8008954:	4618      	mov	r0, r3
 8008956:	f00b ff15 	bl	8014784 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3310      	adds	r3, #16
 800895e:	4618      	mov	r0, r3
 8008960:	f00b ffa8 	bl	80148b4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3314      	adds	r3, #20
 8008968:	4618      	mov	r0, r3
 800896a:	f00b ff92 	bl	8014892 <sys_mbox_valid>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d034      	beq.n	80089de <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008974:	e01d      	b.n	80089b2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f107 020e 	add.w	r2, r7, #14
 800897c:	4611      	mov	r1, r2
 800897e:	4618      	mov	r0, r3
 8008980:	f7ff fb88 	bl	8008094 <lwip_netconn_is_err_msg>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d113      	bne.n	80089b2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800898e:	6978      	ldr	r0, [r7, #20]
 8008990:	f7ff ffac 	bl	80088ec <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d007      	beq.n	80089ac <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f003 f947 	bl	800bc34 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2200      	movs	r2, #0
 80089aa:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80089ac:	6978      	ldr	r0, [r7, #20]
 80089ae:	f7ff ff53 	bl	8008858 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3314      	adds	r3, #20
 80089b6:	f107 0210 	add.w	r2, r7, #16
 80089ba:	4611      	mov	r1, r2
 80089bc:	4618      	mov	r0, r3
 80089be:	f00b ff4c 	bl	801485a <sys_arch_mbox_tryfetch>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c8:	d1d5      	bne.n	8008976 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3314      	adds	r3, #20
 80089ce:	4618      	mov	r0, r3
 80089d0:	f00b fed8 	bl	8014784 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3314      	adds	r3, #20
 80089d8:	4618      	mov	r0, r3
 80089da:	f00b ff6b 	bl	80148b4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80089de:	bf00      	nop
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d106      	bne.n	8008a0c <lwip_netconn_do_close_internal+0x24>
 80089fe:	4ba1      	ldr	r3, [pc, #644]	; (8008c84 <lwip_netconn_do_close_internal+0x29c>)
 8008a00:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008a04:	49a0      	ldr	r1, [pc, #640]	; (8008c88 <lwip_netconn_do_close_internal+0x2a0>)
 8008a06:	48a1      	ldr	r0, [pc, #644]	; (8008c8c <lwip_netconn_do_close_internal+0x2a4>)
 8008a08:	f00c fa6c 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a14:	2b10      	cmp	r3, #16
 8008a16:	d006      	beq.n	8008a26 <lwip_netconn_do_close_internal+0x3e>
 8008a18:	4b9a      	ldr	r3, [pc, #616]	; (8008c84 <lwip_netconn_do_close_internal+0x29c>)
 8008a1a:	f240 32a3 	movw	r2, #931	; 0x3a3
 8008a1e:	499c      	ldr	r1, [pc, #624]	; (8008c90 <lwip_netconn_do_close_internal+0x2a8>)
 8008a20:	489a      	ldr	r0, [pc, #616]	; (8008c8c <lwip_netconn_do_close_internal+0x2a4>)
 8008a22:	f00c fa5f 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	785b      	ldrb	r3, [r3, #1]
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d006      	beq.n	8008a3c <lwip_netconn_do_close_internal+0x54>
 8008a2e:	4b95      	ldr	r3, [pc, #596]	; (8008c84 <lwip_netconn_do_close_internal+0x29c>)
 8008a30:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8008a34:	4997      	ldr	r1, [pc, #604]	; (8008c94 <lwip_netconn_do_close_internal+0x2ac>)
 8008a36:	4895      	ldr	r0, [pc, #596]	; (8008c8c <lwip_netconn_do_close_internal+0x2a4>)
 8008a38:	f00c fa54 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d106      	bne.n	8008a52 <lwip_netconn_do_close_internal+0x6a>
 8008a44:	4b8f      	ldr	r3, [pc, #572]	; (8008c84 <lwip_netconn_do_close_internal+0x29c>)
 8008a46:	f240 32a5 	movw	r2, #933	; 0x3a5
 8008a4a:	4993      	ldr	r1, [pc, #588]	; (8008c98 <lwip_netconn_do_close_internal+0x2b0>)
 8008a4c:	488f      	ldr	r0, [pc, #572]	; (8008c8c <lwip_netconn_do_close_internal+0x2a4>)
 8008a4e:	f00c fa49 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d106      	bne.n	8008a68 <lwip_netconn_do_close_internal+0x80>
 8008a5a:	4b8a      	ldr	r3, [pc, #552]	; (8008c84 <lwip_netconn_do_close_internal+0x29c>)
 8008a5c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008a60:	498e      	ldr	r1, [pc, #568]	; (8008c9c <lwip_netconn_do_close_internal+0x2b4>)
 8008a62:	488a      	ldr	r0, [pc, #552]	; (8008c8c <lwip_netconn_do_close_internal+0x2a4>)
 8008a64:	f00c fa3e 	bl	8014ee4 <iprintf>

  tpcb = conn->pcb.tcp;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	7a1b      	ldrb	r3, [r3, #8]
 8008a74:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
 8008a80:	f003 0302 	and.w	r3, r3, #2
 8008a84:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d102      	bne.n	8008a92 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	75bb      	strb	r3, [r7, #22]
 8008a90:	e01f      	b.n	8008ad2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00e      	beq.n	8008ab6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008a9c:	2b05      	cmp	r3, #5
 8008a9e:	d007      	beq.n	8008ab0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008aa4:	2b06      	cmp	r3, #6
 8008aa6:	d003      	beq.n	8008ab0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008aac:	2b08      	cmp	r3, #8
 8008aae:	d102      	bne.n	8008ab6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	75bb      	strb	r3, [r7, #22]
 8008ab4:	e00d      	b.n	8008ad2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008ab6:	7b7b      	ldrb	r3, [r7, #13]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d008      	beq.n	8008ace <lwip_netconn_do_close_internal+0xe6>
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	8b5b      	ldrh	r3, [r3, #26]
 8008ac0:	f003 0310 	and.w	r3, r3, #16
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	75bb      	strb	r3, [r7, #22]
 8008acc:	e001      	b.n	8008ad2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8008ad2:	7dbb      	ldrb	r3, [r7, #22]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d003      	beq.n	8008ae0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008ad8:	2100      	movs	r1, #0
 8008ada:	6938      	ldr	r0, [r7, #16]
 8008adc:	f004 f86e 	bl	800cbbc <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	7d1b      	ldrb	r3, [r3, #20]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d104      	bne.n	8008af2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008ae8:	2100      	movs	r1, #0
 8008aea:	6938      	ldr	r0, [r7, #16]
 8008aec:	f004 f8de 	bl	800ccac <tcp_accept>
 8008af0:	e01d      	b.n	8008b2e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d007      	beq.n	8008b08 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008af8:	2100      	movs	r1, #0
 8008afa:	6938      	ldr	r0, [r7, #16]
 8008afc:	f004 f870 	bl	800cbe0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008b00:	2100      	movs	r1, #0
 8008b02:	6938      	ldr	r0, [r7, #16]
 8008b04:	f004 f8d2 	bl	800ccac <tcp_accept>
    }
    if (shut_tx) {
 8008b08:	7b7b      	ldrb	r3, [r7, #13]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008b0e:	2100      	movs	r1, #0
 8008b10:	6938      	ldr	r0, [r7, #16]
 8008b12:	f004 f887 	bl	800cc24 <tcp_sent>
    }
    if (shut_close) {
 8008b16:	7dbb      	ldrb	r3, [r7, #22]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d008      	beq.n	8008b2e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2100      	movs	r1, #0
 8008b20:	6938      	ldr	r0, [r7, #16]
 8008b22:	f004 f8db 	bl	800ccdc <tcp_poll>
      tcp_err(tpcb, NULL);
 8008b26:	2100      	movs	r1, #0
 8008b28:	6938      	ldr	r0, [r7, #16]
 8008b2a:	f004 f89d 	bl	800cc68 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8008b2e:	7dbb      	ldrb	r3, [r7, #22]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d005      	beq.n	8008b40 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008b34:	6938      	ldr	r0, [r7, #16]
 8008b36:	f002 ff37 	bl	800b9a8 <tcp_close>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]
 8008b3e:	e007      	b.n	8008b50 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	7b7a      	ldrb	r2, [r7, #13]
 8008b44:	4619      	mov	r1, r3
 8008b46:	6938      	ldr	r0, [r7, #16]
 8008b48:	f002 ff5a 	bl	800ba00 <tcp_shutdown>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8008b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d102      	bne.n	8008b5e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	757b      	strb	r3, [r7, #21]
 8008b5c:	e016      	b.n	8008b8c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b66:	d10f      	bne.n	8008b88 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	7a5b      	ldrb	r3, [r3, #9]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10c      	bne.n	8008b8c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8008b72:	2301      	movs	r3, #1
 8008b74:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8008b76:	7dbb      	ldrb	r3, [r7, #22]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d007      	beq.n	8008b8c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008b7c:	6938      	ldr	r0, [r7, #16]
 8008b7e:	f003 f859 	bl	800bc34 <tcp_abort>
          err = ERR_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	75fb      	strb	r3, [r7, #23]
 8008b86:	e001      	b.n	8008b8c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8008b8c:	7d7b      	ldrb	r3, [r7, #21]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d044      	beq.n	8008c1c <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	330c      	adds	r3, #12
 8008b9a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	7dfa      	ldrb	r2, [r7, #23]
 8008ba2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d129      	bne.n	8008c0c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8008bb8:	7dbb      	ldrb	r3, [r7, #22]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00c      	beq.n	8008bd8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d005      	beq.n	8008bd8 <lwip_netconn_do_close_internal+0x1f0>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2104      	movs	r1, #4
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	4798      	blx	r3
      }
      if (shut_rx) {
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d009      	beq.n	8008bf2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d005      	beq.n	8008bf2 <lwip_netconn_do_close_internal+0x20a>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bea:	2200      	movs	r2, #0
 8008bec:	2100      	movs	r1, #0
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	4798      	blx	r3
      }
      if (shut_tx) {
 8008bf2:	7b7b      	ldrb	r3, [r7, #13]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d009      	beq.n	8008c0c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d005      	beq.n	8008c0c <lwip_netconn_do_close_internal+0x224>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	2200      	movs	r2, #0
 8008c06:	2102      	movs	r1, #2
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008c0c:	78fb      	ldrb	r3, [r7, #3]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008c12:	68b8      	ldr	r0, [r7, #8]
 8008c14:	f00b feb4 	bl	8014980 <sys_sem_signal>
    }
    return ERR_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e02e      	b.n	8008c7a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8008c1c:	7d7b      	ldrb	r3, [r7, #21]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d11e      	bne.n	8008c60 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	7d1b      	ldrb	r3, [r3, #20]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d106      	bne.n	8008c38 <lwip_netconn_do_close_internal+0x250>
 8008c2a:	4b16      	ldr	r3, [pc, #88]	; (8008c84 <lwip_netconn_do_close_internal+0x29c>)
 8008c2c:	f240 4241 	movw	r2, #1089	; 0x441
 8008c30:	491b      	ldr	r1, [pc, #108]	; (8008ca0 <lwip_netconn_do_close_internal+0x2b8>)
 8008c32:	4816      	ldr	r0, [pc, #88]	; (8008c8c <lwip_netconn_do_close_internal+0x2a4>)
 8008c34:	f00c f956 	bl	8014ee4 <iprintf>
    if (shut_tx) {
 8008c38:	7b7b      	ldrb	r3, [r7, #13]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8008c3e:	4919      	ldr	r1, [pc, #100]	; (8008ca4 <lwip_netconn_do_close_internal+0x2bc>)
 8008c40:	6938      	ldr	r0, [r7, #16]
 8008c42:	f003 ffef 	bl	800cc24 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8008c46:	2201      	movs	r2, #1
 8008c48:	4917      	ldr	r1, [pc, #92]	; (8008ca8 <lwip_netconn_do_close_internal+0x2c0>)
 8008c4a:	6938      	ldr	r0, [r7, #16]
 8008c4c:	f004 f846 	bl	800ccdc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8008c50:	4916      	ldr	r1, [pc, #88]	; (8008cac <lwip_netconn_do_close_internal+0x2c4>)
 8008c52:	6938      	ldr	r0, [r7, #16]
 8008c54:	f004 f808 	bl	800cc68 <tcp_err>
    tcp_arg(tpcb, conn);
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	6938      	ldr	r0, [r7, #16]
 8008c5c:	f003 ffae 	bl	800cbbc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8008c60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <lwip_netconn_do_close_internal+0x28e>
 8008c68:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <lwip_netconn_do_close_internal+0x29c>)
 8008c6a:	f240 424d 	movw	r2, #1101	; 0x44d
 8008c6e:	4910      	ldr	r1, [pc, #64]	; (8008cb0 <lwip_netconn_do_close_internal+0x2c8>)
 8008c70:	4806      	ldr	r0, [pc, #24]	; (8008c8c <lwip_netconn_do_close_internal+0x2a4>)
 8008c72:	f00c f937 	bl	8014ee4 <iprintf>
  return err;
 8008c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	080160c8 	.word	0x080160c8
 8008c88:	0801639c 	.word	0x0801639c
 8008c8c:	0801610c 	.word	0x0801610c
 8008c90:	080163ac 	.word	0x080163ac
 8008c94:	080163cc 	.word	0x080163cc
 8008c98:	080163f0 	.word	0x080163f0
 8008c9c:	08016230 	.word	0x08016230
 8008ca0:	08016404 	.word	0x08016404
 8008ca4:	080083d9 	.word	0x080083d9
 8008ca8:	08008311 	.word	0x08008311
 8008cac:	08008481 	.word	0x08008481
 8008cb0:	08016428 	.word	0x08016428

08008cb4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	785b      	ldrb	r3, [r3, #1]
 8008cc6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008cc8:	7afb      	ldrb	r3, [r7, #11]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00d      	beq.n	8008cea <lwip_netconn_do_delconn+0x36>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cd8:	2b10      	cmp	r3, #16
 8008cda:	d006      	beq.n	8008cea <lwip_netconn_do_delconn+0x36>
 8008cdc:	4b60      	ldr	r3, [pc, #384]	; (8008e60 <lwip_netconn_do_delconn+0x1ac>)
 8008cde:	f240 425e 	movw	r2, #1118	; 0x45e
 8008ce2:	4960      	ldr	r1, [pc, #384]	; (8008e64 <lwip_netconn_do_delconn+0x1b0>)
 8008ce4:	4860      	ldr	r0, [pc, #384]	; (8008e68 <lwip_netconn_do_delconn+0x1b4>)
 8008ce6:	f00c f8fd 	bl	8014ee4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8008cea:	7afb      	ldrb	r3, [r7, #11]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <lwip_netconn_do_delconn+0x48>
 8008cf0:	7afb      	ldrb	r3, [r7, #11]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d002      	beq.n	8008cfc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8008cf6:	7afb      	ldrb	r3, [r7, #11]
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d109      	bne.n	8008d10 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8008cfc:	7afb      	ldrb	r3, [r7, #11]
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d10a      	bne.n	8008d18 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	7f1b      	ldrb	r3, [r3, #28]
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d103      	bne.n	8008d18 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	22fb      	movs	r2, #251	; 0xfb
 8008d14:	711a      	strb	r2, [r3, #4]
 8008d16:	e097      	b.n	8008e48 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8008d18:	7afb      	ldrb	r3, [r7, #11]
 8008d1a:	2b03      	cmp	r3, #3
 8008d1c:	d10d      	bne.n	8008d3a <lwip_netconn_do_delconn+0x86>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	7f1b      	ldrb	r3, [r3, #28]
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d106      	bne.n	8008d3a <lwip_netconn_do_delconn+0x86>
 8008d2c:	4b4c      	ldr	r3, [pc, #304]	; (8008e60 <lwip_netconn_do_delconn+0x1ac>)
 8008d2e:	f240 427a 	movw	r2, #1146	; 0x47a
 8008d32:	494e      	ldr	r1, [pc, #312]	; (8008e6c <lwip_netconn_do_delconn+0x1b8>)
 8008d34:	484c      	ldr	r0, [pc, #304]	; (8008e68 <lwip_netconn_do_delconn+0x1b4>)
 8008d36:	f00c f8d5 	bl	8014ee4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7ff fdd1 	bl	80088ec <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d05f      	beq.n	8008e14 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d5e:	2b10      	cmp	r3, #16
 8008d60:	d00d      	beq.n	8008d7e <lwip_netconn_do_delconn+0xca>
 8008d62:	2b20      	cmp	r3, #32
 8008d64:	d151      	bne.n	8008e0a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f009 f98c 	bl	8012094 <udp_remove>
          break;
 8008d7c:	e046      	b.n	8008e0c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d006      	beq.n	8008d96 <lwip_netconn_do_delconn+0xe2>
 8008d88:	4b35      	ldr	r3, [pc, #212]	; (8008e60 <lwip_netconn_do_delconn+0x1ac>)
 8008d8a:	f240 4294 	movw	r2, #1172	; 0x494
 8008d8e:	4938      	ldr	r1, [pc, #224]	; (8008e70 <lwip_netconn_do_delconn+0x1bc>)
 8008d90:	4835      	ldr	r0, [pc, #212]	; (8008e68 <lwip_netconn_do_delconn+0x1b4>)
 8008d92:	f00c f8a7 	bl	8014ee4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2204      	movs	r2, #4
 8008d9c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2203      	movs	r2, #3
 8008da2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2100      	movs	r1, #0
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7ff fe18 	bl	80089e8 <lwip_netconn_do_close_internal>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d04b      	beq.n	8008e56 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	785b      	ldrb	r3, [r3, #1]
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	d006      	beq.n	8008dd6 <lwip_netconn_do_delconn+0x122>
 8008dc8:	4b25      	ldr	r3, [pc, #148]	; (8008e60 <lwip_netconn_do_delconn+0x1ac>)
 8008dca:	f240 429a 	movw	r2, #1178	; 0x49a
 8008dce:	4929      	ldr	r1, [pc, #164]	; (8008e74 <lwip_netconn_do_delconn+0x1c0>)
 8008dd0:	4825      	ldr	r0, [pc, #148]	; (8008e68 <lwip_netconn_do_delconn+0x1b4>)
 8008dd2:	f00c f887 	bl	8014ee4 <iprintf>
            UNLOCK_TCPIP_CORE();
 8008dd6:	4828      	ldr	r0, [pc, #160]	; (8008e78 <lwip_netconn_do_delconn+0x1c4>)
 8008dd8:	f00b fe43 	bl	8014a62 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	330c      	adds	r3, #12
 8008de2:	2100      	movs	r1, #0
 8008de4:	4618      	mov	r0, r3
 8008de6:	f00b fd9a 	bl	801491e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8008dea:	4823      	ldr	r0, [pc, #140]	; (8008e78 <lwip_netconn_do_delconn+0x1c4>)
 8008dec:	f00b fe2a 	bl	8014a44 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	785b      	ldrb	r3, [r3, #1]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d02d      	beq.n	8008e56 <lwip_netconn_do_delconn+0x1a2>
 8008dfa:	4b19      	ldr	r3, [pc, #100]	; (8008e60 <lwip_netconn_do_delconn+0x1ac>)
 8008dfc:	f240 429e 	movw	r2, #1182	; 0x49e
 8008e00:	491c      	ldr	r1, [pc, #112]	; (8008e74 <lwip_netconn_do_delconn+0x1c0>)
 8008e02:	4819      	ldr	r0, [pc, #100]	; (8008e68 <lwip_netconn_do_delconn+0x1b4>)
 8008e04:	f00c f86e 	bl	8014ee4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8008e08:	e025      	b.n	8008e56 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8008e0a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2200      	movs	r2, #0
 8008e12:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d007      	beq.n	8008e2e <lwip_netconn_do_delconn+0x17a>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	6810      	ldr	r0, [r2, #0]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d007      	beq.n	8008e48 <lwip_netconn_do_delconn+0x194>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	6810      	ldr	r0, [r2, #0]
 8008e42:	2200      	movs	r2, #0
 8008e44:	2102      	movs	r1, #2
 8008e46:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	330c      	adds	r3, #12
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f00b fdb0 	bl	80149b4 <sys_sem_valid>
 8008e54:	e000      	b.n	8008e58 <lwip_netconn_do_delconn+0x1a4>
          return;
 8008e56:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	080160c8 	.word	0x080160c8
 8008e64:	08016438 	.word	0x08016438
 8008e68:	0801610c 	.word	0x0801610c
 8008e6c:	0801644c 	.word	0x0801644c
 8008e70:	0801646c 	.word	0x0801646c
 8008e74:	08016488 	.word	0x08016488
 8008e78:	20009c14 	.word	0x20009c14

08008e7c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d025      	beq.n	8008ede <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e9c:	2b10      	cmp	r3, #16
 8008e9e:	d00e      	beq.n	8008ebe <lwip_netconn_do_bind+0x42>
 8008ea0:	2b20      	cmp	r3, #32
 8008ea2:	d119      	bne.n	8008ed8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6858      	ldr	r0, [r3, #4]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	6899      	ldr	r1, [r3, #8]
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	899b      	ldrh	r3, [r3, #12]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f009 f846 	bl	8011f44 <udp_bind>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]
        break;
 8008ebc:	e011      	b.n	8008ee2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6858      	ldr	r0, [r3, #4]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	6899      	ldr	r1, [r3, #8]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	899b      	ldrh	r3, [r3, #12]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	f002 febd 	bl	800bc4c <tcp_bind>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	73fb      	strb	r3, [r7, #15]
        break;
 8008ed6:	e004      	b.n	8008ee2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8008ed8:	23fa      	movs	r3, #250	; 0xfa
 8008eda:	73fb      	strb	r3, [r7, #15]
        break;
 8008edc:	e001      	b.n	8008ee2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8008ede:	23fa      	movs	r3, #250	; 0xfa
 8008ee0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	7bfa      	ldrb	r2, [r7, #15]
 8008ee6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8008ee8:	bf00      	nop
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7ff f875 	bl	8007ff0 <netconn_err>
 8008f06:	4603      	mov	r3, r0
 8008f08:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d134      	bne.n	8008f7c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d02d      	beq.n	8008f78 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f26:	2b20      	cmp	r3, #32
 8008f28:	d123      	bne.n	8008f72 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10c      	bne.n	8008f4e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4619      	mov	r1, r3
 8008f42:	4610      	mov	r0, r2
 8008f44:	f008 fe14 	bl	8011b70 <udp_send>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8008f4c:	e016      	b.n	8008f7c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6858      	ldr	r0, [r3, #4]
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	6819      	ldr	r1, [r3, #0]
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f103 0208 	add.w	r2, r3, #8
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	899b      	ldrh	r3, [r3, #12]
 8008f68:	f008 fe36 	bl	8011bd8 <udp_sendto>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]
          break;
 8008f70:	e004      	b.n	8008f7c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8008f72:	23f5      	movs	r3, #245	; 0xf5
 8008f74:	73fb      	strb	r3, [r7, #15]
          break;
 8008f76:	e001      	b.n	8008f7c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8008f78:	23f5      	movs	r3, #245	; 0xf5
 8008f7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	7bfa      	ldrb	r2, [r7, #15]
 8008f80:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8008f82:	bf00      	nop
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b086      	sub	sp, #24
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d022      	beq.n	8008fec <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fb0:	2b10      	cmp	r3, #16
 8008fb2:	d11b      	bne.n	8008fec <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fc0:	d202      	bcs.n	8008fc8 <lwip_netconn_do_recv+0x3e>
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	e001      	b.n	8008fcc <lwip_netconn_do_recv+0x42>
 8008fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008fcc:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	89fa      	ldrh	r2, [r7, #14]
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f002 ff29 	bl	800be30 <tcp_recved>
        remaining -= recved;
 8008fde:	89fb      	ldrh	r3, [r7, #14]
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e6      	bne.n	8008fba <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8008fec:	bf00      	nop
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d106      	bne.n	8009018 <lwip_netconn_do_writemore+0x24>
 800900a:	4b96      	ldr	r3, [pc, #600]	; (8009264 <lwip_netconn_do_writemore+0x270>)
 800900c:	f240 6273 	movw	r2, #1651	; 0x673
 8009010:	4995      	ldr	r1, [pc, #596]	; (8009268 <lwip_netconn_do_writemore+0x274>)
 8009012:	4896      	ldr	r0, [pc, #600]	; (800926c <lwip_netconn_do_writemore+0x278>)
 8009014:	f00b ff66 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	785b      	ldrb	r3, [r3, #1]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d006      	beq.n	800902e <lwip_netconn_do_writemore+0x3a>
 8009020:	4b90      	ldr	r3, [pc, #576]	; (8009264 <lwip_netconn_do_writemore+0x270>)
 8009022:	f240 6274 	movw	r2, #1652	; 0x674
 8009026:	4992      	ldr	r1, [pc, #584]	; (8009270 <lwip_netconn_do_writemore+0x27c>)
 8009028:	4890      	ldr	r0, [pc, #576]	; (800926c <lwip_netconn_do_writemore+0x278>)
 800902a:	f00b ff5b 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d106      	bne.n	8009044 <lwip_netconn_do_writemore+0x50>
 8009036:	4b8b      	ldr	r3, [pc, #556]	; (8009264 <lwip_netconn_do_writemore+0x270>)
 8009038:	f240 6275 	movw	r2, #1653	; 0x675
 800903c:	498d      	ldr	r1, [pc, #564]	; (8009274 <lwip_netconn_do_writemore+0x280>)
 800903e:	488b      	ldr	r0, [pc, #556]	; (800926c <lwip_netconn_do_writemore+0x278>)
 8009040:	f00b ff50 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d106      	bne.n	800905a <lwip_netconn_do_writemore+0x66>
 800904c:	4b85      	ldr	r3, [pc, #532]	; (8009264 <lwip_netconn_do_writemore+0x270>)
 800904e:	f240 6276 	movw	r2, #1654	; 0x676
 8009052:	4989      	ldr	r1, [pc, #548]	; (8009278 <lwip_netconn_do_writemore+0x284>)
 8009054:	4885      	ldr	r0, [pc, #532]	; (800926c <lwip_netconn_do_writemore+0x278>)
 8009056:	f00b ff45 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	699a      	ldr	r2, [r3, #24]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	429a      	cmp	r2, r3
 8009068:	d306      	bcc.n	8009078 <lwip_netconn_do_writemore+0x84>
 800906a:	4b7e      	ldr	r3, [pc, #504]	; (8009264 <lwip_netconn_do_writemore+0x270>)
 800906c:	f240 6277 	movw	r2, #1655	; 0x677
 8009070:	4982      	ldr	r1, [pc, #520]	; (800927c <lwip_netconn_do_writemore+0x288>)
 8009072:	487e      	ldr	r0, [pc, #504]	; (800926c <lwip_netconn_do_writemore+0x278>)
 8009074:	f00b ff36 	bl	8014ee4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a1b      	ldr	r3, [r3, #32]
 800907c:	899b      	ldrh	r3, [r3, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d106      	bne.n	8009090 <lwip_netconn_do_writemore+0x9c>
 8009082:	4b78      	ldr	r3, [pc, #480]	; (8009264 <lwip_netconn_do_writemore+0x270>)
 8009084:	f240 6279 	movw	r2, #1657	; 0x679
 8009088:	497d      	ldr	r1, [pc, #500]	; (8009280 <lwip_netconn_do_writemore+0x28c>)
 800908a:	4878      	ldr	r0, [pc, #480]	; (800926c <lwip_netconn_do_writemore+0x278>)
 800908c:	f00b ff2a 	bl	8014ee4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a1b      	ldr	r3, [r3, #32]
 8009094:	7f1b      	ldrb	r3, [r3, #28]
 8009096:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	7f1b      	ldrb	r3, [r3, #28]
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d104      	bne.n	80090ae <lwip_netconn_do_writemore+0xba>
 80090a4:	7ebb      	ldrb	r3, [r7, #26]
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <lwip_netconn_do_writemore+0xbe>
 80090ae:	2301      	movs	r3, #1
 80090b0:	e000      	b.n	80090b4 <lwip_netconn_do_writemore+0xc0>
 80090b2:	2300      	movs	r3, #0
 80090b4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	4413      	add	r3, r2
 80090c6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a1b      	ldr	r3, [r3, #32]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090e0:	d307      	bcc.n	80090f2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80090e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090e6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80090e8:	7ebb      	ldrb	r3, [r7, #26]
 80090ea:	f043 0302 	orr.w	r3, r3, #2
 80090ee:	76bb      	strb	r3, [r7, #26]
 80090f0:	e001      	b.n	80090f6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80090fe:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009100:	89fa      	ldrh	r2, [r7, #14]
 8009102:	8bbb      	ldrh	r3, [r7, #28]
 8009104:	429a      	cmp	r2, r3
 8009106:	d216      	bcs.n	8009136 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009108:	89fb      	ldrh	r3, [r7, #14]
 800910a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800910c:	7e3b      	ldrb	r3, [r7, #24]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00d      	beq.n	800912e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009112:	8bbb      	ldrh	r3, [r7, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10e      	bne.n	8009136 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d102      	bne.n	8009128 <lwip_netconn_do_writemore+0x134>
 8009122:	f06f 0306 	mvn.w	r3, #6
 8009126:	e000      	b.n	800912a <lwip_netconn_do_writemore+0x136>
 8009128:	2300      	movs	r3, #0
 800912a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800912c:	e07d      	b.n	800922a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800912e:	7ebb      	ldrb	r3, [r7, #26]
 8009130:	f043 0302 	orr.w	r3, r3, #2
 8009134:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	691a      	ldr	r2, [r3, #16]
 800913c:	8bbb      	ldrh	r3, [r7, #28]
 800913e:	441a      	add	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	429a      	cmp	r2, r3
 800914a:	d906      	bls.n	800915a <lwip_netconn_do_writemore+0x166>
 800914c:	4b45      	ldr	r3, [pc, #276]	; (8009264 <lwip_netconn_do_writemore+0x270>)
 800914e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8009152:	494c      	ldr	r1, [pc, #304]	; (8009284 <lwip_netconn_do_writemore+0x290>)
 8009154:	4845      	ldr	r0, [pc, #276]	; (800926c <lwip_netconn_do_writemore+0x278>)
 8009156:	f00b fec5 	bl	8014ee4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800915a:	8bbb      	ldrh	r3, [r7, #28]
 800915c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009160:	4293      	cmp	r3, r2
 8009162:	d103      	bne.n	800916c <lwip_netconn_do_writemore+0x178>
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800916a:	d209      	bcs.n	8009180 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009170:	8bba      	ldrh	r2, [r7, #28]
 8009172:	429a      	cmp	r2, r3
 8009174:	d10b      	bne.n	800918e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	899b      	ldrh	r3, [r3, #12]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d906      	bls.n	800918e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009180:	2301      	movs	r3, #1
 8009182:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009184:	7ebb      	ldrb	r3, [r7, #26]
 8009186:	f043 0302 	orr.w	r3, r3, #2
 800918a:	76bb      	strb	r3, [r7, #26]
 800918c:	e001      	b.n	8009192 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6858      	ldr	r0, [r3, #4]
 8009196:	7ebb      	ldrb	r3, [r7, #26]
 8009198:	8bba      	ldrh	r2, [r7, #28]
 800919a:	6979      	ldr	r1, [r7, #20]
 800919c:	f006 fc4c 	bl	800fa38 <tcp_write>
 80091a0:	4603      	mov	r3, r0
 80091a2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80091a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d12c      	bne.n	8009206 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	6999      	ldr	r1, [r3, #24]
 80091b2:	8bba      	ldrh	r2, [r7, #28]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	440a      	add	r2, r1
 80091ba:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a1b      	ldr	r3, [r3, #32]
 80091c0:	6919      	ldr	r1, [r3, #16]
 80091c2:	8bba      	ldrh	r2, [r7, #28]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a1b      	ldr	r3, [r3, #32]
 80091c8:	440a      	add	r2, r1
 80091ca:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a1b      	ldr	r3, [r3, #32]
 80091d0:	691a      	ldr	r2, [r3, #16]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d113      	bne.n	8009206 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	899a      	ldrh	r2, [r3, #12]
 80091e4:	3a01      	subs	r2, #1
 80091e6:	b292      	uxth	r2, r2
 80091e8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	899b      	ldrh	r3, [r3, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d008      	beq.n	8009206 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	3208      	adds	r2, #8
 80091fc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	2200      	movs	r2, #0
 8009204:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009206:	7e7b      	ldrb	r3, [r7, #25]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d004      	beq.n	8009216 <lwip_netconn_do_writemore+0x222>
 800920c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009210:	2b00      	cmp	r3, #0
 8009212:	f43f af50 	beq.w	80090b6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009216:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d004      	beq.n	8009228 <lwip_netconn_do_writemore+0x234>
 800921e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009226:	d146      	bne.n	80092b6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009228:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800922a:	7e3b      	ldrb	r3, [r7, #24]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d02b      	beq.n	8009288 <lwip_netconn_do_writemore+0x294>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	699a      	ldr	r2, [r3, #24]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	429a      	cmp	r2, r3
 800923e:	d223      	bcs.n	8009288 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <lwip_netconn_do_writemore+0x260>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924c:	2200      	movs	r2, #0
 800924e:	2103      	movs	r1, #3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	7f1b      	ldrb	r3, [r3, #28]
 8009258:	f043 0310 	orr.w	r3, r3, #16
 800925c:	b2da      	uxtb	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	771a      	strb	r2, [r3, #28]
 8009262:	e028      	b.n	80092b6 <lwip_netconn_do_writemore+0x2c2>
 8009264:	080160c8 	.word	0x080160c8
 8009268:	08016220 	.word	0x08016220
 800926c:	0801610c 	.word	0x0801610c
 8009270:	08016528 	.word	0x08016528
 8009274:	08016230 	.word	0x08016230
 8009278:	08016548 	.word	0x08016548
 800927c:	08016560 	.word	0x08016560
 8009280:	080165a0 	.word	0x080165a0
 8009284:	080165c8 	.word	0x080165c8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009290:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009294:	d305      	bcc.n	80092a2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d909      	bls.n	80092b6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d005      	beq.n	80092b6 <lwip_netconn_do_writemore+0x2c2>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	2200      	movs	r2, #0
 80092b0:	2103      	movs	r1, #3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80092b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d11d      	bne.n	80092fa <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	699a      	ldr	r2, [r3, #24]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a1b      	ldr	r3, [r3, #32]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d002      	beq.n	80092d4 <lwip_netconn_do_writemore+0x2e0>
 80092ce:	7e3b      	ldrb	r3, [r7, #24]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80092d4:	2301      	movs	r3, #1
 80092d6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	4618      	mov	r0, r3
 80092de:	f007 f995 	bl	801060c <tcp_output>
 80092e2:	4603      	mov	r3, r0
 80092e4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80092e6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80092ea:	f113 0f04 	cmn.w	r3, #4
 80092ee:	d12c      	bne.n	800934a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80092f0:	7b3b      	ldrb	r3, [r7, #12]
 80092f2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80092f4:	2301      	movs	r3, #1
 80092f6:	76fb      	strb	r3, [r7, #27]
 80092f8:	e027      	b.n	800934a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 80092fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80092fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009302:	d120      	bne.n	8009346 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	4618      	mov	r0, r3
 800930a:	f007 f97f 	bl	801060c <tcp_output>
 800930e:	4603      	mov	r3, r0
 8009310:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009312:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009316:	f113 0f04 	cmn.w	r3, #4
 800931a:	d104      	bne.n	8009326 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800931c:	7b7b      	ldrb	r3, [r7, #13]
 800931e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009320:	2301      	movs	r3, #1
 8009322:	76fb      	strb	r3, [r7, #27]
 8009324:	e011      	b.n	800934a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009326:	7e3b      	ldrb	r3, [r7, #24]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00e      	beq.n	800934a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d102      	bne.n	800933c <lwip_netconn_do_writemore+0x348>
 8009336:	f06f 0306 	mvn.w	r3, #6
 800933a:	e000      	b.n	800933e <lwip_netconn_do_writemore+0x34a>
 800933c:	2300      	movs	r3, #0
 800933e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009340:	2301      	movs	r3, #1
 8009342:	76fb      	strb	r3, [r7, #27]
 8009344:	e001      	b.n	800934a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009346:	2301      	movs	r3, #1
 8009348:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800934a:	7efb      	ldrb	r3, [r7, #27]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d015      	beq.n	800937c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	330c      	adds	r3, #12
 8009358:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	7ffa      	ldrb	r2, [r7, #31]
 8009360:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800936e:	78fb      	ldrb	r3, [r7, #3]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d006      	beq.n	8009382 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009374:	68b8      	ldr	r0, [r7, #8]
 8009376:	f00b fb03 	bl	8014980 <sys_sem_signal>
 800937a:	e002      	b.n	8009382 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800937c:	f04f 33ff 	mov.w	r3, #4294967295
 8009380:	e000      	b.n	8009384 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3720      	adds	r7, #32
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	785b      	ldrb	r3, [r3, #1]
 800939e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d069      	beq.n	800947e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80093b4:	2b10      	cmp	r3, #16
 80093b6:	d162      	bne.n	800947e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80093bc:	2b03      	cmp	r3, #3
 80093be:	d002      	beq.n	80093c6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80093c0:	7afb      	ldrb	r3, [r7, #11]
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d05b      	beq.n	800947e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80093c6:	7afb      	ldrb	r3, [r7, #11]
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	d103      	bne.n	80093d4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	22f5      	movs	r2, #245	; 0xf5
 80093d0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80093d2:	e059      	b.n	8009488 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80093d4:	7afb      	ldrb	r3, [r7, #11]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d103      	bne.n	80093e2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	22fb      	movs	r2, #251	; 0xfb
 80093de:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80093e0:	e052      	b.n	8009488 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	7a1b      	ldrb	r3, [r3, #8]
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d004      	beq.n	80093f8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7ff fa7a 	bl	80088ec <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d006      	beq.n	8009410 <lwip_netconn_do_close+0x84>
 8009402:	4b23      	ldr	r3, [pc, #140]	; (8009490 <lwip_netconn_do_close+0x104>)
 8009404:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009408:	4922      	ldr	r1, [pc, #136]	; (8009494 <lwip_netconn_do_close+0x108>)
 800940a:	4823      	ldr	r0, [pc, #140]	; (8009498 <lwip_netconn_do_close+0x10c>)
 800940c:	f00b fd6a 	bl	8014ee4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2204      	movs	r2, #4
 8009416:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2100      	movs	r1, #0
 8009426:	4618      	mov	r0, r3
 8009428:	f7ff fade 	bl	80089e8 <lwip_netconn_do_close_internal>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d029      	beq.n	8009486 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	785b      	ldrb	r3, [r3, #1]
 8009438:	2b04      	cmp	r3, #4
 800943a:	d006      	beq.n	800944a <lwip_netconn_do_close+0xbe>
 800943c:	4b14      	ldr	r3, [pc, #80]	; (8009490 <lwip_netconn_do_close+0x104>)
 800943e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009442:	4916      	ldr	r1, [pc, #88]	; (800949c <lwip_netconn_do_close+0x110>)
 8009444:	4814      	ldr	r0, [pc, #80]	; (8009498 <lwip_netconn_do_close+0x10c>)
 8009446:	f00b fd4d 	bl	8014ee4 <iprintf>
        UNLOCK_TCPIP_CORE();
 800944a:	4815      	ldr	r0, [pc, #84]	; (80094a0 <lwip_netconn_do_close+0x114>)
 800944c:	f00b fb09 	bl	8014a62 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	330c      	adds	r3, #12
 8009456:	2100      	movs	r1, #0
 8009458:	4618      	mov	r0, r3
 800945a:	f00b fa60 	bl	801491e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800945e:	4810      	ldr	r0, [pc, #64]	; (80094a0 <lwip_netconn_do_close+0x114>)
 8009460:	f00b faf0 	bl	8014a44 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	785b      	ldrb	r3, [r3, #1]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00b      	beq.n	8009486 <lwip_netconn_do_close+0xfa>
 800946e:	4b08      	ldr	r3, [pc, #32]	; (8009490 <lwip_netconn_do_close+0x104>)
 8009470:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009474:	4909      	ldr	r1, [pc, #36]	; (800949c <lwip_netconn_do_close+0x110>)
 8009476:	4808      	ldr	r0, [pc, #32]	; (8009498 <lwip_netconn_do_close+0x10c>)
 8009478:	f00b fd34 	bl	8014ee4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800947c:	e003      	b.n	8009486 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	22f5      	movs	r2, #245	; 0xf5
 8009482:	711a      	strb	r2, [r3, #4]
 8009484:	e000      	b.n	8009488 <lwip_netconn_do_close+0xfc>
      return;
 8009486:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	080160c8 	.word	0x080160c8
 8009494:	0801646c 	.word	0x0801646c
 8009498:	0801610c 	.word	0x0801610c
 800949c:	08016488 	.word	0x08016488
 80094a0:	20009c14 	.word	0x20009c14

080094a4 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80094aa:	2006      	movs	r0, #6
 80094ac:	f000 ff30 	bl	800a310 <memp_malloc>
 80094b0:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d004      	beq.n	80094c2 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 80094b8:	2210      	movs	r2, #16
 80094ba:	2100      	movs	r1, #0
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f00b fc5f 	bl	8014d80 <memset>
  }
  return buf;
 80094c2:	687b      	ldr	r3, [r7, #4]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d013      	beq.n	8009502 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00b      	beq.n	80094fa <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f001 fda4 	bl	800b034 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	605a      	str	r2, [r3, #4]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	2006      	movs	r0, #6
 80094fe:	f000 ff59 	bl	800a3b4 <memp_free>
  }
}
 8009502:	bf00      	nop
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	4613      	mov	r3, r2
 8009518:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d108      	bne.n	8009532 <netbuf_ref+0x26>
 8009520:	4b1c      	ldr	r3, [pc, #112]	; (8009594 <netbuf_ref+0x88>)
 8009522:	2299      	movs	r2, #153	; 0x99
 8009524:	491c      	ldr	r1, [pc, #112]	; (8009598 <netbuf_ref+0x8c>)
 8009526:	481d      	ldr	r0, [pc, #116]	; (800959c <netbuf_ref+0x90>)
 8009528:	f00b fcdc 	bl	8014ee4 <iprintf>
 800952c:	f06f 030f 	mvn.w	r3, #15
 8009530:	e02b      	b.n	800958a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d004      	beq.n	8009544 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4618      	mov	r0, r3
 8009540:	f001 fd78 	bl	800b034 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8009544:	2241      	movs	r2, #65	; 0x41
 8009546:	2100      	movs	r1, #0
 8009548:	2036      	movs	r0, #54	; 0x36
 800954a:	f001 fa8f 	bl	800aa6c <pbuf_alloc>
 800954e:	4602      	mov	r2, r0
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d105      	bne.n	8009568 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8009562:	f04f 33ff 	mov.w	r3, #4294967295
 8009566:	e010      	b.n	800958a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	88fa      	ldrh	r2, [r7, #6]
 8009576:	811a      	strh	r2, [r3, #8]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	6812      	ldr	r2, [r2, #0]
 800957c:	891b      	ldrh	r3, [r3, #8]
 800957e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	08016620 	.word	0x08016620
 8009598:	080166d8 	.word	0x080166d8
 800959c:	08016670 	.word	0x08016670

080095a0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d108      	bne.n	80095c4 <netbuf_data+0x24>
 80095b2:	4b1b      	ldr	r3, [pc, #108]	; (8009620 <netbuf_data+0x80>)
 80095b4:	22c6      	movs	r2, #198	; 0xc6
 80095b6:	491b      	ldr	r1, [pc, #108]	; (8009624 <netbuf_data+0x84>)
 80095b8:	481b      	ldr	r0, [pc, #108]	; (8009628 <netbuf_data+0x88>)
 80095ba:	f00b fc93 	bl	8014ee4 <iprintf>
 80095be:	f06f 030f 	mvn.w	r3, #15
 80095c2:	e029      	b.n	8009618 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d108      	bne.n	80095dc <netbuf_data+0x3c>
 80095ca:	4b15      	ldr	r3, [pc, #84]	; (8009620 <netbuf_data+0x80>)
 80095cc:	22c7      	movs	r2, #199	; 0xc7
 80095ce:	4917      	ldr	r1, [pc, #92]	; (800962c <netbuf_data+0x8c>)
 80095d0:	4815      	ldr	r0, [pc, #84]	; (8009628 <netbuf_data+0x88>)
 80095d2:	f00b fc87 	bl	8014ee4 <iprintf>
 80095d6:	f06f 030f 	mvn.w	r3, #15
 80095da:	e01d      	b.n	8009618 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d108      	bne.n	80095f4 <netbuf_data+0x54>
 80095e2:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <netbuf_data+0x80>)
 80095e4:	22c8      	movs	r2, #200	; 0xc8
 80095e6:	4912      	ldr	r1, [pc, #72]	; (8009630 <netbuf_data+0x90>)
 80095e8:	480f      	ldr	r0, [pc, #60]	; (8009628 <netbuf_data+0x88>)
 80095ea:	f00b fc7b 	bl	8014ee4 <iprintf>
 80095ee:	f06f 030f 	mvn.w	r3, #15
 80095f2:	e011      	b.n	8009618 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d102      	bne.n	8009602 <netbuf_data+0x62>
    return ERR_BUF;
 80095fc:	f06f 0301 	mvn.w	r3, #1
 8009600:	e00a      	b.n	8009618 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	895a      	ldrh	r2, [r3, #10]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	08016620 	.word	0x08016620
 8009624:	08016728 	.word	0x08016728
 8009628:	08016670 	.word	0x08016670
 800962c:	08016744 	.word	0x08016744
 8009630:	08016764 	.word	0x08016764

08009634 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800963e:	f008 f89d 	bl	801177c <sys_timeouts_sleeptime>
 8009642:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964a:	d10b      	bne.n	8009664 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800964c:	4813      	ldr	r0, [pc, #76]	; (800969c <tcpip_timeouts_mbox_fetch+0x68>)
 800964e:	f00b fa08 	bl	8014a62 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009652:	2200      	movs	r2, #0
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f00b f8c0 	bl	80147dc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800965c:	480f      	ldr	r0, [pc, #60]	; (800969c <tcpip_timeouts_mbox_fetch+0x68>)
 800965e:	f00b f9f1 	bl	8014a44 <sys_mutex_lock>
    return;
 8009662:	e018      	b.n	8009696 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d102      	bne.n	8009670 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800966a:	f008 f84d 	bl	8011708 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800966e:	e7e6      	b.n	800963e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009670:	480a      	ldr	r0, [pc, #40]	; (800969c <tcpip_timeouts_mbox_fetch+0x68>)
 8009672:	f00b f9f6 	bl	8014a62 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f00b f8ae 	bl	80147dc <sys_arch_mbox_fetch>
 8009680:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009682:	4806      	ldr	r0, [pc, #24]	; (800969c <tcpip_timeouts_mbox_fetch+0x68>)
 8009684:	f00b f9de 	bl	8014a44 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	d102      	bne.n	8009696 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009690:	f008 f83a 	bl	8011708 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009694:	e7d3      	b.n	800963e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	20009c14 	.word	0x20009c14

080096a0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80096a8:	4810      	ldr	r0, [pc, #64]	; (80096ec <tcpip_thread+0x4c>)
 80096aa:	f00b f9cb 	bl	8014a44 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80096ae:	4b10      	ldr	r3, [pc, #64]	; (80096f0 <tcpip_thread+0x50>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80096b6:	4b0e      	ldr	r3, [pc, #56]	; (80096f0 <tcpip_thread+0x50>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a0e      	ldr	r2, [pc, #56]	; (80096f4 <tcpip_thread+0x54>)
 80096bc:	6812      	ldr	r2, [r2, #0]
 80096be:	4610      	mov	r0, r2
 80096c0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80096c2:	f107 030c 	add.w	r3, r7, #12
 80096c6:	4619      	mov	r1, r3
 80096c8:	480b      	ldr	r0, [pc, #44]	; (80096f8 <tcpip_thread+0x58>)
 80096ca:	f7ff ffb3 	bl	8009634 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d106      	bne.n	80096e2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80096d4:	4b09      	ldr	r3, [pc, #36]	; (80096fc <tcpip_thread+0x5c>)
 80096d6:	2291      	movs	r2, #145	; 0x91
 80096d8:	4909      	ldr	r1, [pc, #36]	; (8009700 <tcpip_thread+0x60>)
 80096da:	480a      	ldr	r0, [pc, #40]	; (8009704 <tcpip_thread+0x64>)
 80096dc:	f00b fc02 	bl	8014ee4 <iprintf>
      continue;
 80096e0:	e003      	b.n	80096ea <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 f80f 	bl	8009708 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80096ea:	e7ea      	b.n	80096c2 <tcpip_thread+0x22>
 80096ec:	20009c14 	.word	0x20009c14
 80096f0:	200067f4 	.word	0x200067f4
 80096f4:	200067f8 	.word	0x200067f8
 80096f8:	200067fc 	.word	0x200067fc
 80096fc:	080167b8 	.word	0x080167b8
 8009700:	080167e8 	.word	0x080167e8
 8009704:	08016808 	.word	0x08016808

08009708 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	2b02      	cmp	r3, #2
 8009716:	d026      	beq.n	8009766 <tcpip_thread_handle_msg+0x5e>
 8009718:	2b02      	cmp	r3, #2
 800971a:	dc2b      	bgt.n	8009774 <tcpip_thread_handle_msg+0x6c>
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <tcpip_thread_handle_msg+0x1e>
 8009720:	2b01      	cmp	r3, #1
 8009722:	d015      	beq.n	8009750 <tcpip_thread_handle_msg+0x48>
 8009724:	e026      	b.n	8009774 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	6850      	ldr	r0, [r2, #4]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	6892      	ldr	r2, [r2, #8]
 8009732:	4611      	mov	r1, r2
 8009734:	4798      	blx	r3
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d004      	beq.n	8009746 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	4618      	mov	r0, r3
 8009742:	f001 fc77 	bl	800b034 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	2009      	movs	r0, #9
 800974a:	f000 fe33 	bl	800a3b4 <memp_free>
      break;
 800974e:	e018      	b.n	8009782 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	6892      	ldr	r2, [r2, #8]
 8009758:	4610      	mov	r0, r2
 800975a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	2008      	movs	r0, #8
 8009760:	f000 fe28 	bl	800a3b4 <memp_free>
      break;
 8009764:	e00d      	b.n	8009782 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	6892      	ldr	r2, [r2, #8]
 800976e:	4610      	mov	r0, r2
 8009770:	4798      	blx	r3
      break;
 8009772:	e006      	b.n	8009782 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009774:	4b05      	ldr	r3, [pc, #20]	; (800978c <tcpip_thread_handle_msg+0x84>)
 8009776:	22cf      	movs	r2, #207	; 0xcf
 8009778:	4905      	ldr	r1, [pc, #20]	; (8009790 <tcpip_thread_handle_msg+0x88>)
 800977a:	4806      	ldr	r0, [pc, #24]	; (8009794 <tcpip_thread_handle_msg+0x8c>)
 800977c:	f00b fbb2 	bl	8014ee4 <iprintf>
      break;
 8009780:	bf00      	nop
  }
}
 8009782:	bf00      	nop
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	080167b8 	.word	0x080167b8
 8009790:	080167e8 	.word	0x080167e8
 8009794:	08016808 	.word	0x08016808

08009798 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80097a4:	481a      	ldr	r0, [pc, #104]	; (8009810 <tcpip_inpkt+0x78>)
 80097a6:	f00b f874 	bl	8014892 <sys_mbox_valid>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d105      	bne.n	80097bc <tcpip_inpkt+0x24>
 80097b0:	4b18      	ldr	r3, [pc, #96]	; (8009814 <tcpip_inpkt+0x7c>)
 80097b2:	22fc      	movs	r2, #252	; 0xfc
 80097b4:	4918      	ldr	r1, [pc, #96]	; (8009818 <tcpip_inpkt+0x80>)
 80097b6:	4819      	ldr	r0, [pc, #100]	; (800981c <tcpip_inpkt+0x84>)
 80097b8:	f00b fb94 	bl	8014ee4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80097bc:	2009      	movs	r0, #9
 80097be:	f000 fda7 	bl	800a310 <memp_malloc>
 80097c2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d102      	bne.n	80097d0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80097ca:	f04f 33ff 	mov.w	r3, #4294967295
 80097ce:	e01a      	b.n	8009806 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2200      	movs	r2, #0
 80097d4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80097e8:	6979      	ldr	r1, [r7, #20]
 80097ea:	4809      	ldr	r0, [pc, #36]	; (8009810 <tcpip_inpkt+0x78>)
 80097ec:	f00a ffdc 	bl	80147a8 <sys_mbox_trypost>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d006      	beq.n	8009804 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80097f6:	6979      	ldr	r1, [r7, #20]
 80097f8:	2009      	movs	r0, #9
 80097fa:	f000 fddb 	bl	800a3b4 <memp_free>
    return ERR_MEM;
 80097fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009802:	e000      	b.n	8009806 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009804:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	200067fc 	.word	0x200067fc
 8009814:	080167b8 	.word	0x080167b8
 8009818:	08016830 	.word	0x08016830
 800981c:	08016808 	.word	0x08016808

08009820 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009830:	f003 0318 	and.w	r3, r3, #24
 8009834:	2b00      	cmp	r3, #0
 8009836:	d006      	beq.n	8009846 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009838:	4a08      	ldr	r2, [pc, #32]	; (800985c <tcpip_input+0x3c>)
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7ff ffab 	bl	8009798 <tcpip_inpkt>
 8009842:	4603      	mov	r3, r0
 8009844:	e005      	b.n	8009852 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009846:	4a06      	ldr	r2, [pc, #24]	; (8009860 <tcpip_input+0x40>)
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff ffa4 	bl	8009798 <tcpip_inpkt>
 8009850:	4603      	mov	r3, r0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	08014595 	.word	0x08014595
 8009860:	080134a9 	.word	0x080134a9

08009864 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800986e:	4819      	ldr	r0, [pc, #100]	; (80098d4 <tcpip_try_callback+0x70>)
 8009870:	f00b f80f 	bl	8014892 <sys_mbox_valid>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <tcpip_try_callback+0x24>
 800987a:	4b17      	ldr	r3, [pc, #92]	; (80098d8 <tcpip_try_callback+0x74>)
 800987c:	f240 125d 	movw	r2, #349	; 0x15d
 8009880:	4916      	ldr	r1, [pc, #88]	; (80098dc <tcpip_try_callback+0x78>)
 8009882:	4817      	ldr	r0, [pc, #92]	; (80098e0 <tcpip_try_callback+0x7c>)
 8009884:	f00b fb2e 	bl	8014ee4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009888:	2008      	movs	r0, #8
 800988a:	f000 fd41 	bl	800a310 <memp_malloc>
 800988e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d102      	bne.n	800989c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009896:	f04f 33ff 	mov.w	r3, #4294967295
 800989a:	e017      	b.n	80098cc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2201      	movs	r2, #1
 80098a0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80098ae:	68f9      	ldr	r1, [r7, #12]
 80098b0:	4808      	ldr	r0, [pc, #32]	; (80098d4 <tcpip_try_callback+0x70>)
 80098b2:	f00a ff79 	bl	80147a8 <sys_mbox_trypost>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d006      	beq.n	80098ca <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80098bc:	68f9      	ldr	r1, [r7, #12]
 80098be:	2008      	movs	r0, #8
 80098c0:	f000 fd78 	bl	800a3b4 <memp_free>
    return ERR_MEM;
 80098c4:	f04f 33ff 	mov.w	r3, #4294967295
 80098c8:	e000      	b.n	80098cc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	200067fc 	.word	0x200067fc
 80098d8:	080167b8 	.word	0x080167b8
 80098dc:	08016830 	.word	0x08016830
 80098e0:	08016808 	.word	0x08016808

080098e4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80098f0:	4806      	ldr	r0, [pc, #24]	; (800990c <tcpip_send_msg_wait_sem+0x28>)
 80098f2:	f00b f8a7 	bl	8014a44 <sys_mutex_lock>
  fn(apimsg);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	68b8      	ldr	r0, [r7, #8]
 80098fa:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80098fc:	4803      	ldr	r0, [pc, #12]	; (800990c <tcpip_send_msg_wait_sem+0x28>)
 80098fe:	f00b f8b0 	bl	8014a62 <sys_mutex_unlock>
  return ERR_OK;
 8009902:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	20009c14 	.word	0x20009c14

08009910 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af02      	add	r7, sp, #8
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  lwip_init();
 800991a:	f000 f871 	bl	8009a00 <lwip_init>

  tcpip_init_done = initfunc;
 800991e:	4a17      	ldr	r2, [pc, #92]	; (800997c <tcpip_init+0x6c>)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009924:	4a16      	ldr	r2, [pc, #88]	; (8009980 <tcpip_init+0x70>)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800992a:	2106      	movs	r1, #6
 800992c:	4815      	ldr	r0, [pc, #84]	; (8009984 <tcpip_init+0x74>)
 800992e:	f00a ff07 	bl	8014740 <sys_mbox_new>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d006      	beq.n	8009946 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009938:	4b13      	ldr	r3, [pc, #76]	; (8009988 <tcpip_init+0x78>)
 800993a:	f240 2261 	movw	r2, #609	; 0x261
 800993e:	4913      	ldr	r1, [pc, #76]	; (800998c <tcpip_init+0x7c>)
 8009940:	4813      	ldr	r0, [pc, #76]	; (8009990 <tcpip_init+0x80>)
 8009942:	f00b facf 	bl	8014ee4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009946:	4813      	ldr	r0, [pc, #76]	; (8009994 <tcpip_init+0x84>)
 8009948:	f00b f860 	bl	8014a0c <sys_mutex_new>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d006      	beq.n	8009960 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009952:	4b0d      	ldr	r3, [pc, #52]	; (8009988 <tcpip_init+0x78>)
 8009954:	f240 2265 	movw	r2, #613	; 0x265
 8009958:	490f      	ldr	r1, [pc, #60]	; (8009998 <tcpip_init+0x88>)
 800995a:	480d      	ldr	r0, [pc, #52]	; (8009990 <tcpip_init+0x80>)
 800995c:	f00b fac2 	bl	8014ee4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009960:	2300      	movs	r3, #0
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009968:	2200      	movs	r2, #0
 800996a:	490c      	ldr	r1, [pc, #48]	; (800999c <tcpip_init+0x8c>)
 800996c:	480c      	ldr	r0, [pc, #48]	; (80099a0 <tcpip_init+0x90>)
 800996e:	f00b f885 	bl	8014a7c <sys_thread_new>
}
 8009972:	bf00      	nop
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	200067f4 	.word	0x200067f4
 8009980:	200067f8 	.word	0x200067f8
 8009984:	200067fc 	.word	0x200067fc
 8009988:	080167b8 	.word	0x080167b8
 800998c:	08016840 	.word	0x08016840
 8009990:	08016808 	.word	0x08016808
 8009994:	20009c14 	.word	0x20009c14
 8009998:	08016864 	.word	0x08016864
 800999c:	080096a1 	.word	0x080096a1
 80099a0:	08016888 	.word	0x08016888

080099a4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80099ae:	88fb      	ldrh	r3, [r7, #6]
 80099b0:	021b      	lsls	r3, r3, #8
 80099b2:	b21a      	sxth	r2, r3
 80099b4:	88fb      	ldrh	r3, [r7, #6]
 80099b6:	0a1b      	lsrs	r3, r3, #8
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	b21b      	sxth	r3, r3
 80099bc:	4313      	orrs	r3, r2
 80099be:	b21b      	sxth	r3, r3
 80099c0:	b29b      	uxth	r3, r3
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	370c      	adds	r7, #12
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	061a      	lsls	r2, r3, #24
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	021b      	lsls	r3, r3, #8
 80099de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099e2:	431a      	orrs	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	0a1b      	lsrs	r3, r3, #8
 80099e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80099ec:	431a      	orrs	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	0e1b      	lsrs	r3, r3, #24
 80099f2:	4313      	orrs	r3, r2
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009a06:	2300      	movs	r3, #0
 8009a08:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009a0a:	f00a fff1 	bl	80149f0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009a0e:	f000 f8d5 	bl	8009bbc <mem_init>
  memp_init();
 8009a12:	f000 fc31 	bl	800a278 <memp_init>
  pbuf_init();
  netif_init();
 8009a16:	f000 fcf7 	bl	800a408 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009a1a:	f007 fee7 	bl	80117ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009a1e:	f001 fdb3 	bl	800b588 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009a22:	f007 fe29 	bl	8011678 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009a26:	bf00      	nop
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	4603      	mov	r3, r0
 8009a38:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009a3a:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <ptr_to_mem+0x20>)
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	88fb      	ldrh	r3, [r7, #6]
 8009a40:	4413      	add	r3, r2
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	20006800 	.word	0x20006800

08009a54 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009a5c:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <mem_to_ptr+0x20>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	b29b      	uxth	r3, r3
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	20006800 	.word	0x20006800

08009a78 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009a80:	4b45      	ldr	r3, [pc, #276]	; (8009b98 <plug_holes+0x120>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d206      	bcs.n	8009a98 <plug_holes+0x20>
 8009a8a:	4b44      	ldr	r3, [pc, #272]	; (8009b9c <plug_holes+0x124>)
 8009a8c:	f240 12df 	movw	r2, #479	; 0x1df
 8009a90:	4943      	ldr	r1, [pc, #268]	; (8009ba0 <plug_holes+0x128>)
 8009a92:	4844      	ldr	r0, [pc, #272]	; (8009ba4 <plug_holes+0x12c>)
 8009a94:	f00b fa26 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009a98:	4b43      	ldr	r3, [pc, #268]	; (8009ba8 <plug_holes+0x130>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d306      	bcc.n	8009ab0 <plug_holes+0x38>
 8009aa2:	4b3e      	ldr	r3, [pc, #248]	; (8009b9c <plug_holes+0x124>)
 8009aa4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009aa8:	4940      	ldr	r1, [pc, #256]	; (8009bac <plug_holes+0x134>)
 8009aaa:	483e      	ldr	r0, [pc, #248]	; (8009ba4 <plug_holes+0x12c>)
 8009aac:	f00b fa1a 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	791b      	ldrb	r3, [r3, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d006      	beq.n	8009ac6 <plug_holes+0x4e>
 8009ab8:	4b38      	ldr	r3, [pc, #224]	; (8009b9c <plug_holes+0x124>)
 8009aba:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009abe:	493c      	ldr	r1, [pc, #240]	; (8009bb0 <plug_holes+0x138>)
 8009ac0:	4838      	ldr	r0, [pc, #224]	; (8009ba4 <plug_holes+0x12c>)
 8009ac2:	f00b fa0f 	bl	8014ee4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	881b      	ldrh	r3, [r3, #0]
 8009aca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ace:	d906      	bls.n	8009ade <plug_holes+0x66>
 8009ad0:	4b32      	ldr	r3, [pc, #200]	; (8009b9c <plug_holes+0x124>)
 8009ad2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009ad6:	4937      	ldr	r1, [pc, #220]	; (8009bb4 <plug_holes+0x13c>)
 8009ad8:	4832      	ldr	r0, [pc, #200]	; (8009ba4 <plug_holes+0x12c>)
 8009ada:	f00b fa03 	bl	8014ee4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7ff ffa4 	bl	8009a30 <ptr_to_mem>
 8009ae8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d024      	beq.n	8009b3c <plug_holes+0xc4>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	791b      	ldrb	r3, [r3, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d120      	bne.n	8009b3c <plug_holes+0xc4>
 8009afa:	4b2b      	ldr	r3, [pc, #172]	; (8009ba8 <plug_holes+0x130>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d01b      	beq.n	8009b3c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009b04:	4b2c      	ldr	r3, [pc, #176]	; (8009bb8 <plug_holes+0x140>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d102      	bne.n	8009b14 <plug_holes+0x9c>
      lfree = mem;
 8009b0e:	4a2a      	ldr	r2, [pc, #168]	; (8009bb8 <plug_holes+0x140>)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	881a      	ldrh	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	881b      	ldrh	r3, [r3, #0]
 8009b20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b24:	d00a      	beq.n	8009b3c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7ff ff80 	bl	8009a30 <ptr_to_mem>
 8009b30:	4604      	mov	r4, r0
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7ff ff8e 	bl	8009a54 <mem_to_ptr>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	885b      	ldrh	r3, [r3, #2]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7ff ff75 	bl	8009a30 <ptr_to_mem>
 8009b46:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d01f      	beq.n	8009b90 <plug_holes+0x118>
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	791b      	ldrb	r3, [r3, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d11b      	bne.n	8009b90 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009b58:	4b17      	ldr	r3, [pc, #92]	; (8009bb8 <plug_holes+0x140>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d102      	bne.n	8009b68 <plug_holes+0xf0>
      lfree = pmem;
 8009b62:	4a15      	ldr	r2, [pc, #84]	; (8009bb8 <plug_holes+0x140>)
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	881a      	ldrh	r2, [r3, #0]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b78:	d00a      	beq.n	8009b90 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7ff ff56 	bl	8009a30 <ptr_to_mem>
 8009b84:	4604      	mov	r4, r0
 8009b86:	68b8      	ldr	r0, [r7, #8]
 8009b88:	f7ff ff64 	bl	8009a54 <mem_to_ptr>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009b90:	bf00      	nop
 8009b92:	3714      	adds	r7, #20
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd90      	pop	{r4, r7, pc}
 8009b98:	20006800 	.word	0x20006800
 8009b9c:	08016898 	.word	0x08016898
 8009ba0:	080168c8 	.word	0x080168c8
 8009ba4:	080168e0 	.word	0x080168e0
 8009ba8:	20006804 	.word	0x20006804
 8009bac:	08016908 	.word	0x08016908
 8009bb0:	08016924 	.word	0x08016924
 8009bb4:	08016940 	.word	0x08016940
 8009bb8:	2000680c 	.word	0x2000680c

08009bbc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009bc2:	4b1f      	ldr	r3, [pc, #124]	; (8009c40 <mem_init+0x84>)
 8009bc4:	3303      	adds	r3, #3
 8009bc6:	f023 0303 	bic.w	r3, r3, #3
 8009bca:	461a      	mov	r2, r3
 8009bcc:	4b1d      	ldr	r3, [pc, #116]	; (8009c44 <mem_init+0x88>)
 8009bce:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009bd0:	4b1c      	ldr	r3, [pc, #112]	; (8009c44 <mem_init+0x88>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009bdc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009bea:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009bee:	f7ff ff1f 	bl	8009a30 <ptr_to_mem>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	4a14      	ldr	r2, [pc, #80]	; (8009c48 <mem_init+0x8c>)
 8009bf6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009bf8:	4b13      	ldr	r3, [pc, #76]	; (8009c48 <mem_init+0x8c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009c00:	4b11      	ldr	r3, [pc, #68]	; (8009c48 <mem_init+0x8c>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009c08:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009c0a:	4b0f      	ldr	r3, [pc, #60]	; (8009c48 <mem_init+0x8c>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009c12:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009c14:	4b0b      	ldr	r3, [pc, #44]	; (8009c44 <mem_init+0x88>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a0c      	ldr	r2, [pc, #48]	; (8009c4c <mem_init+0x90>)
 8009c1a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009c1c:	480c      	ldr	r0, [pc, #48]	; (8009c50 <mem_init+0x94>)
 8009c1e:	f00a fef5 	bl	8014a0c <sys_mutex_new>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d006      	beq.n	8009c36 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009c28:	4b0a      	ldr	r3, [pc, #40]	; (8009c54 <mem_init+0x98>)
 8009c2a:	f240 221f 	movw	r2, #543	; 0x21f
 8009c2e:	490a      	ldr	r1, [pc, #40]	; (8009c58 <mem_init+0x9c>)
 8009c30:	480a      	ldr	r0, [pc, #40]	; (8009c5c <mem_init+0xa0>)
 8009c32:	f00b f957 	bl	8014ee4 <iprintf>
  }
}
 8009c36:	bf00      	nop
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20009c30 	.word	0x20009c30
 8009c44:	20006800 	.word	0x20006800
 8009c48:	20006804 	.word	0x20006804
 8009c4c:	2000680c 	.word	0x2000680c
 8009c50:	20006808 	.word	0x20006808
 8009c54:	08016898 	.word	0x08016898
 8009c58:	0801696c 	.word	0x0801696c
 8009c5c:	080168e0 	.word	0x080168e0

08009c60 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7ff fef3 	bl	8009a54 <mem_to_ptr>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7ff feda 	bl	8009a30 <ptr_to_mem>
 8009c7c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	885b      	ldrh	r3, [r3, #2]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7ff fed4 	bl	8009a30 <ptr_to_mem>
 8009c88:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009c92:	d818      	bhi.n	8009cc6 <mem_link_valid+0x66>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	885b      	ldrh	r3, [r3, #2]
 8009c98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009c9c:	d813      	bhi.n	8009cc6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009ca2:	8afa      	ldrh	r2, [r7, #22]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d004      	beq.n	8009cb2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	8afa      	ldrh	r2, [r7, #22]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d109      	bne.n	8009cc6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009cb2:	4b08      	ldr	r3, [pc, #32]	; (8009cd4 <mem_link_valid+0x74>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d006      	beq.n	8009cca <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	885b      	ldrh	r3, [r3, #2]
 8009cc0:	8afa      	ldrh	r2, [r7, #22]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d001      	beq.n	8009cca <mem_link_valid+0x6a>
    return 0;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	e000      	b.n	8009ccc <mem_link_valid+0x6c>
  }
  return 1;
 8009cca:	2301      	movs	r3, #1
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3718      	adds	r7, #24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	20006804 	.word	0x20006804

08009cd8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b088      	sub	sp, #32
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d070      	beq.n	8009dc8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f003 0303 	and.w	r3, r3, #3
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00d      	beq.n	8009d0c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009cf0:	4b37      	ldr	r3, [pc, #220]	; (8009dd0 <mem_free+0xf8>)
 8009cf2:	f240 2273 	movw	r2, #627	; 0x273
 8009cf6:	4937      	ldr	r1, [pc, #220]	; (8009dd4 <mem_free+0xfc>)
 8009cf8:	4837      	ldr	r0, [pc, #220]	; (8009dd8 <mem_free+0x100>)
 8009cfa:	f00b f8f3 	bl	8014ee4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009cfe:	f00a fee3 	bl	8014ac8 <sys_arch_protect>
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f00a feed 	bl	8014ae4 <sys_arch_unprotect>
    return;
 8009d0a:	e05e      	b.n	8009dca <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3b08      	subs	r3, #8
 8009d10:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009d12:	4b32      	ldr	r3, [pc, #200]	; (8009ddc <mem_free+0x104>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	69fa      	ldr	r2, [r7, #28]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d306      	bcc.n	8009d2a <mem_free+0x52>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f103 020c 	add.w	r2, r3, #12
 8009d22:	4b2f      	ldr	r3, [pc, #188]	; (8009de0 <mem_free+0x108>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d90d      	bls.n	8009d46 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009d2a:	4b29      	ldr	r3, [pc, #164]	; (8009dd0 <mem_free+0xf8>)
 8009d2c:	f240 227f 	movw	r2, #639	; 0x27f
 8009d30:	492c      	ldr	r1, [pc, #176]	; (8009de4 <mem_free+0x10c>)
 8009d32:	4829      	ldr	r0, [pc, #164]	; (8009dd8 <mem_free+0x100>)
 8009d34:	f00b f8d6 	bl	8014ee4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009d38:	f00a fec6 	bl	8014ac8 <sys_arch_protect>
 8009d3c:	6138      	str	r0, [r7, #16]
 8009d3e:	6938      	ldr	r0, [r7, #16]
 8009d40:	f00a fed0 	bl	8014ae4 <sys_arch_unprotect>
    return;
 8009d44:	e041      	b.n	8009dca <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009d46:	4828      	ldr	r0, [pc, #160]	; (8009de8 <mem_free+0x110>)
 8009d48:	f00a fe7c 	bl	8014a44 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	791b      	ldrb	r3, [r3, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d110      	bne.n	8009d76 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009d54:	4b1e      	ldr	r3, [pc, #120]	; (8009dd0 <mem_free+0xf8>)
 8009d56:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009d5a:	4924      	ldr	r1, [pc, #144]	; (8009dec <mem_free+0x114>)
 8009d5c:	481e      	ldr	r0, [pc, #120]	; (8009dd8 <mem_free+0x100>)
 8009d5e:	f00b f8c1 	bl	8014ee4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009d62:	4821      	ldr	r0, [pc, #132]	; (8009de8 <mem_free+0x110>)
 8009d64:	f00a fe7d 	bl	8014a62 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009d68:	f00a feae 	bl	8014ac8 <sys_arch_protect>
 8009d6c:	6178      	str	r0, [r7, #20]
 8009d6e:	6978      	ldr	r0, [r7, #20]
 8009d70:	f00a feb8 	bl	8014ae4 <sys_arch_unprotect>
    return;
 8009d74:	e029      	b.n	8009dca <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009d76:	69f8      	ldr	r0, [r7, #28]
 8009d78:	f7ff ff72 	bl	8009c60 <mem_link_valid>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d110      	bne.n	8009da4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009d82:	4b13      	ldr	r3, [pc, #76]	; (8009dd0 <mem_free+0xf8>)
 8009d84:	f240 2295 	movw	r2, #661	; 0x295
 8009d88:	4919      	ldr	r1, [pc, #100]	; (8009df0 <mem_free+0x118>)
 8009d8a:	4813      	ldr	r0, [pc, #76]	; (8009dd8 <mem_free+0x100>)
 8009d8c:	f00b f8aa 	bl	8014ee4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009d90:	4815      	ldr	r0, [pc, #84]	; (8009de8 <mem_free+0x110>)
 8009d92:	f00a fe66 	bl	8014a62 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009d96:	f00a fe97 	bl	8014ac8 <sys_arch_protect>
 8009d9a:	61b8      	str	r0, [r7, #24]
 8009d9c:	69b8      	ldr	r0, [r7, #24]
 8009d9e:	f00a fea1 	bl	8014ae4 <sys_arch_unprotect>
    return;
 8009da2:	e012      	b.n	8009dca <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	2200      	movs	r2, #0
 8009da8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009daa:	4b12      	ldr	r3, [pc, #72]	; (8009df4 <mem_free+0x11c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	69fa      	ldr	r2, [r7, #28]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d202      	bcs.n	8009dba <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009db4:	4a0f      	ldr	r2, [pc, #60]	; (8009df4 <mem_free+0x11c>)
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009dba:	69f8      	ldr	r0, [r7, #28]
 8009dbc:	f7ff fe5c 	bl	8009a78 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009dc0:	4809      	ldr	r0, [pc, #36]	; (8009de8 <mem_free+0x110>)
 8009dc2:	f00a fe4e 	bl	8014a62 <sys_mutex_unlock>
 8009dc6:	e000      	b.n	8009dca <mem_free+0xf2>
    return;
 8009dc8:	bf00      	nop
}
 8009dca:	3720      	adds	r7, #32
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	08016898 	.word	0x08016898
 8009dd4:	08016988 	.word	0x08016988
 8009dd8:	080168e0 	.word	0x080168e0
 8009ddc:	20006800 	.word	0x20006800
 8009de0:	20006804 	.word	0x20006804
 8009de4:	080169ac 	.word	0x080169ac
 8009de8:	20006808 	.word	0x20006808
 8009dec:	080169c8 	.word	0x080169c8
 8009df0:	080169f0 	.word	0x080169f0
 8009df4:	2000680c 	.word	0x2000680c

08009df8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b088      	sub	sp, #32
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009e04:	887b      	ldrh	r3, [r7, #2]
 8009e06:	3303      	adds	r3, #3
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	f023 0303 	bic.w	r3, r3, #3
 8009e0e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009e10:	8bfb      	ldrh	r3, [r7, #30]
 8009e12:	2b0b      	cmp	r3, #11
 8009e14:	d801      	bhi.n	8009e1a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009e16:	230c      	movs	r3, #12
 8009e18:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009e1a:	8bfb      	ldrh	r3, [r7, #30]
 8009e1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009e20:	d803      	bhi.n	8009e2a <mem_trim+0x32>
 8009e22:	8bfa      	ldrh	r2, [r7, #30]
 8009e24:	887b      	ldrh	r3, [r7, #2]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d201      	bcs.n	8009e2e <mem_trim+0x36>
    return NULL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	e0d8      	b.n	8009fe0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009e2e:	4b6e      	ldr	r3, [pc, #440]	; (8009fe8 <mem_trim+0x1f0>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d304      	bcc.n	8009e42 <mem_trim+0x4a>
 8009e38:	4b6c      	ldr	r3, [pc, #432]	; (8009fec <mem_trim+0x1f4>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d306      	bcc.n	8009e50 <mem_trim+0x58>
 8009e42:	4b6b      	ldr	r3, [pc, #428]	; (8009ff0 <mem_trim+0x1f8>)
 8009e44:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009e48:	496a      	ldr	r1, [pc, #424]	; (8009ff4 <mem_trim+0x1fc>)
 8009e4a:	486b      	ldr	r0, [pc, #428]	; (8009ff8 <mem_trim+0x200>)
 8009e4c:	f00b f84a 	bl	8014ee4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009e50:	4b65      	ldr	r3, [pc, #404]	; (8009fe8 <mem_trim+0x1f0>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d304      	bcc.n	8009e64 <mem_trim+0x6c>
 8009e5a:	4b64      	ldr	r3, [pc, #400]	; (8009fec <mem_trim+0x1f4>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d307      	bcc.n	8009e74 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009e64:	f00a fe30 	bl	8014ac8 <sys_arch_protect>
 8009e68:	60b8      	str	r0, [r7, #8]
 8009e6a:	68b8      	ldr	r0, [r7, #8]
 8009e6c:	f00a fe3a 	bl	8014ae4 <sys_arch_unprotect>
    return rmem;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	e0b5      	b.n	8009fe0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	3b08      	subs	r3, #8
 8009e78:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009e7a:	69b8      	ldr	r0, [r7, #24]
 8009e7c:	f7ff fdea 	bl	8009a54 <mem_to_ptr>
 8009e80:	4603      	mov	r3, r0
 8009e82:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	881a      	ldrh	r2, [r3, #0]
 8009e88:	8afb      	ldrh	r3, [r7, #22]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	3b08      	subs	r3, #8
 8009e90:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009e92:	8bfa      	ldrh	r2, [r7, #30]
 8009e94:	8abb      	ldrh	r3, [r7, #20]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d906      	bls.n	8009ea8 <mem_trim+0xb0>
 8009e9a:	4b55      	ldr	r3, [pc, #340]	; (8009ff0 <mem_trim+0x1f8>)
 8009e9c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009ea0:	4956      	ldr	r1, [pc, #344]	; (8009ffc <mem_trim+0x204>)
 8009ea2:	4855      	ldr	r0, [pc, #340]	; (8009ff8 <mem_trim+0x200>)
 8009ea4:	f00b f81e 	bl	8014ee4 <iprintf>
  if (newsize > size) {
 8009ea8:	8bfa      	ldrh	r2, [r7, #30]
 8009eaa:	8abb      	ldrh	r3, [r7, #20]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d901      	bls.n	8009eb4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	e095      	b.n	8009fe0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009eb4:	8bfa      	ldrh	r2, [r7, #30]
 8009eb6:	8abb      	ldrh	r3, [r7, #20]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d101      	bne.n	8009ec0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	e08f      	b.n	8009fe0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009ec0:	484f      	ldr	r0, [pc, #316]	; (800a000 <mem_trim+0x208>)
 8009ec2:	f00a fdbf 	bl	8014a44 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7ff fdb0 	bl	8009a30 <ptr_to_mem>
 8009ed0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	791b      	ldrb	r3, [r3, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d13f      	bne.n	8009f5a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ee2:	d106      	bne.n	8009ef2 <mem_trim+0xfa>
 8009ee4:	4b42      	ldr	r3, [pc, #264]	; (8009ff0 <mem_trim+0x1f8>)
 8009ee6:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009eea:	4946      	ldr	r1, [pc, #280]	; (800a004 <mem_trim+0x20c>)
 8009eec:	4842      	ldr	r0, [pc, #264]	; (8009ff8 <mem_trim+0x200>)
 8009eee:	f00a fff9 	bl	8014ee4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	881b      	ldrh	r3, [r3, #0]
 8009ef6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009ef8:	8afa      	ldrh	r2, [r7, #22]
 8009efa:	8bfb      	ldrh	r3, [r7, #30]
 8009efc:	4413      	add	r3, r2
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	3308      	adds	r3, #8
 8009f02:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009f04:	4b40      	ldr	r3, [pc, #256]	; (800a008 <mem_trim+0x210>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d106      	bne.n	8009f1c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8009f0e:	89fb      	ldrh	r3, [r7, #14]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7ff fd8d 	bl	8009a30 <ptr_to_mem>
 8009f16:	4603      	mov	r3, r0
 8009f18:	4a3b      	ldr	r2, [pc, #236]	; (800a008 <mem_trim+0x210>)
 8009f1a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009f1c:	89fb      	ldrh	r3, [r7, #14]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff fd86 	bl	8009a30 <ptr_to_mem>
 8009f24:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	89ba      	ldrh	r2, [r7, #12]
 8009f30:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	8afa      	ldrh	r2, [r7, #22]
 8009f36:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	89fa      	ldrh	r2, [r7, #14]
 8009f3c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f46:	d047      	beq.n	8009fd8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	881b      	ldrh	r3, [r3, #0]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7ff fd6f 	bl	8009a30 <ptr_to_mem>
 8009f52:	4602      	mov	r2, r0
 8009f54:	89fb      	ldrh	r3, [r7, #14]
 8009f56:	8053      	strh	r3, [r2, #2]
 8009f58:	e03e      	b.n	8009fd8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009f5a:	8bfb      	ldrh	r3, [r7, #30]
 8009f5c:	f103 0214 	add.w	r2, r3, #20
 8009f60:	8abb      	ldrh	r3, [r7, #20]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d838      	bhi.n	8009fd8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009f66:	8afa      	ldrh	r2, [r7, #22]
 8009f68:	8bfb      	ldrh	r3, [r7, #30]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	3308      	adds	r3, #8
 8009f70:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	881b      	ldrh	r3, [r3, #0]
 8009f76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f7a:	d106      	bne.n	8009f8a <mem_trim+0x192>
 8009f7c:	4b1c      	ldr	r3, [pc, #112]	; (8009ff0 <mem_trim+0x1f8>)
 8009f7e:	f240 3216 	movw	r2, #790	; 0x316
 8009f82:	4920      	ldr	r1, [pc, #128]	; (800a004 <mem_trim+0x20c>)
 8009f84:	481c      	ldr	r0, [pc, #112]	; (8009ff8 <mem_trim+0x200>)
 8009f86:	f00a ffad 	bl	8014ee4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009f8a:	89fb      	ldrh	r3, [r7, #14]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7ff fd4f 	bl	8009a30 <ptr_to_mem>
 8009f92:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009f94:	4b1c      	ldr	r3, [pc, #112]	; (800a008 <mem_trim+0x210>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d202      	bcs.n	8009fa4 <mem_trim+0x1ac>
      lfree = mem2;
 8009f9e:	4a1a      	ldr	r2, [pc, #104]	; (800a008 <mem_trim+0x210>)
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	881a      	ldrh	r2, [r3, #0]
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	8afa      	ldrh	r2, [r7, #22]
 8009fb6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	89fa      	ldrh	r2, [r7, #14]
 8009fbc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009fc6:	d007      	beq.n	8009fd8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	881b      	ldrh	r3, [r3, #0]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff fd2f 	bl	8009a30 <ptr_to_mem>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	89fb      	ldrh	r3, [r7, #14]
 8009fd6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009fd8:	4809      	ldr	r0, [pc, #36]	; (800a000 <mem_trim+0x208>)
 8009fda:	f00a fd42 	bl	8014a62 <sys_mutex_unlock>
  return rmem;
 8009fde:	687b      	ldr	r3, [r7, #4]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3720      	adds	r7, #32
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	20006800 	.word	0x20006800
 8009fec:	20006804 	.word	0x20006804
 8009ff0:	08016898 	.word	0x08016898
 8009ff4:	08016a24 	.word	0x08016a24
 8009ff8:	080168e0 	.word	0x080168e0
 8009ffc:	08016a3c 	.word	0x08016a3c
 800a000:	20006808 	.word	0x20006808
 800a004:	08016a5c 	.word	0x08016a5c
 800a008:	2000680c 	.word	0x2000680c

0800a00c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b088      	sub	sp, #32
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a016:	88fb      	ldrh	r3, [r7, #6]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <mem_malloc+0x14>
    return NULL;
 800a01c:	2300      	movs	r3, #0
 800a01e:	e0e2      	b.n	800a1e6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a020:	88fb      	ldrh	r3, [r7, #6]
 800a022:	3303      	adds	r3, #3
 800a024:	b29b      	uxth	r3, r3
 800a026:	f023 0303 	bic.w	r3, r3, #3
 800a02a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a02c:	8bbb      	ldrh	r3, [r7, #28]
 800a02e:	2b0b      	cmp	r3, #11
 800a030:	d801      	bhi.n	800a036 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a032:	230c      	movs	r3, #12
 800a034:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a036:	8bbb      	ldrh	r3, [r7, #28]
 800a038:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a03c:	d803      	bhi.n	800a046 <mem_malloc+0x3a>
 800a03e:	8bba      	ldrh	r2, [r7, #28]
 800a040:	88fb      	ldrh	r3, [r7, #6]
 800a042:	429a      	cmp	r2, r3
 800a044:	d201      	bcs.n	800a04a <mem_malloc+0x3e>
    return NULL;
 800a046:	2300      	movs	r3, #0
 800a048:	e0cd      	b.n	800a1e6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a04a:	4869      	ldr	r0, [pc, #420]	; (800a1f0 <mem_malloc+0x1e4>)
 800a04c:	f00a fcfa 	bl	8014a44 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a050:	4b68      	ldr	r3, [pc, #416]	; (800a1f4 <mem_malloc+0x1e8>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4618      	mov	r0, r3
 800a056:	f7ff fcfd 	bl	8009a54 <mem_to_ptr>
 800a05a:	4603      	mov	r3, r0
 800a05c:	83fb      	strh	r3, [r7, #30]
 800a05e:	e0b7      	b.n	800a1d0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a060:	8bfb      	ldrh	r3, [r7, #30]
 800a062:	4618      	mov	r0, r3
 800a064:	f7ff fce4 	bl	8009a30 <ptr_to_mem>
 800a068:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	791b      	ldrb	r3, [r3, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f040 80a7 	bne.w	800a1c2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	461a      	mov	r2, r3
 800a07a:	8bfb      	ldrh	r3, [r7, #30]
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	f1a3 0208 	sub.w	r2, r3, #8
 800a082:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a084:	429a      	cmp	r2, r3
 800a086:	f0c0 809c 	bcc.w	800a1c2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	461a      	mov	r2, r3
 800a090:	8bfb      	ldrh	r3, [r7, #30]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	f1a3 0208 	sub.w	r2, r3, #8
 800a098:	8bbb      	ldrh	r3, [r7, #28]
 800a09a:	3314      	adds	r3, #20
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d333      	bcc.n	800a108 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a0a0:	8bfa      	ldrh	r2, [r7, #30]
 800a0a2:	8bbb      	ldrh	r3, [r7, #28]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a0ac:	8a7b      	ldrh	r3, [r7, #18]
 800a0ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0b2:	d106      	bne.n	800a0c2 <mem_malloc+0xb6>
 800a0b4:	4b50      	ldr	r3, [pc, #320]	; (800a1f8 <mem_malloc+0x1ec>)
 800a0b6:	f240 3287 	movw	r2, #903	; 0x387
 800a0ba:	4950      	ldr	r1, [pc, #320]	; (800a1fc <mem_malloc+0x1f0>)
 800a0bc:	4850      	ldr	r0, [pc, #320]	; (800a200 <mem_malloc+0x1f4>)
 800a0be:	f00a ff11 	bl	8014ee4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a0c2:	8a7b      	ldrh	r3, [r7, #18]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7ff fcb3 	bl	8009a30 <ptr_to_mem>
 800a0ca:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	881a      	ldrh	r2, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	8bfa      	ldrh	r2, [r7, #30]
 800a0de:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	8a7a      	ldrh	r2, [r7, #18]
 800a0e4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	881b      	ldrh	r3, [r3, #0]
 800a0f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0f4:	d00b      	beq.n	800a10e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7ff fc98 	bl	8009a30 <ptr_to_mem>
 800a100:	4602      	mov	r2, r0
 800a102:	8a7b      	ldrh	r3, [r7, #18]
 800a104:	8053      	strh	r3, [r2, #2]
 800a106:	e002      	b.n	800a10e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2201      	movs	r2, #1
 800a10c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a10e:	4b39      	ldr	r3, [pc, #228]	; (800a1f4 <mem_malloc+0x1e8>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	429a      	cmp	r2, r3
 800a116:	d127      	bne.n	800a168 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a118:	4b36      	ldr	r3, [pc, #216]	; (800a1f4 <mem_malloc+0x1e8>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a11e:	e005      	b.n	800a12c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	881b      	ldrh	r3, [r3, #0]
 800a124:	4618      	mov	r0, r3
 800a126:	f7ff fc83 	bl	8009a30 <ptr_to_mem>
 800a12a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	791b      	ldrb	r3, [r3, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d004      	beq.n	800a13e <mem_malloc+0x132>
 800a134:	4b33      	ldr	r3, [pc, #204]	; (800a204 <mem_malloc+0x1f8>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d1f0      	bne.n	800a120 <mem_malloc+0x114>
          }
          lfree = cur;
 800a13e:	4a2d      	ldr	r2, [pc, #180]	; (800a1f4 <mem_malloc+0x1e8>)
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a144:	4b2b      	ldr	r3, [pc, #172]	; (800a1f4 <mem_malloc+0x1e8>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	4b2e      	ldr	r3, [pc, #184]	; (800a204 <mem_malloc+0x1f8>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d00b      	beq.n	800a168 <mem_malloc+0x15c>
 800a150:	4b28      	ldr	r3, [pc, #160]	; (800a1f4 <mem_malloc+0x1e8>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	791b      	ldrb	r3, [r3, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d006      	beq.n	800a168 <mem_malloc+0x15c>
 800a15a:	4b27      	ldr	r3, [pc, #156]	; (800a1f8 <mem_malloc+0x1ec>)
 800a15c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a160:	4929      	ldr	r1, [pc, #164]	; (800a208 <mem_malloc+0x1fc>)
 800a162:	4827      	ldr	r0, [pc, #156]	; (800a200 <mem_malloc+0x1f4>)
 800a164:	f00a febe 	bl	8014ee4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a168:	4821      	ldr	r0, [pc, #132]	; (800a1f0 <mem_malloc+0x1e4>)
 800a16a:	f00a fc7a 	bl	8014a62 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a16e:	8bba      	ldrh	r2, [r7, #28]
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	4413      	add	r3, r2
 800a174:	3308      	adds	r3, #8
 800a176:	4a23      	ldr	r2, [pc, #140]	; (800a204 <mem_malloc+0x1f8>)
 800a178:	6812      	ldr	r2, [r2, #0]
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d906      	bls.n	800a18c <mem_malloc+0x180>
 800a17e:	4b1e      	ldr	r3, [pc, #120]	; (800a1f8 <mem_malloc+0x1ec>)
 800a180:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a184:	4921      	ldr	r1, [pc, #132]	; (800a20c <mem_malloc+0x200>)
 800a186:	481e      	ldr	r0, [pc, #120]	; (800a200 <mem_malloc+0x1f4>)
 800a188:	f00a feac 	bl	8014ee4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	f003 0303 	and.w	r3, r3, #3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d006      	beq.n	800a1a4 <mem_malloc+0x198>
 800a196:	4b18      	ldr	r3, [pc, #96]	; (800a1f8 <mem_malloc+0x1ec>)
 800a198:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a19c:	491c      	ldr	r1, [pc, #112]	; (800a210 <mem_malloc+0x204>)
 800a19e:	4818      	ldr	r0, [pc, #96]	; (800a200 <mem_malloc+0x1f4>)
 800a1a0:	f00a fea0 	bl	8014ee4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f003 0303 	and.w	r3, r3, #3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d006      	beq.n	800a1bc <mem_malloc+0x1b0>
 800a1ae:	4b12      	ldr	r3, [pc, #72]	; (800a1f8 <mem_malloc+0x1ec>)
 800a1b0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a1b4:	4917      	ldr	r1, [pc, #92]	; (800a214 <mem_malloc+0x208>)
 800a1b6:	4812      	ldr	r0, [pc, #72]	; (800a200 <mem_malloc+0x1f4>)
 800a1b8:	f00a fe94 	bl	8014ee4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	e011      	b.n	800a1e6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a1c2:	8bfb      	ldrh	r3, [r7, #30]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff fc33 	bl	8009a30 <ptr_to_mem>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a1d0:	8bfa      	ldrh	r2, [r7, #30]
 800a1d2:	8bbb      	ldrh	r3, [r7, #28]
 800a1d4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	f4ff af41 	bcc.w	800a060 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a1de:	4804      	ldr	r0, [pc, #16]	; (800a1f0 <mem_malloc+0x1e4>)
 800a1e0:	f00a fc3f 	bl	8014a62 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3720      	adds	r7, #32
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20006808 	.word	0x20006808
 800a1f4:	2000680c 	.word	0x2000680c
 800a1f8:	08016898 	.word	0x08016898
 800a1fc:	08016a5c 	.word	0x08016a5c
 800a200:	080168e0 	.word	0x080168e0
 800a204:	20006804 	.word	0x20006804
 800a208:	08016a70 	.word	0x08016a70
 800a20c:	08016a8c 	.word	0x08016a8c
 800a210:	08016abc 	.word	0x08016abc
 800a214:	08016aec 	.word	0x08016aec

0800a218 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	2200      	movs	r2, #0
 800a226:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	3303      	adds	r3, #3
 800a22e:	f023 0303 	bic.w	r3, r3, #3
 800a232:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	e011      	b.n	800a25e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	461a      	mov	r2, r3
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	4413      	add	r3, r2
 800a256:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	3301      	adds	r3, #1
 800a25c:	60fb      	str	r3, [r7, #12]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	885b      	ldrh	r3, [r3, #2]
 800a262:	461a      	mov	r2, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4293      	cmp	r3, r2
 800a268:	dbe7      	blt.n	800a23a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a26a:	bf00      	nop
 800a26c:	bf00      	nop
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a27e:	2300      	movs	r3, #0
 800a280:	80fb      	strh	r3, [r7, #6]
 800a282:	e009      	b.n	800a298 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a284:	88fb      	ldrh	r3, [r7, #6]
 800a286:	4a08      	ldr	r2, [pc, #32]	; (800a2a8 <memp_init+0x30>)
 800a288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff ffc3 	bl	800a218 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a292:	88fb      	ldrh	r3, [r7, #6]
 800a294:	3301      	adds	r3, #1
 800a296:	80fb      	strh	r3, [r7, #6]
 800a298:	88fb      	ldrh	r3, [r7, #6]
 800a29a:	2b0c      	cmp	r3, #12
 800a29c:	d9f2      	bls.n	800a284 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a29e:	bf00      	nop
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	080192f8 	.word	0x080192f8

0800a2ac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a2b4:	f00a fc08 	bl	8014ac8 <sys_arch_protect>
 800a2b8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d015      	beq.n	800a2f4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	6812      	ldr	r2, [r2, #0]
 800a2d0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	f003 0303 	and.w	r3, r3, #3
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d006      	beq.n	800a2ea <do_memp_malloc_pool+0x3e>
 800a2dc:	4b09      	ldr	r3, [pc, #36]	; (800a304 <do_memp_malloc_pool+0x58>)
 800a2de:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a2e2:	4909      	ldr	r1, [pc, #36]	; (800a308 <do_memp_malloc_pool+0x5c>)
 800a2e4:	4809      	ldr	r0, [pc, #36]	; (800a30c <do_memp_malloc_pool+0x60>)
 800a2e6:	f00a fdfd 	bl	8014ee4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f00a fbfa 	bl	8014ae4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	e003      	b.n	800a2fc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f00a fbf5 	bl	8014ae4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	08016b10 	.word	0x08016b10
 800a308:	08016b40 	.word	0x08016b40
 800a30c:	08016b64 	.word	0x08016b64

0800a310 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	4603      	mov	r3, r0
 800a318:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a31a:	79fb      	ldrb	r3, [r7, #7]
 800a31c:	2b0c      	cmp	r3, #12
 800a31e:	d908      	bls.n	800a332 <memp_malloc+0x22>
 800a320:	4b0a      	ldr	r3, [pc, #40]	; (800a34c <memp_malloc+0x3c>)
 800a322:	f240 1257 	movw	r2, #343	; 0x157
 800a326:	490a      	ldr	r1, [pc, #40]	; (800a350 <memp_malloc+0x40>)
 800a328:	480a      	ldr	r0, [pc, #40]	; (800a354 <memp_malloc+0x44>)
 800a32a:	f00a fddb 	bl	8014ee4 <iprintf>
 800a32e:	2300      	movs	r3, #0
 800a330:	e008      	b.n	800a344 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a332:	79fb      	ldrb	r3, [r7, #7]
 800a334:	4a08      	ldr	r2, [pc, #32]	; (800a358 <memp_malloc+0x48>)
 800a336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff ffb6 	bl	800a2ac <do_memp_malloc_pool>
 800a340:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a342:	68fb      	ldr	r3, [r7, #12]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	08016b10 	.word	0x08016b10
 800a350:	08016ba0 	.word	0x08016ba0
 800a354:	08016b64 	.word	0x08016b64
 800a358:	080192f8 	.word	0x080192f8

0800a35c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	f003 0303 	and.w	r3, r3, #3
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d006      	beq.n	800a37e <do_memp_free_pool+0x22>
 800a370:	4b0d      	ldr	r3, [pc, #52]	; (800a3a8 <do_memp_free_pool+0x4c>)
 800a372:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a376:	490d      	ldr	r1, [pc, #52]	; (800a3ac <do_memp_free_pool+0x50>)
 800a378:	480d      	ldr	r0, [pc, #52]	; (800a3b0 <do_memp_free_pool+0x54>)
 800a37a:	f00a fdb3 	bl	8014ee4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a382:	f00a fba1 	bl	8014ac8 <sys_arch_protect>
 800a386:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a39a:	68b8      	ldr	r0, [r7, #8]
 800a39c:	f00a fba2 	bl	8014ae4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a3a0:	bf00      	nop
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	08016b10 	.word	0x08016b10
 800a3ac:	08016bc0 	.word	0x08016bc0
 800a3b0:	08016b64 	.word	0x08016b64

0800a3b4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	6039      	str	r1, [r7, #0]
 800a3be:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a3c0:	79fb      	ldrb	r3, [r7, #7]
 800a3c2:	2b0c      	cmp	r3, #12
 800a3c4:	d907      	bls.n	800a3d6 <memp_free+0x22>
 800a3c6:	4b0c      	ldr	r3, [pc, #48]	; (800a3f8 <memp_free+0x44>)
 800a3c8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a3cc:	490b      	ldr	r1, [pc, #44]	; (800a3fc <memp_free+0x48>)
 800a3ce:	480c      	ldr	r0, [pc, #48]	; (800a400 <memp_free+0x4c>)
 800a3d0:	f00a fd88 	bl	8014ee4 <iprintf>
 800a3d4:	e00c      	b.n	800a3f0 <memp_free+0x3c>

  if (mem == NULL) {
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d008      	beq.n	800a3ee <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a3dc:	79fb      	ldrb	r3, [r7, #7]
 800a3de:	4a09      	ldr	r2, [pc, #36]	; (800a404 <memp_free+0x50>)
 800a3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3e4:	6839      	ldr	r1, [r7, #0]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7ff ffb8 	bl	800a35c <do_memp_free_pool>
 800a3ec:	e000      	b.n	800a3f0 <memp_free+0x3c>
    return;
 800a3ee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	08016b10 	.word	0x08016b10
 800a3fc:	08016be0 	.word	0x08016be0
 800a400:	08016b64 	.word	0x08016b64
 800a404:	080192f8 	.word	0x080192f8

0800a408 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a408:	b480      	push	{r7}
 800a40a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a40c:	bf00      	nop
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
	...

0800a418 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d108      	bne.n	800a43e <netif_add+0x26>
 800a42c:	4b57      	ldr	r3, [pc, #348]	; (800a58c <netif_add+0x174>)
 800a42e:	f240 1227 	movw	r2, #295	; 0x127
 800a432:	4957      	ldr	r1, [pc, #348]	; (800a590 <netif_add+0x178>)
 800a434:	4857      	ldr	r0, [pc, #348]	; (800a594 <netif_add+0x17c>)
 800a436:	f00a fd55 	bl	8014ee4 <iprintf>
 800a43a:	2300      	movs	r3, #0
 800a43c:	e0a2      	b.n	800a584 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	2b00      	cmp	r3, #0
 800a442:	d108      	bne.n	800a456 <netif_add+0x3e>
 800a444:	4b51      	ldr	r3, [pc, #324]	; (800a58c <netif_add+0x174>)
 800a446:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a44a:	4953      	ldr	r1, [pc, #332]	; (800a598 <netif_add+0x180>)
 800a44c:	4851      	ldr	r0, [pc, #324]	; (800a594 <netif_add+0x17c>)
 800a44e:	f00a fd49 	bl	8014ee4 <iprintf>
 800a452:	2300      	movs	r3, #0
 800a454:	e096      	b.n	800a584 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a45c:	4b4f      	ldr	r3, [pc, #316]	; (800a59c <netif_add+0x184>)
 800a45e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a466:	4b4d      	ldr	r3, [pc, #308]	; (800a59c <netif_add+0x184>)
 800a468:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a470:	4b4a      	ldr	r3, [pc, #296]	; (800a59c <netif_add+0x184>)
 800a472:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	4a45      	ldr	r2, [pc, #276]	; (800a5a0 <netif_add+0x188>)
 800a48a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6a3a      	ldr	r2, [r7, #32]
 800a4a4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a4a6:	4b3f      	ldr	r3, [pc, #252]	; (800a5a4 <netif_add+0x18c>)
 800a4a8:	781a      	ldrb	r2, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4b4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	68b9      	ldr	r1, [r7, #8]
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 f913 	bl	800a6e8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	4798      	blx	r3
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <netif_add+0xba>
    return NULL;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e058      	b.n	800a584 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4d8:	2bff      	cmp	r3, #255	; 0xff
 800a4da:	d103      	bne.n	800a4e4 <netif_add+0xcc>
        netif->num = 0;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a4e8:	4b2f      	ldr	r3, [pc, #188]	; (800a5a8 <netif_add+0x190>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	617b      	str	r3, [r7, #20]
 800a4ee:	e02b      	b.n	800a548 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a4f0:	697a      	ldr	r2, [r7, #20]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d106      	bne.n	800a506 <netif_add+0xee>
 800a4f8:	4b24      	ldr	r3, [pc, #144]	; (800a58c <netif_add+0x174>)
 800a4fa:	f240 128b 	movw	r2, #395	; 0x18b
 800a4fe:	492b      	ldr	r1, [pc, #172]	; (800a5ac <netif_add+0x194>)
 800a500:	4824      	ldr	r0, [pc, #144]	; (800a594 <netif_add+0x17c>)
 800a502:	f00a fcef 	bl	8014ee4 <iprintf>
        num_netifs++;
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	3301      	adds	r3, #1
 800a50a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	2bff      	cmp	r3, #255	; 0xff
 800a510:	dd06      	ble.n	800a520 <netif_add+0x108>
 800a512:	4b1e      	ldr	r3, [pc, #120]	; (800a58c <netif_add+0x174>)
 800a514:	f240 128d 	movw	r2, #397	; 0x18d
 800a518:	4925      	ldr	r1, [pc, #148]	; (800a5b0 <netif_add+0x198>)
 800a51a:	481e      	ldr	r0, [pc, #120]	; (800a594 <netif_add+0x17c>)
 800a51c:	f00a fce2 	bl	8014ee4 <iprintf>
        if (netif2->num == netif->num) {
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d108      	bne.n	800a542 <netif_add+0x12a>
          netif->num++;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a536:	3301      	adds	r3, #1
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a540:	e005      	b.n	800a54e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	617b      	str	r3, [r7, #20]
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1d0      	bne.n	800a4f0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1be      	bne.n	800a4d2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a55a:	2bfe      	cmp	r3, #254	; 0xfe
 800a55c:	d103      	bne.n	800a566 <netif_add+0x14e>
    netif_num = 0;
 800a55e:	4b11      	ldr	r3, [pc, #68]	; (800a5a4 <netif_add+0x18c>)
 800a560:	2200      	movs	r2, #0
 800a562:	701a      	strb	r2, [r3, #0]
 800a564:	e006      	b.n	800a574 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a56c:	3301      	adds	r3, #1
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	4b0c      	ldr	r3, [pc, #48]	; (800a5a4 <netif_add+0x18c>)
 800a572:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a574:	4b0c      	ldr	r3, [pc, #48]	; (800a5a8 <netif_add+0x190>)
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a57c:	4a0a      	ldr	r2, [pc, #40]	; (800a5a8 <netif_add+0x190>)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a582:	68fb      	ldr	r3, [r7, #12]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3718      	adds	r7, #24
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	08016bfc 	.word	0x08016bfc
 800a590:	08016c90 	.word	0x08016c90
 800a594:	08016c4c 	.word	0x08016c4c
 800a598:	08016cac 	.word	0x08016cac
 800a59c:	0801936c 	.word	0x0801936c
 800a5a0:	0800a8fb 	.word	0x0800a8fb
 800a5a4:	20006844 	.word	0x20006844
 800a5a8:	2000d31c 	.word	0x2000d31c
 800a5ac:	08016cd0 	.word	0x08016cd0
 800a5b0:	08016ce4 	.word	0x08016ce4

0800a5b4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f002 fd31 	bl	800d028 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a5c6:	6839      	ldr	r1, [r7, #0]
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f007 fdc9 	bl	8012160 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a5ce:	bf00      	nop
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d106      	bne.n	800a5f8 <netif_do_set_ipaddr+0x20>
 800a5ea:	4b1d      	ldr	r3, [pc, #116]	; (800a660 <netif_do_set_ipaddr+0x88>)
 800a5ec:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a5f0:	491c      	ldr	r1, [pc, #112]	; (800a664 <netif_do_set_ipaddr+0x8c>)
 800a5f2:	481d      	ldr	r0, [pc, #116]	; (800a668 <netif_do_set_ipaddr+0x90>)
 800a5f4:	f00a fc76 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d106      	bne.n	800a60c <netif_do_set_ipaddr+0x34>
 800a5fe:	4b18      	ldr	r3, [pc, #96]	; (800a660 <netif_do_set_ipaddr+0x88>)
 800a600:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a604:	4917      	ldr	r1, [pc, #92]	; (800a664 <netif_do_set_ipaddr+0x8c>)
 800a606:	4818      	ldr	r0, [pc, #96]	; (800a668 <netif_do_set_ipaddr+0x90>)
 800a608:	f00a fc6c 	bl	8014ee4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3304      	adds	r3, #4
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	429a      	cmp	r2, r3
 800a618:	d01c      	beq.n	800a654 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	3304      	adds	r3, #4
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a62a:	f107 0314 	add.w	r3, r7, #20
 800a62e:	4619      	mov	r1, r3
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7ff ffbf 	bl	800a5b4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <netif_do_set_ipaddr+0x6a>
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	e000      	b.n	800a644 <netif_do_set_ipaddr+0x6c>
 800a642:	2300      	movs	r3, #0
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a648:	2101      	movs	r1, #1
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f000 f8d2 	bl	800a7f4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a650:	2301      	movs	r3, #1
 800a652:	e000      	b.n	800a656 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	08016bfc 	.word	0x08016bfc
 800a664:	08016d14 	.word	0x08016d14
 800a668:	08016c4c 	.word	0x08016c4c

0800a66c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	3308      	adds	r3, #8
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	429a      	cmp	r2, r3
 800a684:	d00a      	beq.n	800a69c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <netif_do_set_netmask+0x26>
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	e000      	b.n	800a694 <netif_do_set_netmask+0x28>
 800a692:	2300      	movs	r3, #0
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a698:	2301      	movs	r3, #1
 800a69a:	e000      	b.n	800a69e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3714      	adds	r7, #20
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b085      	sub	sp, #20
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	60f8      	str	r0, [r7, #12]
 800a6b2:	60b9      	str	r1, [r7, #8]
 800a6b4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	330c      	adds	r3, #12
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d00a      	beq.n	800a6da <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <netif_do_set_gw+0x26>
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	e000      	b.n	800a6d2 <netif_do_set_gw+0x28>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e000      	b.n	800a6dc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3714      	adds	r7, #20
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b088      	sub	sp, #32
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
 800a6f4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d101      	bne.n	800a708 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a704:	4b1c      	ldr	r3, [pc, #112]	; (800a778 <netif_set_addr+0x90>)
 800a706:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a70e:	4b1a      	ldr	r3, [pc, #104]	; (800a778 <netif_set_addr+0x90>)
 800a710:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a718:	4b17      	ldr	r3, [pc, #92]	; (800a778 <netif_set_addr+0x90>)
 800a71a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <netif_set_addr+0x42>
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d101      	bne.n	800a72e <netif_set_addr+0x46>
 800a72a:	2301      	movs	r3, #1
 800a72c:	e000      	b.n	800a730 <netif_set_addr+0x48>
 800a72e:	2300      	movs	r3, #0
 800a730:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d006      	beq.n	800a746 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a738:	f107 0310 	add.w	r3, r7, #16
 800a73c:	461a      	mov	r2, r3
 800a73e:	68b9      	ldr	r1, [r7, #8]
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f7ff ff49 	bl	800a5d8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a746:	69fa      	ldr	r2, [r7, #28]
 800a748:	6879      	ldr	r1, [r7, #4]
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7ff ff8e 	bl	800a66c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a750:	69ba      	ldr	r2, [r7, #24]
 800a752:	6839      	ldr	r1, [r7, #0]
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f7ff ffa8 	bl	800a6aa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d106      	bne.n	800a76e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a760:	f107 0310 	add.w	r3, r7, #16
 800a764:	461a      	mov	r2, r3
 800a766:	68b9      	ldr	r1, [r7, #8]
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7ff ff35 	bl	800a5d8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a76e:	bf00      	nop
 800a770:	3720      	adds	r7, #32
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	0801936c 	.word	0x0801936c

0800a77c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a784:	4a04      	ldr	r2, [pc, #16]	; (800a798 <netif_set_default+0x1c>)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a78a:	bf00      	nop
 800a78c:	370c      	adds	r7, #12
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	2000d320 	.word	0x2000d320

0800a79c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d107      	bne.n	800a7ba <netif_set_up+0x1e>
 800a7aa:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <netif_set_up+0x4c>)
 800a7ac:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a7b0:	490e      	ldr	r1, [pc, #56]	; (800a7ec <netif_set_up+0x50>)
 800a7b2:	480f      	ldr	r0, [pc, #60]	; (800a7f0 <netif_set_up+0x54>)
 800a7b4:	f00a fb96 	bl	8014ee4 <iprintf>
 800a7b8:	e013      	b.n	800a7e2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a7c0:	f003 0301 	and.w	r3, r3, #1
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10c      	bne.n	800a7e2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a7ce:	f043 0301 	orr.w	r3, r3, #1
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a7da:	2103      	movs	r1, #3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f809 	bl	800a7f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	08016bfc 	.word	0x08016bfc
 800a7ec:	08016d84 	.word	0x08016d84
 800a7f0:	08016c4c 	.word	0x08016c4c

0800a7f4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d106      	bne.n	800a814 <netif_issue_reports+0x20>
 800a806:	4b18      	ldr	r3, [pc, #96]	; (800a868 <netif_issue_reports+0x74>)
 800a808:	f240 326d 	movw	r2, #877	; 0x36d
 800a80c:	4917      	ldr	r1, [pc, #92]	; (800a86c <netif_issue_reports+0x78>)
 800a80e:	4818      	ldr	r0, [pc, #96]	; (800a870 <netif_issue_reports+0x7c>)
 800a810:	f00a fb68 	bl	8014ee4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a81a:	f003 0304 	and.w	r3, r3, #4
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d01e      	beq.n	800a860 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a828:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d017      	beq.n	800a860 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a830:	78fb      	ldrb	r3, [r7, #3]
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	2b00      	cmp	r3, #0
 800a838:	d013      	beq.n	800a862 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	3304      	adds	r3, #4
 800a83e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00e      	beq.n	800a862 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a84a:	f003 0308 	and.w	r3, r3, #8
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d007      	beq.n	800a862 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	3304      	adds	r3, #4
 800a856:	4619      	mov	r1, r3
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f008 fbeb 	bl	8013034 <etharp_request>
 800a85e:	e000      	b.n	800a862 <netif_issue_reports+0x6e>
    return;
 800a860:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	08016bfc 	.word	0x08016bfc
 800a86c:	08016da0 	.word	0x08016da0
 800a870:	08016c4c 	.word	0x08016c4c

0800a874 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d107      	bne.n	800a892 <netif_set_down+0x1e>
 800a882:	4b12      	ldr	r3, [pc, #72]	; (800a8cc <netif_set_down+0x58>)
 800a884:	f240 329b 	movw	r2, #923	; 0x39b
 800a888:	4911      	ldr	r1, [pc, #68]	; (800a8d0 <netif_set_down+0x5c>)
 800a88a:	4812      	ldr	r0, [pc, #72]	; (800a8d4 <netif_set_down+0x60>)
 800a88c:	f00a fb2a 	bl	8014ee4 <iprintf>
 800a890:	e019      	b.n	800a8c6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d012      	beq.n	800a8c6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a8a6:	f023 0301 	bic.w	r3, r3, #1
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a8b8:	f003 0308 	and.w	r3, r3, #8
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f007 ff75 	bl	80127b0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	08016bfc 	.word	0x08016bfc
 800a8d0:	08016dc4 	.word	0x08016dc4
 800a8d4:	08016c4c 	.word	0x08016c4c

0800a8d8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	683a      	ldr	r2, [r7, #0]
 800a8ec:	61da      	str	r2, [r3, #28]
  }
}
 800a8ee:	bf00      	nop
 800a8f0:	370c      	adds	r7, #12
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b085      	sub	sp, #20
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	60f8      	str	r0, [r7, #12]
 800a902:	60b9      	str	r1, [r7, #8]
 800a904:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a906:	f06f 030b 	mvn.w	r3, #11
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
	...

0800a918 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	4603      	mov	r3, r0
 800a920:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a922:	79fb      	ldrb	r3, [r7, #7]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d013      	beq.n	800a950 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a928:	4b0d      	ldr	r3, [pc, #52]	; (800a960 <netif_get_by_index+0x48>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	60fb      	str	r3, [r7, #12]
 800a92e:	e00c      	b.n	800a94a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a936:	3301      	adds	r3, #1
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	79fa      	ldrb	r2, [r7, #7]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d101      	bne.n	800a944 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	e006      	b.n	800a952 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d1ef      	bne.n	800a930 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	2000d31c 	.word	0x2000d31c

0800a964 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a96a:	f00a f8ad 	bl	8014ac8 <sys_arch_protect>
 800a96e:	6038      	str	r0, [r7, #0]
 800a970:	4b0d      	ldr	r3, [pc, #52]	; (800a9a8 <pbuf_free_ooseq+0x44>)
 800a972:	2200      	movs	r2, #0
 800a974:	701a      	strb	r2, [r3, #0]
 800a976:	6838      	ldr	r0, [r7, #0]
 800a978:	f00a f8b4 	bl	8014ae4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a97c:	4b0b      	ldr	r3, [pc, #44]	; (800a9ac <pbuf_free_ooseq+0x48>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	607b      	str	r3, [r7, #4]
 800a982:	e00a      	b.n	800a99a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f002 fb89 	bl	800d0a4 <tcp_free_ooseq>
      return;
 800a992:	e005      	b.n	800a9a0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	607b      	str	r3, [r7, #4]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1f1      	bne.n	800a984 <pbuf_free_ooseq+0x20>
    }
  }
}
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	2000d324 	.word	0x2000d324
 800a9ac:	2000d32c 	.word	0x2000d32c

0800a9b0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a9b8:	f7ff ffd4 	bl	800a964 <pbuf_free_ooseq>
}
 800a9bc:	bf00      	nop
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a9ca:	f00a f87d 	bl	8014ac8 <sys_arch_protect>
 800a9ce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a9d0:	4b0f      	ldr	r3, [pc, #60]	; (800aa10 <pbuf_pool_is_empty+0x4c>)
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a9d6:	4b0e      	ldr	r3, [pc, #56]	; (800aa10 <pbuf_pool_is_empty+0x4c>)
 800a9d8:	2201      	movs	r2, #1
 800a9da:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f00a f881 	bl	8014ae4 <sys_arch_unprotect>

  if (!queued) {
 800a9e2:	78fb      	ldrb	r3, [r7, #3]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10f      	bne.n	800aa08 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	480a      	ldr	r0, [pc, #40]	; (800aa14 <pbuf_pool_is_empty+0x50>)
 800a9ec:	f7fe ff3a 	bl	8009864 <tcpip_try_callback>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d008      	beq.n	800aa08 <pbuf_pool_is_empty+0x44>
 800a9f6:	f00a f867 	bl	8014ac8 <sys_arch_protect>
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	4b04      	ldr	r3, [pc, #16]	; (800aa10 <pbuf_pool_is_empty+0x4c>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	701a      	strb	r2, [r3, #0]
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f00a f86e 	bl	8014ae4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800aa08:	bf00      	nop
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	2000d324 	.word	0x2000d324
 800aa14:	0800a9b1 	.word	0x0800a9b1

0800aa18 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	4611      	mov	r1, r2
 800aa24:	461a      	mov	r2, r3
 800aa26:	460b      	mov	r3, r1
 800aa28:	80fb      	strh	r3, [r7, #6]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	68ba      	ldr	r2, [r7, #8]
 800aa38:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	88fa      	ldrh	r2, [r7, #6]
 800aa3e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	88ba      	ldrh	r2, [r7, #4]
 800aa44:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800aa46:	8b3b      	ldrh	r3, [r7, #24]
 800aa48:	b2da      	uxtb	r2, r3
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	7f3a      	ldrb	r2, [r7, #28]
 800aa52:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2201      	movs	r2, #1
 800aa58:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	73da      	strb	r2, [r3, #15]
}
 800aa60:	bf00      	nop
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b08c      	sub	sp, #48	; 0x30
 800aa70:	af02      	add	r7, sp, #8
 800aa72:	4603      	mov	r3, r0
 800aa74:	71fb      	strb	r3, [r7, #7]
 800aa76:	460b      	mov	r3, r1
 800aa78:	80bb      	strh	r3, [r7, #4]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800aa7e:	79fb      	ldrb	r3, [r7, #7]
 800aa80:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800aa82:	887b      	ldrh	r3, [r7, #2]
 800aa84:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800aa88:	d07f      	beq.n	800ab8a <pbuf_alloc+0x11e>
 800aa8a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800aa8e:	f300 80c8 	bgt.w	800ac22 <pbuf_alloc+0x1b6>
 800aa92:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800aa96:	d010      	beq.n	800aaba <pbuf_alloc+0x4e>
 800aa98:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800aa9c:	f300 80c1 	bgt.w	800ac22 <pbuf_alloc+0x1b6>
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d002      	beq.n	800aaaa <pbuf_alloc+0x3e>
 800aaa4:	2b41      	cmp	r3, #65	; 0x41
 800aaa6:	f040 80bc 	bne.w	800ac22 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800aaaa:	887a      	ldrh	r2, [r7, #2]
 800aaac:	88bb      	ldrh	r3, [r7, #4]
 800aaae:	4619      	mov	r1, r3
 800aab0:	2000      	movs	r0, #0
 800aab2:	f000 f8d1 	bl	800ac58 <pbuf_alloc_reference>
 800aab6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800aab8:	e0bd      	b.n	800ac36 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800aaba:	2300      	movs	r3, #0
 800aabc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800aabe:	2300      	movs	r3, #0
 800aac0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800aac2:	88bb      	ldrh	r3, [r7, #4]
 800aac4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800aac6:	200c      	movs	r0, #12
 800aac8:	f7ff fc22 	bl	800a310 <memp_malloc>
 800aacc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d109      	bne.n	800aae8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800aad4:	f7ff ff76 	bl	800a9c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d002      	beq.n	800aae4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800aade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aae0:	f000 faa8 	bl	800b034 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800aae4:	2300      	movs	r3, #0
 800aae6:	e0a7      	b.n	800ac38 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800aae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aaea:	3303      	adds	r3, #3
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	f023 0303 	bic.w	r3, r3, #3
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	8b7a      	ldrh	r2, [r7, #26]
 800aafc:	4293      	cmp	r3, r2
 800aafe:	bf28      	it	cs
 800ab00:	4613      	movcs	r3, r2
 800ab02:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ab04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab06:	3310      	adds	r3, #16
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	3303      	adds	r3, #3
 800ab0e:	f023 0303 	bic.w	r3, r3, #3
 800ab12:	4618      	mov	r0, r3
 800ab14:	89f9      	ldrh	r1, [r7, #14]
 800ab16:	8b7a      	ldrh	r2, [r7, #26]
 800ab18:	2300      	movs	r3, #0
 800ab1a:	9301      	str	r3, [sp, #4]
 800ab1c:	887b      	ldrh	r3, [r7, #2]
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	460b      	mov	r3, r1
 800ab22:	4601      	mov	r1, r0
 800ab24:	6938      	ldr	r0, [r7, #16]
 800ab26:	f7ff ff77 	bl	800aa18 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f003 0303 	and.w	r3, r3, #3
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d006      	beq.n	800ab44 <pbuf_alloc+0xd8>
 800ab36:	4b42      	ldr	r3, [pc, #264]	; (800ac40 <pbuf_alloc+0x1d4>)
 800ab38:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab3c:	4941      	ldr	r1, [pc, #260]	; (800ac44 <pbuf_alloc+0x1d8>)
 800ab3e:	4842      	ldr	r0, [pc, #264]	; (800ac48 <pbuf_alloc+0x1dc>)
 800ab40:	f00a f9d0 	bl	8014ee4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ab44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab46:	3303      	adds	r3, #3
 800ab48:	f023 0303 	bic.w	r3, r3, #3
 800ab4c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ab50:	d106      	bne.n	800ab60 <pbuf_alloc+0xf4>
 800ab52:	4b3b      	ldr	r3, [pc, #236]	; (800ac40 <pbuf_alloc+0x1d4>)
 800ab54:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ab58:	493c      	ldr	r1, [pc, #240]	; (800ac4c <pbuf_alloc+0x1e0>)
 800ab5a:	483b      	ldr	r0, [pc, #236]	; (800ac48 <pbuf_alloc+0x1dc>)
 800ab5c:	f00a f9c2 	bl	8014ee4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d102      	bne.n	800ab6c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	627b      	str	r3, [r7, #36]	; 0x24
 800ab6a:	e002      	b.n	800ab72 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ab76:	8b7a      	ldrh	r2, [r7, #26]
 800ab78:	89fb      	ldrh	r3, [r7, #14]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ab82:	8b7b      	ldrh	r3, [r7, #26]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d19e      	bne.n	800aac6 <pbuf_alloc+0x5a>
      break;
 800ab88:	e055      	b.n	800ac36 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ab8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab8c:	3303      	adds	r3, #3
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	f023 0303 	bic.w	r3, r3, #3
 800ab94:	b29a      	uxth	r2, r3
 800ab96:	88bb      	ldrh	r3, [r7, #4]
 800ab98:	3303      	adds	r3, #3
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	f023 0303 	bic.w	r3, r3, #3
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	4413      	add	r3, r2
 800aba4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800aba6:	8b3b      	ldrh	r3, [r7, #24]
 800aba8:	3310      	adds	r3, #16
 800abaa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800abac:	8b3a      	ldrh	r2, [r7, #24]
 800abae:	88bb      	ldrh	r3, [r7, #4]
 800abb0:	3303      	adds	r3, #3
 800abb2:	f023 0303 	bic.w	r3, r3, #3
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d306      	bcc.n	800abc8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800abba:	8afa      	ldrh	r2, [r7, #22]
 800abbc:	88bb      	ldrh	r3, [r7, #4]
 800abbe:	3303      	adds	r3, #3
 800abc0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d201      	bcs.n	800abcc <pbuf_alloc+0x160>
        return NULL;
 800abc8:	2300      	movs	r3, #0
 800abca:	e035      	b.n	800ac38 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800abcc:	8afb      	ldrh	r3, [r7, #22]
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff fa1c 	bl	800a00c <mem_malloc>
 800abd4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <pbuf_alloc+0x174>
        return NULL;
 800abdc:	2300      	movs	r3, #0
 800abde:	e02b      	b.n	800ac38 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800abe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800abe2:	3310      	adds	r3, #16
 800abe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abe6:	4413      	add	r3, r2
 800abe8:	3303      	adds	r3, #3
 800abea:	f023 0303 	bic.w	r3, r3, #3
 800abee:	4618      	mov	r0, r3
 800abf0:	88b9      	ldrh	r1, [r7, #4]
 800abf2:	88ba      	ldrh	r2, [r7, #4]
 800abf4:	2300      	movs	r3, #0
 800abf6:	9301      	str	r3, [sp, #4]
 800abf8:	887b      	ldrh	r3, [r7, #2]
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	460b      	mov	r3, r1
 800abfe:	4601      	mov	r1, r0
 800ac00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac02:	f7ff ff09 	bl	800aa18 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	f003 0303 	and.w	r3, r3, #3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d010      	beq.n	800ac34 <pbuf_alloc+0x1c8>
 800ac12:	4b0b      	ldr	r3, [pc, #44]	; (800ac40 <pbuf_alloc+0x1d4>)
 800ac14:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ac18:	490d      	ldr	r1, [pc, #52]	; (800ac50 <pbuf_alloc+0x1e4>)
 800ac1a:	480b      	ldr	r0, [pc, #44]	; (800ac48 <pbuf_alloc+0x1dc>)
 800ac1c:	f00a f962 	bl	8014ee4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ac20:	e008      	b.n	800ac34 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ac22:	4b07      	ldr	r3, [pc, #28]	; (800ac40 <pbuf_alloc+0x1d4>)
 800ac24:	f240 1227 	movw	r2, #295	; 0x127
 800ac28:	490a      	ldr	r1, [pc, #40]	; (800ac54 <pbuf_alloc+0x1e8>)
 800ac2a:	4807      	ldr	r0, [pc, #28]	; (800ac48 <pbuf_alloc+0x1dc>)
 800ac2c:	f00a f95a 	bl	8014ee4 <iprintf>
      return NULL;
 800ac30:	2300      	movs	r3, #0
 800ac32:	e001      	b.n	800ac38 <pbuf_alloc+0x1cc>
      break;
 800ac34:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ac36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3728      	adds	r7, #40	; 0x28
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	08016e2c 	.word	0x08016e2c
 800ac44:	08016e5c 	.word	0x08016e5c
 800ac48:	08016e8c 	.word	0x08016e8c
 800ac4c:	08016eb4 	.word	0x08016eb4
 800ac50:	08016ee8 	.word	0x08016ee8
 800ac54:	08016f14 	.word	0x08016f14

0800ac58 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af02      	add	r7, sp, #8
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	460b      	mov	r3, r1
 800ac62:	807b      	strh	r3, [r7, #2]
 800ac64:	4613      	mov	r3, r2
 800ac66:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ac68:	883b      	ldrh	r3, [r7, #0]
 800ac6a:	2b41      	cmp	r3, #65	; 0x41
 800ac6c:	d009      	beq.n	800ac82 <pbuf_alloc_reference+0x2a>
 800ac6e:	883b      	ldrh	r3, [r7, #0]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d006      	beq.n	800ac82 <pbuf_alloc_reference+0x2a>
 800ac74:	4b0f      	ldr	r3, [pc, #60]	; (800acb4 <pbuf_alloc_reference+0x5c>)
 800ac76:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ac7a:	490f      	ldr	r1, [pc, #60]	; (800acb8 <pbuf_alloc_reference+0x60>)
 800ac7c:	480f      	ldr	r0, [pc, #60]	; (800acbc <pbuf_alloc_reference+0x64>)
 800ac7e:	f00a f931 	bl	8014ee4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ac82:	200b      	movs	r0, #11
 800ac84:	f7ff fb44 	bl	800a310 <memp_malloc>
 800ac88:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d101      	bne.n	800ac94 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ac90:	2300      	movs	r3, #0
 800ac92:	e00b      	b.n	800acac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ac94:	8879      	ldrh	r1, [r7, #2]
 800ac96:	887a      	ldrh	r2, [r7, #2]
 800ac98:	2300      	movs	r3, #0
 800ac9a:	9301      	str	r3, [sp, #4]
 800ac9c:	883b      	ldrh	r3, [r7, #0]
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	460b      	mov	r3, r1
 800aca2:	6879      	ldr	r1, [r7, #4]
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f7ff feb7 	bl	800aa18 <pbuf_init_alloced_pbuf>
  return p;
 800acaa:	68fb      	ldr	r3, [r7, #12]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	08016e2c 	.word	0x08016e2c
 800acb8:	08016f30 	.word	0x08016f30
 800acbc:	08016e8c 	.word	0x08016e8c

0800acc0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b088      	sub	sp, #32
 800acc4:	af02      	add	r7, sp, #8
 800acc6:	607b      	str	r3, [r7, #4]
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]
 800accc:	460b      	mov	r3, r1
 800acce:	81bb      	strh	r3, [r7, #12]
 800acd0:	4613      	mov	r3, r2
 800acd2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800acd8:	8a7b      	ldrh	r3, [r7, #18]
 800acda:	3303      	adds	r3, #3
 800acdc:	f023 0203 	bic.w	r2, r3, #3
 800ace0:	89bb      	ldrh	r3, [r7, #12]
 800ace2:	441a      	add	r2, r3
 800ace4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d901      	bls.n	800acee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800acea:	2300      	movs	r3, #0
 800acec:	e018      	b.n	800ad20 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d007      	beq.n	800ad04 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800acf4:	8a7b      	ldrh	r3, [r7, #18]
 800acf6:	3303      	adds	r3, #3
 800acf8:	f023 0303 	bic.w	r3, r3, #3
 800acfc:	6a3a      	ldr	r2, [r7, #32]
 800acfe:	4413      	add	r3, r2
 800ad00:	617b      	str	r3, [r7, #20]
 800ad02:	e001      	b.n	800ad08 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ad04:	2300      	movs	r3, #0
 800ad06:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	89b9      	ldrh	r1, [r7, #12]
 800ad0c:	89ba      	ldrh	r2, [r7, #12]
 800ad0e:	2302      	movs	r3, #2
 800ad10:	9301      	str	r3, [sp, #4]
 800ad12:	897b      	ldrh	r3, [r7, #10]
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	460b      	mov	r3, r1
 800ad18:	6979      	ldr	r1, [r7, #20]
 800ad1a:	f7ff fe7d 	bl	800aa18 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ad1e:	687b      	ldr	r3, [r7, #4]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d106      	bne.n	800ad48 <pbuf_realloc+0x20>
 800ad3a:	4b3a      	ldr	r3, [pc, #232]	; (800ae24 <pbuf_realloc+0xfc>)
 800ad3c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ad40:	4939      	ldr	r1, [pc, #228]	; (800ae28 <pbuf_realloc+0x100>)
 800ad42:	483a      	ldr	r0, [pc, #232]	; (800ae2c <pbuf_realloc+0x104>)
 800ad44:	f00a f8ce 	bl	8014ee4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	891b      	ldrh	r3, [r3, #8]
 800ad4c:	887a      	ldrh	r2, [r7, #2]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d263      	bcs.n	800ae1a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	891a      	ldrh	r2, [r3, #8]
 800ad56:	887b      	ldrh	r3, [r7, #2]
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ad5c:	887b      	ldrh	r3, [r7, #2]
 800ad5e:	817b      	strh	r3, [r7, #10]
  q = p;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ad64:	e018      	b.n	800ad98 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	895b      	ldrh	r3, [r3, #10]
 800ad6a:	897a      	ldrh	r2, [r7, #10]
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	891a      	ldrh	r2, [r3, #8]
 800ad74:	893b      	ldrh	r3, [r7, #8]
 800ad76:	1ad3      	subs	r3, r2, r3
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d106      	bne.n	800ad98 <pbuf_realloc+0x70>
 800ad8a:	4b26      	ldr	r3, [pc, #152]	; (800ae24 <pbuf_realloc+0xfc>)
 800ad8c:	f240 12af 	movw	r2, #431	; 0x1af
 800ad90:	4927      	ldr	r1, [pc, #156]	; (800ae30 <pbuf_realloc+0x108>)
 800ad92:	4826      	ldr	r0, [pc, #152]	; (800ae2c <pbuf_realloc+0x104>)
 800ad94:	f00a f8a6 	bl	8014ee4 <iprintf>
  while (rem_len > q->len) {
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	895b      	ldrh	r3, [r3, #10]
 800ad9c:	897a      	ldrh	r2, [r7, #10]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d8e1      	bhi.n	800ad66 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	7b1b      	ldrb	r3, [r3, #12]
 800ada6:	f003 030f 	and.w	r3, r3, #15
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d121      	bne.n	800adf2 <pbuf_realloc+0xca>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	895b      	ldrh	r3, [r3, #10]
 800adb2:	897a      	ldrh	r2, [r7, #10]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d01c      	beq.n	800adf2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	7b5b      	ldrb	r3, [r3, #13]
 800adbc:	f003 0302 	and.w	r3, r3, #2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d116      	bne.n	800adf2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	685a      	ldr	r2, [r3, #4]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	b29a      	uxth	r2, r3
 800adce:	897b      	ldrh	r3, [r7, #10]
 800add0:	4413      	add	r3, r2
 800add2:	b29b      	uxth	r3, r3
 800add4:	4619      	mov	r1, r3
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f7ff f80e 	bl	8009df8 <mem_trim>
 800addc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d106      	bne.n	800adf2 <pbuf_realloc+0xca>
 800ade4:	4b0f      	ldr	r3, [pc, #60]	; (800ae24 <pbuf_realloc+0xfc>)
 800ade6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800adea:	4912      	ldr	r1, [pc, #72]	; (800ae34 <pbuf_realloc+0x10c>)
 800adec:	480f      	ldr	r0, [pc, #60]	; (800ae2c <pbuf_realloc+0x104>)
 800adee:	f00a f879 	bl	8014ee4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	897a      	ldrh	r2, [r7, #10]
 800adf6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	895a      	ldrh	r2, [r3, #10]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d004      	beq.n	800ae12 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 f911 	bl	800b034 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	601a      	str	r2, [r3, #0]
 800ae18:	e000      	b.n	800ae1c <pbuf_realloc+0xf4>
    return;
 800ae1a:	bf00      	nop

}
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	08016e2c 	.word	0x08016e2c
 800ae28:	08016f44 	.word	0x08016f44
 800ae2c:	08016e8c 	.word	0x08016e8c
 800ae30:	08016f5c 	.word	0x08016f5c
 800ae34:	08016f74 	.word	0x08016f74

0800ae38 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	4613      	mov	r3, r2
 800ae44:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d106      	bne.n	800ae5a <pbuf_add_header_impl+0x22>
 800ae4c:	4b2b      	ldr	r3, [pc, #172]	; (800aefc <pbuf_add_header_impl+0xc4>)
 800ae4e:	f240 12df 	movw	r2, #479	; 0x1df
 800ae52:	492b      	ldr	r1, [pc, #172]	; (800af00 <pbuf_add_header_impl+0xc8>)
 800ae54:	482b      	ldr	r0, [pc, #172]	; (800af04 <pbuf_add_header_impl+0xcc>)
 800ae56:	f00a f845 	bl	8014ee4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d003      	beq.n	800ae68 <pbuf_add_header_impl+0x30>
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae66:	d301      	bcc.n	800ae6c <pbuf_add_header_impl+0x34>
    return 1;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e043      	b.n	800aef4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <pbuf_add_header_impl+0x3e>
    return 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	e03e      	b.n	800aef4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	891a      	ldrh	r2, [r3, #8]
 800ae7e:	8a7b      	ldrh	r3, [r7, #18]
 800ae80:	4413      	add	r3, r2
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	8a7a      	ldrh	r2, [r7, #18]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d901      	bls.n	800ae8e <pbuf_add_header_impl+0x56>
    return 1;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e032      	b.n	800aef4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	7b1b      	ldrb	r3, [r3, #12]
 800ae92:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ae94:	8a3b      	ldrh	r3, [r7, #16]
 800ae96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00c      	beq.n	800aeb8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	685a      	ldr	r2, [r3, #4]
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	425b      	negs	r3, r3
 800aea6:	4413      	add	r3, r2
 800aea8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3310      	adds	r3, #16
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d20d      	bcs.n	800aed0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e01d      	b.n	800aef4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800aeb8:	79fb      	ldrb	r3, [r7, #7]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d006      	beq.n	800aecc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	685a      	ldr	r2, [r3, #4]
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	425b      	negs	r3, r3
 800aec6:	4413      	add	r3, r2
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	e001      	b.n	800aed0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800aecc:	2301      	movs	r3, #1
 800aece:	e011      	b.n	800aef4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	895a      	ldrh	r2, [r3, #10]
 800aeda:	8a7b      	ldrh	r3, [r7, #18]
 800aedc:	4413      	add	r3, r2
 800aede:	b29a      	uxth	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	891a      	ldrh	r2, [r3, #8]
 800aee8:	8a7b      	ldrh	r3, [r7, #18]
 800aeea:	4413      	add	r3, r2
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	811a      	strh	r2, [r3, #8]


  return 0;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	08016e2c 	.word	0x08016e2c
 800af00:	08016f90 	.word	0x08016f90
 800af04:	08016e8c 	.word	0x08016e8c

0800af08 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800af12:	2200      	movs	r2, #0
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7ff ff8e 	bl	800ae38 <pbuf_add_header_impl>
 800af1c:	4603      	mov	r3, r0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d106      	bne.n	800af46 <pbuf_remove_header+0x1e>
 800af38:	4b20      	ldr	r3, [pc, #128]	; (800afbc <pbuf_remove_header+0x94>)
 800af3a:	f240 224b 	movw	r2, #587	; 0x24b
 800af3e:	4920      	ldr	r1, [pc, #128]	; (800afc0 <pbuf_remove_header+0x98>)
 800af40:	4820      	ldr	r0, [pc, #128]	; (800afc4 <pbuf_remove_header+0x9c>)
 800af42:	f009 ffcf 	bl	8014ee4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d003      	beq.n	800af54 <pbuf_remove_header+0x2c>
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af52:	d301      	bcc.n	800af58 <pbuf_remove_header+0x30>
    return 1;
 800af54:	2301      	movs	r3, #1
 800af56:	e02c      	b.n	800afb2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d101      	bne.n	800af62 <pbuf_remove_header+0x3a>
    return 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	e027      	b.n	800afb2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	895b      	ldrh	r3, [r3, #10]
 800af6a:	89fa      	ldrh	r2, [r7, #14]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d908      	bls.n	800af82 <pbuf_remove_header+0x5a>
 800af70:	4b12      	ldr	r3, [pc, #72]	; (800afbc <pbuf_remove_header+0x94>)
 800af72:	f240 2255 	movw	r2, #597	; 0x255
 800af76:	4914      	ldr	r1, [pc, #80]	; (800afc8 <pbuf_remove_header+0xa0>)
 800af78:	4812      	ldr	r0, [pc, #72]	; (800afc4 <pbuf_remove_header+0x9c>)
 800af7a:	f009 ffb3 	bl	8014ee4 <iprintf>
 800af7e:	2301      	movs	r3, #1
 800af80:	e017      	b.n	800afb2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	441a      	add	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	895a      	ldrh	r2, [r3, #10]
 800af98:	89fb      	ldrh	r3, [r7, #14]
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	891a      	ldrh	r2, [r3, #8]
 800afa6:	89fb      	ldrh	r3, [r7, #14]
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	b29a      	uxth	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3710      	adds	r7, #16
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	08016e2c 	.word	0x08016e2c
 800afc0:	08016f90 	.word	0x08016f90
 800afc4:	08016e8c 	.word	0x08016e8c
 800afc8:	08016f9c 	.word	0x08016f9c

0800afcc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	460b      	mov	r3, r1
 800afd6:	807b      	strh	r3, [r7, #2]
 800afd8:	4613      	mov	r3, r2
 800afda:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800afdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	da08      	bge.n	800aff6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800afe4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800afe8:	425b      	negs	r3, r3
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff ff9b 	bl	800af28 <pbuf_remove_header>
 800aff2:	4603      	mov	r3, r0
 800aff4:	e007      	b.n	800b006 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800aff6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800affa:	787a      	ldrb	r2, [r7, #1]
 800affc:	4619      	mov	r1, r3
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7ff ff1a 	bl	800ae38 <pbuf_add_header_impl>
 800b004:	4603      	mov	r3, r0
  }
}
 800b006:	4618      	mov	r0, r3
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b082      	sub	sp, #8
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
 800b016:	460b      	mov	r3, r1
 800b018:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b01a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b01e:	2201      	movs	r2, #1
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f7ff ffd2 	bl	800afcc <pbuf_header_impl>
 800b028:	4603      	mov	r3, r0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
	...

0800b034 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b088      	sub	sp, #32
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10b      	bne.n	800b05a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d106      	bne.n	800b056 <pbuf_free+0x22>
 800b048:	4b3b      	ldr	r3, [pc, #236]	; (800b138 <pbuf_free+0x104>)
 800b04a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b04e:	493b      	ldr	r1, [pc, #236]	; (800b13c <pbuf_free+0x108>)
 800b050:	483b      	ldr	r0, [pc, #236]	; (800b140 <pbuf_free+0x10c>)
 800b052:	f009 ff47 	bl	8014ee4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b056:	2300      	movs	r3, #0
 800b058:	e069      	b.n	800b12e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b05e:	e062      	b.n	800b126 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b060:	f009 fd32 	bl	8014ac8 <sys_arch_protect>
 800b064:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	7b9b      	ldrb	r3, [r3, #14]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d106      	bne.n	800b07c <pbuf_free+0x48>
 800b06e:	4b32      	ldr	r3, [pc, #200]	; (800b138 <pbuf_free+0x104>)
 800b070:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b074:	4933      	ldr	r1, [pc, #204]	; (800b144 <pbuf_free+0x110>)
 800b076:	4832      	ldr	r0, [pc, #200]	; (800b140 <pbuf_free+0x10c>)
 800b078:	f009 ff34 	bl	8014ee4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	7b9b      	ldrb	r3, [r3, #14]
 800b080:	3b01      	subs	r3, #1
 800b082:	b2da      	uxtb	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	739a      	strb	r2, [r3, #14]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	7b9b      	ldrb	r3, [r3, #14]
 800b08c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b08e:	69b8      	ldr	r0, [r7, #24]
 800b090:	f009 fd28 	bl	8014ae4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d143      	bne.n	800b122 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	7b1b      	ldrb	r3, [r3, #12]
 800b0a4:	f003 030f 	and.w	r3, r3, #15
 800b0a8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	7b5b      	ldrb	r3, [r3, #13]
 800b0ae:	f003 0302 	and.w	r3, r3, #2
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d011      	beq.n	800b0da <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d106      	bne.n	800b0d0 <pbuf_free+0x9c>
 800b0c2:	4b1d      	ldr	r3, [pc, #116]	; (800b138 <pbuf_free+0x104>)
 800b0c4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b0c8:	491f      	ldr	r1, [pc, #124]	; (800b148 <pbuf_free+0x114>)
 800b0ca:	481d      	ldr	r0, [pc, #116]	; (800b140 <pbuf_free+0x10c>)
 800b0cc:	f009 ff0a 	bl	8014ee4 <iprintf>
        pc->custom_free_function(p);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	4798      	blx	r3
 800b0d8:	e01d      	b.n	800b116 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d104      	bne.n	800b0ea <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b0e0:	6879      	ldr	r1, [r7, #4]
 800b0e2:	200c      	movs	r0, #12
 800b0e4:	f7ff f966 	bl	800a3b4 <memp_free>
 800b0e8:	e015      	b.n	800b116 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d104      	bne.n	800b0fa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b0f0:	6879      	ldr	r1, [r7, #4]
 800b0f2:	200b      	movs	r0, #11
 800b0f4:	f7ff f95e 	bl	800a3b4 <memp_free>
 800b0f8:	e00d      	b.n	800b116 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b0fa:	7bfb      	ldrb	r3, [r7, #15]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d103      	bne.n	800b108 <pbuf_free+0xd4>
          mem_free(p);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7fe fde9 	bl	8009cd8 <mem_free>
 800b106:	e006      	b.n	800b116 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b108:	4b0b      	ldr	r3, [pc, #44]	; (800b138 <pbuf_free+0x104>)
 800b10a:	f240 320f 	movw	r2, #783	; 0x30f
 800b10e:	490f      	ldr	r1, [pc, #60]	; (800b14c <pbuf_free+0x118>)
 800b110:	480b      	ldr	r0, [pc, #44]	; (800b140 <pbuf_free+0x10c>)
 800b112:	f009 fee7 	bl	8014ee4 <iprintf>
        }
      }
      count++;
 800b116:	7ffb      	ldrb	r3, [r7, #31]
 800b118:	3301      	adds	r3, #1
 800b11a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	607b      	str	r3, [r7, #4]
 800b120:	e001      	b.n	800b126 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b122:	2300      	movs	r3, #0
 800b124:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d199      	bne.n	800b060 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b12c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3720      	adds	r7, #32
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	08016e2c 	.word	0x08016e2c
 800b13c:	08016f90 	.word	0x08016f90
 800b140:	08016e8c 	.word	0x08016e8c
 800b144:	08016fbc 	.word	0x08016fbc
 800b148:	08016fd4 	.word	0x08016fd4
 800b14c:	08016ff8 	.word	0x08016ff8

0800b150 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b158:	2300      	movs	r3, #0
 800b15a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b15c:	e005      	b.n	800b16a <pbuf_clen+0x1a>
    ++len;
 800b15e:	89fb      	ldrh	r3, [r7, #14]
 800b160:	3301      	adds	r3, #1
 800b162:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1f6      	bne.n	800b15e <pbuf_clen+0xe>
  }
  return len;
 800b170:	89fb      	ldrh	r3, [r7, #14]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3714      	adds	r7, #20
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
	...

0800b180 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d016      	beq.n	800b1bc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b18e:	f009 fc9b 	bl	8014ac8 <sys_arch_protect>
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	7b9b      	ldrb	r3, [r3, #14]
 800b198:	3301      	adds	r3, #1
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	739a      	strb	r2, [r3, #14]
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f009 fc9f 	bl	8014ae4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	7b9b      	ldrb	r3, [r3, #14]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d106      	bne.n	800b1bc <pbuf_ref+0x3c>
 800b1ae:	4b05      	ldr	r3, [pc, #20]	; (800b1c4 <pbuf_ref+0x44>)
 800b1b0:	f240 3242 	movw	r2, #834	; 0x342
 800b1b4:	4904      	ldr	r1, [pc, #16]	; (800b1c8 <pbuf_ref+0x48>)
 800b1b6:	4805      	ldr	r0, [pc, #20]	; (800b1cc <pbuf_ref+0x4c>)
 800b1b8:	f009 fe94 	bl	8014ee4 <iprintf>
  }
}
 800b1bc:	bf00      	nop
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	08016e2c 	.word	0x08016e2c
 800b1c8:	0801700c 	.word	0x0801700c
 800b1cc:	08016e8c 	.word	0x08016e8c

0800b1d0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <pbuf_cat+0x16>
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d107      	bne.n	800b1f6 <pbuf_cat+0x26>
 800b1e6:	4b20      	ldr	r3, [pc, #128]	; (800b268 <pbuf_cat+0x98>)
 800b1e8:	f240 3259 	movw	r2, #857	; 0x359
 800b1ec:	491f      	ldr	r1, [pc, #124]	; (800b26c <pbuf_cat+0x9c>)
 800b1ee:	4820      	ldr	r0, [pc, #128]	; (800b270 <pbuf_cat+0xa0>)
 800b1f0:	f009 fe78 	bl	8014ee4 <iprintf>
 800b1f4:	e034      	b.n	800b260 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	60fb      	str	r3, [r7, #12]
 800b1fa:	e00a      	b.n	800b212 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	891a      	ldrh	r2, [r3, #8]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	891b      	ldrh	r3, [r3, #8]
 800b204:	4413      	add	r3, r2
 800b206:	b29a      	uxth	r2, r3
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	60fb      	str	r3, [r7, #12]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1f0      	bne.n	800b1fc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	891a      	ldrh	r2, [r3, #8]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	895b      	ldrh	r3, [r3, #10]
 800b222:	429a      	cmp	r2, r3
 800b224:	d006      	beq.n	800b234 <pbuf_cat+0x64>
 800b226:	4b10      	ldr	r3, [pc, #64]	; (800b268 <pbuf_cat+0x98>)
 800b228:	f240 3262 	movw	r2, #866	; 0x362
 800b22c:	4911      	ldr	r1, [pc, #68]	; (800b274 <pbuf_cat+0xa4>)
 800b22e:	4810      	ldr	r0, [pc, #64]	; (800b270 <pbuf_cat+0xa0>)
 800b230:	f009 fe58 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d006      	beq.n	800b24a <pbuf_cat+0x7a>
 800b23c:	4b0a      	ldr	r3, [pc, #40]	; (800b268 <pbuf_cat+0x98>)
 800b23e:	f240 3263 	movw	r2, #867	; 0x363
 800b242:	490d      	ldr	r1, [pc, #52]	; (800b278 <pbuf_cat+0xa8>)
 800b244:	480a      	ldr	r0, [pc, #40]	; (800b270 <pbuf_cat+0xa0>)
 800b246:	f009 fe4d 	bl	8014ee4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	891a      	ldrh	r2, [r3, #8]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	891b      	ldrh	r3, [r3, #8]
 800b252:	4413      	add	r3, r2
 800b254:	b29a      	uxth	r2, r3
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	08016e2c 	.word	0x08016e2c
 800b26c:	08017020 	.word	0x08017020
 800b270:	08016e8c 	.word	0x08016e8c
 800b274:	08017058 	.word	0x08017058
 800b278:	08017088 	.word	0x08017088

0800b27c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b286:	6839      	ldr	r1, [r7, #0]
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f7ff ffa1 	bl	800b1d0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b28e:	6838      	ldr	r0, [r7, #0]
 800b290:	f7ff ff76 	bl	800b180 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b294:	bf00      	nop
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	617b      	str	r3, [r7, #20]
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d008      	beq.n	800b2c6 <pbuf_copy+0x2a>
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d005      	beq.n	800b2c6 <pbuf_copy+0x2a>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	891a      	ldrh	r2, [r3, #8]
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	891b      	ldrh	r3, [r3, #8]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d209      	bcs.n	800b2da <pbuf_copy+0x3e>
 800b2c6:	4b57      	ldr	r3, [pc, #348]	; (800b424 <pbuf_copy+0x188>)
 800b2c8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b2cc:	4956      	ldr	r1, [pc, #344]	; (800b428 <pbuf_copy+0x18c>)
 800b2ce:	4857      	ldr	r0, [pc, #348]	; (800b42c <pbuf_copy+0x190>)
 800b2d0:	f009 fe08 	bl	8014ee4 <iprintf>
 800b2d4:	f06f 030f 	mvn.w	r3, #15
 800b2d8:	e09f      	b.n	800b41a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	895b      	ldrh	r3, [r3, #10]
 800b2de:	461a      	mov	r2, r3
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	1ad2      	subs	r2, r2, r3
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	895b      	ldrh	r3, [r3, #10]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	1acb      	subs	r3, r1, r3
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d306      	bcc.n	800b300 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	895b      	ldrh	r3, [r3, #10]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	60fb      	str	r3, [r7, #12]
 800b2fe:	e005      	b.n	800b30c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	895b      	ldrh	r3, [r3, #10]
 800b304:	461a      	mov	r2, r3
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	685a      	ldr	r2, [r3, #4]
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	18d0      	adds	r0, r2, r3
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	685a      	ldr	r2, [r3, #4]
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	4413      	add	r3, r2
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	4619      	mov	r1, r3
 800b320:	f009 fd20 	bl	8014d64 <memcpy>
    offset_to += len;
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	4413      	add	r3, r2
 800b32a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	4413      	add	r3, r2
 800b332:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	895b      	ldrh	r3, [r3, #10]
 800b338:	461a      	mov	r2, r3
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d906      	bls.n	800b34e <pbuf_copy+0xb2>
 800b340:	4b38      	ldr	r3, [pc, #224]	; (800b424 <pbuf_copy+0x188>)
 800b342:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b346:	493a      	ldr	r1, [pc, #232]	; (800b430 <pbuf_copy+0x194>)
 800b348:	4838      	ldr	r0, [pc, #224]	; (800b42c <pbuf_copy+0x190>)
 800b34a:	f009 fdcb 	bl	8014ee4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	895b      	ldrh	r3, [r3, #10]
 800b352:	461a      	mov	r2, r3
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	4293      	cmp	r3, r2
 800b358:	d906      	bls.n	800b368 <pbuf_copy+0xcc>
 800b35a:	4b32      	ldr	r3, [pc, #200]	; (800b424 <pbuf_copy+0x188>)
 800b35c:	f240 32da 	movw	r2, #986	; 0x3da
 800b360:	4934      	ldr	r1, [pc, #208]	; (800b434 <pbuf_copy+0x198>)
 800b362:	4832      	ldr	r0, [pc, #200]	; (800b42c <pbuf_copy+0x190>)
 800b364:	f009 fdbe 	bl	8014ee4 <iprintf>
    if (offset_from >= p_from->len) {
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	895b      	ldrh	r3, [r3, #10]
 800b36c:	461a      	mov	r2, r3
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	4293      	cmp	r3, r2
 800b372:	d304      	bcc.n	800b37e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	895b      	ldrh	r3, [r3, #10]
 800b382:	461a      	mov	r2, r3
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	4293      	cmp	r3, r2
 800b388:	d114      	bne.n	800b3b4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10c      	bne.n	800b3b4 <pbuf_copy+0x118>
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d009      	beq.n	800b3b4 <pbuf_copy+0x118>
 800b3a0:	4b20      	ldr	r3, [pc, #128]	; (800b424 <pbuf_copy+0x188>)
 800b3a2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b3a6:	4924      	ldr	r1, [pc, #144]	; (800b438 <pbuf_copy+0x19c>)
 800b3a8:	4820      	ldr	r0, [pc, #128]	; (800b42c <pbuf_copy+0x190>)
 800b3aa:	f009 fd9b 	bl	8014ee4 <iprintf>
 800b3ae:	f06f 030f 	mvn.w	r3, #15
 800b3b2:	e032      	b.n	800b41a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d013      	beq.n	800b3e2 <pbuf_copy+0x146>
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	895a      	ldrh	r2, [r3, #10]
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	891b      	ldrh	r3, [r3, #8]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d10d      	bne.n	800b3e2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d009      	beq.n	800b3e2 <pbuf_copy+0x146>
 800b3ce:	4b15      	ldr	r3, [pc, #84]	; (800b424 <pbuf_copy+0x188>)
 800b3d0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b3d4:	4919      	ldr	r1, [pc, #100]	; (800b43c <pbuf_copy+0x1a0>)
 800b3d6:	4815      	ldr	r0, [pc, #84]	; (800b42c <pbuf_copy+0x190>)
 800b3d8:	f009 fd84 	bl	8014ee4 <iprintf>
 800b3dc:	f06f 0305 	mvn.w	r3, #5
 800b3e0:	e01b      	b.n	800b41a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d013      	beq.n	800b410 <pbuf_copy+0x174>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	895a      	ldrh	r2, [r3, #10]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	891b      	ldrh	r3, [r3, #8]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d10d      	bne.n	800b410 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d009      	beq.n	800b410 <pbuf_copy+0x174>
 800b3fc:	4b09      	ldr	r3, [pc, #36]	; (800b424 <pbuf_copy+0x188>)
 800b3fe:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b402:	490e      	ldr	r1, [pc, #56]	; (800b43c <pbuf_copy+0x1a0>)
 800b404:	4809      	ldr	r0, [pc, #36]	; (800b42c <pbuf_copy+0x190>)
 800b406:	f009 fd6d 	bl	8014ee4 <iprintf>
 800b40a:	f06f 0305 	mvn.w	r3, #5
 800b40e:	e004      	b.n	800b41a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	f47f af61 	bne.w	800b2da <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3718      	adds	r7, #24
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	08016e2c 	.word	0x08016e2c
 800b428:	080170d4 	.word	0x080170d4
 800b42c:	08016e8c 	.word	0x08016e8c
 800b430:	08017104 	.word	0x08017104
 800b434:	0801711c 	.word	0x0801711c
 800b438:	08017138 	.word	0x08017138
 800b43c:	08017148 	.word	0x08017148

0800b440 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b088      	sub	sp, #32
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	4611      	mov	r1, r2
 800b44c:	461a      	mov	r2, r3
 800b44e:	460b      	mov	r3, r1
 800b450:	80fb      	strh	r3, [r7, #6]
 800b452:	4613      	mov	r3, r2
 800b454:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b456:	2300      	movs	r3, #0
 800b458:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d108      	bne.n	800b476 <pbuf_copy_partial+0x36>
 800b464:	4b2b      	ldr	r3, [pc, #172]	; (800b514 <pbuf_copy_partial+0xd4>)
 800b466:	f240 420a 	movw	r2, #1034	; 0x40a
 800b46a:	492b      	ldr	r1, [pc, #172]	; (800b518 <pbuf_copy_partial+0xd8>)
 800b46c:	482b      	ldr	r0, [pc, #172]	; (800b51c <pbuf_copy_partial+0xdc>)
 800b46e:	f009 fd39 	bl	8014ee4 <iprintf>
 800b472:	2300      	movs	r3, #0
 800b474:	e04a      	b.n	800b50c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d108      	bne.n	800b48e <pbuf_copy_partial+0x4e>
 800b47c:	4b25      	ldr	r3, [pc, #148]	; (800b514 <pbuf_copy_partial+0xd4>)
 800b47e:	f240 420b 	movw	r2, #1035	; 0x40b
 800b482:	4927      	ldr	r1, [pc, #156]	; (800b520 <pbuf_copy_partial+0xe0>)
 800b484:	4825      	ldr	r0, [pc, #148]	; (800b51c <pbuf_copy_partial+0xdc>)
 800b486:	f009 fd2d 	bl	8014ee4 <iprintf>
 800b48a:	2300      	movs	r3, #0
 800b48c:	e03e      	b.n	800b50c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	61fb      	str	r3, [r7, #28]
 800b492:	e034      	b.n	800b4fe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b494:	88bb      	ldrh	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00a      	beq.n	800b4b0 <pbuf_copy_partial+0x70>
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	895b      	ldrh	r3, [r3, #10]
 800b49e:	88ba      	ldrh	r2, [r7, #4]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d305      	bcc.n	800b4b0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	895b      	ldrh	r3, [r3, #10]
 800b4a8:	88ba      	ldrh	r2, [r7, #4]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	80bb      	strh	r3, [r7, #4]
 800b4ae:	e023      	b.n	800b4f8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	895a      	ldrh	r2, [r3, #10]
 800b4b4:	88bb      	ldrh	r3, [r7, #4]
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b4ba:	8b3a      	ldrh	r2, [r7, #24]
 800b4bc:	88fb      	ldrh	r3, [r7, #6]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d901      	bls.n	800b4c6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b4c2:	88fb      	ldrh	r3, [r7, #6]
 800b4c4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b4c6:	8b7b      	ldrh	r3, [r7, #26]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	18d0      	adds	r0, r2, r3
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	685a      	ldr	r2, [r3, #4]
 800b4d0:	88bb      	ldrh	r3, [r7, #4]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	8b3a      	ldrh	r2, [r7, #24]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	f009 fc44 	bl	8014d64 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b4dc:	8afa      	ldrh	r2, [r7, #22]
 800b4de:	8b3b      	ldrh	r3, [r7, #24]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b4e4:	8b7a      	ldrh	r2, [r7, #26]
 800b4e6:	8b3b      	ldrh	r3, [r7, #24]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b4ec:	88fa      	ldrh	r2, [r7, #6]
 800b4ee:	8b3b      	ldrh	r3, [r7, #24]
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	61fb      	str	r3, [r7, #28]
 800b4fe:	88fb      	ldrh	r3, [r7, #6]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <pbuf_copy_partial+0xca>
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1c4      	bne.n	800b494 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b50a:	8afb      	ldrh	r3, [r7, #22]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3720      	adds	r7, #32
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	08016e2c 	.word	0x08016e2c
 800b518:	08017174 	.word	0x08017174
 800b51c:	08016e8c 	.word	0x08016e8c
 800b520:	08017194 	.word	0x08017194

0800b524 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	4603      	mov	r3, r0
 800b52c:	603a      	str	r2, [r7, #0]
 800b52e:	71fb      	strb	r3, [r7, #7]
 800b530:	460b      	mov	r3, r1
 800b532:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	8919      	ldrh	r1, [r3, #8]
 800b538:	88ba      	ldrh	r2, [r7, #4]
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff fa95 	bl	800aa6c <pbuf_alloc>
 800b542:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <pbuf_clone+0x2a>
    return NULL;
 800b54a:	2300      	movs	r3, #0
 800b54c:	e011      	b.n	800b572 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b54e:	6839      	ldr	r1, [r7, #0]
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f7ff fea3 	bl	800b29c <pbuf_copy>
 800b556:	4603      	mov	r3, r0
 800b558:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b55a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d006      	beq.n	800b570 <pbuf_clone+0x4c>
 800b562:	4b06      	ldr	r3, [pc, #24]	; (800b57c <pbuf_clone+0x58>)
 800b564:	f240 5224 	movw	r2, #1316	; 0x524
 800b568:	4905      	ldr	r1, [pc, #20]	; (800b580 <pbuf_clone+0x5c>)
 800b56a:	4806      	ldr	r0, [pc, #24]	; (800b584 <pbuf_clone+0x60>)
 800b56c:	f009 fcba 	bl	8014ee4 <iprintf>
  return q;
 800b570:	68fb      	ldr	r3, [r7, #12]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	08016e2c 	.word	0x08016e2c
 800b580:	080172a0 	.word	0x080172a0
 800b584:	08016e8c 	.word	0x08016e8c

0800b588 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b58c:	f009 fcc2 	bl	8014f14 <rand>
 800b590:	4603      	mov	r3, r0
 800b592:	b29b      	uxth	r3, r3
 800b594:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b598:	b29b      	uxth	r3, r3
 800b59a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	4b01      	ldr	r3, [pc, #4]	; (800b5a8 <tcp_init+0x20>)
 800b5a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b5a4:	bf00      	nop
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	20000014 	.word	0x20000014

0800b5ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	7d1b      	ldrb	r3, [r3, #20]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d105      	bne.n	800b5c8 <tcp_free+0x1c>
 800b5bc:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <tcp_free+0x2c>)
 800b5be:	22d4      	movs	r2, #212	; 0xd4
 800b5c0:	4906      	ldr	r1, [pc, #24]	; (800b5dc <tcp_free+0x30>)
 800b5c2:	4807      	ldr	r0, [pc, #28]	; (800b5e0 <tcp_free+0x34>)
 800b5c4:	f009 fc8e 	bl	8014ee4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b5c8:	6879      	ldr	r1, [r7, #4]
 800b5ca:	2001      	movs	r0, #1
 800b5cc:	f7fe fef2 	bl	800a3b4 <memp_free>
}
 800b5d0:	bf00      	nop
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	0801732c 	.word	0x0801732c
 800b5dc:	0801735c 	.word	0x0801735c
 800b5e0:	08017370 	.word	0x08017370

0800b5e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	7d1b      	ldrb	r3, [r3, #20]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d105      	bne.n	800b600 <tcp_free_listen+0x1c>
 800b5f4:	4b06      	ldr	r3, [pc, #24]	; (800b610 <tcp_free_listen+0x2c>)
 800b5f6:	22df      	movs	r2, #223	; 0xdf
 800b5f8:	4906      	ldr	r1, [pc, #24]	; (800b614 <tcp_free_listen+0x30>)
 800b5fa:	4807      	ldr	r0, [pc, #28]	; (800b618 <tcp_free_listen+0x34>)
 800b5fc:	f009 fc72 	bl	8014ee4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b600:	6879      	ldr	r1, [r7, #4]
 800b602:	2002      	movs	r0, #2
 800b604:	f7fe fed6 	bl	800a3b4 <memp_free>
}
 800b608:	bf00      	nop
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	0801732c 	.word	0x0801732c
 800b614:	08017398 	.word	0x08017398
 800b618:	08017370 	.word	0x08017370

0800b61c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b620:	f000 ffdc 	bl	800c5dc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b624:	4b07      	ldr	r3, [pc, #28]	; (800b644 <tcp_tmr+0x28>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	3301      	adds	r3, #1
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	4b05      	ldr	r3, [pc, #20]	; (800b644 <tcp_tmr+0x28>)
 800b62e:	701a      	strb	r2, [r3, #0]
 800b630:	4b04      	ldr	r3, [pc, #16]	; (800b644 <tcp_tmr+0x28>)
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	f003 0301 	and.w	r3, r3, #1
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d001      	beq.n	800b640 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b63c:	f000 fc8e 	bl	800bf5c <tcp_slowtmr>
  }
}
 800b640:	bf00      	nop
 800b642:	bd80      	pop	{r7, pc}
 800b644:	20006845 	.word	0x20006845

0800b648 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d105      	bne.n	800b664 <tcp_remove_listener+0x1c>
 800b658:	4b0d      	ldr	r3, [pc, #52]	; (800b690 <tcp_remove_listener+0x48>)
 800b65a:	22ff      	movs	r2, #255	; 0xff
 800b65c:	490d      	ldr	r1, [pc, #52]	; (800b694 <tcp_remove_listener+0x4c>)
 800b65e:	480e      	ldr	r0, [pc, #56]	; (800b698 <tcp_remove_listener+0x50>)
 800b660:	f009 fc40 	bl	8014ee4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	60fb      	str	r3, [r7, #12]
 800b668:	e00a      	b.n	800b680 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	429a      	cmp	r2, r3
 800b672:	d102      	bne.n	800b67a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	60fb      	str	r3, [r7, #12]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1f1      	bne.n	800b66a <tcp_remove_listener+0x22>
    }
  }
}
 800b686:	bf00      	nop
 800b688:	bf00      	nop
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	0801732c 	.word	0x0801732c
 800b694:	080173b4 	.word	0x080173b4
 800b698:	08017370 	.word	0x08017370

0800b69c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d106      	bne.n	800b6b8 <tcp_listen_closed+0x1c>
 800b6aa:	4b14      	ldr	r3, [pc, #80]	; (800b6fc <tcp_listen_closed+0x60>)
 800b6ac:	f240 1211 	movw	r2, #273	; 0x111
 800b6b0:	4913      	ldr	r1, [pc, #76]	; (800b700 <tcp_listen_closed+0x64>)
 800b6b2:	4814      	ldr	r0, [pc, #80]	; (800b704 <tcp_listen_closed+0x68>)
 800b6b4:	f009 fc16 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	7d1b      	ldrb	r3, [r3, #20]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d006      	beq.n	800b6ce <tcp_listen_closed+0x32>
 800b6c0:	4b0e      	ldr	r3, [pc, #56]	; (800b6fc <tcp_listen_closed+0x60>)
 800b6c2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b6c6:	4910      	ldr	r1, [pc, #64]	; (800b708 <tcp_listen_closed+0x6c>)
 800b6c8:	480e      	ldr	r0, [pc, #56]	; (800b704 <tcp_listen_closed+0x68>)
 800b6ca:	f009 fc0b 	bl	8014ee4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	e00b      	b.n	800b6ec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b6d4:	4a0d      	ldr	r2, [pc, #52]	; (800b70c <tcp_listen_closed+0x70>)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	6879      	ldr	r1, [r7, #4]
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7ff ffb1 	bl	800b648 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	60fb      	str	r3, [r7, #12]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d9f0      	bls.n	800b6d4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b6f2:	bf00      	nop
 800b6f4:	bf00      	nop
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	0801732c 	.word	0x0801732c
 800b700:	080173dc 	.word	0x080173dc
 800b704:	08017370 	.word	0x08017370
 800b708:	080173e8 	.word	0x080173e8
 800b70c:	08019344 	.word	0x08019344

0800b710 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b710:	b5b0      	push	{r4, r5, r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af04      	add	r7, sp, #16
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	460b      	mov	r3, r1
 800b71a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <tcp_close_shutdown+0x20>
 800b722:	4b63      	ldr	r3, [pc, #396]	; (800b8b0 <tcp_close_shutdown+0x1a0>)
 800b724:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b728:	4962      	ldr	r1, [pc, #392]	; (800b8b4 <tcp_close_shutdown+0x1a4>)
 800b72a:	4863      	ldr	r0, [pc, #396]	; (800b8b8 <tcp_close_shutdown+0x1a8>)
 800b72c:	f009 fbda 	bl	8014ee4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b730:	78fb      	ldrb	r3, [r7, #3]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d066      	beq.n	800b804 <tcp_close_shutdown+0xf4>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	7d1b      	ldrb	r3, [r3, #20]
 800b73a:	2b04      	cmp	r3, #4
 800b73c:	d003      	beq.n	800b746 <tcp_close_shutdown+0x36>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	7d1b      	ldrb	r3, [r3, #20]
 800b742:	2b07      	cmp	r3, #7
 800b744:	d15e      	bne.n	800b804 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d104      	bne.n	800b758 <tcp_close_shutdown+0x48>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b752:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b756:	d055      	beq.n	800b804 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	8b5b      	ldrh	r3, [r3, #26]
 800b75c:	f003 0310 	and.w	r3, r3, #16
 800b760:	2b00      	cmp	r3, #0
 800b762:	d106      	bne.n	800b772 <tcp_close_shutdown+0x62>
 800b764:	4b52      	ldr	r3, [pc, #328]	; (800b8b0 <tcp_close_shutdown+0x1a0>)
 800b766:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b76a:	4954      	ldr	r1, [pc, #336]	; (800b8bc <tcp_close_shutdown+0x1ac>)
 800b76c:	4852      	ldr	r0, [pc, #328]	; (800b8b8 <tcp_close_shutdown+0x1a8>)
 800b76e:	f009 fbb9 	bl	8014ee4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b77a:	687d      	ldr	r5, [r7, #4]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	3304      	adds	r3, #4
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	8ad2      	ldrh	r2, [r2, #22]
 800b784:	6879      	ldr	r1, [r7, #4]
 800b786:	8b09      	ldrh	r1, [r1, #24]
 800b788:	9102      	str	r1, [sp, #8]
 800b78a:	9201      	str	r2, [sp, #4]
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	462b      	mov	r3, r5
 800b790:	4622      	mov	r2, r4
 800b792:	4601      	mov	r1, r0
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f005 fced 	bl	8011174 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f001 face 	bl	800cd3c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b7a0:	4b47      	ldr	r3, [pc, #284]	; (800b8c0 <tcp_close_shutdown+0x1b0>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d105      	bne.n	800b7b6 <tcp_close_shutdown+0xa6>
 800b7aa:	4b45      	ldr	r3, [pc, #276]	; (800b8c0 <tcp_close_shutdown+0x1b0>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	4a43      	ldr	r2, [pc, #268]	; (800b8c0 <tcp_close_shutdown+0x1b0>)
 800b7b2:	6013      	str	r3, [r2, #0]
 800b7b4:	e013      	b.n	800b7de <tcp_close_shutdown+0xce>
 800b7b6:	4b42      	ldr	r3, [pc, #264]	; (800b8c0 <tcp_close_shutdown+0x1b0>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	60fb      	str	r3, [r7, #12]
 800b7bc:	e00c      	b.n	800b7d8 <tcp_close_shutdown+0xc8>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d104      	bne.n	800b7d2 <tcp_close_shutdown+0xc2>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	68da      	ldr	r2, [r3, #12]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	60da      	str	r2, [r3, #12]
 800b7d0:	e005      	b.n	800b7de <tcp_close_shutdown+0xce>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1ef      	bne.n	800b7be <tcp_close_shutdown+0xae>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	60da      	str	r2, [r3, #12]
 800b7e4:	4b37      	ldr	r3, [pc, #220]	; (800b8c4 <tcp_close_shutdown+0x1b4>)
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b7ea:	4b37      	ldr	r3, [pc, #220]	; (800b8c8 <tcp_close_shutdown+0x1b8>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d102      	bne.n	800b7fa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b7f4:	f003 ff62 	bl	800f6bc <tcp_trigger_input_pcb_close>
 800b7f8:	e002      	b.n	800b800 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7ff fed6 	bl	800b5ac <tcp_free>
      }
      return ERR_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	e050      	b.n	800b8a6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	7d1b      	ldrb	r3, [r3, #20]
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d03b      	beq.n	800b884 <tcp_close_shutdown+0x174>
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	dc44      	bgt.n	800b89a <tcp_close_shutdown+0x18a>
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <tcp_close_shutdown+0x10a>
 800b814:	2b01      	cmp	r3, #1
 800b816:	d02a      	beq.n	800b86e <tcp_close_shutdown+0x15e>
 800b818:	e03f      	b.n	800b89a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	8adb      	ldrh	r3, [r3, #22]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d021      	beq.n	800b866 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b822:	4b2a      	ldr	r3, [pc, #168]	; (800b8cc <tcp_close_shutdown+0x1bc>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d105      	bne.n	800b838 <tcp_close_shutdown+0x128>
 800b82c:	4b27      	ldr	r3, [pc, #156]	; (800b8cc <tcp_close_shutdown+0x1bc>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	4a26      	ldr	r2, [pc, #152]	; (800b8cc <tcp_close_shutdown+0x1bc>)
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	e013      	b.n	800b860 <tcp_close_shutdown+0x150>
 800b838:	4b24      	ldr	r3, [pc, #144]	; (800b8cc <tcp_close_shutdown+0x1bc>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	60bb      	str	r3, [r7, #8]
 800b83e:	e00c      	b.n	800b85a <tcp_close_shutdown+0x14a>
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	429a      	cmp	r2, r3
 800b848:	d104      	bne.n	800b854 <tcp_close_shutdown+0x144>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68da      	ldr	r2, [r3, #12]
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	60da      	str	r2, [r3, #12]
 800b852:	e005      	b.n	800b860 <tcp_close_shutdown+0x150>
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	60bb      	str	r3, [r7, #8]
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1ef      	bne.n	800b840 <tcp_close_shutdown+0x130>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7ff fea0 	bl	800b5ac <tcp_free>
      break;
 800b86c:	e01a      	b.n	800b8a4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff ff14 	bl	800b69c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b874:	6879      	ldr	r1, [r7, #4]
 800b876:	4816      	ldr	r0, [pc, #88]	; (800b8d0 <tcp_close_shutdown+0x1c0>)
 800b878:	f001 fab0 	bl	800cddc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f7ff feb1 	bl	800b5e4 <tcp_free_listen>
      break;
 800b882:	e00f      	b.n	800b8a4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b884:	6879      	ldr	r1, [r7, #4]
 800b886:	480e      	ldr	r0, [pc, #56]	; (800b8c0 <tcp_close_shutdown+0x1b0>)
 800b888:	f001 faa8 	bl	800cddc <tcp_pcb_remove>
 800b88c:	4b0d      	ldr	r3, [pc, #52]	; (800b8c4 <tcp_close_shutdown+0x1b4>)
 800b88e:	2201      	movs	r2, #1
 800b890:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff fe8a 	bl	800b5ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b898:	e004      	b.n	800b8a4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f81a 	bl	800b8d4 <tcp_close_shutdown_fin>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	e000      	b.n	800b8a6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	0801732c 	.word	0x0801732c
 800b8b4:	08017400 	.word	0x08017400
 800b8b8:	08017370 	.word	0x08017370
 800b8bc:	08017420 	.word	0x08017420
 800b8c0:	2000d32c 	.word	0x2000d32c
 800b8c4:	2000d328 	.word	0x2000d328
 800b8c8:	2000d340 	.word	0x2000d340
 800b8cc:	2000d338 	.word	0x2000d338
 800b8d0:	2000d334 	.word	0x2000d334

0800b8d4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d106      	bne.n	800b8f0 <tcp_close_shutdown_fin+0x1c>
 800b8e2:	4b2e      	ldr	r3, [pc, #184]	; (800b99c <tcp_close_shutdown_fin+0xc8>)
 800b8e4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b8e8:	492d      	ldr	r1, [pc, #180]	; (800b9a0 <tcp_close_shutdown_fin+0xcc>)
 800b8ea:	482e      	ldr	r0, [pc, #184]	; (800b9a4 <tcp_close_shutdown_fin+0xd0>)
 800b8ec:	f009 fafa 	bl	8014ee4 <iprintf>

  switch (pcb->state) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	7d1b      	ldrb	r3, [r3, #20]
 800b8f4:	2b07      	cmp	r3, #7
 800b8f6:	d020      	beq.n	800b93a <tcp_close_shutdown_fin+0x66>
 800b8f8:	2b07      	cmp	r3, #7
 800b8fa:	dc2b      	bgt.n	800b954 <tcp_close_shutdown_fin+0x80>
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d002      	beq.n	800b906 <tcp_close_shutdown_fin+0x32>
 800b900:	2b04      	cmp	r3, #4
 800b902:	d00d      	beq.n	800b920 <tcp_close_shutdown_fin+0x4c>
 800b904:	e026      	b.n	800b954 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f004 fd42 	bl	8010390 <tcp_send_fin>
 800b90c:	4603      	mov	r3, r0
 800b90e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d11f      	bne.n	800b958 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2205      	movs	r2, #5
 800b91c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b91e:	e01b      	b.n	800b958 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f004 fd35 	bl	8010390 <tcp_send_fin>
 800b926:	4603      	mov	r3, r0
 800b928:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b92a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d114      	bne.n	800b95c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2205      	movs	r2, #5
 800b936:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b938:	e010      	b.n	800b95c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f004 fd28 	bl	8010390 <tcp_send_fin>
 800b940:	4603      	mov	r3, r0
 800b942:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d109      	bne.n	800b960 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2209      	movs	r2, #9
 800b950:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b952:	e005      	b.n	800b960 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b954:	2300      	movs	r3, #0
 800b956:	e01c      	b.n	800b992 <tcp_close_shutdown_fin+0xbe>
      break;
 800b958:	bf00      	nop
 800b95a:	e002      	b.n	800b962 <tcp_close_shutdown_fin+0x8e>
      break;
 800b95c:	bf00      	nop
 800b95e:	e000      	b.n	800b962 <tcp_close_shutdown_fin+0x8e>
      break;
 800b960:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d103      	bne.n	800b972 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f004 fe4e 	bl	801060c <tcp_output>
 800b970:	e00d      	b.n	800b98e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97a:	d108      	bne.n	800b98e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	8b5b      	ldrh	r3, [r3, #26]
 800b980:	f043 0308 	orr.w	r3, r3, #8
 800b984:	b29a      	uxth	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	e001      	b.n	800b992 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	0801732c 	.word	0x0801732c
 800b9a0:	080173dc 	.word	0x080173dc
 800b9a4:	08017370 	.word	0x08017370

0800b9a8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d109      	bne.n	800b9ca <tcp_close+0x22>
 800b9b6:	4b0f      	ldr	r3, [pc, #60]	; (800b9f4 <tcp_close+0x4c>)
 800b9b8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b9bc:	490e      	ldr	r1, [pc, #56]	; (800b9f8 <tcp_close+0x50>)
 800b9be:	480f      	ldr	r0, [pc, #60]	; (800b9fc <tcp_close+0x54>)
 800b9c0:	f009 fa90 	bl	8014ee4 <iprintf>
 800b9c4:	f06f 030f 	mvn.w	r3, #15
 800b9c8:	e00f      	b.n	800b9ea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	7d1b      	ldrb	r3, [r3, #20]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d006      	beq.n	800b9e0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	8b5b      	ldrh	r3, [r3, #26]
 800b9d6:	f043 0310 	orr.w	r3, r3, #16
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b9e0:	2101      	movs	r1, #1
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7ff fe94 	bl	800b710 <tcp_close_shutdown>
 800b9e8:	4603      	mov	r3, r0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	0801732c 	.word	0x0801732c
 800b9f8:	0801743c 	.word	0x0801743c
 800b9fc:	08017370 	.word	0x08017370

0800ba00 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d109      	bne.n	800ba26 <tcp_shutdown+0x26>
 800ba12:	4b26      	ldr	r3, [pc, #152]	; (800baac <tcp_shutdown+0xac>)
 800ba14:	f240 2207 	movw	r2, #519	; 0x207
 800ba18:	4925      	ldr	r1, [pc, #148]	; (800bab0 <tcp_shutdown+0xb0>)
 800ba1a:	4826      	ldr	r0, [pc, #152]	; (800bab4 <tcp_shutdown+0xb4>)
 800ba1c:	f009 fa62 	bl	8014ee4 <iprintf>
 800ba20:	f06f 030f 	mvn.w	r3, #15
 800ba24:	e03d      	b.n	800baa2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	7d1b      	ldrb	r3, [r3, #20]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d102      	bne.n	800ba34 <tcp_shutdown+0x34>
    return ERR_CONN;
 800ba2e:	f06f 030a 	mvn.w	r3, #10
 800ba32:	e036      	b.n	800baa2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d01b      	beq.n	800ba72 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	8b5b      	ldrh	r3, [r3, #26]
 800ba3e:	f043 0310 	orr.w	r3, r3, #16
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d005      	beq.n	800ba5a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ba4e:	2101      	movs	r1, #1
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f7ff fe5d 	bl	800b710 <tcp_close_shutdown>
 800ba56:	4603      	mov	r3, r0
 800ba58:	e023      	b.n	800baa2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d007      	beq.n	800ba72 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff fae4 	bl	800b034 <pbuf_free>
      pcb->refused_data = NULL;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d013      	beq.n	800baa0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	7d1b      	ldrb	r3, [r3, #20]
 800ba7c:	2b04      	cmp	r3, #4
 800ba7e:	dc02      	bgt.n	800ba86 <tcp_shutdown+0x86>
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	da02      	bge.n	800ba8a <tcp_shutdown+0x8a>
 800ba84:	e009      	b.n	800ba9a <tcp_shutdown+0x9a>
 800ba86:	2b07      	cmp	r3, #7
 800ba88:	d107      	bne.n	800ba9a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	4619      	mov	r1, r3
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f7ff fe3d 	bl	800b710 <tcp_close_shutdown>
 800ba96:	4603      	mov	r3, r0
 800ba98:	e003      	b.n	800baa2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800ba9a:	f06f 030a 	mvn.w	r3, #10
 800ba9e:	e000      	b.n	800baa2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	0801732c 	.word	0x0801732c
 800bab0:	08017454 	.word	0x08017454
 800bab4:	08017370 	.word	0x08017370

0800bab8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b08e      	sub	sp, #56	; 0x38
 800babc:	af04      	add	r7, sp, #16
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d107      	bne.n	800bad8 <tcp_abandon+0x20>
 800bac8:	4b52      	ldr	r3, [pc, #328]	; (800bc14 <tcp_abandon+0x15c>)
 800baca:	f240 223d 	movw	r2, #573	; 0x23d
 800bace:	4952      	ldr	r1, [pc, #328]	; (800bc18 <tcp_abandon+0x160>)
 800bad0:	4852      	ldr	r0, [pc, #328]	; (800bc1c <tcp_abandon+0x164>)
 800bad2:	f009 fa07 	bl	8014ee4 <iprintf>
 800bad6:	e099      	b.n	800bc0c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	7d1b      	ldrb	r3, [r3, #20]
 800badc:	2b01      	cmp	r3, #1
 800bade:	d106      	bne.n	800baee <tcp_abandon+0x36>
 800bae0:	4b4c      	ldr	r3, [pc, #304]	; (800bc14 <tcp_abandon+0x15c>)
 800bae2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bae6:	494e      	ldr	r1, [pc, #312]	; (800bc20 <tcp_abandon+0x168>)
 800bae8:	484c      	ldr	r0, [pc, #304]	; (800bc1c <tcp_abandon+0x164>)
 800baea:	f009 f9fb 	bl	8014ee4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	7d1b      	ldrb	r3, [r3, #20]
 800baf2:	2b0a      	cmp	r3, #10
 800baf4:	d107      	bne.n	800bb06 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800baf6:	6879      	ldr	r1, [r7, #4]
 800baf8:	484a      	ldr	r0, [pc, #296]	; (800bc24 <tcp_abandon+0x16c>)
 800bafa:	f001 f96f 	bl	800cddc <tcp_pcb_remove>
    tcp_free(pcb);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7ff fd54 	bl	800b5ac <tcp_free>
 800bb04:	e082      	b.n	800bc0c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bb06:	2300      	movs	r3, #0
 800bb08:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb12:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb18:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb20:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	7d1b      	ldrb	r3, [r3, #20]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d126      	bne.n	800bb7e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	8adb      	ldrh	r3, [r3, #22]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d02e      	beq.n	800bb96 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bb38:	4b3b      	ldr	r3, [pc, #236]	; (800bc28 <tcp_abandon+0x170>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d105      	bne.n	800bb4e <tcp_abandon+0x96>
 800bb42:	4b39      	ldr	r3, [pc, #228]	; (800bc28 <tcp_abandon+0x170>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	4a37      	ldr	r2, [pc, #220]	; (800bc28 <tcp_abandon+0x170>)
 800bb4a:	6013      	str	r3, [r2, #0]
 800bb4c:	e013      	b.n	800bb76 <tcp_abandon+0xbe>
 800bb4e:	4b36      	ldr	r3, [pc, #216]	; (800bc28 <tcp_abandon+0x170>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	61fb      	str	r3, [r7, #28]
 800bb54:	e00c      	b.n	800bb70 <tcp_abandon+0xb8>
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d104      	bne.n	800bb6a <tcp_abandon+0xb2>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	68da      	ldr	r2, [r3, #12]
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	60da      	str	r2, [r3, #12]
 800bb68:	e005      	b.n	800bb76 <tcp_abandon+0xbe>
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	61fb      	str	r3, [r7, #28]
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1ef      	bne.n	800bb56 <tcp_abandon+0x9e>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	60da      	str	r2, [r3, #12]
 800bb7c:	e00b      	b.n	800bb96 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	8adb      	ldrh	r3, [r3, #22]
 800bb86:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bb88:	6879      	ldr	r1, [r7, #4]
 800bb8a:	4828      	ldr	r0, [pc, #160]	; (800bc2c <tcp_abandon+0x174>)
 800bb8c:	f001 f926 	bl	800cddc <tcp_pcb_remove>
 800bb90:	4b27      	ldr	r3, [pc, #156]	; (800bc30 <tcp_abandon+0x178>)
 800bb92:	2201      	movs	r2, #1
 800bb94:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d004      	beq.n	800bba8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 fdfa 	bl	800c79c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d004      	beq.n	800bbba <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f000 fdf1 	bl	800c79c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d004      	beq.n	800bbcc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f000 fde8 	bl	800c79c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00e      	beq.n	800bbf0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bbd2:	6879      	ldr	r1, [r7, #4]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	8b12      	ldrh	r2, [r2, #24]
 800bbdc:	9202      	str	r2, [sp, #8]
 800bbde:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bbe0:	9201      	str	r2, [sp, #4]
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	69b9      	ldr	r1, [r7, #24]
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f005 fac2 	bl	8011174 <tcp_rst>
    }
    last_state = pcb->state;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	7d1b      	ldrb	r3, [r3, #20]
 800bbf4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7ff fcd8 	bl	800b5ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d004      	beq.n	800bc0c <tcp_abandon+0x154>
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	f06f 010c 	mvn.w	r1, #12
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	4798      	blx	r3
  }
}
 800bc0c:	3728      	adds	r7, #40	; 0x28
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	0801732c 	.word	0x0801732c
 800bc18:	08017470 	.word	0x08017470
 800bc1c:	08017370 	.word	0x08017370
 800bc20:	0801748c 	.word	0x0801748c
 800bc24:	2000d33c 	.word	0x2000d33c
 800bc28:	2000d338 	.word	0x2000d338
 800bc2c:	2000d32c 	.word	0x2000d32c
 800bc30:	2000d328 	.word	0x2000d328

0800bc34 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f7ff ff3a 	bl	800bab8 <tcp_abandon>
}
 800bc44:	bf00      	nop
 800bc46:	3708      	adds	r7, #8
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b088      	sub	sp, #32
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	4613      	mov	r3, r2
 800bc58:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800bc5a:	2304      	movs	r3, #4
 800bc5c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d101      	bne.n	800bc68 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800bc64:	4b3e      	ldr	r3, [pc, #248]	; (800bd60 <tcp_bind+0x114>)
 800bc66:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d109      	bne.n	800bc82 <tcp_bind+0x36>
 800bc6e:	4b3d      	ldr	r3, [pc, #244]	; (800bd64 <tcp_bind+0x118>)
 800bc70:	f240 22a9 	movw	r2, #681	; 0x2a9
 800bc74:	493c      	ldr	r1, [pc, #240]	; (800bd68 <tcp_bind+0x11c>)
 800bc76:	483d      	ldr	r0, [pc, #244]	; (800bd6c <tcp_bind+0x120>)
 800bc78:	f009 f934 	bl	8014ee4 <iprintf>
 800bc7c:	f06f 030f 	mvn.w	r3, #15
 800bc80:	e06a      	b.n	800bd58 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	7d1b      	ldrb	r3, [r3, #20]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d009      	beq.n	800bc9e <tcp_bind+0x52>
 800bc8a:	4b36      	ldr	r3, [pc, #216]	; (800bd64 <tcp_bind+0x118>)
 800bc8c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800bc90:	4937      	ldr	r1, [pc, #220]	; (800bd70 <tcp_bind+0x124>)
 800bc92:	4836      	ldr	r0, [pc, #216]	; (800bd6c <tcp_bind+0x120>)
 800bc94:	f009 f926 	bl	8014ee4 <iprintf>
 800bc98:	f06f 0305 	mvn.w	r3, #5
 800bc9c:	e05c      	b.n	800bd58 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800bc9e:	88fb      	ldrh	r3, [r7, #6]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d109      	bne.n	800bcb8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800bca4:	f000 f914 	bl	800bed0 <tcp_new_port>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800bcac:	88fb      	ldrh	r3, [r7, #6]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d135      	bne.n	800bd1e <tcp_bind+0xd2>
      return ERR_BUF;
 800bcb2:	f06f 0301 	mvn.w	r3, #1
 800bcb6:	e04f      	b.n	800bd58 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800bcb8:	2300      	movs	r3, #0
 800bcba:	61fb      	str	r3, [r7, #28]
 800bcbc:	e02b      	b.n	800bd16 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800bcbe:	4a2d      	ldr	r2, [pc, #180]	; (800bd74 <tcp_bind+0x128>)
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	61bb      	str	r3, [r7, #24]
 800bcca:	e01e      	b.n	800bd0a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	8adb      	ldrh	r3, [r3, #22]
 800bcd0:	88fa      	ldrh	r2, [r7, #6]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d116      	bne.n	800bd04 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800bcd6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d010      	beq.n	800bcfe <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00c      	beq.n	800bcfe <tcp_bind+0xb2>
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d009      	beq.n	800bcfe <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d005      	beq.n	800bcfe <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d102      	bne.n	800bd04 <tcp_bind+0xb8>
              return ERR_USE;
 800bcfe:	f06f 0307 	mvn.w	r3, #7
 800bd02:	e029      	b.n	800bd58 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	61bb      	str	r3, [r7, #24]
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1dd      	bne.n	800bccc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	3301      	adds	r3, #1
 800bd14:	61fb      	str	r3, [r7, #28]
 800bd16:	69fa      	ldr	r2, [r7, #28]
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	dbcf      	blt.n	800bcbe <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00c      	beq.n	800bd3e <tcp_bind+0xf2>
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d008      	beq.n	800bd3e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d002      	beq.n	800bd38 <tcp_bind+0xec>
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	e000      	b.n	800bd3a <tcp_bind+0xee>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	88fa      	ldrh	r2, [r7, #6]
 800bd42:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800bd44:	4b0c      	ldr	r3, [pc, #48]	; (800bd78 <tcp_bind+0x12c>)
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	60da      	str	r2, [r3, #12]
 800bd4c:	4a0a      	ldr	r2, [pc, #40]	; (800bd78 <tcp_bind+0x12c>)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	f005 fbd1 	bl	80114f8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3720      	adds	r7, #32
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	0801936c 	.word	0x0801936c
 800bd64:	0801732c 	.word	0x0801732c
 800bd68:	080174c0 	.word	0x080174c0
 800bd6c:	08017370 	.word	0x08017370
 800bd70:	080174d8 	.word	0x080174d8
 800bd74:	08019344 	.word	0x08019344
 800bd78:	2000d338 	.word	0x2000d338

0800bd7c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d106      	bne.n	800bd98 <tcp_update_rcv_ann_wnd+0x1c>
 800bd8a:	4b25      	ldr	r3, [pc, #148]	; (800be20 <tcp_update_rcv_ann_wnd+0xa4>)
 800bd8c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800bd90:	4924      	ldr	r1, [pc, #144]	; (800be24 <tcp_update_rcv_ann_wnd+0xa8>)
 800bd92:	4825      	ldr	r0, [pc, #148]	; (800be28 <tcp_update_rcv_ann_wnd+0xac>)
 800bd94:	f009 f8a6 	bl	8014ee4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800bda0:	4413      	add	r3, r2
 800bda2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800bdac:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800bdb0:	bf28      	it	cs
 800bdb2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800bdb6:	b292      	uxth	r2, r2
 800bdb8:	4413      	add	r3, r2
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	db08      	blt.n	800bdd4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	e020      	b.n	800be16 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	dd03      	ble.n	800bdea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bde8:	e014      	b.n	800be14 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf2:	1ad3      	subs	r3, r2, r3
 800bdf4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdfc:	d306      	bcc.n	800be0c <tcp_update_rcv_ann_wnd+0x90>
 800bdfe:	4b08      	ldr	r3, [pc, #32]	; (800be20 <tcp_update_rcv_ann_wnd+0xa4>)
 800be00:	f240 32b6 	movw	r2, #950	; 0x3b6
 800be04:	4909      	ldr	r1, [pc, #36]	; (800be2c <tcp_update_rcv_ann_wnd+0xb0>)
 800be06:	4808      	ldr	r0, [pc, #32]	; (800be28 <tcp_update_rcv_ann_wnd+0xac>)
 800be08:	f009 f86c 	bl	8014ee4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	b29a      	uxth	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800be14:	2300      	movs	r3, #0
  }
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	0801732c 	.word	0x0801732c
 800be24:	08017588 	.word	0x08017588
 800be28:	08017370 	.word	0x08017370
 800be2c:	080175ac 	.word	0x080175ac

0800be30 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	460b      	mov	r3, r1
 800be3a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d107      	bne.n	800be52 <tcp_recved+0x22>
 800be42:	4b1f      	ldr	r3, [pc, #124]	; (800bec0 <tcp_recved+0x90>)
 800be44:	f240 32cf 	movw	r2, #975	; 0x3cf
 800be48:	491e      	ldr	r1, [pc, #120]	; (800bec4 <tcp_recved+0x94>)
 800be4a:	481f      	ldr	r0, [pc, #124]	; (800bec8 <tcp_recved+0x98>)
 800be4c:	f009 f84a 	bl	8014ee4 <iprintf>
 800be50:	e032      	b.n	800beb8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	7d1b      	ldrb	r3, [r3, #20]
 800be56:	2b01      	cmp	r3, #1
 800be58:	d106      	bne.n	800be68 <tcp_recved+0x38>
 800be5a:	4b19      	ldr	r3, [pc, #100]	; (800bec0 <tcp_recved+0x90>)
 800be5c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800be60:	491a      	ldr	r1, [pc, #104]	; (800becc <tcp_recved+0x9c>)
 800be62:	4819      	ldr	r0, [pc, #100]	; (800bec8 <tcp_recved+0x98>)
 800be64:	f009 f83e 	bl	8014ee4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800be6c:	887b      	ldrh	r3, [r7, #2]
 800be6e:	4413      	add	r3, r2
 800be70:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800be72:	89fb      	ldrh	r3, [r7, #14]
 800be74:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800be78:	d804      	bhi.n	800be84 <tcp_recved+0x54>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be7e:	89fa      	ldrh	r2, [r7, #14]
 800be80:	429a      	cmp	r2, r3
 800be82:	d204      	bcs.n	800be8e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800be8a:	851a      	strh	r2, [r3, #40]	; 0x28
 800be8c:	e002      	b.n	800be94 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	89fa      	ldrh	r2, [r7, #14]
 800be92:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f7ff ff71 	bl	800bd7c <tcp_update_rcv_ann_wnd>
 800be9a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bea2:	d309      	bcc.n	800beb8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	8b5b      	ldrh	r3, [r3, #26]
 800bea8:	f043 0302 	orr.w	r3, r3, #2
 800beac:	b29a      	uxth	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f004 fbaa 	bl	801060c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	0801732c 	.word	0x0801732c
 800bec4:	080175c8 	.word	0x080175c8
 800bec8:	08017370 	.word	0x08017370
 800becc:	080175e0 	.word	0x080175e0

0800bed0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800beda:	4b1e      	ldr	r3, [pc, #120]	; (800bf54 <tcp_new_port+0x84>)
 800bedc:	881b      	ldrh	r3, [r3, #0]
 800bede:	3301      	adds	r3, #1
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	4b1c      	ldr	r3, [pc, #112]	; (800bf54 <tcp_new_port+0x84>)
 800bee4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800bee6:	4b1b      	ldr	r3, [pc, #108]	; (800bf54 <tcp_new_port+0x84>)
 800bee8:	881b      	ldrh	r3, [r3, #0]
 800beea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beee:	4293      	cmp	r3, r2
 800bef0:	d103      	bne.n	800befa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800bef2:	4b18      	ldr	r3, [pc, #96]	; (800bf54 <tcp_new_port+0x84>)
 800bef4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800bef8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800befa:	2300      	movs	r3, #0
 800befc:	71fb      	strb	r3, [r7, #7]
 800befe:	e01e      	b.n	800bf3e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800bf00:	79fb      	ldrb	r3, [r7, #7]
 800bf02:	4a15      	ldr	r2, [pc, #84]	; (800bf58 <tcp_new_port+0x88>)
 800bf04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	e011      	b.n	800bf32 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	8ada      	ldrh	r2, [r3, #22]
 800bf12:	4b10      	ldr	r3, [pc, #64]	; (800bf54 <tcp_new_port+0x84>)
 800bf14:	881b      	ldrh	r3, [r3, #0]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d108      	bne.n	800bf2c <tcp_new_port+0x5c>
        n++;
 800bf1a:	88bb      	ldrh	r3, [r7, #4]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800bf20:	88bb      	ldrh	r3, [r7, #4]
 800bf22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf26:	d3d8      	bcc.n	800beda <tcp_new_port+0xa>
          return 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	e00d      	b.n	800bf48 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	603b      	str	r3, [r7, #0]
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1ea      	bne.n	800bf0e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800bf38:	79fb      	ldrb	r3, [r7, #7]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	71fb      	strb	r3, [r7, #7]
 800bf3e:	79fb      	ldrb	r3, [r7, #7]
 800bf40:	2b03      	cmp	r3, #3
 800bf42:	d9dd      	bls.n	800bf00 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800bf44:	4b03      	ldr	r3, [pc, #12]	; (800bf54 <tcp_new_port+0x84>)
 800bf46:	881b      	ldrh	r3, [r3, #0]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	20000014 	.word	0x20000014
 800bf58:	08019344 	.word	0x08019344

0800bf5c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bf5c:	b5b0      	push	{r4, r5, r7, lr}
 800bf5e:	b090      	sub	sp, #64	; 0x40
 800bf60:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800bf68:	4b94      	ldr	r3, [pc, #592]	; (800c1bc <tcp_slowtmr+0x260>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	4a93      	ldr	r2, [pc, #588]	; (800c1bc <tcp_slowtmr+0x260>)
 800bf70:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800bf72:	4b93      	ldr	r3, [pc, #588]	; (800c1c0 <tcp_slowtmr+0x264>)
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	3301      	adds	r3, #1
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	4b91      	ldr	r3, [pc, #580]	; (800c1c0 <tcp_slowtmr+0x264>)
 800bf7c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800bf82:	4b90      	ldr	r3, [pc, #576]	; (800c1c4 <tcp_slowtmr+0x268>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800bf88:	e29f      	b.n	800c4ca <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	7d1b      	ldrb	r3, [r3, #20]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d106      	bne.n	800bfa0 <tcp_slowtmr+0x44>
 800bf92:	4b8d      	ldr	r3, [pc, #564]	; (800c1c8 <tcp_slowtmr+0x26c>)
 800bf94:	f240 42be 	movw	r2, #1214	; 0x4be
 800bf98:	498c      	ldr	r1, [pc, #560]	; (800c1cc <tcp_slowtmr+0x270>)
 800bf9a:	488d      	ldr	r0, [pc, #564]	; (800c1d0 <tcp_slowtmr+0x274>)
 800bf9c:	f008 ffa2 	bl	8014ee4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa2:	7d1b      	ldrb	r3, [r3, #20]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d106      	bne.n	800bfb6 <tcp_slowtmr+0x5a>
 800bfa8:	4b87      	ldr	r3, [pc, #540]	; (800c1c8 <tcp_slowtmr+0x26c>)
 800bfaa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800bfae:	4989      	ldr	r1, [pc, #548]	; (800c1d4 <tcp_slowtmr+0x278>)
 800bfb0:	4887      	ldr	r0, [pc, #540]	; (800c1d0 <tcp_slowtmr+0x274>)
 800bfb2:	f008 ff97 	bl	8014ee4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb8:	7d1b      	ldrb	r3, [r3, #20]
 800bfba:	2b0a      	cmp	r3, #10
 800bfbc:	d106      	bne.n	800bfcc <tcp_slowtmr+0x70>
 800bfbe:	4b82      	ldr	r3, [pc, #520]	; (800c1c8 <tcp_slowtmr+0x26c>)
 800bfc0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800bfc4:	4984      	ldr	r1, [pc, #528]	; (800c1d8 <tcp_slowtmr+0x27c>)
 800bfc6:	4882      	ldr	r0, [pc, #520]	; (800c1d0 <tcp_slowtmr+0x274>)
 800bfc8:	f008 ff8c 	bl	8014ee4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	7f9a      	ldrb	r2, [r3, #30]
 800bfd0:	4b7b      	ldr	r3, [pc, #492]	; (800c1c0 <tcp_slowtmr+0x264>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d105      	bne.n	800bfe4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800bfe2:	e272      	b.n	800c4ca <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800bfe4:	4b76      	ldr	r3, [pc, #472]	; (800c1c0 <tcp_slowtmr+0x264>)
 800bfe6:	781a      	ldrb	r2, [r3, #0]
 800bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfea:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800bfec:	2300      	movs	r3, #0
 800bfee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffa:	7d1b      	ldrb	r3, [r3, #20]
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d10a      	bne.n	800c016 <tcp_slowtmr+0xba>
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c006:	2b05      	cmp	r3, #5
 800c008:	d905      	bls.n	800c016 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c00a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c00e:	3301      	adds	r3, #1
 800c010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c014:	e11e      	b.n	800c254 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c018:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c01c:	2b0b      	cmp	r3, #11
 800c01e:	d905      	bls.n	800c02c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c024:	3301      	adds	r3, #1
 800c026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c02a:	e113      	b.n	800c254 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c032:	2b00      	cmp	r3, #0
 800c034:	d075      	beq.n	800c122 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d006      	beq.n	800c04c <tcp_slowtmr+0xf0>
 800c03e:	4b62      	ldr	r3, [pc, #392]	; (800c1c8 <tcp_slowtmr+0x26c>)
 800c040:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c044:	4965      	ldr	r1, [pc, #404]	; (800c1dc <tcp_slowtmr+0x280>)
 800c046:	4862      	ldr	r0, [pc, #392]	; (800c1d0 <tcp_slowtmr+0x274>)
 800c048:	f008 ff4c 	bl	8014ee4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c050:	2b00      	cmp	r3, #0
 800c052:	d106      	bne.n	800c062 <tcp_slowtmr+0x106>
 800c054:	4b5c      	ldr	r3, [pc, #368]	; (800c1c8 <tcp_slowtmr+0x26c>)
 800c056:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c05a:	4961      	ldr	r1, [pc, #388]	; (800c1e0 <tcp_slowtmr+0x284>)
 800c05c:	485c      	ldr	r0, [pc, #368]	; (800c1d0 <tcp_slowtmr+0x274>)
 800c05e:	f008 ff41 	bl	8014ee4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c064:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c068:	2b0b      	cmp	r3, #11
 800c06a:	d905      	bls.n	800c078 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c06c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c070:	3301      	adds	r3, #1
 800c072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c076:	e0ed      	b.n	800c254 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c07e:	3b01      	subs	r3, #1
 800c080:	4a58      	ldr	r2, [pc, #352]	; (800c1e4 <tcp_slowtmr+0x288>)
 800c082:	5cd3      	ldrb	r3, [r2, r3]
 800c084:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c088:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c08c:	7c7a      	ldrb	r2, [r7, #17]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d907      	bls.n	800c0a2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c094:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c098:	3301      	adds	r3, #1
 800c09a:	b2da      	uxtb	r2, r3
 800c09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c0a8:	7c7a      	ldrb	r2, [r7, #17]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	f200 80d2 	bhi.w	800c254 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d108      	bne.n	800c0d0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c0be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0c0:	f005 f94c 	bl	801135c <tcp_zero_window_probe>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d014      	beq.n	800c0f4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	623b      	str	r3, [r7, #32]
 800c0ce:	e011      	b.n	800c0f4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0da:	f004 f811 	bl	8010100 <tcp_split_unsent_seg>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d107      	bne.n	800c0f4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c0e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0e6:	f004 fa91 	bl	801060c <tcp_output>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d101      	bne.n	800c0f4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c0f4:	6a3b      	ldr	r3, [r7, #32]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f000 80ac 	beq.w	800c254 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c106:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c10a:	2b06      	cmp	r3, #6
 800c10c:	f200 80a2 	bhi.w	800c254 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c116:	3301      	adds	r3, #1
 800c118:	b2da      	uxtb	r2, r3
 800c11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c120:	e098      	b.n	800c254 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c124:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c128:	2b00      	cmp	r3, #0
 800c12a:	db0f      	blt.n	800c14c <tcp_slowtmr+0x1f0>
 800c12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c132:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c136:	4293      	cmp	r3, r2
 800c138:	d008      	beq.n	800c14c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c140:	b29b      	uxth	r3, r3
 800c142:	3301      	adds	r3, #1
 800c144:	b29b      	uxth	r3, r3
 800c146:	b21a      	sxth	r2, r3
 800c148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c154:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c158:	429a      	cmp	r2, r3
 800c15a:	db7b      	blt.n	800c254 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c15c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c15e:	f004 fd47 	bl	8010bf0 <tcp_rexmit_rto_prepare>
 800c162:	4603      	mov	r3, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d007      	beq.n	800c178 <tcp_slowtmr+0x21c>
 800c168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d171      	bne.n	800c254 <tcp_slowtmr+0x2f8>
 800c170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c174:	2b00      	cmp	r3, #0
 800c176:	d06d      	beq.n	800c254 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17a:	7d1b      	ldrb	r3, [r3, #20]
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d03a      	beq.n	800c1f6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c182:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c186:	2b0c      	cmp	r3, #12
 800c188:	bf28      	it	cs
 800c18a:	230c      	movcs	r3, #12
 800c18c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c190:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c194:	10db      	asrs	r3, r3, #3
 800c196:	b21b      	sxth	r3, r3
 800c198:	461a      	mov	r2, r3
 800c19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c1a0:	4413      	add	r3, r2
 800c1a2:	7efa      	ldrb	r2, [r7, #27]
 800c1a4:	4910      	ldr	r1, [pc, #64]	; (800c1e8 <tcp_slowtmr+0x28c>)
 800c1a6:	5c8a      	ldrb	r2, [r1, r2]
 800c1a8:	4093      	lsls	r3, r2
 800c1aa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	dc1a      	bgt.n	800c1ec <tcp_slowtmr+0x290>
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	b21a      	sxth	r2, r3
 800c1ba:	e019      	b.n	800c1f0 <tcp_slowtmr+0x294>
 800c1bc:	2000d330 	.word	0x2000d330
 800c1c0:	20006846 	.word	0x20006846
 800c1c4:	2000d32c 	.word	0x2000d32c
 800c1c8:	0801732c 	.word	0x0801732c
 800c1cc:	08017670 	.word	0x08017670
 800c1d0:	08017370 	.word	0x08017370
 800c1d4:	0801769c 	.word	0x0801769c
 800c1d8:	080176c8 	.word	0x080176c8
 800c1dc:	080176f8 	.word	0x080176f8
 800c1e0:	0801772c 	.word	0x0801772c
 800c1e4:	0801933c 	.word	0x0801933c
 800c1e8:	0801932c 	.word	0x0801932c
 800c1ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c208:	4293      	cmp	r3, r2
 800c20a:	bf28      	it	cs
 800c20c:	4613      	movcs	r3, r2
 800c20e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c210:	8a7b      	ldrh	r3, [r7, #18]
 800c212:	085b      	lsrs	r3, r3, #1
 800c214:	b29a      	uxth	r2, r3
 800c216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c218:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c224:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c226:	005b      	lsls	r3, r3, #1
 800c228:	b29b      	uxth	r3, r3
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d206      	bcs.n	800c23c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c230:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c232:	005b      	lsls	r3, r3, #1
 800c234:	b29a      	uxth	r2, r3
 800c236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c238:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c242:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c248:	2200      	movs	r2, #0
 800c24a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c24e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c250:	f004 fd3e 	bl	8010cd0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c256:	7d1b      	ldrb	r3, [r3, #20]
 800c258:	2b06      	cmp	r3, #6
 800c25a:	d111      	bne.n	800c280 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25e:	8b5b      	ldrh	r3, [r3, #26]
 800c260:	f003 0310 	and.w	r3, r3, #16
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00b      	beq.n	800c280 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c268:	4b9d      	ldr	r3, [pc, #628]	; (800c4e0 <tcp_slowtmr+0x584>)
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26e:	6a1b      	ldr	r3, [r3, #32]
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	2b28      	cmp	r3, #40	; 0x28
 800c274:	d904      	bls.n	800c280 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c27a:	3301      	adds	r3, #1
 800c27c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c282:	7a5b      	ldrb	r3, [r3, #9]
 800c284:	f003 0308 	and.w	r3, r3, #8
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d04c      	beq.n	800c326 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c290:	2b04      	cmp	r3, #4
 800c292:	d003      	beq.n	800c29c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c296:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c298:	2b07      	cmp	r3, #7
 800c29a:	d144      	bne.n	800c326 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c29c:	4b90      	ldr	r3, [pc, #576]	; (800c4e0 <tcp_slowtmr+0x584>)
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a2:	6a1b      	ldr	r3, [r3, #32]
 800c2a4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2ac:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c2b0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c2b4:	498b      	ldr	r1, [pc, #556]	; (800c4e4 <tcp_slowtmr+0x588>)
 800c2b6:	fba1 1303 	umull	r1, r3, r1, r3
 800c2ba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d90a      	bls.n	800c2d6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c2ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c2d4:	e027      	b.n	800c326 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c2d6:	4b82      	ldr	r3, [pc, #520]	; (800c4e0 <tcp_slowtmr+0x584>)
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	4b7e      	ldr	r3, [pc, #504]	; (800c4e8 <tcp_slowtmr+0x58c>)
 800c2f0:	fb03 f300 	mul.w	r3, r3, r0
 800c2f4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c2f6:	497b      	ldr	r1, [pc, #492]	; (800c4e4 <tcp_slowtmr+0x588>)
 800c2f8:	fba1 1303 	umull	r1, r3, r1, r3
 800c2fc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d911      	bls.n	800c326 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c304:	f004 ffea 	bl	80112dc <tcp_keepalive>
 800c308:	4603      	mov	r3, r0
 800c30a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c30e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c312:	2b00      	cmp	r3, #0
 800c314:	d107      	bne.n	800c326 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c31c:	3301      	adds	r3, #1
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c322:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d011      	beq.n	800c352 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c32e:	4b6c      	ldr	r3, [pc, #432]	; (800c4e0 <tcp_slowtmr+0x584>)
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c334:	6a1b      	ldr	r3, [r3, #32]
 800c336:	1ad2      	subs	r2, r2, r3
 800c338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c33e:	4619      	mov	r1, r3
 800c340:	460b      	mov	r3, r1
 800c342:	005b      	lsls	r3, r3, #1
 800c344:	440b      	add	r3, r1
 800c346:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c348:	429a      	cmp	r2, r3
 800c34a:	d302      	bcc.n	800c352 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c34c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c34e:	f000 fea9 	bl	800d0a4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c354:	7d1b      	ldrb	r3, [r3, #20]
 800c356:	2b03      	cmp	r3, #3
 800c358:	d10b      	bne.n	800c372 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c35a:	4b61      	ldr	r3, [pc, #388]	; (800c4e0 <tcp_slowtmr+0x584>)
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c360:	6a1b      	ldr	r3, [r3, #32]
 800c362:	1ad3      	subs	r3, r2, r3
 800c364:	2b28      	cmp	r3, #40	; 0x28
 800c366:	d904      	bls.n	800c372 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c36c:	3301      	adds	r3, #1
 800c36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c374:	7d1b      	ldrb	r3, [r3, #20]
 800c376:	2b09      	cmp	r3, #9
 800c378:	d10b      	bne.n	800c392 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c37a:	4b59      	ldr	r3, [pc, #356]	; (800c4e0 <tcp_slowtmr+0x584>)
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c380:	6a1b      	ldr	r3, [r3, #32]
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	2bf0      	cmp	r3, #240	; 0xf0
 800c386:	d904      	bls.n	800c392 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c38c:	3301      	adds	r3, #1
 800c38e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c396:	2b00      	cmp	r3, #0
 800c398:	d060      	beq.n	800c45c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3a0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c3a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3a4:	f000 fcca 	bl	800cd3c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d010      	beq.n	800c3d0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c3ae:	4b4f      	ldr	r3, [pc, #316]	; (800c4ec <tcp_slowtmr+0x590>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d106      	bne.n	800c3c6 <tcp_slowtmr+0x46a>
 800c3b8:	4b4d      	ldr	r3, [pc, #308]	; (800c4f0 <tcp_slowtmr+0x594>)
 800c3ba:	f240 526d 	movw	r2, #1389	; 0x56d
 800c3be:	494d      	ldr	r1, [pc, #308]	; (800c4f4 <tcp_slowtmr+0x598>)
 800c3c0:	484d      	ldr	r0, [pc, #308]	; (800c4f8 <tcp_slowtmr+0x59c>)
 800c3c2:	f008 fd8f 	bl	8014ee4 <iprintf>
        prev->next = pcb->next;
 800c3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c8:	68da      	ldr	r2, [r3, #12]
 800c3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3cc:	60da      	str	r2, [r3, #12]
 800c3ce:	e00f      	b.n	800c3f0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c3d0:	4b46      	ldr	r3, [pc, #280]	; (800c4ec <tcp_slowtmr+0x590>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d006      	beq.n	800c3e8 <tcp_slowtmr+0x48c>
 800c3da:	4b45      	ldr	r3, [pc, #276]	; (800c4f0 <tcp_slowtmr+0x594>)
 800c3dc:	f240 5271 	movw	r2, #1393	; 0x571
 800c3e0:	4946      	ldr	r1, [pc, #280]	; (800c4fc <tcp_slowtmr+0x5a0>)
 800c3e2:	4845      	ldr	r0, [pc, #276]	; (800c4f8 <tcp_slowtmr+0x59c>)
 800c3e4:	f008 fd7e 	bl	8014ee4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	4a3f      	ldr	r2, [pc, #252]	; (800c4ec <tcp_slowtmr+0x590>)
 800c3ee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c3f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d013      	beq.n	800c420 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c400:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c404:	3304      	adds	r3, #4
 800c406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c408:	8ad2      	ldrh	r2, [r2, #22]
 800c40a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c40c:	8b09      	ldrh	r1, [r1, #24]
 800c40e:	9102      	str	r1, [sp, #8]
 800c410:	9201      	str	r2, [sp, #4]
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	462b      	mov	r3, r5
 800c416:	4622      	mov	r2, r4
 800c418:	4601      	mov	r1, r0
 800c41a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c41c:	f004 feaa 	bl	8011174 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c428:	7d1b      	ldrb	r3, [r3, #20]
 800c42a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c436:	6838      	ldr	r0, [r7, #0]
 800c438:	f7ff f8b8 	bl	800b5ac <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c43c:	4b30      	ldr	r3, [pc, #192]	; (800c500 <tcp_slowtmr+0x5a4>)
 800c43e:	2200      	movs	r2, #0
 800c440:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d004      	beq.n	800c452 <tcp_slowtmr+0x4f6>
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f06f 010c 	mvn.w	r1, #12
 800c44e:	68b8      	ldr	r0, [r7, #8]
 800c450:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c452:	4b2b      	ldr	r3, [pc, #172]	; (800c500 <tcp_slowtmr+0x5a4>)
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d037      	beq.n	800c4ca <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c45a:	e590      	b.n	800bf7e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c468:	7f1b      	ldrb	r3, [r3, #28]
 800c46a:	3301      	adds	r3, #1
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c470:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c474:	7f1a      	ldrb	r2, [r3, #28]
 800c476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c478:	7f5b      	ldrb	r3, [r3, #29]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d325      	bcc.n	800c4ca <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c480:	2200      	movs	r2, #0
 800c482:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c484:	4b1e      	ldr	r3, [pc, #120]	; (800c500 <tcp_slowtmr+0x5a4>)
 800c486:	2200      	movs	r2, #0
 800c488:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00b      	beq.n	800c4ac <tcp_slowtmr+0x550>
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c49a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c49c:	6912      	ldr	r2, [r2, #16]
 800c49e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	4798      	blx	r3
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c4aa:	e002      	b.n	800c4b2 <tcp_slowtmr+0x556>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c4b2:	4b13      	ldr	r3, [pc, #76]	; (800c500 <tcp_slowtmr+0x5a4>)
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d000      	beq.n	800c4bc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800c4ba:	e560      	b.n	800bf7e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c4bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d102      	bne.n	800c4ca <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c4c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4c6:	f004 f8a1 	bl	801060c <tcp_output>
  while (pcb != NULL) {
 800c4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f47f ad5c 	bne.w	800bf8a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c4d6:	4b0b      	ldr	r3, [pc, #44]	; (800c504 <tcp_slowtmr+0x5a8>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c4dc:	e067      	b.n	800c5ae <tcp_slowtmr+0x652>
 800c4de:	bf00      	nop
 800c4e0:	2000d330 	.word	0x2000d330
 800c4e4:	10624dd3 	.word	0x10624dd3
 800c4e8:	000124f8 	.word	0x000124f8
 800c4ec:	2000d32c 	.word	0x2000d32c
 800c4f0:	0801732c 	.word	0x0801732c
 800c4f4:	08017764 	.word	0x08017764
 800c4f8:	08017370 	.word	0x08017370
 800c4fc:	08017790 	.word	0x08017790
 800c500:	2000d328 	.word	0x2000d328
 800c504:	2000d33c 	.word	0x2000d33c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50a:	7d1b      	ldrb	r3, [r3, #20]
 800c50c:	2b0a      	cmp	r3, #10
 800c50e:	d006      	beq.n	800c51e <tcp_slowtmr+0x5c2>
 800c510:	4b2b      	ldr	r3, [pc, #172]	; (800c5c0 <tcp_slowtmr+0x664>)
 800c512:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c516:	492b      	ldr	r1, [pc, #172]	; (800c5c4 <tcp_slowtmr+0x668>)
 800c518:	482b      	ldr	r0, [pc, #172]	; (800c5c8 <tcp_slowtmr+0x66c>)
 800c51a:	f008 fce3 	bl	8014ee4 <iprintf>
    pcb_remove = 0;
 800c51e:	2300      	movs	r3, #0
 800c520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c524:	4b29      	ldr	r3, [pc, #164]	; (800c5cc <tcp_slowtmr+0x670>)
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52a:	6a1b      	ldr	r3, [r3, #32]
 800c52c:	1ad3      	subs	r3, r2, r3
 800c52e:	2bf0      	cmp	r3, #240	; 0xf0
 800c530:	d904      	bls.n	800c53c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c536:	3301      	adds	r3, #1
 800c538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c53c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c540:	2b00      	cmp	r3, #0
 800c542:	d02f      	beq.n	800c5a4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c546:	f000 fbf9 	bl	800cd3c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d010      	beq.n	800c572 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c550:	4b1f      	ldr	r3, [pc, #124]	; (800c5d0 <tcp_slowtmr+0x674>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c556:	429a      	cmp	r2, r3
 800c558:	d106      	bne.n	800c568 <tcp_slowtmr+0x60c>
 800c55a:	4b19      	ldr	r3, [pc, #100]	; (800c5c0 <tcp_slowtmr+0x664>)
 800c55c:	f240 52af 	movw	r2, #1455	; 0x5af
 800c560:	491c      	ldr	r1, [pc, #112]	; (800c5d4 <tcp_slowtmr+0x678>)
 800c562:	4819      	ldr	r0, [pc, #100]	; (800c5c8 <tcp_slowtmr+0x66c>)
 800c564:	f008 fcbe 	bl	8014ee4 <iprintf>
        prev->next = pcb->next;
 800c568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56a:	68da      	ldr	r2, [r3, #12]
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	60da      	str	r2, [r3, #12]
 800c570:	e00f      	b.n	800c592 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c572:	4b17      	ldr	r3, [pc, #92]	; (800c5d0 <tcp_slowtmr+0x674>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c578:	429a      	cmp	r2, r3
 800c57a:	d006      	beq.n	800c58a <tcp_slowtmr+0x62e>
 800c57c:	4b10      	ldr	r3, [pc, #64]	; (800c5c0 <tcp_slowtmr+0x664>)
 800c57e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c582:	4915      	ldr	r1, [pc, #84]	; (800c5d8 <tcp_slowtmr+0x67c>)
 800c584:	4810      	ldr	r0, [pc, #64]	; (800c5c8 <tcp_slowtmr+0x66c>)
 800c586:	f008 fcad 	bl	8014ee4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	4a10      	ldr	r2, [pc, #64]	; (800c5d0 <tcp_slowtmr+0x674>)
 800c590:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c594:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c59c:	69f8      	ldr	r0, [r7, #28]
 800c59e:	f7ff f805 	bl	800b5ac <tcp_free>
 800c5a2:	e004      	b.n	800c5ae <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1a9      	bne.n	800c508 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c5b4:	bf00      	nop
 800c5b6:	bf00      	nop
 800c5b8:	3730      	adds	r7, #48	; 0x30
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bdb0      	pop	{r4, r5, r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	0801732c 	.word	0x0801732c
 800c5c4:	080177bc 	.word	0x080177bc
 800c5c8:	08017370 	.word	0x08017370
 800c5cc:	2000d330 	.word	0x2000d330
 800c5d0:	2000d33c 	.word	0x2000d33c
 800c5d4:	080177ec 	.word	0x080177ec
 800c5d8:	08017814 	.word	0x08017814

0800c5dc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c5e2:	4b2d      	ldr	r3, [pc, #180]	; (800c698 <tcp_fasttmr+0xbc>)
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	b2da      	uxtb	r2, r3
 800c5ea:	4b2b      	ldr	r3, [pc, #172]	; (800c698 <tcp_fasttmr+0xbc>)
 800c5ec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c5ee:	4b2b      	ldr	r3, [pc, #172]	; (800c69c <tcp_fasttmr+0xc0>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c5f4:	e048      	b.n	800c688 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	7f9a      	ldrb	r2, [r3, #30]
 800c5fa:	4b27      	ldr	r3, [pc, #156]	; (800c698 <tcp_fasttmr+0xbc>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d03f      	beq.n	800c682 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c602:	4b25      	ldr	r3, [pc, #148]	; (800c698 <tcp_fasttmr+0xbc>)
 800c604:	781a      	ldrb	r2, [r3, #0]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	8b5b      	ldrh	r3, [r3, #26]
 800c60e:	f003 0301 	and.w	r3, r3, #1
 800c612:	2b00      	cmp	r3, #0
 800c614:	d010      	beq.n	800c638 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	8b5b      	ldrh	r3, [r3, #26]
 800c61a:	f043 0302 	orr.w	r3, r3, #2
 800c61e:	b29a      	uxth	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f003 fff1 	bl	801060c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	8b5b      	ldrh	r3, [r3, #26]
 800c62e:	f023 0303 	bic.w	r3, r3, #3
 800c632:	b29a      	uxth	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	8b5b      	ldrh	r3, [r3, #26]
 800c63c:	f003 0308 	and.w	r3, r3, #8
 800c640:	2b00      	cmp	r3, #0
 800c642:	d009      	beq.n	800c658 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	8b5b      	ldrh	r3, [r3, #26]
 800c648:	f023 0308 	bic.w	r3, r3, #8
 800c64c:	b29a      	uxth	r2, r3
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f7ff f93e 	bl	800b8d4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00a      	beq.n	800c67c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c666:	4b0e      	ldr	r3, [pc, #56]	; (800c6a0 <tcp_fasttmr+0xc4>)
 800c668:	2200      	movs	r2, #0
 800c66a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f819 	bl	800c6a4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c672:	4b0b      	ldr	r3, [pc, #44]	; (800c6a0 <tcp_fasttmr+0xc4>)
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d000      	beq.n	800c67c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c67a:	e7b8      	b.n	800c5ee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	607b      	str	r3, [r7, #4]
 800c680:	e002      	b.n	800c688 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1b3      	bne.n	800c5f6 <tcp_fasttmr+0x1a>
    }
  }
}
 800c68e:	bf00      	nop
 800c690:	bf00      	nop
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	20006846 	.word	0x20006846
 800c69c:	2000d32c 	.word	0x2000d32c
 800c6a0:	2000d328 	.word	0x2000d328

0800c6a4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c6a4:	b590      	push	{r4, r7, lr}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d109      	bne.n	800c6c6 <tcp_process_refused_data+0x22>
 800c6b2:	4b37      	ldr	r3, [pc, #220]	; (800c790 <tcp_process_refused_data+0xec>)
 800c6b4:	f240 6209 	movw	r2, #1545	; 0x609
 800c6b8:	4936      	ldr	r1, [pc, #216]	; (800c794 <tcp_process_refused_data+0xf0>)
 800c6ba:	4837      	ldr	r0, [pc, #220]	; (800c798 <tcp_process_refused_data+0xf4>)
 800c6bc:	f008 fc12 	bl	8014ee4 <iprintf>
 800c6c0:	f06f 030f 	mvn.w	r3, #15
 800c6c4:	e060      	b.n	800c788 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6ca:	7b5b      	ldrb	r3, [r3, #13]
 800c6cc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6d2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00b      	beq.n	800c6fc <tcp_process_refused_data+0x58>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6918      	ldr	r0, [r3, #16]
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	68ba      	ldr	r2, [r7, #8]
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	47a0      	blx	r4
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	73fb      	strb	r3, [r7, #15]
 800c6fa:	e007      	b.n	800c70c <tcp_process_refused_data+0x68>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	6879      	ldr	r1, [r7, #4]
 800c702:	2000      	movs	r0, #0
 800c704:	f000 f8a4 	bl	800c850 <tcp_recv_null>
 800c708:	4603      	mov	r3, r0
 800c70a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c70c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d12a      	bne.n	800c76a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c714:	7bbb      	ldrb	r3, [r7, #14]
 800c716:	f003 0320 	and.w	r3, r3, #32
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d033      	beq.n	800c786 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c722:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c726:	d005      	beq.n	800c734 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c72c:	3301      	adds	r3, #1
 800c72e:	b29a      	uxth	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d00b      	beq.n	800c756 <tcp_process_refused_data+0xb2>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6918      	ldr	r0, [r3, #16]
 800c748:	2300      	movs	r3, #0
 800c74a:	2200      	movs	r2, #0
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	47a0      	blx	r4
 800c750:	4603      	mov	r3, r0
 800c752:	73fb      	strb	r3, [r7, #15]
 800c754:	e001      	b.n	800c75a <tcp_process_refused_data+0xb6>
 800c756:	2300      	movs	r3, #0
 800c758:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c75a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c75e:	f113 0f0d 	cmn.w	r3, #13
 800c762:	d110      	bne.n	800c786 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c764:	f06f 030c 	mvn.w	r3, #12
 800c768:	e00e      	b.n	800c788 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c76a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c76e:	f113 0f0d 	cmn.w	r3, #13
 800c772:	d102      	bne.n	800c77a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c774:	f06f 030c 	mvn.w	r3, #12
 800c778:	e006      	b.n	800c788 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c780:	f06f 0304 	mvn.w	r3, #4
 800c784:	e000      	b.n	800c788 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd90      	pop	{r4, r7, pc}
 800c790:	0801732c 	.word	0x0801732c
 800c794:	0801783c 	.word	0x0801783c
 800c798:	08017370 	.word	0x08017370

0800c79c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c7a4:	e007      	b.n	800c7b6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 f80a 	bl	800c7c6 <tcp_seg_free>
    seg = next;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1f4      	bne.n	800c7a6 <tcp_segs_free+0xa>
  }
}
 800c7bc:	bf00      	nop
 800c7be:	bf00      	nop
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b082      	sub	sp, #8
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00c      	beq.n	800c7ee <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d004      	beq.n	800c7e6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fe fc27 	bl	800b034 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c7e6:	6879      	ldr	r1, [r7, #4]
 800c7e8:	2003      	movs	r0, #3
 800c7ea:	f7fd fde3 	bl	800a3b4 <memp_free>
  }
}
 800c7ee:	bf00      	nop
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
	...

0800c7f8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d106      	bne.n	800c814 <tcp_seg_copy+0x1c>
 800c806:	4b0f      	ldr	r3, [pc, #60]	; (800c844 <tcp_seg_copy+0x4c>)
 800c808:	f240 6282 	movw	r2, #1666	; 0x682
 800c80c:	490e      	ldr	r1, [pc, #56]	; (800c848 <tcp_seg_copy+0x50>)
 800c80e:	480f      	ldr	r0, [pc, #60]	; (800c84c <tcp_seg_copy+0x54>)
 800c810:	f008 fb68 	bl	8014ee4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c814:	2003      	movs	r0, #3
 800c816:	f7fd fd7b 	bl	800a310 <memp_malloc>
 800c81a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d101      	bne.n	800c826 <tcp_seg_copy+0x2e>
    return NULL;
 800c822:	2300      	movs	r3, #0
 800c824:	e00a      	b.n	800c83c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c826:	2210      	movs	r2, #16
 800c828:	6879      	ldr	r1, [r7, #4]
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f008 fa9a 	bl	8014d64 <memcpy>
  pbuf_ref(cseg->p);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	4618      	mov	r0, r3
 800c836:	f7fe fca3 	bl	800b180 <pbuf_ref>
  return cseg;
 800c83a:	68fb      	ldr	r3, [r7, #12]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3710      	adds	r7, #16
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	0801732c 	.word	0x0801732c
 800c848:	08017880 	.word	0x08017880
 800c84c:	08017370 	.word	0x08017370

0800c850 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
 800c85c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d109      	bne.n	800c878 <tcp_recv_null+0x28>
 800c864:	4b12      	ldr	r3, [pc, #72]	; (800c8b0 <tcp_recv_null+0x60>)
 800c866:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c86a:	4912      	ldr	r1, [pc, #72]	; (800c8b4 <tcp_recv_null+0x64>)
 800c86c:	4812      	ldr	r0, [pc, #72]	; (800c8b8 <tcp_recv_null+0x68>)
 800c86e:	f008 fb39 	bl	8014ee4 <iprintf>
 800c872:	f06f 030f 	mvn.w	r3, #15
 800c876:	e016      	b.n	800c8a6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d009      	beq.n	800c892 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	891b      	ldrh	r3, [r3, #8]
 800c882:	4619      	mov	r1, r3
 800c884:	68b8      	ldr	r0, [r7, #8]
 800c886:	f7ff fad3 	bl	800be30 <tcp_recved>
    pbuf_free(p);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7fe fbd2 	bl	800b034 <pbuf_free>
 800c890:	e008      	b.n	800c8a4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c892:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d104      	bne.n	800c8a4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c89a:	68b8      	ldr	r0, [r7, #8]
 800c89c:	f7ff f884 	bl	800b9a8 <tcp_close>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	e000      	b.n	800c8a6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	0801732c 	.word	0x0801732c
 800c8b4:	0801789c 	.word	0x0801789c
 800c8b8:	08017370 	.word	0x08017370

0800c8bc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c8c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	db01      	blt.n	800c8d2 <tcp_kill_prio+0x16>
 800c8ce:	79fb      	ldrb	r3, [r7, #7]
 800c8d0:	e000      	b.n	800c8d4 <tcp_kill_prio+0x18>
 800c8d2:	237f      	movs	r3, #127	; 0x7f
 800c8d4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c8d6:	7afb      	ldrb	r3, [r7, #11]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d034      	beq.n	800c946 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c8dc:	7afb      	ldrb	r3, [r7, #11]
 800c8de:	3b01      	subs	r3, #1
 800c8e0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8ea:	4b19      	ldr	r3, [pc, #100]	; (800c950 <tcp_kill_prio+0x94>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	617b      	str	r3, [r7, #20]
 800c8f0:	e01f      	b.n	800c932 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	7d5b      	ldrb	r3, [r3, #21]
 800c8f6:	7afa      	ldrb	r2, [r7, #11]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d80c      	bhi.n	800c916 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c900:	7afa      	ldrb	r2, [r7, #11]
 800c902:	429a      	cmp	r2, r3
 800c904:	d112      	bne.n	800c92c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c906:	4b13      	ldr	r3, [pc, #76]	; (800c954 <tcp_kill_prio+0x98>)
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	6a1b      	ldr	r3, [r3, #32]
 800c90e:	1ad3      	subs	r3, r2, r3
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	429a      	cmp	r2, r3
 800c914:	d80a      	bhi.n	800c92c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c916:	4b0f      	ldr	r3, [pc, #60]	; (800c954 <tcp_kill_prio+0x98>)
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	6a1b      	ldr	r3, [r3, #32]
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	7d5b      	ldrb	r3, [r3, #21]
 800c92a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	617b      	str	r3, [r7, #20]
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1dc      	bne.n	800c8f2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d004      	beq.n	800c948 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c93e:	6938      	ldr	r0, [r7, #16]
 800c940:	f7ff f978 	bl	800bc34 <tcp_abort>
 800c944:	e000      	b.n	800c948 <tcp_kill_prio+0x8c>
    return;
 800c946:	bf00      	nop
  }
}
 800c948:	3718      	adds	r7, #24
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	2000d32c 	.word	0x2000d32c
 800c954:	2000d330 	.word	0x2000d330

0800c958 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	4603      	mov	r3, r0
 800c960:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c962:	79fb      	ldrb	r3, [r7, #7]
 800c964:	2b08      	cmp	r3, #8
 800c966:	d009      	beq.n	800c97c <tcp_kill_state+0x24>
 800c968:	79fb      	ldrb	r3, [r7, #7]
 800c96a:	2b09      	cmp	r3, #9
 800c96c:	d006      	beq.n	800c97c <tcp_kill_state+0x24>
 800c96e:	4b1a      	ldr	r3, [pc, #104]	; (800c9d8 <tcp_kill_state+0x80>)
 800c970:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c974:	4919      	ldr	r1, [pc, #100]	; (800c9dc <tcp_kill_state+0x84>)
 800c976:	481a      	ldr	r0, [pc, #104]	; (800c9e0 <tcp_kill_state+0x88>)
 800c978:	f008 fab4 	bl	8014ee4 <iprintf>

  inactivity = 0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c980:	2300      	movs	r3, #0
 800c982:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c984:	4b17      	ldr	r3, [pc, #92]	; (800c9e4 <tcp_kill_state+0x8c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	617b      	str	r3, [r7, #20]
 800c98a:	e017      	b.n	800c9bc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	7d1b      	ldrb	r3, [r3, #20]
 800c990:	79fa      	ldrb	r2, [r7, #7]
 800c992:	429a      	cmp	r2, r3
 800c994:	d10f      	bne.n	800c9b6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c996:	4b14      	ldr	r3, [pc, #80]	; (800c9e8 <tcp_kill_state+0x90>)
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	6a1b      	ldr	r3, [r3, #32]
 800c99e:	1ad3      	subs	r3, r2, r3
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d807      	bhi.n	800c9b6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c9a6:	4b10      	ldr	r3, [pc, #64]	; (800c9e8 <tcp_kill_state+0x90>)
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	6a1b      	ldr	r3, [r3, #32]
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	617b      	str	r3, [r7, #20]
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1e4      	bne.n	800c98c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d003      	beq.n	800c9d0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	6938      	ldr	r0, [r7, #16]
 800c9cc:	f7ff f874 	bl	800bab8 <tcp_abandon>
  }
}
 800c9d0:	bf00      	nop
 800c9d2:	3718      	adds	r7, #24
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	0801732c 	.word	0x0801732c
 800c9dc:	080178b8 	.word	0x080178b8
 800c9e0:	08017370 	.word	0x08017370
 800c9e4:	2000d32c 	.word	0x2000d32c
 800c9e8:	2000d330 	.word	0x2000d330

0800c9ec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9fa:	4b12      	ldr	r3, [pc, #72]	; (800ca44 <tcp_kill_timewait+0x58>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	60fb      	str	r3, [r7, #12]
 800ca00:	e012      	b.n	800ca28 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ca02:	4b11      	ldr	r3, [pc, #68]	; (800ca48 <tcp_kill_timewait+0x5c>)
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6a1b      	ldr	r3, [r3, #32]
 800ca0a:	1ad3      	subs	r3, r2, r3
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d807      	bhi.n	800ca22 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ca12:	4b0d      	ldr	r3, [pc, #52]	; (800ca48 <tcp_kill_timewait+0x5c>)
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6a1b      	ldr	r3, [r3, #32]
 800ca1a:	1ad3      	subs	r3, r2, r3
 800ca1c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	60fb      	str	r3, [r7, #12]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1e9      	bne.n	800ca02 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d002      	beq.n	800ca3a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ca34:	68b8      	ldr	r0, [r7, #8]
 800ca36:	f7ff f8fd 	bl	800bc34 <tcp_abort>
  }
}
 800ca3a:	bf00      	nop
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	2000d33c 	.word	0x2000d33c
 800ca48:	2000d330 	.word	0x2000d330

0800ca4c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ca52:	4b10      	ldr	r3, [pc, #64]	; (800ca94 <tcp_handle_closepend+0x48>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ca58:	e014      	b.n	800ca84 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	8b5b      	ldrh	r3, [r3, #26]
 800ca64:	f003 0308 	and.w	r3, r3, #8
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d009      	beq.n	800ca80 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	8b5b      	ldrh	r3, [r3, #26]
 800ca70:	f023 0308 	bic.w	r3, r3, #8
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7fe ff2a 	bl	800b8d4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1e7      	bne.n	800ca5a <tcp_handle_closepend+0xe>
  }
}
 800ca8a:	bf00      	nop
 800ca8c:	bf00      	nop
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	2000d32c 	.word	0x2000d32c

0800ca98 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	4603      	mov	r3, r0
 800caa0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800caa2:	2001      	movs	r0, #1
 800caa4:	f7fd fc34 	bl	800a310 <memp_malloc>
 800caa8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d126      	bne.n	800cafe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cab0:	f7ff ffcc 	bl	800ca4c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cab4:	f7ff ff9a 	bl	800c9ec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cab8:	2001      	movs	r0, #1
 800caba:	f7fd fc29 	bl	800a310 <memp_malloc>
 800cabe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d11b      	bne.n	800cafe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800cac6:	2009      	movs	r0, #9
 800cac8:	f7ff ff46 	bl	800c958 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cacc:	2001      	movs	r0, #1
 800cace:	f7fd fc1f 	bl	800a310 <memp_malloc>
 800cad2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d111      	bne.n	800cafe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800cada:	2008      	movs	r0, #8
 800cadc:	f7ff ff3c 	bl	800c958 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cae0:	2001      	movs	r0, #1
 800cae2:	f7fd fc15 	bl	800a310 <memp_malloc>
 800cae6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d107      	bne.n	800cafe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800caee:	79fb      	ldrb	r3, [r7, #7]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7ff fee3 	bl	800c8bc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800caf6:	2001      	movs	r0, #1
 800caf8:	f7fd fc0a 	bl	800a310 <memp_malloc>
 800cafc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d03f      	beq.n	800cb84 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800cb04:	229c      	movs	r2, #156	; 0x9c
 800cb06:	2100      	movs	r1, #0
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f008 f939 	bl	8014d80 <memset>
    pcb->prio = prio;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	79fa      	ldrb	r2, [r7, #7]
 800cb12:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cb1a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cb24:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	22ff      	movs	r2, #255	; 0xff
 800cb32:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cb3a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2206      	movs	r2, #6
 800cb40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2206      	movs	r2, #6
 800cb48:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb50:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2201      	movs	r2, #1
 800cb56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800cb5a:	4b0d      	ldr	r3, [pc, #52]	; (800cb90 <tcp_alloc+0xf8>)
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800cb62:	4b0c      	ldr	r3, [pc, #48]	; (800cb94 <tcp_alloc+0xfc>)
 800cb64:	781a      	ldrb	r2, [r3, #0]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cb70:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	4a08      	ldr	r2, [pc, #32]	; (800cb98 <tcp_alloc+0x100>)
 800cb78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4a07      	ldr	r2, [pc, #28]	; (800cb9c <tcp_alloc+0x104>)
 800cb80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800cb84:	68fb      	ldr	r3, [r7, #12]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	2000d330 	.word	0x2000d330
 800cb94:	20006846 	.word	0x20006846
 800cb98:	0800c851 	.word	0x0800c851
 800cb9c:	006ddd00 	.word	0x006ddd00

0800cba0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	4603      	mov	r3, r0
 800cba8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800cbaa:	2040      	movs	r0, #64	; 0x40
 800cbac:	f7ff ff74 	bl	800ca98 <tcp_alloc>
 800cbb0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	683a      	ldr	r2, [r7, #0]
 800cbd0:	611a      	str	r2, [r3, #16]
  }
}
 800cbd2:	bf00      	nop
 800cbd4:	370c      	adds	r7, #12
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbdc:	4770      	bx	lr
	...

0800cbe0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00e      	beq.n	800cc0e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	7d1b      	ldrb	r3, [r3, #20]
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d106      	bne.n	800cc06 <tcp_recv+0x26>
 800cbf8:	4b07      	ldr	r3, [pc, #28]	; (800cc18 <tcp_recv+0x38>)
 800cbfa:	f240 72df 	movw	r2, #2015	; 0x7df
 800cbfe:	4907      	ldr	r1, [pc, #28]	; (800cc1c <tcp_recv+0x3c>)
 800cc00:	4807      	ldr	r0, [pc, #28]	; (800cc20 <tcp_recv+0x40>)
 800cc02:	f008 f96f 	bl	8014ee4 <iprintf>
    pcb->recv = recv;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800cc0e:	bf00      	nop
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	0801732c 	.word	0x0801732c
 800cc1c:	080178c8 	.word	0x080178c8
 800cc20:	08017370 	.word	0x08017370

0800cc24 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d00e      	beq.n	800cc52 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	7d1b      	ldrb	r3, [r3, #20]
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d106      	bne.n	800cc4a <tcp_sent+0x26>
 800cc3c:	4b07      	ldr	r3, [pc, #28]	; (800cc5c <tcp_sent+0x38>)
 800cc3e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800cc42:	4907      	ldr	r1, [pc, #28]	; (800cc60 <tcp_sent+0x3c>)
 800cc44:	4807      	ldr	r0, [pc, #28]	; (800cc64 <tcp_sent+0x40>)
 800cc46:	f008 f94d 	bl	8014ee4 <iprintf>
    pcb->sent = sent;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800cc52:	bf00      	nop
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	0801732c 	.word	0x0801732c
 800cc60:	080178f0 	.word	0x080178f0
 800cc64:	08017370 	.word	0x08017370

0800cc68 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00e      	beq.n	800cc96 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	7d1b      	ldrb	r3, [r3, #20]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d106      	bne.n	800cc8e <tcp_err+0x26>
 800cc80:	4b07      	ldr	r3, [pc, #28]	; (800cca0 <tcp_err+0x38>)
 800cc82:	f640 020d 	movw	r2, #2061	; 0x80d
 800cc86:	4907      	ldr	r1, [pc, #28]	; (800cca4 <tcp_err+0x3c>)
 800cc88:	4807      	ldr	r0, [pc, #28]	; (800cca8 <tcp_err+0x40>)
 800cc8a:	f008 f92b 	bl	8014ee4 <iprintf>
    pcb->errf = err;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800cc96:	bf00      	nop
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	0801732c 	.word	0x0801732c
 800cca4:	08017918 	.word	0x08017918
 800cca8:	08017370 	.word	0x08017370

0800ccac <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d008      	beq.n	800ccce <tcp_accept+0x22>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	7d1b      	ldrb	r3, [r3, #20]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d104      	bne.n	800ccce <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	619a      	str	r2, [r3, #24]
  }
}
 800ccce:	bf00      	nop
 800ccd0:	3714      	adds	r7, #20
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
	...

0800ccdc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	4613      	mov	r3, r2
 800cce8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d107      	bne.n	800cd00 <tcp_poll+0x24>
 800ccf0:	4b0e      	ldr	r3, [pc, #56]	; (800cd2c <tcp_poll+0x50>)
 800ccf2:	f640 023d 	movw	r2, #2109	; 0x83d
 800ccf6:	490e      	ldr	r1, [pc, #56]	; (800cd30 <tcp_poll+0x54>)
 800ccf8:	480e      	ldr	r0, [pc, #56]	; (800cd34 <tcp_poll+0x58>)
 800ccfa:	f008 f8f3 	bl	8014ee4 <iprintf>
 800ccfe:	e011      	b.n	800cd24 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	7d1b      	ldrb	r3, [r3, #20]
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d106      	bne.n	800cd16 <tcp_poll+0x3a>
 800cd08:	4b08      	ldr	r3, [pc, #32]	; (800cd2c <tcp_poll+0x50>)
 800cd0a:	f640 023e 	movw	r2, #2110	; 0x83e
 800cd0e:	490a      	ldr	r1, [pc, #40]	; (800cd38 <tcp_poll+0x5c>)
 800cd10:	4808      	ldr	r0, [pc, #32]	; (800cd34 <tcp_poll+0x58>)
 800cd12:	f008 f8e7 	bl	8014ee4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	79fa      	ldrb	r2, [r7, #7]
 800cd22:	775a      	strb	r2, [r3, #29]
}
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	0801732c 	.word	0x0801732c
 800cd30:	08017940 	.word	0x08017940
 800cd34:	08017370 	.word	0x08017370
 800cd38:	08017958 	.word	0x08017958

0800cd3c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d107      	bne.n	800cd5a <tcp_pcb_purge+0x1e>
 800cd4a:	4b21      	ldr	r3, [pc, #132]	; (800cdd0 <tcp_pcb_purge+0x94>)
 800cd4c:	f640 0251 	movw	r2, #2129	; 0x851
 800cd50:	4920      	ldr	r1, [pc, #128]	; (800cdd4 <tcp_pcb_purge+0x98>)
 800cd52:	4821      	ldr	r0, [pc, #132]	; (800cdd8 <tcp_pcb_purge+0x9c>)
 800cd54:	f008 f8c6 	bl	8014ee4 <iprintf>
 800cd58:	e037      	b.n	800cdca <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	7d1b      	ldrb	r3, [r3, #20]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d033      	beq.n	800cdca <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cd66:	2b0a      	cmp	r3, #10
 800cd68:	d02f      	beq.n	800cdca <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d02b      	beq.n	800cdca <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d007      	beq.n	800cd8a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7fe f958 	bl	800b034 <pbuf_free>
      pcb->refused_data = NULL;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d002      	beq.n	800cd98 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 f986 	bl	800d0a4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd9e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7ff fcf9 	bl	800c79c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7ff fcf4 	bl	800c79c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	66da      	str	r2, [r3, #108]	; 0x6c
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cdca:	3708      	adds	r7, #8
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	0801732c 	.word	0x0801732c
 800cdd4:	08017978 	.word	0x08017978
 800cdd8:	08017370 	.word	0x08017370

0800cddc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d106      	bne.n	800cdfa <tcp_pcb_remove+0x1e>
 800cdec:	4b3e      	ldr	r3, [pc, #248]	; (800cee8 <tcp_pcb_remove+0x10c>)
 800cdee:	f640 0283 	movw	r2, #2179	; 0x883
 800cdf2:	493e      	ldr	r1, [pc, #248]	; (800ceec <tcp_pcb_remove+0x110>)
 800cdf4:	483e      	ldr	r0, [pc, #248]	; (800cef0 <tcp_pcb_remove+0x114>)
 800cdf6:	f008 f875 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d106      	bne.n	800ce0e <tcp_pcb_remove+0x32>
 800ce00:	4b39      	ldr	r3, [pc, #228]	; (800cee8 <tcp_pcb_remove+0x10c>)
 800ce02:	f640 0284 	movw	r2, #2180	; 0x884
 800ce06:	493b      	ldr	r1, [pc, #236]	; (800cef4 <tcp_pcb_remove+0x118>)
 800ce08:	4839      	ldr	r0, [pc, #228]	; (800cef0 <tcp_pcb_remove+0x114>)
 800ce0a:	f008 f86b 	bl	8014ee4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	683a      	ldr	r2, [r7, #0]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d105      	bne.n	800ce24 <tcp_pcb_remove+0x48>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	68da      	ldr	r2, [r3, #12]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	601a      	str	r2, [r3, #0]
 800ce22:	e013      	b.n	800ce4c <tcp_pcb_remove+0x70>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	60fb      	str	r3, [r7, #12]
 800ce2a:	e00c      	b.n	800ce46 <tcp_pcb_remove+0x6a>
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	683a      	ldr	r2, [r7, #0]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d104      	bne.n	800ce40 <tcp_pcb_remove+0x64>
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	68da      	ldr	r2, [r3, #12]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	60da      	str	r2, [r3, #12]
 800ce3e:	e005      	b.n	800ce4c <tcp_pcb_remove+0x70>
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	60fb      	str	r3, [r7, #12]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d1ef      	bne.n	800ce2c <tcp_pcb_remove+0x50>
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ce52:	6838      	ldr	r0, [r7, #0]
 800ce54:	f7ff ff72 	bl	800cd3c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	7d1b      	ldrb	r3, [r3, #20]
 800ce5c:	2b0a      	cmp	r3, #10
 800ce5e:	d013      	beq.n	800ce88 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d00f      	beq.n	800ce88 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	8b5b      	ldrh	r3, [r3, #26]
 800ce6c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d009      	beq.n	800ce88 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	8b5b      	ldrh	r3, [r3, #26]
 800ce78:	f043 0302 	orr.w	r3, r3, #2
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ce82:	6838      	ldr	r0, [r7, #0]
 800ce84:	f003 fbc2 	bl	801060c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	7d1b      	ldrb	r3, [r3, #20]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d020      	beq.n	800ced2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d006      	beq.n	800cea6 <tcp_pcb_remove+0xca>
 800ce98:	4b13      	ldr	r3, [pc, #76]	; (800cee8 <tcp_pcb_remove+0x10c>)
 800ce9a:	f640 0293 	movw	r2, #2195	; 0x893
 800ce9e:	4916      	ldr	r1, [pc, #88]	; (800cef8 <tcp_pcb_remove+0x11c>)
 800cea0:	4813      	ldr	r0, [pc, #76]	; (800cef0 <tcp_pcb_remove+0x114>)
 800cea2:	f008 f81f 	bl	8014ee4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d006      	beq.n	800cebc <tcp_pcb_remove+0xe0>
 800ceae:	4b0e      	ldr	r3, [pc, #56]	; (800cee8 <tcp_pcb_remove+0x10c>)
 800ceb0:	f640 0294 	movw	r2, #2196	; 0x894
 800ceb4:	4911      	ldr	r1, [pc, #68]	; (800cefc <tcp_pcb_remove+0x120>)
 800ceb6:	480e      	ldr	r0, [pc, #56]	; (800cef0 <tcp_pcb_remove+0x114>)
 800ceb8:	f008 f814 	bl	8014ee4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d006      	beq.n	800ced2 <tcp_pcb_remove+0xf6>
 800cec4:	4b08      	ldr	r3, [pc, #32]	; (800cee8 <tcp_pcb_remove+0x10c>)
 800cec6:	f640 0296 	movw	r2, #2198	; 0x896
 800ceca:	490d      	ldr	r1, [pc, #52]	; (800cf00 <tcp_pcb_remove+0x124>)
 800cecc:	4808      	ldr	r0, [pc, #32]	; (800cef0 <tcp_pcb_remove+0x114>)
 800cece:	f008 f809 	bl	8014ee4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2200      	movs	r2, #0
 800ced6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	2200      	movs	r2, #0
 800cedc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800cede:	bf00      	nop
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	0801732c 	.word	0x0801732c
 800ceec:	08017994 	.word	0x08017994
 800cef0:	08017370 	.word	0x08017370
 800cef4:	080179b0 	.word	0x080179b0
 800cef8:	080179d0 	.word	0x080179d0
 800cefc:	080179e8 	.word	0x080179e8
 800cf00:	08017a04 	.word	0x08017a04

0800cf04 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d106      	bne.n	800cf20 <tcp_next_iss+0x1c>
 800cf12:	4b0a      	ldr	r3, [pc, #40]	; (800cf3c <tcp_next_iss+0x38>)
 800cf14:	f640 02af 	movw	r2, #2223	; 0x8af
 800cf18:	4909      	ldr	r1, [pc, #36]	; (800cf40 <tcp_next_iss+0x3c>)
 800cf1a:	480a      	ldr	r0, [pc, #40]	; (800cf44 <tcp_next_iss+0x40>)
 800cf1c:	f007 ffe2 	bl	8014ee4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800cf20:	4b09      	ldr	r3, [pc, #36]	; (800cf48 <tcp_next_iss+0x44>)
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	4b09      	ldr	r3, [pc, #36]	; (800cf4c <tcp_next_iss+0x48>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4413      	add	r3, r2
 800cf2a:	4a07      	ldr	r2, [pc, #28]	; (800cf48 <tcp_next_iss+0x44>)
 800cf2c:	6013      	str	r3, [r2, #0]
  return iss;
 800cf2e:	4b06      	ldr	r3, [pc, #24]	; (800cf48 <tcp_next_iss+0x44>)
 800cf30:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	0801732c 	.word	0x0801732c
 800cf40:	08017a1c 	.word	0x08017a1c
 800cf44:	08017370 	.word	0x08017370
 800cf48:	20000018 	.word	0x20000018
 800cf4c:	2000d330 	.word	0x2000d330

0800cf50 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	4603      	mov	r3, r0
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	607a      	str	r2, [r7, #4]
 800cf5c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d106      	bne.n	800cf72 <tcp_eff_send_mss_netif+0x22>
 800cf64:	4b14      	ldr	r3, [pc, #80]	; (800cfb8 <tcp_eff_send_mss_netif+0x68>)
 800cf66:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800cf6a:	4914      	ldr	r1, [pc, #80]	; (800cfbc <tcp_eff_send_mss_netif+0x6c>)
 800cf6c:	4814      	ldr	r0, [pc, #80]	; (800cfc0 <tcp_eff_send_mss_netif+0x70>)
 800cf6e:	f007 ffb9 	bl	8014ee4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d101      	bne.n	800cf7c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800cf78:	89fb      	ldrh	r3, [r7, #14]
 800cf7a:	e019      	b.n	800cfb0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cf80:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800cf82:	8afb      	ldrh	r3, [r7, #22]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d012      	beq.n	800cfae <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800cf88:	2328      	movs	r3, #40	; 0x28
 800cf8a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800cf8c:	8afa      	ldrh	r2, [r7, #22]
 800cf8e:	8abb      	ldrh	r3, [r7, #20]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d904      	bls.n	800cf9e <tcp_eff_send_mss_netif+0x4e>
 800cf94:	8afa      	ldrh	r2, [r7, #22]
 800cf96:	8abb      	ldrh	r3, [r7, #20]
 800cf98:	1ad3      	subs	r3, r2, r3
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	e000      	b.n	800cfa0 <tcp_eff_send_mss_netif+0x50>
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800cfa2:	8a7a      	ldrh	r2, [r7, #18]
 800cfa4:	89fb      	ldrh	r3, [r7, #14]
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	bf28      	it	cs
 800cfaa:	4613      	movcs	r3, r2
 800cfac:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800cfae:	89fb      	ldrh	r3, [r7, #14]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3718      	adds	r7, #24
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	0801732c 	.word	0x0801732c
 800cfbc:	08017a38 	.word	0x08017a38
 800cfc0:	08017370 	.word	0x08017370

0800cfc4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d119      	bne.n	800d00c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800cfd8:	4b10      	ldr	r3, [pc, #64]	; (800d01c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800cfda:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800cfde:	4910      	ldr	r1, [pc, #64]	; (800d020 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800cfe0:	4810      	ldr	r0, [pc, #64]	; (800d024 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800cfe2:	f007 ff7f 	bl	8014ee4 <iprintf>

  while (pcb != NULL) {
 800cfe6:	e011      	b.n	800d00c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d108      	bne.n	800d006 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f7fe fe1a 	bl	800bc34 <tcp_abort>
      pcb = next;
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	60fb      	str	r3, [r7, #12]
 800d004:	e002      	b.n	800d00c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1ea      	bne.n	800cfe8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d012:	bf00      	nop
 800d014:	bf00      	nop
 800d016:	3710      	adds	r7, #16
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	0801732c 	.word	0x0801732c
 800d020:	08017a60 	.word	0x08017a60
 800d024:	08017370 	.word	0x08017370

0800d028 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d02a      	beq.n	800d08e <tcp_netif_ip_addr_changed+0x66>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d026      	beq.n	800d08e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d040:	4b15      	ldr	r3, [pc, #84]	; (800d098 <tcp_netif_ip_addr_changed+0x70>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4619      	mov	r1, r3
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f7ff ffbc 	bl	800cfc4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d04c:	4b13      	ldr	r3, [pc, #76]	; (800d09c <tcp_netif_ip_addr_changed+0x74>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4619      	mov	r1, r3
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f7ff ffb6 	bl	800cfc4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d017      	beq.n	800d08e <tcp_netif_ip_addr_changed+0x66>
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d013      	beq.n	800d08e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d066:	4b0e      	ldr	r3, [pc, #56]	; (800d0a0 <tcp_netif_ip_addr_changed+0x78>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	60fb      	str	r3, [r7, #12]
 800d06c:	e00c      	b.n	800d088 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	429a      	cmp	r2, r3
 800d078:	d103      	bne.n	800d082 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	60fb      	str	r3, [r7, #12]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1ef      	bne.n	800d06e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d08e:	bf00      	nop
 800d090:	3710      	adds	r7, #16
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	2000d32c 	.word	0x2000d32c
 800d09c:	2000d338 	.word	0x2000d338
 800d0a0:	2000d334 	.word	0x2000d334

0800d0a4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d007      	beq.n	800d0c4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7ff fb6f 	bl	800c79c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d0c4:	bf00      	nop
 800d0c6:	3708      	adds	r7, #8
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d0cc:	b590      	push	{r4, r7, lr}
 800d0ce:	b08d      	sub	sp, #52	; 0x34
 800d0d0:	af04      	add	r7, sp, #16
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d105      	bne.n	800d0e8 <tcp_input+0x1c>
 800d0dc:	4b9b      	ldr	r3, [pc, #620]	; (800d34c <tcp_input+0x280>)
 800d0de:	2283      	movs	r2, #131	; 0x83
 800d0e0:	499b      	ldr	r1, [pc, #620]	; (800d350 <tcp_input+0x284>)
 800d0e2:	489c      	ldr	r0, [pc, #624]	; (800d354 <tcp_input+0x288>)
 800d0e4:	f007 fefe 	bl	8014ee4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	4a9a      	ldr	r2, [pc, #616]	; (800d358 <tcp_input+0x28c>)
 800d0ee:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	895b      	ldrh	r3, [r3, #10]
 800d0f4:	2b13      	cmp	r3, #19
 800d0f6:	f240 83c4 	bls.w	800d882 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d0fa:	4b98      	ldr	r3, [pc, #608]	; (800d35c <tcp_input+0x290>)
 800d0fc:	695b      	ldr	r3, [r3, #20]
 800d0fe:	4a97      	ldr	r2, [pc, #604]	; (800d35c <tcp_input+0x290>)
 800d100:	6812      	ldr	r2, [r2, #0]
 800d102:	4611      	mov	r1, r2
 800d104:	4618      	mov	r0, r3
 800d106:	f006 fbcb 	bl	80138a0 <ip4_addr_isbroadcast_u32>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f040 83ba 	bne.w	800d886 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d112:	4b92      	ldr	r3, [pc, #584]	; (800d35c <tcp_input+0x290>)
 800d114:	695b      	ldr	r3, [r3, #20]
 800d116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d11a:	2be0      	cmp	r3, #224	; 0xe0
 800d11c:	f000 83b3 	beq.w	800d886 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d120:	4b8d      	ldr	r3, [pc, #564]	; (800d358 <tcp_input+0x28c>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	899b      	ldrh	r3, [r3, #12]
 800d126:	b29b      	uxth	r3, r3
 800d128:	4618      	mov	r0, r3
 800d12a:	f7fc fc3b 	bl	80099a4 <lwip_htons>
 800d12e:	4603      	mov	r3, r0
 800d130:	0b1b      	lsrs	r3, r3, #12
 800d132:	b29b      	uxth	r3, r3
 800d134:	b2db      	uxtb	r3, r3
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d13a:	7cbb      	ldrb	r3, [r7, #18]
 800d13c:	2b13      	cmp	r3, #19
 800d13e:	f240 83a4 	bls.w	800d88a <tcp_input+0x7be>
 800d142:	7cbb      	ldrb	r3, [r7, #18]
 800d144:	b29a      	uxth	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	891b      	ldrh	r3, [r3, #8]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	f200 839d 	bhi.w	800d88a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d150:	7cbb      	ldrb	r3, [r7, #18]
 800d152:	b29b      	uxth	r3, r3
 800d154:	3b14      	subs	r3, #20
 800d156:	b29a      	uxth	r2, r3
 800d158:	4b81      	ldr	r3, [pc, #516]	; (800d360 <tcp_input+0x294>)
 800d15a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d15c:	4b81      	ldr	r3, [pc, #516]	; (800d364 <tcp_input+0x298>)
 800d15e:	2200      	movs	r2, #0
 800d160:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	895a      	ldrh	r2, [r3, #10]
 800d166:	7cbb      	ldrb	r3, [r7, #18]
 800d168:	b29b      	uxth	r3, r3
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d309      	bcc.n	800d182 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d16e:	4b7c      	ldr	r3, [pc, #496]	; (800d360 <tcp_input+0x294>)
 800d170:	881a      	ldrh	r2, [r3, #0]
 800d172:	4b7d      	ldr	r3, [pc, #500]	; (800d368 <tcp_input+0x29c>)
 800d174:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d176:	7cbb      	ldrb	r3, [r7, #18]
 800d178:	4619      	mov	r1, r3
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7fd fed4 	bl	800af28 <pbuf_remove_header>
 800d180:	e04e      	b.n	800d220 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d105      	bne.n	800d196 <tcp_input+0xca>
 800d18a:	4b70      	ldr	r3, [pc, #448]	; (800d34c <tcp_input+0x280>)
 800d18c:	22c2      	movs	r2, #194	; 0xc2
 800d18e:	4977      	ldr	r1, [pc, #476]	; (800d36c <tcp_input+0x2a0>)
 800d190:	4870      	ldr	r0, [pc, #448]	; (800d354 <tcp_input+0x288>)
 800d192:	f007 fea7 	bl	8014ee4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d196:	2114      	movs	r1, #20
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7fd fec5 	bl	800af28 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	895a      	ldrh	r2, [r3, #10]
 800d1a2:	4b71      	ldr	r3, [pc, #452]	; (800d368 <tcp_input+0x29c>)
 800d1a4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d1a6:	4b6e      	ldr	r3, [pc, #440]	; (800d360 <tcp_input+0x294>)
 800d1a8:	881a      	ldrh	r2, [r3, #0]
 800d1aa:	4b6f      	ldr	r3, [pc, #444]	; (800d368 <tcp_input+0x29c>)
 800d1ac:	881b      	ldrh	r3, [r3, #0]
 800d1ae:	1ad3      	subs	r3, r2, r3
 800d1b0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d1b2:	4b6d      	ldr	r3, [pc, #436]	; (800d368 <tcp_input+0x29c>)
 800d1b4:	881b      	ldrh	r3, [r3, #0]
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7fd feb5 	bl	800af28 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	895b      	ldrh	r3, [r3, #10]
 800d1c4:	8a3a      	ldrh	r2, [r7, #16]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	f200 8361 	bhi.w	800d88e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	4a64      	ldr	r2, [pc, #400]	; (800d364 <tcp_input+0x298>)
 800d1d4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	8a3a      	ldrh	r2, [r7, #16]
 800d1dc:	4611      	mov	r1, r2
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fd fea2 	bl	800af28 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	891a      	ldrh	r2, [r3, #8]
 800d1e8:	8a3b      	ldrh	r3, [r7, #16]
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	b29a      	uxth	r2, r3
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	895b      	ldrh	r3, [r3, #10]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d005      	beq.n	800d206 <tcp_input+0x13a>
 800d1fa:	4b54      	ldr	r3, [pc, #336]	; (800d34c <tcp_input+0x280>)
 800d1fc:	22df      	movs	r2, #223	; 0xdf
 800d1fe:	495c      	ldr	r1, [pc, #368]	; (800d370 <tcp_input+0x2a4>)
 800d200:	4854      	ldr	r0, [pc, #336]	; (800d354 <tcp_input+0x288>)
 800d202:	f007 fe6f 	bl	8014ee4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	891a      	ldrh	r2, [r3, #8]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	891b      	ldrh	r3, [r3, #8]
 800d210:	429a      	cmp	r2, r3
 800d212:	d005      	beq.n	800d220 <tcp_input+0x154>
 800d214:	4b4d      	ldr	r3, [pc, #308]	; (800d34c <tcp_input+0x280>)
 800d216:	22e0      	movs	r2, #224	; 0xe0
 800d218:	4956      	ldr	r1, [pc, #344]	; (800d374 <tcp_input+0x2a8>)
 800d21a:	484e      	ldr	r0, [pc, #312]	; (800d354 <tcp_input+0x288>)
 800d21c:	f007 fe62 	bl	8014ee4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d220:	4b4d      	ldr	r3, [pc, #308]	; (800d358 <tcp_input+0x28c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	881b      	ldrh	r3, [r3, #0]
 800d226:	b29b      	uxth	r3, r3
 800d228:	4a4b      	ldr	r2, [pc, #300]	; (800d358 <tcp_input+0x28c>)
 800d22a:	6814      	ldr	r4, [r2, #0]
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7fc fbb9 	bl	80099a4 <lwip_htons>
 800d232:	4603      	mov	r3, r0
 800d234:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d236:	4b48      	ldr	r3, [pc, #288]	; (800d358 <tcp_input+0x28c>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	885b      	ldrh	r3, [r3, #2]
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	4a46      	ldr	r2, [pc, #280]	; (800d358 <tcp_input+0x28c>)
 800d240:	6814      	ldr	r4, [r2, #0]
 800d242:	4618      	mov	r0, r3
 800d244:	f7fc fbae 	bl	80099a4 <lwip_htons>
 800d248:	4603      	mov	r3, r0
 800d24a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d24c:	4b42      	ldr	r3, [pc, #264]	; (800d358 <tcp_input+0x28c>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	4a41      	ldr	r2, [pc, #260]	; (800d358 <tcp_input+0x28c>)
 800d254:	6814      	ldr	r4, [r2, #0]
 800d256:	4618      	mov	r0, r3
 800d258:	f7fc fbb9 	bl	80099ce <lwip_htonl>
 800d25c:	4603      	mov	r3, r0
 800d25e:	6063      	str	r3, [r4, #4]
 800d260:	6863      	ldr	r3, [r4, #4]
 800d262:	4a45      	ldr	r2, [pc, #276]	; (800d378 <tcp_input+0x2ac>)
 800d264:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d266:	4b3c      	ldr	r3, [pc, #240]	; (800d358 <tcp_input+0x28c>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	4a3a      	ldr	r2, [pc, #232]	; (800d358 <tcp_input+0x28c>)
 800d26e:	6814      	ldr	r4, [r2, #0]
 800d270:	4618      	mov	r0, r3
 800d272:	f7fc fbac 	bl	80099ce <lwip_htonl>
 800d276:	4603      	mov	r3, r0
 800d278:	60a3      	str	r3, [r4, #8]
 800d27a:	68a3      	ldr	r3, [r4, #8]
 800d27c:	4a3f      	ldr	r2, [pc, #252]	; (800d37c <tcp_input+0x2b0>)
 800d27e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d280:	4b35      	ldr	r3, [pc, #212]	; (800d358 <tcp_input+0x28c>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	89db      	ldrh	r3, [r3, #14]
 800d286:	b29b      	uxth	r3, r3
 800d288:	4a33      	ldr	r2, [pc, #204]	; (800d358 <tcp_input+0x28c>)
 800d28a:	6814      	ldr	r4, [r2, #0]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7fc fb89 	bl	80099a4 <lwip_htons>
 800d292:	4603      	mov	r3, r0
 800d294:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d296:	4b30      	ldr	r3, [pc, #192]	; (800d358 <tcp_input+0x28c>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	899b      	ldrh	r3, [r3, #12]
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7fc fb80 	bl	80099a4 <lwip_htons>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2ac:	b2da      	uxtb	r2, r3
 800d2ae:	4b34      	ldr	r3, [pc, #208]	; (800d380 <tcp_input+0x2b4>)
 800d2b0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	891a      	ldrh	r2, [r3, #8]
 800d2b6:	4b33      	ldr	r3, [pc, #204]	; (800d384 <tcp_input+0x2b8>)
 800d2b8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d2ba:	4b31      	ldr	r3, [pc, #196]	; (800d380 <tcp_input+0x2b4>)
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	f003 0303 	and.w	r3, r3, #3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00c      	beq.n	800d2e0 <tcp_input+0x214>
    tcplen++;
 800d2c6:	4b2f      	ldr	r3, [pc, #188]	; (800d384 <tcp_input+0x2b8>)
 800d2c8:	881b      	ldrh	r3, [r3, #0]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	4b2d      	ldr	r3, [pc, #180]	; (800d384 <tcp_input+0x2b8>)
 800d2d0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	891a      	ldrh	r2, [r3, #8]
 800d2d6:	4b2b      	ldr	r3, [pc, #172]	; (800d384 <tcp_input+0x2b8>)
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	f200 82d9 	bhi.w	800d892 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2e4:	4b28      	ldr	r3, [pc, #160]	; (800d388 <tcp_input+0x2bc>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	61fb      	str	r3, [r7, #28]
 800d2ea:	e09d      	b.n	800d428 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	7d1b      	ldrb	r3, [r3, #20]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d105      	bne.n	800d300 <tcp_input+0x234>
 800d2f4:	4b15      	ldr	r3, [pc, #84]	; (800d34c <tcp_input+0x280>)
 800d2f6:	22fb      	movs	r2, #251	; 0xfb
 800d2f8:	4924      	ldr	r1, [pc, #144]	; (800d38c <tcp_input+0x2c0>)
 800d2fa:	4816      	ldr	r0, [pc, #88]	; (800d354 <tcp_input+0x288>)
 800d2fc:	f007 fdf2 	bl	8014ee4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	7d1b      	ldrb	r3, [r3, #20]
 800d304:	2b0a      	cmp	r3, #10
 800d306:	d105      	bne.n	800d314 <tcp_input+0x248>
 800d308:	4b10      	ldr	r3, [pc, #64]	; (800d34c <tcp_input+0x280>)
 800d30a:	22fc      	movs	r2, #252	; 0xfc
 800d30c:	4920      	ldr	r1, [pc, #128]	; (800d390 <tcp_input+0x2c4>)
 800d30e:	4811      	ldr	r0, [pc, #68]	; (800d354 <tcp_input+0x288>)
 800d310:	f007 fde8 	bl	8014ee4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	7d1b      	ldrb	r3, [r3, #20]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d105      	bne.n	800d328 <tcp_input+0x25c>
 800d31c:	4b0b      	ldr	r3, [pc, #44]	; (800d34c <tcp_input+0x280>)
 800d31e:	22fd      	movs	r2, #253	; 0xfd
 800d320:	491c      	ldr	r1, [pc, #112]	; (800d394 <tcp_input+0x2c8>)
 800d322:	480c      	ldr	r0, [pc, #48]	; (800d354 <tcp_input+0x288>)
 800d324:	f007 fdde 	bl	8014ee4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	7a1b      	ldrb	r3, [r3, #8]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d033      	beq.n	800d398 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	7a1a      	ldrb	r2, [r3, #8]
 800d334:	4b09      	ldr	r3, [pc, #36]	; (800d35c <tcp_input+0x290>)
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d33c:	3301      	adds	r3, #1
 800d33e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d340:	429a      	cmp	r2, r3
 800d342:	d029      	beq.n	800d398 <tcp_input+0x2cc>
      prev = pcb;
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	61bb      	str	r3, [r7, #24]
      continue;
 800d348:	e06b      	b.n	800d422 <tcp_input+0x356>
 800d34a:	bf00      	nop
 800d34c:	08017a94 	.word	0x08017a94
 800d350:	08017ac8 	.word	0x08017ac8
 800d354:	08017ae0 	.word	0x08017ae0
 800d358:	20006858 	.word	0x20006858
 800d35c:	20009c18 	.word	0x20009c18
 800d360:	2000685c 	.word	0x2000685c
 800d364:	20006860 	.word	0x20006860
 800d368:	2000685e 	.word	0x2000685e
 800d36c:	08017b08 	.word	0x08017b08
 800d370:	08017b18 	.word	0x08017b18
 800d374:	08017b24 	.word	0x08017b24
 800d378:	20006868 	.word	0x20006868
 800d37c:	2000686c 	.word	0x2000686c
 800d380:	20006874 	.word	0x20006874
 800d384:	20006872 	.word	0x20006872
 800d388:	2000d32c 	.word	0x2000d32c
 800d38c:	08017b44 	.word	0x08017b44
 800d390:	08017b6c 	.word	0x08017b6c
 800d394:	08017b98 	.word	0x08017b98
    }

    if (pcb->remote_port == tcphdr->src &&
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	8b1a      	ldrh	r2, [r3, #24]
 800d39c:	4b94      	ldr	r3, [pc, #592]	; (800d5f0 <tcp_input+0x524>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	881b      	ldrh	r3, [r3, #0]
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d13a      	bne.n	800d41e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	8ada      	ldrh	r2, [r3, #22]
 800d3ac:	4b90      	ldr	r3, [pc, #576]	; (800d5f0 <tcp_input+0x524>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	885b      	ldrh	r3, [r3, #2]
 800d3b2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d132      	bne.n	800d41e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	685a      	ldr	r2, [r3, #4]
 800d3bc:	4b8d      	ldr	r3, [pc, #564]	; (800d5f4 <tcp_input+0x528>)
 800d3be:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d12c      	bne.n	800d41e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	4b8a      	ldr	r3, [pc, #552]	; (800d5f4 <tcp_input+0x528>)
 800d3ca:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d126      	bne.n	800d41e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	69fa      	ldr	r2, [r7, #28]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d106      	bne.n	800d3e8 <tcp_input+0x31c>
 800d3da:	4b87      	ldr	r3, [pc, #540]	; (800d5f8 <tcp_input+0x52c>)
 800d3dc:	f240 120d 	movw	r2, #269	; 0x10d
 800d3e0:	4986      	ldr	r1, [pc, #536]	; (800d5fc <tcp_input+0x530>)
 800d3e2:	4887      	ldr	r0, [pc, #540]	; (800d600 <tcp_input+0x534>)
 800d3e4:	f007 fd7e 	bl	8014ee4 <iprintf>
      if (prev != NULL) {
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d00a      	beq.n	800d404 <tcp_input+0x338>
        prev->next = pcb->next;
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	68da      	ldr	r2, [r3, #12]
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d3f6:	4b83      	ldr	r3, [pc, #524]	; (800d604 <tcp_input+0x538>)
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d3fe:	4a81      	ldr	r2, [pc, #516]	; (800d604 <tcp_input+0x538>)
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d404:	69fb      	ldr	r3, [r7, #28]
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	69fa      	ldr	r2, [r7, #28]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d111      	bne.n	800d432 <tcp_input+0x366>
 800d40e:	4b7a      	ldr	r3, [pc, #488]	; (800d5f8 <tcp_input+0x52c>)
 800d410:	f240 1215 	movw	r2, #277	; 0x115
 800d414:	497c      	ldr	r1, [pc, #496]	; (800d608 <tcp_input+0x53c>)
 800d416:	487a      	ldr	r0, [pc, #488]	; (800d600 <tcp_input+0x534>)
 800d418:	f007 fd64 	bl	8014ee4 <iprintf>
      break;
 800d41c:	e009      	b.n	800d432 <tcp_input+0x366>
    }
    prev = pcb;
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d422:	69fb      	ldr	r3, [r7, #28]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	61fb      	str	r3, [r7, #28]
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f47f af5e 	bne.w	800d2ec <tcp_input+0x220>
 800d430:	e000      	b.n	800d434 <tcp_input+0x368>
      break;
 800d432:	bf00      	nop
  }

  if (pcb == NULL) {
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	2b00      	cmp	r3, #0
 800d438:	f040 8095 	bne.w	800d566 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d43c:	4b73      	ldr	r3, [pc, #460]	; (800d60c <tcp_input+0x540>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	61fb      	str	r3, [r7, #28]
 800d442:	e03f      	b.n	800d4c4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	7d1b      	ldrb	r3, [r3, #20]
 800d448:	2b0a      	cmp	r3, #10
 800d44a:	d006      	beq.n	800d45a <tcp_input+0x38e>
 800d44c:	4b6a      	ldr	r3, [pc, #424]	; (800d5f8 <tcp_input+0x52c>)
 800d44e:	f240 121f 	movw	r2, #287	; 0x11f
 800d452:	496f      	ldr	r1, [pc, #444]	; (800d610 <tcp_input+0x544>)
 800d454:	486a      	ldr	r0, [pc, #424]	; (800d600 <tcp_input+0x534>)
 800d456:	f007 fd45 	bl	8014ee4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	7a1b      	ldrb	r3, [r3, #8]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d009      	beq.n	800d476 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	7a1a      	ldrb	r2, [r3, #8]
 800d466:	4b63      	ldr	r3, [pc, #396]	; (800d5f4 <tcp_input+0x528>)
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d46e:	3301      	adds	r3, #1
 800d470:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d472:	429a      	cmp	r2, r3
 800d474:	d122      	bne.n	800d4bc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	8b1a      	ldrh	r2, [r3, #24]
 800d47a:	4b5d      	ldr	r3, [pc, #372]	; (800d5f0 <tcp_input+0x524>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	881b      	ldrh	r3, [r3, #0]
 800d480:	b29b      	uxth	r3, r3
 800d482:	429a      	cmp	r2, r3
 800d484:	d11b      	bne.n	800d4be <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	8ada      	ldrh	r2, [r3, #22]
 800d48a:	4b59      	ldr	r3, [pc, #356]	; (800d5f0 <tcp_input+0x524>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	885b      	ldrh	r3, [r3, #2]
 800d490:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d492:	429a      	cmp	r2, r3
 800d494:	d113      	bne.n	800d4be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	685a      	ldr	r2, [r3, #4]
 800d49a:	4b56      	ldr	r3, [pc, #344]	; (800d5f4 <tcp_input+0x528>)
 800d49c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d10d      	bne.n	800d4be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	4b53      	ldr	r3, [pc, #332]	; (800d5f4 <tcp_input+0x528>)
 800d4a8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d107      	bne.n	800d4be <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d4ae:	69f8      	ldr	r0, [r7, #28]
 800d4b0:	f000 fb54 	bl	800db5c <tcp_timewait_input>
        }
        pbuf_free(p);
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f7fd fdbd 	bl	800b034 <pbuf_free>
        return;
 800d4ba:	e1f0      	b.n	800d89e <tcp_input+0x7d2>
        continue;
 800d4bc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	61fb      	str	r3, [r7, #28]
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d1bc      	bne.n	800d444 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d4ce:	4b51      	ldr	r3, [pc, #324]	; (800d614 <tcp_input+0x548>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	617b      	str	r3, [r7, #20]
 800d4d4:	e02a      	b.n	800d52c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	7a1b      	ldrb	r3, [r3, #8]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00c      	beq.n	800d4f8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	7a1a      	ldrb	r2, [r3, #8]
 800d4e2:	4b44      	ldr	r3, [pc, #272]	; (800d5f4 <tcp_input+0x528>)
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d002      	beq.n	800d4f8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	61bb      	str	r3, [r7, #24]
        continue;
 800d4f6:	e016      	b.n	800d526 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	8ada      	ldrh	r2, [r3, #22]
 800d4fc:	4b3c      	ldr	r3, [pc, #240]	; (800d5f0 <tcp_input+0x524>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	885b      	ldrh	r3, [r3, #2]
 800d502:	b29b      	uxth	r3, r3
 800d504:	429a      	cmp	r2, r3
 800d506:	d10c      	bne.n	800d522 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	4b39      	ldr	r3, [pc, #228]	; (800d5f4 <tcp_input+0x528>)
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	429a      	cmp	r2, r3
 800d512:	d00f      	beq.n	800d534 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00d      	beq.n	800d536 <tcp_input+0x46a>
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d009      	beq.n	800d536 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	617b      	str	r3, [r7, #20]
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d1d1      	bne.n	800d4d6 <tcp_input+0x40a>
 800d532:	e000      	b.n	800d536 <tcp_input+0x46a>
            break;
 800d534:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d014      	beq.n	800d566 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00a      	beq.n	800d558 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	68da      	ldr	r2, [r3, #12]
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d54a:	4b32      	ldr	r3, [pc, #200]	; (800d614 <tcp_input+0x548>)
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d552:	4a30      	ldr	r2, [pc, #192]	; (800d614 <tcp_input+0x548>)
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d558:	6978      	ldr	r0, [r7, #20]
 800d55a:	f000 fa01 	bl	800d960 <tcp_listen_input>
      }
      pbuf_free(p);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7fd fd68 	bl	800b034 <pbuf_free>
      return;
 800d564:	e19b      	b.n	800d89e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 8160 	beq.w	800d82e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d56e:	4b2a      	ldr	r3, [pc, #168]	; (800d618 <tcp_input+0x54c>)
 800d570:	2200      	movs	r2, #0
 800d572:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	891a      	ldrh	r2, [r3, #8]
 800d578:	4b27      	ldr	r3, [pc, #156]	; (800d618 <tcp_input+0x54c>)
 800d57a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d57c:	4a26      	ldr	r2, [pc, #152]	; (800d618 <tcp_input+0x54c>)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d582:	4b1b      	ldr	r3, [pc, #108]	; (800d5f0 <tcp_input+0x524>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	4a24      	ldr	r2, [pc, #144]	; (800d618 <tcp_input+0x54c>)
 800d588:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d58a:	4b24      	ldr	r3, [pc, #144]	; (800d61c <tcp_input+0x550>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d590:	4b23      	ldr	r3, [pc, #140]	; (800d620 <tcp_input+0x554>)
 800d592:	2200      	movs	r2, #0
 800d594:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d596:	4b23      	ldr	r3, [pc, #140]	; (800d624 <tcp_input+0x558>)
 800d598:	2200      	movs	r2, #0
 800d59a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d59c:	4b22      	ldr	r3, [pc, #136]	; (800d628 <tcp_input+0x55c>)
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	f003 0308 	and.w	r3, r3, #8
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d006      	beq.n	800d5b6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	7b5b      	ldrb	r3, [r3, #13]
 800d5ac:	f043 0301 	orr.w	r3, r3, #1
 800d5b0:	b2da      	uxtb	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d038      	beq.n	800d630 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d5be:	69f8      	ldr	r0, [r7, #28]
 800d5c0:	f7ff f870 	bl	800c6a4 <tcp_process_refused_data>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	f113 0f0d 	cmn.w	r3, #13
 800d5ca:	d007      	beq.n	800d5dc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d5cc:	69fb      	ldr	r3, [r7, #28]
 800d5ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d02d      	beq.n	800d630 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d5d4:	4b15      	ldr	r3, [pc, #84]	; (800d62c <tcp_input+0x560>)
 800d5d6:	881b      	ldrh	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d029      	beq.n	800d630 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f040 8104 	bne.w	800d7ee <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d5e6:	69f8      	ldr	r0, [r7, #28]
 800d5e8:	f003 fe16 	bl	8011218 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d5ec:	e0ff      	b.n	800d7ee <tcp_input+0x722>
 800d5ee:	bf00      	nop
 800d5f0:	20006858 	.word	0x20006858
 800d5f4:	20009c18 	.word	0x20009c18
 800d5f8:	08017a94 	.word	0x08017a94
 800d5fc:	08017bc0 	.word	0x08017bc0
 800d600:	08017ae0 	.word	0x08017ae0
 800d604:	2000d32c 	.word	0x2000d32c
 800d608:	08017bec 	.word	0x08017bec
 800d60c:	2000d33c 	.word	0x2000d33c
 800d610:	08017c18 	.word	0x08017c18
 800d614:	2000d334 	.word	0x2000d334
 800d618:	20006848 	.word	0x20006848
 800d61c:	20006878 	.word	0x20006878
 800d620:	20006875 	.word	0x20006875
 800d624:	20006870 	.word	0x20006870
 800d628:	20006874 	.word	0x20006874
 800d62c:	20006872 	.word	0x20006872
      }
    }
    tcp_input_pcb = pcb;
 800d630:	4a9c      	ldr	r2, [pc, #624]	; (800d8a4 <tcp_input+0x7d8>)
 800d632:	69fb      	ldr	r3, [r7, #28]
 800d634:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d636:	69f8      	ldr	r0, [r7, #28]
 800d638:	f000 fb0a 	bl	800dc50 <tcp_process>
 800d63c:	4603      	mov	r3, r0
 800d63e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d640:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d644:	f113 0f0d 	cmn.w	r3, #13
 800d648:	f000 80d3 	beq.w	800d7f2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d64c:	4b96      	ldr	r3, [pc, #600]	; (800d8a8 <tcp_input+0x7dc>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	f003 0308 	and.w	r3, r3, #8
 800d654:	2b00      	cmp	r3, #0
 800d656:	d015      	beq.n	800d684 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d008      	beq.n	800d674 <tcp_input+0x5a8>
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d668:	69fa      	ldr	r2, [r7, #28]
 800d66a:	6912      	ldr	r2, [r2, #16]
 800d66c:	f06f 010d 	mvn.w	r1, #13
 800d670:	4610      	mov	r0, r2
 800d672:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d674:	69f9      	ldr	r1, [r7, #28]
 800d676:	488d      	ldr	r0, [pc, #564]	; (800d8ac <tcp_input+0x7e0>)
 800d678:	f7ff fbb0 	bl	800cddc <tcp_pcb_remove>
        tcp_free(pcb);
 800d67c:	69f8      	ldr	r0, [r7, #28]
 800d67e:	f7fd ff95 	bl	800b5ac <tcp_free>
 800d682:	e0c1      	b.n	800d808 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800d684:	2300      	movs	r3, #0
 800d686:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d688:	4b89      	ldr	r3, [pc, #548]	; (800d8b0 <tcp_input+0x7e4>)
 800d68a:	881b      	ldrh	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d01d      	beq.n	800d6cc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d690:	4b87      	ldr	r3, [pc, #540]	; (800d8b0 <tcp_input+0x7e4>)
 800d692:	881b      	ldrh	r3, [r3, #0]
 800d694:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00a      	beq.n	800d6b6 <tcp_input+0x5ea>
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6a6:	69fa      	ldr	r2, [r7, #28]
 800d6a8:	6910      	ldr	r0, [r2, #16]
 800d6aa:	89fa      	ldrh	r2, [r7, #14]
 800d6ac:	69f9      	ldr	r1, [r7, #28]
 800d6ae:	4798      	blx	r3
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	74fb      	strb	r3, [r7, #19]
 800d6b4:	e001      	b.n	800d6ba <tcp_input+0x5ee>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d6ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d6be:	f113 0f0d 	cmn.w	r3, #13
 800d6c2:	f000 8098 	beq.w	800d7f6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d6c6:	4b7a      	ldr	r3, [pc, #488]	; (800d8b0 <tcp_input+0x7e4>)
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d6cc:	69f8      	ldr	r0, [r7, #28]
 800d6ce:	f000 f907 	bl	800d8e0 <tcp_input_delayed_close>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f040 8090 	bne.w	800d7fa <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d6da:	4b76      	ldr	r3, [pc, #472]	; (800d8b4 <tcp_input+0x7e8>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d041      	beq.n	800d766 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d006      	beq.n	800d6f8 <tcp_input+0x62c>
 800d6ea:	4b73      	ldr	r3, [pc, #460]	; (800d8b8 <tcp_input+0x7ec>)
 800d6ec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d6f0:	4972      	ldr	r1, [pc, #456]	; (800d8bc <tcp_input+0x7f0>)
 800d6f2:	4873      	ldr	r0, [pc, #460]	; (800d8c0 <tcp_input+0x7f4>)
 800d6f4:	f007 fbf6 	bl	8014ee4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	8b5b      	ldrh	r3, [r3, #26]
 800d6fc:	f003 0310 	and.w	r3, r3, #16
 800d700:	2b00      	cmp	r3, #0
 800d702:	d008      	beq.n	800d716 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d704:	4b6b      	ldr	r3, [pc, #428]	; (800d8b4 <tcp_input+0x7e8>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4618      	mov	r0, r3
 800d70a:	f7fd fc93 	bl	800b034 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d70e:	69f8      	ldr	r0, [r7, #28]
 800d710:	f7fe fa90 	bl	800bc34 <tcp_abort>
            goto aborted;
 800d714:	e078      	b.n	800d808 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00c      	beq.n	800d73a <tcp_input+0x66e>
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	6918      	ldr	r0, [r3, #16]
 800d72a:	4b62      	ldr	r3, [pc, #392]	; (800d8b4 <tcp_input+0x7e8>)
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	2300      	movs	r3, #0
 800d730:	69f9      	ldr	r1, [r7, #28]
 800d732:	47a0      	blx	r4
 800d734:	4603      	mov	r3, r0
 800d736:	74fb      	strb	r3, [r7, #19]
 800d738:	e008      	b.n	800d74c <tcp_input+0x680>
 800d73a:	4b5e      	ldr	r3, [pc, #376]	; (800d8b4 <tcp_input+0x7e8>)
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	2300      	movs	r3, #0
 800d740:	69f9      	ldr	r1, [r7, #28]
 800d742:	2000      	movs	r0, #0
 800d744:	f7ff f884 	bl	800c850 <tcp_recv_null>
 800d748:	4603      	mov	r3, r0
 800d74a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d74c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d750:	f113 0f0d 	cmn.w	r3, #13
 800d754:	d053      	beq.n	800d7fe <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d756:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d003      	beq.n	800d766 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d75e:	4b55      	ldr	r3, [pc, #340]	; (800d8b4 <tcp_input+0x7e8>)
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d766:	4b50      	ldr	r3, [pc, #320]	; (800d8a8 <tcp_input+0x7dc>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	f003 0320 	and.w	r3, r3, #32
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d030      	beq.n	800d7d4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d776:	2b00      	cmp	r3, #0
 800d778:	d009      	beq.n	800d78e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d77e:	7b5a      	ldrb	r2, [r3, #13]
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d784:	f042 0220 	orr.w	r2, r2, #32
 800d788:	b2d2      	uxtb	r2, r2
 800d78a:	735a      	strb	r2, [r3, #13]
 800d78c:	e022      	b.n	800d7d4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d792:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d796:	d005      	beq.n	800d7a4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800d798:	69fb      	ldr	r3, [r7, #28]
 800d79a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d79c:	3301      	adds	r3, #1
 800d79e:	b29a      	uxth	r2, r3
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00b      	beq.n	800d7c6 <tcp_input+0x6fa>
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d7b4:	69fb      	ldr	r3, [r7, #28]
 800d7b6:	6918      	ldr	r0, [r3, #16]
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	69f9      	ldr	r1, [r7, #28]
 800d7be:	47a0      	blx	r4
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	74fb      	strb	r3, [r7, #19]
 800d7c4:	e001      	b.n	800d7ca <tcp_input+0x6fe>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d7ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7ce:	f113 0f0d 	cmn.w	r3, #13
 800d7d2:	d016      	beq.n	800d802 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d7d4:	4b33      	ldr	r3, [pc, #204]	; (800d8a4 <tcp_input+0x7d8>)
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d7da:	69f8      	ldr	r0, [r7, #28]
 800d7dc:	f000 f880 	bl	800d8e0 <tcp_input_delayed_close>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d10f      	bne.n	800d806 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d7e6:	69f8      	ldr	r0, [r7, #28]
 800d7e8:	f002 ff10 	bl	801060c <tcp_output>
 800d7ec:	e00c      	b.n	800d808 <tcp_input+0x73c>
        goto aborted;
 800d7ee:	bf00      	nop
 800d7f0:	e00a      	b.n	800d808 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d7f2:	bf00      	nop
 800d7f4:	e008      	b.n	800d808 <tcp_input+0x73c>
              goto aborted;
 800d7f6:	bf00      	nop
 800d7f8:	e006      	b.n	800d808 <tcp_input+0x73c>
          goto aborted;
 800d7fa:	bf00      	nop
 800d7fc:	e004      	b.n	800d808 <tcp_input+0x73c>
            goto aborted;
 800d7fe:	bf00      	nop
 800d800:	e002      	b.n	800d808 <tcp_input+0x73c>
              goto aborted;
 800d802:	bf00      	nop
 800d804:	e000      	b.n	800d808 <tcp_input+0x73c>
          goto aborted;
 800d806:	bf00      	nop
    tcp_input_pcb = NULL;
 800d808:	4b26      	ldr	r3, [pc, #152]	; (800d8a4 <tcp_input+0x7d8>)
 800d80a:	2200      	movs	r2, #0
 800d80c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d80e:	4b29      	ldr	r3, [pc, #164]	; (800d8b4 <tcp_input+0x7e8>)
 800d810:	2200      	movs	r2, #0
 800d812:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d814:	4b2b      	ldr	r3, [pc, #172]	; (800d8c4 <tcp_input+0x7f8>)
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d03f      	beq.n	800d89c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800d81c:	4b29      	ldr	r3, [pc, #164]	; (800d8c4 <tcp_input+0x7f8>)
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	4618      	mov	r0, r3
 800d822:	f7fd fc07 	bl	800b034 <pbuf_free>
      inseg.p = NULL;
 800d826:	4b27      	ldr	r3, [pc, #156]	; (800d8c4 <tcp_input+0x7f8>)
 800d828:	2200      	movs	r2, #0
 800d82a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d82c:	e036      	b.n	800d89c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d82e:	4b26      	ldr	r3, [pc, #152]	; (800d8c8 <tcp_input+0x7fc>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	899b      	ldrh	r3, [r3, #12]
 800d834:	b29b      	uxth	r3, r3
 800d836:	4618      	mov	r0, r3
 800d838:	f7fc f8b4 	bl	80099a4 <lwip_htons>
 800d83c:	4603      	mov	r3, r0
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	f003 0304 	and.w	r3, r3, #4
 800d844:	2b00      	cmp	r3, #0
 800d846:	d118      	bne.n	800d87a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d848:	4b20      	ldr	r3, [pc, #128]	; (800d8cc <tcp_input+0x800>)
 800d84a:	6819      	ldr	r1, [r3, #0]
 800d84c:	4b20      	ldr	r3, [pc, #128]	; (800d8d0 <tcp_input+0x804>)
 800d84e:	881b      	ldrh	r3, [r3, #0]
 800d850:	461a      	mov	r2, r3
 800d852:	4b20      	ldr	r3, [pc, #128]	; (800d8d4 <tcp_input+0x808>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d858:	4b1b      	ldr	r3, [pc, #108]	; (800d8c8 <tcp_input+0x7fc>)
 800d85a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d85c:	885b      	ldrh	r3, [r3, #2]
 800d85e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d860:	4a19      	ldr	r2, [pc, #100]	; (800d8c8 <tcp_input+0x7fc>)
 800d862:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d864:	8812      	ldrh	r2, [r2, #0]
 800d866:	b292      	uxth	r2, r2
 800d868:	9202      	str	r2, [sp, #8]
 800d86a:	9301      	str	r3, [sp, #4]
 800d86c:	4b1a      	ldr	r3, [pc, #104]	; (800d8d8 <tcp_input+0x80c>)
 800d86e:	9300      	str	r3, [sp, #0]
 800d870:	4b1a      	ldr	r3, [pc, #104]	; (800d8dc <tcp_input+0x810>)
 800d872:	4602      	mov	r2, r0
 800d874:	2000      	movs	r0, #0
 800d876:	f003 fc7d 	bl	8011174 <tcp_rst>
    pbuf_free(p);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f7fd fbda 	bl	800b034 <pbuf_free>
  return;
 800d880:	e00c      	b.n	800d89c <tcp_input+0x7d0>
    goto dropped;
 800d882:	bf00      	nop
 800d884:	e006      	b.n	800d894 <tcp_input+0x7c8>
    goto dropped;
 800d886:	bf00      	nop
 800d888:	e004      	b.n	800d894 <tcp_input+0x7c8>
    goto dropped;
 800d88a:	bf00      	nop
 800d88c:	e002      	b.n	800d894 <tcp_input+0x7c8>
      goto dropped;
 800d88e:	bf00      	nop
 800d890:	e000      	b.n	800d894 <tcp_input+0x7c8>
      goto dropped;
 800d892:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f7fd fbcd 	bl	800b034 <pbuf_free>
 800d89a:	e000      	b.n	800d89e <tcp_input+0x7d2>
  return;
 800d89c:	bf00      	nop
}
 800d89e:	3724      	adds	r7, #36	; 0x24
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd90      	pop	{r4, r7, pc}
 800d8a4:	2000d340 	.word	0x2000d340
 800d8a8:	20006875 	.word	0x20006875
 800d8ac:	2000d32c 	.word	0x2000d32c
 800d8b0:	20006870 	.word	0x20006870
 800d8b4:	20006878 	.word	0x20006878
 800d8b8:	08017a94 	.word	0x08017a94
 800d8bc:	08017c48 	.word	0x08017c48
 800d8c0:	08017ae0 	.word	0x08017ae0
 800d8c4:	20006848 	.word	0x20006848
 800d8c8:	20006858 	.word	0x20006858
 800d8cc:	2000686c 	.word	0x2000686c
 800d8d0:	20006872 	.word	0x20006872
 800d8d4:	20006868 	.word	0x20006868
 800d8d8:	20009c28 	.word	0x20009c28
 800d8dc:	20009c2c 	.word	0x20009c2c

0800d8e0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d106      	bne.n	800d8fc <tcp_input_delayed_close+0x1c>
 800d8ee:	4b17      	ldr	r3, [pc, #92]	; (800d94c <tcp_input_delayed_close+0x6c>)
 800d8f0:	f240 225a 	movw	r2, #602	; 0x25a
 800d8f4:	4916      	ldr	r1, [pc, #88]	; (800d950 <tcp_input_delayed_close+0x70>)
 800d8f6:	4817      	ldr	r0, [pc, #92]	; (800d954 <tcp_input_delayed_close+0x74>)
 800d8f8:	f007 faf4 	bl	8014ee4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d8fc:	4b16      	ldr	r3, [pc, #88]	; (800d958 <tcp_input_delayed_close+0x78>)
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	f003 0310 	and.w	r3, r3, #16
 800d904:	2b00      	cmp	r3, #0
 800d906:	d01c      	beq.n	800d942 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	8b5b      	ldrh	r3, [r3, #26]
 800d90c:	f003 0310 	and.w	r3, r3, #16
 800d910:	2b00      	cmp	r3, #0
 800d912:	d10d      	bne.n	800d930 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d008      	beq.n	800d930 <tcp_input_delayed_close+0x50>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	6912      	ldr	r2, [r2, #16]
 800d928:	f06f 010e 	mvn.w	r1, #14
 800d92c:	4610      	mov	r0, r2
 800d92e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d930:	6879      	ldr	r1, [r7, #4]
 800d932:	480a      	ldr	r0, [pc, #40]	; (800d95c <tcp_input_delayed_close+0x7c>)
 800d934:	f7ff fa52 	bl	800cddc <tcp_pcb_remove>
    tcp_free(pcb);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f7fd fe37 	bl	800b5ac <tcp_free>
    return 1;
 800d93e:	2301      	movs	r3, #1
 800d940:	e000      	b.n	800d944 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d942:	2300      	movs	r3, #0
}
 800d944:	4618      	mov	r0, r3
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	08017a94 	.word	0x08017a94
 800d950:	08017c64 	.word	0x08017c64
 800d954:	08017ae0 	.word	0x08017ae0
 800d958:	20006875 	.word	0x20006875
 800d95c:	2000d32c 	.word	0x2000d32c

0800d960 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d960:	b590      	push	{r4, r7, lr}
 800d962:	b08b      	sub	sp, #44	; 0x2c
 800d964:	af04      	add	r7, sp, #16
 800d966:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d968:	4b6f      	ldr	r3, [pc, #444]	; (800db28 <tcp_listen_input+0x1c8>)
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	f003 0304 	and.w	r3, r3, #4
 800d970:	2b00      	cmp	r3, #0
 800d972:	f040 80d2 	bne.w	800db1a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d106      	bne.n	800d98a <tcp_listen_input+0x2a>
 800d97c:	4b6b      	ldr	r3, [pc, #428]	; (800db2c <tcp_listen_input+0x1cc>)
 800d97e:	f240 2281 	movw	r2, #641	; 0x281
 800d982:	496b      	ldr	r1, [pc, #428]	; (800db30 <tcp_listen_input+0x1d0>)
 800d984:	486b      	ldr	r0, [pc, #428]	; (800db34 <tcp_listen_input+0x1d4>)
 800d986:	f007 faad 	bl	8014ee4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d98a:	4b67      	ldr	r3, [pc, #412]	; (800db28 <tcp_listen_input+0x1c8>)
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	f003 0310 	and.w	r3, r3, #16
 800d992:	2b00      	cmp	r3, #0
 800d994:	d019      	beq.n	800d9ca <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d996:	4b68      	ldr	r3, [pc, #416]	; (800db38 <tcp_listen_input+0x1d8>)
 800d998:	6819      	ldr	r1, [r3, #0]
 800d99a:	4b68      	ldr	r3, [pc, #416]	; (800db3c <tcp_listen_input+0x1dc>)
 800d99c:	881b      	ldrh	r3, [r3, #0]
 800d99e:	461a      	mov	r2, r3
 800d9a0:	4b67      	ldr	r3, [pc, #412]	; (800db40 <tcp_listen_input+0x1e0>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9a6:	4b67      	ldr	r3, [pc, #412]	; (800db44 <tcp_listen_input+0x1e4>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9aa:	885b      	ldrh	r3, [r3, #2]
 800d9ac:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9ae:	4a65      	ldr	r2, [pc, #404]	; (800db44 <tcp_listen_input+0x1e4>)
 800d9b0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9b2:	8812      	ldrh	r2, [r2, #0]
 800d9b4:	b292      	uxth	r2, r2
 800d9b6:	9202      	str	r2, [sp, #8]
 800d9b8:	9301      	str	r3, [sp, #4]
 800d9ba:	4b63      	ldr	r3, [pc, #396]	; (800db48 <tcp_listen_input+0x1e8>)
 800d9bc:	9300      	str	r3, [sp, #0]
 800d9be:	4b63      	ldr	r3, [pc, #396]	; (800db4c <tcp_listen_input+0x1ec>)
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f003 fbd6 	bl	8011174 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d9c8:	e0a9      	b.n	800db1e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d9ca:	4b57      	ldr	r3, [pc, #348]	; (800db28 <tcp_listen_input+0x1c8>)
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	f003 0302 	and.w	r3, r3, #2
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f000 80a3 	beq.w	800db1e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	7d5b      	ldrb	r3, [r3, #21]
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7ff f85b 	bl	800ca98 <tcp_alloc>
 800d9e2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d111      	bne.n	800da0e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	699b      	ldr	r3, [r3, #24]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00a      	beq.n	800da08 <tcp_listen_input+0xa8>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	6910      	ldr	r0, [r2, #16]
 800d9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d9fe:	2100      	movs	r1, #0
 800da00:	4798      	blx	r3
 800da02:	4603      	mov	r3, r0
 800da04:	73bb      	strb	r3, [r7, #14]
      return;
 800da06:	e08b      	b.n	800db20 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800da08:	23f0      	movs	r3, #240	; 0xf0
 800da0a:	73bb      	strb	r3, [r7, #14]
      return;
 800da0c:	e088      	b.n	800db20 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800da0e:	4b50      	ldr	r3, [pc, #320]	; (800db50 <tcp_listen_input+0x1f0>)
 800da10:	695a      	ldr	r2, [r3, #20]
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800da16:	4b4e      	ldr	r3, [pc, #312]	; (800db50 <tcp_listen_input+0x1f0>)
 800da18:	691a      	ldr	r2, [r3, #16]
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	8ada      	ldrh	r2, [r3, #22]
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800da26:	4b47      	ldr	r3, [pc, #284]	; (800db44 <tcp_listen_input+0x1e4>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	881b      	ldrh	r3, [r3, #0]
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	2203      	movs	r2, #3
 800da36:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800da38:	4b41      	ldr	r3, [pc, #260]	; (800db40 <tcp_listen_input+0x1e0>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	1c5a      	adds	r2, r3, #1
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800da4a:	6978      	ldr	r0, [r7, #20]
 800da4c:	f7ff fa5a 	bl	800cf04 <tcp_next_iss>
 800da50:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	693a      	ldr	r2, [r7, #16]
 800da56:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	693a      	ldr	r2, [r7, #16]
 800da5c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	693a      	ldr	r2, [r7, #16]
 800da62:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800da6a:	4b35      	ldr	r3, [pc, #212]	; (800db40 <tcp_listen_input+0x1e0>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	1e5a      	subs	r2, r3, #1
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	691a      	ldr	r2, [r3, #16]
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	7a5b      	ldrb	r3, [r3, #9]
 800da86:	f003 030c 	and.w	r3, r3, #12
 800da8a:	b2da      	uxtb	r2, r3
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	7a1a      	ldrb	r2, [r3, #8]
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800da98:	4b2e      	ldr	r3, [pc, #184]	; (800db54 <tcp_listen_input+0x1f4>)
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	60da      	str	r2, [r3, #12]
 800daa0:	4a2c      	ldr	r2, [pc, #176]	; (800db54 <tcp_listen_input+0x1f4>)
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	6013      	str	r3, [r2, #0]
 800daa6:	f003 fd27 	bl	80114f8 <tcp_timer_needed>
 800daaa:	4b2b      	ldr	r3, [pc, #172]	; (800db58 <tcp_listen_input+0x1f8>)
 800daac:	2201      	movs	r2, #1
 800daae:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800dab0:	6978      	ldr	r0, [r7, #20]
 800dab2:	f001 fd8d 	bl	800f5d0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800dab6:	4b23      	ldr	r3, [pc, #140]	; (800db44 <tcp_listen_input+0x1e4>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	89db      	ldrh	r3, [r3, #14]
 800dabc:	b29a      	uxth	r2, r3
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	3304      	adds	r3, #4
 800dad8:	4618      	mov	r0, r3
 800dada:	f005 fc4b 	bl	8013374 <ip4_route>
 800dade:	4601      	mov	r1, r0
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	3304      	adds	r3, #4
 800dae4:	461a      	mov	r2, r3
 800dae6:	4620      	mov	r0, r4
 800dae8:	f7ff fa32 	bl	800cf50 <tcp_eff_send_mss_netif>
 800daec:	4603      	mov	r3, r0
 800daee:	461a      	mov	r2, r3
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800daf4:	2112      	movs	r1, #18
 800daf6:	6978      	ldr	r0, [r7, #20]
 800daf8:	f002 fc9a 	bl	8010430 <tcp_enqueue_flags>
 800dafc:	4603      	mov	r3, r0
 800dafe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800db00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d004      	beq.n	800db12 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800db08:	2100      	movs	r1, #0
 800db0a:	6978      	ldr	r0, [r7, #20]
 800db0c:	f7fd ffd4 	bl	800bab8 <tcp_abandon>
      return;
 800db10:	e006      	b.n	800db20 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800db12:	6978      	ldr	r0, [r7, #20]
 800db14:	f002 fd7a 	bl	801060c <tcp_output>
  return;
 800db18:	e001      	b.n	800db1e <tcp_listen_input+0x1be>
    return;
 800db1a:	bf00      	nop
 800db1c:	e000      	b.n	800db20 <tcp_listen_input+0x1c0>
  return;
 800db1e:	bf00      	nop
}
 800db20:	371c      	adds	r7, #28
 800db22:	46bd      	mov	sp, r7
 800db24:	bd90      	pop	{r4, r7, pc}
 800db26:	bf00      	nop
 800db28:	20006874 	.word	0x20006874
 800db2c:	08017a94 	.word	0x08017a94
 800db30:	08017c8c 	.word	0x08017c8c
 800db34:	08017ae0 	.word	0x08017ae0
 800db38:	2000686c 	.word	0x2000686c
 800db3c:	20006872 	.word	0x20006872
 800db40:	20006868 	.word	0x20006868
 800db44:	20006858 	.word	0x20006858
 800db48:	20009c28 	.word	0x20009c28
 800db4c:	20009c2c 	.word	0x20009c2c
 800db50:	20009c18 	.word	0x20009c18
 800db54:	2000d32c 	.word	0x2000d32c
 800db58:	2000d328 	.word	0x2000d328

0800db5c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af04      	add	r7, sp, #16
 800db62:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800db64:	4b2f      	ldr	r3, [pc, #188]	; (800dc24 <tcp_timewait_input+0xc8>)
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	f003 0304 	and.w	r3, r3, #4
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d153      	bne.n	800dc18 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d106      	bne.n	800db84 <tcp_timewait_input+0x28>
 800db76:	4b2c      	ldr	r3, [pc, #176]	; (800dc28 <tcp_timewait_input+0xcc>)
 800db78:	f240 22ee 	movw	r2, #750	; 0x2ee
 800db7c:	492b      	ldr	r1, [pc, #172]	; (800dc2c <tcp_timewait_input+0xd0>)
 800db7e:	482c      	ldr	r0, [pc, #176]	; (800dc30 <tcp_timewait_input+0xd4>)
 800db80:	f007 f9b0 	bl	8014ee4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800db84:	4b27      	ldr	r3, [pc, #156]	; (800dc24 <tcp_timewait_input+0xc8>)
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	f003 0302 	and.w	r3, r3, #2
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d02a      	beq.n	800dbe6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800db90:	4b28      	ldr	r3, [pc, #160]	; (800dc34 <tcp_timewait_input+0xd8>)
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db98:	1ad3      	subs	r3, r2, r3
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	db2d      	blt.n	800dbfa <tcp_timewait_input+0x9e>
 800db9e:	4b25      	ldr	r3, [pc, #148]	; (800dc34 <tcp_timewait_input+0xd8>)
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba6:	6879      	ldr	r1, [r7, #4]
 800dba8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dbaa:	440b      	add	r3, r1
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	dc23      	bgt.n	800dbfa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbb2:	4b21      	ldr	r3, [pc, #132]	; (800dc38 <tcp_timewait_input+0xdc>)
 800dbb4:	6819      	ldr	r1, [r3, #0]
 800dbb6:	4b21      	ldr	r3, [pc, #132]	; (800dc3c <tcp_timewait_input+0xe0>)
 800dbb8:	881b      	ldrh	r3, [r3, #0]
 800dbba:	461a      	mov	r2, r3
 800dbbc:	4b1d      	ldr	r3, [pc, #116]	; (800dc34 <tcp_timewait_input+0xd8>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dbc2:	4b1f      	ldr	r3, [pc, #124]	; (800dc40 <tcp_timewait_input+0xe4>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbc6:	885b      	ldrh	r3, [r3, #2]
 800dbc8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dbca:	4a1d      	ldr	r2, [pc, #116]	; (800dc40 <tcp_timewait_input+0xe4>)
 800dbcc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbce:	8812      	ldrh	r2, [r2, #0]
 800dbd0:	b292      	uxth	r2, r2
 800dbd2:	9202      	str	r2, [sp, #8]
 800dbd4:	9301      	str	r3, [sp, #4]
 800dbd6:	4b1b      	ldr	r3, [pc, #108]	; (800dc44 <tcp_timewait_input+0xe8>)
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	4b1b      	ldr	r3, [pc, #108]	; (800dc48 <tcp_timewait_input+0xec>)
 800dbdc:	4602      	mov	r2, r0
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f003 fac8 	bl	8011174 <tcp_rst>
      return;
 800dbe4:	e01b      	b.n	800dc1e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800dbe6:	4b0f      	ldr	r3, [pc, #60]	; (800dc24 <tcp_timewait_input+0xc8>)
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	f003 0301 	and.w	r3, r3, #1
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d003      	beq.n	800dbfa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800dbf2:	4b16      	ldr	r3, [pc, #88]	; (800dc4c <tcp_timewait_input+0xf0>)
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800dbfa:	4b10      	ldr	r3, [pc, #64]	; (800dc3c <tcp_timewait_input+0xe0>)
 800dbfc:	881b      	ldrh	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00c      	beq.n	800dc1c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	8b5b      	ldrh	r3, [r3, #26]
 800dc06:	f043 0302 	orr.w	r3, r3, #2
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f002 fcfb 	bl	801060c <tcp_output>
  }
  return;
 800dc16:	e001      	b.n	800dc1c <tcp_timewait_input+0xc0>
    return;
 800dc18:	bf00      	nop
 800dc1a:	e000      	b.n	800dc1e <tcp_timewait_input+0xc2>
  return;
 800dc1c:	bf00      	nop
}
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	20006874 	.word	0x20006874
 800dc28:	08017a94 	.word	0x08017a94
 800dc2c:	08017cac 	.word	0x08017cac
 800dc30:	08017ae0 	.word	0x08017ae0
 800dc34:	20006868 	.word	0x20006868
 800dc38:	2000686c 	.word	0x2000686c
 800dc3c:	20006872 	.word	0x20006872
 800dc40:	20006858 	.word	0x20006858
 800dc44:	20009c28 	.word	0x20009c28
 800dc48:	20009c2c 	.word	0x20009c2c
 800dc4c:	2000d330 	.word	0x2000d330

0800dc50 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800dc50:	b590      	push	{r4, r7, lr}
 800dc52:	b08d      	sub	sp, #52	; 0x34
 800dc54:	af04      	add	r7, sp, #16
 800dc56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d106      	bne.n	800dc74 <tcp_process+0x24>
 800dc66:	4ba5      	ldr	r3, [pc, #660]	; (800defc <tcp_process+0x2ac>)
 800dc68:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800dc6c:	49a4      	ldr	r1, [pc, #656]	; (800df00 <tcp_process+0x2b0>)
 800dc6e:	48a5      	ldr	r0, [pc, #660]	; (800df04 <tcp_process+0x2b4>)
 800dc70:	f007 f938 	bl	8014ee4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800dc74:	4ba4      	ldr	r3, [pc, #656]	; (800df08 <tcp_process+0x2b8>)
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	f003 0304 	and.w	r3, r3, #4
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d04e      	beq.n	800dd1e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	7d1b      	ldrb	r3, [r3, #20]
 800dc84:	2b02      	cmp	r3, #2
 800dc86:	d108      	bne.n	800dc9a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc8c:	4b9f      	ldr	r3, [pc, #636]	; (800df0c <tcp_process+0x2bc>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d123      	bne.n	800dcdc <tcp_process+0x8c>
        acceptable = 1;
 800dc94:	2301      	movs	r3, #1
 800dc96:	76fb      	strb	r3, [r7, #27]
 800dc98:	e020      	b.n	800dcdc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc9e:	4b9c      	ldr	r3, [pc, #624]	; (800df10 <tcp_process+0x2c0>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d102      	bne.n	800dcac <tcp_process+0x5c>
        acceptable = 1;
 800dca6:	2301      	movs	r3, #1
 800dca8:	76fb      	strb	r3, [r7, #27]
 800dcaa:	e017      	b.n	800dcdc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dcac:	4b98      	ldr	r3, [pc, #608]	; (800df10 <tcp_process+0x2c0>)
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb4:	1ad3      	subs	r3, r2, r3
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	db10      	blt.n	800dcdc <tcp_process+0x8c>
 800dcba:	4b95      	ldr	r3, [pc, #596]	; (800df10 <tcp_process+0x2c0>)
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc2:	6879      	ldr	r1, [r7, #4]
 800dcc4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dcc6:	440b      	add	r3, r1
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	dc06      	bgt.n	800dcdc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	8b5b      	ldrh	r3, [r3, #26]
 800dcd2:	f043 0302 	orr.w	r3, r3, #2
 800dcd6:	b29a      	uxth	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800dcdc:	7efb      	ldrb	r3, [r7, #27]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d01b      	beq.n	800dd1a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	7d1b      	ldrb	r3, [r3, #20]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d106      	bne.n	800dcf8 <tcp_process+0xa8>
 800dcea:	4b84      	ldr	r3, [pc, #528]	; (800defc <tcp_process+0x2ac>)
 800dcec:	f44f 724e 	mov.w	r2, #824	; 0x338
 800dcf0:	4988      	ldr	r1, [pc, #544]	; (800df14 <tcp_process+0x2c4>)
 800dcf2:	4884      	ldr	r0, [pc, #528]	; (800df04 <tcp_process+0x2b4>)
 800dcf4:	f007 f8f6 	bl	8014ee4 <iprintf>
      recv_flags |= TF_RESET;
 800dcf8:	4b87      	ldr	r3, [pc, #540]	; (800df18 <tcp_process+0x2c8>)
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	f043 0308 	orr.w	r3, r3, #8
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	4b85      	ldr	r3, [pc, #532]	; (800df18 <tcp_process+0x2c8>)
 800dd04:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	8b5b      	ldrh	r3, [r3, #26]
 800dd0a:	f023 0301 	bic.w	r3, r3, #1
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800dd14:	f06f 030d 	mvn.w	r3, #13
 800dd18:	e37a      	b.n	800e410 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	e378      	b.n	800e410 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800dd1e:	4b7a      	ldr	r3, [pc, #488]	; (800df08 <tcp_process+0x2b8>)
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	f003 0302 	and.w	r3, r3, #2
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d010      	beq.n	800dd4c <tcp_process+0xfc>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	7d1b      	ldrb	r3, [r3, #20]
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	d00c      	beq.n	800dd4c <tcp_process+0xfc>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	7d1b      	ldrb	r3, [r3, #20]
 800dd36:	2b03      	cmp	r3, #3
 800dd38:	d008      	beq.n	800dd4c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	8b5b      	ldrh	r3, [r3, #26]
 800dd3e:	f043 0302 	orr.w	r3, r3, #2
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	e361      	b.n	800e410 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	8b5b      	ldrh	r3, [r3, #26]
 800dd50:	f003 0310 	and.w	r3, r3, #16
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d103      	bne.n	800dd60 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800dd58:	4b70      	ldr	r3, [pc, #448]	; (800df1c <tcp_process+0x2cc>)
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f001 fc2d 	bl	800f5d0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	7d1b      	ldrb	r3, [r3, #20]
 800dd7a:	3b02      	subs	r3, #2
 800dd7c:	2b07      	cmp	r3, #7
 800dd7e:	f200 8337 	bhi.w	800e3f0 <tcp_process+0x7a0>
 800dd82:	a201      	add	r2, pc, #4	; (adr r2, 800dd88 <tcp_process+0x138>)
 800dd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd88:	0800dda9 	.word	0x0800dda9
 800dd8c:	0800dfd9 	.word	0x0800dfd9
 800dd90:	0800e151 	.word	0x0800e151
 800dd94:	0800e17b 	.word	0x0800e17b
 800dd98:	0800e29f 	.word	0x0800e29f
 800dd9c:	0800e151 	.word	0x0800e151
 800dda0:	0800e32b 	.word	0x0800e32b
 800dda4:	0800e3bb 	.word	0x0800e3bb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800dda8:	4b57      	ldr	r3, [pc, #348]	; (800df08 <tcp_process+0x2b8>)
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	f003 0310 	and.w	r3, r3, #16
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	f000 80e4 	beq.w	800df7e <tcp_process+0x32e>
 800ddb6:	4b54      	ldr	r3, [pc, #336]	; (800df08 <tcp_process+0x2b8>)
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	f003 0302 	and.w	r3, r3, #2
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f000 80dd 	beq.w	800df7e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddc8:	1c5a      	adds	r2, r3, #1
 800ddca:	4b50      	ldr	r3, [pc, #320]	; (800df0c <tcp_process+0x2bc>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	f040 80d5 	bne.w	800df7e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ddd4:	4b4e      	ldr	r3, [pc, #312]	; (800df10 <tcp_process+0x2c0>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	1c5a      	adds	r2, r3, #1
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800dde6:	4b49      	ldr	r3, [pc, #292]	; (800df0c <tcp_process+0x2bc>)
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ddee:	4b4c      	ldr	r3, [pc, #304]	; (800df20 <tcp_process+0x2d0>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	89db      	ldrh	r3, [r3, #14]
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800de08:	4b41      	ldr	r3, [pc, #260]	; (800df10 <tcp_process+0x2c0>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	1e5a      	subs	r2, r3, #1
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2204      	movs	r2, #4
 800de16:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	3304      	adds	r3, #4
 800de20:	4618      	mov	r0, r3
 800de22:	f005 faa7 	bl	8013374 <ip4_route>
 800de26:	4601      	mov	r1, r0
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	3304      	adds	r3, #4
 800de2c:	461a      	mov	r2, r3
 800de2e:	4620      	mov	r0, r4
 800de30:	f7ff f88e 	bl	800cf50 <tcp_eff_send_mss_netif>
 800de34:	4603      	mov	r3, r0
 800de36:	461a      	mov	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de40:	009a      	lsls	r2, r3, #2
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de46:	005b      	lsls	r3, r3, #1
 800de48:	f241 111c 	movw	r1, #4380	; 0x111c
 800de4c:	428b      	cmp	r3, r1
 800de4e:	bf38      	it	cc
 800de50:	460b      	movcc	r3, r1
 800de52:	429a      	cmp	r2, r3
 800de54:	d204      	bcs.n	800de60 <tcp_process+0x210>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	e00d      	b.n	800de7c <tcp_process+0x22c>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	f241 121c 	movw	r2, #4380	; 0x111c
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d904      	bls.n	800de78 <tcp_process+0x228>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de72:	005b      	lsls	r3, r3, #1
 800de74:	b29b      	uxth	r3, r3
 800de76:	e001      	b.n	800de7c <tcp_process+0x22c>
 800de78:	f241 131c 	movw	r3, #4380	; 0x111c
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d106      	bne.n	800de9a <tcp_process+0x24a>
 800de8c:	4b1b      	ldr	r3, [pc, #108]	; (800defc <tcp_process+0x2ac>)
 800de8e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800de92:	4924      	ldr	r1, [pc, #144]	; (800df24 <tcp_process+0x2d4>)
 800de94:	481b      	ldr	r0, [pc, #108]	; (800df04 <tcp_process+0x2b4>)
 800de96:	f007 f825 	bl	8014ee4 <iprintf>
        --pcb->snd_queuelen;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dea0:	3b01      	subs	r3, #1
 800dea2:	b29a      	uxth	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deae:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d111      	bne.n	800deda <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deba:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <tcp_process+0x280>
 800dec2:	4b0e      	ldr	r3, [pc, #56]	; (800defc <tcp_process+0x2ac>)
 800dec4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800dec8:	4917      	ldr	r1, [pc, #92]	; (800df28 <tcp_process+0x2d8>)
 800deca:	480e      	ldr	r0, [pc, #56]	; (800df04 <tcp_process+0x2b4>)
 800decc:	f007 f80a 	bl	8014ee4 <iprintf>
          pcb->unsent = rseg->next;
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	66da      	str	r2, [r3, #108]	; 0x6c
 800ded8:	e003      	b.n	800dee2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800dee2:	69f8      	ldr	r0, [r7, #28]
 800dee4:	f7fe fc6f 	bl	800c7c6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deec:	2b00      	cmp	r3, #0
 800deee:	d11d      	bne.n	800df2c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800def6:	861a      	strh	r2, [r3, #48]	; 0x30
 800def8:	e01f      	b.n	800df3a <tcp_process+0x2ea>
 800defa:	bf00      	nop
 800defc:	08017a94 	.word	0x08017a94
 800df00:	08017ccc 	.word	0x08017ccc
 800df04:	08017ae0 	.word	0x08017ae0
 800df08:	20006874 	.word	0x20006874
 800df0c:	2000686c 	.word	0x2000686c
 800df10:	20006868 	.word	0x20006868
 800df14:	08017ce8 	.word	0x08017ce8
 800df18:	20006875 	.word	0x20006875
 800df1c:	2000d330 	.word	0x2000d330
 800df20:	20006858 	.word	0x20006858
 800df24:	08017d08 	.word	0x08017d08
 800df28:	08017d20 	.word	0x08017d20
        } else {
          pcb->rtime = 0;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00a      	beq.n	800df5a <tcp_process+0x30a>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	6910      	ldr	r0, [r2, #16]
 800df4e:	2200      	movs	r2, #0
 800df50:	6879      	ldr	r1, [r7, #4]
 800df52:	4798      	blx	r3
 800df54:	4603      	mov	r3, r0
 800df56:	76bb      	strb	r3, [r7, #26]
 800df58:	e001      	b.n	800df5e <tcp_process+0x30e>
 800df5a:	2300      	movs	r3, #0
 800df5c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800df5e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800df62:	f113 0f0d 	cmn.w	r3, #13
 800df66:	d102      	bne.n	800df6e <tcp_process+0x31e>
          return ERR_ABRT;
 800df68:	f06f 030c 	mvn.w	r3, #12
 800df6c:	e250      	b.n	800e410 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	8b5b      	ldrh	r3, [r3, #26]
 800df72:	f043 0302 	orr.w	r3, r3, #2
 800df76:	b29a      	uxth	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800df7c:	e23a      	b.n	800e3f4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800df7e:	4b9d      	ldr	r3, [pc, #628]	; (800e1f4 <tcp_process+0x5a4>)
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	f003 0310 	and.w	r3, r3, #16
 800df86:	2b00      	cmp	r3, #0
 800df88:	f000 8234 	beq.w	800e3f4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df8c:	4b9a      	ldr	r3, [pc, #616]	; (800e1f8 <tcp_process+0x5a8>)
 800df8e:	6819      	ldr	r1, [r3, #0]
 800df90:	4b9a      	ldr	r3, [pc, #616]	; (800e1fc <tcp_process+0x5ac>)
 800df92:	881b      	ldrh	r3, [r3, #0]
 800df94:	461a      	mov	r2, r3
 800df96:	4b9a      	ldr	r3, [pc, #616]	; (800e200 <tcp_process+0x5b0>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df9c:	4b99      	ldr	r3, [pc, #612]	; (800e204 <tcp_process+0x5b4>)
 800df9e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfa0:	885b      	ldrh	r3, [r3, #2]
 800dfa2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfa4:	4a97      	ldr	r2, [pc, #604]	; (800e204 <tcp_process+0x5b4>)
 800dfa6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfa8:	8812      	ldrh	r2, [r2, #0]
 800dfaa:	b292      	uxth	r2, r2
 800dfac:	9202      	str	r2, [sp, #8]
 800dfae:	9301      	str	r3, [sp, #4]
 800dfb0:	4b95      	ldr	r3, [pc, #596]	; (800e208 <tcp_process+0x5b8>)
 800dfb2:	9300      	str	r3, [sp, #0]
 800dfb4:	4b95      	ldr	r3, [pc, #596]	; (800e20c <tcp_process+0x5bc>)
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f003 f8db 	bl	8011174 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dfc4:	2b05      	cmp	r3, #5
 800dfc6:	f200 8215 	bhi.w	800e3f4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f002 fea5 	bl	8010d20 <tcp_rexmit_rto>
      break;
 800dfd6:	e20d      	b.n	800e3f4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800dfd8:	4b86      	ldr	r3, [pc, #536]	; (800e1f4 <tcp_process+0x5a4>)
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	f003 0310 	and.w	r3, r3, #16
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f000 80a1 	beq.w	800e128 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dfe6:	4b84      	ldr	r3, [pc, #528]	; (800e1f8 <tcp_process+0x5a8>)
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfee:	1ad3      	subs	r3, r2, r3
 800dff0:	3b01      	subs	r3, #1
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	db7e      	blt.n	800e0f4 <tcp_process+0x4a4>
 800dff6:	4b80      	ldr	r3, [pc, #512]	; (800e1f8 <tcp_process+0x5a8>)
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dffe:	1ad3      	subs	r3, r2, r3
 800e000:	2b00      	cmp	r3, #0
 800e002:	dc77      	bgt.n	800e0f4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2204      	movs	r2, #4
 800e008:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d102      	bne.n	800e018 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e012:	23fa      	movs	r3, #250	; 0xfa
 800e014:	76bb      	strb	r3, [r7, #26]
 800e016:	e01d      	b.n	800e054 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e01c:	699b      	ldr	r3, [r3, #24]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d106      	bne.n	800e030 <tcp_process+0x3e0>
 800e022:	4b7b      	ldr	r3, [pc, #492]	; (800e210 <tcp_process+0x5c0>)
 800e024:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e028:	497a      	ldr	r1, [pc, #488]	; (800e214 <tcp_process+0x5c4>)
 800e02a:	487b      	ldr	r0, [pc, #492]	; (800e218 <tcp_process+0x5c8>)
 800e02c:	f006 ff5a 	bl	8014ee4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e034:	699b      	ldr	r3, [r3, #24]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00a      	beq.n	800e050 <tcp_process+0x400>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e03e:	699b      	ldr	r3, [r3, #24]
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	6910      	ldr	r0, [r2, #16]
 800e044:	2200      	movs	r2, #0
 800e046:	6879      	ldr	r1, [r7, #4]
 800e048:	4798      	blx	r3
 800e04a:	4603      	mov	r3, r0
 800e04c:	76bb      	strb	r3, [r7, #26]
 800e04e:	e001      	b.n	800e054 <tcp_process+0x404>
 800e050:	23f0      	movs	r3, #240	; 0xf0
 800e052:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e054:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d00a      	beq.n	800e072 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e05c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e060:	f113 0f0d 	cmn.w	r3, #13
 800e064:	d002      	beq.n	800e06c <tcp_process+0x41c>
              tcp_abort(pcb);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f7fd fde4 	bl	800bc34 <tcp_abort>
            }
            return ERR_ABRT;
 800e06c:	f06f 030c 	mvn.w	r3, #12
 800e070:	e1ce      	b.n	800e410 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 fae0 	bl	800e638 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e078:	4b68      	ldr	r3, [pc, #416]	; (800e21c <tcp_process+0x5cc>)
 800e07a:	881b      	ldrh	r3, [r3, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d005      	beq.n	800e08c <tcp_process+0x43c>
            recv_acked--;
 800e080:	4b66      	ldr	r3, [pc, #408]	; (800e21c <tcp_process+0x5cc>)
 800e082:	881b      	ldrh	r3, [r3, #0]
 800e084:	3b01      	subs	r3, #1
 800e086:	b29a      	uxth	r2, r3
 800e088:	4b64      	ldr	r3, [pc, #400]	; (800e21c <tcp_process+0x5cc>)
 800e08a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e090:	009a      	lsls	r2, r3, #2
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e096:	005b      	lsls	r3, r3, #1
 800e098:	f241 111c 	movw	r1, #4380	; 0x111c
 800e09c:	428b      	cmp	r3, r1
 800e09e:	bf38      	it	cc
 800e0a0:	460b      	movcc	r3, r1
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d204      	bcs.n	800e0b0 <tcp_process+0x460>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	e00d      	b.n	800e0cc <tcp_process+0x47c>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e0b4:	005b      	lsls	r3, r3, #1
 800e0b6:	f241 121c 	movw	r2, #4380	; 0x111c
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d904      	bls.n	800e0c8 <tcp_process+0x478>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e0c2:	005b      	lsls	r3, r3, #1
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	e001      	b.n	800e0cc <tcp_process+0x47c>
 800e0c8:	f241 131c 	movw	r3, #4380	; 0x111c
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e0d2:	4b53      	ldr	r3, [pc, #332]	; (800e220 <tcp_process+0x5d0>)
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	f003 0320 	and.w	r3, r3, #32
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d037      	beq.n	800e14e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	8b5b      	ldrh	r3, [r3, #26]
 800e0e2:	f043 0302 	orr.w	r3, r3, #2
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2207      	movs	r2, #7
 800e0f0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e0f2:	e02c      	b.n	800e14e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0f4:	4b40      	ldr	r3, [pc, #256]	; (800e1f8 <tcp_process+0x5a8>)
 800e0f6:	6819      	ldr	r1, [r3, #0]
 800e0f8:	4b40      	ldr	r3, [pc, #256]	; (800e1fc <tcp_process+0x5ac>)
 800e0fa:	881b      	ldrh	r3, [r3, #0]
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	4b40      	ldr	r3, [pc, #256]	; (800e200 <tcp_process+0x5b0>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e104:	4b3f      	ldr	r3, [pc, #252]	; (800e204 <tcp_process+0x5b4>)
 800e106:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e108:	885b      	ldrh	r3, [r3, #2]
 800e10a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e10c:	4a3d      	ldr	r2, [pc, #244]	; (800e204 <tcp_process+0x5b4>)
 800e10e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e110:	8812      	ldrh	r2, [r2, #0]
 800e112:	b292      	uxth	r2, r2
 800e114:	9202      	str	r2, [sp, #8]
 800e116:	9301      	str	r3, [sp, #4]
 800e118:	4b3b      	ldr	r3, [pc, #236]	; (800e208 <tcp_process+0x5b8>)
 800e11a:	9300      	str	r3, [sp, #0]
 800e11c:	4b3b      	ldr	r3, [pc, #236]	; (800e20c <tcp_process+0x5bc>)
 800e11e:	4602      	mov	r2, r0
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f003 f827 	bl	8011174 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e126:	e167      	b.n	800e3f8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e128:	4b32      	ldr	r3, [pc, #200]	; (800e1f4 <tcp_process+0x5a4>)
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	f003 0302 	and.w	r3, r3, #2
 800e130:	2b00      	cmp	r3, #0
 800e132:	f000 8161 	beq.w	800e3f8 <tcp_process+0x7a8>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e13a:	1e5a      	subs	r2, r3, #1
 800e13c:	4b30      	ldr	r3, [pc, #192]	; (800e200 <tcp_process+0x5b0>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	429a      	cmp	r2, r3
 800e142:	f040 8159 	bne.w	800e3f8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f002 fe0c 	bl	8010d64 <tcp_rexmit>
      break;
 800e14c:	e154      	b.n	800e3f8 <tcp_process+0x7a8>
 800e14e:	e153      	b.n	800e3f8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f000 fa71 	bl	800e638 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e156:	4b32      	ldr	r3, [pc, #200]	; (800e220 <tcp_process+0x5d0>)
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	f003 0320 	and.w	r3, r3, #32
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f000 814c 	beq.w	800e3fc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	8b5b      	ldrh	r3, [r3, #26]
 800e168:	f043 0302 	orr.w	r3, r3, #2
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2207      	movs	r2, #7
 800e176:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e178:	e140      	b.n	800e3fc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 fa5c 	bl	800e638 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e180:	4b27      	ldr	r3, [pc, #156]	; (800e220 <tcp_process+0x5d0>)
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	f003 0320 	and.w	r3, r3, #32
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d071      	beq.n	800e270 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e18c:	4b19      	ldr	r3, [pc, #100]	; (800e1f4 <tcp_process+0x5a4>)
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	f003 0310 	and.w	r3, r3, #16
 800e194:	2b00      	cmp	r3, #0
 800e196:	d060      	beq.n	800e25a <tcp_process+0x60a>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e19c:	4b16      	ldr	r3, [pc, #88]	; (800e1f8 <tcp_process+0x5a8>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d15a      	bne.n	800e25a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d156      	bne.n	800e25a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	8b5b      	ldrh	r3, [r3, #26]
 800e1b0:	f043 0302 	orr.w	r3, r3, #2
 800e1b4:	b29a      	uxth	r2, r3
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7fe fdbe 	bl	800cd3c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e1c0:	4b18      	ldr	r3, [pc, #96]	; (800e224 <tcp_process+0x5d4>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d105      	bne.n	800e1d6 <tcp_process+0x586>
 800e1ca:	4b16      	ldr	r3, [pc, #88]	; (800e224 <tcp_process+0x5d4>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	4a14      	ldr	r2, [pc, #80]	; (800e224 <tcp_process+0x5d4>)
 800e1d2:	6013      	str	r3, [r2, #0]
 800e1d4:	e02e      	b.n	800e234 <tcp_process+0x5e4>
 800e1d6:	4b13      	ldr	r3, [pc, #76]	; (800e224 <tcp_process+0x5d4>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	617b      	str	r3, [r7, #20]
 800e1dc:	e027      	b.n	800e22e <tcp_process+0x5de>
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d11f      	bne.n	800e228 <tcp_process+0x5d8>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	68da      	ldr	r2, [r3, #12]
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	60da      	str	r2, [r3, #12]
 800e1f0:	e020      	b.n	800e234 <tcp_process+0x5e4>
 800e1f2:	bf00      	nop
 800e1f4:	20006874 	.word	0x20006874
 800e1f8:	2000686c 	.word	0x2000686c
 800e1fc:	20006872 	.word	0x20006872
 800e200:	20006868 	.word	0x20006868
 800e204:	20006858 	.word	0x20006858
 800e208:	20009c28 	.word	0x20009c28
 800e20c:	20009c2c 	.word	0x20009c2c
 800e210:	08017a94 	.word	0x08017a94
 800e214:	08017d34 	.word	0x08017d34
 800e218:	08017ae0 	.word	0x08017ae0
 800e21c:	20006870 	.word	0x20006870
 800e220:	20006875 	.word	0x20006875
 800e224:	2000d32c 	.word	0x2000d32c
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	617b      	str	r3, [r7, #20]
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1d4      	bne.n	800e1de <tcp_process+0x58e>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2200      	movs	r2, #0
 800e238:	60da      	str	r2, [r3, #12]
 800e23a:	4b77      	ldr	r3, [pc, #476]	; (800e418 <tcp_process+0x7c8>)
 800e23c:	2201      	movs	r2, #1
 800e23e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	220a      	movs	r2, #10
 800e244:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e246:	4b75      	ldr	r3, [pc, #468]	; (800e41c <tcp_process+0x7cc>)
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	60da      	str	r2, [r3, #12]
 800e24e:	4a73      	ldr	r2, [pc, #460]	; (800e41c <tcp_process+0x7cc>)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6013      	str	r3, [r2, #0]
 800e254:	f003 f950 	bl	80114f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e258:	e0d2      	b.n	800e400 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	8b5b      	ldrh	r3, [r3, #26]
 800e25e:	f043 0302 	orr.w	r3, r3, #2
 800e262:	b29a      	uxth	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2208      	movs	r2, #8
 800e26c:	751a      	strb	r2, [r3, #20]
      break;
 800e26e:	e0c7      	b.n	800e400 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e270:	4b6b      	ldr	r3, [pc, #428]	; (800e420 <tcp_process+0x7d0>)
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	f003 0310 	and.w	r3, r3, #16
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f000 80c1 	beq.w	800e400 <tcp_process+0x7b0>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e282:	4b68      	ldr	r3, [pc, #416]	; (800e424 <tcp_process+0x7d4>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	429a      	cmp	r2, r3
 800e288:	f040 80ba 	bne.w	800e400 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e290:	2b00      	cmp	r3, #0
 800e292:	f040 80b5 	bne.w	800e400 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2206      	movs	r2, #6
 800e29a:	751a      	strb	r2, [r3, #20]
      break;
 800e29c:	e0b0      	b.n	800e400 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 f9ca 	bl	800e638 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e2a4:	4b60      	ldr	r3, [pc, #384]	; (800e428 <tcp_process+0x7d8>)
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	f003 0320 	and.w	r3, r3, #32
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f000 80a9 	beq.w	800e404 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	8b5b      	ldrh	r3, [r3, #26]
 800e2b6:	f043 0302 	orr.w	r3, r3, #2
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7fe fd3b 	bl	800cd3c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e2c6:	4b59      	ldr	r3, [pc, #356]	; (800e42c <tcp_process+0x7dc>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d105      	bne.n	800e2dc <tcp_process+0x68c>
 800e2d0:	4b56      	ldr	r3, [pc, #344]	; (800e42c <tcp_process+0x7dc>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	4a55      	ldr	r2, [pc, #340]	; (800e42c <tcp_process+0x7dc>)
 800e2d8:	6013      	str	r3, [r2, #0]
 800e2da:	e013      	b.n	800e304 <tcp_process+0x6b4>
 800e2dc:	4b53      	ldr	r3, [pc, #332]	; (800e42c <tcp_process+0x7dc>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	613b      	str	r3, [r7, #16]
 800e2e2:	e00c      	b.n	800e2fe <tcp_process+0x6ae>
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	687a      	ldr	r2, [r7, #4]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d104      	bne.n	800e2f8 <tcp_process+0x6a8>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	68da      	ldr	r2, [r3, #12]
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	60da      	str	r2, [r3, #12]
 800e2f6:	e005      	b.n	800e304 <tcp_process+0x6b4>
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	613b      	str	r3, [r7, #16]
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1ef      	bne.n	800e2e4 <tcp_process+0x694>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2200      	movs	r2, #0
 800e308:	60da      	str	r2, [r3, #12]
 800e30a:	4b43      	ldr	r3, [pc, #268]	; (800e418 <tcp_process+0x7c8>)
 800e30c:	2201      	movs	r2, #1
 800e30e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	220a      	movs	r2, #10
 800e314:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e316:	4b41      	ldr	r3, [pc, #260]	; (800e41c <tcp_process+0x7cc>)
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	60da      	str	r2, [r3, #12]
 800e31e:	4a3f      	ldr	r2, [pc, #252]	; (800e41c <tcp_process+0x7cc>)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6013      	str	r3, [r2, #0]
 800e324:	f003 f8e8 	bl	80114f8 <tcp_timer_needed>
      }
      break;
 800e328:	e06c      	b.n	800e404 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 f984 	bl	800e638 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e330:	4b3b      	ldr	r3, [pc, #236]	; (800e420 <tcp_process+0x7d0>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	f003 0310 	and.w	r3, r3, #16
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d065      	beq.n	800e408 <tcp_process+0x7b8>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e340:	4b38      	ldr	r3, [pc, #224]	; (800e424 <tcp_process+0x7d4>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	429a      	cmp	r2, r3
 800e346:	d15f      	bne.n	800e408 <tcp_process+0x7b8>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d15b      	bne.n	800e408 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7fe fcf3 	bl	800cd3c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e356:	4b35      	ldr	r3, [pc, #212]	; (800e42c <tcp_process+0x7dc>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d105      	bne.n	800e36c <tcp_process+0x71c>
 800e360:	4b32      	ldr	r3, [pc, #200]	; (800e42c <tcp_process+0x7dc>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	4a31      	ldr	r2, [pc, #196]	; (800e42c <tcp_process+0x7dc>)
 800e368:	6013      	str	r3, [r2, #0]
 800e36a:	e013      	b.n	800e394 <tcp_process+0x744>
 800e36c:	4b2f      	ldr	r3, [pc, #188]	; (800e42c <tcp_process+0x7dc>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	60fb      	str	r3, [r7, #12]
 800e372:	e00c      	b.n	800e38e <tcp_process+0x73e>
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d104      	bne.n	800e388 <tcp_process+0x738>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	68da      	ldr	r2, [r3, #12]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	60da      	str	r2, [r3, #12]
 800e386:	e005      	b.n	800e394 <tcp_process+0x744>
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	60fb      	str	r3, [r7, #12]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d1ef      	bne.n	800e374 <tcp_process+0x724>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	60da      	str	r2, [r3, #12]
 800e39a:	4b1f      	ldr	r3, [pc, #124]	; (800e418 <tcp_process+0x7c8>)
 800e39c:	2201      	movs	r2, #1
 800e39e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	220a      	movs	r2, #10
 800e3a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e3a6:	4b1d      	ldr	r3, [pc, #116]	; (800e41c <tcp_process+0x7cc>)
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	60da      	str	r2, [r3, #12]
 800e3ae:	4a1b      	ldr	r2, [pc, #108]	; (800e41c <tcp_process+0x7cc>)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6013      	str	r3, [r2, #0]
 800e3b4:	f003 f8a0 	bl	80114f8 <tcp_timer_needed>
      }
      break;
 800e3b8:	e026      	b.n	800e408 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 f93c 	bl	800e638 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e3c0:	4b17      	ldr	r3, [pc, #92]	; (800e420 <tcp_process+0x7d0>)
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	f003 0310 	and.w	r3, r3, #16
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d01f      	beq.n	800e40c <tcp_process+0x7bc>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3d0:	4b14      	ldr	r3, [pc, #80]	; (800e424 <tcp_process+0x7d4>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d119      	bne.n	800e40c <tcp_process+0x7bc>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d115      	bne.n	800e40c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e3e0:	4b11      	ldr	r3, [pc, #68]	; (800e428 <tcp_process+0x7d8>)
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	f043 0310 	orr.w	r3, r3, #16
 800e3e8:	b2da      	uxtb	r2, r3
 800e3ea:	4b0f      	ldr	r3, [pc, #60]	; (800e428 <tcp_process+0x7d8>)
 800e3ec:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e3ee:	e00d      	b.n	800e40c <tcp_process+0x7bc>
    default:
      break;
 800e3f0:	bf00      	nop
 800e3f2:	e00c      	b.n	800e40e <tcp_process+0x7be>
      break;
 800e3f4:	bf00      	nop
 800e3f6:	e00a      	b.n	800e40e <tcp_process+0x7be>
      break;
 800e3f8:	bf00      	nop
 800e3fa:	e008      	b.n	800e40e <tcp_process+0x7be>
      break;
 800e3fc:	bf00      	nop
 800e3fe:	e006      	b.n	800e40e <tcp_process+0x7be>
      break;
 800e400:	bf00      	nop
 800e402:	e004      	b.n	800e40e <tcp_process+0x7be>
      break;
 800e404:	bf00      	nop
 800e406:	e002      	b.n	800e40e <tcp_process+0x7be>
      break;
 800e408:	bf00      	nop
 800e40a:	e000      	b.n	800e40e <tcp_process+0x7be>
      break;
 800e40c:	bf00      	nop
  }
  return ERR_OK;
 800e40e:	2300      	movs	r3, #0
}
 800e410:	4618      	mov	r0, r3
 800e412:	3724      	adds	r7, #36	; 0x24
 800e414:	46bd      	mov	sp, r7
 800e416:	bd90      	pop	{r4, r7, pc}
 800e418:	2000d328 	.word	0x2000d328
 800e41c:	2000d33c 	.word	0x2000d33c
 800e420:	20006874 	.word	0x20006874
 800e424:	2000686c 	.word	0x2000686c
 800e428:	20006875 	.word	0x20006875
 800e42c:	2000d32c 	.word	0x2000d32c

0800e430 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e430:	b590      	push	{r4, r7, lr}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d106      	bne.n	800e44e <tcp_oos_insert_segment+0x1e>
 800e440:	4b3b      	ldr	r3, [pc, #236]	; (800e530 <tcp_oos_insert_segment+0x100>)
 800e442:	f240 421f 	movw	r2, #1055	; 0x41f
 800e446:	493b      	ldr	r1, [pc, #236]	; (800e534 <tcp_oos_insert_segment+0x104>)
 800e448:	483b      	ldr	r0, [pc, #236]	; (800e538 <tcp_oos_insert_segment+0x108>)
 800e44a:	f006 fd4b 	bl	8014ee4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	899b      	ldrh	r3, [r3, #12]
 800e454:	b29b      	uxth	r3, r3
 800e456:	4618      	mov	r0, r3
 800e458:	f7fb faa4 	bl	80099a4 <lwip_htons>
 800e45c:	4603      	mov	r3, r0
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	f003 0301 	and.w	r3, r3, #1
 800e464:	2b00      	cmp	r3, #0
 800e466:	d028      	beq.n	800e4ba <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e468:	6838      	ldr	r0, [r7, #0]
 800e46a:	f7fe f997 	bl	800c79c <tcp_segs_free>
    next = NULL;
 800e46e:	2300      	movs	r3, #0
 800e470:	603b      	str	r3, [r7, #0]
 800e472:	e056      	b.n	800e522 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	899b      	ldrh	r3, [r3, #12]
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fb fa91 	bl	80099a4 <lwip_htons>
 800e482:	4603      	mov	r3, r0
 800e484:	b2db      	uxtb	r3, r3
 800e486:	f003 0301 	and.w	r3, r3, #1
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d00d      	beq.n	800e4aa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	899b      	ldrh	r3, [r3, #12]
 800e494:	b29c      	uxth	r4, r3
 800e496:	2001      	movs	r0, #1
 800e498:	f7fb fa84 	bl	80099a4 <lwip_htons>
 800e49c:	4603      	mov	r3, r0
 800e49e:	461a      	mov	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	4322      	orrs	r2, r4
 800e4a6:	b292      	uxth	r2, r2
 800e4a8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e4b4:	68f8      	ldr	r0, [r7, #12]
 800e4b6:	f7fe f986 	bl	800c7c6 <tcp_seg_free>
    while (next &&
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00e      	beq.n	800e4de <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	891b      	ldrh	r3, [r3, #8]
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	4b1d      	ldr	r3, [pc, #116]	; (800e53c <tcp_oos_insert_segment+0x10c>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	441a      	add	r2, r3
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	6839      	ldr	r1, [r7, #0]
 800e4d4:	8909      	ldrh	r1, [r1, #8]
 800e4d6:	440b      	add	r3, r1
 800e4d8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	daca      	bge.n	800e474 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d01e      	beq.n	800e522 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	891b      	ldrh	r3, [r3, #8]
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	4b14      	ldr	r3, [pc, #80]	; (800e53c <tcp_oos_insert_segment+0x10c>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	441a      	add	r2, r3
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	dd12      	ble.n	800e522 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	b29a      	uxth	r2, r3
 800e504:	4b0d      	ldr	r3, [pc, #52]	; (800e53c <tcp_oos_insert_segment+0x10c>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	b29b      	uxth	r3, r3
 800e50a:	1ad3      	subs	r3, r2, r3
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	685a      	ldr	r2, [r3, #4]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	891b      	ldrh	r3, [r3, #8]
 800e51a:	4619      	mov	r1, r3
 800e51c:	4610      	mov	r0, r2
 800e51e:	f7fc fc03 	bl	800ad28 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	683a      	ldr	r2, [r7, #0]
 800e526:	601a      	str	r2, [r3, #0]
}
 800e528:	bf00      	nop
 800e52a:	3714      	adds	r7, #20
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd90      	pop	{r4, r7, pc}
 800e530:	08017a94 	.word	0x08017a94
 800e534:	08017d54 	.word	0x08017d54
 800e538:	08017ae0 	.word	0x08017ae0
 800e53c:	20006868 	.word	0x20006868

0800e540 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e540:	b5b0      	push	{r4, r5, r7, lr}
 800e542:	b086      	sub	sp, #24
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	607a      	str	r2, [r7, #4]
 800e54c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e54e:	e03e      	b.n	800e5ce <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fc fdf6 	bl	800b150 <pbuf_clen>
 800e564:	4603      	mov	r3, r0
 800e566:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e56e:	8a7a      	ldrh	r2, [r7, #18]
 800e570:	429a      	cmp	r2, r3
 800e572:	d906      	bls.n	800e582 <tcp_free_acked_segments+0x42>
 800e574:	4b2a      	ldr	r3, [pc, #168]	; (800e620 <tcp_free_acked_segments+0xe0>)
 800e576:	f240 4257 	movw	r2, #1111	; 0x457
 800e57a:	492a      	ldr	r1, [pc, #168]	; (800e624 <tcp_free_acked_segments+0xe4>)
 800e57c:	482a      	ldr	r0, [pc, #168]	; (800e628 <tcp_free_acked_segments+0xe8>)
 800e57e:	f006 fcb1 	bl	8014ee4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e588:	8a7b      	ldrh	r3, [r7, #18]
 800e58a:	1ad3      	subs	r3, r2, r3
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	891a      	ldrh	r2, [r3, #8]
 800e598:	4b24      	ldr	r3, [pc, #144]	; (800e62c <tcp_free_acked_segments+0xec>)
 800e59a:	881b      	ldrh	r3, [r3, #0]
 800e59c:	4413      	add	r3, r2
 800e59e:	b29a      	uxth	r2, r3
 800e5a0:	4b22      	ldr	r3, [pc, #136]	; (800e62c <tcp_free_acked_segments+0xec>)
 800e5a2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e5a4:	6978      	ldr	r0, [r7, #20]
 800e5a6:	f7fe f90e 	bl	800c7c6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00c      	beq.n	800e5ce <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d109      	bne.n	800e5ce <tcp_free_acked_segments+0x8e>
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d106      	bne.n	800e5ce <tcp_free_acked_segments+0x8e>
 800e5c0:	4b17      	ldr	r3, [pc, #92]	; (800e620 <tcp_free_acked_segments+0xe0>)
 800e5c2:	f240 4261 	movw	r2, #1121	; 0x461
 800e5c6:	491a      	ldr	r1, [pc, #104]	; (800e630 <tcp_free_acked_segments+0xf0>)
 800e5c8:	4817      	ldr	r0, [pc, #92]	; (800e628 <tcp_free_acked_segments+0xe8>)
 800e5ca:	f006 fc8b 	bl	8014ee4 <iprintf>
  while (seg_list != NULL &&
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d020      	beq.n	800e616 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	68db      	ldr	r3, [r3, #12]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fb f9f7 	bl	80099ce <lwip_htonl>
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	891b      	ldrh	r3, [r3, #8]
 800e5e6:	461d      	mov	r5, r3
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	899b      	ldrh	r3, [r3, #12]
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f7fb f9d7 	bl	80099a4 <lwip_htons>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	f003 0303 	and.w	r3, r3, #3
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d001      	beq.n	800e606 <tcp_free_acked_segments+0xc6>
 800e602:	2301      	movs	r3, #1
 800e604:	e000      	b.n	800e608 <tcp_free_acked_segments+0xc8>
 800e606:	2300      	movs	r3, #0
 800e608:	442b      	add	r3, r5
 800e60a:	18e2      	adds	r2, r4, r3
 800e60c:	4b09      	ldr	r3, [pc, #36]	; (800e634 <tcp_free_acked_segments+0xf4>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e612:	2b00      	cmp	r3, #0
 800e614:	dd9c      	ble.n	800e550 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e616:	68bb      	ldr	r3, [r7, #8]
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3718      	adds	r7, #24
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bdb0      	pop	{r4, r5, r7, pc}
 800e620:	08017a94 	.word	0x08017a94
 800e624:	08017d7c 	.word	0x08017d7c
 800e628:	08017ae0 	.word	0x08017ae0
 800e62c:	20006870 	.word	0x20006870
 800e630:	08017da4 	.word	0x08017da4
 800e634:	2000686c 	.word	0x2000686c

0800e638 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e638:	b5b0      	push	{r4, r5, r7, lr}
 800e63a:	b094      	sub	sp, #80	; 0x50
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e640:	2300      	movs	r3, #0
 800e642:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d106      	bne.n	800e658 <tcp_receive+0x20>
 800e64a:	4ba6      	ldr	r3, [pc, #664]	; (800e8e4 <tcp_receive+0x2ac>)
 800e64c:	f240 427b 	movw	r2, #1147	; 0x47b
 800e650:	49a5      	ldr	r1, [pc, #660]	; (800e8e8 <tcp_receive+0x2b0>)
 800e652:	48a6      	ldr	r0, [pc, #664]	; (800e8ec <tcp_receive+0x2b4>)
 800e654:	f006 fc46 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	7d1b      	ldrb	r3, [r3, #20]
 800e65c:	2b03      	cmp	r3, #3
 800e65e:	d806      	bhi.n	800e66e <tcp_receive+0x36>
 800e660:	4ba0      	ldr	r3, [pc, #640]	; (800e8e4 <tcp_receive+0x2ac>)
 800e662:	f240 427c 	movw	r2, #1148	; 0x47c
 800e666:	49a2      	ldr	r1, [pc, #648]	; (800e8f0 <tcp_receive+0x2b8>)
 800e668:	48a0      	ldr	r0, [pc, #640]	; (800e8ec <tcp_receive+0x2b4>)
 800e66a:	f006 fc3b 	bl	8014ee4 <iprintf>

  if (flags & TCP_ACK) {
 800e66e:	4ba1      	ldr	r3, [pc, #644]	; (800e8f4 <tcp_receive+0x2bc>)
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	f003 0310 	and.w	r3, r3, #16
 800e676:	2b00      	cmp	r3, #0
 800e678:	f000 8263 	beq.w	800eb42 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e682:	461a      	mov	r2, r3
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e688:	4413      	add	r3, r2
 800e68a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e690:	4b99      	ldr	r3, [pc, #612]	; (800e8f8 <tcp_receive+0x2c0>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	2b00      	cmp	r3, #0
 800e698:	db1b      	blt.n	800e6d2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e69e:	4b96      	ldr	r3, [pc, #600]	; (800e8f8 <tcp_receive+0x2c0>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d106      	bne.n	800e6b4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e6aa:	4b94      	ldr	r3, [pc, #592]	; (800e8fc <tcp_receive+0x2c4>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	1ad3      	subs	r3, r2, r3
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	db0e      	blt.n	800e6d2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e6b8:	4b90      	ldr	r3, [pc, #576]	; (800e8fc <tcp_receive+0x2c4>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d125      	bne.n	800e70c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e6c0:	4b8f      	ldr	r3, [pc, #572]	; (800e900 <tcp_receive+0x2c8>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	89db      	ldrh	r3, [r3, #14]
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d91c      	bls.n	800e70c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e6d2:	4b8b      	ldr	r3, [pc, #556]	; (800e900 <tcp_receive+0x2c8>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	89db      	ldrh	r3, [r3, #14]
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d205      	bcs.n	800e6fc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e6fc:	4b7e      	ldr	r3, [pc, #504]	; (800e8f8 <tcp_receive+0x2c0>)
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e704:	4b7d      	ldr	r3, [pc, #500]	; (800e8fc <tcp_receive+0x2c4>)
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e70c:	4b7b      	ldr	r3, [pc, #492]	; (800e8fc <tcp_receive+0x2c4>)
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e714:	1ad3      	subs	r3, r2, r3
 800e716:	2b00      	cmp	r3, #0
 800e718:	dc58      	bgt.n	800e7cc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e71a:	4b7a      	ldr	r3, [pc, #488]	; (800e904 <tcp_receive+0x2cc>)
 800e71c:	881b      	ldrh	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d14b      	bne.n	800e7ba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e72c:	4413      	add	r3, r2
 800e72e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e730:	429a      	cmp	r2, r3
 800e732:	d142      	bne.n	800e7ba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	db3d      	blt.n	800e7ba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e742:	4b6e      	ldr	r3, [pc, #440]	; (800e8fc <tcp_receive+0x2c4>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	429a      	cmp	r2, r3
 800e748:	d137      	bne.n	800e7ba <tcp_receive+0x182>
              found_dupack = 1;
 800e74a:	2301      	movs	r3, #1
 800e74c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e754:	2bff      	cmp	r3, #255	; 0xff
 800e756:	d007      	beq.n	800e768 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e75e:	3301      	adds	r3, #1
 800e760:	b2da      	uxtb	r2, r3
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e76e:	2b03      	cmp	r3, #3
 800e770:	d91b      	bls.n	800e7aa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e77c:	4413      	add	r3, r2
 800e77e:	b29a      	uxth	r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e786:	429a      	cmp	r2, r3
 800e788:	d30a      	bcc.n	800e7a0 <tcp_receive+0x168>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e794:	4413      	add	r3, r2
 800e796:	b29a      	uxth	r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e79e:	e004      	b.n	800e7aa <tcp_receive+0x172>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	d902      	bls.n	800e7ba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f002 fb41 	bl	8010e3c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e7ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f040 8160 	bne.w	800ea82 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e7ca:	e15a      	b.n	800ea82 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e7cc:	4b4b      	ldr	r3, [pc, #300]	; (800e8fc <tcp_receive+0x2c4>)
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7d4:	1ad3      	subs	r3, r2, r3
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	f2c0 814d 	blt.w	800ea78 <tcp_receive+0x440>
 800e7de:	4b47      	ldr	r3, [pc, #284]	; (800e8fc <tcp_receive+0x2c4>)
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7e6:	1ad3      	subs	r3, r2, r3
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f300 8145 	bgt.w	800ea78 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	8b5b      	ldrh	r3, [r3, #26]
 800e7f2:	f003 0304 	and.w	r3, r3, #4
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d010      	beq.n	800e81c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	8b5b      	ldrh	r3, [r3, #26]
 800e7fe:	f023 0304 	bic.w	r3, r3, #4
 800e802:	b29a      	uxth	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2200      	movs	r2, #0
 800e818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2200      	movs	r2, #0
 800e820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e82a:	10db      	asrs	r3, r3, #3
 800e82c:	b21b      	sxth	r3, r3
 800e82e:	b29a      	uxth	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e836:	b29b      	uxth	r3, r3
 800e838:	4413      	add	r3, r2
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	b21a      	sxth	r2, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e844:	4b2d      	ldr	r3, [pc, #180]	; (800e8fc <tcp_receive+0x2c4>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	b29a      	uxth	r2, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e84e:	b29b      	uxth	r3, r3
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2200      	movs	r2, #0
 800e858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e85c:	4b27      	ldr	r3, [pc, #156]	; (800e8fc <tcp_receive+0x2c4>)
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	7d1b      	ldrb	r3, [r3, #20]
 800e868:	2b03      	cmp	r3, #3
 800e86a:	f240 8096 	bls.w	800e99a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d244      	bcs.n	800e908 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	8b5b      	ldrh	r3, [r3, #26]
 800e882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e886:	2b00      	cmp	r3, #0
 800e888:	d001      	beq.n	800e88e <tcp_receive+0x256>
 800e88a:	2301      	movs	r3, #1
 800e88c:	e000      	b.n	800e890 <tcp_receive+0x258>
 800e88e:	2302      	movs	r3, #2
 800e890:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e894:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e898:	b29a      	uxth	r2, r3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e89e:	fb12 f303 	smulbb	r3, r2, r3
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	bf28      	it	cs
 800e8aa:	4613      	movcs	r3, r2
 800e8ac:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e8b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e8b6:	4413      	add	r3, r2
 800e8b8:	b29a      	uxth	r2, r3
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d309      	bcc.n	800e8d8 <tcp_receive+0x2a0>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e8ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e8cc:	4413      	add	r3, r2
 800e8ce:	b29a      	uxth	r2, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e8d6:	e060      	b.n	800e99a <tcp_receive+0x362>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e8e2:	e05a      	b.n	800e99a <tcp_receive+0x362>
 800e8e4:	08017a94 	.word	0x08017a94
 800e8e8:	08017dc4 	.word	0x08017dc4
 800e8ec:	08017ae0 	.word	0x08017ae0
 800e8f0:	08017de0 	.word	0x08017de0
 800e8f4:	20006874 	.word	0x20006874
 800e8f8:	20006868 	.word	0x20006868
 800e8fc:	2000686c 	.word	0x2000686c
 800e900:	20006858 	.word	0x20006858
 800e904:	20006872 	.word	0x20006872
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e90e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e910:	4413      	add	r3, r2
 800e912:	b29a      	uxth	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d309      	bcc.n	800e932 <tcp_receive+0x2fa>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e924:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e926:	4413      	add	r3, r2
 800e928:	b29a      	uxth	r2, r3
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e930:	e004      	b.n	800e93c <tcp_receive+0x304>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e948:	429a      	cmp	r2, r3
 800e94a:	d326      	bcc.n	800e99a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e958:	1ad3      	subs	r3, r2, r3
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e96c:	4413      	add	r3, r2
 800e96e:	b29a      	uxth	r2, r3
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e976:	429a      	cmp	r2, r3
 800e978:	d30a      	bcc.n	800e990 <tcp_receive+0x358>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e984:	4413      	add	r3, r2
 800e986:	b29a      	uxth	r2, r3
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e98e:	e004      	b.n	800e99a <tcp_receive+0x362>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e996:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9a2:	4a98      	ldr	r2, [pc, #608]	; (800ec04 <tcp_receive+0x5cc>)
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff fdcb 	bl	800e540 <tcp_free_acked_segments>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9b8:	4a93      	ldr	r2, [pc, #588]	; (800ec08 <tcp_receive+0x5d0>)
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f7ff fdc0 	bl	800e540 <tcp_free_acked_segments>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d104      	bne.n	800e9d8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9d4:	861a      	strh	r2, [r3, #48]	; 0x30
 800e9d6:	e002      	b.n	800e9de <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d103      	bne.n	800e9f4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e9fa:	4b84      	ldr	r3, [pc, #528]	; (800ec0c <tcp_receive+0x5d4>)
 800e9fc:	881b      	ldrh	r3, [r3, #0]
 800e9fe:	4413      	add	r3, r2
 800ea00:	b29a      	uxth	r2, r3
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	8b5b      	ldrh	r3, [r3, #26]
 800ea0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d035      	beq.n	800ea80 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d118      	bne.n	800ea4e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d00c      	beq.n	800ea3e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7fa ffcc 	bl	80099ce <lwip_htonl>
 800ea36:	4603      	mov	r3, r0
 800ea38:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	dc20      	bgt.n	800ea80 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	8b5b      	ldrh	r3, [r3, #26]
 800ea42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea46:	b29a      	uxth	r2, r3
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ea4c:	e018      	b.n	800ea80 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fa ffb7 	bl	80099ce <lwip_htonl>
 800ea60:	4603      	mov	r3, r0
 800ea62:	1ae3      	subs	r3, r4, r3
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	dc0b      	bgt.n	800ea80 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	8b5b      	ldrh	r3, [r3, #26]
 800ea6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea70:	b29a      	uxth	r2, r3
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ea76:	e003      	b.n	800ea80 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f002 fbcd 	bl	8011218 <tcp_send_empty_ack>
 800ea7e:	e000      	b.n	800ea82 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ea80:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d05b      	beq.n	800eb42 <tcp_receive+0x50a>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea8e:	4b60      	ldr	r3, [pc, #384]	; (800ec10 <tcp_receive+0x5d8>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	1ad3      	subs	r3, r2, r3
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	da54      	bge.n	800eb42 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ea98:	4b5e      	ldr	r3, [pc, #376]	; (800ec14 <tcp_receive+0x5dc>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	b29a      	uxth	r2, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	1ad3      	subs	r3, r2, r3
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800eaac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eab6:	10db      	asrs	r3, r3, #3
 800eab8:	b21b      	sxth	r3, r3
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	1ad3      	subs	r3, r2, r3
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eaca:	b29a      	uxth	r2, r3
 800eacc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ead0:	4413      	add	r3, r2
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	b21a      	sxth	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800eada:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800eade:	2b00      	cmp	r3, #0
 800eae0:	da05      	bge.n	800eaee <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800eae2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800eae6:	425b      	negs	r3, r3
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800eaee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eaf8:	109b      	asrs	r3, r3, #2
 800eafa:	b21b      	sxth	r3, r3
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	1ad3      	subs	r3, r2, r3
 800eb00:	b29b      	uxth	r3, r3
 800eb02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eb0c:	b29a      	uxth	r2, r3
 800eb0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800eb12:	4413      	add	r3, r2
 800eb14:	b29b      	uxth	r3, r3
 800eb16:	b21a      	sxth	r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eb22:	10db      	asrs	r3, r3, #3
 800eb24:	b21b      	sxth	r3, r3
 800eb26:	b29a      	uxth	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	4413      	add	r3, r2
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	b21a      	sxth	r2, r3
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800eb42:	4b35      	ldr	r3, [pc, #212]	; (800ec18 <tcp_receive+0x5e0>)
 800eb44:	881b      	ldrh	r3, [r3, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	f000 84e1 	beq.w	800f50e <tcp_receive+0xed6>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	7d1b      	ldrb	r3, [r3, #20]
 800eb50:	2b06      	cmp	r3, #6
 800eb52:	f200 84dc 	bhi.w	800f50e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb5a:	4b30      	ldr	r3, [pc, #192]	; (800ec1c <tcp_receive+0x5e4>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	3b01      	subs	r3, #1
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	f2c0 808e 	blt.w	800ec84 <tcp_receive+0x64c>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb6c:	4b2a      	ldr	r3, [pc, #168]	; (800ec18 <tcp_receive+0x5e0>)
 800eb6e:	881b      	ldrh	r3, [r3, #0]
 800eb70:	4619      	mov	r1, r3
 800eb72:	4b2a      	ldr	r3, [pc, #168]	; (800ec1c <tcp_receive+0x5e4>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	440b      	add	r3, r1
 800eb78:	1ad3      	subs	r3, r2, r3
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	f300 8081 	bgt.w	800ec84 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800eb82:	4b27      	ldr	r3, [pc, #156]	; (800ec20 <tcp_receive+0x5e8>)
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb8c:	4b23      	ldr	r3, [pc, #140]	; (800ec1c <tcp_receive+0x5e4>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800eb94:	4b22      	ldr	r3, [pc, #136]	; (800ec20 <tcp_receive+0x5e8>)
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d106      	bne.n	800ebaa <tcp_receive+0x572>
 800eb9c:	4b21      	ldr	r3, [pc, #132]	; (800ec24 <tcp_receive+0x5ec>)
 800eb9e:	f240 5294 	movw	r2, #1428	; 0x594
 800eba2:	4921      	ldr	r1, [pc, #132]	; (800ec28 <tcp_receive+0x5f0>)
 800eba4:	4821      	ldr	r0, [pc, #132]	; (800ec2c <tcp_receive+0x5f4>)
 800eba6:	f006 f99d 	bl	8014ee4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ebaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d906      	bls.n	800ebc2 <tcp_receive+0x58a>
 800ebb4:	4b1b      	ldr	r3, [pc, #108]	; (800ec24 <tcp_receive+0x5ec>)
 800ebb6:	f240 5295 	movw	r2, #1429	; 0x595
 800ebba:	491d      	ldr	r1, [pc, #116]	; (800ec30 <tcp_receive+0x5f8>)
 800ebbc:	481b      	ldr	r0, [pc, #108]	; (800ec2c <tcp_receive+0x5f4>)
 800ebbe:	f006 f991 	bl	8014ee4 <iprintf>
      off = (u16_t)off32;
 800ebc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ebc8:	4b15      	ldr	r3, [pc, #84]	; (800ec20 <tcp_receive+0x5e8>)
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	891b      	ldrh	r3, [r3, #8]
 800ebce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d906      	bls.n	800ebe4 <tcp_receive+0x5ac>
 800ebd6:	4b13      	ldr	r3, [pc, #76]	; (800ec24 <tcp_receive+0x5ec>)
 800ebd8:	f240 5297 	movw	r2, #1431	; 0x597
 800ebdc:	4915      	ldr	r1, [pc, #84]	; (800ec34 <tcp_receive+0x5fc>)
 800ebde:	4813      	ldr	r0, [pc, #76]	; (800ec2c <tcp_receive+0x5f4>)
 800ebe0:	f006 f980 	bl	8014ee4 <iprintf>
      inseg.len -= off;
 800ebe4:	4b0e      	ldr	r3, [pc, #56]	; (800ec20 <tcp_receive+0x5e8>)
 800ebe6:	891a      	ldrh	r2, [r3, #8]
 800ebe8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ebec:	1ad3      	subs	r3, r2, r3
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	4b0b      	ldr	r3, [pc, #44]	; (800ec20 <tcp_receive+0x5e8>)
 800ebf2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ebf4:	4b0a      	ldr	r3, [pc, #40]	; (800ec20 <tcp_receive+0x5e8>)
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	891a      	ldrh	r2, [r3, #8]
 800ebfa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ebfe:	1ad3      	subs	r3, r2, r3
 800ec00:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ec02:	e029      	b.n	800ec58 <tcp_receive+0x620>
 800ec04:	08017dfc 	.word	0x08017dfc
 800ec08:	08017e04 	.word	0x08017e04
 800ec0c:	20006870 	.word	0x20006870
 800ec10:	2000686c 	.word	0x2000686c
 800ec14:	2000d330 	.word	0x2000d330
 800ec18:	20006872 	.word	0x20006872
 800ec1c:	20006868 	.word	0x20006868
 800ec20:	20006848 	.word	0x20006848
 800ec24:	08017a94 	.word	0x08017a94
 800ec28:	08017e0c 	.word	0x08017e0c
 800ec2c:	08017ae0 	.word	0x08017ae0
 800ec30:	08017e1c 	.word	0x08017e1c
 800ec34:	08017e2c 	.word	0x08017e2c
        off -= p->len;
 800ec38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec3a:	895b      	ldrh	r3, [r3, #10]
 800ec3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ec40:	1ad3      	subs	r3, r2, r3
 800ec42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ec46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec48:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ec4a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ec4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec4e:	2200      	movs	r2, #0
 800ec50:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ec52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ec58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec5a:	895b      	ldrh	r3, [r3, #10]
 800ec5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d8e9      	bhi.n	800ec38 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ec64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ec68:	4619      	mov	r1, r3
 800ec6a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ec6c:	f7fc f95c 	bl	800af28 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec74:	4a91      	ldr	r2, [pc, #580]	; (800eebc <tcp_receive+0x884>)
 800ec76:	6013      	str	r3, [r2, #0]
 800ec78:	4b91      	ldr	r3, [pc, #580]	; (800eec0 <tcp_receive+0x888>)
 800ec7a:	68db      	ldr	r3, [r3, #12]
 800ec7c:	4a8f      	ldr	r2, [pc, #572]	; (800eebc <tcp_receive+0x884>)
 800ec7e:	6812      	ldr	r2, [r2, #0]
 800ec80:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ec82:	e00d      	b.n	800eca0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ec84:	4b8d      	ldr	r3, [pc, #564]	; (800eebc <tcp_receive+0x884>)
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec8c:	1ad3      	subs	r3, r2, r3
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	da06      	bge.n	800eca0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	8b5b      	ldrh	r3, [r3, #26]
 800ec96:	f043 0302 	orr.w	r3, r3, #2
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eca0:	4b86      	ldr	r3, [pc, #536]	; (800eebc <tcp_receive+0x884>)
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca8:	1ad3      	subs	r3, r2, r3
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	f2c0 842a 	blt.w	800f504 <tcp_receive+0xecc>
 800ecb0:	4b82      	ldr	r3, [pc, #520]	; (800eebc <tcp_receive+0x884>)
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb8:	6879      	ldr	r1, [r7, #4]
 800ecba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ecbc:	440b      	add	r3, r1
 800ecbe:	1ad3      	subs	r3, r2, r3
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	f300 841e 	bgt.w	800f504 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eccc:	4b7b      	ldr	r3, [pc, #492]	; (800eebc <tcp_receive+0x884>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	f040 829a 	bne.w	800f20a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ecd6:	4b7a      	ldr	r3, [pc, #488]	; (800eec0 <tcp_receive+0x888>)
 800ecd8:	891c      	ldrh	r4, [r3, #8]
 800ecda:	4b79      	ldr	r3, [pc, #484]	; (800eec0 <tcp_receive+0x888>)
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	899b      	ldrh	r3, [r3, #12]
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fa fe5e 	bl	80099a4 <lwip_htons>
 800ece8:	4603      	mov	r3, r0
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	f003 0303 	and.w	r3, r3, #3
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d001      	beq.n	800ecf8 <tcp_receive+0x6c0>
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	e000      	b.n	800ecfa <tcp_receive+0x6c2>
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	4423      	add	r3, r4
 800ecfc:	b29a      	uxth	r2, r3
 800ecfe:	4b71      	ldr	r3, [pc, #452]	; (800eec4 <tcp_receive+0x88c>)
 800ed00:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed06:	4b6f      	ldr	r3, [pc, #444]	; (800eec4 <tcp_receive+0x88c>)
 800ed08:	881b      	ldrh	r3, [r3, #0]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d275      	bcs.n	800edfa <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ed0e:	4b6c      	ldr	r3, [pc, #432]	; (800eec0 <tcp_receive+0x888>)
 800ed10:	68db      	ldr	r3, [r3, #12]
 800ed12:	899b      	ldrh	r3, [r3, #12]
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fa fe44 	bl	80099a4 <lwip_htons>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	f003 0301 	and.w	r3, r3, #1
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d01f      	beq.n	800ed68 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ed28:	4b65      	ldr	r3, [pc, #404]	; (800eec0 <tcp_receive+0x888>)
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	899b      	ldrh	r3, [r3, #12]
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	b21b      	sxth	r3, r3
 800ed32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ed36:	b21c      	sxth	r4, r3
 800ed38:	4b61      	ldr	r3, [pc, #388]	; (800eec0 <tcp_receive+0x888>)
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	899b      	ldrh	r3, [r3, #12]
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fa fe2f 	bl	80099a4 <lwip_htons>
 800ed46:	4603      	mov	r3, r0
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7fa fe26 	bl	80099a4 <lwip_htons>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	b21b      	sxth	r3, r3
 800ed5c:	4323      	orrs	r3, r4
 800ed5e:	b21a      	sxth	r2, r3
 800ed60:	4b57      	ldr	r3, [pc, #348]	; (800eec0 <tcp_receive+0x888>)
 800ed62:	68db      	ldr	r3, [r3, #12]
 800ed64:	b292      	uxth	r2, r2
 800ed66:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed6c:	4b54      	ldr	r3, [pc, #336]	; (800eec0 <tcp_receive+0x888>)
 800ed6e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ed70:	4b53      	ldr	r3, [pc, #332]	; (800eec0 <tcp_receive+0x888>)
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	899b      	ldrh	r3, [r3, #12]
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7fa fe13 	bl	80099a4 <lwip_htons>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	f003 0302 	and.w	r3, r3, #2
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d005      	beq.n	800ed96 <tcp_receive+0x75e>
            inseg.len -= 1;
 800ed8a:	4b4d      	ldr	r3, [pc, #308]	; (800eec0 <tcp_receive+0x888>)
 800ed8c:	891b      	ldrh	r3, [r3, #8]
 800ed8e:	3b01      	subs	r3, #1
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	4b4b      	ldr	r3, [pc, #300]	; (800eec0 <tcp_receive+0x888>)
 800ed94:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ed96:	4b4a      	ldr	r3, [pc, #296]	; (800eec0 <tcp_receive+0x888>)
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	4a49      	ldr	r2, [pc, #292]	; (800eec0 <tcp_receive+0x888>)
 800ed9c:	8912      	ldrh	r2, [r2, #8]
 800ed9e:	4611      	mov	r1, r2
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7fb ffc1 	bl	800ad28 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800eda6:	4b46      	ldr	r3, [pc, #280]	; (800eec0 <tcp_receive+0x888>)
 800eda8:	891c      	ldrh	r4, [r3, #8]
 800edaa:	4b45      	ldr	r3, [pc, #276]	; (800eec0 <tcp_receive+0x888>)
 800edac:	68db      	ldr	r3, [r3, #12]
 800edae:	899b      	ldrh	r3, [r3, #12]
 800edb0:	b29b      	uxth	r3, r3
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fa fdf6 	bl	80099a4 <lwip_htons>
 800edb8:	4603      	mov	r3, r0
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	f003 0303 	and.w	r3, r3, #3
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d001      	beq.n	800edc8 <tcp_receive+0x790>
 800edc4:	2301      	movs	r3, #1
 800edc6:	e000      	b.n	800edca <tcp_receive+0x792>
 800edc8:	2300      	movs	r3, #0
 800edca:	4423      	add	r3, r4
 800edcc:	b29a      	uxth	r2, r3
 800edce:	4b3d      	ldr	r3, [pc, #244]	; (800eec4 <tcp_receive+0x88c>)
 800edd0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800edd2:	4b3c      	ldr	r3, [pc, #240]	; (800eec4 <tcp_receive+0x88c>)
 800edd4:	881b      	ldrh	r3, [r3, #0]
 800edd6:	461a      	mov	r2, r3
 800edd8:	4b38      	ldr	r3, [pc, #224]	; (800eebc <tcp_receive+0x884>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	441a      	add	r2, r3
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ede2:	6879      	ldr	r1, [r7, #4]
 800ede4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ede6:	440b      	add	r3, r1
 800ede8:	429a      	cmp	r2, r3
 800edea:	d006      	beq.n	800edfa <tcp_receive+0x7c2>
 800edec:	4b36      	ldr	r3, [pc, #216]	; (800eec8 <tcp_receive+0x890>)
 800edee:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800edf2:	4936      	ldr	r1, [pc, #216]	; (800eecc <tcp_receive+0x894>)
 800edf4:	4836      	ldr	r0, [pc, #216]	; (800eed0 <tcp_receive+0x898>)
 800edf6:	f006 f875 	bl	8014ee4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	f000 80e7 	beq.w	800efd2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ee04:	4b2e      	ldr	r3, [pc, #184]	; (800eec0 <tcp_receive+0x888>)
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	899b      	ldrh	r3, [r3, #12]
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7fa fdc9 	bl	80099a4 <lwip_htons>
 800ee12:	4603      	mov	r3, r0
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	f003 0301 	and.w	r3, r3, #1
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d010      	beq.n	800ee40 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ee1e:	e00a      	b.n	800ee36 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee24:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ee30:	68f8      	ldr	r0, [r7, #12]
 800ee32:	f7fd fcc8 	bl	800c7c6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d1f0      	bne.n	800ee20 <tcp_receive+0x7e8>
 800ee3e:	e0c8      	b.n	800efd2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee44:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ee46:	e052      	b.n	800eeee <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ee48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	899b      	ldrh	r3, [r3, #12]
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fa fda7 	bl	80099a4 <lwip_htons>
 800ee56:	4603      	mov	r3, r0
 800ee58:	b2db      	uxtb	r3, r3
 800ee5a:	f003 0301 	and.w	r3, r3, #1
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d03d      	beq.n	800eede <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ee62:	4b17      	ldr	r3, [pc, #92]	; (800eec0 <tcp_receive+0x888>)
 800ee64:	68db      	ldr	r3, [r3, #12]
 800ee66:	899b      	ldrh	r3, [r3, #12]
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7fa fd9a 	bl	80099a4 <lwip_htons>
 800ee70:	4603      	mov	r3, r0
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d130      	bne.n	800eede <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ee7c:	4b10      	ldr	r3, [pc, #64]	; (800eec0 <tcp_receive+0x888>)
 800ee7e:	68db      	ldr	r3, [r3, #12]
 800ee80:	899b      	ldrh	r3, [r3, #12]
 800ee82:	b29c      	uxth	r4, r3
 800ee84:	2001      	movs	r0, #1
 800ee86:	f7fa fd8d 	bl	80099a4 <lwip_htons>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	4b0c      	ldr	r3, [pc, #48]	; (800eec0 <tcp_receive+0x888>)
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	4322      	orrs	r2, r4
 800ee94:	b292      	uxth	r2, r2
 800ee96:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ee98:	4b09      	ldr	r3, [pc, #36]	; (800eec0 <tcp_receive+0x888>)
 800ee9a:	891c      	ldrh	r4, [r3, #8]
 800ee9c:	4b08      	ldr	r3, [pc, #32]	; (800eec0 <tcp_receive+0x888>)
 800ee9e:	68db      	ldr	r3, [r3, #12]
 800eea0:	899b      	ldrh	r3, [r3, #12]
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7fa fd7d 	bl	80099a4 <lwip_htons>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	f003 0303 	and.w	r3, r3, #3
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00e      	beq.n	800eed4 <tcp_receive+0x89c>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	e00d      	b.n	800eed6 <tcp_receive+0x89e>
 800eeba:	bf00      	nop
 800eebc:	20006868 	.word	0x20006868
 800eec0:	20006848 	.word	0x20006848
 800eec4:	20006872 	.word	0x20006872
 800eec8:	08017a94 	.word	0x08017a94
 800eecc:	08017e3c 	.word	0x08017e3c
 800eed0:	08017ae0 	.word	0x08017ae0
 800eed4:	2300      	movs	r3, #0
 800eed6:	4423      	add	r3, r4
 800eed8:	b29a      	uxth	r2, r3
 800eeda:	4b98      	ldr	r3, [pc, #608]	; (800f13c <tcp_receive+0xb04>)
 800eedc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800eede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eee0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800eee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800eee8:	6938      	ldr	r0, [r7, #16]
 800eeea:	f7fd fc6c 	bl	800c7c6 <tcp_seg_free>
            while (next &&
 800eeee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d00e      	beq.n	800ef12 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800eef4:	4b91      	ldr	r3, [pc, #580]	; (800f13c <tcp_receive+0xb04>)
 800eef6:	881b      	ldrh	r3, [r3, #0]
 800eef8:	461a      	mov	r2, r3
 800eefa:	4b91      	ldr	r3, [pc, #580]	; (800f140 <tcp_receive+0xb08>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	441a      	add	r2, r3
 800ef00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef08:	8909      	ldrh	r1, [r1, #8]
 800ef0a:	440b      	add	r3, r1
 800ef0c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	da9a      	bge.n	800ee48 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ef12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d059      	beq.n	800efcc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ef18:	4b88      	ldr	r3, [pc, #544]	; (800f13c <tcp_receive+0xb04>)
 800ef1a:	881b      	ldrh	r3, [r3, #0]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	4b88      	ldr	r3, [pc, #544]	; (800f140 <tcp_receive+0xb08>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	441a      	add	r2, r3
 800ef24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	dd4d      	ble.n	800efcc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ef30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef32:	68db      	ldr	r3, [r3, #12]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	b29a      	uxth	r2, r3
 800ef38:	4b81      	ldr	r3, [pc, #516]	; (800f140 <tcp_receive+0xb08>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	1ad3      	subs	r3, r2, r3
 800ef40:	b29a      	uxth	r2, r3
 800ef42:	4b80      	ldr	r3, [pc, #512]	; (800f144 <tcp_receive+0xb0c>)
 800ef44:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ef46:	4b7f      	ldr	r3, [pc, #508]	; (800f144 <tcp_receive+0xb0c>)
 800ef48:	68db      	ldr	r3, [r3, #12]
 800ef4a:	899b      	ldrh	r3, [r3, #12]
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7fa fd28 	bl	80099a4 <lwip_htons>
 800ef54:	4603      	mov	r3, r0
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	f003 0302 	and.w	r3, r3, #2
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d005      	beq.n	800ef6c <tcp_receive+0x934>
                inseg.len -= 1;
 800ef60:	4b78      	ldr	r3, [pc, #480]	; (800f144 <tcp_receive+0xb0c>)
 800ef62:	891b      	ldrh	r3, [r3, #8]
 800ef64:	3b01      	subs	r3, #1
 800ef66:	b29a      	uxth	r2, r3
 800ef68:	4b76      	ldr	r3, [pc, #472]	; (800f144 <tcp_receive+0xb0c>)
 800ef6a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ef6c:	4b75      	ldr	r3, [pc, #468]	; (800f144 <tcp_receive+0xb0c>)
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	4a74      	ldr	r2, [pc, #464]	; (800f144 <tcp_receive+0xb0c>)
 800ef72:	8912      	ldrh	r2, [r2, #8]
 800ef74:	4611      	mov	r1, r2
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fb fed6 	bl	800ad28 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ef7c:	4b71      	ldr	r3, [pc, #452]	; (800f144 <tcp_receive+0xb0c>)
 800ef7e:	891c      	ldrh	r4, [r3, #8]
 800ef80:	4b70      	ldr	r3, [pc, #448]	; (800f144 <tcp_receive+0xb0c>)
 800ef82:	68db      	ldr	r3, [r3, #12]
 800ef84:	899b      	ldrh	r3, [r3, #12]
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7fa fd0b 	bl	80099a4 <lwip_htons>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	b2db      	uxtb	r3, r3
 800ef92:	f003 0303 	and.w	r3, r3, #3
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d001      	beq.n	800ef9e <tcp_receive+0x966>
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e000      	b.n	800efa0 <tcp_receive+0x968>
 800ef9e:	2300      	movs	r3, #0
 800efa0:	4423      	add	r3, r4
 800efa2:	b29a      	uxth	r2, r3
 800efa4:	4b65      	ldr	r3, [pc, #404]	; (800f13c <tcp_receive+0xb04>)
 800efa6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800efa8:	4b64      	ldr	r3, [pc, #400]	; (800f13c <tcp_receive+0xb04>)
 800efaa:	881b      	ldrh	r3, [r3, #0]
 800efac:	461a      	mov	r2, r3
 800efae:	4b64      	ldr	r3, [pc, #400]	; (800f140 <tcp_receive+0xb08>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	441a      	add	r2, r3
 800efb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	429a      	cmp	r2, r3
 800efbc:	d006      	beq.n	800efcc <tcp_receive+0x994>
 800efbe:	4b62      	ldr	r3, [pc, #392]	; (800f148 <tcp_receive+0xb10>)
 800efc0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800efc4:	4961      	ldr	r1, [pc, #388]	; (800f14c <tcp_receive+0xb14>)
 800efc6:	4862      	ldr	r0, [pc, #392]	; (800f150 <tcp_receive+0xb18>)
 800efc8:	f005 ff8c 	bl	8014ee4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800efd0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800efd2:	4b5a      	ldr	r3, [pc, #360]	; (800f13c <tcp_receive+0xb04>)
 800efd4:	881b      	ldrh	r3, [r3, #0]
 800efd6:	461a      	mov	r2, r3
 800efd8:	4b59      	ldr	r3, [pc, #356]	; (800f140 <tcp_receive+0xb08>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	441a      	add	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800efe6:	4b55      	ldr	r3, [pc, #340]	; (800f13c <tcp_receive+0xb04>)
 800efe8:	881b      	ldrh	r3, [r3, #0]
 800efea:	429a      	cmp	r2, r3
 800efec:	d206      	bcs.n	800effc <tcp_receive+0x9c4>
 800efee:	4b56      	ldr	r3, [pc, #344]	; (800f148 <tcp_receive+0xb10>)
 800eff0:	f240 6207 	movw	r2, #1543	; 0x607
 800eff4:	4957      	ldr	r1, [pc, #348]	; (800f154 <tcp_receive+0xb1c>)
 800eff6:	4856      	ldr	r0, [pc, #344]	; (800f150 <tcp_receive+0xb18>)
 800eff8:	f005 ff74 	bl	8014ee4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f000:	4b4e      	ldr	r3, [pc, #312]	; (800f13c <tcp_receive+0xb04>)
 800f002:	881b      	ldrh	r3, [r3, #0]
 800f004:	1ad3      	subs	r3, r2, r3
 800f006:	b29a      	uxth	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7fc feb5 	bl	800bd7c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f012:	4b4c      	ldr	r3, [pc, #304]	; (800f144 <tcp_receive+0xb0c>)
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	891b      	ldrh	r3, [r3, #8]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d006      	beq.n	800f02a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f01c:	4b49      	ldr	r3, [pc, #292]	; (800f144 <tcp_receive+0xb0c>)
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	4a4d      	ldr	r2, [pc, #308]	; (800f158 <tcp_receive+0xb20>)
 800f022:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f024:	4b47      	ldr	r3, [pc, #284]	; (800f144 <tcp_receive+0xb0c>)
 800f026:	2200      	movs	r2, #0
 800f028:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f02a:	4b46      	ldr	r3, [pc, #280]	; (800f144 <tcp_receive+0xb0c>)
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	899b      	ldrh	r3, [r3, #12]
 800f030:	b29b      	uxth	r3, r3
 800f032:	4618      	mov	r0, r3
 800f034:	f7fa fcb6 	bl	80099a4 <lwip_htons>
 800f038:	4603      	mov	r3, r0
 800f03a:	b2db      	uxtb	r3, r3
 800f03c:	f003 0301 	and.w	r3, r3, #1
 800f040:	2b00      	cmp	r3, #0
 800f042:	f000 80b8 	beq.w	800f1b6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f046:	4b45      	ldr	r3, [pc, #276]	; (800f15c <tcp_receive+0xb24>)
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	f043 0320 	orr.w	r3, r3, #32
 800f04e:	b2da      	uxtb	r2, r3
 800f050:	4b42      	ldr	r3, [pc, #264]	; (800f15c <tcp_receive+0xb24>)
 800f052:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f054:	e0af      	b.n	800f1b6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f05a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f060:	68db      	ldr	r3, [r3, #12]
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	4a36      	ldr	r2, [pc, #216]	; (800f140 <tcp_receive+0xb08>)
 800f066:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	891b      	ldrh	r3, [r3, #8]
 800f06c:	461c      	mov	r4, r3
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	68db      	ldr	r3, [r3, #12]
 800f072:	899b      	ldrh	r3, [r3, #12]
 800f074:	b29b      	uxth	r3, r3
 800f076:	4618      	mov	r0, r3
 800f078:	f7fa fc94 	bl	80099a4 <lwip_htons>
 800f07c:	4603      	mov	r3, r0
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	f003 0303 	and.w	r3, r3, #3
 800f084:	2b00      	cmp	r3, #0
 800f086:	d001      	beq.n	800f08c <tcp_receive+0xa54>
 800f088:	2301      	movs	r3, #1
 800f08a:	e000      	b.n	800f08e <tcp_receive+0xa56>
 800f08c:	2300      	movs	r3, #0
 800f08e:	191a      	adds	r2, r3, r4
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f094:	441a      	add	r2, r3
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f09e:	461c      	mov	r4, r3
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	891b      	ldrh	r3, [r3, #8]
 800f0a4:	461d      	mov	r5, r3
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	899b      	ldrh	r3, [r3, #12]
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7fa fc78 	bl	80099a4 <lwip_htons>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	f003 0303 	and.w	r3, r3, #3
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d001      	beq.n	800f0c4 <tcp_receive+0xa8c>
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	e000      	b.n	800f0c6 <tcp_receive+0xa8e>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	442b      	add	r3, r5
 800f0c8:	429c      	cmp	r4, r3
 800f0ca:	d206      	bcs.n	800f0da <tcp_receive+0xaa2>
 800f0cc:	4b1e      	ldr	r3, [pc, #120]	; (800f148 <tcp_receive+0xb10>)
 800f0ce:	f240 622b 	movw	r2, #1579	; 0x62b
 800f0d2:	4923      	ldr	r1, [pc, #140]	; (800f160 <tcp_receive+0xb28>)
 800f0d4:	481e      	ldr	r0, [pc, #120]	; (800f150 <tcp_receive+0xb18>)
 800f0d6:	f005 ff05 	bl	8014ee4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	891b      	ldrh	r3, [r3, #8]
 800f0de:	461c      	mov	r4, r3
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	68db      	ldr	r3, [r3, #12]
 800f0e4:	899b      	ldrh	r3, [r3, #12]
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7fa fc5b 	bl	80099a4 <lwip_htons>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	f003 0303 	and.w	r3, r3, #3
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d001      	beq.n	800f0fe <tcp_receive+0xac6>
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	e000      	b.n	800f100 <tcp_receive+0xac8>
 800f0fe:	2300      	movs	r3, #0
 800f100:	1919      	adds	r1, r3, r4
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f106:	b28b      	uxth	r3, r1
 800f108:	1ad3      	subs	r3, r2, r3
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f7fc fe33 	bl	800bd7c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	891b      	ldrh	r3, [r3, #8]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d028      	beq.n	800f172 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f120:	4b0d      	ldr	r3, [pc, #52]	; (800f158 <tcp_receive+0xb20>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d01d      	beq.n	800f164 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f128:	4b0b      	ldr	r3, [pc, #44]	; (800f158 <tcp_receive+0xb20>)
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	4619      	mov	r1, r3
 800f132:	4610      	mov	r0, r2
 800f134:	f7fc f84c 	bl	800b1d0 <pbuf_cat>
 800f138:	e018      	b.n	800f16c <tcp_receive+0xb34>
 800f13a:	bf00      	nop
 800f13c:	20006872 	.word	0x20006872
 800f140:	20006868 	.word	0x20006868
 800f144:	20006848 	.word	0x20006848
 800f148:	08017a94 	.word	0x08017a94
 800f14c:	08017e74 	.word	0x08017e74
 800f150:	08017ae0 	.word	0x08017ae0
 800f154:	08017eb0 	.word	0x08017eb0
 800f158:	20006878 	.word	0x20006878
 800f15c:	20006875 	.word	0x20006875
 800f160:	08017ed0 	.word	0x08017ed0
            } else {
              recv_data = cseg->p;
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	4a70      	ldr	r2, [pc, #448]	; (800f32c <tcp_receive+0xcf4>)
 800f16a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	2200      	movs	r2, #0
 800f170:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	68db      	ldr	r3, [r3, #12]
 800f176:	899b      	ldrh	r3, [r3, #12]
 800f178:	b29b      	uxth	r3, r3
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7fa fc12 	bl	80099a4 <lwip_htons>
 800f180:	4603      	mov	r3, r0
 800f182:	b2db      	uxtb	r3, r3
 800f184:	f003 0301 	and.w	r3, r3, #1
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00d      	beq.n	800f1a8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f18c:	4b68      	ldr	r3, [pc, #416]	; (800f330 <tcp_receive+0xcf8>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	f043 0320 	orr.w	r3, r3, #32
 800f194:	b2da      	uxtb	r2, r3
 800f196:	4b66      	ldr	r3, [pc, #408]	; (800f330 <tcp_receive+0xcf8>)
 800f198:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	7d1b      	ldrb	r3, [r3, #20]
 800f19e:	2b04      	cmp	r3, #4
 800f1a0:	d102      	bne.n	800f1a8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2207      	movs	r2, #7
 800f1a6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f1b0:	68b8      	ldr	r0, [r7, #8]
 800f1b2:	f7fd fb08 	bl	800c7c6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d008      	beq.n	800f1d0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	685a      	ldr	r2, [r3, #4]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	f43f af43 	beq.w	800f056 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	8b5b      	ldrh	r3, [r3, #26]
 800f1d4:	f003 0301 	and.w	r3, r3, #1
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d00e      	beq.n	800f1fa <tcp_receive+0xbc2>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	8b5b      	ldrh	r3, [r3, #26]
 800f1e0:	f023 0301 	bic.w	r3, r3, #1
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	835a      	strh	r2, [r3, #26]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	8b5b      	ldrh	r3, [r3, #26]
 800f1ee:	f043 0302 	orr.w	r3, r3, #2
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f1f8:	e188      	b.n	800f50c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	8b5b      	ldrh	r3, [r3, #26]
 800f1fe:	f043 0301 	orr.w	r3, r3, #1
 800f202:	b29a      	uxth	r2, r3
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f208:	e180      	b.n	800f50c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d106      	bne.n	800f220 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f212:	4848      	ldr	r0, [pc, #288]	; (800f334 <tcp_receive+0xcfc>)
 800f214:	f7fd faf0 	bl	800c7f8 <tcp_seg_copy>
 800f218:	4602      	mov	r2, r0
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	675a      	str	r2, [r3, #116]	; 0x74
 800f21e:	e16d      	b.n	800f4fc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f220:	2300      	movs	r3, #0
 800f222:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f228:	63bb      	str	r3, [r7, #56]	; 0x38
 800f22a:	e157      	b.n	800f4dc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22e:	68db      	ldr	r3, [r3, #12]
 800f230:	685a      	ldr	r2, [r3, #4]
 800f232:	4b41      	ldr	r3, [pc, #260]	; (800f338 <tcp_receive+0xd00>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	429a      	cmp	r2, r3
 800f238:	d11d      	bne.n	800f276 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f23a:	4b3e      	ldr	r3, [pc, #248]	; (800f334 <tcp_receive+0xcfc>)
 800f23c:	891a      	ldrh	r2, [r3, #8]
 800f23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f240:	891b      	ldrh	r3, [r3, #8]
 800f242:	429a      	cmp	r2, r3
 800f244:	f240 814f 	bls.w	800f4e6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f248:	483a      	ldr	r0, [pc, #232]	; (800f334 <tcp_receive+0xcfc>)
 800f24a:	f7fd fad5 	bl	800c7f8 <tcp_seg_copy>
 800f24e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	2b00      	cmp	r3, #0
 800f254:	f000 8149 	beq.w	800f4ea <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d003      	beq.n	800f266 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f260:	697a      	ldr	r2, [r7, #20]
 800f262:	601a      	str	r2, [r3, #0]
 800f264:	e002      	b.n	800f26c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	697a      	ldr	r2, [r7, #20]
 800f26a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f26c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f26e:	6978      	ldr	r0, [r7, #20]
 800f270:	f7ff f8de 	bl	800e430 <tcp_oos_insert_segment>
                }
                break;
 800f274:	e139      	b.n	800f4ea <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d117      	bne.n	800f2ac <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f27c:	4b2e      	ldr	r3, [pc, #184]	; (800f338 <tcp_receive+0xd00>)
 800f27e:	681a      	ldr	r2, [r3, #0]
 800f280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f282:	68db      	ldr	r3, [r3, #12]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	1ad3      	subs	r3, r2, r3
 800f288:	2b00      	cmp	r3, #0
 800f28a:	da57      	bge.n	800f33c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f28c:	4829      	ldr	r0, [pc, #164]	; (800f334 <tcp_receive+0xcfc>)
 800f28e:	f7fd fab3 	bl	800c7f8 <tcp_seg_copy>
 800f292:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	2b00      	cmp	r3, #0
 800f298:	f000 8129 	beq.w	800f4ee <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	69ba      	ldr	r2, [r7, #24]
 800f2a0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f2a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f2a4:	69b8      	ldr	r0, [r7, #24]
 800f2a6:	f7ff f8c3 	bl	800e430 <tcp_oos_insert_segment>
                  }
                  break;
 800f2aa:	e120      	b.n	800f4ee <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f2ac:	4b22      	ldr	r3, [pc, #136]	; (800f338 <tcp_receive+0xd00>)
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2b2:	68db      	ldr	r3, [r3, #12]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	1ad3      	subs	r3, r2, r3
 800f2b8:	3b01      	subs	r3, #1
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	db3e      	blt.n	800f33c <tcp_receive+0xd04>
 800f2be:	4b1e      	ldr	r3, [pc, #120]	; (800f338 <tcp_receive+0xd00>)
 800f2c0:	681a      	ldr	r2, [r3, #0]
 800f2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	1ad3      	subs	r3, r2, r3
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	dc35      	bgt.n	800f33c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f2d0:	4818      	ldr	r0, [pc, #96]	; (800f334 <tcp_receive+0xcfc>)
 800f2d2:	f7fd fa91 	bl	800c7f8 <tcp_seg_copy>
 800f2d6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f000 8109 	beq.w	800f4f2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2e8:	8912      	ldrh	r2, [r2, #8]
 800f2ea:	441a      	add	r2, r3
 800f2ec:	4b12      	ldr	r3, [pc, #72]	; (800f338 <tcp_receive+0xd00>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	1ad3      	subs	r3, r2, r3
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	dd12      	ble.n	800f31c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f2f6:	4b10      	ldr	r3, [pc, #64]	; (800f338 <tcp_receive+0xd00>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	b29b      	uxth	r3, r3
 800f304:	1ad3      	subs	r3, r2, r3
 800f306:	b29a      	uxth	r2, r3
 800f308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f30a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f30e:	685a      	ldr	r2, [r3, #4]
 800f310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f312:	891b      	ldrh	r3, [r3, #8]
 800f314:	4619      	mov	r1, r3
 800f316:	4610      	mov	r0, r2
 800f318:	f7fb fd06 	bl	800ad28 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f31e:	69fa      	ldr	r2, [r7, #28]
 800f320:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f322:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f324:	69f8      	ldr	r0, [r7, #28]
 800f326:	f7ff f883 	bl	800e430 <tcp_oos_insert_segment>
                  }
                  break;
 800f32a:	e0e2      	b.n	800f4f2 <tcp_receive+0xeba>
 800f32c:	20006878 	.word	0x20006878
 800f330:	20006875 	.word	0x20006875
 800f334:	20006848 	.word	0x20006848
 800f338:	20006868 	.word	0x20006868
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f33e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	f040 80c6 	bne.w	800f4d6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f34a:	4b80      	ldr	r3, [pc, #512]	; (800f54c <tcp_receive+0xf14>)
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f356:	2b00      	cmp	r3, #0
 800f358:	f340 80bd 	ble.w	800f4d6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	899b      	ldrh	r3, [r3, #12]
 800f362:	b29b      	uxth	r3, r3
 800f364:	4618      	mov	r0, r3
 800f366:	f7fa fb1d 	bl	80099a4 <lwip_htons>
 800f36a:	4603      	mov	r3, r0
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	f003 0301 	and.w	r3, r3, #1
 800f372:	2b00      	cmp	r3, #0
 800f374:	f040 80bf 	bne.w	800f4f6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f378:	4875      	ldr	r0, [pc, #468]	; (800f550 <tcp_receive+0xf18>)
 800f37a:	f7fd fa3d 	bl	800c7f8 <tcp_seg_copy>
 800f37e:	4602      	mov	r2, r0
 800f380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f382:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f000 80b6 	beq.w	800f4fa <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f390:	68db      	ldr	r3, [r3, #12]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f396:	8912      	ldrh	r2, [r2, #8]
 800f398:	441a      	add	r2, r3
 800f39a:	4b6c      	ldr	r3, [pc, #432]	; (800f54c <tcp_receive+0xf14>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	1ad3      	subs	r3, r2, r3
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	dd12      	ble.n	800f3ca <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f3a4:	4b69      	ldr	r3, [pc, #420]	; (800f54c <tcp_receive+0xf14>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3bc:	685a      	ldr	r2, [r3, #4]
 800f3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c0:	891b      	ldrh	r3, [r3, #8]
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	4610      	mov	r0, r2
 800f3c6:	f7fb fcaf 	bl	800ad28 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f3ca:	4b62      	ldr	r3, [pc, #392]	; (800f554 <tcp_receive+0xf1c>)
 800f3cc:	881b      	ldrh	r3, [r3, #0]
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	4b5e      	ldr	r3, [pc, #376]	; (800f54c <tcp_receive+0xf14>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	441a      	add	r2, r3
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3da:	6879      	ldr	r1, [r7, #4]
 800f3dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f3de:	440b      	add	r3, r1
 800f3e0:	1ad3      	subs	r3, r2, r3
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	f340 8089 	ble.w	800f4fa <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	899b      	ldrh	r3, [r3, #12]
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7fa fad6 	bl	80099a4 <lwip_htons>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	f003 0301 	and.w	r3, r3, #1
 800f400:	2b00      	cmp	r3, #0
 800f402:	d022      	beq.n	800f44a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	899b      	ldrh	r3, [r3, #12]
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	b21b      	sxth	r3, r3
 800f410:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f414:	b21c      	sxth	r4, r3
 800f416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	899b      	ldrh	r3, [r3, #12]
 800f41e:	b29b      	uxth	r3, r3
 800f420:	4618      	mov	r0, r3
 800f422:	f7fa fabf 	bl	80099a4 <lwip_htons>
 800f426:	4603      	mov	r3, r0
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f430:	b29b      	uxth	r3, r3
 800f432:	4618      	mov	r0, r3
 800f434:	f7fa fab6 	bl	80099a4 <lwip_htons>
 800f438:	4603      	mov	r3, r0
 800f43a:	b21b      	sxth	r3, r3
 800f43c:	4323      	orrs	r3, r4
 800f43e:	b21a      	sxth	r2, r3
 800f440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	68db      	ldr	r3, [r3, #12]
 800f446:	b292      	uxth	r2, r2
 800f448:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f44e:	b29a      	uxth	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f454:	4413      	add	r3, r2
 800f456:	b299      	uxth	r1, r3
 800f458:	4b3c      	ldr	r3, [pc, #240]	; (800f54c <tcp_receive+0xf14>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	b29a      	uxth	r2, r3
 800f45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	1a8a      	subs	r2, r1, r2
 800f464:	b292      	uxth	r2, r2
 800f466:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	685a      	ldr	r2, [r3, #4]
 800f46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	891b      	ldrh	r3, [r3, #8]
 800f474:	4619      	mov	r1, r3
 800f476:	4610      	mov	r0, r2
 800f478:	f7fb fc56 	bl	800ad28 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	891c      	ldrh	r4, [r3, #8]
 800f482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	68db      	ldr	r3, [r3, #12]
 800f488:	899b      	ldrh	r3, [r3, #12]
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fa fa89 	bl	80099a4 <lwip_htons>
 800f492:	4603      	mov	r3, r0
 800f494:	b2db      	uxtb	r3, r3
 800f496:	f003 0303 	and.w	r3, r3, #3
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d001      	beq.n	800f4a2 <tcp_receive+0xe6a>
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e000      	b.n	800f4a4 <tcp_receive+0xe6c>
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	4423      	add	r3, r4
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	4b2a      	ldr	r3, [pc, #168]	; (800f554 <tcp_receive+0xf1c>)
 800f4aa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f4ac:	4b29      	ldr	r3, [pc, #164]	; (800f554 <tcp_receive+0xf1c>)
 800f4ae:	881b      	ldrh	r3, [r3, #0]
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	4b26      	ldr	r3, [pc, #152]	; (800f54c <tcp_receive+0xf14>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	441a      	add	r2, r3
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4bc:	6879      	ldr	r1, [r7, #4]
 800f4be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f4c0:	440b      	add	r3, r1
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d019      	beq.n	800f4fa <tcp_receive+0xec2>
 800f4c6:	4b24      	ldr	r3, [pc, #144]	; (800f558 <tcp_receive+0xf20>)
 800f4c8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f4cc:	4923      	ldr	r1, [pc, #140]	; (800f55c <tcp_receive+0xf24>)
 800f4ce:	4824      	ldr	r0, [pc, #144]	; (800f560 <tcp_receive+0xf28>)
 800f4d0:	f005 fd08 	bl	8014ee4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f4d4:	e011      	b.n	800f4fa <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	63bb      	str	r3, [r7, #56]	; 0x38
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	f47f aea4 	bne.w	800f22c <tcp_receive+0xbf4>
 800f4e4:	e00a      	b.n	800f4fc <tcp_receive+0xec4>
                break;
 800f4e6:	bf00      	nop
 800f4e8:	e008      	b.n	800f4fc <tcp_receive+0xec4>
                break;
 800f4ea:	bf00      	nop
 800f4ec:	e006      	b.n	800f4fc <tcp_receive+0xec4>
                  break;
 800f4ee:	bf00      	nop
 800f4f0:	e004      	b.n	800f4fc <tcp_receive+0xec4>
                  break;
 800f4f2:	bf00      	nop
 800f4f4:	e002      	b.n	800f4fc <tcp_receive+0xec4>
                  break;
 800f4f6:	bf00      	nop
 800f4f8:	e000      	b.n	800f4fc <tcp_receive+0xec4>
                break;
 800f4fa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f001 fe8b 	bl	8011218 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f502:	e003      	b.n	800f50c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f001 fe87 	bl	8011218 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f50a:	e01a      	b.n	800f542 <tcp_receive+0xf0a>
 800f50c:	e019      	b.n	800f542 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f50e:	4b0f      	ldr	r3, [pc, #60]	; (800f54c <tcp_receive+0xf14>)
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f516:	1ad3      	subs	r3, r2, r3
 800f518:	2b00      	cmp	r3, #0
 800f51a:	db0a      	blt.n	800f532 <tcp_receive+0xefa>
 800f51c:	4b0b      	ldr	r3, [pc, #44]	; (800f54c <tcp_receive+0xf14>)
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f524:	6879      	ldr	r1, [r7, #4]
 800f526:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f528:	440b      	add	r3, r1
 800f52a:	1ad3      	subs	r3, r2, r3
 800f52c:	3301      	adds	r3, #1
 800f52e:	2b00      	cmp	r3, #0
 800f530:	dd07      	ble.n	800f542 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	8b5b      	ldrh	r3, [r3, #26]
 800f536:	f043 0302 	orr.w	r3, r3, #2
 800f53a:	b29a      	uxth	r2, r3
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f540:	e7ff      	b.n	800f542 <tcp_receive+0xf0a>
 800f542:	bf00      	nop
 800f544:	3750      	adds	r7, #80	; 0x50
 800f546:	46bd      	mov	sp, r7
 800f548:	bdb0      	pop	{r4, r5, r7, pc}
 800f54a:	bf00      	nop
 800f54c:	20006868 	.word	0x20006868
 800f550:	20006848 	.word	0x20006848
 800f554:	20006872 	.word	0x20006872
 800f558:	08017a94 	.word	0x08017a94
 800f55c:	08017e3c 	.word	0x08017e3c
 800f560:	08017ae0 	.word	0x08017ae0

0800f564 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f56a:	4b15      	ldr	r3, [pc, #84]	; (800f5c0 <tcp_get_next_optbyte+0x5c>)
 800f56c:	881b      	ldrh	r3, [r3, #0]
 800f56e:	1c5a      	adds	r2, r3, #1
 800f570:	b291      	uxth	r1, r2
 800f572:	4a13      	ldr	r2, [pc, #76]	; (800f5c0 <tcp_get_next_optbyte+0x5c>)
 800f574:	8011      	strh	r1, [r2, #0]
 800f576:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f578:	4b12      	ldr	r3, [pc, #72]	; (800f5c4 <tcp_get_next_optbyte+0x60>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d004      	beq.n	800f58a <tcp_get_next_optbyte+0x26>
 800f580:	4b11      	ldr	r3, [pc, #68]	; (800f5c8 <tcp_get_next_optbyte+0x64>)
 800f582:	881b      	ldrh	r3, [r3, #0]
 800f584:	88fa      	ldrh	r2, [r7, #6]
 800f586:	429a      	cmp	r2, r3
 800f588:	d208      	bcs.n	800f59c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f58a:	4b10      	ldr	r3, [pc, #64]	; (800f5cc <tcp_get_next_optbyte+0x68>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	3314      	adds	r3, #20
 800f590:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f592:	88fb      	ldrh	r3, [r7, #6]
 800f594:	683a      	ldr	r2, [r7, #0]
 800f596:	4413      	add	r3, r2
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	e00b      	b.n	800f5b4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f59c:	88fb      	ldrh	r3, [r7, #6]
 800f59e:	b2da      	uxtb	r2, r3
 800f5a0:	4b09      	ldr	r3, [pc, #36]	; (800f5c8 <tcp_get_next_optbyte+0x64>)
 800f5a2:	881b      	ldrh	r3, [r3, #0]
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	1ad3      	subs	r3, r2, r3
 800f5a8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f5aa:	4b06      	ldr	r3, [pc, #24]	; (800f5c4 <tcp_get_next_optbyte+0x60>)
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	797b      	ldrb	r3, [r7, #5]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	370c      	adds	r7, #12
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr
 800f5c0:	20006864 	.word	0x20006864
 800f5c4:	20006860 	.word	0x20006860
 800f5c8:	2000685e 	.word	0x2000685e
 800f5cc:	20006858 	.word	0x20006858

0800f5d0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d106      	bne.n	800f5ec <tcp_parseopt+0x1c>
 800f5de:	4b32      	ldr	r3, [pc, #200]	; (800f6a8 <tcp_parseopt+0xd8>)
 800f5e0:	f240 727d 	movw	r2, #1917	; 0x77d
 800f5e4:	4931      	ldr	r1, [pc, #196]	; (800f6ac <tcp_parseopt+0xdc>)
 800f5e6:	4832      	ldr	r0, [pc, #200]	; (800f6b0 <tcp_parseopt+0xe0>)
 800f5e8:	f005 fc7c 	bl	8014ee4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f5ec:	4b31      	ldr	r3, [pc, #196]	; (800f6b4 <tcp_parseopt+0xe4>)
 800f5ee:	881b      	ldrh	r3, [r3, #0]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d055      	beq.n	800f6a0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f5f4:	4b30      	ldr	r3, [pc, #192]	; (800f6b8 <tcp_parseopt+0xe8>)
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	801a      	strh	r2, [r3, #0]
 800f5fa:	e045      	b.n	800f688 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f5fc:	f7ff ffb2 	bl	800f564 <tcp_get_next_optbyte>
 800f600:	4603      	mov	r3, r0
 800f602:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f604:	7bfb      	ldrb	r3, [r7, #15]
 800f606:	2b02      	cmp	r3, #2
 800f608:	d006      	beq.n	800f618 <tcp_parseopt+0x48>
 800f60a:	2b02      	cmp	r3, #2
 800f60c:	dc2b      	bgt.n	800f666 <tcp_parseopt+0x96>
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d041      	beq.n	800f696 <tcp_parseopt+0xc6>
 800f612:	2b01      	cmp	r3, #1
 800f614:	d127      	bne.n	800f666 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f616:	e037      	b.n	800f688 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f618:	f7ff ffa4 	bl	800f564 <tcp_get_next_optbyte>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b04      	cmp	r3, #4
 800f620:	d13b      	bne.n	800f69a <tcp_parseopt+0xca>
 800f622:	4b25      	ldr	r3, [pc, #148]	; (800f6b8 <tcp_parseopt+0xe8>)
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	3301      	adds	r3, #1
 800f628:	4a22      	ldr	r2, [pc, #136]	; (800f6b4 <tcp_parseopt+0xe4>)
 800f62a:	8812      	ldrh	r2, [r2, #0]
 800f62c:	4293      	cmp	r3, r2
 800f62e:	da34      	bge.n	800f69a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f630:	f7ff ff98 	bl	800f564 <tcp_get_next_optbyte>
 800f634:	4603      	mov	r3, r0
 800f636:	b29b      	uxth	r3, r3
 800f638:	021b      	lsls	r3, r3, #8
 800f63a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f63c:	f7ff ff92 	bl	800f564 <tcp_get_next_optbyte>
 800f640:	4603      	mov	r3, r0
 800f642:	b29a      	uxth	r2, r3
 800f644:	89bb      	ldrh	r3, [r7, #12]
 800f646:	4313      	orrs	r3, r2
 800f648:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f64a:	89bb      	ldrh	r3, [r7, #12]
 800f64c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f650:	d804      	bhi.n	800f65c <tcp_parseopt+0x8c>
 800f652:	89bb      	ldrh	r3, [r7, #12]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d001      	beq.n	800f65c <tcp_parseopt+0x8c>
 800f658:	89ba      	ldrh	r2, [r7, #12]
 800f65a:	e001      	b.n	800f660 <tcp_parseopt+0x90>
 800f65c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f664:	e010      	b.n	800f688 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f666:	f7ff ff7d 	bl	800f564 <tcp_get_next_optbyte>
 800f66a:	4603      	mov	r3, r0
 800f66c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f66e:	7afb      	ldrb	r3, [r7, #11]
 800f670:	2b01      	cmp	r3, #1
 800f672:	d914      	bls.n	800f69e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f674:	7afb      	ldrb	r3, [r7, #11]
 800f676:	b29a      	uxth	r2, r3
 800f678:	4b0f      	ldr	r3, [pc, #60]	; (800f6b8 <tcp_parseopt+0xe8>)
 800f67a:	881b      	ldrh	r3, [r3, #0]
 800f67c:	4413      	add	r3, r2
 800f67e:	b29b      	uxth	r3, r3
 800f680:	3b02      	subs	r3, #2
 800f682:	b29a      	uxth	r2, r3
 800f684:	4b0c      	ldr	r3, [pc, #48]	; (800f6b8 <tcp_parseopt+0xe8>)
 800f686:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f688:	4b0b      	ldr	r3, [pc, #44]	; (800f6b8 <tcp_parseopt+0xe8>)
 800f68a:	881a      	ldrh	r2, [r3, #0]
 800f68c:	4b09      	ldr	r3, [pc, #36]	; (800f6b4 <tcp_parseopt+0xe4>)
 800f68e:	881b      	ldrh	r3, [r3, #0]
 800f690:	429a      	cmp	r2, r3
 800f692:	d3b3      	bcc.n	800f5fc <tcp_parseopt+0x2c>
 800f694:	e004      	b.n	800f6a0 <tcp_parseopt+0xd0>
          return;
 800f696:	bf00      	nop
 800f698:	e002      	b.n	800f6a0 <tcp_parseopt+0xd0>
            return;
 800f69a:	bf00      	nop
 800f69c:	e000      	b.n	800f6a0 <tcp_parseopt+0xd0>
            return;
 800f69e:	bf00      	nop
      }
    }
  }
}
 800f6a0:	3710      	adds	r7, #16
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	08017a94 	.word	0x08017a94
 800f6ac:	08017ef8 	.word	0x08017ef8
 800f6b0:	08017ae0 	.word	0x08017ae0
 800f6b4:	2000685c 	.word	0x2000685c
 800f6b8:	20006864 	.word	0x20006864

0800f6bc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f6c0:	4b05      	ldr	r3, [pc, #20]	; (800f6d8 <tcp_trigger_input_pcb_close+0x1c>)
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	f043 0310 	orr.w	r3, r3, #16
 800f6c8:	b2da      	uxtb	r2, r3
 800f6ca:	4b03      	ldr	r3, [pc, #12]	; (800f6d8 <tcp_trigger_input_pcb_close+0x1c>)
 800f6cc:	701a      	strb	r2, [r3, #0]
}
 800f6ce:	bf00      	nop
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr
 800f6d8:	20006875 	.word	0x20006875

0800f6dc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b084      	sub	sp, #16
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d00a      	beq.n	800f704 <tcp_route+0x28>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	7a1b      	ldrb	r3, [r3, #8]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d006      	beq.n	800f704 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	7a1b      	ldrb	r3, [r3, #8]
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7fb f90c 	bl	800a918 <netif_get_by_index>
 800f700:	4603      	mov	r3, r0
 800f702:	e003      	b.n	800f70c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f003 fe35 	bl	8013374 <ip4_route>
 800f70a:	4603      	mov	r3, r0
  }
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3710      	adds	r7, #16
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f714:	b590      	push	{r4, r7, lr}
 800f716:	b087      	sub	sp, #28
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	603b      	str	r3, [r7, #0]
 800f720:	4613      	mov	r3, r2
 800f722:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d105      	bne.n	800f736 <tcp_create_segment+0x22>
 800f72a:	4b44      	ldr	r3, [pc, #272]	; (800f83c <tcp_create_segment+0x128>)
 800f72c:	22a3      	movs	r2, #163	; 0xa3
 800f72e:	4944      	ldr	r1, [pc, #272]	; (800f840 <tcp_create_segment+0x12c>)
 800f730:	4844      	ldr	r0, [pc, #272]	; (800f844 <tcp_create_segment+0x130>)
 800f732:	f005 fbd7 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d105      	bne.n	800f748 <tcp_create_segment+0x34>
 800f73c:	4b3f      	ldr	r3, [pc, #252]	; (800f83c <tcp_create_segment+0x128>)
 800f73e:	22a4      	movs	r2, #164	; 0xa4
 800f740:	4941      	ldr	r1, [pc, #260]	; (800f848 <tcp_create_segment+0x134>)
 800f742:	4840      	ldr	r0, [pc, #256]	; (800f844 <tcp_create_segment+0x130>)
 800f744:	f005 fbce 	bl	8014ee4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f748:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f74c:	009b      	lsls	r3, r3, #2
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	f003 0304 	and.w	r3, r3, #4
 800f754:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f756:	2003      	movs	r0, #3
 800f758:	f7fa fdda 	bl	800a310 <memp_malloc>
 800f75c:	6138      	str	r0, [r7, #16]
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d104      	bne.n	800f76e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f764:	68b8      	ldr	r0, [r7, #8]
 800f766:	f7fb fc65 	bl	800b034 <pbuf_free>
    return NULL;
 800f76a:	2300      	movs	r3, #0
 800f76c:	e061      	b.n	800f832 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f774:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	2200      	movs	r2, #0
 800f77a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	68ba      	ldr	r2, [r7, #8]
 800f780:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	891a      	ldrh	r2, [r3, #8]
 800f786:	7dfb      	ldrb	r3, [r7, #23]
 800f788:	b29b      	uxth	r3, r3
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d205      	bcs.n	800f79a <tcp_create_segment+0x86>
 800f78e:	4b2b      	ldr	r3, [pc, #172]	; (800f83c <tcp_create_segment+0x128>)
 800f790:	22b0      	movs	r2, #176	; 0xb0
 800f792:	492e      	ldr	r1, [pc, #184]	; (800f84c <tcp_create_segment+0x138>)
 800f794:	482b      	ldr	r0, [pc, #172]	; (800f844 <tcp_create_segment+0x130>)
 800f796:	f005 fba5 	bl	8014ee4 <iprintf>
  seg->len = p->tot_len - optlen;
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	891a      	ldrh	r2, [r3, #8]
 800f79e:	7dfb      	ldrb	r3, [r7, #23]
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	1ad3      	subs	r3, r2, r3
 800f7a4:	b29a      	uxth	r2, r3
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f7aa:	2114      	movs	r1, #20
 800f7ac:	68b8      	ldr	r0, [r7, #8]
 800f7ae:	f7fb fbab 	bl	800af08 <pbuf_add_header>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d004      	beq.n	800f7c2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f7b8:	6938      	ldr	r0, [r7, #16]
 800f7ba:	f7fd f804 	bl	800c7c6 <tcp_seg_free>
    return NULL;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	e037      	b.n	800f832 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	685a      	ldr	r2, [r3, #4]
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	8ada      	ldrh	r2, [r3, #22]
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	68dc      	ldr	r4, [r3, #12]
 800f7d4:	4610      	mov	r0, r2
 800f7d6:	f7fa f8e5 	bl	80099a4 <lwip_htons>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	8b1a      	ldrh	r2, [r3, #24]
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	68dc      	ldr	r4, [r3, #12]
 800f7e6:	4610      	mov	r0, r2
 800f7e8:	f7fa f8dc 	bl	80099a4 <lwip_htons>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	68dc      	ldr	r4, [r3, #12]
 800f7f4:	6838      	ldr	r0, [r7, #0]
 800f7f6:	f7fa f8ea 	bl	80099ce <lwip_htonl>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f7fe:	7dfb      	ldrb	r3, [r7, #23]
 800f800:	089b      	lsrs	r3, r3, #2
 800f802:	b2db      	uxtb	r3, r3
 800f804:	b29b      	uxth	r3, r3
 800f806:	3305      	adds	r3, #5
 800f808:	b29b      	uxth	r3, r3
 800f80a:	031b      	lsls	r3, r3, #12
 800f80c:	b29a      	uxth	r2, r3
 800f80e:	79fb      	ldrb	r3, [r7, #7]
 800f810:	b29b      	uxth	r3, r3
 800f812:	4313      	orrs	r3, r2
 800f814:	b29a      	uxth	r2, r3
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	68dc      	ldr	r4, [r3, #12]
 800f81a:	4610      	mov	r0, r2
 800f81c:	f7fa f8c2 	bl	80099a4 <lwip_htons>
 800f820:	4603      	mov	r3, r0
 800f822:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f824:	693b      	ldr	r3, [r7, #16]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	2200      	movs	r2, #0
 800f82a:	749a      	strb	r2, [r3, #18]
 800f82c:	2200      	movs	r2, #0
 800f82e:	74da      	strb	r2, [r3, #19]
  return seg;
 800f830:	693b      	ldr	r3, [r7, #16]
}
 800f832:	4618      	mov	r0, r3
 800f834:	371c      	adds	r7, #28
 800f836:	46bd      	mov	sp, r7
 800f838:	bd90      	pop	{r4, r7, pc}
 800f83a:	bf00      	nop
 800f83c:	08017f14 	.word	0x08017f14
 800f840:	08017f48 	.word	0x08017f48
 800f844:	08017f68 	.word	0x08017f68
 800f848:	08017f90 	.word	0x08017f90
 800f84c:	08017fb4 	.word	0x08017fb4

0800f850 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b086      	sub	sp, #24
 800f854:	af00      	add	r7, sp, #0
 800f856:	607b      	str	r3, [r7, #4]
 800f858:	4603      	mov	r3, r0
 800f85a:	73fb      	strb	r3, [r7, #15]
 800f85c:	460b      	mov	r3, r1
 800f85e:	81bb      	strh	r3, [r7, #12]
 800f860:	4613      	mov	r3, r2
 800f862:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800f864:	89bb      	ldrh	r3, [r7, #12]
 800f866:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d105      	bne.n	800f87a <tcp_pbuf_prealloc+0x2a>
 800f86e:	4b30      	ldr	r3, [pc, #192]	; (800f930 <tcp_pbuf_prealloc+0xe0>)
 800f870:	22e8      	movs	r2, #232	; 0xe8
 800f872:	4930      	ldr	r1, [pc, #192]	; (800f934 <tcp_pbuf_prealloc+0xe4>)
 800f874:	4830      	ldr	r0, [pc, #192]	; (800f938 <tcp_pbuf_prealloc+0xe8>)
 800f876:	f005 fb35 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800f87a:	6a3b      	ldr	r3, [r7, #32]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d105      	bne.n	800f88c <tcp_pbuf_prealloc+0x3c>
 800f880:	4b2b      	ldr	r3, [pc, #172]	; (800f930 <tcp_pbuf_prealloc+0xe0>)
 800f882:	22e9      	movs	r2, #233	; 0xe9
 800f884:	492d      	ldr	r1, [pc, #180]	; (800f93c <tcp_pbuf_prealloc+0xec>)
 800f886:	482c      	ldr	r0, [pc, #176]	; (800f938 <tcp_pbuf_prealloc+0xe8>)
 800f888:	f005 fb2c 	bl	8014ee4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800f88c:	89ba      	ldrh	r2, [r7, #12]
 800f88e:	897b      	ldrh	r3, [r7, #10]
 800f890:	429a      	cmp	r2, r3
 800f892:	d221      	bcs.n	800f8d8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f894:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f898:	f003 0302 	and.w	r3, r3, #2
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d111      	bne.n	800f8c4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800f8a0:	6a3b      	ldr	r3, [r7, #32]
 800f8a2:	8b5b      	ldrh	r3, [r3, #26]
 800f8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d115      	bne.n	800f8d8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800f8ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d007      	beq.n	800f8c4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800f8b4:	6a3b      	ldr	r3, [r7, #32]
 800f8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d103      	bne.n	800f8c4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800f8bc:	6a3b      	ldr	r3, [r7, #32]
 800f8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d009      	beq.n	800f8d8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800f8c4:	89bb      	ldrh	r3, [r7, #12]
 800f8c6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f8ca:	f023 0203 	bic.w	r2, r3, #3
 800f8ce:	897b      	ldrh	r3, [r7, #10]
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	bf28      	it	cs
 800f8d4:	4613      	movcs	r3, r2
 800f8d6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800f8d8:	8af9      	ldrh	r1, [r7, #22]
 800f8da:	7bfb      	ldrb	r3, [r7, #15]
 800f8dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7fb f8c3 	bl	800aa6c <pbuf_alloc>
 800f8e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d101      	bne.n	800f8f2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	e019      	b.n	800f926 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d006      	beq.n	800f908 <tcp_pbuf_prealloc+0xb8>
 800f8fa:	4b0d      	ldr	r3, [pc, #52]	; (800f930 <tcp_pbuf_prealloc+0xe0>)
 800f8fc:	f240 120b 	movw	r2, #267	; 0x10b
 800f900:	490f      	ldr	r1, [pc, #60]	; (800f940 <tcp_pbuf_prealloc+0xf0>)
 800f902:	480d      	ldr	r0, [pc, #52]	; (800f938 <tcp_pbuf_prealloc+0xe8>)
 800f904:	f005 faee 	bl	8014ee4 <iprintf>
  *oversize = p->len - length;
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	895a      	ldrh	r2, [r3, #10]
 800f90c:	89bb      	ldrh	r3, [r7, #12]
 800f90e:	1ad3      	subs	r3, r2, r3
 800f910:	b29a      	uxth	r2, r3
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	89ba      	ldrh	r2, [r7, #12]
 800f91a:	811a      	strh	r2, [r3, #8]
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	891a      	ldrh	r2, [r3, #8]
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	815a      	strh	r2, [r3, #10]
  return p;
 800f924:	693b      	ldr	r3, [r7, #16]
}
 800f926:	4618      	mov	r0, r3
 800f928:	3718      	adds	r7, #24
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	08017f14 	.word	0x08017f14
 800f934:	08017fcc 	.word	0x08017fcc
 800f938:	08017f68 	.word	0x08017f68
 800f93c:	08017ff0 	.word	0x08017ff0
 800f940:	08018010 	.word	0x08018010

0800f944 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	460b      	mov	r3, r1
 800f94e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d106      	bne.n	800f964 <tcp_write_checks+0x20>
 800f956:	4b33      	ldr	r3, [pc, #204]	; (800fa24 <tcp_write_checks+0xe0>)
 800f958:	f240 1233 	movw	r2, #307	; 0x133
 800f95c:	4932      	ldr	r1, [pc, #200]	; (800fa28 <tcp_write_checks+0xe4>)
 800f95e:	4833      	ldr	r0, [pc, #204]	; (800fa2c <tcp_write_checks+0xe8>)
 800f960:	f005 fac0 	bl	8014ee4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	7d1b      	ldrb	r3, [r3, #20]
 800f968:	2b04      	cmp	r3, #4
 800f96a:	d00e      	beq.n	800f98a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800f970:	2b07      	cmp	r3, #7
 800f972:	d00a      	beq.n	800f98a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800f978:	2b02      	cmp	r3, #2
 800f97a:	d006      	beq.n	800f98a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800f980:	2b03      	cmp	r3, #3
 800f982:	d002      	beq.n	800f98a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800f984:	f06f 030a 	mvn.w	r3, #10
 800f988:	e048      	b.n	800fa1c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800f98a:	887b      	ldrh	r3, [r7, #2]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d101      	bne.n	800f994 <tcp_write_checks+0x50>
    return ERR_OK;
 800f990:	2300      	movs	r3, #0
 800f992:	e043      	b.n	800fa1c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f99a:	887a      	ldrh	r2, [r7, #2]
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d909      	bls.n	800f9b4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	8b5b      	ldrh	r3, [r3, #26]
 800f9a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9a8:	b29a      	uxth	r2, r3
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b2:	e033      	b.n	800fa1c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9ba:	2b08      	cmp	r3, #8
 800f9bc:	d909      	bls.n	800f9d2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	8b5b      	ldrh	r3, [r3, #26]
 800f9c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9c6:	b29a      	uxth	r2, r3
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f9d0:	e024      	b.n	800fa1c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00f      	beq.n	800f9fc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d11a      	bne.n	800fa1a <tcp_write_checks+0xd6>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d116      	bne.n	800fa1a <tcp_write_checks+0xd6>
 800f9ec:	4b0d      	ldr	r3, [pc, #52]	; (800fa24 <tcp_write_checks+0xe0>)
 800f9ee:	f240 1255 	movw	r2, #341	; 0x155
 800f9f2:	490f      	ldr	r1, [pc, #60]	; (800fa30 <tcp_write_checks+0xec>)
 800f9f4:	480d      	ldr	r0, [pc, #52]	; (800fa2c <tcp_write_checks+0xe8>)
 800f9f6:	f005 fa75 	bl	8014ee4 <iprintf>
 800f9fa:	e00e      	b.n	800fa1a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d103      	bne.n	800fa0c <tcp_write_checks+0xc8>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d006      	beq.n	800fa1a <tcp_write_checks+0xd6>
 800fa0c:	4b05      	ldr	r3, [pc, #20]	; (800fa24 <tcp_write_checks+0xe0>)
 800fa0e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800fa12:	4908      	ldr	r1, [pc, #32]	; (800fa34 <tcp_write_checks+0xf0>)
 800fa14:	4805      	ldr	r0, [pc, #20]	; (800fa2c <tcp_write_checks+0xe8>)
 800fa16:	f005 fa65 	bl	8014ee4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800fa1a:	2300      	movs	r3, #0
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3708      	adds	r7, #8
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}
 800fa24:	08017f14 	.word	0x08017f14
 800fa28:	08018024 	.word	0x08018024
 800fa2c:	08017f68 	.word	0x08017f68
 800fa30:	08018044 	.word	0x08018044
 800fa34:	08018080 	.word	0x08018080

0800fa38 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800fa38:	b590      	push	{r4, r7, lr}
 800fa3a:	b09b      	sub	sp, #108	; 0x6c
 800fa3c:	af04      	add	r7, sp, #16
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	4611      	mov	r1, r2
 800fa44:	461a      	mov	r2, r3
 800fa46:	460b      	mov	r3, r1
 800fa48:	80fb      	strh	r3, [r7, #6]
 800fa4a:	4613      	mov	r3, r2
 800fa4c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800fa52:	2300      	movs	r3, #0
 800fa54:	653b      	str	r3, [r7, #80]	; 0x50
 800fa56:	2300      	movs	r3, #0
 800fa58:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa5e:	2300      	movs	r3, #0
 800fa60:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800fa62:	2300      	movs	r3, #0
 800fa64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800fa72:	2300      	movs	r3, #0
 800fa74:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800fa76:	2300      	movs	r3, #0
 800fa78:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d109      	bne.n	800fa94 <tcp_write+0x5c>
 800fa80:	4ba4      	ldr	r3, [pc, #656]	; (800fd14 <tcp_write+0x2dc>)
 800fa82:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800fa86:	49a4      	ldr	r1, [pc, #656]	; (800fd18 <tcp_write+0x2e0>)
 800fa88:	48a4      	ldr	r0, [pc, #656]	; (800fd1c <tcp_write+0x2e4>)
 800fa8a:	f005 fa2b 	bl	8014ee4 <iprintf>
 800fa8e:	f06f 030f 	mvn.w	r3, #15
 800fa92:	e32a      	b.n	80100ea <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa9a:	085b      	lsrs	r3, r3, #1
 800fa9c:	b29a      	uxth	r2, r3
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800faa2:	4293      	cmp	r3, r2
 800faa4:	bf28      	it	cs
 800faa6:	4613      	movcs	r3, r2
 800faa8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800faaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800faac:	2b00      	cmp	r3, #0
 800faae:	d102      	bne.n	800fab6 <tcp_write+0x7e>
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fab4:	e000      	b.n	800fab8 <tcp_write+0x80>
 800fab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fab8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d109      	bne.n	800fad4 <tcp_write+0x9c>
 800fac0:	4b94      	ldr	r3, [pc, #592]	; (800fd14 <tcp_write+0x2dc>)
 800fac2:	f240 12ad 	movw	r2, #429	; 0x1ad
 800fac6:	4996      	ldr	r1, [pc, #600]	; (800fd20 <tcp_write+0x2e8>)
 800fac8:	4894      	ldr	r0, [pc, #592]	; (800fd1c <tcp_write+0x2e4>)
 800faca:	f005 fa0b 	bl	8014ee4 <iprintf>
 800face:	f06f 030f 	mvn.w	r3, #15
 800fad2:	e30a      	b.n	80100ea <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800fad4:	88fb      	ldrh	r3, [r7, #6]
 800fad6:	4619      	mov	r1, r3
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f7ff ff33 	bl	800f944 <tcp_write_checks>
 800fade:	4603      	mov	r3, r0
 800fae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800fae4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d002      	beq.n	800faf2 <tcp_write+0xba>
    return err;
 800faec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800faf0:	e2fb      	b.n	80100ea <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800faf8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fafc:	2300      	movs	r3, #0
 800fafe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	f000 80f6 	beq.w	800fcf8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb10:	653b      	str	r3, [r7, #80]	; 0x50
 800fb12:	e002      	b.n	800fb1a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800fb14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fb1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d1f8      	bne.n	800fb14 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800fb22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb24:	7a9b      	ldrb	r3, [r3, #10]
 800fb26:	009b      	lsls	r3, r3, #2
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	f003 0304 	and.w	r3, r3, #4
 800fb2e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800fb30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fb32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb34:	891b      	ldrh	r3, [r3, #8]
 800fb36:	4619      	mov	r1, r3
 800fb38:	8c3b      	ldrh	r3, [r7, #32]
 800fb3a:	440b      	add	r3, r1
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	da06      	bge.n	800fb4e <tcp_write+0x116>
 800fb40:	4b74      	ldr	r3, [pc, #464]	; (800fd14 <tcp_write+0x2dc>)
 800fb42:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fb46:	4977      	ldr	r1, [pc, #476]	; (800fd24 <tcp_write+0x2ec>)
 800fb48:	4874      	ldr	r0, [pc, #464]	; (800fd1c <tcp_write+0x2e4>)
 800fb4a:	f005 f9cb 	bl	8014ee4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800fb4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb50:	891a      	ldrh	r2, [r3, #8]
 800fb52:	8c3b      	ldrh	r3, [r7, #32]
 800fb54:	4413      	add	r3, r2
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fb5a:	1ad3      	subs	r3, r2, r3
 800fb5c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fb64:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800fb66:	8a7b      	ldrh	r3, [r7, #18]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d026      	beq.n	800fbba <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800fb6c:	8a7b      	ldrh	r3, [r7, #18]
 800fb6e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d206      	bcs.n	800fb82 <tcp_write+0x14a>
 800fb74:	4b67      	ldr	r3, [pc, #412]	; (800fd14 <tcp_write+0x2dc>)
 800fb76:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800fb7a:	496b      	ldr	r1, [pc, #428]	; (800fd28 <tcp_write+0x2f0>)
 800fb7c:	4867      	ldr	r0, [pc, #412]	; (800fd1c <tcp_write+0x2e4>)
 800fb7e:	f005 f9b1 	bl	8014ee4 <iprintf>
      seg = last_unsent;
 800fb82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb84:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800fb86:	8a7b      	ldrh	r3, [r7, #18]
 800fb88:	88fa      	ldrh	r2, [r7, #6]
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	bf28      	it	cs
 800fb8e:	4613      	movcs	r3, r2
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fb94:	4293      	cmp	r3, r2
 800fb96:	bf28      	it	cs
 800fb98:	4613      	movcs	r3, r2
 800fb9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800fb9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fba0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fba2:	4413      	add	r3, r2
 800fba4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800fba8:	8a7a      	ldrh	r2, [r7, #18]
 800fbaa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fbac:	1ad3      	subs	r3, r2, r3
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800fbb2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fbb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fbb6:	1ad3      	subs	r3, r2, r3
 800fbb8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800fbba:	8a7b      	ldrh	r3, [r7, #18]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d00b      	beq.n	800fbd8 <tcp_write+0x1a0>
 800fbc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fbc4:	88fb      	ldrh	r3, [r7, #6]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d006      	beq.n	800fbd8 <tcp_write+0x1a0>
 800fbca:	4b52      	ldr	r3, [pc, #328]	; (800fd14 <tcp_write+0x2dc>)
 800fbcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fbd0:	4956      	ldr	r1, [pc, #344]	; (800fd2c <tcp_write+0x2f4>)
 800fbd2:	4852      	ldr	r0, [pc, #328]	; (800fd1c <tcp_write+0x2e4>)
 800fbd4:	f005 f986 	bl	8014ee4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800fbd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fbdc:	88fb      	ldrh	r3, [r7, #6]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	f080 8167 	bcs.w	800feb2 <tcp_write+0x47a>
 800fbe4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	f000 8163 	beq.w	800feb2 <tcp_write+0x47a>
 800fbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbee:	891b      	ldrh	r3, [r3, #8]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f000 815e 	beq.w	800feb2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800fbf6:	88fa      	ldrh	r2, [r7, #6]
 800fbf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fbfc:	1ad2      	subs	r2, r2, r3
 800fbfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fc00:	4293      	cmp	r3, r2
 800fc02:	bfa8      	it	ge
 800fc04:	4613      	movge	r3, r2
 800fc06:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800fc08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc0a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fc0c:	797b      	ldrb	r3, [r7, #5]
 800fc0e:	f003 0301 	and.w	r3, r3, #1
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d027      	beq.n	800fc66 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800fc16:	f107 0012 	add.w	r0, r7, #18
 800fc1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fc1c:	8bf9      	ldrh	r1, [r7, #30]
 800fc1e:	2301      	movs	r3, #1
 800fc20:	9302      	str	r3, [sp, #8]
 800fc22:	797b      	ldrb	r3, [r7, #5]
 800fc24:	9301      	str	r3, [sp, #4]
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	9300      	str	r3, [sp, #0]
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	f7ff fe0f 	bl	800f850 <tcp_pbuf_prealloc>
 800fc32:	6578      	str	r0, [r7, #84]	; 0x54
 800fc34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	f000 8225 	beq.w	8010086 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800fc3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc3e:	6858      	ldr	r0, [r3, #4]
 800fc40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc44:	68ba      	ldr	r2, [r7, #8]
 800fc46:	4413      	add	r3, r2
 800fc48:	8bfa      	ldrh	r2, [r7, #30]
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	f005 f88a 	bl	8014d64 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800fc50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fc52:	f7fb fa7d 	bl	800b150 <pbuf_clen>
 800fc56:	4603      	mov	r3, r0
 800fc58:	461a      	mov	r2, r3
 800fc5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fc5e:	4413      	add	r3, r2
 800fc60:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800fc64:	e041      	b.n	800fcea <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800fc66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	637b      	str	r3, [r7, #52]	; 0x34
 800fc6c:	e002      	b.n	800fc74 <tcp_write+0x23c>
 800fc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	637b      	str	r3, [r7, #52]	; 0x34
 800fc74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d1f8      	bne.n	800fc6e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800fc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc7e:	7b1b      	ldrb	r3, [r3, #12]
 800fc80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d115      	bne.n	800fcb4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800fc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc8e:	8952      	ldrh	r2, [r2, #10]
 800fc90:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800fc92:	68ba      	ldr	r2, [r7, #8]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d10d      	bne.n	800fcb4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800fc98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d006      	beq.n	800fcae <tcp_write+0x276>
 800fca0:	4b1c      	ldr	r3, [pc, #112]	; (800fd14 <tcp_write+0x2dc>)
 800fca2:	f240 2231 	movw	r2, #561	; 0x231
 800fca6:	4922      	ldr	r1, [pc, #136]	; (800fd30 <tcp_write+0x2f8>)
 800fca8:	481c      	ldr	r0, [pc, #112]	; (800fd1c <tcp_write+0x2e4>)
 800fcaa:	f005 f91b 	bl	8014ee4 <iprintf>
          extendlen = seglen;
 800fcae:	8bfb      	ldrh	r3, [r7, #30]
 800fcb0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800fcb2:	e01a      	b.n	800fcea <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800fcb4:	8bfb      	ldrh	r3, [r7, #30]
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	4619      	mov	r1, r3
 800fcba:	2000      	movs	r0, #0
 800fcbc:	f7fa fed6 	bl	800aa6c <pbuf_alloc>
 800fcc0:	6578      	str	r0, [r7, #84]	; 0x54
 800fcc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f000 81e0 	beq.w	801008a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800fcca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fcce:	68ba      	ldr	r2, [r7, #8]
 800fcd0:	441a      	add	r2, r3
 800fcd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcd4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800fcd6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fcd8:	f7fb fa3a 	bl	800b150 <pbuf_clen>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	461a      	mov	r2, r3
 800fce0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fce4:	4413      	add	r3, r2
 800fce6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800fcea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fcee:	8bfb      	ldrh	r3, [r7, #30]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800fcf6:	e0dc      	b.n	800feb2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	f000 80d7 	beq.w	800feb2 <tcp_write+0x47a>
 800fd04:	4b03      	ldr	r3, [pc, #12]	; (800fd14 <tcp_write+0x2dc>)
 800fd06:	f240 224a 	movw	r2, #586	; 0x24a
 800fd0a:	490a      	ldr	r1, [pc, #40]	; (800fd34 <tcp_write+0x2fc>)
 800fd0c:	4803      	ldr	r0, [pc, #12]	; (800fd1c <tcp_write+0x2e4>)
 800fd0e:	f005 f8e9 	bl	8014ee4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800fd12:	e0ce      	b.n	800feb2 <tcp_write+0x47a>
 800fd14:	08017f14 	.word	0x08017f14
 800fd18:	080180b4 	.word	0x080180b4
 800fd1c:	08017f68 	.word	0x08017f68
 800fd20:	080180cc 	.word	0x080180cc
 800fd24:	08018100 	.word	0x08018100
 800fd28:	08018118 	.word	0x08018118
 800fd2c:	08018138 	.word	0x08018138
 800fd30:	08018158 	.word	0x08018158
 800fd34:	08018184 	.word	0x08018184
    struct pbuf *p;
    u16_t left = len - pos;
 800fd38:	88fa      	ldrh	r2, [r7, #6]
 800fd3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fd3e:	1ad3      	subs	r3, r2, r3
 800fd40:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800fd42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fd46:	b29b      	uxth	r3, r3
 800fd48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800fd4e:	8b7a      	ldrh	r2, [r7, #26]
 800fd50:	8bbb      	ldrh	r3, [r7, #28]
 800fd52:	4293      	cmp	r3, r2
 800fd54:	bf28      	it	cs
 800fd56:	4613      	movcs	r3, r2
 800fd58:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fd5a:	797b      	ldrb	r3, [r7, #5]
 800fd5c:	f003 0301 	and.w	r3, r3, #1
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d036      	beq.n	800fdd2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800fd64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fd68:	b29a      	uxth	r2, r3
 800fd6a:	8b3b      	ldrh	r3, [r7, #24]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	b299      	uxth	r1, r3
 800fd70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	bf0c      	ite	eq
 800fd76:	2301      	moveq	r3, #1
 800fd78:	2300      	movne	r3, #0
 800fd7a:	b2db      	uxtb	r3, r3
 800fd7c:	f107 0012 	add.w	r0, r7, #18
 800fd80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fd82:	9302      	str	r3, [sp, #8]
 800fd84:	797b      	ldrb	r3, [r7, #5]
 800fd86:	9301      	str	r3, [sp, #4]
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	9300      	str	r3, [sp, #0]
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2036      	movs	r0, #54	; 0x36
 800fd90:	f7ff fd5e 	bl	800f850 <tcp_pbuf_prealloc>
 800fd94:	6338      	str	r0, [r7, #48]	; 0x30
 800fd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	f000 8178 	beq.w	801008e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800fd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda0:	895b      	ldrh	r3, [r3, #10]
 800fda2:	8b3a      	ldrh	r2, [r7, #24]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d906      	bls.n	800fdb6 <tcp_write+0x37e>
 800fda8:	4b8c      	ldr	r3, [pc, #560]	; (800ffdc <tcp_write+0x5a4>)
 800fdaa:	f240 2266 	movw	r2, #614	; 0x266
 800fdae:	498c      	ldr	r1, [pc, #560]	; (800ffe0 <tcp_write+0x5a8>)
 800fdb0:	488c      	ldr	r0, [pc, #560]	; (800ffe4 <tcp_write+0x5ac>)
 800fdb2:	f005 f897 	bl	8014ee4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800fdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb8:	685a      	ldr	r2, [r3, #4]
 800fdba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fdbe:	18d0      	adds	r0, r2, r3
 800fdc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fdc4:	68ba      	ldr	r2, [r7, #8]
 800fdc6:	4413      	add	r3, r2
 800fdc8:	8b3a      	ldrh	r2, [r7, #24]
 800fdca:	4619      	mov	r1, r3
 800fdcc:	f004 ffca 	bl	8014d64 <memcpy>
 800fdd0:	e02f      	b.n	800fe32 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800fdd2:	8a7b      	ldrh	r3, [r7, #18]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d006      	beq.n	800fde6 <tcp_write+0x3ae>
 800fdd8:	4b80      	ldr	r3, [pc, #512]	; (800ffdc <tcp_write+0x5a4>)
 800fdda:	f240 2271 	movw	r2, #625	; 0x271
 800fdde:	4982      	ldr	r1, [pc, #520]	; (800ffe8 <tcp_write+0x5b0>)
 800fde0:	4880      	ldr	r0, [pc, #512]	; (800ffe4 <tcp_write+0x5ac>)
 800fde2:	f005 f87f 	bl	8014ee4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800fde6:	8b3b      	ldrh	r3, [r7, #24]
 800fde8:	2201      	movs	r2, #1
 800fdea:	4619      	mov	r1, r3
 800fdec:	2036      	movs	r0, #54	; 0x36
 800fdee:	f7fa fe3d 	bl	800aa6c <pbuf_alloc>
 800fdf2:	6178      	str	r0, [r7, #20]
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	f000 814b 	beq.w	8010092 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800fdfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe00:	68ba      	ldr	r2, [r7, #8]
 800fe02:	441a      	add	r2, r3
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fe08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe12:	4619      	mov	r1, r3
 800fe14:	2036      	movs	r0, #54	; 0x36
 800fe16:	f7fa fe29 	bl	800aa6c <pbuf_alloc>
 800fe1a:	6338      	str	r0, [r7, #48]	; 0x30
 800fe1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d103      	bne.n	800fe2a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800fe22:	6978      	ldr	r0, [r7, #20]
 800fe24:	f7fb f906 	bl	800b034 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800fe28:	e136      	b.n	8010098 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800fe2a:	6979      	ldr	r1, [r7, #20]
 800fe2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe2e:	f7fb f9cf 	bl	800b1d0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800fe32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe34:	f7fb f98c 	bl	800b150 <pbuf_clen>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fe40:	4413      	add	r3, r2
 800fe42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800fe46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fe4a:	2b09      	cmp	r3, #9
 800fe4c:	d903      	bls.n	800fe56 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800fe4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe50:	f7fb f8f0 	bl	800b034 <pbuf_free>
      goto memerr;
 800fe54:	e120      	b.n	8010098 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe5e:	441a      	add	r2, r3
 800fe60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe64:	9300      	str	r3, [sp, #0]
 800fe66:	4613      	mov	r3, r2
 800fe68:	2200      	movs	r2, #0
 800fe6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe6c:	68f8      	ldr	r0, [r7, #12]
 800fe6e:	f7ff fc51 	bl	800f714 <tcp_create_segment>
 800fe72:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fe74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	f000 810d 	beq.w	8010096 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800fe7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d102      	bne.n	800fe88 <tcp_write+0x450>
      queue = seg;
 800fe82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe84:	647b      	str	r3, [r7, #68]	; 0x44
 800fe86:	e00c      	b.n	800fea2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800fe88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d106      	bne.n	800fe9c <tcp_write+0x464>
 800fe8e:	4b53      	ldr	r3, [pc, #332]	; (800ffdc <tcp_write+0x5a4>)
 800fe90:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fe94:	4955      	ldr	r1, [pc, #340]	; (800ffec <tcp_write+0x5b4>)
 800fe96:	4853      	ldr	r0, [pc, #332]	; (800ffe4 <tcp_write+0x5ac>)
 800fe98:	f005 f824 	bl	8014ee4 <iprintf>
      prev_seg->next = seg;
 800fe9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fea0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800fea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fea4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800fea6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800feaa:	8b3b      	ldrh	r3, [r7, #24]
 800feac:	4413      	add	r3, r2
 800feae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800feb2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800feb6:	88fb      	ldrh	r3, [r7, #6]
 800feb8:	429a      	cmp	r2, r3
 800feba:	f4ff af3d 	bcc.w	800fd38 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800febe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d02c      	beq.n	800ff1e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800fec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800feca:	e01e      	b.n	800ff0a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800fecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fece:	891a      	ldrh	r2, [r3, #8]
 800fed0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fed2:	4413      	add	r3, r2
 800fed4:	b29a      	uxth	r2, r3
 800fed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800feda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d110      	bne.n	800ff04 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800fee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee4:	685b      	ldr	r3, [r3, #4]
 800fee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fee8:	8952      	ldrh	r2, [r2, #10]
 800feea:	4413      	add	r3, r2
 800feec:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800feee:	68b9      	ldr	r1, [r7, #8]
 800fef0:	4618      	mov	r0, r3
 800fef2:	f004 ff37 	bl	8014d64 <memcpy>
        p->len += oversize_used;
 800fef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef8:	895a      	ldrh	r2, [r3, #10]
 800fefa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fefc:	4413      	add	r3, r2
 800fefe:	b29a      	uxth	r2, r3
 800ff00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff02:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800ff04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d1dd      	bne.n	800fecc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800ff10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff12:	891a      	ldrh	r2, [r3, #8]
 800ff14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ff16:	4413      	add	r3, r2
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff1c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ff1e:	8a7a      	ldrh	r2, [r7, #18]
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ff26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d018      	beq.n	800ff5e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ff2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d106      	bne.n	800ff40 <tcp_write+0x508>
 800ff32:	4b2a      	ldr	r3, [pc, #168]	; (800ffdc <tcp_write+0x5a4>)
 800ff34:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800ff38:	492d      	ldr	r1, [pc, #180]	; (800fff0 <tcp_write+0x5b8>)
 800ff3a:	482a      	ldr	r0, [pc, #168]	; (800ffe4 <tcp_write+0x5ac>)
 800ff3c:	f004 ffd2 	bl	8014ee4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ff40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fb f942 	bl	800b1d0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ff4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff4e:	891a      	ldrh	r2, [r3, #8]
 800ff50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff52:	891b      	ldrh	r3, [r3, #8]
 800ff54:	4413      	add	r3, r2
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff5a:	811a      	strh	r2, [r3, #8]
 800ff5c:	e037      	b.n	800ffce <tcp_write+0x596>
  } else if (extendlen > 0) {
 800ff5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d034      	beq.n	800ffce <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ff64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d003      	beq.n	800ff72 <tcp_write+0x53a>
 800ff6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d106      	bne.n	800ff80 <tcp_write+0x548>
 800ff72:	4b1a      	ldr	r3, [pc, #104]	; (800ffdc <tcp_write+0x5a4>)
 800ff74:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ff78:	491e      	ldr	r1, [pc, #120]	; (800fff4 <tcp_write+0x5bc>)
 800ff7a:	481a      	ldr	r0, [pc, #104]	; (800ffe4 <tcp_write+0x5ac>)
 800ff7c:	f004 ffb2 	bl	8014ee4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ff80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff86:	e009      	b.n	800ff9c <tcp_write+0x564>
      p->tot_len += extendlen;
 800ff88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff8a:	891a      	ldrh	r2, [r3, #8]
 800ff8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ff8e:	4413      	add	r3, r2
 800ff90:	b29a      	uxth	r2, r3
 800ff92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff94:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ff96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d1f1      	bne.n	800ff88 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800ffa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa6:	891a      	ldrh	r2, [r3, #8]
 800ffa8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ffaa:	4413      	add	r3, r2
 800ffac:	b29a      	uxth	r2, r3
 800ffae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800ffb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb4:	895a      	ldrh	r2, [r3, #10]
 800ffb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ffb8:	4413      	add	r3, r2
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffbe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ffc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffc2:	891a      	ldrh	r2, [r3, #8]
 800ffc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ffc6:	4413      	add	r3, r2
 800ffc8:	b29a      	uxth	r2, r3
 800ffca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffcc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800ffce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d111      	bne.n	800fff8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffd8:	66da      	str	r2, [r3, #108]	; 0x6c
 800ffda:	e010      	b.n	800fffe <tcp_write+0x5c6>
 800ffdc:	08017f14 	.word	0x08017f14
 800ffe0:	080181b4 	.word	0x080181b4
 800ffe4:	08017f68 	.word	0x08017f68
 800ffe8:	080181f4 	.word	0x080181f4
 800ffec:	08018204 	.word	0x08018204
 800fff0:	08018218 	.word	0x08018218
 800fff4:	08018250 	.word	0x08018250
  } else {
    last_unsent->next = queue;
 800fff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fffc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010002:	88fb      	ldrh	r3, [r7, #6]
 8010004:	441a      	add	r2, r3
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010010:	88fb      	ldrh	r3, [r7, #6]
 8010012:	1ad3      	subs	r3, r2, r3
 8010014:	b29a      	uxth	r2, r3
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010022:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801002c:	2b00      	cmp	r3, #0
 801002e:	d00e      	beq.n	801004e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010034:	2b00      	cmp	r3, #0
 8010036:	d10a      	bne.n	801004e <tcp_write+0x616>
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801003c:	2b00      	cmp	r3, #0
 801003e:	d106      	bne.n	801004e <tcp_write+0x616>
 8010040:	4b2c      	ldr	r3, [pc, #176]	; (80100f4 <tcp_write+0x6bc>)
 8010042:	f240 3212 	movw	r2, #786	; 0x312
 8010046:	492c      	ldr	r1, [pc, #176]	; (80100f8 <tcp_write+0x6c0>)
 8010048:	482c      	ldr	r0, [pc, #176]	; (80100fc <tcp_write+0x6c4>)
 801004a:	f004 ff4b 	bl	8014ee4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801004e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010050:	2b00      	cmp	r3, #0
 8010052:	d016      	beq.n	8010082 <tcp_write+0x64a>
 8010054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d012      	beq.n	8010082 <tcp_write+0x64a>
 801005c:	797b      	ldrb	r3, [r7, #5]
 801005e:	f003 0302 	and.w	r3, r3, #2
 8010062:	2b00      	cmp	r3, #0
 8010064:	d10d      	bne.n	8010082 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010068:	68db      	ldr	r3, [r3, #12]
 801006a:	899b      	ldrh	r3, [r3, #12]
 801006c:	b29c      	uxth	r4, r3
 801006e:	2008      	movs	r0, #8
 8010070:	f7f9 fc98 	bl	80099a4 <lwip_htons>
 8010074:	4603      	mov	r3, r0
 8010076:	461a      	mov	r2, r3
 8010078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	4322      	orrs	r2, r4
 801007e:	b292      	uxth	r2, r2
 8010080:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010082:	2300      	movs	r3, #0
 8010084:	e031      	b.n	80100ea <tcp_write+0x6b2>
          goto memerr;
 8010086:	bf00      	nop
 8010088:	e006      	b.n	8010098 <tcp_write+0x660>
            goto memerr;
 801008a:	bf00      	nop
 801008c:	e004      	b.n	8010098 <tcp_write+0x660>
        goto memerr;
 801008e:	bf00      	nop
 8010090:	e002      	b.n	8010098 <tcp_write+0x660>
        goto memerr;
 8010092:	bf00      	nop
 8010094:	e000      	b.n	8010098 <tcp_write+0x660>
      goto memerr;
 8010096:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	8b5b      	ldrh	r3, [r3, #26]
 801009c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100a0:	b29a      	uxth	r2, r3
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80100a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d002      	beq.n	80100b2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80100ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80100ae:	f7fa ffc1 	bl	800b034 <pbuf_free>
  }
  if (queue != NULL) {
 80100b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d002      	beq.n	80100be <tcp_write+0x686>
    tcp_segs_free(queue);
 80100b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80100ba:	f7fc fb6f 	bl	800c79c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d00e      	beq.n	80100e6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d10a      	bne.n	80100e6 <tcp_write+0x6ae>
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d106      	bne.n	80100e6 <tcp_write+0x6ae>
 80100d8:	4b06      	ldr	r3, [pc, #24]	; (80100f4 <tcp_write+0x6bc>)
 80100da:	f240 3227 	movw	r2, #807	; 0x327
 80100de:	4906      	ldr	r1, [pc, #24]	; (80100f8 <tcp_write+0x6c0>)
 80100e0:	4806      	ldr	r0, [pc, #24]	; (80100fc <tcp_write+0x6c4>)
 80100e2:	f004 feff 	bl	8014ee4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80100e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	375c      	adds	r7, #92	; 0x5c
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd90      	pop	{r4, r7, pc}
 80100f2:	bf00      	nop
 80100f4:	08017f14 	.word	0x08017f14
 80100f8:	08018288 	.word	0x08018288
 80100fc:	08017f68 	.word	0x08017f68

08010100 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010100:	b590      	push	{r4, r7, lr}
 8010102:	b08b      	sub	sp, #44	; 0x2c
 8010104:	af02      	add	r7, sp, #8
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	460b      	mov	r3, r1
 801010a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801010c:	2300      	movs	r3, #0
 801010e:	61fb      	str	r3, [r7, #28]
 8010110:	2300      	movs	r3, #0
 8010112:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010114:	2300      	movs	r3, #0
 8010116:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d106      	bne.n	801012c <tcp_split_unsent_seg+0x2c>
 801011e:	4b95      	ldr	r3, [pc, #596]	; (8010374 <tcp_split_unsent_seg+0x274>)
 8010120:	f240 324b 	movw	r2, #843	; 0x34b
 8010124:	4994      	ldr	r1, [pc, #592]	; (8010378 <tcp_split_unsent_seg+0x278>)
 8010126:	4895      	ldr	r0, [pc, #596]	; (801037c <tcp_split_unsent_seg+0x27c>)
 8010128:	f004 fedc 	bl	8014ee4 <iprintf>

  useg = pcb->unsent;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010130:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d102      	bne.n	801013e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010138:	f04f 33ff 	mov.w	r3, #4294967295
 801013c:	e116      	b.n	801036c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801013e:	887b      	ldrh	r3, [r7, #2]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d109      	bne.n	8010158 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010144:	4b8b      	ldr	r3, [pc, #556]	; (8010374 <tcp_split_unsent_seg+0x274>)
 8010146:	f240 3253 	movw	r2, #851	; 0x353
 801014a:	498d      	ldr	r1, [pc, #564]	; (8010380 <tcp_split_unsent_seg+0x280>)
 801014c:	488b      	ldr	r0, [pc, #556]	; (801037c <tcp_split_unsent_seg+0x27c>)
 801014e:	f004 fec9 	bl	8014ee4 <iprintf>
    return ERR_VAL;
 8010152:	f06f 0305 	mvn.w	r3, #5
 8010156:	e109      	b.n	801036c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	891b      	ldrh	r3, [r3, #8]
 801015c:	887a      	ldrh	r2, [r7, #2]
 801015e:	429a      	cmp	r2, r3
 8010160:	d301      	bcc.n	8010166 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010162:	2300      	movs	r3, #0
 8010164:	e102      	b.n	801036c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801016a:	887a      	ldrh	r2, [r7, #2]
 801016c:	429a      	cmp	r2, r3
 801016e:	d906      	bls.n	801017e <tcp_split_unsent_seg+0x7e>
 8010170:	4b80      	ldr	r3, [pc, #512]	; (8010374 <tcp_split_unsent_seg+0x274>)
 8010172:	f240 325b 	movw	r2, #859	; 0x35b
 8010176:	4983      	ldr	r1, [pc, #524]	; (8010384 <tcp_split_unsent_seg+0x284>)
 8010178:	4880      	ldr	r0, [pc, #512]	; (801037c <tcp_split_unsent_seg+0x27c>)
 801017a:	f004 feb3 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	891b      	ldrh	r3, [r3, #8]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d106      	bne.n	8010194 <tcp_split_unsent_seg+0x94>
 8010186:	4b7b      	ldr	r3, [pc, #492]	; (8010374 <tcp_split_unsent_seg+0x274>)
 8010188:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801018c:	497e      	ldr	r1, [pc, #504]	; (8010388 <tcp_split_unsent_seg+0x288>)
 801018e:	487b      	ldr	r0, [pc, #492]	; (801037c <tcp_split_unsent_seg+0x27c>)
 8010190:	f004 fea8 	bl	8014ee4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	7a9b      	ldrb	r3, [r3, #10]
 8010198:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801019a:	7bfb      	ldrb	r3, [r7, #15]
 801019c:	009b      	lsls	r3, r3, #2
 801019e:	b2db      	uxtb	r3, r3
 80101a0:	f003 0304 	and.w	r3, r3, #4
 80101a4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	891a      	ldrh	r2, [r3, #8]
 80101aa:	887b      	ldrh	r3, [r7, #2]
 80101ac:	1ad3      	subs	r3, r2, r3
 80101ae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80101b0:	7bbb      	ldrb	r3, [r7, #14]
 80101b2:	b29a      	uxth	r2, r3
 80101b4:	89bb      	ldrh	r3, [r7, #12]
 80101b6:	4413      	add	r3, r2
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80101be:	4619      	mov	r1, r3
 80101c0:	2036      	movs	r0, #54	; 0x36
 80101c2:	f7fa fc53 	bl	800aa6c <pbuf_alloc>
 80101c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	f000 80b7 	beq.w	801033e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	891a      	ldrh	r2, [r3, #8]
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	891b      	ldrh	r3, [r3, #8]
 80101da:	1ad3      	subs	r3, r2, r3
 80101dc:	b29a      	uxth	r2, r3
 80101de:	887b      	ldrh	r3, [r7, #2]
 80101e0:	4413      	add	r3, r2
 80101e2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	6858      	ldr	r0, [r3, #4]
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	685a      	ldr	r2, [r3, #4]
 80101ec:	7bbb      	ldrb	r3, [r7, #14]
 80101ee:	18d1      	adds	r1, r2, r3
 80101f0:	897b      	ldrh	r3, [r7, #10]
 80101f2:	89ba      	ldrh	r2, [r7, #12]
 80101f4:	f7fb f924 	bl	800b440 <pbuf_copy_partial>
 80101f8:	4603      	mov	r3, r0
 80101fa:	461a      	mov	r2, r3
 80101fc:	89bb      	ldrh	r3, [r7, #12]
 80101fe:	4293      	cmp	r3, r2
 8010200:	f040 809f 	bne.w	8010342 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	899b      	ldrh	r3, [r3, #12]
 801020a:	b29b      	uxth	r3, r3
 801020c:	4618      	mov	r0, r3
 801020e:	f7f9 fbc9 	bl	80099a4 <lwip_htons>
 8010212:	4603      	mov	r3, r0
 8010214:	b2db      	uxtb	r3, r3
 8010216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801021a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801021c:	2300      	movs	r3, #0
 801021e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010220:	7efb      	ldrb	r3, [r7, #27]
 8010222:	f003 0308 	and.w	r3, r3, #8
 8010226:	2b00      	cmp	r3, #0
 8010228:	d007      	beq.n	801023a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801022a:	7efb      	ldrb	r3, [r7, #27]
 801022c:	f023 0308 	bic.w	r3, r3, #8
 8010230:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010232:	7ebb      	ldrb	r3, [r7, #26]
 8010234:	f043 0308 	orr.w	r3, r3, #8
 8010238:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801023a:	7efb      	ldrb	r3, [r7, #27]
 801023c:	f003 0301 	and.w	r3, r3, #1
 8010240:	2b00      	cmp	r3, #0
 8010242:	d007      	beq.n	8010254 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010244:	7efb      	ldrb	r3, [r7, #27]
 8010246:	f023 0301 	bic.w	r3, r3, #1
 801024a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801024c:	7ebb      	ldrb	r3, [r7, #26]
 801024e:	f043 0301 	orr.w	r3, r3, #1
 8010252:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	4618      	mov	r0, r3
 801025c:	f7f9 fbb7 	bl	80099ce <lwip_htonl>
 8010260:	4602      	mov	r2, r0
 8010262:	887b      	ldrh	r3, [r7, #2]
 8010264:	18d1      	adds	r1, r2, r3
 8010266:	7eba      	ldrb	r2, [r7, #26]
 8010268:	7bfb      	ldrb	r3, [r7, #15]
 801026a:	9300      	str	r3, [sp, #0]
 801026c:	460b      	mov	r3, r1
 801026e:	6939      	ldr	r1, [r7, #16]
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f7ff fa4f 	bl	800f714 <tcp_create_segment>
 8010276:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d063      	beq.n	8010346 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	4618      	mov	r0, r3
 8010284:	f7fa ff64 	bl	800b150 <pbuf_clen>
 8010288:	4603      	mov	r3, r0
 801028a:	461a      	mov	r2, r3
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010292:	1a9b      	subs	r3, r3, r2
 8010294:	b29a      	uxth	r2, r3
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	6858      	ldr	r0, [r3, #4]
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	685b      	ldr	r3, [r3, #4]
 80102a4:	891a      	ldrh	r2, [r3, #8]
 80102a6:	89bb      	ldrh	r3, [r7, #12]
 80102a8:	1ad3      	subs	r3, r2, r3
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	4619      	mov	r1, r3
 80102ae:	f7fa fd3b 	bl	800ad28 <pbuf_realloc>
  useg->len -= remainder;
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	891a      	ldrh	r2, [r3, #8]
 80102b6:	89bb      	ldrh	r3, [r7, #12]
 80102b8:	1ad3      	subs	r3, r2, r3
 80102ba:	b29a      	uxth	r2, r3
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	899b      	ldrh	r3, [r3, #12]
 80102c6:	b29c      	uxth	r4, r3
 80102c8:	7efb      	ldrb	r3, [r7, #27]
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	4618      	mov	r0, r3
 80102ce:	f7f9 fb69 	bl	80099a4 <lwip_htons>
 80102d2:	4603      	mov	r3, r0
 80102d4:	461a      	mov	r2, r3
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	4322      	orrs	r2, r4
 80102dc:	b292      	uxth	r2, r2
 80102de:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7fa ff33 	bl	800b150 <pbuf_clen>
 80102ea:	4603      	mov	r3, r0
 80102ec:	461a      	mov	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102f4:	4413      	add	r3, r2
 80102f6:	b29a      	uxth	r2, r3
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80102fe:	69fb      	ldr	r3, [r7, #28]
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	4618      	mov	r0, r3
 8010304:	f7fa ff24 	bl	800b150 <pbuf_clen>
 8010308:	4603      	mov	r3, r0
 801030a:	461a      	mov	r2, r3
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010312:	4413      	add	r3, r2
 8010314:	b29a      	uxth	r2, r3
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	681a      	ldr	r2, [r3, #0]
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	69fa      	ldr	r2, [r7, #28]
 8010328:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d103      	bne.n	801033a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2200      	movs	r2, #0
 8010336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801033a:	2300      	movs	r3, #0
 801033c:	e016      	b.n	801036c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801033e:	bf00      	nop
 8010340:	e002      	b.n	8010348 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010342:	bf00      	nop
 8010344:	e000      	b.n	8010348 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010346:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d006      	beq.n	801035c <tcp_split_unsent_seg+0x25c>
 801034e:	4b09      	ldr	r3, [pc, #36]	; (8010374 <tcp_split_unsent_seg+0x274>)
 8010350:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010354:	490d      	ldr	r1, [pc, #52]	; (801038c <tcp_split_unsent_seg+0x28c>)
 8010356:	4809      	ldr	r0, [pc, #36]	; (801037c <tcp_split_unsent_seg+0x27c>)
 8010358:	f004 fdc4 	bl	8014ee4 <iprintf>
  if (p != NULL) {
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d002      	beq.n	8010368 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010362:	6938      	ldr	r0, [r7, #16]
 8010364:	f7fa fe66 	bl	800b034 <pbuf_free>
  }

  return ERR_MEM;
 8010368:	f04f 33ff 	mov.w	r3, #4294967295
}
 801036c:	4618      	mov	r0, r3
 801036e:	3724      	adds	r7, #36	; 0x24
 8010370:	46bd      	mov	sp, r7
 8010372:	bd90      	pop	{r4, r7, pc}
 8010374:	08017f14 	.word	0x08017f14
 8010378:	080182a8 	.word	0x080182a8
 801037c:	08017f68 	.word	0x08017f68
 8010380:	080182cc 	.word	0x080182cc
 8010384:	080182f0 	.word	0x080182f0
 8010388:	08018300 	.word	0x08018300
 801038c:	08018310 	.word	0x08018310

08010390 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010390:	b590      	push	{r4, r7, lr}
 8010392:	b085      	sub	sp, #20
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d106      	bne.n	80103ac <tcp_send_fin+0x1c>
 801039e:	4b21      	ldr	r3, [pc, #132]	; (8010424 <tcp_send_fin+0x94>)
 80103a0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80103a4:	4920      	ldr	r1, [pc, #128]	; (8010428 <tcp_send_fin+0x98>)
 80103a6:	4821      	ldr	r0, [pc, #132]	; (801042c <tcp_send_fin+0x9c>)
 80103a8:	f004 fd9c 	bl	8014ee4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d02e      	beq.n	8010412 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103b8:	60fb      	str	r3, [r7, #12]
 80103ba:	e002      	b.n	80103c2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d1f8      	bne.n	80103bc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	68db      	ldr	r3, [r3, #12]
 80103ce:	899b      	ldrh	r3, [r3, #12]
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7f9 fae6 	bl	80099a4 <lwip_htons>
 80103d8:	4603      	mov	r3, r0
 80103da:	b2db      	uxtb	r3, r3
 80103dc:	f003 0307 	and.w	r3, r3, #7
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d116      	bne.n	8010412 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	899b      	ldrh	r3, [r3, #12]
 80103ea:	b29c      	uxth	r4, r3
 80103ec:	2001      	movs	r0, #1
 80103ee:	f7f9 fad9 	bl	80099a4 <lwip_htons>
 80103f2:	4603      	mov	r3, r0
 80103f4:	461a      	mov	r2, r3
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	68db      	ldr	r3, [r3, #12]
 80103fa:	4322      	orrs	r2, r4
 80103fc:	b292      	uxth	r2, r2
 80103fe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	8b5b      	ldrh	r3, [r3, #26]
 8010404:	f043 0320 	orr.w	r3, r3, #32
 8010408:	b29a      	uxth	r2, r3
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801040e:	2300      	movs	r3, #0
 8010410:	e004      	b.n	801041c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010412:	2101      	movs	r1, #1
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f000 f80b 	bl	8010430 <tcp_enqueue_flags>
 801041a:	4603      	mov	r3, r0
}
 801041c:	4618      	mov	r0, r3
 801041e:	3714      	adds	r7, #20
 8010420:	46bd      	mov	sp, r7
 8010422:	bd90      	pop	{r4, r7, pc}
 8010424:	08017f14 	.word	0x08017f14
 8010428:	0801831c 	.word	0x0801831c
 801042c:	08017f68 	.word	0x08017f68

08010430 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b08a      	sub	sp, #40	; 0x28
 8010434:	af02      	add	r7, sp, #8
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	460b      	mov	r3, r1
 801043a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801043c:	2300      	movs	r3, #0
 801043e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010440:	2300      	movs	r3, #0
 8010442:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010444:	78fb      	ldrb	r3, [r7, #3]
 8010446:	f003 0303 	and.w	r3, r3, #3
 801044a:	2b00      	cmp	r3, #0
 801044c:	d106      	bne.n	801045c <tcp_enqueue_flags+0x2c>
 801044e:	4b67      	ldr	r3, [pc, #412]	; (80105ec <tcp_enqueue_flags+0x1bc>)
 8010450:	f240 4211 	movw	r2, #1041	; 0x411
 8010454:	4966      	ldr	r1, [pc, #408]	; (80105f0 <tcp_enqueue_flags+0x1c0>)
 8010456:	4867      	ldr	r0, [pc, #412]	; (80105f4 <tcp_enqueue_flags+0x1c4>)
 8010458:	f004 fd44 	bl	8014ee4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d106      	bne.n	8010470 <tcp_enqueue_flags+0x40>
 8010462:	4b62      	ldr	r3, [pc, #392]	; (80105ec <tcp_enqueue_flags+0x1bc>)
 8010464:	f240 4213 	movw	r2, #1043	; 0x413
 8010468:	4963      	ldr	r1, [pc, #396]	; (80105f8 <tcp_enqueue_flags+0x1c8>)
 801046a:	4862      	ldr	r0, [pc, #392]	; (80105f4 <tcp_enqueue_flags+0x1c4>)
 801046c:	f004 fd3a 	bl	8014ee4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010470:	78fb      	ldrb	r3, [r7, #3]
 8010472:	f003 0302 	and.w	r3, r3, #2
 8010476:	2b00      	cmp	r3, #0
 8010478:	d001      	beq.n	801047e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801047a:	2301      	movs	r3, #1
 801047c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801047e:	7ffb      	ldrb	r3, [r7, #31]
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	b2db      	uxtb	r3, r3
 8010484:	f003 0304 	and.w	r3, r3, #4
 8010488:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801048a:	7dfb      	ldrb	r3, [r7, #23]
 801048c:	b29b      	uxth	r3, r3
 801048e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010492:	4619      	mov	r1, r3
 8010494:	2036      	movs	r0, #54	; 0x36
 8010496:	f7fa fae9 	bl	800aa6c <pbuf_alloc>
 801049a:	6138      	str	r0, [r7, #16]
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d109      	bne.n	80104b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	8b5b      	ldrh	r3, [r3, #26]
 80104a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104aa:	b29a      	uxth	r2, r3
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80104b0:	f04f 33ff 	mov.w	r3, #4294967295
 80104b4:	e095      	b.n	80105e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	895a      	ldrh	r2, [r3, #10]
 80104ba:	7dfb      	ldrb	r3, [r7, #23]
 80104bc:	b29b      	uxth	r3, r3
 80104be:	429a      	cmp	r2, r3
 80104c0:	d206      	bcs.n	80104d0 <tcp_enqueue_flags+0xa0>
 80104c2:	4b4a      	ldr	r3, [pc, #296]	; (80105ec <tcp_enqueue_flags+0x1bc>)
 80104c4:	f240 4239 	movw	r2, #1081	; 0x439
 80104c8:	494c      	ldr	r1, [pc, #304]	; (80105fc <tcp_enqueue_flags+0x1cc>)
 80104ca:	484a      	ldr	r0, [pc, #296]	; (80105f4 <tcp_enqueue_flags+0x1c4>)
 80104cc:	f004 fd0a 	bl	8014ee4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80104d4:	78fa      	ldrb	r2, [r7, #3]
 80104d6:	7ffb      	ldrb	r3, [r7, #31]
 80104d8:	9300      	str	r3, [sp, #0]
 80104da:	460b      	mov	r3, r1
 80104dc:	6939      	ldr	r1, [r7, #16]
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f7ff f918 	bl	800f714 <tcp_create_segment>
 80104e4:	60f8      	str	r0, [r7, #12]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d109      	bne.n	8010500 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	8b5b      	ldrh	r3, [r3, #26]
 80104f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104f4:	b29a      	uxth	r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80104fa:	f04f 33ff 	mov.w	r3, #4294967295
 80104fe:	e070      	b.n	80105e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	f003 0303 	and.w	r3, r3, #3
 8010508:	2b00      	cmp	r3, #0
 801050a:	d006      	beq.n	801051a <tcp_enqueue_flags+0xea>
 801050c:	4b37      	ldr	r3, [pc, #220]	; (80105ec <tcp_enqueue_flags+0x1bc>)
 801050e:	f240 4242 	movw	r2, #1090	; 0x442
 8010512:	493b      	ldr	r1, [pc, #236]	; (8010600 <tcp_enqueue_flags+0x1d0>)
 8010514:	4837      	ldr	r0, [pc, #220]	; (80105f4 <tcp_enqueue_flags+0x1c4>)
 8010516:	f004 fce5 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	891b      	ldrh	r3, [r3, #8]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d006      	beq.n	8010530 <tcp_enqueue_flags+0x100>
 8010522:	4b32      	ldr	r3, [pc, #200]	; (80105ec <tcp_enqueue_flags+0x1bc>)
 8010524:	f240 4243 	movw	r2, #1091	; 0x443
 8010528:	4936      	ldr	r1, [pc, #216]	; (8010604 <tcp_enqueue_flags+0x1d4>)
 801052a:	4832      	ldr	r0, [pc, #200]	; (80105f4 <tcp_enqueue_flags+0x1c4>)
 801052c:	f004 fcda 	bl	8014ee4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010534:	2b00      	cmp	r3, #0
 8010536:	d103      	bne.n	8010540 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	68fa      	ldr	r2, [r7, #12]
 801053c:	66da      	str	r2, [r3, #108]	; 0x6c
 801053e:	e00d      	b.n	801055c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010544:	61bb      	str	r3, [r7, #24]
 8010546:	e002      	b.n	801054e <tcp_enqueue_flags+0x11e>
 8010548:	69bb      	ldr	r3, [r7, #24]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	61bb      	str	r3, [r7, #24]
 801054e:	69bb      	ldr	r3, [r7, #24]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d1f8      	bne.n	8010548 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	68fa      	ldr	r2, [r7, #12]
 801055a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2200      	movs	r2, #0
 8010560:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010564:	78fb      	ldrb	r3, [r7, #3]
 8010566:	f003 0302 	and.w	r3, r3, #2
 801056a:	2b00      	cmp	r3, #0
 801056c:	d104      	bne.n	8010578 <tcp_enqueue_flags+0x148>
 801056e:	78fb      	ldrb	r3, [r7, #3]
 8010570:	f003 0301 	and.w	r3, r3, #1
 8010574:	2b00      	cmp	r3, #0
 8010576:	d004      	beq.n	8010582 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801057c:	1c5a      	adds	r2, r3, #1
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010582:	78fb      	ldrb	r3, [r7, #3]
 8010584:	f003 0301 	and.w	r3, r3, #1
 8010588:	2b00      	cmp	r3, #0
 801058a:	d006      	beq.n	801059a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	8b5b      	ldrh	r3, [r3, #26]
 8010590:	f043 0320 	orr.w	r3, r3, #32
 8010594:	b29a      	uxth	r2, r3
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	4618      	mov	r0, r3
 80105a0:	f7fa fdd6 	bl	800b150 <pbuf_clen>
 80105a4:	4603      	mov	r3, r0
 80105a6:	461a      	mov	r2, r3
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105ae:	4413      	add	r3, r2
 80105b0:	b29a      	uxth	r2, r3
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d00e      	beq.n	80105e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d10a      	bne.n	80105e0 <tcp_enqueue_flags+0x1b0>
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d106      	bne.n	80105e0 <tcp_enqueue_flags+0x1b0>
 80105d2:	4b06      	ldr	r3, [pc, #24]	; (80105ec <tcp_enqueue_flags+0x1bc>)
 80105d4:	f240 4265 	movw	r2, #1125	; 0x465
 80105d8:	490b      	ldr	r1, [pc, #44]	; (8010608 <tcp_enqueue_flags+0x1d8>)
 80105da:	4806      	ldr	r0, [pc, #24]	; (80105f4 <tcp_enqueue_flags+0x1c4>)
 80105dc:	f004 fc82 	bl	8014ee4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80105e0:	2300      	movs	r3, #0
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3720      	adds	r7, #32
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
 80105ea:	bf00      	nop
 80105ec:	08017f14 	.word	0x08017f14
 80105f0:	08018338 	.word	0x08018338
 80105f4:	08017f68 	.word	0x08017f68
 80105f8:	08018390 	.word	0x08018390
 80105fc:	080183b0 	.word	0x080183b0
 8010600:	080183ec 	.word	0x080183ec
 8010604:	08018404 	.word	0x08018404
 8010608:	08018430 	.word	0x08018430

0801060c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801060c:	b5b0      	push	{r4, r5, r7, lr}
 801060e:	b08a      	sub	sp, #40	; 0x28
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d106      	bne.n	8010628 <tcp_output+0x1c>
 801061a:	4b9e      	ldr	r3, [pc, #632]	; (8010894 <tcp_output+0x288>)
 801061c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010620:	499d      	ldr	r1, [pc, #628]	; (8010898 <tcp_output+0x28c>)
 8010622:	489e      	ldr	r0, [pc, #632]	; (801089c <tcp_output+0x290>)
 8010624:	f004 fc5e 	bl	8014ee4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	7d1b      	ldrb	r3, [r3, #20]
 801062c:	2b01      	cmp	r3, #1
 801062e:	d106      	bne.n	801063e <tcp_output+0x32>
 8010630:	4b98      	ldr	r3, [pc, #608]	; (8010894 <tcp_output+0x288>)
 8010632:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010636:	499a      	ldr	r1, [pc, #616]	; (80108a0 <tcp_output+0x294>)
 8010638:	4898      	ldr	r0, [pc, #608]	; (801089c <tcp_output+0x290>)
 801063a:	f004 fc53 	bl	8014ee4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801063e:	4b99      	ldr	r3, [pc, #612]	; (80108a4 <tcp_output+0x298>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	429a      	cmp	r2, r3
 8010646:	d101      	bne.n	801064c <tcp_output+0x40>
    return ERR_OK;
 8010648:	2300      	movs	r3, #0
 801064a:	e1ce      	b.n	80109ea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010658:	4293      	cmp	r3, r2
 801065a:	bf28      	it	cs
 801065c:	4613      	movcs	r3, r2
 801065e:	b29b      	uxth	r3, r3
 8010660:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010666:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066a:	2b00      	cmp	r3, #0
 801066c:	d10b      	bne.n	8010686 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	8b5b      	ldrh	r3, [r3, #26]
 8010672:	f003 0302 	and.w	r3, r3, #2
 8010676:	2b00      	cmp	r3, #0
 8010678:	f000 81aa 	beq.w	80109d0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f000 fdcb 	bl	8011218 <tcp_send_empty_ack>
 8010682:	4603      	mov	r3, r0
 8010684:	e1b1      	b.n	80109ea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010686:	6879      	ldr	r1, [r7, #4]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	3304      	adds	r3, #4
 801068c:	461a      	mov	r2, r3
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f7ff f824 	bl	800f6dc <tcp_route>
 8010694:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d102      	bne.n	80106a2 <tcp_output+0x96>
    return ERR_RTE;
 801069c:	f06f 0303 	mvn.w	r3, #3
 80106a0:	e1a3      	b.n	80109ea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d003      	beq.n	80106b0 <tcp_output+0xa4>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d111      	bne.n	80106d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d002      	beq.n	80106bc <tcp_output+0xb0>
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	3304      	adds	r3, #4
 80106ba:	e000      	b.n	80106be <tcp_output+0xb2>
 80106bc:	2300      	movs	r3, #0
 80106be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d102      	bne.n	80106cc <tcp_output+0xc0>
      return ERR_RTE;
 80106c6:	f06f 0303 	mvn.w	r3, #3
 80106ca:	e18e      	b.n	80109ea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80106d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	685b      	ldr	r3, [r3, #4]
 80106da:	4618      	mov	r0, r3
 80106dc:	f7f9 f977 	bl	80099ce <lwip_htonl>
 80106e0:	4602      	mov	r2, r0
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106e6:	1ad3      	subs	r3, r2, r3
 80106e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106ea:	8912      	ldrh	r2, [r2, #8]
 80106ec:	4413      	add	r3, r2
 80106ee:	69ba      	ldr	r2, [r7, #24]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d227      	bcs.n	8010744 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106fa:	461a      	mov	r2, r3
 80106fc:	69bb      	ldr	r3, [r7, #24]
 80106fe:	4293      	cmp	r3, r2
 8010700:	d114      	bne.n	801072c <tcp_output+0x120>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010706:	2b00      	cmp	r3, #0
 8010708:	d110      	bne.n	801072c <tcp_output+0x120>
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010710:	2b00      	cmp	r3, #0
 8010712:	d10b      	bne.n	801072c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2200      	movs	r2, #0
 8010718:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2201      	movs	r2, #1
 8010720:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2200      	movs	r2, #0
 8010728:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	8b5b      	ldrh	r3, [r3, #26]
 8010730:	f003 0302 	and.w	r3, r3, #2
 8010734:	2b00      	cmp	r3, #0
 8010736:	f000 814d 	beq.w	80109d4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f000 fd6c 	bl	8011218 <tcp_send_empty_ack>
 8010740:	4603      	mov	r3, r0
 8010742:	e152      	b.n	80109ea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2200      	movs	r2, #0
 8010748:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010750:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010752:	6a3b      	ldr	r3, [r7, #32]
 8010754:	2b00      	cmp	r3, #0
 8010756:	f000 811c 	beq.w	8010992 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801075a:	e002      	b.n	8010762 <tcp_output+0x156>
 801075c:	6a3b      	ldr	r3, [r7, #32]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	623b      	str	r3, [r7, #32]
 8010762:	6a3b      	ldr	r3, [r7, #32]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d1f8      	bne.n	801075c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801076a:	e112      	b.n	8010992 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	899b      	ldrh	r3, [r3, #12]
 8010772:	b29b      	uxth	r3, r3
 8010774:	4618      	mov	r0, r3
 8010776:	f7f9 f915 	bl	80099a4 <lwip_htons>
 801077a:	4603      	mov	r3, r0
 801077c:	b2db      	uxtb	r3, r3
 801077e:	f003 0304 	and.w	r3, r3, #4
 8010782:	2b00      	cmp	r3, #0
 8010784:	d006      	beq.n	8010794 <tcp_output+0x188>
 8010786:	4b43      	ldr	r3, [pc, #268]	; (8010894 <tcp_output+0x288>)
 8010788:	f240 5236 	movw	r2, #1334	; 0x536
 801078c:	4946      	ldr	r1, [pc, #280]	; (80108a8 <tcp_output+0x29c>)
 801078e:	4843      	ldr	r0, [pc, #268]	; (801089c <tcp_output+0x290>)
 8010790:	f004 fba8 	bl	8014ee4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010798:	2b00      	cmp	r3, #0
 801079a:	d01f      	beq.n	80107dc <tcp_output+0x1d0>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	8b5b      	ldrh	r3, [r3, #26]
 80107a0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d119      	bne.n	80107dc <tcp_output+0x1d0>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d00b      	beq.n	80107c8 <tcp_output+0x1bc>
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d110      	bne.n	80107dc <tcp_output+0x1d0>
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107be:	891a      	ldrh	r2, [r3, #8]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d209      	bcs.n	80107dc <tcp_output+0x1d0>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d004      	beq.n	80107dc <tcp_output+0x1d0>
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107d8:	2b08      	cmp	r3, #8
 80107da:	d901      	bls.n	80107e0 <tcp_output+0x1d4>
 80107dc:	2301      	movs	r3, #1
 80107de:	e000      	b.n	80107e2 <tcp_output+0x1d6>
 80107e0:	2300      	movs	r3, #0
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d106      	bne.n	80107f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	8b5b      	ldrh	r3, [r3, #26]
 80107ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	f000 80e4 	beq.w	80109bc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	7d1b      	ldrb	r3, [r3, #20]
 80107f8:	2b02      	cmp	r3, #2
 80107fa:	d00d      	beq.n	8010818 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80107fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107fe:	68db      	ldr	r3, [r3, #12]
 8010800:	899b      	ldrh	r3, [r3, #12]
 8010802:	b29c      	uxth	r4, r3
 8010804:	2010      	movs	r0, #16
 8010806:	f7f9 f8cd 	bl	80099a4 <lwip_htons>
 801080a:	4603      	mov	r3, r0
 801080c:	461a      	mov	r2, r3
 801080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010810:	68db      	ldr	r3, [r3, #12]
 8010812:	4322      	orrs	r2, r4
 8010814:	b292      	uxth	r2, r2
 8010816:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010818:	697a      	ldr	r2, [r7, #20]
 801081a:	6879      	ldr	r1, [r7, #4]
 801081c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801081e:	f000 f909 	bl	8010a34 <tcp_output_segment>
 8010822:	4603      	mov	r3, r0
 8010824:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d009      	beq.n	8010842 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	8b5b      	ldrh	r3, [r3, #26]
 8010832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010836:	b29a      	uxth	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	835a      	strh	r2, [r3, #26]
      return err;
 801083c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010840:	e0d3      	b.n	80109ea <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	7d1b      	ldrb	r3, [r3, #20]
 801084e:	2b02      	cmp	r3, #2
 8010850:	d006      	beq.n	8010860 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	8b5b      	ldrh	r3, [r3, #26]
 8010856:	f023 0303 	bic.w	r3, r3, #3
 801085a:	b29a      	uxth	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010862:	68db      	ldr	r3, [r3, #12]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	4618      	mov	r0, r3
 8010868:	f7f9 f8b1 	bl	80099ce <lwip_htonl>
 801086c:	4604      	mov	r4, r0
 801086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010870:	891b      	ldrh	r3, [r3, #8]
 8010872:	461d      	mov	r5, r3
 8010874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010876:	68db      	ldr	r3, [r3, #12]
 8010878:	899b      	ldrh	r3, [r3, #12]
 801087a:	b29b      	uxth	r3, r3
 801087c:	4618      	mov	r0, r3
 801087e:	f7f9 f891 	bl	80099a4 <lwip_htons>
 8010882:	4603      	mov	r3, r0
 8010884:	b2db      	uxtb	r3, r3
 8010886:	f003 0303 	and.w	r3, r3, #3
 801088a:	2b00      	cmp	r3, #0
 801088c:	d00e      	beq.n	80108ac <tcp_output+0x2a0>
 801088e:	2301      	movs	r3, #1
 8010890:	e00d      	b.n	80108ae <tcp_output+0x2a2>
 8010892:	bf00      	nop
 8010894:	08017f14 	.word	0x08017f14
 8010898:	08018458 	.word	0x08018458
 801089c:	08017f68 	.word	0x08017f68
 80108a0:	08018470 	.word	0x08018470
 80108a4:	2000d340 	.word	0x2000d340
 80108a8:	08018498 	.word	0x08018498
 80108ac:	2300      	movs	r3, #0
 80108ae:	442b      	add	r3, r5
 80108b0:	4423      	add	r3, r4
 80108b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	1ad3      	subs	r3, r2, r3
 80108bc:	2b00      	cmp	r3, #0
 80108be:	da02      	bge.n	80108c6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80108c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c8:	891b      	ldrh	r3, [r3, #8]
 80108ca:	461c      	mov	r4, r3
 80108cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	899b      	ldrh	r3, [r3, #12]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7f9 f865 	bl	80099a4 <lwip_htons>
 80108da:	4603      	mov	r3, r0
 80108dc:	b2db      	uxtb	r3, r3
 80108de:	f003 0303 	and.w	r3, r3, #3
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d001      	beq.n	80108ea <tcp_output+0x2de>
 80108e6:	2301      	movs	r3, #1
 80108e8:	e000      	b.n	80108ec <tcp_output+0x2e0>
 80108ea:	2300      	movs	r3, #0
 80108ec:	4423      	add	r3, r4
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d049      	beq.n	8010986 <tcp_output+0x37a>
      seg->next = NULL;
 80108f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f4:	2200      	movs	r2, #0
 80108f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d105      	bne.n	801090c <tcp_output+0x300>
        pcb->unacked = seg;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010904:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010908:	623b      	str	r3, [r7, #32]
 801090a:	e03f      	b.n	801098c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	4618      	mov	r0, r3
 8010914:	f7f9 f85b 	bl	80099ce <lwip_htonl>
 8010918:	4604      	mov	r4, r0
 801091a:	6a3b      	ldr	r3, [r7, #32]
 801091c:	68db      	ldr	r3, [r3, #12]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	4618      	mov	r0, r3
 8010922:	f7f9 f854 	bl	80099ce <lwip_htonl>
 8010926:	4603      	mov	r3, r0
 8010928:	1ae3      	subs	r3, r4, r3
 801092a:	2b00      	cmp	r3, #0
 801092c:	da24      	bge.n	8010978 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	3370      	adds	r3, #112	; 0x70
 8010932:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010934:	e002      	b.n	801093c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010936:	69fb      	ldr	r3, [r7, #28]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d011      	beq.n	8010968 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010944:	69fb      	ldr	r3, [r7, #28]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	68db      	ldr	r3, [r3, #12]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	4618      	mov	r0, r3
 801094e:	f7f9 f83e 	bl	80099ce <lwip_htonl>
 8010952:	4604      	mov	r4, r0
 8010954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010956:	68db      	ldr	r3, [r3, #12]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	4618      	mov	r0, r3
 801095c:	f7f9 f837 	bl	80099ce <lwip_htonl>
 8010960:	4603      	mov	r3, r0
 8010962:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010964:	2b00      	cmp	r3, #0
 8010966:	dbe6      	blt.n	8010936 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	681a      	ldr	r2, [r3, #0]
 801096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010970:	69fb      	ldr	r3, [r7, #28]
 8010972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010974:	601a      	str	r2, [r3, #0]
 8010976:	e009      	b.n	801098c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010978:	6a3b      	ldr	r3, [r7, #32]
 801097a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801097c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801097e:	6a3b      	ldr	r3, [r7, #32]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	623b      	str	r3, [r7, #32]
 8010984:	e002      	b.n	801098c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010988:	f7fb ff1d 	bl	800c7c6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010990:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010994:	2b00      	cmp	r3, #0
 8010996:	d012      	beq.n	80109be <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099a:	68db      	ldr	r3, [r3, #12]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	4618      	mov	r0, r3
 80109a0:	f7f9 f815 	bl	80099ce <lwip_htonl>
 80109a4:	4602      	mov	r2, r0
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109aa:	1ad3      	subs	r3, r2, r3
 80109ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109ae:	8912      	ldrh	r2, [r2, #8]
 80109b0:	4413      	add	r3, r2
  while (seg != NULL &&
 80109b2:	69ba      	ldr	r2, [r7, #24]
 80109b4:	429a      	cmp	r2, r3
 80109b6:	f4bf aed9 	bcs.w	801076c <tcp_output+0x160>
 80109ba:	e000      	b.n	80109be <tcp_output+0x3b2>
      break;
 80109bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d108      	bne.n	80109d8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2200      	movs	r2, #0
 80109ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80109ce:	e004      	b.n	80109da <tcp_output+0x3ce>
    goto output_done;
 80109d0:	bf00      	nop
 80109d2:	e002      	b.n	80109da <tcp_output+0x3ce>
    goto output_done;
 80109d4:	bf00      	nop
 80109d6:	e000      	b.n	80109da <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80109d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	8b5b      	ldrh	r3, [r3, #26]
 80109de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80109e8:	2300      	movs	r3, #0
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3728      	adds	r7, #40	; 0x28
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bdb0      	pop	{r4, r5, r7, pc}
 80109f2:	bf00      	nop

080109f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d106      	bne.n	8010a10 <tcp_output_segment_busy+0x1c>
 8010a02:	4b09      	ldr	r3, [pc, #36]	; (8010a28 <tcp_output_segment_busy+0x34>)
 8010a04:	f240 529a 	movw	r2, #1434	; 0x59a
 8010a08:	4908      	ldr	r1, [pc, #32]	; (8010a2c <tcp_output_segment_busy+0x38>)
 8010a0a:	4809      	ldr	r0, [pc, #36]	; (8010a30 <tcp_output_segment_busy+0x3c>)
 8010a0c:	f004 fa6a 	bl	8014ee4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	7b9b      	ldrb	r3, [r3, #14]
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d001      	beq.n	8010a1e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	e000      	b.n	8010a20 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010a1e:	2300      	movs	r3, #0
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3708      	adds	r7, #8
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}
 8010a28:	08017f14 	.word	0x08017f14
 8010a2c:	080184b0 	.word	0x080184b0
 8010a30:	08017f68 	.word	0x08017f68

08010a34 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010a34:	b5b0      	push	{r4, r5, r7, lr}
 8010a36:	b08c      	sub	sp, #48	; 0x30
 8010a38:	af04      	add	r7, sp, #16
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d106      	bne.n	8010a54 <tcp_output_segment+0x20>
 8010a46:	4b63      	ldr	r3, [pc, #396]	; (8010bd4 <tcp_output_segment+0x1a0>)
 8010a48:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010a4c:	4962      	ldr	r1, [pc, #392]	; (8010bd8 <tcp_output_segment+0x1a4>)
 8010a4e:	4863      	ldr	r0, [pc, #396]	; (8010bdc <tcp_output_segment+0x1a8>)
 8010a50:	f004 fa48 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d106      	bne.n	8010a68 <tcp_output_segment+0x34>
 8010a5a:	4b5e      	ldr	r3, [pc, #376]	; (8010bd4 <tcp_output_segment+0x1a0>)
 8010a5c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010a60:	495f      	ldr	r1, [pc, #380]	; (8010be0 <tcp_output_segment+0x1ac>)
 8010a62:	485e      	ldr	r0, [pc, #376]	; (8010bdc <tcp_output_segment+0x1a8>)
 8010a64:	f004 fa3e 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d106      	bne.n	8010a7c <tcp_output_segment+0x48>
 8010a6e:	4b59      	ldr	r3, [pc, #356]	; (8010bd4 <tcp_output_segment+0x1a0>)
 8010a70:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010a74:	495b      	ldr	r1, [pc, #364]	; (8010be4 <tcp_output_segment+0x1b0>)
 8010a76:	4859      	ldr	r0, [pc, #356]	; (8010bdc <tcp_output_segment+0x1a8>)
 8010a78:	f004 fa34 	bl	8014ee4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010a7c:	68f8      	ldr	r0, [r7, #12]
 8010a7e:	f7ff ffb9 	bl	80109f4 <tcp_output_segment_busy>
 8010a82:	4603      	mov	r3, r0
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d001      	beq.n	8010a8c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	e09f      	b.n	8010bcc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	68dc      	ldr	r4, [r3, #12]
 8010a94:	4610      	mov	r0, r2
 8010a96:	f7f8 ff9a 	bl	80099ce <lwip_htonl>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	68dc      	ldr	r4, [r3, #12]
 8010aa6:	4610      	mov	r0, r2
 8010aa8:	f7f8 ff7c 	bl	80099a4 <lwip_htons>
 8010aac:	4603      	mov	r3, r0
 8010aae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ab4:	68ba      	ldr	r2, [r7, #8]
 8010ab6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010ab8:	441a      	add	r2, r3
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	68db      	ldr	r3, [r3, #12]
 8010ac2:	3314      	adds	r3, #20
 8010ac4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	7a9b      	ldrb	r3, [r3, #10]
 8010aca:	f003 0301 	and.w	r3, r3, #1
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d015      	beq.n	8010afe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	3304      	adds	r3, #4
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	6879      	ldr	r1, [r7, #4]
 8010ada:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010ade:	f7fc fa37 	bl	800cf50 <tcp_eff_send_mss_netif>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010ae6:	8b7b      	ldrh	r3, [r7, #26]
 8010ae8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7f8 ff6e 	bl	80099ce <lwip_htonl>
 8010af2:	4602      	mov	r2, r0
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	3304      	adds	r3, #4
 8010afc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	da02      	bge.n	8010b0e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d10c      	bne.n	8010b30 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010b16:	4b34      	ldr	r3, [pc, #208]	; (8010be8 <tcp_output_segment+0x1b4>)
 8010b18:	681a      	ldr	r2, [r3, #0]
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	68db      	ldr	r3, [r3, #12]
 8010b22:	685b      	ldr	r3, [r3, #4]
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7f8 ff52 	bl	80099ce <lwip_htonl>
 8010b2a:	4602      	mov	r2, r0
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	68da      	ldr	r2, [r3, #12]
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	685b      	ldr	r3, [r3, #4]
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	1ad3      	subs	r3, r2, r3
 8010b3c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	8959      	ldrh	r1, [r3, #10]
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	8b3a      	ldrh	r2, [r7, #24]
 8010b4a:	1a8a      	subs	r2, r1, r2
 8010b4c:	b292      	uxth	r2, r2
 8010b4e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	8919      	ldrh	r1, [r3, #8]
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	685b      	ldr	r3, [r3, #4]
 8010b5a:	8b3a      	ldrh	r2, [r7, #24]
 8010b5c:	1a8a      	subs	r2, r1, r2
 8010b5e:	b292      	uxth	r2, r2
 8010b60:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	68fa      	ldr	r2, [r7, #12]
 8010b68:	68d2      	ldr	r2, [r2, #12]
 8010b6a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	2200      	movs	r2, #0
 8010b72:	741a      	strb	r2, [r3, #16]
 8010b74:	2200      	movs	r2, #0
 8010b76:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	68db      	ldr	r3, [r3, #12]
 8010b7c:	f103 0214 	add.w	r2, r3, #20
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	7a9b      	ldrb	r3, [r3, #10]
 8010b84:	009b      	lsls	r3, r3, #2
 8010b86:	f003 0304 	and.w	r3, r3, #4
 8010b8a:	4413      	add	r3, r2
 8010b8c:	69fa      	ldr	r2, [r7, #28]
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d006      	beq.n	8010ba0 <tcp_output_segment+0x16c>
 8010b92:	4b10      	ldr	r3, [pc, #64]	; (8010bd4 <tcp_output_segment+0x1a0>)
 8010b94:	f240 621c 	movw	r2, #1564	; 0x61c
 8010b98:	4914      	ldr	r1, [pc, #80]	; (8010bec <tcp_output_segment+0x1b8>)
 8010b9a:	4810      	ldr	r0, [pc, #64]	; (8010bdc <tcp_output_segment+0x1a8>)
 8010b9c:	f004 f9a2 	bl	8014ee4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	6858      	ldr	r0, [r3, #4]
 8010ba4:	68b9      	ldr	r1, [r7, #8]
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	1d1c      	adds	r4, r3, #4
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	7add      	ldrb	r5, [r3, #11]
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	7a9b      	ldrb	r3, [r3, #10]
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	9202      	str	r2, [sp, #8]
 8010bb6:	2206      	movs	r2, #6
 8010bb8:	9201      	str	r2, [sp, #4]
 8010bba:	9300      	str	r3, [sp, #0]
 8010bbc:	462b      	mov	r3, r5
 8010bbe:	4622      	mov	r2, r4
 8010bc0:	f002 fd96 	bl	80136f0 <ip4_output_if>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010bc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3720      	adds	r7, #32
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8010bd4:	08017f14 	.word	0x08017f14
 8010bd8:	080184d8 	.word	0x080184d8
 8010bdc:	08017f68 	.word	0x08017f68
 8010be0:	080184f8 	.word	0x080184f8
 8010be4:	08018518 	.word	0x08018518
 8010be8:	2000d330 	.word	0x2000d330
 8010bec:	0801853c 	.word	0x0801853c

08010bf0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010bf0:	b5b0      	push	{r4, r5, r7, lr}
 8010bf2:	b084      	sub	sp, #16
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d106      	bne.n	8010c0c <tcp_rexmit_rto_prepare+0x1c>
 8010bfe:	4b31      	ldr	r3, [pc, #196]	; (8010cc4 <tcp_rexmit_rto_prepare+0xd4>)
 8010c00:	f240 6263 	movw	r2, #1635	; 0x663
 8010c04:	4930      	ldr	r1, [pc, #192]	; (8010cc8 <tcp_rexmit_rto_prepare+0xd8>)
 8010c06:	4831      	ldr	r0, [pc, #196]	; (8010ccc <tcp_rexmit_rto_prepare+0xdc>)
 8010c08:	f004 f96c 	bl	8014ee4 <iprintf>

  if (pcb->unacked == NULL) {
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d102      	bne.n	8010c1a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010c14:	f06f 0305 	mvn.w	r3, #5
 8010c18:	e050      	b.n	8010cbc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c1e:	60fb      	str	r3, [r7, #12]
 8010c20:	e00b      	b.n	8010c3a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010c22:	68f8      	ldr	r0, [r7, #12]
 8010c24:	f7ff fee6 	bl	80109f4 <tcp_output_segment_busy>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d002      	beq.n	8010c34 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010c2e:	f06f 0305 	mvn.w	r3, #5
 8010c32:	e043      	b.n	8010cbc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	60fb      	str	r3, [r7, #12]
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d1ef      	bne.n	8010c22 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010c42:	68f8      	ldr	r0, [r7, #12]
 8010c44:	f7ff fed6 	bl	80109f4 <tcp_output_segment_busy>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d002      	beq.n	8010c54 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010c4e:	f06f 0305 	mvn.w	r3, #5
 8010c52:	e033      	b.n	8010cbc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2200      	movs	r2, #0
 8010c68:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	8b5b      	ldrh	r3, [r3, #26]
 8010c6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7f8 fea5 	bl	80099ce <lwip_htonl>
 8010c84:	4604      	mov	r4, r0
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	891b      	ldrh	r3, [r3, #8]
 8010c8a:	461d      	mov	r5, r3
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	68db      	ldr	r3, [r3, #12]
 8010c90:	899b      	ldrh	r3, [r3, #12]
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7f8 fe85 	bl	80099a4 <lwip_htons>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	b2db      	uxtb	r3, r3
 8010c9e:	f003 0303 	and.w	r3, r3, #3
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d001      	beq.n	8010caa <tcp_rexmit_rto_prepare+0xba>
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	e000      	b.n	8010cac <tcp_rexmit_rto_prepare+0xbc>
 8010caa:	2300      	movs	r3, #0
 8010cac:	442b      	add	r3, r5
 8010cae:	18e2      	adds	r2, r4, r3
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010cba:	2300      	movs	r3, #0
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3710      	adds	r7, #16
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8010cc4:	08017f14 	.word	0x08017f14
 8010cc8:	08018550 	.word	0x08018550
 8010ccc:	08017f68 	.word	0x08017f68

08010cd0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d106      	bne.n	8010cec <tcp_rexmit_rto_commit+0x1c>
 8010cde:	4b0d      	ldr	r3, [pc, #52]	; (8010d14 <tcp_rexmit_rto_commit+0x44>)
 8010ce0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010ce4:	490c      	ldr	r1, [pc, #48]	; (8010d18 <tcp_rexmit_rto_commit+0x48>)
 8010ce6:	480d      	ldr	r0, [pc, #52]	; (8010d1c <tcp_rexmit_rto_commit+0x4c>)
 8010ce8:	f004 f8fc 	bl	8014ee4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010cf2:	2bff      	cmp	r3, #255	; 0xff
 8010cf4:	d007      	beq.n	8010d06 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010cfc:	3301      	adds	r3, #1
 8010cfe:	b2da      	uxtb	r2, r3
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f7ff fc80 	bl	801060c <tcp_output>
}
 8010d0c:	bf00      	nop
 8010d0e:	3708      	adds	r7, #8
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}
 8010d14:	08017f14 	.word	0x08017f14
 8010d18:	08018574 	.word	0x08018574
 8010d1c:	08017f68 	.word	0x08017f68

08010d20 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d106      	bne.n	8010d3c <tcp_rexmit_rto+0x1c>
 8010d2e:	4b0a      	ldr	r3, [pc, #40]	; (8010d58 <tcp_rexmit_rto+0x38>)
 8010d30:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010d34:	4909      	ldr	r1, [pc, #36]	; (8010d5c <tcp_rexmit_rto+0x3c>)
 8010d36:	480a      	ldr	r0, [pc, #40]	; (8010d60 <tcp_rexmit_rto+0x40>)
 8010d38:	f004 f8d4 	bl	8014ee4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f7ff ff57 	bl	8010bf0 <tcp_rexmit_rto_prepare>
 8010d42:	4603      	mov	r3, r0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d102      	bne.n	8010d4e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f7ff ffc1 	bl	8010cd0 <tcp_rexmit_rto_commit>
  }
}
 8010d4e:	bf00      	nop
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	bf00      	nop
 8010d58:	08017f14 	.word	0x08017f14
 8010d5c:	08018598 	.word	0x08018598
 8010d60:	08017f68 	.word	0x08017f68

08010d64 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010d64:	b590      	push	{r4, r7, lr}
 8010d66:	b085      	sub	sp, #20
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d106      	bne.n	8010d80 <tcp_rexmit+0x1c>
 8010d72:	4b2f      	ldr	r3, [pc, #188]	; (8010e30 <tcp_rexmit+0xcc>)
 8010d74:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010d78:	492e      	ldr	r1, [pc, #184]	; (8010e34 <tcp_rexmit+0xd0>)
 8010d7a:	482f      	ldr	r0, [pc, #188]	; (8010e38 <tcp_rexmit+0xd4>)
 8010d7c:	f004 f8b2 	bl	8014ee4 <iprintf>

  if (pcb->unacked == NULL) {
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d102      	bne.n	8010d8e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010d88:	f06f 0305 	mvn.w	r3, #5
 8010d8c:	e04c      	b.n	8010e28 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d92:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010d94:	68b8      	ldr	r0, [r7, #8]
 8010d96:	f7ff fe2d 	bl	80109f4 <tcp_output_segment_busy>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d002      	beq.n	8010da6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010da0:	f06f 0305 	mvn.w	r3, #5
 8010da4:	e040      	b.n	8010e28 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	336c      	adds	r3, #108	; 0x6c
 8010db2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010db4:	e002      	b.n	8010dbc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d011      	beq.n	8010de8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	68db      	ldr	r3, [r3, #12]
 8010dca:	685b      	ldr	r3, [r3, #4]
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7f8 fdfe 	bl	80099ce <lwip_htonl>
 8010dd2:	4604      	mov	r4, r0
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7f8 fdf7 	bl	80099ce <lwip_htonl>
 8010de0:	4603      	mov	r3, r0
 8010de2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	dbe6      	blt.n	8010db6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681a      	ldr	r2, [r3, #0]
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	68ba      	ldr	r2, [r7, #8]
 8010df4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d103      	bne.n	8010e06 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2200      	movs	r2, #0
 8010e02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e0c:	2bff      	cmp	r3, #255	; 0xff
 8010e0e:	d007      	beq.n	8010e20 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e16:	3301      	adds	r3, #1
 8010e18:	b2da      	uxtb	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2200      	movs	r2, #0
 8010e24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010e26:	2300      	movs	r3, #0
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3714      	adds	r7, #20
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd90      	pop	{r4, r7, pc}
 8010e30:	08017f14 	.word	0x08017f14
 8010e34:	080185b4 	.word	0x080185b4
 8010e38:	08017f68 	.word	0x08017f68

08010e3c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d106      	bne.n	8010e58 <tcp_rexmit_fast+0x1c>
 8010e4a:	4b2a      	ldr	r3, [pc, #168]	; (8010ef4 <tcp_rexmit_fast+0xb8>)
 8010e4c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010e50:	4929      	ldr	r1, [pc, #164]	; (8010ef8 <tcp_rexmit_fast+0xbc>)
 8010e52:	482a      	ldr	r0, [pc, #168]	; (8010efc <tcp_rexmit_fast+0xc0>)
 8010e54:	f004 f846 	bl	8014ee4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d044      	beq.n	8010eea <tcp_rexmit_fast+0xae>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	8b5b      	ldrh	r3, [r3, #26]
 8010e64:	f003 0304 	and.w	r3, r3, #4
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d13e      	bne.n	8010eea <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f7ff ff79 	bl	8010d64 <tcp_rexmit>
 8010e72:	4603      	mov	r3, r0
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d138      	bne.n	8010eea <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010e84:	4293      	cmp	r3, r2
 8010e86:	bf28      	it	cs
 8010e88:	4613      	movcs	r3, r2
 8010e8a:	b29b      	uxth	r3, r3
 8010e8c:	0fda      	lsrs	r2, r3, #31
 8010e8e:	4413      	add	r3, r2
 8010e90:	105b      	asrs	r3, r3, #1
 8010e92:	b29a      	uxth	r2, r3
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ea6:	005b      	lsls	r3, r3, #1
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d206      	bcs.n	8010eba <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010eb0:	005b      	lsls	r3, r3, #1
 8010eb2:	b29a      	uxth	r2, r3
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	0049      	lsls	r1, r1, #1
 8010ec8:	440b      	add	r3, r1
 8010eca:	b29b      	uxth	r3, r3
 8010ecc:	4413      	add	r3, r2
 8010ece:	b29a      	uxth	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	8b5b      	ldrh	r3, [r3, #26]
 8010eda:	f043 0304 	orr.w	r3, r3, #4
 8010ede:	b29a      	uxth	r2, r3
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010eea:	bf00      	nop
 8010eec:	3708      	adds	r7, #8
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	08017f14 	.word	0x08017f14
 8010ef8:	080185cc 	.word	0x080185cc
 8010efc:	08017f68 	.word	0x08017f68

08010f00 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b086      	sub	sp, #24
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	60f8      	str	r0, [r7, #12]
 8010f08:	607b      	str	r3, [r7, #4]
 8010f0a:	460b      	mov	r3, r1
 8010f0c:	817b      	strh	r3, [r7, #10]
 8010f0e:	4613      	mov	r3, r2
 8010f10:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010f12:	897a      	ldrh	r2, [r7, #10]
 8010f14:	893b      	ldrh	r3, [r7, #8]
 8010f16:	4413      	add	r3, r2
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	3314      	adds	r3, #20
 8010f1c:	b29b      	uxth	r3, r3
 8010f1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f22:	4619      	mov	r1, r3
 8010f24:	2022      	movs	r0, #34	; 0x22
 8010f26:	f7f9 fda1 	bl	800aa6c <pbuf_alloc>
 8010f2a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d04d      	beq.n	8010fce <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010f32:	897b      	ldrh	r3, [r7, #10]
 8010f34:	3313      	adds	r3, #19
 8010f36:	697a      	ldr	r2, [r7, #20]
 8010f38:	8952      	ldrh	r2, [r2, #10]
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	db06      	blt.n	8010f4c <tcp_output_alloc_header_common+0x4c>
 8010f3e:	4b26      	ldr	r3, [pc, #152]	; (8010fd8 <tcp_output_alloc_header_common+0xd8>)
 8010f40:	f240 7223 	movw	r2, #1827	; 0x723
 8010f44:	4925      	ldr	r1, [pc, #148]	; (8010fdc <tcp_output_alloc_header_common+0xdc>)
 8010f46:	4826      	ldr	r0, [pc, #152]	; (8010fe0 <tcp_output_alloc_header_common+0xe0>)
 8010f48:	f003 ffcc 	bl	8014ee4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010f52:	8c3b      	ldrh	r3, [r7, #32]
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7f8 fd25 	bl	80099a4 <lwip_htons>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7f8 fd1d 	bl	80099a4 <lwip_htons>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	693b      	ldr	r3, [r7, #16]
 8010f70:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	687a      	ldr	r2, [r7, #4]
 8010f76:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010f78:	68f8      	ldr	r0, [r7, #12]
 8010f7a:	f7f8 fd28 	bl	80099ce <lwip_htonl>
 8010f7e:	4602      	mov	r2, r0
 8010f80:	693b      	ldr	r3, [r7, #16]
 8010f82:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010f84:	897b      	ldrh	r3, [r7, #10]
 8010f86:	089b      	lsrs	r3, r3, #2
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	3305      	adds	r3, #5
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	031b      	lsls	r3, r3, #12
 8010f90:	b29a      	uxth	r2, r3
 8010f92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010f96:	b29b      	uxth	r3, r3
 8010f98:	4313      	orrs	r3, r2
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7f8 fd01 	bl	80099a4 <lwip_htons>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010faa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7f8 fcf9 	bl	80099a4 <lwip_htons>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	693b      	ldr	r3, [r7, #16]
 8010fb8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	741a      	strb	r2, [r3, #16]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	749a      	strb	r2, [r3, #18]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010fce:	697b      	ldr	r3, [r7, #20]
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3718      	adds	r7, #24
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	08017f14 	.word	0x08017f14
 8010fdc:	080185ec 	.word	0x080185ec
 8010fe0:	08017f68 	.word	0x08017f68

08010fe4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010fe4:	b5b0      	push	{r4, r5, r7, lr}
 8010fe6:	b08a      	sub	sp, #40	; 0x28
 8010fe8:	af04      	add	r7, sp, #16
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	607b      	str	r3, [r7, #4]
 8010fee:	460b      	mov	r3, r1
 8010ff0:	817b      	strh	r3, [r7, #10]
 8010ff2:	4613      	mov	r3, r2
 8010ff4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d106      	bne.n	801100a <tcp_output_alloc_header+0x26>
 8010ffc:	4b15      	ldr	r3, [pc, #84]	; (8011054 <tcp_output_alloc_header+0x70>)
 8010ffe:	f240 7242 	movw	r2, #1858	; 0x742
 8011002:	4915      	ldr	r1, [pc, #84]	; (8011058 <tcp_output_alloc_header+0x74>)
 8011004:	4815      	ldr	r0, [pc, #84]	; (801105c <tcp_output_alloc_header+0x78>)
 8011006:	f003 ff6d 	bl	8014ee4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	8adb      	ldrh	r3, [r3, #22]
 8011012:	68fa      	ldr	r2, [r7, #12]
 8011014:	8b12      	ldrh	r2, [r2, #24]
 8011016:	68f9      	ldr	r1, [r7, #12]
 8011018:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801101a:	893d      	ldrh	r5, [r7, #8]
 801101c:	897c      	ldrh	r4, [r7, #10]
 801101e:	9103      	str	r1, [sp, #12]
 8011020:	2110      	movs	r1, #16
 8011022:	9102      	str	r1, [sp, #8]
 8011024:	9201      	str	r2, [sp, #4]
 8011026:	9300      	str	r3, [sp, #0]
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	462a      	mov	r2, r5
 801102c:	4621      	mov	r1, r4
 801102e:	f7ff ff67 	bl	8010f00 <tcp_output_alloc_header_common>
 8011032:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d006      	beq.n	8011048 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801103e:	68fa      	ldr	r2, [r7, #12]
 8011040:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011042:	441a      	add	r2, r3
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011048:	697b      	ldr	r3, [r7, #20]
}
 801104a:	4618      	mov	r0, r3
 801104c:	3718      	adds	r7, #24
 801104e:	46bd      	mov	sp, r7
 8011050:	bdb0      	pop	{r4, r5, r7, pc}
 8011052:	bf00      	nop
 8011054:	08017f14 	.word	0x08017f14
 8011058:	0801861c 	.word	0x0801861c
 801105c:	08017f68 	.word	0x08017f68

08011060 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b088      	sub	sp, #32
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	4611      	mov	r1, r2
 801106c:	461a      	mov	r2, r3
 801106e:	460b      	mov	r3, r1
 8011070:	71fb      	strb	r3, [r7, #7]
 8011072:	4613      	mov	r3, r2
 8011074:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011076:	2300      	movs	r3, #0
 8011078:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d106      	bne.n	801108e <tcp_output_fill_options+0x2e>
 8011080:	4b13      	ldr	r3, [pc, #76]	; (80110d0 <tcp_output_fill_options+0x70>)
 8011082:	f240 7256 	movw	r2, #1878	; 0x756
 8011086:	4913      	ldr	r1, [pc, #76]	; (80110d4 <tcp_output_fill_options+0x74>)
 8011088:	4813      	ldr	r0, [pc, #76]	; (80110d8 <tcp_output_fill_options+0x78>)
 801108a:	f003 ff2b 	bl	8014ee4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	685b      	ldr	r3, [r3, #4]
 8011092:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011094:	69bb      	ldr	r3, [r7, #24]
 8011096:	3314      	adds	r3, #20
 8011098:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801109a:	69bb      	ldr	r3, [r7, #24]
 801109c:	f103 0214 	add.w	r2, r3, #20
 80110a0:	8bfb      	ldrh	r3, [r7, #30]
 80110a2:	009b      	lsls	r3, r3, #2
 80110a4:	4619      	mov	r1, r3
 80110a6:	79fb      	ldrb	r3, [r7, #7]
 80110a8:	009b      	lsls	r3, r3, #2
 80110aa:	f003 0304 	and.w	r3, r3, #4
 80110ae:	440b      	add	r3, r1
 80110b0:	4413      	add	r3, r2
 80110b2:	697a      	ldr	r2, [r7, #20]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d006      	beq.n	80110c6 <tcp_output_fill_options+0x66>
 80110b8:	4b05      	ldr	r3, [pc, #20]	; (80110d0 <tcp_output_fill_options+0x70>)
 80110ba:	f240 7275 	movw	r2, #1909	; 0x775
 80110be:	4907      	ldr	r1, [pc, #28]	; (80110dc <tcp_output_fill_options+0x7c>)
 80110c0:	4805      	ldr	r0, [pc, #20]	; (80110d8 <tcp_output_fill_options+0x78>)
 80110c2:	f003 ff0f 	bl	8014ee4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80110c6:	bf00      	nop
 80110c8:	3720      	adds	r7, #32
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	08017f14 	.word	0x08017f14
 80110d4:	08018644 	.word	0x08018644
 80110d8:	08017f68 	.word	0x08017f68
 80110dc:	0801853c 	.word	0x0801853c

080110e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b08a      	sub	sp, #40	; 0x28
 80110e4:	af04      	add	r7, sp, #16
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	60b9      	str	r1, [r7, #8]
 80110ea:	607a      	str	r2, [r7, #4]
 80110ec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d106      	bne.n	8011102 <tcp_output_control_segment+0x22>
 80110f4:	4b1c      	ldr	r3, [pc, #112]	; (8011168 <tcp_output_control_segment+0x88>)
 80110f6:	f240 7287 	movw	r2, #1927	; 0x787
 80110fa:	491c      	ldr	r1, [pc, #112]	; (801116c <tcp_output_control_segment+0x8c>)
 80110fc:	481c      	ldr	r0, [pc, #112]	; (8011170 <tcp_output_control_segment+0x90>)
 80110fe:	f003 fef1 	bl	8014ee4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011102:	683a      	ldr	r2, [r7, #0]
 8011104:	6879      	ldr	r1, [r7, #4]
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f7fe fae8 	bl	800f6dc <tcp_route>
 801110c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d102      	bne.n	801111a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011114:	23fc      	movs	r3, #252	; 0xfc
 8011116:	75fb      	strb	r3, [r7, #23]
 8011118:	e01c      	b.n	8011154 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d006      	beq.n	801112e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	7adb      	ldrb	r3, [r3, #11]
 8011124:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	7a9b      	ldrb	r3, [r3, #10]
 801112a:	757b      	strb	r3, [r7, #21]
 801112c:	e003      	b.n	8011136 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801112e:	23ff      	movs	r3, #255	; 0xff
 8011130:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011132:	2300      	movs	r3, #0
 8011134:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011136:	7dba      	ldrb	r2, [r7, #22]
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	9302      	str	r3, [sp, #8]
 801113c:	2306      	movs	r3, #6
 801113e:	9301      	str	r3, [sp, #4]
 8011140:	7d7b      	ldrb	r3, [r7, #21]
 8011142:	9300      	str	r3, [sp, #0]
 8011144:	4613      	mov	r3, r2
 8011146:	683a      	ldr	r2, [r7, #0]
 8011148:	6879      	ldr	r1, [r7, #4]
 801114a:	68b8      	ldr	r0, [r7, #8]
 801114c:	f002 fad0 	bl	80136f0 <ip4_output_if>
 8011150:	4603      	mov	r3, r0
 8011152:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011154:	68b8      	ldr	r0, [r7, #8]
 8011156:	f7f9 ff6d 	bl	800b034 <pbuf_free>
  return err;
 801115a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801115e:	4618      	mov	r0, r3
 8011160:	3718      	adds	r7, #24
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
 8011166:	bf00      	nop
 8011168:	08017f14 	.word	0x08017f14
 801116c:	0801866c 	.word	0x0801866c
 8011170:	08017f68 	.word	0x08017f68

08011174 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011174:	b590      	push	{r4, r7, lr}
 8011176:	b08b      	sub	sp, #44	; 0x2c
 8011178:	af04      	add	r7, sp, #16
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	607a      	str	r2, [r7, #4]
 8011180:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d106      	bne.n	8011196 <tcp_rst+0x22>
 8011188:	4b1f      	ldr	r3, [pc, #124]	; (8011208 <tcp_rst+0x94>)
 801118a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801118e:	491f      	ldr	r1, [pc, #124]	; (801120c <tcp_rst+0x98>)
 8011190:	481f      	ldr	r0, [pc, #124]	; (8011210 <tcp_rst+0x9c>)
 8011192:	f003 fea7 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011198:	2b00      	cmp	r3, #0
 801119a:	d106      	bne.n	80111aa <tcp_rst+0x36>
 801119c:	4b1a      	ldr	r3, [pc, #104]	; (8011208 <tcp_rst+0x94>)
 801119e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80111a2:	491c      	ldr	r1, [pc, #112]	; (8011214 <tcp_rst+0xa0>)
 80111a4:	481a      	ldr	r0, [pc, #104]	; (8011210 <tcp_rst+0x9c>)
 80111a6:	f003 fe9d 	bl	8014ee4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80111aa:	2300      	movs	r3, #0
 80111ac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80111ae:	f246 0308 	movw	r3, #24584	; 0x6008
 80111b2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80111b4:	7dfb      	ldrb	r3, [r7, #23]
 80111b6:	b29c      	uxth	r4, r3
 80111b8:	68b8      	ldr	r0, [r7, #8]
 80111ba:	f7f8 fc08 	bl	80099ce <lwip_htonl>
 80111be:	4602      	mov	r2, r0
 80111c0:	8abb      	ldrh	r3, [r7, #20]
 80111c2:	9303      	str	r3, [sp, #12]
 80111c4:	2314      	movs	r3, #20
 80111c6:	9302      	str	r3, [sp, #8]
 80111c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80111ca:	9301      	str	r3, [sp, #4]
 80111cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80111ce:	9300      	str	r3, [sp, #0]
 80111d0:	4613      	mov	r3, r2
 80111d2:	2200      	movs	r2, #0
 80111d4:	4621      	mov	r1, r4
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f7ff fe92 	bl	8010f00 <tcp_output_alloc_header_common>
 80111dc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d00c      	beq.n	80111fe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80111e4:	7dfb      	ldrb	r3, [r7, #23]
 80111e6:	2200      	movs	r2, #0
 80111e8:	6939      	ldr	r1, [r7, #16]
 80111ea:	68f8      	ldr	r0, [r7, #12]
 80111ec:	f7ff ff38 	bl	8011060 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80111f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f2:	683a      	ldr	r2, [r7, #0]
 80111f4:	6939      	ldr	r1, [r7, #16]
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f7ff ff72 	bl	80110e0 <tcp_output_control_segment>
 80111fc:	e000      	b.n	8011200 <tcp_rst+0x8c>
    return;
 80111fe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011200:	371c      	adds	r7, #28
 8011202:	46bd      	mov	sp, r7
 8011204:	bd90      	pop	{r4, r7, pc}
 8011206:	bf00      	nop
 8011208:	08017f14 	.word	0x08017f14
 801120c:	08018698 	.word	0x08018698
 8011210:	08017f68 	.word	0x08017f68
 8011214:	080186b4 	.word	0x080186b4

08011218 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011218:	b590      	push	{r4, r7, lr}
 801121a:	b087      	sub	sp, #28
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011220:	2300      	movs	r3, #0
 8011222:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011224:	2300      	movs	r3, #0
 8011226:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d106      	bne.n	801123c <tcp_send_empty_ack+0x24>
 801122e:	4b28      	ldr	r3, [pc, #160]	; (80112d0 <tcp_send_empty_ack+0xb8>)
 8011230:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011234:	4927      	ldr	r1, [pc, #156]	; (80112d4 <tcp_send_empty_ack+0xbc>)
 8011236:	4828      	ldr	r0, [pc, #160]	; (80112d8 <tcp_send_empty_ack+0xc0>)
 8011238:	f003 fe54 	bl	8014ee4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801123c:	7dfb      	ldrb	r3, [r7, #23]
 801123e:	009b      	lsls	r3, r3, #2
 8011240:	b2db      	uxtb	r3, r3
 8011242:	f003 0304 	and.w	r3, r3, #4
 8011246:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011248:	7d7b      	ldrb	r3, [r7, #21]
 801124a:	b29c      	uxth	r4, r3
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011250:	4618      	mov	r0, r3
 8011252:	f7f8 fbbc 	bl	80099ce <lwip_htonl>
 8011256:	4603      	mov	r3, r0
 8011258:	2200      	movs	r2, #0
 801125a:	4621      	mov	r1, r4
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f7ff fec1 	bl	8010fe4 <tcp_output_alloc_header>
 8011262:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d109      	bne.n	801127e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	8b5b      	ldrh	r3, [r3, #26]
 801126e:	f043 0303 	orr.w	r3, r3, #3
 8011272:	b29a      	uxth	r2, r3
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011278:	f06f 0301 	mvn.w	r3, #1
 801127c:	e023      	b.n	80112c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801127e:	7dbb      	ldrb	r3, [r7, #22]
 8011280:	7dfa      	ldrb	r2, [r7, #23]
 8011282:	6939      	ldr	r1, [r7, #16]
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f7ff feeb 	bl	8011060 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801128a:	687a      	ldr	r2, [r7, #4]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	3304      	adds	r3, #4
 8011290:	6939      	ldr	r1, [r7, #16]
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f7ff ff24 	bl	80110e0 <tcp_output_control_segment>
 8011298:	4603      	mov	r3, r0
 801129a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801129c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d007      	beq.n	80112b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	8b5b      	ldrh	r3, [r3, #26]
 80112a8:	f043 0303 	orr.w	r3, r3, #3
 80112ac:	b29a      	uxth	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	835a      	strh	r2, [r3, #26]
 80112b2:	e006      	b.n	80112c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	8b5b      	ldrh	r3, [r3, #26]
 80112b8:	f023 0303 	bic.w	r3, r3, #3
 80112bc:	b29a      	uxth	r2, r3
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80112c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	371c      	adds	r7, #28
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd90      	pop	{r4, r7, pc}
 80112ce:	bf00      	nop
 80112d0:	08017f14 	.word	0x08017f14
 80112d4:	080186d0 	.word	0x080186d0
 80112d8:	08017f68 	.word	0x08017f68

080112dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80112dc:	b590      	push	{r4, r7, lr}
 80112de:	b087      	sub	sp, #28
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80112e4:	2300      	movs	r3, #0
 80112e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d106      	bne.n	80112fc <tcp_keepalive+0x20>
 80112ee:	4b18      	ldr	r3, [pc, #96]	; (8011350 <tcp_keepalive+0x74>)
 80112f0:	f640 0224 	movw	r2, #2084	; 0x824
 80112f4:	4917      	ldr	r1, [pc, #92]	; (8011354 <tcp_keepalive+0x78>)
 80112f6:	4818      	ldr	r0, [pc, #96]	; (8011358 <tcp_keepalive+0x7c>)
 80112f8:	f003 fdf4 	bl	8014ee4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80112fc:	7dfb      	ldrb	r3, [r7, #23]
 80112fe:	b29c      	uxth	r4, r3
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011304:	3b01      	subs	r3, #1
 8011306:	4618      	mov	r0, r3
 8011308:	f7f8 fb61 	bl	80099ce <lwip_htonl>
 801130c:	4603      	mov	r3, r0
 801130e:	2200      	movs	r2, #0
 8011310:	4621      	mov	r1, r4
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f7ff fe66 	bl	8010fe4 <tcp_output_alloc_header>
 8011318:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d102      	bne.n	8011326 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011320:	f04f 33ff 	mov.w	r3, #4294967295
 8011324:	e010      	b.n	8011348 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011326:	7dfb      	ldrb	r3, [r7, #23]
 8011328:	2200      	movs	r2, #0
 801132a:	6939      	ldr	r1, [r7, #16]
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f7ff fe97 	bl	8011060 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	3304      	adds	r3, #4
 8011338:	6939      	ldr	r1, [r7, #16]
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f7ff fed0 	bl	80110e0 <tcp_output_control_segment>
 8011340:	4603      	mov	r3, r0
 8011342:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011344:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011348:	4618      	mov	r0, r3
 801134a:	371c      	adds	r7, #28
 801134c:	46bd      	mov	sp, r7
 801134e:	bd90      	pop	{r4, r7, pc}
 8011350:	08017f14 	.word	0x08017f14
 8011354:	080186f0 	.word	0x080186f0
 8011358:	08017f68 	.word	0x08017f68

0801135c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801135c:	b590      	push	{r4, r7, lr}
 801135e:	b08b      	sub	sp, #44	; 0x2c
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011364:	2300      	movs	r3, #0
 8011366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d106      	bne.n	801137e <tcp_zero_window_probe+0x22>
 8011370:	4b4c      	ldr	r3, [pc, #304]	; (80114a4 <tcp_zero_window_probe+0x148>)
 8011372:	f640 024f 	movw	r2, #2127	; 0x84f
 8011376:	494c      	ldr	r1, [pc, #304]	; (80114a8 <tcp_zero_window_probe+0x14c>)
 8011378:	484c      	ldr	r0, [pc, #304]	; (80114ac <tcp_zero_window_probe+0x150>)
 801137a:	f003 fdb3 	bl	8014ee4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011382:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011384:	6a3b      	ldr	r3, [r7, #32]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d101      	bne.n	801138e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801138a:	2300      	movs	r3, #0
 801138c:	e086      	b.n	801149c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011394:	2bff      	cmp	r3, #255	; 0xff
 8011396:	d007      	beq.n	80113a8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801139e:	3301      	adds	r3, #1
 80113a0:	b2da      	uxtb	r2, r3
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80113a8:	6a3b      	ldr	r3, [r7, #32]
 80113aa:	68db      	ldr	r3, [r3, #12]
 80113ac:	899b      	ldrh	r3, [r3, #12]
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7f8 faf7 	bl	80099a4 <lwip_htons>
 80113b6:	4603      	mov	r3, r0
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	f003 0301 	and.w	r3, r3, #1
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d005      	beq.n	80113ce <tcp_zero_window_probe+0x72>
 80113c2:	6a3b      	ldr	r3, [r7, #32]
 80113c4:	891b      	ldrh	r3, [r3, #8]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d101      	bne.n	80113ce <tcp_zero_window_probe+0x72>
 80113ca:	2301      	movs	r3, #1
 80113cc:	e000      	b.n	80113d0 <tcp_zero_window_probe+0x74>
 80113ce:	2300      	movs	r3, #0
 80113d0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80113d2:	7ffb      	ldrb	r3, [r7, #31]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	bf0c      	ite	eq
 80113d8:	2301      	moveq	r3, #1
 80113da:	2300      	movne	r3, #0
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80113e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113e4:	b299      	uxth	r1, r3
 80113e6:	6a3b      	ldr	r3, [r7, #32]
 80113e8:	68db      	ldr	r3, [r3, #12]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	8bba      	ldrh	r2, [r7, #28]
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f7ff fdf8 	bl	8010fe4 <tcp_output_alloc_header>
 80113f4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80113f6:	69bb      	ldr	r3, [r7, #24]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d102      	bne.n	8011402 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80113fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011400:	e04c      	b.n	801149c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011402:	69bb      	ldr	r3, [r7, #24]
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011408:	7ffb      	ldrb	r3, [r7, #31]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d011      	beq.n	8011432 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	899b      	ldrh	r3, [r3, #12]
 8011412:	b29b      	uxth	r3, r3
 8011414:	b21b      	sxth	r3, r3
 8011416:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801141a:	b21c      	sxth	r4, r3
 801141c:	2011      	movs	r0, #17
 801141e:	f7f8 fac1 	bl	80099a4 <lwip_htons>
 8011422:	4603      	mov	r3, r0
 8011424:	b21b      	sxth	r3, r3
 8011426:	4323      	orrs	r3, r4
 8011428:	b21b      	sxth	r3, r3
 801142a:	b29a      	uxth	r2, r3
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	819a      	strh	r2, [r3, #12]
 8011430:	e010      	b.n	8011454 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	3314      	adds	r3, #20
 8011438:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801143a:	6a3b      	ldr	r3, [r7, #32]
 801143c:	6858      	ldr	r0, [r3, #4]
 801143e:	6a3b      	ldr	r3, [r7, #32]
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	891a      	ldrh	r2, [r3, #8]
 8011444:	6a3b      	ldr	r3, [r7, #32]
 8011446:	891b      	ldrh	r3, [r3, #8]
 8011448:	1ad3      	subs	r3, r2, r3
 801144a:	b29b      	uxth	r3, r3
 801144c:	2201      	movs	r2, #1
 801144e:	6939      	ldr	r1, [r7, #16]
 8011450:	f7f9 fff6 	bl	800b440 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011454:	6a3b      	ldr	r3, [r7, #32]
 8011456:	68db      	ldr	r3, [r3, #12]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	4618      	mov	r0, r3
 801145c:	f7f8 fab7 	bl	80099ce <lwip_htonl>
 8011460:	4603      	mov	r3, r0
 8011462:	3301      	adds	r3, #1
 8011464:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	1ad3      	subs	r3, r2, r3
 801146e:	2b00      	cmp	r3, #0
 8011470:	da02      	bge.n	8011478 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	68fa      	ldr	r2, [r7, #12]
 8011476:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801147c:	2200      	movs	r2, #0
 801147e:	69b9      	ldr	r1, [r7, #24]
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7ff fded 	bl	8011060 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	3304      	adds	r3, #4
 801148c:	69b9      	ldr	r1, [r7, #24]
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f7ff fe26 	bl	80110e0 <tcp_output_control_segment>
 8011494:	4603      	mov	r3, r0
 8011496:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011498:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801149c:	4618      	mov	r0, r3
 801149e:	372c      	adds	r7, #44	; 0x2c
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd90      	pop	{r4, r7, pc}
 80114a4:	08017f14 	.word	0x08017f14
 80114a8:	0801870c 	.word	0x0801870c
 80114ac:	08017f68 	.word	0x08017f68

080114b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80114b8:	f7fa f8b0 	bl	800b61c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80114bc:	4b0a      	ldr	r3, [pc, #40]	; (80114e8 <tcpip_tcp_timer+0x38>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d103      	bne.n	80114cc <tcpip_tcp_timer+0x1c>
 80114c4:	4b09      	ldr	r3, [pc, #36]	; (80114ec <tcpip_tcp_timer+0x3c>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d005      	beq.n	80114d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80114cc:	2200      	movs	r2, #0
 80114ce:	4908      	ldr	r1, [pc, #32]	; (80114f0 <tcpip_tcp_timer+0x40>)
 80114d0:	20fa      	movs	r0, #250	; 0xfa
 80114d2:	f000 f8f3 	bl	80116bc <sys_timeout>
 80114d6:	e003      	b.n	80114e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80114d8:	4b06      	ldr	r3, [pc, #24]	; (80114f4 <tcpip_tcp_timer+0x44>)
 80114da:	2200      	movs	r2, #0
 80114dc:	601a      	str	r2, [r3, #0]
  }
}
 80114de:	bf00      	nop
 80114e0:	bf00      	nop
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}
 80114e8:	2000d32c 	.word	0x2000d32c
 80114ec:	2000d33c 	.word	0x2000d33c
 80114f0:	080114b1 	.word	0x080114b1
 80114f4:	20006884 	.word	0x20006884

080114f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80114fc:	4b0a      	ldr	r3, [pc, #40]	; (8011528 <tcp_timer_needed+0x30>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d10f      	bne.n	8011524 <tcp_timer_needed+0x2c>
 8011504:	4b09      	ldr	r3, [pc, #36]	; (801152c <tcp_timer_needed+0x34>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d103      	bne.n	8011514 <tcp_timer_needed+0x1c>
 801150c:	4b08      	ldr	r3, [pc, #32]	; (8011530 <tcp_timer_needed+0x38>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d007      	beq.n	8011524 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011514:	4b04      	ldr	r3, [pc, #16]	; (8011528 <tcp_timer_needed+0x30>)
 8011516:	2201      	movs	r2, #1
 8011518:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801151a:	2200      	movs	r2, #0
 801151c:	4905      	ldr	r1, [pc, #20]	; (8011534 <tcp_timer_needed+0x3c>)
 801151e:	20fa      	movs	r0, #250	; 0xfa
 8011520:	f000 f8cc 	bl	80116bc <sys_timeout>
  }
}
 8011524:	bf00      	nop
 8011526:	bd80      	pop	{r7, pc}
 8011528:	20006884 	.word	0x20006884
 801152c:	2000d32c 	.word	0x2000d32c
 8011530:	2000d33c 	.word	0x2000d33c
 8011534:	080114b1 	.word	0x080114b1

08011538 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	60f8      	str	r0, [r7, #12]
 8011540:	60b9      	str	r1, [r7, #8]
 8011542:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011544:	200a      	movs	r0, #10
 8011546:	f7f8 fee3 	bl	800a310 <memp_malloc>
 801154a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d109      	bne.n	8011566 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d151      	bne.n	80115fc <sys_timeout_abs+0xc4>
 8011558:	4b2a      	ldr	r3, [pc, #168]	; (8011604 <sys_timeout_abs+0xcc>)
 801155a:	22be      	movs	r2, #190	; 0xbe
 801155c:	492a      	ldr	r1, [pc, #168]	; (8011608 <sys_timeout_abs+0xd0>)
 801155e:	482b      	ldr	r0, [pc, #172]	; (801160c <sys_timeout_abs+0xd4>)
 8011560:	f003 fcc0 	bl	8014ee4 <iprintf>
    return;
 8011564:	e04a      	b.n	80115fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	2200      	movs	r2, #0
 801156a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	68ba      	ldr	r2, [r7, #8]
 8011570:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	687a      	ldr	r2, [r7, #4]
 8011576:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	68fa      	ldr	r2, [r7, #12]
 801157c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801157e:	4b24      	ldr	r3, [pc, #144]	; (8011610 <sys_timeout_abs+0xd8>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d103      	bne.n	801158e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011586:	4a22      	ldr	r2, [pc, #136]	; (8011610 <sys_timeout_abs+0xd8>)
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	6013      	str	r3, [r2, #0]
    return;
 801158c:	e037      	b.n	80115fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	685a      	ldr	r2, [r3, #4]
 8011592:	4b1f      	ldr	r3, [pc, #124]	; (8011610 <sys_timeout_abs+0xd8>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	685b      	ldr	r3, [r3, #4]
 8011598:	1ad3      	subs	r3, r2, r3
 801159a:	0fdb      	lsrs	r3, r3, #31
 801159c:	f003 0301 	and.w	r3, r3, #1
 80115a0:	b2db      	uxtb	r3, r3
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d007      	beq.n	80115b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80115a6:	4b1a      	ldr	r3, [pc, #104]	; (8011610 <sys_timeout_abs+0xd8>)
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80115ae:	4a18      	ldr	r2, [pc, #96]	; (8011610 <sys_timeout_abs+0xd8>)
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	6013      	str	r3, [r2, #0]
 80115b4:	e023      	b.n	80115fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80115b6:	4b16      	ldr	r3, [pc, #88]	; (8011610 <sys_timeout_abs+0xd8>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	617b      	str	r3, [r7, #20]
 80115bc:	e01a      	b.n	80115f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d00b      	beq.n	80115de <sys_timeout_abs+0xa6>
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	685a      	ldr	r2, [r3, #4]
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	0fdb      	lsrs	r3, r3, #31
 80115d4:	f003 0301 	and.w	r3, r3, #1
 80115d8:	b2db      	uxtb	r3, r3
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d007      	beq.n	80115ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	681a      	ldr	r2, [r3, #0]
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	693a      	ldr	r2, [r7, #16]
 80115ea:	601a      	str	r2, [r3, #0]
        break;
 80115ec:	e007      	b.n	80115fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	617b      	str	r3, [r7, #20]
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d1e1      	bne.n	80115be <sys_timeout_abs+0x86>
 80115fa:	e000      	b.n	80115fe <sys_timeout_abs+0xc6>
    return;
 80115fc:	bf00      	nop
      }
    }
  }
}
 80115fe:	3718      	adds	r7, #24
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	08018730 	.word	0x08018730
 8011608:	08018764 	.word	0x08018764
 801160c:	080187a4 	.word	0x080187a4
 8011610:	2000687c 	.word	0x2000687c

08011614 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b086      	sub	sp, #24
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	4798      	blx	r3

  now = sys_now();
 8011626:	f7f3 f8c7 	bl	80047b8 <sys_now>
 801162a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	681a      	ldr	r2, [r3, #0]
 8011630:	4b0f      	ldr	r3, [pc, #60]	; (8011670 <lwip_cyclic_timer+0x5c>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	4413      	add	r3, r2
 8011636:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011638:	68fa      	ldr	r2, [r7, #12]
 801163a:	693b      	ldr	r3, [r7, #16]
 801163c:	1ad3      	subs	r3, r2, r3
 801163e:	0fdb      	lsrs	r3, r3, #31
 8011640:	f003 0301 	and.w	r3, r3, #1
 8011644:	b2db      	uxtb	r3, r3
 8011646:	2b00      	cmp	r3, #0
 8011648:	d009      	beq.n	801165e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	681a      	ldr	r2, [r3, #0]
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	4413      	add	r3, r2
 8011652:	687a      	ldr	r2, [r7, #4]
 8011654:	4907      	ldr	r1, [pc, #28]	; (8011674 <lwip_cyclic_timer+0x60>)
 8011656:	4618      	mov	r0, r3
 8011658:	f7ff ff6e 	bl	8011538 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801165c:	e004      	b.n	8011668 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801165e:	687a      	ldr	r2, [r7, #4]
 8011660:	4904      	ldr	r1, [pc, #16]	; (8011674 <lwip_cyclic_timer+0x60>)
 8011662:	68f8      	ldr	r0, [r7, #12]
 8011664:	f7ff ff68 	bl	8011538 <sys_timeout_abs>
}
 8011668:	bf00      	nop
 801166a:	3718      	adds	r7, #24
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}
 8011670:	20006880 	.word	0x20006880
 8011674:	08011615 	.word	0x08011615

08011678 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801167e:	2301      	movs	r3, #1
 8011680:	607b      	str	r3, [r7, #4]
 8011682:	e00e      	b.n	80116a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011684:	4a0b      	ldr	r2, [pc, #44]	; (80116b4 <sys_timeouts_init+0x3c>)
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	00db      	lsls	r3, r3, #3
 8011690:	4a08      	ldr	r2, [pc, #32]	; (80116b4 <sys_timeouts_init+0x3c>)
 8011692:	4413      	add	r3, r2
 8011694:	461a      	mov	r2, r3
 8011696:	4908      	ldr	r1, [pc, #32]	; (80116b8 <sys_timeouts_init+0x40>)
 8011698:	f000 f810 	bl	80116bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	3301      	adds	r3, #1
 80116a0:	607b      	str	r3, [r7, #4]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2b02      	cmp	r3, #2
 80116a6:	d9ed      	bls.n	8011684 <sys_timeouts_init+0xc>
  }
}
 80116a8:	bf00      	nop
 80116aa:	bf00      	nop
 80116ac:	3708      	adds	r7, #8
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
 80116b2:	bf00      	nop
 80116b4:	08019354 	.word	0x08019354
 80116b8:	08011615 	.word	0x08011615

080116bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b086      	sub	sp, #24
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	60f8      	str	r0, [r7, #12]
 80116c4:	60b9      	str	r1, [r7, #8]
 80116c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80116ce:	d306      	bcc.n	80116de <sys_timeout+0x22>
 80116d0:	4b0a      	ldr	r3, [pc, #40]	; (80116fc <sys_timeout+0x40>)
 80116d2:	f240 1229 	movw	r2, #297	; 0x129
 80116d6:	490a      	ldr	r1, [pc, #40]	; (8011700 <sys_timeout+0x44>)
 80116d8:	480a      	ldr	r0, [pc, #40]	; (8011704 <sys_timeout+0x48>)
 80116da:	f003 fc03 	bl	8014ee4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80116de:	f7f3 f86b 	bl	80047b8 <sys_now>
 80116e2:	4602      	mov	r2, r0
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	4413      	add	r3, r2
 80116e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80116ea:	687a      	ldr	r2, [r7, #4]
 80116ec:	68b9      	ldr	r1, [r7, #8]
 80116ee:	6978      	ldr	r0, [r7, #20]
 80116f0:	f7ff ff22 	bl	8011538 <sys_timeout_abs>
#endif
}
 80116f4:	bf00      	nop
 80116f6:	3718      	adds	r7, #24
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}
 80116fc:	08018730 	.word	0x08018730
 8011700:	080187cc 	.word	0x080187cc
 8011704:	080187a4 	.word	0x080187a4

08011708 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b084      	sub	sp, #16
 801170c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801170e:	f7f3 f853 	bl	80047b8 <sys_now>
 8011712:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011714:	4b17      	ldr	r3, [pc, #92]	; (8011774 <sys_check_timeouts+0x6c>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d022      	beq.n	8011766 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	1ad3      	subs	r3, r2, r3
 8011728:	0fdb      	lsrs	r3, r3, #31
 801172a:	f003 0301 	and.w	r3, r3, #1
 801172e:	b2db      	uxtb	r3, r3
 8011730:	2b00      	cmp	r3, #0
 8011732:	d11a      	bne.n	801176a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	4a0e      	ldr	r2, [pc, #56]	; (8011774 <sys_check_timeouts+0x6c>)
 801173a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	689b      	ldr	r3, [r3, #8]
 8011740:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	68db      	ldr	r3, [r3, #12]
 8011746:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	4a0a      	ldr	r2, [pc, #40]	; (8011778 <sys_check_timeouts+0x70>)
 801174e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011750:	68b9      	ldr	r1, [r7, #8]
 8011752:	200a      	movs	r0, #10
 8011754:	f7f8 fe2e 	bl	800a3b4 <memp_free>
    if (handler != NULL) {
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d0da      	beq.n	8011714 <sys_check_timeouts+0xc>
      handler(arg);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6838      	ldr	r0, [r7, #0]
 8011762:	4798      	blx	r3
  do {
 8011764:	e7d6      	b.n	8011714 <sys_check_timeouts+0xc>
      return;
 8011766:	bf00      	nop
 8011768:	e000      	b.n	801176c <sys_check_timeouts+0x64>
      return;
 801176a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801176c:	3710      	adds	r7, #16
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
 8011772:	bf00      	nop
 8011774:	2000687c 	.word	0x2000687c
 8011778:	20006880 	.word	0x20006880

0801177c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b082      	sub	sp, #8
 8011780:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011782:	4b16      	ldr	r3, [pc, #88]	; (80117dc <sys_timeouts_sleeptime+0x60>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d102      	bne.n	8011790 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801178a:	f04f 33ff 	mov.w	r3, #4294967295
 801178e:	e020      	b.n	80117d2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011790:	f7f3 f812 	bl	80047b8 <sys_now>
 8011794:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011796:	4b11      	ldr	r3, [pc, #68]	; (80117dc <sys_timeouts_sleeptime+0x60>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	685a      	ldr	r2, [r3, #4]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	1ad3      	subs	r3, r2, r3
 80117a0:	0fdb      	lsrs	r3, r3, #31
 80117a2:	f003 0301 	and.w	r3, r3, #1
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d001      	beq.n	80117b0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80117ac:	2300      	movs	r3, #0
 80117ae:	e010      	b.n	80117d2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80117b0:	4b0a      	ldr	r3, [pc, #40]	; (80117dc <sys_timeouts_sleeptime+0x60>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	685a      	ldr	r2, [r3, #4]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	1ad3      	subs	r3, r2, r3
 80117ba:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	da06      	bge.n	80117d0 <sys_timeouts_sleeptime+0x54>
 80117c2:	4b07      	ldr	r3, [pc, #28]	; (80117e0 <sys_timeouts_sleeptime+0x64>)
 80117c4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80117c8:	4906      	ldr	r1, [pc, #24]	; (80117e4 <sys_timeouts_sleeptime+0x68>)
 80117ca:	4807      	ldr	r0, [pc, #28]	; (80117e8 <sys_timeouts_sleeptime+0x6c>)
 80117cc:	f003 fb8a 	bl	8014ee4 <iprintf>
    return ret;
 80117d0:	683b      	ldr	r3, [r7, #0]
  }
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3708      	adds	r7, #8
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
 80117da:	bf00      	nop
 80117dc:	2000687c 	.word	0x2000687c
 80117e0:	08018730 	.word	0x08018730
 80117e4:	08018804 	.word	0x08018804
 80117e8:	080187a4 	.word	0x080187a4

080117ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80117f0:	f003 fb90 	bl	8014f14 <rand>
 80117f4:	4603      	mov	r3, r0
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011802:	b29a      	uxth	r2, r3
 8011804:	4b01      	ldr	r3, [pc, #4]	; (801180c <udp_init+0x20>)
 8011806:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011808:	bf00      	nop
 801180a:	bd80      	pop	{r7, pc}
 801180c:	2000001c 	.word	0x2000001c

08011810 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011816:	2300      	movs	r3, #0
 8011818:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801181a:	4b17      	ldr	r3, [pc, #92]	; (8011878 <udp_new_port+0x68>)
 801181c:	881b      	ldrh	r3, [r3, #0]
 801181e:	1c5a      	adds	r2, r3, #1
 8011820:	b291      	uxth	r1, r2
 8011822:	4a15      	ldr	r2, [pc, #84]	; (8011878 <udp_new_port+0x68>)
 8011824:	8011      	strh	r1, [r2, #0]
 8011826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801182a:	4293      	cmp	r3, r2
 801182c:	d103      	bne.n	8011836 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801182e:	4b12      	ldr	r3, [pc, #72]	; (8011878 <udp_new_port+0x68>)
 8011830:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011834:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011836:	4b11      	ldr	r3, [pc, #68]	; (801187c <udp_new_port+0x6c>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	603b      	str	r3, [r7, #0]
 801183c:	e011      	b.n	8011862 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	8a5a      	ldrh	r2, [r3, #18]
 8011842:	4b0d      	ldr	r3, [pc, #52]	; (8011878 <udp_new_port+0x68>)
 8011844:	881b      	ldrh	r3, [r3, #0]
 8011846:	429a      	cmp	r2, r3
 8011848:	d108      	bne.n	801185c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801184a:	88fb      	ldrh	r3, [r7, #6]
 801184c:	3301      	adds	r3, #1
 801184e:	80fb      	strh	r3, [r7, #6]
 8011850:	88fb      	ldrh	r3, [r7, #6]
 8011852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011856:	d3e0      	bcc.n	801181a <udp_new_port+0xa>
        return 0;
 8011858:	2300      	movs	r3, #0
 801185a:	e007      	b.n	801186c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	68db      	ldr	r3, [r3, #12]
 8011860:	603b      	str	r3, [r7, #0]
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d1ea      	bne.n	801183e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011868:	4b03      	ldr	r3, [pc, #12]	; (8011878 <udp_new_port+0x68>)
 801186a:	881b      	ldrh	r3, [r3, #0]
}
 801186c:	4618      	mov	r0, r3
 801186e:	370c      	adds	r7, #12
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr
 8011878:	2000001c 	.word	0x2000001c
 801187c:	2000d344 	.word	0x2000d344

08011880 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b084      	sub	sp, #16
 8011884:	af00      	add	r7, sp, #0
 8011886:	60f8      	str	r0, [r7, #12]
 8011888:	60b9      	str	r1, [r7, #8]
 801188a:	4613      	mov	r3, r2
 801188c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d105      	bne.n	80118a0 <udp_input_local_match+0x20>
 8011894:	4b27      	ldr	r3, [pc, #156]	; (8011934 <udp_input_local_match+0xb4>)
 8011896:	2287      	movs	r2, #135	; 0x87
 8011898:	4927      	ldr	r1, [pc, #156]	; (8011938 <udp_input_local_match+0xb8>)
 801189a:	4828      	ldr	r0, [pc, #160]	; (801193c <udp_input_local_match+0xbc>)
 801189c:	f003 fb22 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d105      	bne.n	80118b2 <udp_input_local_match+0x32>
 80118a6:	4b23      	ldr	r3, [pc, #140]	; (8011934 <udp_input_local_match+0xb4>)
 80118a8:	2288      	movs	r2, #136	; 0x88
 80118aa:	4925      	ldr	r1, [pc, #148]	; (8011940 <udp_input_local_match+0xc0>)
 80118ac:	4823      	ldr	r0, [pc, #140]	; (801193c <udp_input_local_match+0xbc>)
 80118ae:	f003 fb19 	bl	8014ee4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	7a1b      	ldrb	r3, [r3, #8]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d00b      	beq.n	80118d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	7a1a      	ldrb	r2, [r3, #8]
 80118be:	4b21      	ldr	r3, [pc, #132]	; (8011944 <udp_input_local_match+0xc4>)
 80118c0:	685b      	ldr	r3, [r3, #4]
 80118c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80118c6:	3301      	adds	r3, #1
 80118c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d001      	beq.n	80118d2 <udp_input_local_match+0x52>
    return 0;
 80118ce:	2300      	movs	r3, #0
 80118d0:	e02b      	b.n	801192a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80118d2:	79fb      	ldrb	r3, [r7, #7]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d018      	beq.n	801190a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d013      	beq.n	8011906 <udp_input_local_match+0x86>
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d00f      	beq.n	8011906 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80118e6:	4b17      	ldr	r3, [pc, #92]	; (8011944 <udp_input_local_match+0xc4>)
 80118e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80118ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118ee:	d00a      	beq.n	8011906 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	681a      	ldr	r2, [r3, #0]
 80118f4:	4b13      	ldr	r3, [pc, #76]	; (8011944 <udp_input_local_match+0xc4>)
 80118f6:	695b      	ldr	r3, [r3, #20]
 80118f8:	405a      	eors	r2, r3
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	3308      	adds	r3, #8
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011902:	2b00      	cmp	r3, #0
 8011904:	d110      	bne.n	8011928 <udp_input_local_match+0xa8>
          return 1;
 8011906:	2301      	movs	r3, #1
 8011908:	e00f      	b.n	801192a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d009      	beq.n	8011924 <udp_input_local_match+0xa4>
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d005      	beq.n	8011924 <udp_input_local_match+0xa4>
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	681a      	ldr	r2, [r3, #0]
 801191c:	4b09      	ldr	r3, [pc, #36]	; (8011944 <udp_input_local_match+0xc4>)
 801191e:	695b      	ldr	r3, [r3, #20]
 8011920:	429a      	cmp	r2, r3
 8011922:	d101      	bne.n	8011928 <udp_input_local_match+0xa8>
        return 1;
 8011924:	2301      	movs	r3, #1
 8011926:	e000      	b.n	801192a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011928:	2300      	movs	r3, #0
}
 801192a:	4618      	mov	r0, r3
 801192c:	3710      	adds	r7, #16
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop
 8011934:	08018818 	.word	0x08018818
 8011938:	08018848 	.word	0x08018848
 801193c:	0801886c 	.word	0x0801886c
 8011940:	08018894 	.word	0x08018894
 8011944:	20009c18 	.word	0x20009c18

08011948 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011948:	b590      	push	{r4, r7, lr}
 801194a:	b08d      	sub	sp, #52	; 0x34
 801194c:	af02      	add	r7, sp, #8
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011952:	2300      	movs	r3, #0
 8011954:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d105      	bne.n	8011968 <udp_input+0x20>
 801195c:	4b7c      	ldr	r3, [pc, #496]	; (8011b50 <udp_input+0x208>)
 801195e:	22cf      	movs	r2, #207	; 0xcf
 8011960:	497c      	ldr	r1, [pc, #496]	; (8011b54 <udp_input+0x20c>)
 8011962:	487d      	ldr	r0, [pc, #500]	; (8011b58 <udp_input+0x210>)
 8011964:	f003 fabe 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d105      	bne.n	801197a <udp_input+0x32>
 801196e:	4b78      	ldr	r3, [pc, #480]	; (8011b50 <udp_input+0x208>)
 8011970:	22d0      	movs	r2, #208	; 0xd0
 8011972:	497a      	ldr	r1, [pc, #488]	; (8011b5c <udp_input+0x214>)
 8011974:	4878      	ldr	r0, [pc, #480]	; (8011b58 <udp_input+0x210>)
 8011976:	f003 fab5 	bl	8014ee4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	895b      	ldrh	r3, [r3, #10]
 801197e:	2b07      	cmp	r3, #7
 8011980:	d803      	bhi.n	801198a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f7f9 fb56 	bl	800b034 <pbuf_free>
    goto end;
 8011988:	e0de      	b.n	8011b48 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011990:	4b73      	ldr	r3, [pc, #460]	; (8011b60 <udp_input+0x218>)
 8011992:	695b      	ldr	r3, [r3, #20]
 8011994:	4a72      	ldr	r2, [pc, #456]	; (8011b60 <udp_input+0x218>)
 8011996:	6812      	ldr	r2, [r2, #0]
 8011998:	4611      	mov	r1, r2
 801199a:	4618      	mov	r0, r3
 801199c:	f001 ff80 	bl	80138a0 <ip4_addr_isbroadcast_u32>
 80119a0:	4603      	mov	r3, r0
 80119a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	881b      	ldrh	r3, [r3, #0]
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7f7 fffa 	bl	80099a4 <lwip_htons>
 80119b0:	4603      	mov	r3, r0
 80119b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	885b      	ldrh	r3, [r3, #2]
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7f7 fff2 	bl	80099a4 <lwip_htons>
 80119c0:	4603      	mov	r3, r0
 80119c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80119c4:	2300      	movs	r3, #0
 80119c6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80119c8:	2300      	movs	r3, #0
 80119ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80119cc:	2300      	movs	r3, #0
 80119ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80119d0:	4b64      	ldr	r3, [pc, #400]	; (8011b64 <udp_input+0x21c>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	627b      	str	r3, [r7, #36]	; 0x24
 80119d6:	e054      	b.n	8011a82 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80119d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119da:	8a5b      	ldrh	r3, [r3, #18]
 80119dc:	89fa      	ldrh	r2, [r7, #14]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d14a      	bne.n	8011a78 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80119e2:	7cfb      	ldrb	r3, [r7, #19]
 80119e4:	461a      	mov	r2, r3
 80119e6:	6839      	ldr	r1, [r7, #0]
 80119e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119ea:	f7ff ff49 	bl	8011880 <udp_input_local_match>
 80119ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d041      	beq.n	8011a78 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80119f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f6:	7c1b      	ldrb	r3, [r3, #16]
 80119f8:	f003 0304 	and.w	r3, r3, #4
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d11d      	bne.n	8011a3c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d102      	bne.n	8011a0c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a08:	61fb      	str	r3, [r7, #28]
 8011a0a:	e017      	b.n	8011a3c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011a0c:	7cfb      	ldrb	r3, [r7, #19]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d014      	beq.n	8011a3c <udp_input+0xf4>
 8011a12:	4b53      	ldr	r3, [pc, #332]	; (8011b60 <udp_input+0x218>)
 8011a14:	695b      	ldr	r3, [r3, #20]
 8011a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a1a:	d10f      	bne.n	8011a3c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011a1c:	69fb      	ldr	r3, [r7, #28]
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	3304      	adds	r3, #4
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d008      	beq.n	8011a3c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a2c:	681a      	ldr	r2, [r3, #0]
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	3304      	adds	r3, #4
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d101      	bne.n	8011a3c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3e:	8a9b      	ldrh	r3, [r3, #20]
 8011a40:	8a3a      	ldrh	r2, [r7, #16]
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d118      	bne.n	8011a78 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a48:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d005      	beq.n	8011a5a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a50:	685a      	ldr	r2, [r3, #4]
 8011a52:	4b43      	ldr	r3, [pc, #268]	; (8011b60 <udp_input+0x218>)
 8011a54:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d10e      	bne.n	8011a78 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011a5a:	6a3b      	ldr	r3, [r7, #32]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d014      	beq.n	8011a8a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a62:	68da      	ldr	r2, [r3, #12]
 8011a64:	6a3b      	ldr	r3, [r7, #32]
 8011a66:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011a68:	4b3e      	ldr	r3, [pc, #248]	; (8011b64 <udp_input+0x21c>)
 8011a6a:	681a      	ldr	r2, [r3, #0]
 8011a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011a70:	4a3c      	ldr	r2, [pc, #240]	; (8011b64 <udp_input+0x21c>)
 8011a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a74:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011a76:	e008      	b.n	8011a8a <udp_input+0x142>
      }
    }

    prev = pcb;
 8011a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	627b      	str	r3, [r7, #36]	; 0x24
 8011a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d1a7      	bne.n	80119d8 <udp_input+0x90>
 8011a88:	e000      	b.n	8011a8c <udp_input+0x144>
        break;
 8011a8a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d101      	bne.n	8011a96 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011a92:	69fb      	ldr	r3, [r7, #28]
 8011a94:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d002      	beq.n	8011aa2 <udp_input+0x15a>
    for_us = 1;
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	76fb      	strb	r3, [r7, #27]
 8011aa0:	e00a      	b.n	8011ab8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	3304      	adds	r3, #4
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	4b2d      	ldr	r3, [pc, #180]	; (8011b60 <udp_input+0x218>)
 8011aaa:	695b      	ldr	r3, [r3, #20]
 8011aac:	429a      	cmp	r2, r3
 8011aae:	bf0c      	ite	eq
 8011ab0:	2301      	moveq	r3, #1
 8011ab2:	2300      	movne	r3, #0
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011ab8:	7efb      	ldrb	r3, [r7, #27]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d041      	beq.n	8011b42 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011abe:	2108      	movs	r1, #8
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f7f9 fa31 	bl	800af28 <pbuf_remove_header>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d00a      	beq.n	8011ae2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011acc:	4b20      	ldr	r3, [pc, #128]	; (8011b50 <udp_input+0x208>)
 8011ace:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011ad2:	4925      	ldr	r1, [pc, #148]	; (8011b68 <udp_input+0x220>)
 8011ad4:	4820      	ldr	r0, [pc, #128]	; (8011b58 <udp_input+0x210>)
 8011ad6:	f003 fa05 	bl	8014ee4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f7f9 faaa 	bl	800b034 <pbuf_free>
      goto end;
 8011ae0:	e032      	b.n	8011b48 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d012      	beq.n	8011b0e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aea:	699b      	ldr	r3, [r3, #24]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d00a      	beq.n	8011b06 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af2:	699c      	ldr	r4, [r3, #24]
 8011af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af6:	69d8      	ldr	r0, [r3, #28]
 8011af8:	8a3b      	ldrh	r3, [r7, #16]
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	4b1b      	ldr	r3, [pc, #108]	; (8011b6c <udp_input+0x224>)
 8011afe:	687a      	ldr	r2, [r7, #4]
 8011b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b02:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011b04:	e021      	b.n	8011b4a <udp_input+0x202>
        pbuf_free(p);
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	f7f9 fa94 	bl	800b034 <pbuf_free>
        goto end;
 8011b0c:	e01c      	b.n	8011b48 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011b0e:	7cfb      	ldrb	r3, [r7, #19]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d112      	bne.n	8011b3a <udp_input+0x1f2>
 8011b14:	4b12      	ldr	r3, [pc, #72]	; (8011b60 <udp_input+0x218>)
 8011b16:	695b      	ldr	r3, [r3, #20]
 8011b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b1c:	2be0      	cmp	r3, #224	; 0xe0
 8011b1e:	d00c      	beq.n	8011b3a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011b20:	4b0f      	ldr	r3, [pc, #60]	; (8011b60 <udp_input+0x218>)
 8011b22:	899b      	ldrh	r3, [r3, #12]
 8011b24:	3308      	adds	r3, #8
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	b21b      	sxth	r3, r3
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f7f9 fa6e 	bl	800b00e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011b32:	2103      	movs	r1, #3
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f001 fb93 	bl	8013260 <icmp_dest_unreach>
      pbuf_free(p);
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f7f9 fa7a 	bl	800b034 <pbuf_free>
  return;
 8011b40:	e003      	b.n	8011b4a <udp_input+0x202>
    pbuf_free(p);
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f7f9 fa76 	bl	800b034 <pbuf_free>
  return;
 8011b48:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011b4a:	372c      	adds	r7, #44	; 0x2c
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd90      	pop	{r4, r7, pc}
 8011b50:	08018818 	.word	0x08018818
 8011b54:	080188bc 	.word	0x080188bc
 8011b58:	0801886c 	.word	0x0801886c
 8011b5c:	080188d4 	.word	0x080188d4
 8011b60:	20009c18 	.word	0x20009c18
 8011b64:	2000d344 	.word	0x2000d344
 8011b68:	080188f0 	.word	0x080188f0
 8011b6c:	20009c28 	.word	0x20009c28

08011b70 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d109      	bne.n	8011b94 <udp_send+0x24>
 8011b80:	4b11      	ldr	r3, [pc, #68]	; (8011bc8 <udp_send+0x58>)
 8011b82:	f240 12d5 	movw	r2, #469	; 0x1d5
 8011b86:	4911      	ldr	r1, [pc, #68]	; (8011bcc <udp_send+0x5c>)
 8011b88:	4811      	ldr	r0, [pc, #68]	; (8011bd0 <udp_send+0x60>)
 8011b8a:	f003 f9ab 	bl	8014ee4 <iprintf>
 8011b8e:	f06f 030f 	mvn.w	r3, #15
 8011b92:	e015      	b.n	8011bc0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d109      	bne.n	8011bae <udp_send+0x3e>
 8011b9a:	4b0b      	ldr	r3, [pc, #44]	; (8011bc8 <udp_send+0x58>)
 8011b9c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8011ba0:	490c      	ldr	r1, [pc, #48]	; (8011bd4 <udp_send+0x64>)
 8011ba2:	480b      	ldr	r0, [pc, #44]	; (8011bd0 <udp_send+0x60>)
 8011ba4:	f003 f99e 	bl	8014ee4 <iprintf>
 8011ba8:	f06f 030f 	mvn.w	r3, #15
 8011bac:	e008      	b.n	8011bc0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	1d1a      	adds	r2, r3, #4
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	8a9b      	ldrh	r3, [r3, #20]
 8011bb6:	6839      	ldr	r1, [r7, #0]
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f000 f80d 	bl	8011bd8 <udp_sendto>
 8011bbe:	4603      	mov	r3, r0
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3708      	adds	r7, #8
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}
 8011bc8:	08018818 	.word	0x08018818
 8011bcc:	0801890c 	.word	0x0801890c
 8011bd0:	0801886c 	.word	0x0801886c
 8011bd4:	08018924 	.word	0x08018924

08011bd8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b088      	sub	sp, #32
 8011bdc:	af02      	add	r7, sp, #8
 8011bde:	60f8      	str	r0, [r7, #12]
 8011be0:	60b9      	str	r1, [r7, #8]
 8011be2:	607a      	str	r2, [r7, #4]
 8011be4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d109      	bne.n	8011c00 <udp_sendto+0x28>
 8011bec:	4b23      	ldr	r3, [pc, #140]	; (8011c7c <udp_sendto+0xa4>)
 8011bee:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011bf2:	4923      	ldr	r1, [pc, #140]	; (8011c80 <udp_sendto+0xa8>)
 8011bf4:	4823      	ldr	r0, [pc, #140]	; (8011c84 <udp_sendto+0xac>)
 8011bf6:	f003 f975 	bl	8014ee4 <iprintf>
 8011bfa:	f06f 030f 	mvn.w	r3, #15
 8011bfe:	e038      	b.n	8011c72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d109      	bne.n	8011c1a <udp_sendto+0x42>
 8011c06:	4b1d      	ldr	r3, [pc, #116]	; (8011c7c <udp_sendto+0xa4>)
 8011c08:	f240 2219 	movw	r2, #537	; 0x219
 8011c0c:	491e      	ldr	r1, [pc, #120]	; (8011c88 <udp_sendto+0xb0>)
 8011c0e:	481d      	ldr	r0, [pc, #116]	; (8011c84 <udp_sendto+0xac>)
 8011c10:	f003 f968 	bl	8014ee4 <iprintf>
 8011c14:	f06f 030f 	mvn.w	r3, #15
 8011c18:	e02b      	b.n	8011c72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d109      	bne.n	8011c34 <udp_sendto+0x5c>
 8011c20:	4b16      	ldr	r3, [pc, #88]	; (8011c7c <udp_sendto+0xa4>)
 8011c22:	f240 221a 	movw	r2, #538	; 0x21a
 8011c26:	4919      	ldr	r1, [pc, #100]	; (8011c8c <udp_sendto+0xb4>)
 8011c28:	4816      	ldr	r0, [pc, #88]	; (8011c84 <udp_sendto+0xac>)
 8011c2a:	f003 f95b 	bl	8014ee4 <iprintf>
 8011c2e:	f06f 030f 	mvn.w	r3, #15
 8011c32:	e01e      	b.n	8011c72 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	7a1b      	ldrb	r3, [r3, #8]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d006      	beq.n	8011c4a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	7a1b      	ldrb	r3, [r3, #8]
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7f8 fe69 	bl	800a918 <netif_get_by_index>
 8011c46:	6178      	str	r0, [r7, #20]
 8011c48:	e003      	b.n	8011c52 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f001 fb92 	bl	8013374 <ip4_route>
 8011c50:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d102      	bne.n	8011c5e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8011c58:	f06f 0303 	mvn.w	r3, #3
 8011c5c:	e009      	b.n	8011c72 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8011c5e:	887a      	ldrh	r2, [r7, #2]
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	9300      	str	r3, [sp, #0]
 8011c64:	4613      	mov	r3, r2
 8011c66:	687a      	ldr	r2, [r7, #4]
 8011c68:	68b9      	ldr	r1, [r7, #8]
 8011c6a:	68f8      	ldr	r0, [r7, #12]
 8011c6c:	f000 f810 	bl	8011c90 <udp_sendto_if>
 8011c70:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3718      	adds	r7, #24
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	08018818 	.word	0x08018818
 8011c80:	0801893c 	.word	0x0801893c
 8011c84:	0801886c 	.word	0x0801886c
 8011c88:	08018954 	.word	0x08018954
 8011c8c:	08018970 	.word	0x08018970

08011c90 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b088      	sub	sp, #32
 8011c94:	af02      	add	r7, sp, #8
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	607a      	str	r2, [r7, #4]
 8011c9c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d109      	bne.n	8011cb8 <udp_sendto_if+0x28>
 8011ca4:	4b2e      	ldr	r3, [pc, #184]	; (8011d60 <udp_sendto_if+0xd0>)
 8011ca6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011caa:	492e      	ldr	r1, [pc, #184]	; (8011d64 <udp_sendto_if+0xd4>)
 8011cac:	482e      	ldr	r0, [pc, #184]	; (8011d68 <udp_sendto_if+0xd8>)
 8011cae:	f003 f919 	bl	8014ee4 <iprintf>
 8011cb2:	f06f 030f 	mvn.w	r3, #15
 8011cb6:	e04f      	b.n	8011d58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d109      	bne.n	8011cd2 <udp_sendto_if+0x42>
 8011cbe:	4b28      	ldr	r3, [pc, #160]	; (8011d60 <udp_sendto_if+0xd0>)
 8011cc0:	f240 2281 	movw	r2, #641	; 0x281
 8011cc4:	4929      	ldr	r1, [pc, #164]	; (8011d6c <udp_sendto_if+0xdc>)
 8011cc6:	4828      	ldr	r0, [pc, #160]	; (8011d68 <udp_sendto_if+0xd8>)
 8011cc8:	f003 f90c 	bl	8014ee4 <iprintf>
 8011ccc:	f06f 030f 	mvn.w	r3, #15
 8011cd0:	e042      	b.n	8011d58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d109      	bne.n	8011cec <udp_sendto_if+0x5c>
 8011cd8:	4b21      	ldr	r3, [pc, #132]	; (8011d60 <udp_sendto_if+0xd0>)
 8011cda:	f240 2282 	movw	r2, #642	; 0x282
 8011cde:	4924      	ldr	r1, [pc, #144]	; (8011d70 <udp_sendto_if+0xe0>)
 8011ce0:	4821      	ldr	r0, [pc, #132]	; (8011d68 <udp_sendto_if+0xd8>)
 8011ce2:	f003 f8ff 	bl	8014ee4 <iprintf>
 8011ce6:	f06f 030f 	mvn.w	r3, #15
 8011cea:	e035      	b.n	8011d58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011cec:	6a3b      	ldr	r3, [r7, #32]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d109      	bne.n	8011d06 <udp_sendto_if+0x76>
 8011cf2:	4b1b      	ldr	r3, [pc, #108]	; (8011d60 <udp_sendto_if+0xd0>)
 8011cf4:	f240 2283 	movw	r2, #643	; 0x283
 8011cf8:	491e      	ldr	r1, [pc, #120]	; (8011d74 <udp_sendto_if+0xe4>)
 8011cfa:	481b      	ldr	r0, [pc, #108]	; (8011d68 <udp_sendto_if+0xd8>)
 8011cfc:	f003 f8f2 	bl	8014ee4 <iprintf>
 8011d00:	f06f 030f 	mvn.w	r3, #15
 8011d04:	e028      	b.n	8011d58 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d009      	beq.n	8011d20 <udp_sendto_if+0x90>
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d005      	beq.n	8011d20 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011d1c:	2be0      	cmp	r3, #224	; 0xe0
 8011d1e:	d103      	bne.n	8011d28 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011d20:	6a3b      	ldr	r3, [r7, #32]
 8011d22:	3304      	adds	r3, #4
 8011d24:	617b      	str	r3, [r7, #20]
 8011d26:	e00b      	b.n	8011d40 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	6a3b      	ldr	r3, [r7, #32]
 8011d2e:	3304      	adds	r3, #4
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d002      	beq.n	8011d3c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011d36:	f06f 0303 	mvn.w	r3, #3
 8011d3a:	e00d      	b.n	8011d58 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011d40:	887a      	ldrh	r2, [r7, #2]
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	9301      	str	r3, [sp, #4]
 8011d46:	6a3b      	ldr	r3, [r7, #32]
 8011d48:	9300      	str	r3, [sp, #0]
 8011d4a:	4613      	mov	r3, r2
 8011d4c:	687a      	ldr	r2, [r7, #4]
 8011d4e:	68b9      	ldr	r1, [r7, #8]
 8011d50:	68f8      	ldr	r0, [r7, #12]
 8011d52:	f000 f811 	bl	8011d78 <udp_sendto_if_src>
 8011d56:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011d58:	4618      	mov	r0, r3
 8011d5a:	3718      	adds	r7, #24
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}
 8011d60:	08018818 	.word	0x08018818
 8011d64:	0801898c 	.word	0x0801898c
 8011d68:	0801886c 	.word	0x0801886c
 8011d6c:	080189a8 	.word	0x080189a8
 8011d70:	080189c4 	.word	0x080189c4
 8011d74:	080189e4 	.word	0x080189e4

08011d78 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b08c      	sub	sp, #48	; 0x30
 8011d7c:	af04      	add	r7, sp, #16
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	607a      	str	r2, [r7, #4]
 8011d84:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d109      	bne.n	8011da0 <udp_sendto_if_src+0x28>
 8011d8c:	4b65      	ldr	r3, [pc, #404]	; (8011f24 <udp_sendto_if_src+0x1ac>)
 8011d8e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011d92:	4965      	ldr	r1, [pc, #404]	; (8011f28 <udp_sendto_if_src+0x1b0>)
 8011d94:	4865      	ldr	r0, [pc, #404]	; (8011f2c <udp_sendto_if_src+0x1b4>)
 8011d96:	f003 f8a5 	bl	8014ee4 <iprintf>
 8011d9a:	f06f 030f 	mvn.w	r3, #15
 8011d9e:	e0bc      	b.n	8011f1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d109      	bne.n	8011dba <udp_sendto_if_src+0x42>
 8011da6:	4b5f      	ldr	r3, [pc, #380]	; (8011f24 <udp_sendto_if_src+0x1ac>)
 8011da8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011dac:	4960      	ldr	r1, [pc, #384]	; (8011f30 <udp_sendto_if_src+0x1b8>)
 8011dae:	485f      	ldr	r0, [pc, #380]	; (8011f2c <udp_sendto_if_src+0x1b4>)
 8011db0:	f003 f898 	bl	8014ee4 <iprintf>
 8011db4:	f06f 030f 	mvn.w	r3, #15
 8011db8:	e0af      	b.n	8011f1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d109      	bne.n	8011dd4 <udp_sendto_if_src+0x5c>
 8011dc0:	4b58      	ldr	r3, [pc, #352]	; (8011f24 <udp_sendto_if_src+0x1ac>)
 8011dc2:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011dc6:	495b      	ldr	r1, [pc, #364]	; (8011f34 <udp_sendto_if_src+0x1bc>)
 8011dc8:	4858      	ldr	r0, [pc, #352]	; (8011f2c <udp_sendto_if_src+0x1b4>)
 8011dca:	f003 f88b 	bl	8014ee4 <iprintf>
 8011dce:	f06f 030f 	mvn.w	r3, #15
 8011dd2:	e0a2      	b.n	8011f1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d109      	bne.n	8011dee <udp_sendto_if_src+0x76>
 8011dda:	4b52      	ldr	r3, [pc, #328]	; (8011f24 <udp_sendto_if_src+0x1ac>)
 8011ddc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011de0:	4955      	ldr	r1, [pc, #340]	; (8011f38 <udp_sendto_if_src+0x1c0>)
 8011de2:	4852      	ldr	r0, [pc, #328]	; (8011f2c <udp_sendto_if_src+0x1b4>)
 8011de4:	f003 f87e 	bl	8014ee4 <iprintf>
 8011de8:	f06f 030f 	mvn.w	r3, #15
 8011dec:	e095      	b.n	8011f1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d109      	bne.n	8011e08 <udp_sendto_if_src+0x90>
 8011df4:	4b4b      	ldr	r3, [pc, #300]	; (8011f24 <udp_sendto_if_src+0x1ac>)
 8011df6:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011dfa:	4950      	ldr	r1, [pc, #320]	; (8011f3c <udp_sendto_if_src+0x1c4>)
 8011dfc:	484b      	ldr	r0, [pc, #300]	; (8011f2c <udp_sendto_if_src+0x1b4>)
 8011dfe:	f003 f871 	bl	8014ee4 <iprintf>
 8011e02:	f06f 030f 	mvn.w	r3, #15
 8011e06:	e088      	b.n	8011f1a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	8a5b      	ldrh	r3, [r3, #18]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d10f      	bne.n	8011e30 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011e10:	68f9      	ldr	r1, [r7, #12]
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	8a5b      	ldrh	r3, [r3, #18]
 8011e16:	461a      	mov	r2, r3
 8011e18:	68f8      	ldr	r0, [r7, #12]
 8011e1a:	f000 f893 	bl	8011f44 <udp_bind>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011e22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d002      	beq.n	8011e30 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011e2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011e2e:	e074      	b.n	8011f1a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	891b      	ldrh	r3, [r3, #8]
 8011e34:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011e38:	4293      	cmp	r3, r2
 8011e3a:	d902      	bls.n	8011e42 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e40:	e06b      	b.n	8011f1a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011e42:	2108      	movs	r1, #8
 8011e44:	68b8      	ldr	r0, [r7, #8]
 8011e46:	f7f9 f85f 	bl	800af08 <pbuf_add_header>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d015      	beq.n	8011e7c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011e50:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e54:	2108      	movs	r1, #8
 8011e56:	2022      	movs	r0, #34	; 0x22
 8011e58:	f7f8 fe08 	bl	800aa6c <pbuf_alloc>
 8011e5c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d102      	bne.n	8011e6a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011e64:	f04f 33ff 	mov.w	r3, #4294967295
 8011e68:	e057      	b.n	8011f1a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	891b      	ldrh	r3, [r3, #8]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d006      	beq.n	8011e80 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011e72:	68b9      	ldr	r1, [r7, #8]
 8011e74:	69f8      	ldr	r0, [r7, #28]
 8011e76:	f7f9 fa01 	bl	800b27c <pbuf_chain>
 8011e7a:	e001      	b.n	8011e80 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	895b      	ldrh	r3, [r3, #10]
 8011e84:	2b07      	cmp	r3, #7
 8011e86:	d806      	bhi.n	8011e96 <udp_sendto_if_src+0x11e>
 8011e88:	4b26      	ldr	r3, [pc, #152]	; (8011f24 <udp_sendto_if_src+0x1ac>)
 8011e8a:	f240 320d 	movw	r2, #781	; 0x30d
 8011e8e:	492c      	ldr	r1, [pc, #176]	; (8011f40 <udp_sendto_if_src+0x1c8>)
 8011e90:	4826      	ldr	r0, [pc, #152]	; (8011f2c <udp_sendto_if_src+0x1b4>)
 8011e92:	f003 f827 	bl	8014ee4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011e96:	69fb      	ldr	r3, [r7, #28]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	8a5b      	ldrh	r3, [r3, #18]
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7f7 fd7f 	bl	80099a4 <lwip_htons>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011eae:	887b      	ldrh	r3, [r7, #2]
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7f7 fd77 	bl	80099a4 <lwip_htons>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	461a      	mov	r2, r3
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011ebe:	697b      	ldr	r3, [r7, #20]
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	719a      	strb	r2, [r3, #6]
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011ec8:	69fb      	ldr	r3, [r7, #28]
 8011eca:	891b      	ldrh	r3, [r3, #8]
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7f7 fd69 	bl	80099a4 <lwip_htons>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011eda:	2311      	movs	r3, #17
 8011edc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	7adb      	ldrb	r3, [r3, #11]
 8011ee2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	7a9b      	ldrb	r3, [r3, #10]
 8011ee8:	7cb9      	ldrb	r1, [r7, #18]
 8011eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011eec:	9202      	str	r2, [sp, #8]
 8011eee:	7cfa      	ldrb	r2, [r7, #19]
 8011ef0:	9201      	str	r2, [sp, #4]
 8011ef2:	9300      	str	r3, [sp, #0]
 8011ef4:	460b      	mov	r3, r1
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011efa:	69f8      	ldr	r0, [r7, #28]
 8011efc:	f001 fc22 	bl	8013744 <ip4_output_if_src>
 8011f00:	4603      	mov	r3, r0
 8011f02:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011f04:	69fa      	ldr	r2, [r7, #28]
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d004      	beq.n	8011f16 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011f0c:	69f8      	ldr	r0, [r7, #28]
 8011f0e:	f7f9 f891 	bl	800b034 <pbuf_free>
    q = NULL;
 8011f12:	2300      	movs	r3, #0
 8011f14:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011f16:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3720      	adds	r7, #32
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	08018818 	.word	0x08018818
 8011f28:	08018a04 	.word	0x08018a04
 8011f2c:	0801886c 	.word	0x0801886c
 8011f30:	08018a24 	.word	0x08018a24
 8011f34:	08018a44 	.word	0x08018a44
 8011f38:	08018a68 	.word	0x08018a68
 8011f3c:	08018a8c 	.word	0x08018a8c
 8011f40:	08018ab0 	.word	0x08018ab0

08011f44 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b086      	sub	sp, #24
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	60f8      	str	r0, [r7, #12]
 8011f4c:	60b9      	str	r1, [r7, #8]
 8011f4e:	4613      	mov	r3, r2
 8011f50:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d101      	bne.n	8011f5c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011f58:	4b39      	ldr	r3, [pc, #228]	; (8012040 <udp_bind+0xfc>)
 8011f5a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d109      	bne.n	8011f76 <udp_bind+0x32>
 8011f62:	4b38      	ldr	r3, [pc, #224]	; (8012044 <udp_bind+0x100>)
 8011f64:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011f68:	4937      	ldr	r1, [pc, #220]	; (8012048 <udp_bind+0x104>)
 8011f6a:	4838      	ldr	r0, [pc, #224]	; (801204c <udp_bind+0x108>)
 8011f6c:	f002 ffba 	bl	8014ee4 <iprintf>
 8011f70:	f06f 030f 	mvn.w	r3, #15
 8011f74:	e060      	b.n	8012038 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011f76:	2300      	movs	r3, #0
 8011f78:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011f7a:	4b35      	ldr	r3, [pc, #212]	; (8012050 <udp_bind+0x10c>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	617b      	str	r3, [r7, #20]
 8011f80:	e009      	b.n	8011f96 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011f82:	68fa      	ldr	r2, [r7, #12]
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d102      	bne.n	8011f90 <udp_bind+0x4c>
      rebind = 1;
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	74fb      	strb	r3, [r7, #19]
      break;
 8011f8e:	e005      	b.n	8011f9c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	68db      	ldr	r3, [r3, #12]
 8011f94:	617b      	str	r3, [r7, #20]
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d1f2      	bne.n	8011f82 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011f9c:	88fb      	ldrh	r3, [r7, #6]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d109      	bne.n	8011fb6 <udp_bind+0x72>
    port = udp_new_port();
 8011fa2:	f7ff fc35 	bl	8011810 <udp_new_port>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011faa:	88fb      	ldrh	r3, [r7, #6]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d12c      	bne.n	801200a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011fb0:	f06f 0307 	mvn.w	r3, #7
 8011fb4:	e040      	b.n	8012038 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011fb6:	4b26      	ldr	r3, [pc, #152]	; (8012050 <udp_bind+0x10c>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	617b      	str	r3, [r7, #20]
 8011fbc:	e022      	b.n	8012004 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011fbe:	68fa      	ldr	r2, [r7, #12]
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	d01b      	beq.n	8011ffe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	8a5b      	ldrh	r3, [r3, #18]
 8011fca:	88fa      	ldrh	r2, [r7, #6]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d116      	bne.n	8011ffe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	681a      	ldr	r2, [r3, #0]
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d00d      	beq.n	8011ff8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d00a      	beq.n	8011ff8 <udp_bind+0xb4>
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d006      	beq.n	8011ff8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011fea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d003      	beq.n	8011ff8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d102      	bne.n	8011ffe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011ff8:	f06f 0307 	mvn.w	r3, #7
 8011ffc:	e01c      	b.n	8012038 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	68db      	ldr	r3, [r3, #12]
 8012002:	617b      	str	r3, [r7, #20]
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d1d9      	bne.n	8011fbe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d002      	beq.n	8012016 <udp_bind+0xd2>
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	e000      	b.n	8012018 <udp_bind+0xd4>
 8012016:	2300      	movs	r3, #0
 8012018:	68fa      	ldr	r2, [r7, #12]
 801201a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	88fa      	ldrh	r2, [r7, #6]
 8012020:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012022:	7cfb      	ldrb	r3, [r7, #19]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d106      	bne.n	8012036 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012028:	4b09      	ldr	r3, [pc, #36]	; (8012050 <udp_bind+0x10c>)
 801202a:	681a      	ldr	r2, [r3, #0]
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012030:	4a07      	ldr	r2, [pc, #28]	; (8012050 <udp_bind+0x10c>)
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012036:	2300      	movs	r3, #0
}
 8012038:	4618      	mov	r0, r3
 801203a:	3718      	adds	r7, #24
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	0801936c 	.word	0x0801936c
 8012044:	08018818 	.word	0x08018818
 8012048:	08018ae0 	.word	0x08018ae0
 801204c:	0801886c 	.word	0x0801886c
 8012050:	2000d344 	.word	0x2000d344

08012054 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b084      	sub	sp, #16
 8012058:	af00      	add	r7, sp, #0
 801205a:	60f8      	str	r0, [r7, #12]
 801205c:	60b9      	str	r1, [r7, #8]
 801205e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d107      	bne.n	8012076 <udp_recv+0x22>
 8012066:	4b08      	ldr	r3, [pc, #32]	; (8012088 <udp_recv+0x34>)
 8012068:	f240 428a 	movw	r2, #1162	; 0x48a
 801206c:	4907      	ldr	r1, [pc, #28]	; (801208c <udp_recv+0x38>)
 801206e:	4808      	ldr	r0, [pc, #32]	; (8012090 <udp_recv+0x3c>)
 8012070:	f002 ff38 	bl	8014ee4 <iprintf>
 8012074:	e005      	b.n	8012082 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	68ba      	ldr	r2, [r7, #8]
 801207a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	687a      	ldr	r2, [r7, #4]
 8012080:	61da      	str	r2, [r3, #28]
}
 8012082:	3710      	adds	r7, #16
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}
 8012088:	08018818 	.word	0x08018818
 801208c:	08018b4c 	.word	0x08018b4c
 8012090:	0801886c 	.word	0x0801886c

08012094 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d107      	bne.n	80120b2 <udp_remove+0x1e>
 80120a2:	4b19      	ldr	r3, [pc, #100]	; (8012108 <udp_remove+0x74>)
 80120a4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80120a8:	4918      	ldr	r1, [pc, #96]	; (801210c <udp_remove+0x78>)
 80120aa:	4819      	ldr	r0, [pc, #100]	; (8012110 <udp_remove+0x7c>)
 80120ac:	f002 ff1a 	bl	8014ee4 <iprintf>
 80120b0:	e026      	b.n	8012100 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80120b2:	4b18      	ldr	r3, [pc, #96]	; (8012114 <udp_remove+0x80>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d105      	bne.n	80120c8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80120bc:	4b15      	ldr	r3, [pc, #84]	; (8012114 <udp_remove+0x80>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	68db      	ldr	r3, [r3, #12]
 80120c2:	4a14      	ldr	r2, [pc, #80]	; (8012114 <udp_remove+0x80>)
 80120c4:	6013      	str	r3, [r2, #0]
 80120c6:	e017      	b.n	80120f8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80120c8:	4b12      	ldr	r3, [pc, #72]	; (8012114 <udp_remove+0x80>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	60fb      	str	r3, [r7, #12]
 80120ce:	e010      	b.n	80120f2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	68db      	ldr	r3, [r3, #12]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d009      	beq.n	80120ec <udp_remove+0x58>
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	68db      	ldr	r3, [r3, #12]
 80120dc:	687a      	ldr	r2, [r7, #4]
 80120de:	429a      	cmp	r2, r3
 80120e0:	d104      	bne.n	80120ec <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	68da      	ldr	r2, [r3, #12]
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	60da      	str	r2, [r3, #12]
        break;
 80120ea:	e005      	b.n	80120f8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	68db      	ldr	r3, [r3, #12]
 80120f0:	60fb      	str	r3, [r7, #12]
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d1eb      	bne.n	80120d0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80120f8:	6879      	ldr	r1, [r7, #4]
 80120fa:	2000      	movs	r0, #0
 80120fc:	f7f8 f95a 	bl	800a3b4 <memp_free>
}
 8012100:	3710      	adds	r7, #16
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	08018818 	.word	0x08018818
 801210c:	08018b64 	.word	0x08018b64
 8012110:	0801886c 	.word	0x0801886c
 8012114:	2000d344 	.word	0x2000d344

08012118 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801211e:	2000      	movs	r0, #0
 8012120:	f7f8 f8f6 	bl	800a310 <memp_malloc>
 8012124:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d007      	beq.n	801213c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801212c:	2220      	movs	r2, #32
 801212e:	2100      	movs	r1, #0
 8012130:	6878      	ldr	r0, [r7, #4]
 8012132:	f002 fe25 	bl	8014d80 <memset>
    pcb->ttl = UDP_TTL;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	22ff      	movs	r2, #255	; 0xff
 801213a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801213c:	687b      	ldr	r3, [r7, #4]
}
 801213e:	4618      	mov	r0, r3
 8012140:	3708      	adds	r7, #8
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}

08012146 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012146:	b580      	push	{r7, lr}
 8012148:	b084      	sub	sp, #16
 801214a:	af00      	add	r7, sp, #0
 801214c:	4603      	mov	r3, r0
 801214e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012150:	f7ff ffe2 	bl	8012118 <udp_new>
 8012154:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012156:	68fb      	ldr	r3, [r7, #12]
}
 8012158:	4618      	mov	r0, r3
 801215a:	3710      	adds	r7, #16
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012160:	b480      	push	{r7}
 8012162:	b085      	sub	sp, #20
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d01e      	beq.n	80121ae <udp_netif_ip_addr_changed+0x4e>
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d01a      	beq.n	80121ae <udp_netif_ip_addr_changed+0x4e>
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d017      	beq.n	80121ae <udp_netif_ip_addr_changed+0x4e>
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d013      	beq.n	80121ae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012186:	4b0d      	ldr	r3, [pc, #52]	; (80121bc <udp_netif_ip_addr_changed+0x5c>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	60fb      	str	r3, [r7, #12]
 801218c:	e00c      	b.n	80121a8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	429a      	cmp	r2, r3
 8012198:	d103      	bne.n	80121a2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	681a      	ldr	r2, [r3, #0]
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	60fb      	str	r3, [r7, #12]
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d1ef      	bne.n	801218e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80121ae:	bf00      	nop
 80121b0:	3714      	adds	r7, #20
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr
 80121ba:	bf00      	nop
 80121bc:	2000d344 	.word	0x2000d344

080121c0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80121c8:	4915      	ldr	r1, [pc, #84]	; (8012220 <etharp_free_entry+0x60>)
 80121ca:	687a      	ldr	r2, [r7, #4]
 80121cc:	4613      	mov	r3, r2
 80121ce:	005b      	lsls	r3, r3, #1
 80121d0:	4413      	add	r3, r2
 80121d2:	00db      	lsls	r3, r3, #3
 80121d4:	440b      	add	r3, r1
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d013      	beq.n	8012204 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80121dc:	4910      	ldr	r1, [pc, #64]	; (8012220 <etharp_free_entry+0x60>)
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	4613      	mov	r3, r2
 80121e2:	005b      	lsls	r3, r3, #1
 80121e4:	4413      	add	r3, r2
 80121e6:	00db      	lsls	r3, r3, #3
 80121e8:	440b      	add	r3, r1
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	4618      	mov	r0, r3
 80121ee:	f7f8 ff21 	bl	800b034 <pbuf_free>
    arp_table[i].q = NULL;
 80121f2:	490b      	ldr	r1, [pc, #44]	; (8012220 <etharp_free_entry+0x60>)
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	4613      	mov	r3, r2
 80121f8:	005b      	lsls	r3, r3, #1
 80121fa:	4413      	add	r3, r2
 80121fc:	00db      	lsls	r3, r3, #3
 80121fe:	440b      	add	r3, r1
 8012200:	2200      	movs	r2, #0
 8012202:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012204:	4906      	ldr	r1, [pc, #24]	; (8012220 <etharp_free_entry+0x60>)
 8012206:	687a      	ldr	r2, [r7, #4]
 8012208:	4613      	mov	r3, r2
 801220a:	005b      	lsls	r3, r3, #1
 801220c:	4413      	add	r3, r2
 801220e:	00db      	lsls	r3, r3, #3
 8012210:	440b      	add	r3, r1
 8012212:	3314      	adds	r3, #20
 8012214:	2200      	movs	r2, #0
 8012216:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012218:	bf00      	nop
 801221a:	3708      	adds	r7, #8
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	20006888 	.word	0x20006888

08012224 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b082      	sub	sp, #8
 8012228:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801222a:	2300      	movs	r3, #0
 801222c:	607b      	str	r3, [r7, #4]
 801222e:	e096      	b.n	801235e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012230:	494f      	ldr	r1, [pc, #316]	; (8012370 <etharp_tmr+0x14c>)
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	4613      	mov	r3, r2
 8012236:	005b      	lsls	r3, r3, #1
 8012238:	4413      	add	r3, r2
 801223a:	00db      	lsls	r3, r3, #3
 801223c:	440b      	add	r3, r1
 801223e:	3314      	adds	r3, #20
 8012240:	781b      	ldrb	r3, [r3, #0]
 8012242:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012244:	78fb      	ldrb	r3, [r7, #3]
 8012246:	2b00      	cmp	r3, #0
 8012248:	f000 8086 	beq.w	8012358 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801224c:	4948      	ldr	r1, [pc, #288]	; (8012370 <etharp_tmr+0x14c>)
 801224e:	687a      	ldr	r2, [r7, #4]
 8012250:	4613      	mov	r3, r2
 8012252:	005b      	lsls	r3, r3, #1
 8012254:	4413      	add	r3, r2
 8012256:	00db      	lsls	r3, r3, #3
 8012258:	440b      	add	r3, r1
 801225a:	3312      	adds	r3, #18
 801225c:	881b      	ldrh	r3, [r3, #0]
 801225e:	3301      	adds	r3, #1
 8012260:	b298      	uxth	r0, r3
 8012262:	4943      	ldr	r1, [pc, #268]	; (8012370 <etharp_tmr+0x14c>)
 8012264:	687a      	ldr	r2, [r7, #4]
 8012266:	4613      	mov	r3, r2
 8012268:	005b      	lsls	r3, r3, #1
 801226a:	4413      	add	r3, r2
 801226c:	00db      	lsls	r3, r3, #3
 801226e:	440b      	add	r3, r1
 8012270:	3312      	adds	r3, #18
 8012272:	4602      	mov	r2, r0
 8012274:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012276:	493e      	ldr	r1, [pc, #248]	; (8012370 <etharp_tmr+0x14c>)
 8012278:	687a      	ldr	r2, [r7, #4]
 801227a:	4613      	mov	r3, r2
 801227c:	005b      	lsls	r3, r3, #1
 801227e:	4413      	add	r3, r2
 8012280:	00db      	lsls	r3, r3, #3
 8012282:	440b      	add	r3, r1
 8012284:	3312      	adds	r3, #18
 8012286:	881b      	ldrh	r3, [r3, #0]
 8012288:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801228c:	d215      	bcs.n	80122ba <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801228e:	4938      	ldr	r1, [pc, #224]	; (8012370 <etharp_tmr+0x14c>)
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	4613      	mov	r3, r2
 8012294:	005b      	lsls	r3, r3, #1
 8012296:	4413      	add	r3, r2
 8012298:	00db      	lsls	r3, r3, #3
 801229a:	440b      	add	r3, r1
 801229c:	3314      	adds	r3, #20
 801229e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80122a0:	2b01      	cmp	r3, #1
 80122a2:	d10e      	bne.n	80122c2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80122a4:	4932      	ldr	r1, [pc, #200]	; (8012370 <etharp_tmr+0x14c>)
 80122a6:	687a      	ldr	r2, [r7, #4]
 80122a8:	4613      	mov	r3, r2
 80122aa:	005b      	lsls	r3, r3, #1
 80122ac:	4413      	add	r3, r2
 80122ae:	00db      	lsls	r3, r3, #3
 80122b0:	440b      	add	r3, r1
 80122b2:	3312      	adds	r3, #18
 80122b4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80122b6:	2b04      	cmp	r3, #4
 80122b8:	d903      	bls.n	80122c2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f7ff ff80 	bl	80121c0 <etharp_free_entry>
 80122c0:	e04a      	b.n	8012358 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80122c2:	492b      	ldr	r1, [pc, #172]	; (8012370 <etharp_tmr+0x14c>)
 80122c4:	687a      	ldr	r2, [r7, #4]
 80122c6:	4613      	mov	r3, r2
 80122c8:	005b      	lsls	r3, r3, #1
 80122ca:	4413      	add	r3, r2
 80122cc:	00db      	lsls	r3, r3, #3
 80122ce:	440b      	add	r3, r1
 80122d0:	3314      	adds	r3, #20
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	2b03      	cmp	r3, #3
 80122d6:	d10a      	bne.n	80122ee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80122d8:	4925      	ldr	r1, [pc, #148]	; (8012370 <etharp_tmr+0x14c>)
 80122da:	687a      	ldr	r2, [r7, #4]
 80122dc:	4613      	mov	r3, r2
 80122de:	005b      	lsls	r3, r3, #1
 80122e0:	4413      	add	r3, r2
 80122e2:	00db      	lsls	r3, r3, #3
 80122e4:	440b      	add	r3, r1
 80122e6:	3314      	adds	r3, #20
 80122e8:	2204      	movs	r2, #4
 80122ea:	701a      	strb	r2, [r3, #0]
 80122ec:	e034      	b.n	8012358 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80122ee:	4920      	ldr	r1, [pc, #128]	; (8012370 <etharp_tmr+0x14c>)
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	4613      	mov	r3, r2
 80122f4:	005b      	lsls	r3, r3, #1
 80122f6:	4413      	add	r3, r2
 80122f8:	00db      	lsls	r3, r3, #3
 80122fa:	440b      	add	r3, r1
 80122fc:	3314      	adds	r3, #20
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	2b04      	cmp	r3, #4
 8012302:	d10a      	bne.n	801231a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012304:	491a      	ldr	r1, [pc, #104]	; (8012370 <etharp_tmr+0x14c>)
 8012306:	687a      	ldr	r2, [r7, #4]
 8012308:	4613      	mov	r3, r2
 801230a:	005b      	lsls	r3, r3, #1
 801230c:	4413      	add	r3, r2
 801230e:	00db      	lsls	r3, r3, #3
 8012310:	440b      	add	r3, r1
 8012312:	3314      	adds	r3, #20
 8012314:	2202      	movs	r2, #2
 8012316:	701a      	strb	r2, [r3, #0]
 8012318:	e01e      	b.n	8012358 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801231a:	4915      	ldr	r1, [pc, #84]	; (8012370 <etharp_tmr+0x14c>)
 801231c:	687a      	ldr	r2, [r7, #4]
 801231e:	4613      	mov	r3, r2
 8012320:	005b      	lsls	r3, r3, #1
 8012322:	4413      	add	r3, r2
 8012324:	00db      	lsls	r3, r3, #3
 8012326:	440b      	add	r3, r1
 8012328:	3314      	adds	r3, #20
 801232a:	781b      	ldrb	r3, [r3, #0]
 801232c:	2b01      	cmp	r3, #1
 801232e:	d113      	bne.n	8012358 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012330:	490f      	ldr	r1, [pc, #60]	; (8012370 <etharp_tmr+0x14c>)
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	4613      	mov	r3, r2
 8012336:	005b      	lsls	r3, r3, #1
 8012338:	4413      	add	r3, r2
 801233a:	00db      	lsls	r3, r3, #3
 801233c:	440b      	add	r3, r1
 801233e:	3308      	adds	r3, #8
 8012340:	6818      	ldr	r0, [r3, #0]
 8012342:	687a      	ldr	r2, [r7, #4]
 8012344:	4613      	mov	r3, r2
 8012346:	005b      	lsls	r3, r3, #1
 8012348:	4413      	add	r3, r2
 801234a:	00db      	lsls	r3, r3, #3
 801234c:	4a08      	ldr	r2, [pc, #32]	; (8012370 <etharp_tmr+0x14c>)
 801234e:	4413      	add	r3, r2
 8012350:	3304      	adds	r3, #4
 8012352:	4619      	mov	r1, r3
 8012354:	f000 fe6e 	bl	8013034 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	3301      	adds	r3, #1
 801235c:	607b      	str	r3, [r7, #4]
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2b09      	cmp	r3, #9
 8012362:	f77f af65 	ble.w	8012230 <etharp_tmr+0xc>
      }
    }
  }
}
 8012366:	bf00      	nop
 8012368:	bf00      	nop
 801236a:	3708      	adds	r7, #8
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}
 8012370:	20006888 	.word	0x20006888

08012374 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b08a      	sub	sp, #40	; 0x28
 8012378:	af00      	add	r7, sp, #0
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	460b      	mov	r3, r1
 801237e:	607a      	str	r2, [r7, #4]
 8012380:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012382:	230a      	movs	r3, #10
 8012384:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012386:	230a      	movs	r3, #10
 8012388:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801238a:	230a      	movs	r3, #10
 801238c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801238e:	2300      	movs	r3, #0
 8012390:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012392:	230a      	movs	r3, #10
 8012394:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012396:	2300      	movs	r3, #0
 8012398:	83bb      	strh	r3, [r7, #28]
 801239a:	2300      	movs	r3, #0
 801239c:	837b      	strh	r3, [r7, #26]
 801239e:	2300      	movs	r3, #0
 80123a0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80123a2:	2300      	movs	r3, #0
 80123a4:	843b      	strh	r3, [r7, #32]
 80123a6:	e0ae      	b.n	8012506 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80123a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123ac:	49a6      	ldr	r1, [pc, #664]	; (8012648 <etharp_find_entry+0x2d4>)
 80123ae:	4613      	mov	r3, r2
 80123b0:	005b      	lsls	r3, r3, #1
 80123b2:	4413      	add	r3, r2
 80123b4:	00db      	lsls	r3, r3, #3
 80123b6:	440b      	add	r3, r1
 80123b8:	3314      	adds	r3, #20
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80123be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80123c2:	2b0a      	cmp	r3, #10
 80123c4:	d105      	bne.n	80123d2 <etharp_find_entry+0x5e>
 80123c6:	7dfb      	ldrb	r3, [r7, #23]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d102      	bne.n	80123d2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80123cc:	8c3b      	ldrh	r3, [r7, #32]
 80123ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80123d0:	e095      	b.n	80124fe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80123d2:	7dfb      	ldrb	r3, [r7, #23]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	f000 8092 	beq.w	80124fe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80123da:	7dfb      	ldrb	r3, [r7, #23]
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d009      	beq.n	80123f4 <etharp_find_entry+0x80>
 80123e0:	7dfb      	ldrb	r3, [r7, #23]
 80123e2:	2b01      	cmp	r3, #1
 80123e4:	d806      	bhi.n	80123f4 <etharp_find_entry+0x80>
 80123e6:	4b99      	ldr	r3, [pc, #612]	; (801264c <etharp_find_entry+0x2d8>)
 80123e8:	f240 1223 	movw	r2, #291	; 0x123
 80123ec:	4998      	ldr	r1, [pc, #608]	; (8012650 <etharp_find_entry+0x2dc>)
 80123ee:	4899      	ldr	r0, [pc, #612]	; (8012654 <etharp_find_entry+0x2e0>)
 80123f0:	f002 fd78 	bl	8014ee4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d020      	beq.n	801243c <etharp_find_entry+0xc8>
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	6819      	ldr	r1, [r3, #0]
 80123fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012402:	4891      	ldr	r0, [pc, #580]	; (8012648 <etharp_find_entry+0x2d4>)
 8012404:	4613      	mov	r3, r2
 8012406:	005b      	lsls	r3, r3, #1
 8012408:	4413      	add	r3, r2
 801240a:	00db      	lsls	r3, r3, #3
 801240c:	4403      	add	r3, r0
 801240e:	3304      	adds	r3, #4
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	4299      	cmp	r1, r3
 8012414:	d112      	bne.n	801243c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d00c      	beq.n	8012436 <etharp_find_entry+0xc2>
 801241c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012420:	4989      	ldr	r1, [pc, #548]	; (8012648 <etharp_find_entry+0x2d4>)
 8012422:	4613      	mov	r3, r2
 8012424:	005b      	lsls	r3, r3, #1
 8012426:	4413      	add	r3, r2
 8012428:	00db      	lsls	r3, r3, #3
 801242a:	440b      	add	r3, r1
 801242c:	3308      	adds	r3, #8
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	687a      	ldr	r2, [r7, #4]
 8012432:	429a      	cmp	r2, r3
 8012434:	d102      	bne.n	801243c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012436:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801243a:	e100      	b.n	801263e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801243c:	7dfb      	ldrb	r3, [r7, #23]
 801243e:	2b01      	cmp	r3, #1
 8012440:	d140      	bne.n	80124c4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012442:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012446:	4980      	ldr	r1, [pc, #512]	; (8012648 <etharp_find_entry+0x2d4>)
 8012448:	4613      	mov	r3, r2
 801244a:	005b      	lsls	r3, r3, #1
 801244c:	4413      	add	r3, r2
 801244e:	00db      	lsls	r3, r3, #3
 8012450:	440b      	add	r3, r1
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d01a      	beq.n	801248e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012458:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801245c:	497a      	ldr	r1, [pc, #488]	; (8012648 <etharp_find_entry+0x2d4>)
 801245e:	4613      	mov	r3, r2
 8012460:	005b      	lsls	r3, r3, #1
 8012462:	4413      	add	r3, r2
 8012464:	00db      	lsls	r3, r3, #3
 8012466:	440b      	add	r3, r1
 8012468:	3312      	adds	r3, #18
 801246a:	881b      	ldrh	r3, [r3, #0]
 801246c:	8bba      	ldrh	r2, [r7, #28]
 801246e:	429a      	cmp	r2, r3
 8012470:	d845      	bhi.n	80124fe <etharp_find_entry+0x18a>
            old_queue = i;
 8012472:	8c3b      	ldrh	r3, [r7, #32]
 8012474:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012476:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801247a:	4973      	ldr	r1, [pc, #460]	; (8012648 <etharp_find_entry+0x2d4>)
 801247c:	4613      	mov	r3, r2
 801247e:	005b      	lsls	r3, r3, #1
 8012480:	4413      	add	r3, r2
 8012482:	00db      	lsls	r3, r3, #3
 8012484:	440b      	add	r3, r1
 8012486:	3312      	adds	r3, #18
 8012488:	881b      	ldrh	r3, [r3, #0]
 801248a:	83bb      	strh	r3, [r7, #28]
 801248c:	e037      	b.n	80124fe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801248e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012492:	496d      	ldr	r1, [pc, #436]	; (8012648 <etharp_find_entry+0x2d4>)
 8012494:	4613      	mov	r3, r2
 8012496:	005b      	lsls	r3, r3, #1
 8012498:	4413      	add	r3, r2
 801249a:	00db      	lsls	r3, r3, #3
 801249c:	440b      	add	r3, r1
 801249e:	3312      	adds	r3, #18
 80124a0:	881b      	ldrh	r3, [r3, #0]
 80124a2:	8b7a      	ldrh	r2, [r7, #26]
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d82a      	bhi.n	80124fe <etharp_find_entry+0x18a>
            old_pending = i;
 80124a8:	8c3b      	ldrh	r3, [r7, #32]
 80124aa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80124ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124b0:	4965      	ldr	r1, [pc, #404]	; (8012648 <etharp_find_entry+0x2d4>)
 80124b2:	4613      	mov	r3, r2
 80124b4:	005b      	lsls	r3, r3, #1
 80124b6:	4413      	add	r3, r2
 80124b8:	00db      	lsls	r3, r3, #3
 80124ba:	440b      	add	r3, r1
 80124bc:	3312      	adds	r3, #18
 80124be:	881b      	ldrh	r3, [r3, #0]
 80124c0:	837b      	strh	r3, [r7, #26]
 80124c2:	e01c      	b.n	80124fe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80124c4:	7dfb      	ldrb	r3, [r7, #23]
 80124c6:	2b01      	cmp	r3, #1
 80124c8:	d919      	bls.n	80124fe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80124ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124ce:	495e      	ldr	r1, [pc, #376]	; (8012648 <etharp_find_entry+0x2d4>)
 80124d0:	4613      	mov	r3, r2
 80124d2:	005b      	lsls	r3, r3, #1
 80124d4:	4413      	add	r3, r2
 80124d6:	00db      	lsls	r3, r3, #3
 80124d8:	440b      	add	r3, r1
 80124da:	3312      	adds	r3, #18
 80124dc:	881b      	ldrh	r3, [r3, #0]
 80124de:	8b3a      	ldrh	r2, [r7, #24]
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d80c      	bhi.n	80124fe <etharp_find_entry+0x18a>
            old_stable = i;
 80124e4:	8c3b      	ldrh	r3, [r7, #32]
 80124e6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80124e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124ec:	4956      	ldr	r1, [pc, #344]	; (8012648 <etharp_find_entry+0x2d4>)
 80124ee:	4613      	mov	r3, r2
 80124f0:	005b      	lsls	r3, r3, #1
 80124f2:	4413      	add	r3, r2
 80124f4:	00db      	lsls	r3, r3, #3
 80124f6:	440b      	add	r3, r1
 80124f8:	3312      	adds	r3, #18
 80124fa:	881b      	ldrh	r3, [r3, #0]
 80124fc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80124fe:	8c3b      	ldrh	r3, [r7, #32]
 8012500:	3301      	adds	r3, #1
 8012502:	b29b      	uxth	r3, r3
 8012504:	843b      	strh	r3, [r7, #32]
 8012506:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801250a:	2b09      	cmp	r3, #9
 801250c:	f77f af4c 	ble.w	80123a8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012510:	7afb      	ldrb	r3, [r7, #11]
 8012512:	f003 0302 	and.w	r3, r3, #2
 8012516:	2b00      	cmp	r3, #0
 8012518:	d108      	bne.n	801252c <etharp_find_entry+0x1b8>
 801251a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801251e:	2b0a      	cmp	r3, #10
 8012520:	d107      	bne.n	8012532 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012522:	7afb      	ldrb	r3, [r7, #11]
 8012524:	f003 0301 	and.w	r3, r3, #1
 8012528:	2b00      	cmp	r3, #0
 801252a:	d102      	bne.n	8012532 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801252c:	f04f 33ff 	mov.w	r3, #4294967295
 8012530:	e085      	b.n	801263e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012532:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012536:	2b09      	cmp	r3, #9
 8012538:	dc02      	bgt.n	8012540 <etharp_find_entry+0x1cc>
    i = empty;
 801253a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801253c:	843b      	strh	r3, [r7, #32]
 801253e:	e039      	b.n	80125b4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012540:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012544:	2b09      	cmp	r3, #9
 8012546:	dc14      	bgt.n	8012572 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801254a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801254c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012550:	493d      	ldr	r1, [pc, #244]	; (8012648 <etharp_find_entry+0x2d4>)
 8012552:	4613      	mov	r3, r2
 8012554:	005b      	lsls	r3, r3, #1
 8012556:	4413      	add	r3, r2
 8012558:	00db      	lsls	r3, r3, #3
 801255a:	440b      	add	r3, r1
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d018      	beq.n	8012594 <etharp_find_entry+0x220>
 8012562:	4b3a      	ldr	r3, [pc, #232]	; (801264c <etharp_find_entry+0x2d8>)
 8012564:	f240 126d 	movw	r2, #365	; 0x16d
 8012568:	493b      	ldr	r1, [pc, #236]	; (8012658 <etharp_find_entry+0x2e4>)
 801256a:	483a      	ldr	r0, [pc, #232]	; (8012654 <etharp_find_entry+0x2e0>)
 801256c:	f002 fcba 	bl	8014ee4 <iprintf>
 8012570:	e010      	b.n	8012594 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012572:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012576:	2b09      	cmp	r3, #9
 8012578:	dc02      	bgt.n	8012580 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801257a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801257c:	843b      	strh	r3, [r7, #32]
 801257e:	e009      	b.n	8012594 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012580:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012584:	2b09      	cmp	r3, #9
 8012586:	dc02      	bgt.n	801258e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012588:	8bfb      	ldrh	r3, [r7, #30]
 801258a:	843b      	strh	r3, [r7, #32]
 801258c:	e002      	b.n	8012594 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801258e:	f04f 33ff 	mov.w	r3, #4294967295
 8012592:	e054      	b.n	801263e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012594:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012598:	2b09      	cmp	r3, #9
 801259a:	dd06      	ble.n	80125aa <etharp_find_entry+0x236>
 801259c:	4b2b      	ldr	r3, [pc, #172]	; (801264c <etharp_find_entry+0x2d8>)
 801259e:	f240 127f 	movw	r2, #383	; 0x17f
 80125a2:	492e      	ldr	r1, [pc, #184]	; (801265c <etharp_find_entry+0x2e8>)
 80125a4:	482b      	ldr	r0, [pc, #172]	; (8012654 <etharp_find_entry+0x2e0>)
 80125a6:	f002 fc9d 	bl	8014ee4 <iprintf>
    etharp_free_entry(i);
 80125aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7ff fe06 	bl	80121c0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80125b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80125b8:	2b09      	cmp	r3, #9
 80125ba:	dd06      	ble.n	80125ca <etharp_find_entry+0x256>
 80125bc:	4b23      	ldr	r3, [pc, #140]	; (801264c <etharp_find_entry+0x2d8>)
 80125be:	f240 1283 	movw	r2, #387	; 0x183
 80125c2:	4926      	ldr	r1, [pc, #152]	; (801265c <etharp_find_entry+0x2e8>)
 80125c4:	4823      	ldr	r0, [pc, #140]	; (8012654 <etharp_find_entry+0x2e0>)
 80125c6:	f002 fc8d 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80125ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80125ce:	491e      	ldr	r1, [pc, #120]	; (8012648 <etharp_find_entry+0x2d4>)
 80125d0:	4613      	mov	r3, r2
 80125d2:	005b      	lsls	r3, r3, #1
 80125d4:	4413      	add	r3, r2
 80125d6:	00db      	lsls	r3, r3, #3
 80125d8:	440b      	add	r3, r1
 80125da:	3314      	adds	r3, #20
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d006      	beq.n	80125f0 <etharp_find_entry+0x27c>
 80125e2:	4b1a      	ldr	r3, [pc, #104]	; (801264c <etharp_find_entry+0x2d8>)
 80125e4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80125e8:	491d      	ldr	r1, [pc, #116]	; (8012660 <etharp_find_entry+0x2ec>)
 80125ea:	481a      	ldr	r0, [pc, #104]	; (8012654 <etharp_find_entry+0x2e0>)
 80125ec:	f002 fc7a 	bl	8014ee4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d00b      	beq.n	801260e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80125f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	6819      	ldr	r1, [r3, #0]
 80125fe:	4812      	ldr	r0, [pc, #72]	; (8012648 <etharp_find_entry+0x2d4>)
 8012600:	4613      	mov	r3, r2
 8012602:	005b      	lsls	r3, r3, #1
 8012604:	4413      	add	r3, r2
 8012606:	00db      	lsls	r3, r3, #3
 8012608:	4403      	add	r3, r0
 801260a:	3304      	adds	r3, #4
 801260c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801260e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012612:	490d      	ldr	r1, [pc, #52]	; (8012648 <etharp_find_entry+0x2d4>)
 8012614:	4613      	mov	r3, r2
 8012616:	005b      	lsls	r3, r3, #1
 8012618:	4413      	add	r3, r2
 801261a:	00db      	lsls	r3, r3, #3
 801261c:	440b      	add	r3, r1
 801261e:	3312      	adds	r3, #18
 8012620:	2200      	movs	r2, #0
 8012622:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012624:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012628:	4907      	ldr	r1, [pc, #28]	; (8012648 <etharp_find_entry+0x2d4>)
 801262a:	4613      	mov	r3, r2
 801262c:	005b      	lsls	r3, r3, #1
 801262e:	4413      	add	r3, r2
 8012630:	00db      	lsls	r3, r3, #3
 8012632:	440b      	add	r3, r1
 8012634:	3308      	adds	r3, #8
 8012636:	687a      	ldr	r2, [r7, #4]
 8012638:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801263a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801263e:	4618      	mov	r0, r3
 8012640:	3728      	adds	r7, #40	; 0x28
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	20006888 	.word	0x20006888
 801264c:	08018b7c 	.word	0x08018b7c
 8012650:	08018bb4 	.word	0x08018bb4
 8012654:	08018bf4 	.word	0x08018bf4
 8012658:	08018c1c 	.word	0x08018c1c
 801265c:	08018c34 	.word	0x08018c34
 8012660:	08018c48 	.word	0x08018c48

08012664 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b088      	sub	sp, #32
 8012668:	af02      	add	r7, sp, #8
 801266a:	60f8      	str	r0, [r7, #12]
 801266c:	60b9      	str	r1, [r7, #8]
 801266e:	607a      	str	r2, [r7, #4]
 8012670:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012678:	2b06      	cmp	r3, #6
 801267a:	d006      	beq.n	801268a <etharp_update_arp_entry+0x26>
 801267c:	4b48      	ldr	r3, [pc, #288]	; (80127a0 <etharp_update_arp_entry+0x13c>)
 801267e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012682:	4948      	ldr	r1, [pc, #288]	; (80127a4 <etharp_update_arp_entry+0x140>)
 8012684:	4848      	ldr	r0, [pc, #288]	; (80127a8 <etharp_update_arp_entry+0x144>)
 8012686:	f002 fc2d 	bl	8014ee4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d012      	beq.n	80126b6 <etharp_update_arp_entry+0x52>
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d00e      	beq.n	80126b6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	68f9      	ldr	r1, [r7, #12]
 801269e:	4618      	mov	r0, r3
 80126a0:	f001 f8fe 	bl	80138a0 <ip4_addr_isbroadcast_u32>
 80126a4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d105      	bne.n	80126b6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80126b2:	2be0      	cmp	r3, #224	; 0xe0
 80126b4:	d102      	bne.n	80126bc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80126b6:	f06f 030f 	mvn.w	r3, #15
 80126ba:	e06c      	b.n	8012796 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80126bc:	78fb      	ldrb	r3, [r7, #3]
 80126be:	68fa      	ldr	r2, [r7, #12]
 80126c0:	4619      	mov	r1, r3
 80126c2:	68b8      	ldr	r0, [r7, #8]
 80126c4:	f7ff fe56 	bl	8012374 <etharp_find_entry>
 80126c8:	4603      	mov	r3, r0
 80126ca:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80126cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	da02      	bge.n	80126da <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80126d4:	8afb      	ldrh	r3, [r7, #22]
 80126d6:	b25b      	sxtb	r3, r3
 80126d8:	e05d      	b.n	8012796 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80126da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80126de:	4933      	ldr	r1, [pc, #204]	; (80127ac <etharp_update_arp_entry+0x148>)
 80126e0:	4613      	mov	r3, r2
 80126e2:	005b      	lsls	r3, r3, #1
 80126e4:	4413      	add	r3, r2
 80126e6:	00db      	lsls	r3, r3, #3
 80126e8:	440b      	add	r3, r1
 80126ea:	3314      	adds	r3, #20
 80126ec:	2202      	movs	r2, #2
 80126ee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80126f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80126f4:	492d      	ldr	r1, [pc, #180]	; (80127ac <etharp_update_arp_entry+0x148>)
 80126f6:	4613      	mov	r3, r2
 80126f8:	005b      	lsls	r3, r3, #1
 80126fa:	4413      	add	r3, r2
 80126fc:	00db      	lsls	r3, r3, #3
 80126fe:	440b      	add	r3, r1
 8012700:	3308      	adds	r3, #8
 8012702:	68fa      	ldr	r2, [r7, #12]
 8012704:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012706:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801270a:	4613      	mov	r3, r2
 801270c:	005b      	lsls	r3, r3, #1
 801270e:	4413      	add	r3, r2
 8012710:	00db      	lsls	r3, r3, #3
 8012712:	3308      	adds	r3, #8
 8012714:	4a25      	ldr	r2, [pc, #148]	; (80127ac <etharp_update_arp_entry+0x148>)
 8012716:	4413      	add	r3, r2
 8012718:	3304      	adds	r3, #4
 801271a:	2206      	movs	r2, #6
 801271c:	6879      	ldr	r1, [r7, #4]
 801271e:	4618      	mov	r0, r3
 8012720:	f002 fb20 	bl	8014d64 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012724:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012728:	4920      	ldr	r1, [pc, #128]	; (80127ac <etharp_update_arp_entry+0x148>)
 801272a:	4613      	mov	r3, r2
 801272c:	005b      	lsls	r3, r3, #1
 801272e:	4413      	add	r3, r2
 8012730:	00db      	lsls	r3, r3, #3
 8012732:	440b      	add	r3, r1
 8012734:	3312      	adds	r3, #18
 8012736:	2200      	movs	r2, #0
 8012738:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801273a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801273e:	491b      	ldr	r1, [pc, #108]	; (80127ac <etharp_update_arp_entry+0x148>)
 8012740:	4613      	mov	r3, r2
 8012742:	005b      	lsls	r3, r3, #1
 8012744:	4413      	add	r3, r2
 8012746:	00db      	lsls	r3, r3, #3
 8012748:	440b      	add	r3, r1
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d021      	beq.n	8012794 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012750:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012754:	4915      	ldr	r1, [pc, #84]	; (80127ac <etharp_update_arp_entry+0x148>)
 8012756:	4613      	mov	r3, r2
 8012758:	005b      	lsls	r3, r3, #1
 801275a:	4413      	add	r3, r2
 801275c:	00db      	lsls	r3, r3, #3
 801275e:	440b      	add	r3, r1
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012764:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012768:	4910      	ldr	r1, [pc, #64]	; (80127ac <etharp_update_arp_entry+0x148>)
 801276a:	4613      	mov	r3, r2
 801276c:	005b      	lsls	r3, r3, #1
 801276e:	4413      	add	r3, r2
 8012770:	00db      	lsls	r3, r3, #3
 8012772:	440b      	add	r3, r1
 8012774:	2200      	movs	r2, #0
 8012776:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801277e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012782:	9300      	str	r3, [sp, #0]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6939      	ldr	r1, [r7, #16]
 8012788:	68f8      	ldr	r0, [r7, #12]
 801278a:	f001 ff91 	bl	80146b0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801278e:	6938      	ldr	r0, [r7, #16]
 8012790:	f7f8 fc50 	bl	800b034 <pbuf_free>
  }
  return ERR_OK;
 8012794:	2300      	movs	r3, #0
}
 8012796:	4618      	mov	r0, r3
 8012798:	3718      	adds	r7, #24
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	08018b7c 	.word	0x08018b7c
 80127a4:	08018c74 	.word	0x08018c74
 80127a8:	08018bf4 	.word	0x08018bf4
 80127ac:	20006888 	.word	0x20006888

080127b0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b084      	sub	sp, #16
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80127b8:	2300      	movs	r3, #0
 80127ba:	60fb      	str	r3, [r7, #12]
 80127bc:	e01e      	b.n	80127fc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80127be:	4913      	ldr	r1, [pc, #76]	; (801280c <etharp_cleanup_netif+0x5c>)
 80127c0:	68fa      	ldr	r2, [r7, #12]
 80127c2:	4613      	mov	r3, r2
 80127c4:	005b      	lsls	r3, r3, #1
 80127c6:	4413      	add	r3, r2
 80127c8:	00db      	lsls	r3, r3, #3
 80127ca:	440b      	add	r3, r1
 80127cc:	3314      	adds	r3, #20
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80127d2:	7afb      	ldrb	r3, [r7, #11]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d00e      	beq.n	80127f6 <etharp_cleanup_netif+0x46>
 80127d8:	490c      	ldr	r1, [pc, #48]	; (801280c <etharp_cleanup_netif+0x5c>)
 80127da:	68fa      	ldr	r2, [r7, #12]
 80127dc:	4613      	mov	r3, r2
 80127de:	005b      	lsls	r3, r3, #1
 80127e0:	4413      	add	r3, r2
 80127e2:	00db      	lsls	r3, r3, #3
 80127e4:	440b      	add	r3, r1
 80127e6:	3308      	adds	r3, #8
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	687a      	ldr	r2, [r7, #4]
 80127ec:	429a      	cmp	r2, r3
 80127ee:	d102      	bne.n	80127f6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80127f0:	68f8      	ldr	r0, [r7, #12]
 80127f2:	f7ff fce5 	bl	80121c0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	3301      	adds	r3, #1
 80127fa:	60fb      	str	r3, [r7, #12]
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	2b09      	cmp	r3, #9
 8012800:	dddd      	ble.n	80127be <etharp_cleanup_netif+0xe>
    }
  }
}
 8012802:	bf00      	nop
 8012804:	bf00      	nop
 8012806:	3710      	adds	r7, #16
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}
 801280c:	20006888 	.word	0x20006888

08012810 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012810:	b5b0      	push	{r4, r5, r7, lr}
 8012812:	b08a      	sub	sp, #40	; 0x28
 8012814:	af04      	add	r7, sp, #16
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d107      	bne.n	8012830 <etharp_input+0x20>
 8012820:	4b3d      	ldr	r3, [pc, #244]	; (8012918 <etharp_input+0x108>)
 8012822:	f240 228a 	movw	r2, #650	; 0x28a
 8012826:	493d      	ldr	r1, [pc, #244]	; (801291c <etharp_input+0x10c>)
 8012828:	483d      	ldr	r0, [pc, #244]	; (8012920 <etharp_input+0x110>)
 801282a:	f002 fb5b 	bl	8014ee4 <iprintf>
 801282e:	e06f      	b.n	8012910 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012836:	693b      	ldr	r3, [r7, #16]
 8012838:	881b      	ldrh	r3, [r3, #0]
 801283a:	b29b      	uxth	r3, r3
 801283c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012840:	d10c      	bne.n	801285c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012846:	2b06      	cmp	r3, #6
 8012848:	d108      	bne.n	801285c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801284e:	2b04      	cmp	r3, #4
 8012850:	d104      	bne.n	801285c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	885b      	ldrh	r3, [r3, #2]
 8012856:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012858:	2b08      	cmp	r3, #8
 801285a:	d003      	beq.n	8012864 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f7f8 fbe9 	bl	800b034 <pbuf_free>
    return;
 8012862:	e055      	b.n	8012910 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	330e      	adds	r3, #14
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	3318      	adds	r3, #24
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	3304      	adds	r3, #4
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d102      	bne.n	8012884 <etharp_input+0x74>
    for_us = 0;
 801287e:	2300      	movs	r3, #0
 8012880:	75fb      	strb	r3, [r7, #23]
 8012882:	e009      	b.n	8012898 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012884:	68ba      	ldr	r2, [r7, #8]
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	3304      	adds	r3, #4
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	429a      	cmp	r2, r3
 801288e:	bf0c      	ite	eq
 8012890:	2301      	moveq	r3, #1
 8012892:	2300      	movne	r3, #0
 8012894:	b2db      	uxtb	r3, r3
 8012896:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	f103 0208 	add.w	r2, r3, #8
 801289e:	7dfb      	ldrb	r3, [r7, #23]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d001      	beq.n	80128a8 <etharp_input+0x98>
 80128a4:	2301      	movs	r3, #1
 80128a6:	e000      	b.n	80128aa <etharp_input+0x9a>
 80128a8:	2302      	movs	r3, #2
 80128aa:	f107 010c 	add.w	r1, r7, #12
 80128ae:	6838      	ldr	r0, [r7, #0]
 80128b0:	f7ff fed8 	bl	8012664 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	88db      	ldrh	r3, [r3, #6]
 80128b8:	b29b      	uxth	r3, r3
 80128ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80128be:	d003      	beq.n	80128c8 <etharp_input+0xb8>
 80128c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128c4:	d01e      	beq.n	8012904 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80128c6:	e020      	b.n	801290a <etharp_input+0xfa>
      if (for_us) {
 80128c8:	7dfb      	ldrb	r3, [r7, #23]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d01c      	beq.n	8012908 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80128e0:	683b      	ldr	r3, [r7, #0]
 80128e2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80128e4:	693a      	ldr	r2, [r7, #16]
 80128e6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80128e8:	2102      	movs	r1, #2
 80128ea:	9103      	str	r1, [sp, #12]
 80128ec:	f107 010c 	add.w	r1, r7, #12
 80128f0:	9102      	str	r1, [sp, #8]
 80128f2:	9201      	str	r2, [sp, #4]
 80128f4:	9300      	str	r3, [sp, #0]
 80128f6:	462b      	mov	r3, r5
 80128f8:	4622      	mov	r2, r4
 80128fa:	4601      	mov	r1, r0
 80128fc:	6838      	ldr	r0, [r7, #0]
 80128fe:	f000 faeb 	bl	8012ed8 <etharp_raw>
      break;
 8012902:	e001      	b.n	8012908 <etharp_input+0xf8>
      break;
 8012904:	bf00      	nop
 8012906:	e000      	b.n	801290a <etharp_input+0xfa>
      break;
 8012908:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f7f8 fb92 	bl	800b034 <pbuf_free>
}
 8012910:	3718      	adds	r7, #24
 8012912:	46bd      	mov	sp, r7
 8012914:	bdb0      	pop	{r4, r5, r7, pc}
 8012916:	bf00      	nop
 8012918:	08018b7c 	.word	0x08018b7c
 801291c:	08018ccc 	.word	0x08018ccc
 8012920:	08018bf4 	.word	0x08018bf4

08012924 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b086      	sub	sp, #24
 8012928:	af02      	add	r7, sp, #8
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	4613      	mov	r3, r2
 8012930:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012932:	79fa      	ldrb	r2, [r7, #7]
 8012934:	4944      	ldr	r1, [pc, #272]	; (8012a48 <etharp_output_to_arp_index+0x124>)
 8012936:	4613      	mov	r3, r2
 8012938:	005b      	lsls	r3, r3, #1
 801293a:	4413      	add	r3, r2
 801293c:	00db      	lsls	r3, r3, #3
 801293e:	440b      	add	r3, r1
 8012940:	3314      	adds	r3, #20
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	2b01      	cmp	r3, #1
 8012946:	d806      	bhi.n	8012956 <etharp_output_to_arp_index+0x32>
 8012948:	4b40      	ldr	r3, [pc, #256]	; (8012a4c <etharp_output_to_arp_index+0x128>)
 801294a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801294e:	4940      	ldr	r1, [pc, #256]	; (8012a50 <etharp_output_to_arp_index+0x12c>)
 8012950:	4840      	ldr	r0, [pc, #256]	; (8012a54 <etharp_output_to_arp_index+0x130>)
 8012952:	f002 fac7 	bl	8014ee4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012956:	79fa      	ldrb	r2, [r7, #7]
 8012958:	493b      	ldr	r1, [pc, #236]	; (8012a48 <etharp_output_to_arp_index+0x124>)
 801295a:	4613      	mov	r3, r2
 801295c:	005b      	lsls	r3, r3, #1
 801295e:	4413      	add	r3, r2
 8012960:	00db      	lsls	r3, r3, #3
 8012962:	440b      	add	r3, r1
 8012964:	3314      	adds	r3, #20
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	2b02      	cmp	r3, #2
 801296a:	d153      	bne.n	8012a14 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801296c:	79fa      	ldrb	r2, [r7, #7]
 801296e:	4936      	ldr	r1, [pc, #216]	; (8012a48 <etharp_output_to_arp_index+0x124>)
 8012970:	4613      	mov	r3, r2
 8012972:	005b      	lsls	r3, r3, #1
 8012974:	4413      	add	r3, r2
 8012976:	00db      	lsls	r3, r3, #3
 8012978:	440b      	add	r3, r1
 801297a:	3312      	adds	r3, #18
 801297c:	881b      	ldrh	r3, [r3, #0]
 801297e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012982:	d919      	bls.n	80129b8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012984:	79fa      	ldrb	r2, [r7, #7]
 8012986:	4613      	mov	r3, r2
 8012988:	005b      	lsls	r3, r3, #1
 801298a:	4413      	add	r3, r2
 801298c:	00db      	lsls	r3, r3, #3
 801298e:	4a2e      	ldr	r2, [pc, #184]	; (8012a48 <etharp_output_to_arp_index+0x124>)
 8012990:	4413      	add	r3, r2
 8012992:	3304      	adds	r3, #4
 8012994:	4619      	mov	r1, r3
 8012996:	68f8      	ldr	r0, [r7, #12]
 8012998:	f000 fb4c 	bl	8013034 <etharp_request>
 801299c:	4603      	mov	r3, r0
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d138      	bne.n	8012a14 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80129a2:	79fa      	ldrb	r2, [r7, #7]
 80129a4:	4928      	ldr	r1, [pc, #160]	; (8012a48 <etharp_output_to_arp_index+0x124>)
 80129a6:	4613      	mov	r3, r2
 80129a8:	005b      	lsls	r3, r3, #1
 80129aa:	4413      	add	r3, r2
 80129ac:	00db      	lsls	r3, r3, #3
 80129ae:	440b      	add	r3, r1
 80129b0:	3314      	adds	r3, #20
 80129b2:	2203      	movs	r2, #3
 80129b4:	701a      	strb	r2, [r3, #0]
 80129b6:	e02d      	b.n	8012a14 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80129b8:	79fa      	ldrb	r2, [r7, #7]
 80129ba:	4923      	ldr	r1, [pc, #140]	; (8012a48 <etharp_output_to_arp_index+0x124>)
 80129bc:	4613      	mov	r3, r2
 80129be:	005b      	lsls	r3, r3, #1
 80129c0:	4413      	add	r3, r2
 80129c2:	00db      	lsls	r3, r3, #3
 80129c4:	440b      	add	r3, r1
 80129c6:	3312      	adds	r3, #18
 80129c8:	881b      	ldrh	r3, [r3, #0]
 80129ca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80129ce:	d321      	bcc.n	8012a14 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80129d0:	79fa      	ldrb	r2, [r7, #7]
 80129d2:	4613      	mov	r3, r2
 80129d4:	005b      	lsls	r3, r3, #1
 80129d6:	4413      	add	r3, r2
 80129d8:	00db      	lsls	r3, r3, #3
 80129da:	4a1b      	ldr	r2, [pc, #108]	; (8012a48 <etharp_output_to_arp_index+0x124>)
 80129dc:	4413      	add	r3, r2
 80129de:	1d19      	adds	r1, r3, #4
 80129e0:	79fa      	ldrb	r2, [r7, #7]
 80129e2:	4613      	mov	r3, r2
 80129e4:	005b      	lsls	r3, r3, #1
 80129e6:	4413      	add	r3, r2
 80129e8:	00db      	lsls	r3, r3, #3
 80129ea:	3308      	adds	r3, #8
 80129ec:	4a16      	ldr	r2, [pc, #88]	; (8012a48 <etharp_output_to_arp_index+0x124>)
 80129ee:	4413      	add	r3, r2
 80129f0:	3304      	adds	r3, #4
 80129f2:	461a      	mov	r2, r3
 80129f4:	68f8      	ldr	r0, [r7, #12]
 80129f6:	f000 fafb 	bl	8012ff0 <etharp_request_dst>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d109      	bne.n	8012a14 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012a00:	79fa      	ldrb	r2, [r7, #7]
 8012a02:	4911      	ldr	r1, [pc, #68]	; (8012a48 <etharp_output_to_arp_index+0x124>)
 8012a04:	4613      	mov	r3, r2
 8012a06:	005b      	lsls	r3, r3, #1
 8012a08:	4413      	add	r3, r2
 8012a0a:	00db      	lsls	r3, r3, #3
 8012a0c:	440b      	add	r3, r1
 8012a0e:	3314      	adds	r3, #20
 8012a10:	2203      	movs	r2, #3
 8012a12:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012a1a:	79fa      	ldrb	r2, [r7, #7]
 8012a1c:	4613      	mov	r3, r2
 8012a1e:	005b      	lsls	r3, r3, #1
 8012a20:	4413      	add	r3, r2
 8012a22:	00db      	lsls	r3, r3, #3
 8012a24:	3308      	adds	r3, #8
 8012a26:	4a08      	ldr	r2, [pc, #32]	; (8012a48 <etharp_output_to_arp_index+0x124>)
 8012a28:	4413      	add	r3, r2
 8012a2a:	3304      	adds	r3, #4
 8012a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012a30:	9200      	str	r2, [sp, #0]
 8012a32:	460a      	mov	r2, r1
 8012a34:	68b9      	ldr	r1, [r7, #8]
 8012a36:	68f8      	ldr	r0, [r7, #12]
 8012a38:	f001 fe3a 	bl	80146b0 <ethernet_output>
 8012a3c:	4603      	mov	r3, r0
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3710      	adds	r7, #16
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd80      	pop	{r7, pc}
 8012a46:	bf00      	nop
 8012a48:	20006888 	.word	0x20006888
 8012a4c:	08018b7c 	.word	0x08018b7c
 8012a50:	08018cec 	.word	0x08018cec
 8012a54:	08018bf4 	.word	0x08018bf4

08012a58 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b08a      	sub	sp, #40	; 0x28
 8012a5c:	af02      	add	r7, sp, #8
 8012a5e:	60f8      	str	r0, [r7, #12]
 8012a60:	60b9      	str	r1, [r7, #8]
 8012a62:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d106      	bne.n	8012a7c <etharp_output+0x24>
 8012a6e:	4b73      	ldr	r3, [pc, #460]	; (8012c3c <etharp_output+0x1e4>)
 8012a70:	f240 321e 	movw	r2, #798	; 0x31e
 8012a74:	4972      	ldr	r1, [pc, #456]	; (8012c40 <etharp_output+0x1e8>)
 8012a76:	4873      	ldr	r0, [pc, #460]	; (8012c44 <etharp_output+0x1ec>)
 8012a78:	f002 fa34 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d106      	bne.n	8012a90 <etharp_output+0x38>
 8012a82:	4b6e      	ldr	r3, [pc, #440]	; (8012c3c <etharp_output+0x1e4>)
 8012a84:	f240 321f 	movw	r2, #799	; 0x31f
 8012a88:	496f      	ldr	r1, [pc, #444]	; (8012c48 <etharp_output+0x1f0>)
 8012a8a:	486e      	ldr	r0, [pc, #440]	; (8012c44 <etharp_output+0x1ec>)
 8012a8c:	f002 fa2a 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d106      	bne.n	8012aa4 <etharp_output+0x4c>
 8012a96:	4b69      	ldr	r3, [pc, #420]	; (8012c3c <etharp_output+0x1e4>)
 8012a98:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012a9c:	496b      	ldr	r1, [pc, #428]	; (8012c4c <etharp_output+0x1f4>)
 8012a9e:	4869      	ldr	r0, [pc, #420]	; (8012c44 <etharp_output+0x1ec>)
 8012aa0:	f002 fa20 	bl	8014ee4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	68f9      	ldr	r1, [r7, #12]
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f000 fef8 	bl	80138a0 <ip4_addr_isbroadcast_u32>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d002      	beq.n	8012abc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012ab6:	4b66      	ldr	r3, [pc, #408]	; (8012c50 <etharp_output+0x1f8>)
 8012ab8:	61fb      	str	r3, [r7, #28]
 8012aba:	e0af      	b.n	8012c1c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012ac4:	2be0      	cmp	r3, #224	; 0xe0
 8012ac6:	d118      	bne.n	8012afa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012acc:	2300      	movs	r3, #0
 8012ace:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012ad0:	235e      	movs	r3, #94	; 0x5e
 8012ad2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012ade:	b2db      	uxtb	r3, r3
 8012ae0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	3302      	adds	r3, #2
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	3303      	adds	r3, #3
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012af2:	f107 0310 	add.w	r3, r7, #16
 8012af6:	61fb      	str	r3, [r7, #28]
 8012af8:	e090      	b.n	8012c1c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681a      	ldr	r2, [r3, #0]
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	3304      	adds	r3, #4
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	405a      	eors	r2, r3
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	3308      	adds	r3, #8
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	4013      	ands	r3, r2
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d012      	beq.n	8012b38 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012b18:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012b1c:	4293      	cmp	r3, r2
 8012b1e:	d00b      	beq.n	8012b38 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	330c      	adds	r3, #12
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d003      	beq.n	8012b32 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	330c      	adds	r3, #12
 8012b2e:	61bb      	str	r3, [r7, #24]
 8012b30:	e002      	b.n	8012b38 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012b32:	f06f 0303 	mvn.w	r3, #3
 8012b36:	e07d      	b.n	8012c34 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012b38:	4b46      	ldr	r3, [pc, #280]	; (8012c54 <etharp_output+0x1fc>)
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	4619      	mov	r1, r3
 8012b3e:	4a46      	ldr	r2, [pc, #280]	; (8012c58 <etharp_output+0x200>)
 8012b40:	460b      	mov	r3, r1
 8012b42:	005b      	lsls	r3, r3, #1
 8012b44:	440b      	add	r3, r1
 8012b46:	00db      	lsls	r3, r3, #3
 8012b48:	4413      	add	r3, r2
 8012b4a:	3314      	adds	r3, #20
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	2b01      	cmp	r3, #1
 8012b50:	d925      	bls.n	8012b9e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012b52:	4b40      	ldr	r3, [pc, #256]	; (8012c54 <etharp_output+0x1fc>)
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	4619      	mov	r1, r3
 8012b58:	4a3f      	ldr	r2, [pc, #252]	; (8012c58 <etharp_output+0x200>)
 8012b5a:	460b      	mov	r3, r1
 8012b5c:	005b      	lsls	r3, r3, #1
 8012b5e:	440b      	add	r3, r1
 8012b60:	00db      	lsls	r3, r3, #3
 8012b62:	4413      	add	r3, r2
 8012b64:	3308      	adds	r3, #8
 8012b66:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012b68:	68fa      	ldr	r2, [r7, #12]
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d117      	bne.n	8012b9e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012b6e:	69bb      	ldr	r3, [r7, #24]
 8012b70:	681a      	ldr	r2, [r3, #0]
 8012b72:	4b38      	ldr	r3, [pc, #224]	; (8012c54 <etharp_output+0x1fc>)
 8012b74:	781b      	ldrb	r3, [r3, #0]
 8012b76:	4618      	mov	r0, r3
 8012b78:	4937      	ldr	r1, [pc, #220]	; (8012c58 <etharp_output+0x200>)
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	005b      	lsls	r3, r3, #1
 8012b7e:	4403      	add	r3, r0
 8012b80:	00db      	lsls	r3, r3, #3
 8012b82:	440b      	add	r3, r1
 8012b84:	3304      	adds	r3, #4
 8012b86:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d108      	bne.n	8012b9e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012b8c:	4b31      	ldr	r3, [pc, #196]	; (8012c54 <etharp_output+0x1fc>)
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	461a      	mov	r2, r3
 8012b92:	68b9      	ldr	r1, [r7, #8]
 8012b94:	68f8      	ldr	r0, [r7, #12]
 8012b96:	f7ff fec5 	bl	8012924 <etharp_output_to_arp_index>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	e04a      	b.n	8012c34 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	75fb      	strb	r3, [r7, #23]
 8012ba2:	e031      	b.n	8012c08 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012ba4:	7dfa      	ldrb	r2, [r7, #23]
 8012ba6:	492c      	ldr	r1, [pc, #176]	; (8012c58 <etharp_output+0x200>)
 8012ba8:	4613      	mov	r3, r2
 8012baa:	005b      	lsls	r3, r3, #1
 8012bac:	4413      	add	r3, r2
 8012bae:	00db      	lsls	r3, r3, #3
 8012bb0:	440b      	add	r3, r1
 8012bb2:	3314      	adds	r3, #20
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	2b01      	cmp	r3, #1
 8012bb8:	d923      	bls.n	8012c02 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012bba:	7dfa      	ldrb	r2, [r7, #23]
 8012bbc:	4926      	ldr	r1, [pc, #152]	; (8012c58 <etharp_output+0x200>)
 8012bbe:	4613      	mov	r3, r2
 8012bc0:	005b      	lsls	r3, r3, #1
 8012bc2:	4413      	add	r3, r2
 8012bc4:	00db      	lsls	r3, r3, #3
 8012bc6:	440b      	add	r3, r1
 8012bc8:	3308      	adds	r3, #8
 8012bca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012bcc:	68fa      	ldr	r2, [r7, #12]
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d117      	bne.n	8012c02 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012bd2:	69bb      	ldr	r3, [r7, #24]
 8012bd4:	6819      	ldr	r1, [r3, #0]
 8012bd6:	7dfa      	ldrb	r2, [r7, #23]
 8012bd8:	481f      	ldr	r0, [pc, #124]	; (8012c58 <etharp_output+0x200>)
 8012bda:	4613      	mov	r3, r2
 8012bdc:	005b      	lsls	r3, r3, #1
 8012bde:	4413      	add	r3, r2
 8012be0:	00db      	lsls	r3, r3, #3
 8012be2:	4403      	add	r3, r0
 8012be4:	3304      	adds	r3, #4
 8012be6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012be8:	4299      	cmp	r1, r3
 8012bea:	d10a      	bne.n	8012c02 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012bec:	4a19      	ldr	r2, [pc, #100]	; (8012c54 <etharp_output+0x1fc>)
 8012bee:	7dfb      	ldrb	r3, [r7, #23]
 8012bf0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012bf2:	7dfb      	ldrb	r3, [r7, #23]
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	68b9      	ldr	r1, [r7, #8]
 8012bf8:	68f8      	ldr	r0, [r7, #12]
 8012bfa:	f7ff fe93 	bl	8012924 <etharp_output_to_arp_index>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	e018      	b.n	8012c34 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012c02:	7dfb      	ldrb	r3, [r7, #23]
 8012c04:	3301      	adds	r3, #1
 8012c06:	75fb      	strb	r3, [r7, #23]
 8012c08:	7dfb      	ldrb	r3, [r7, #23]
 8012c0a:	2b09      	cmp	r3, #9
 8012c0c:	d9ca      	bls.n	8012ba4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012c0e:	68ba      	ldr	r2, [r7, #8]
 8012c10:	69b9      	ldr	r1, [r7, #24]
 8012c12:	68f8      	ldr	r0, [r7, #12]
 8012c14:	f000 f822 	bl	8012c5c <etharp_query>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	e00b      	b.n	8012c34 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012c22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012c26:	9300      	str	r3, [sp, #0]
 8012c28:	69fb      	ldr	r3, [r7, #28]
 8012c2a:	68b9      	ldr	r1, [r7, #8]
 8012c2c:	68f8      	ldr	r0, [r7, #12]
 8012c2e:	f001 fd3f 	bl	80146b0 <ethernet_output>
 8012c32:	4603      	mov	r3, r0
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	3720      	adds	r7, #32
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}
 8012c3c:	08018b7c 	.word	0x08018b7c
 8012c40:	08018ccc 	.word	0x08018ccc
 8012c44:	08018bf4 	.word	0x08018bf4
 8012c48:	08018d1c 	.word	0x08018d1c
 8012c4c:	08018cbc 	.word	0x08018cbc
 8012c50:	08019370 	.word	0x08019370
 8012c54:	20006978 	.word	0x20006978
 8012c58:	20006888 	.word	0x20006888

08012c5c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b08c      	sub	sp, #48	; 0x30
 8012c60:	af02      	add	r7, sp, #8
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	3326      	adds	r3, #38	; 0x26
 8012c6c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012c6e:	23ff      	movs	r3, #255	; 0xff
 8012c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012c74:	2300      	movs	r3, #0
 8012c76:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	68f9      	ldr	r1, [r7, #12]
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f000 fe0e 	bl	80138a0 <ip4_addr_isbroadcast_u32>
 8012c84:	4603      	mov	r3, r0
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d10c      	bne.n	8012ca4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c92:	2be0      	cmp	r3, #224	; 0xe0
 8012c94:	d006      	beq.n	8012ca4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d003      	beq.n	8012ca4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012c9c:	68bb      	ldr	r3, [r7, #8]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d102      	bne.n	8012caa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012ca4:	f06f 030f 	mvn.w	r3, #15
 8012ca8:	e101      	b.n	8012eae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012caa:	68fa      	ldr	r2, [r7, #12]
 8012cac:	2101      	movs	r1, #1
 8012cae:	68b8      	ldr	r0, [r7, #8]
 8012cb0:	f7ff fb60 	bl	8012374 <etharp_find_entry>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012cb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	da02      	bge.n	8012cc6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012cc0:	8a7b      	ldrh	r3, [r7, #18]
 8012cc2:	b25b      	sxtb	r3, r3
 8012cc4:	e0f3      	b.n	8012eae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012cc6:	8a7b      	ldrh	r3, [r7, #18]
 8012cc8:	2b7e      	cmp	r3, #126	; 0x7e
 8012cca:	d906      	bls.n	8012cda <etharp_query+0x7e>
 8012ccc:	4b7a      	ldr	r3, [pc, #488]	; (8012eb8 <etharp_query+0x25c>)
 8012cce:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012cd2:	497a      	ldr	r1, [pc, #488]	; (8012ebc <etharp_query+0x260>)
 8012cd4:	487a      	ldr	r0, [pc, #488]	; (8012ec0 <etharp_query+0x264>)
 8012cd6:	f002 f905 	bl	8014ee4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012cda:	8a7b      	ldrh	r3, [r7, #18]
 8012cdc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012cde:	7c7a      	ldrb	r2, [r7, #17]
 8012ce0:	4978      	ldr	r1, [pc, #480]	; (8012ec4 <etharp_query+0x268>)
 8012ce2:	4613      	mov	r3, r2
 8012ce4:	005b      	lsls	r3, r3, #1
 8012ce6:	4413      	add	r3, r2
 8012ce8:	00db      	lsls	r3, r3, #3
 8012cea:	440b      	add	r3, r1
 8012cec:	3314      	adds	r3, #20
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d115      	bne.n	8012d20 <etharp_query+0xc4>
    is_new_entry = 1;
 8012cf4:	2301      	movs	r3, #1
 8012cf6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012cf8:	7c7a      	ldrb	r2, [r7, #17]
 8012cfa:	4972      	ldr	r1, [pc, #456]	; (8012ec4 <etharp_query+0x268>)
 8012cfc:	4613      	mov	r3, r2
 8012cfe:	005b      	lsls	r3, r3, #1
 8012d00:	4413      	add	r3, r2
 8012d02:	00db      	lsls	r3, r3, #3
 8012d04:	440b      	add	r3, r1
 8012d06:	3314      	adds	r3, #20
 8012d08:	2201      	movs	r2, #1
 8012d0a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012d0c:	7c7a      	ldrb	r2, [r7, #17]
 8012d0e:	496d      	ldr	r1, [pc, #436]	; (8012ec4 <etharp_query+0x268>)
 8012d10:	4613      	mov	r3, r2
 8012d12:	005b      	lsls	r3, r3, #1
 8012d14:	4413      	add	r3, r2
 8012d16:	00db      	lsls	r3, r3, #3
 8012d18:	440b      	add	r3, r1
 8012d1a:	3308      	adds	r3, #8
 8012d1c:	68fa      	ldr	r2, [r7, #12]
 8012d1e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012d20:	7c7a      	ldrb	r2, [r7, #17]
 8012d22:	4968      	ldr	r1, [pc, #416]	; (8012ec4 <etharp_query+0x268>)
 8012d24:	4613      	mov	r3, r2
 8012d26:	005b      	lsls	r3, r3, #1
 8012d28:	4413      	add	r3, r2
 8012d2a:	00db      	lsls	r3, r3, #3
 8012d2c:	440b      	add	r3, r1
 8012d2e:	3314      	adds	r3, #20
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	d011      	beq.n	8012d5a <etharp_query+0xfe>
 8012d36:	7c7a      	ldrb	r2, [r7, #17]
 8012d38:	4962      	ldr	r1, [pc, #392]	; (8012ec4 <etharp_query+0x268>)
 8012d3a:	4613      	mov	r3, r2
 8012d3c:	005b      	lsls	r3, r3, #1
 8012d3e:	4413      	add	r3, r2
 8012d40:	00db      	lsls	r3, r3, #3
 8012d42:	440b      	add	r3, r1
 8012d44:	3314      	adds	r3, #20
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	2b01      	cmp	r3, #1
 8012d4a:	d806      	bhi.n	8012d5a <etharp_query+0xfe>
 8012d4c:	4b5a      	ldr	r3, [pc, #360]	; (8012eb8 <etharp_query+0x25c>)
 8012d4e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012d52:	495d      	ldr	r1, [pc, #372]	; (8012ec8 <etharp_query+0x26c>)
 8012d54:	485a      	ldr	r0, [pc, #360]	; (8012ec0 <etharp_query+0x264>)
 8012d56:	f002 f8c5 	bl	8014ee4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012d5a:	6a3b      	ldr	r3, [r7, #32]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d102      	bne.n	8012d66 <etharp_query+0x10a>
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d10c      	bne.n	8012d80 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012d66:	68b9      	ldr	r1, [r7, #8]
 8012d68:	68f8      	ldr	r0, [r7, #12]
 8012d6a:	f000 f963 	bl	8013034 <etharp_request>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d102      	bne.n	8012d80 <etharp_query+0x124>
      return result;
 8012d7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012d7e:	e096      	b.n	8012eae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d106      	bne.n	8012d94 <etharp_query+0x138>
 8012d86:	4b4c      	ldr	r3, [pc, #304]	; (8012eb8 <etharp_query+0x25c>)
 8012d88:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012d8c:	494f      	ldr	r1, [pc, #316]	; (8012ecc <etharp_query+0x270>)
 8012d8e:	484c      	ldr	r0, [pc, #304]	; (8012ec0 <etharp_query+0x264>)
 8012d90:	f002 f8a8 	bl	8014ee4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012d94:	7c7a      	ldrb	r2, [r7, #17]
 8012d96:	494b      	ldr	r1, [pc, #300]	; (8012ec4 <etharp_query+0x268>)
 8012d98:	4613      	mov	r3, r2
 8012d9a:	005b      	lsls	r3, r3, #1
 8012d9c:	4413      	add	r3, r2
 8012d9e:	00db      	lsls	r3, r3, #3
 8012da0:	440b      	add	r3, r1
 8012da2:	3314      	adds	r3, #20
 8012da4:	781b      	ldrb	r3, [r3, #0]
 8012da6:	2b01      	cmp	r3, #1
 8012da8:	d917      	bls.n	8012dda <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012daa:	4a49      	ldr	r2, [pc, #292]	; (8012ed0 <etharp_query+0x274>)
 8012dac:	7c7b      	ldrb	r3, [r7, #17]
 8012dae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012db0:	7c7a      	ldrb	r2, [r7, #17]
 8012db2:	4613      	mov	r3, r2
 8012db4:	005b      	lsls	r3, r3, #1
 8012db6:	4413      	add	r3, r2
 8012db8:	00db      	lsls	r3, r3, #3
 8012dba:	3308      	adds	r3, #8
 8012dbc:	4a41      	ldr	r2, [pc, #260]	; (8012ec4 <etharp_query+0x268>)
 8012dbe:	4413      	add	r3, r2
 8012dc0:	3304      	adds	r3, #4
 8012dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012dc6:	9200      	str	r2, [sp, #0]
 8012dc8:	697a      	ldr	r2, [r7, #20]
 8012dca:	6879      	ldr	r1, [r7, #4]
 8012dcc:	68f8      	ldr	r0, [r7, #12]
 8012dce:	f001 fc6f 	bl	80146b0 <ethernet_output>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012dd8:	e067      	b.n	8012eaa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012dda:	7c7a      	ldrb	r2, [r7, #17]
 8012ddc:	4939      	ldr	r1, [pc, #228]	; (8012ec4 <etharp_query+0x268>)
 8012dde:	4613      	mov	r3, r2
 8012de0:	005b      	lsls	r3, r3, #1
 8012de2:	4413      	add	r3, r2
 8012de4:	00db      	lsls	r3, r3, #3
 8012de6:	440b      	add	r3, r1
 8012de8:	3314      	adds	r3, #20
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d15c      	bne.n	8012eaa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012df0:	2300      	movs	r3, #0
 8012df2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012df8:	e01c      	b.n	8012e34 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012dfa:	69fb      	ldr	r3, [r7, #28]
 8012dfc:	895a      	ldrh	r2, [r3, #10]
 8012dfe:	69fb      	ldr	r3, [r7, #28]
 8012e00:	891b      	ldrh	r3, [r3, #8]
 8012e02:	429a      	cmp	r2, r3
 8012e04:	d10a      	bne.n	8012e1c <etharp_query+0x1c0>
 8012e06:	69fb      	ldr	r3, [r7, #28]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d006      	beq.n	8012e1c <etharp_query+0x1c0>
 8012e0e:	4b2a      	ldr	r3, [pc, #168]	; (8012eb8 <etharp_query+0x25c>)
 8012e10:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012e14:	492f      	ldr	r1, [pc, #188]	; (8012ed4 <etharp_query+0x278>)
 8012e16:	482a      	ldr	r0, [pc, #168]	; (8012ec0 <etharp_query+0x264>)
 8012e18:	f002 f864 	bl	8014ee4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012e1c:	69fb      	ldr	r3, [r7, #28]
 8012e1e:	7b1b      	ldrb	r3, [r3, #12]
 8012e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d002      	beq.n	8012e2e <etharp_query+0x1d2>
        copy_needed = 1;
 8012e28:	2301      	movs	r3, #1
 8012e2a:	61bb      	str	r3, [r7, #24]
        break;
 8012e2c:	e005      	b.n	8012e3a <etharp_query+0x1de>
      }
      p = p->next;
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012e34:	69fb      	ldr	r3, [r7, #28]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d1df      	bne.n	8012dfa <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012e3a:	69bb      	ldr	r3, [r7, #24]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d007      	beq.n	8012e50 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012e40:	687a      	ldr	r2, [r7, #4]
 8012e42:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012e46:	200e      	movs	r0, #14
 8012e48:	f7f8 fb6c 	bl	800b524 <pbuf_clone>
 8012e4c:	61f8      	str	r0, [r7, #28]
 8012e4e:	e004      	b.n	8012e5a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012e54:	69f8      	ldr	r0, [r7, #28]
 8012e56:	f7f8 f993 	bl	800b180 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012e5a:	69fb      	ldr	r3, [r7, #28]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d021      	beq.n	8012ea4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012e60:	7c7a      	ldrb	r2, [r7, #17]
 8012e62:	4918      	ldr	r1, [pc, #96]	; (8012ec4 <etharp_query+0x268>)
 8012e64:	4613      	mov	r3, r2
 8012e66:	005b      	lsls	r3, r3, #1
 8012e68:	4413      	add	r3, r2
 8012e6a:	00db      	lsls	r3, r3, #3
 8012e6c:	440b      	add	r3, r1
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d00a      	beq.n	8012e8a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012e74:	7c7a      	ldrb	r2, [r7, #17]
 8012e76:	4913      	ldr	r1, [pc, #76]	; (8012ec4 <etharp_query+0x268>)
 8012e78:	4613      	mov	r3, r2
 8012e7a:	005b      	lsls	r3, r3, #1
 8012e7c:	4413      	add	r3, r2
 8012e7e:	00db      	lsls	r3, r3, #3
 8012e80:	440b      	add	r3, r1
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7f8 f8d5 	bl	800b034 <pbuf_free>
      }
      arp_table[i].q = p;
 8012e8a:	7c7a      	ldrb	r2, [r7, #17]
 8012e8c:	490d      	ldr	r1, [pc, #52]	; (8012ec4 <etharp_query+0x268>)
 8012e8e:	4613      	mov	r3, r2
 8012e90:	005b      	lsls	r3, r3, #1
 8012e92:	4413      	add	r3, r2
 8012e94:	00db      	lsls	r3, r3, #3
 8012e96:	440b      	add	r3, r1
 8012e98:	69fa      	ldr	r2, [r7, #28]
 8012e9a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012ea2:	e002      	b.n	8012eaa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012ea4:	23ff      	movs	r3, #255	; 0xff
 8012ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012eaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3728      	adds	r7, #40	; 0x28
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	08018b7c 	.word	0x08018b7c
 8012ebc:	08018d28 	.word	0x08018d28
 8012ec0:	08018bf4 	.word	0x08018bf4
 8012ec4:	20006888 	.word	0x20006888
 8012ec8:	08018d38 	.word	0x08018d38
 8012ecc:	08018d1c 	.word	0x08018d1c
 8012ed0:	20006978 	.word	0x20006978
 8012ed4:	08018d60 	.word	0x08018d60

08012ed8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b08a      	sub	sp, #40	; 0x28
 8012edc:	af02      	add	r7, sp, #8
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	60b9      	str	r1, [r7, #8]
 8012ee2:	607a      	str	r2, [r7, #4]
 8012ee4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d106      	bne.n	8012efe <etharp_raw+0x26>
 8012ef0:	4b3a      	ldr	r3, [pc, #232]	; (8012fdc <etharp_raw+0x104>)
 8012ef2:	f240 4257 	movw	r2, #1111	; 0x457
 8012ef6:	493a      	ldr	r1, [pc, #232]	; (8012fe0 <etharp_raw+0x108>)
 8012ef8:	483a      	ldr	r0, [pc, #232]	; (8012fe4 <etharp_raw+0x10c>)
 8012efa:	f001 fff3 	bl	8014ee4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012efe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f02:	211c      	movs	r1, #28
 8012f04:	200e      	movs	r0, #14
 8012f06:	f7f7 fdb1 	bl	800aa6c <pbuf_alloc>
 8012f0a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d102      	bne.n	8012f18 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012f12:	f04f 33ff 	mov.w	r3, #4294967295
 8012f16:	e05d      	b.n	8012fd4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012f18:	69bb      	ldr	r3, [r7, #24]
 8012f1a:	895b      	ldrh	r3, [r3, #10]
 8012f1c:	2b1b      	cmp	r3, #27
 8012f1e:	d806      	bhi.n	8012f2e <etharp_raw+0x56>
 8012f20:	4b2e      	ldr	r3, [pc, #184]	; (8012fdc <etharp_raw+0x104>)
 8012f22:	f240 4262 	movw	r2, #1122	; 0x462
 8012f26:	4930      	ldr	r1, [pc, #192]	; (8012fe8 <etharp_raw+0x110>)
 8012f28:	482e      	ldr	r0, [pc, #184]	; (8012fe4 <etharp_raw+0x10c>)
 8012f2a:	f001 ffdb 	bl	8014ee4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012f2e:	69bb      	ldr	r3, [r7, #24]
 8012f30:	685b      	ldr	r3, [r3, #4]
 8012f32:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012f34:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7f6 fd34 	bl	80099a4 <lwip_htons>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	461a      	mov	r2, r3
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012f4a:	2b06      	cmp	r3, #6
 8012f4c:	d006      	beq.n	8012f5c <etharp_raw+0x84>
 8012f4e:	4b23      	ldr	r3, [pc, #140]	; (8012fdc <etharp_raw+0x104>)
 8012f50:	f240 4269 	movw	r2, #1129	; 0x469
 8012f54:	4925      	ldr	r1, [pc, #148]	; (8012fec <etharp_raw+0x114>)
 8012f56:	4823      	ldr	r0, [pc, #140]	; (8012fe4 <etharp_raw+0x10c>)
 8012f58:	f001 ffc4 	bl	8014ee4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	3308      	adds	r3, #8
 8012f60:	2206      	movs	r2, #6
 8012f62:	6839      	ldr	r1, [r7, #0]
 8012f64:	4618      	mov	r0, r3
 8012f66:	f001 fefd 	bl	8014d64 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	3312      	adds	r3, #18
 8012f6e:	2206      	movs	r2, #6
 8012f70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012f72:	4618      	mov	r0, r3
 8012f74:	f001 fef6 	bl	8014d64 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	330e      	adds	r3, #14
 8012f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f7e:	6812      	ldr	r2, [r2, #0]
 8012f80:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	3318      	adds	r3, #24
 8012f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f88:	6812      	ldr	r2, [r2, #0]
 8012f8a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012f8c:	697b      	ldr	r3, [r7, #20]
 8012f8e:	2200      	movs	r2, #0
 8012f90:	701a      	strb	r2, [r3, #0]
 8012f92:	2200      	movs	r2, #0
 8012f94:	f042 0201 	orr.w	r2, r2, #1
 8012f98:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	f042 0208 	orr.w	r2, r2, #8
 8012fa2:	709a      	strb	r2, [r3, #2]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	2206      	movs	r2, #6
 8012fac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	2204      	movs	r2, #4
 8012fb2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012fb4:	f640 0306 	movw	r3, #2054	; 0x806
 8012fb8:	9300      	str	r3, [sp, #0]
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	68ba      	ldr	r2, [r7, #8]
 8012fbe:	69b9      	ldr	r1, [r7, #24]
 8012fc0:	68f8      	ldr	r0, [r7, #12]
 8012fc2:	f001 fb75 	bl	80146b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012fc6:	69b8      	ldr	r0, [r7, #24]
 8012fc8:	f7f8 f834 	bl	800b034 <pbuf_free>
  p = NULL;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012fd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	3720      	adds	r7, #32
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd80      	pop	{r7, pc}
 8012fdc:	08018b7c 	.word	0x08018b7c
 8012fe0:	08018ccc 	.word	0x08018ccc
 8012fe4:	08018bf4 	.word	0x08018bf4
 8012fe8:	08018d7c 	.word	0x08018d7c
 8012fec:	08018db0 	.word	0x08018db0

08012ff0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b088      	sub	sp, #32
 8012ff4:	af04      	add	r7, sp, #16
 8012ff6:	60f8      	str	r0, [r7, #12]
 8012ff8:	60b9      	str	r1, [r7, #8]
 8012ffa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801300c:	2201      	movs	r2, #1
 801300e:	9203      	str	r2, [sp, #12]
 8013010:	68ba      	ldr	r2, [r7, #8]
 8013012:	9202      	str	r2, [sp, #8]
 8013014:	4a06      	ldr	r2, [pc, #24]	; (8013030 <etharp_request_dst+0x40>)
 8013016:	9201      	str	r2, [sp, #4]
 8013018:	9300      	str	r3, [sp, #0]
 801301a:	4603      	mov	r3, r0
 801301c:	687a      	ldr	r2, [r7, #4]
 801301e:	68f8      	ldr	r0, [r7, #12]
 8013020:	f7ff ff5a 	bl	8012ed8 <etharp_raw>
 8013024:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013026:	4618      	mov	r0, r3
 8013028:	3710      	adds	r7, #16
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	08019378 	.word	0x08019378

08013034 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b082      	sub	sp, #8
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801303e:	4a05      	ldr	r2, [pc, #20]	; (8013054 <etharp_request+0x20>)
 8013040:	6839      	ldr	r1, [r7, #0]
 8013042:	6878      	ldr	r0, [r7, #4]
 8013044:	f7ff ffd4 	bl	8012ff0 <etharp_request_dst>
 8013048:	4603      	mov	r3, r0
}
 801304a:	4618      	mov	r0, r3
 801304c:	3708      	adds	r7, #8
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}
 8013052:	bf00      	nop
 8013054:	08019370 	.word	0x08019370

08013058 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b08e      	sub	sp, #56	; 0x38
 801305c:	af04      	add	r7, sp, #16
 801305e:	6078      	str	r0, [r7, #4]
 8013060:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013062:	4b79      	ldr	r3, [pc, #484]	; (8013248 <icmp_input+0x1f0>)
 8013064:	689b      	ldr	r3, [r3, #8]
 8013066:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	f003 030f 	and.w	r3, r3, #15
 8013070:	b2db      	uxtb	r3, r3
 8013072:	009b      	lsls	r3, r3, #2
 8013074:	b2db      	uxtb	r3, r3
 8013076:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013078:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801307a:	2b13      	cmp	r3, #19
 801307c:	f240 80cd 	bls.w	801321a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	895b      	ldrh	r3, [r3, #10]
 8013084:	2b03      	cmp	r3, #3
 8013086:	f240 80ca 	bls.w	801321e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013094:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013098:	2b00      	cmp	r3, #0
 801309a:	f000 80b7 	beq.w	801320c <icmp_input+0x1b4>
 801309e:	2b08      	cmp	r3, #8
 80130a0:	f040 80b7 	bne.w	8013212 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80130a4:	4b69      	ldr	r3, [pc, #420]	; (801324c <icmp_input+0x1f4>)
 80130a6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80130a8:	4b67      	ldr	r3, [pc, #412]	; (8013248 <icmp_input+0x1f0>)
 80130aa:	695b      	ldr	r3, [r3, #20]
 80130ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80130b0:	2be0      	cmp	r3, #224	; 0xe0
 80130b2:	f000 80bb 	beq.w	801322c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80130b6:	4b64      	ldr	r3, [pc, #400]	; (8013248 <icmp_input+0x1f0>)
 80130b8:	695b      	ldr	r3, [r3, #20]
 80130ba:	4a63      	ldr	r2, [pc, #396]	; (8013248 <icmp_input+0x1f0>)
 80130bc:	6812      	ldr	r2, [r2, #0]
 80130be:	4611      	mov	r1, r2
 80130c0:	4618      	mov	r0, r3
 80130c2:	f000 fbed 	bl	80138a0 <ip4_addr_isbroadcast_u32>
 80130c6:	4603      	mov	r3, r0
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	f040 80b1 	bne.w	8013230 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	891b      	ldrh	r3, [r3, #8]
 80130d2:	2b07      	cmp	r3, #7
 80130d4:	f240 80a5 	bls.w	8013222 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80130d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80130da:	330e      	adds	r3, #14
 80130dc:	4619      	mov	r1, r3
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f7f7 ff12 	bl	800af08 <pbuf_add_header>
 80130e4:	4603      	mov	r3, r0
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d04b      	beq.n	8013182 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	891a      	ldrh	r2, [r3, #8]
 80130ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80130f0:	4413      	add	r3, r2
 80130f2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	891b      	ldrh	r3, [r3, #8]
 80130f8:	8b7a      	ldrh	r2, [r7, #26]
 80130fa:	429a      	cmp	r2, r3
 80130fc:	f0c0 809a 	bcc.w	8013234 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013100:	8b7b      	ldrh	r3, [r7, #26]
 8013102:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013106:	4619      	mov	r1, r3
 8013108:	200e      	movs	r0, #14
 801310a:	f7f7 fcaf 	bl	800aa6c <pbuf_alloc>
 801310e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	2b00      	cmp	r3, #0
 8013114:	f000 8090 	beq.w	8013238 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	895b      	ldrh	r3, [r3, #10]
 801311c:	461a      	mov	r2, r3
 801311e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013120:	3308      	adds	r3, #8
 8013122:	429a      	cmp	r2, r3
 8013124:	d203      	bcs.n	801312e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013126:	6978      	ldr	r0, [r7, #20]
 8013128:	f7f7 ff84 	bl	800b034 <pbuf_free>
          goto icmperr;
 801312c:	e085      	b.n	801323a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	685b      	ldr	r3, [r3, #4]
 8013132:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013136:	4618      	mov	r0, r3
 8013138:	f001 fe14 	bl	8014d64 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801313c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801313e:	4619      	mov	r1, r3
 8013140:	6978      	ldr	r0, [r7, #20]
 8013142:	f7f7 fef1 	bl	800af28 <pbuf_remove_header>
 8013146:	4603      	mov	r3, r0
 8013148:	2b00      	cmp	r3, #0
 801314a:	d009      	beq.n	8013160 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801314c:	4b40      	ldr	r3, [pc, #256]	; (8013250 <icmp_input+0x1f8>)
 801314e:	22b6      	movs	r2, #182	; 0xb6
 8013150:	4940      	ldr	r1, [pc, #256]	; (8013254 <icmp_input+0x1fc>)
 8013152:	4841      	ldr	r0, [pc, #260]	; (8013258 <icmp_input+0x200>)
 8013154:	f001 fec6 	bl	8014ee4 <iprintf>
          pbuf_free(r);
 8013158:	6978      	ldr	r0, [r7, #20]
 801315a:	f7f7 ff6b 	bl	800b034 <pbuf_free>
          goto icmperr;
 801315e:	e06c      	b.n	801323a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013160:	6879      	ldr	r1, [r7, #4]
 8013162:	6978      	ldr	r0, [r7, #20]
 8013164:	f7f8 f89a 	bl	800b29c <pbuf_copy>
 8013168:	4603      	mov	r3, r0
 801316a:	2b00      	cmp	r3, #0
 801316c:	d003      	beq.n	8013176 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801316e:	6978      	ldr	r0, [r7, #20]
 8013170:	f7f7 ff60 	bl	800b034 <pbuf_free>
          goto icmperr;
 8013174:	e061      	b.n	801323a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013176:	6878      	ldr	r0, [r7, #4]
 8013178:	f7f7 ff5c 	bl	800b034 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	607b      	str	r3, [r7, #4]
 8013180:	e00f      	b.n	80131a2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013182:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013184:	330e      	adds	r3, #14
 8013186:	4619      	mov	r1, r3
 8013188:	6878      	ldr	r0, [r7, #4]
 801318a:	f7f7 fecd 	bl	800af28 <pbuf_remove_header>
 801318e:	4603      	mov	r3, r0
 8013190:	2b00      	cmp	r3, #0
 8013192:	d006      	beq.n	80131a2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013194:	4b2e      	ldr	r3, [pc, #184]	; (8013250 <icmp_input+0x1f8>)
 8013196:	22c7      	movs	r2, #199	; 0xc7
 8013198:	4930      	ldr	r1, [pc, #192]	; (801325c <icmp_input+0x204>)
 801319a:	482f      	ldr	r0, [pc, #188]	; (8013258 <icmp_input+0x200>)
 801319c:	f001 fea2 	bl	8014ee4 <iprintf>
          goto icmperr;
 80131a0:	e04b      	b.n	801323a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80131a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80131aa:	4619      	mov	r1, r3
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f7f7 feab 	bl	800af08 <pbuf_add_header>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d12b      	bne.n	8013210 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	685b      	ldr	r3, [r3, #4]
 80131bc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80131be:	69fb      	ldr	r3, [r7, #28]
 80131c0:	681a      	ldr	r2, [r3, #0]
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80131c6:	4b20      	ldr	r3, [pc, #128]	; (8013248 <icmp_input+0x1f0>)
 80131c8:	691a      	ldr	r2, [r3, #16]
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80131ce:	693b      	ldr	r3, [r7, #16]
 80131d0:	2200      	movs	r2, #0
 80131d2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	2200      	movs	r2, #0
 80131d8:	709a      	strb	r2, [r3, #2]
 80131da:	2200      	movs	r2, #0
 80131dc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	22ff      	movs	r2, #255	; 0xff
 80131e2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	2200      	movs	r2, #0
 80131e8:	729a      	strb	r2, [r3, #10]
 80131ea:	2200      	movs	r2, #0
 80131ec:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	9302      	str	r3, [sp, #8]
 80131f2:	2301      	movs	r3, #1
 80131f4:	9301      	str	r3, [sp, #4]
 80131f6:	2300      	movs	r3, #0
 80131f8:	9300      	str	r3, [sp, #0]
 80131fa:	23ff      	movs	r3, #255	; 0xff
 80131fc:	2200      	movs	r2, #0
 80131fe:	69f9      	ldr	r1, [r7, #28]
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f000 fa75 	bl	80136f0 <ip4_output_if>
 8013206:	4603      	mov	r3, r0
 8013208:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801320a:	e001      	b.n	8013210 <icmp_input+0x1b8>
      break;
 801320c:	bf00      	nop
 801320e:	e000      	b.n	8013212 <icmp_input+0x1ba>
      break;
 8013210:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f7f7 ff0e 	bl	800b034 <pbuf_free>
  return;
 8013218:	e013      	b.n	8013242 <icmp_input+0x1ea>
    goto lenerr;
 801321a:	bf00      	nop
 801321c:	e002      	b.n	8013224 <icmp_input+0x1cc>
    goto lenerr;
 801321e:	bf00      	nop
 8013220:	e000      	b.n	8013224 <icmp_input+0x1cc>
        goto lenerr;
 8013222:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f7f7 ff05 	bl	800b034 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801322a:	e00a      	b.n	8013242 <icmp_input+0x1ea>
        goto icmperr;
 801322c:	bf00      	nop
 801322e:	e004      	b.n	801323a <icmp_input+0x1e2>
        goto icmperr;
 8013230:	bf00      	nop
 8013232:	e002      	b.n	801323a <icmp_input+0x1e2>
          goto icmperr;
 8013234:	bf00      	nop
 8013236:	e000      	b.n	801323a <icmp_input+0x1e2>
          goto icmperr;
 8013238:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f7f7 fefa 	bl	800b034 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013240:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013242:	3728      	adds	r7, #40	; 0x28
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}
 8013248:	20009c18 	.word	0x20009c18
 801324c:	20009c2c 	.word	0x20009c2c
 8013250:	08018df4 	.word	0x08018df4
 8013254:	08018e2c 	.word	0x08018e2c
 8013258:	08018e64 	.word	0x08018e64
 801325c:	08018e8c 	.word	0x08018e8c

08013260 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b082      	sub	sp, #8
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
 8013268:	460b      	mov	r3, r1
 801326a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801326c:	78fb      	ldrb	r3, [r7, #3]
 801326e:	461a      	mov	r2, r3
 8013270:	2103      	movs	r1, #3
 8013272:	6878      	ldr	r0, [r7, #4]
 8013274:	f000 f814 	bl	80132a0 <icmp_send_response>
}
 8013278:	bf00      	nop
 801327a:	3708      	adds	r7, #8
 801327c:	46bd      	mov	sp, r7
 801327e:	bd80      	pop	{r7, pc}

08013280 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b082      	sub	sp, #8
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
 8013288:	460b      	mov	r3, r1
 801328a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801328c:	78fb      	ldrb	r3, [r7, #3]
 801328e:	461a      	mov	r2, r3
 8013290:	210b      	movs	r1, #11
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f000 f804 	bl	80132a0 <icmp_send_response>
}
 8013298:	bf00      	nop
 801329a:	3708      	adds	r7, #8
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b08c      	sub	sp, #48	; 0x30
 80132a4:	af04      	add	r7, sp, #16
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	460b      	mov	r3, r1
 80132aa:	70fb      	strb	r3, [r7, #3]
 80132ac:	4613      	mov	r3, r2
 80132ae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80132b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80132b4:	2124      	movs	r1, #36	; 0x24
 80132b6:	2022      	movs	r0, #34	; 0x22
 80132b8:	f7f7 fbd8 	bl	800aa6c <pbuf_alloc>
 80132bc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80132be:	69fb      	ldr	r3, [r7, #28]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d04c      	beq.n	801335e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80132c4:	69fb      	ldr	r3, [r7, #28]
 80132c6:	895b      	ldrh	r3, [r3, #10]
 80132c8:	2b23      	cmp	r3, #35	; 0x23
 80132ca:	d806      	bhi.n	80132da <icmp_send_response+0x3a>
 80132cc:	4b26      	ldr	r3, [pc, #152]	; (8013368 <icmp_send_response+0xc8>)
 80132ce:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80132d2:	4926      	ldr	r1, [pc, #152]	; (801336c <icmp_send_response+0xcc>)
 80132d4:	4826      	ldr	r0, [pc, #152]	; (8013370 <icmp_send_response+0xd0>)
 80132d6:	f001 fe05 	bl	8014ee4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80132e0:	69fb      	ldr	r3, [r7, #28]
 80132e2:	685b      	ldr	r3, [r3, #4]
 80132e4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	78fa      	ldrb	r2, [r7, #3]
 80132ea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	78ba      	ldrb	r2, [r7, #2]
 80132f0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	2200      	movs	r2, #0
 80132f6:	711a      	strb	r2, [r3, #4]
 80132f8:	2200      	movs	r2, #0
 80132fa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80132fc:	697b      	ldr	r3, [r7, #20]
 80132fe:	2200      	movs	r2, #0
 8013300:	719a      	strb	r2, [r3, #6]
 8013302:	2200      	movs	r2, #0
 8013304:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013306:	69fb      	ldr	r3, [r7, #28]
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	f103 0008 	add.w	r0, r3, #8
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	685b      	ldr	r3, [r3, #4]
 8013312:	221c      	movs	r2, #28
 8013314:	4619      	mov	r1, r3
 8013316:	f001 fd25 	bl	8014d64 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801331a:	69bb      	ldr	r3, [r7, #24]
 801331c:	68db      	ldr	r3, [r3, #12]
 801331e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013320:	f107 030c 	add.w	r3, r7, #12
 8013324:	4618      	mov	r0, r3
 8013326:	f000 f825 	bl	8013374 <ip4_route>
 801332a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d011      	beq.n	8013356 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013332:	697b      	ldr	r3, [r7, #20]
 8013334:	2200      	movs	r2, #0
 8013336:	709a      	strb	r2, [r3, #2]
 8013338:	2200      	movs	r2, #0
 801333a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801333c:	f107 020c 	add.w	r2, r7, #12
 8013340:	693b      	ldr	r3, [r7, #16]
 8013342:	9302      	str	r3, [sp, #8]
 8013344:	2301      	movs	r3, #1
 8013346:	9301      	str	r3, [sp, #4]
 8013348:	2300      	movs	r3, #0
 801334a:	9300      	str	r3, [sp, #0]
 801334c:	23ff      	movs	r3, #255	; 0xff
 801334e:	2100      	movs	r1, #0
 8013350:	69f8      	ldr	r0, [r7, #28]
 8013352:	f000 f9cd 	bl	80136f0 <ip4_output_if>
  }
  pbuf_free(q);
 8013356:	69f8      	ldr	r0, [r7, #28]
 8013358:	f7f7 fe6c 	bl	800b034 <pbuf_free>
 801335c:	e000      	b.n	8013360 <icmp_send_response+0xc0>
    return;
 801335e:	bf00      	nop
}
 8013360:	3720      	adds	r7, #32
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}
 8013366:	bf00      	nop
 8013368:	08018df4 	.word	0x08018df4
 801336c:	08018ec0 	.word	0x08018ec0
 8013370:	08018e64 	.word	0x08018e64

08013374 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013374:	b480      	push	{r7}
 8013376:	b085      	sub	sp, #20
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801337c:	4b33      	ldr	r3, [pc, #204]	; (801344c <ip4_route+0xd8>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	60fb      	str	r3, [r7, #12]
 8013382:	e036      	b.n	80133f2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801338a:	f003 0301 	and.w	r3, r3, #1
 801338e:	b2db      	uxtb	r3, r3
 8013390:	2b00      	cmp	r3, #0
 8013392:	d02b      	beq.n	80133ec <ip4_route+0x78>
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801339a:	089b      	lsrs	r3, r3, #2
 801339c:	f003 0301 	and.w	r3, r3, #1
 80133a0:	b2db      	uxtb	r3, r3
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d022      	beq.n	80133ec <ip4_route+0x78>
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	3304      	adds	r3, #4
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d01d      	beq.n	80133ec <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	681a      	ldr	r2, [r3, #0]
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	3304      	adds	r3, #4
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	405a      	eors	r2, r3
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	3308      	adds	r3, #8
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	4013      	ands	r3, r2
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d101      	bne.n	80133cc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	e038      	b.n	801343e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80133d2:	f003 0302 	and.w	r3, r3, #2
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d108      	bne.n	80133ec <ip4_route+0x78>
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681a      	ldr	r2, [r3, #0]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	330c      	adds	r3, #12
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	429a      	cmp	r2, r3
 80133e6:	d101      	bne.n	80133ec <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	e028      	b.n	801343e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	60fb      	str	r3, [r7, #12]
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d1c5      	bne.n	8013384 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80133f8:	4b15      	ldr	r3, [pc, #84]	; (8013450 <ip4_route+0xdc>)
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d01a      	beq.n	8013436 <ip4_route+0xc2>
 8013400:	4b13      	ldr	r3, [pc, #76]	; (8013450 <ip4_route+0xdc>)
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013408:	f003 0301 	and.w	r3, r3, #1
 801340c:	2b00      	cmp	r3, #0
 801340e:	d012      	beq.n	8013436 <ip4_route+0xc2>
 8013410:	4b0f      	ldr	r3, [pc, #60]	; (8013450 <ip4_route+0xdc>)
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013418:	f003 0304 	and.w	r3, r3, #4
 801341c:	2b00      	cmp	r3, #0
 801341e:	d00a      	beq.n	8013436 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013420:	4b0b      	ldr	r3, [pc, #44]	; (8013450 <ip4_route+0xdc>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	3304      	adds	r3, #4
 8013426:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013428:	2b00      	cmp	r3, #0
 801342a:	d004      	beq.n	8013436 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	b2db      	uxtb	r3, r3
 8013432:	2b7f      	cmp	r3, #127	; 0x7f
 8013434:	d101      	bne.n	801343a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013436:	2300      	movs	r3, #0
 8013438:	e001      	b.n	801343e <ip4_route+0xca>
  }

  return netif_default;
 801343a:	4b05      	ldr	r3, [pc, #20]	; (8013450 <ip4_route+0xdc>)
 801343c:	681b      	ldr	r3, [r3, #0]
}
 801343e:	4618      	mov	r0, r3
 8013440:	3714      	adds	r7, #20
 8013442:	46bd      	mov	sp, r7
 8013444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013448:	4770      	bx	lr
 801344a:	bf00      	nop
 801344c:	2000d31c 	.word	0x2000d31c
 8013450:	2000d320 	.word	0x2000d320

08013454 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013462:	f003 0301 	and.w	r3, r3, #1
 8013466:	b2db      	uxtb	r3, r3
 8013468:	2b00      	cmp	r3, #0
 801346a:	d016      	beq.n	801349a <ip4_input_accept+0x46>
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	3304      	adds	r3, #4
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d011      	beq.n	801349a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013476:	4b0b      	ldr	r3, [pc, #44]	; (80134a4 <ip4_input_accept+0x50>)
 8013478:	695a      	ldr	r2, [r3, #20]
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	3304      	adds	r3, #4
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	429a      	cmp	r2, r3
 8013482:	d008      	beq.n	8013496 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013484:	4b07      	ldr	r3, [pc, #28]	; (80134a4 <ip4_input_accept+0x50>)
 8013486:	695b      	ldr	r3, [r3, #20]
 8013488:	6879      	ldr	r1, [r7, #4]
 801348a:	4618      	mov	r0, r3
 801348c:	f000 fa08 	bl	80138a0 <ip4_addr_isbroadcast_u32>
 8013490:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013492:	2b00      	cmp	r3, #0
 8013494:	d001      	beq.n	801349a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013496:	2301      	movs	r3, #1
 8013498:	e000      	b.n	801349c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801349a:	2300      	movs	r3, #0
}
 801349c:	4618      	mov	r0, r3
 801349e:	3708      	adds	r7, #8
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}
 80134a4:	20009c18 	.word	0x20009c18

080134a8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b086      	sub	sp, #24
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
 80134b0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	685b      	ldr	r3, [r3, #4]
 80134b6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	781b      	ldrb	r3, [r3, #0]
 80134bc:	091b      	lsrs	r3, r3, #4
 80134be:	b2db      	uxtb	r3, r3
 80134c0:	2b04      	cmp	r3, #4
 80134c2:	d004      	beq.n	80134ce <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80134c4:	6878      	ldr	r0, [r7, #4]
 80134c6:	f7f7 fdb5 	bl	800b034 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80134ca:	2300      	movs	r3, #0
 80134cc:	e107      	b.n	80136de <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	f003 030f 	and.w	r3, r3, #15
 80134d6:	b2db      	uxtb	r3, r3
 80134d8:	009b      	lsls	r3, r3, #2
 80134da:	b2db      	uxtb	r3, r3
 80134dc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	885b      	ldrh	r3, [r3, #2]
 80134e2:	b29b      	uxth	r3, r3
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7f6 fa5d 	bl	80099a4 <lwip_htons>
 80134ea:	4603      	mov	r3, r0
 80134ec:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	891b      	ldrh	r3, [r3, #8]
 80134f2:	89ba      	ldrh	r2, [r7, #12]
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d204      	bcs.n	8013502 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80134f8:	89bb      	ldrh	r3, [r7, #12]
 80134fa:	4619      	mov	r1, r3
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f7f7 fc13 	bl	800ad28 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	895b      	ldrh	r3, [r3, #10]
 8013506:	89fa      	ldrh	r2, [r7, #14]
 8013508:	429a      	cmp	r2, r3
 801350a:	d807      	bhi.n	801351c <ip4_input+0x74>
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	891b      	ldrh	r3, [r3, #8]
 8013510:	89ba      	ldrh	r2, [r7, #12]
 8013512:	429a      	cmp	r2, r3
 8013514:	d802      	bhi.n	801351c <ip4_input+0x74>
 8013516:	89fb      	ldrh	r3, [r7, #14]
 8013518:	2b13      	cmp	r3, #19
 801351a:	d804      	bhi.n	8013526 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f7f7 fd89 	bl	800b034 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013522:	2300      	movs	r3, #0
 8013524:	e0db      	b.n	80136de <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	691b      	ldr	r3, [r3, #16]
 801352a:	4a6f      	ldr	r2, [pc, #444]	; (80136e8 <ip4_input+0x240>)
 801352c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	68db      	ldr	r3, [r3, #12]
 8013532:	4a6d      	ldr	r2, [pc, #436]	; (80136e8 <ip4_input+0x240>)
 8013534:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013536:	4b6c      	ldr	r3, [pc, #432]	; (80136e8 <ip4_input+0x240>)
 8013538:	695b      	ldr	r3, [r3, #20]
 801353a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801353e:	2be0      	cmp	r3, #224	; 0xe0
 8013540:	d112      	bne.n	8013568 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013548:	f003 0301 	and.w	r3, r3, #1
 801354c:	b2db      	uxtb	r3, r3
 801354e:	2b00      	cmp	r3, #0
 8013550:	d007      	beq.n	8013562 <ip4_input+0xba>
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	3304      	adds	r3, #4
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d002      	beq.n	8013562 <ip4_input+0xba>
      netif = inp;
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	613b      	str	r3, [r7, #16]
 8013560:	e02a      	b.n	80135b8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013562:	2300      	movs	r3, #0
 8013564:	613b      	str	r3, [r7, #16]
 8013566:	e027      	b.n	80135b8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013568:	6838      	ldr	r0, [r7, #0]
 801356a:	f7ff ff73 	bl	8013454 <ip4_input_accept>
 801356e:	4603      	mov	r3, r0
 8013570:	2b00      	cmp	r3, #0
 8013572:	d002      	beq.n	801357a <ip4_input+0xd2>
      netif = inp;
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	613b      	str	r3, [r7, #16]
 8013578:	e01e      	b.n	80135b8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801357a:	2300      	movs	r3, #0
 801357c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801357e:	4b5a      	ldr	r3, [pc, #360]	; (80136e8 <ip4_input+0x240>)
 8013580:	695b      	ldr	r3, [r3, #20]
 8013582:	b2db      	uxtb	r3, r3
 8013584:	2b7f      	cmp	r3, #127	; 0x7f
 8013586:	d017      	beq.n	80135b8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013588:	4b58      	ldr	r3, [pc, #352]	; (80136ec <ip4_input+0x244>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	613b      	str	r3, [r7, #16]
 801358e:	e00e      	b.n	80135ae <ip4_input+0x106>
          if (netif == inp) {
 8013590:	693a      	ldr	r2, [r7, #16]
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	429a      	cmp	r2, r3
 8013596:	d006      	beq.n	80135a6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013598:	6938      	ldr	r0, [r7, #16]
 801359a:	f7ff ff5b 	bl	8013454 <ip4_input_accept>
 801359e:	4603      	mov	r3, r0
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d108      	bne.n	80135b6 <ip4_input+0x10e>
 80135a4:	e000      	b.n	80135a8 <ip4_input+0x100>
            continue;
 80135a6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	613b      	str	r3, [r7, #16]
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d1ed      	bne.n	8013590 <ip4_input+0xe8>
 80135b4:	e000      	b.n	80135b8 <ip4_input+0x110>
            break;
 80135b6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80135b8:	4b4b      	ldr	r3, [pc, #300]	; (80136e8 <ip4_input+0x240>)
 80135ba:	691b      	ldr	r3, [r3, #16]
 80135bc:	6839      	ldr	r1, [r7, #0]
 80135be:	4618      	mov	r0, r3
 80135c0:	f000 f96e 	bl	80138a0 <ip4_addr_isbroadcast_u32>
 80135c4:	4603      	mov	r3, r0
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d105      	bne.n	80135d6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80135ca:	4b47      	ldr	r3, [pc, #284]	; (80136e8 <ip4_input+0x240>)
 80135cc:	691b      	ldr	r3, [r3, #16]
 80135ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80135d2:	2be0      	cmp	r3, #224	; 0xe0
 80135d4:	d104      	bne.n	80135e0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f7f7 fd2c 	bl	800b034 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80135dc:	2300      	movs	r3, #0
 80135de:	e07e      	b.n	80136de <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80135e0:	693b      	ldr	r3, [r7, #16]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d104      	bne.n	80135f0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80135e6:	6878      	ldr	r0, [r7, #4]
 80135e8:	f7f7 fd24 	bl	800b034 <pbuf_free>
    return ERR_OK;
 80135ec:	2300      	movs	r3, #0
 80135ee:	e076      	b.n	80136de <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	88db      	ldrh	r3, [r3, #6]
 80135f4:	b29b      	uxth	r3, r3
 80135f6:	461a      	mov	r2, r3
 80135f8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80135fc:	4013      	ands	r3, r2
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d00b      	beq.n	801361a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f000 fc92 	bl	8013f2c <ip4_reass>
 8013608:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d101      	bne.n	8013614 <ip4_input+0x16c>
      return ERR_OK;
 8013610:	2300      	movs	r3, #0
 8013612:	e064      	b.n	80136de <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	685b      	ldr	r3, [r3, #4]
 8013618:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801361a:	4a33      	ldr	r2, [pc, #204]	; (80136e8 <ip4_input+0x240>)
 801361c:	693b      	ldr	r3, [r7, #16]
 801361e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013620:	4a31      	ldr	r2, [pc, #196]	; (80136e8 <ip4_input+0x240>)
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013626:	4a30      	ldr	r2, [pc, #192]	; (80136e8 <ip4_input+0x240>)
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	f003 030f 	and.w	r3, r3, #15
 8013634:	b2db      	uxtb	r3, r3
 8013636:	009b      	lsls	r3, r3, #2
 8013638:	b2db      	uxtb	r3, r3
 801363a:	b29a      	uxth	r2, r3
 801363c:	4b2a      	ldr	r3, [pc, #168]	; (80136e8 <ip4_input+0x240>)
 801363e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013640:	89fb      	ldrh	r3, [r7, #14]
 8013642:	4619      	mov	r1, r3
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f7f7 fc6f 	bl	800af28 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	7a5b      	ldrb	r3, [r3, #9]
 801364e:	2b11      	cmp	r3, #17
 8013650:	d006      	beq.n	8013660 <ip4_input+0x1b8>
 8013652:	2b11      	cmp	r3, #17
 8013654:	dc13      	bgt.n	801367e <ip4_input+0x1d6>
 8013656:	2b01      	cmp	r3, #1
 8013658:	d00c      	beq.n	8013674 <ip4_input+0x1cc>
 801365a:	2b06      	cmp	r3, #6
 801365c:	d005      	beq.n	801366a <ip4_input+0x1c2>
 801365e:	e00e      	b.n	801367e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013660:	6839      	ldr	r1, [r7, #0]
 8013662:	6878      	ldr	r0, [r7, #4]
 8013664:	f7fe f970 	bl	8011948 <udp_input>
        break;
 8013668:	e026      	b.n	80136b8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801366a:	6839      	ldr	r1, [r7, #0]
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f7f9 fd2d 	bl	800d0cc <tcp_input>
        break;
 8013672:	e021      	b.n	80136b8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013674:	6839      	ldr	r1, [r7, #0]
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f7ff fcee 	bl	8013058 <icmp_input>
        break;
 801367c:	e01c      	b.n	80136b8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801367e:	4b1a      	ldr	r3, [pc, #104]	; (80136e8 <ip4_input+0x240>)
 8013680:	695b      	ldr	r3, [r3, #20]
 8013682:	6939      	ldr	r1, [r7, #16]
 8013684:	4618      	mov	r0, r3
 8013686:	f000 f90b 	bl	80138a0 <ip4_addr_isbroadcast_u32>
 801368a:	4603      	mov	r3, r0
 801368c:	2b00      	cmp	r3, #0
 801368e:	d10f      	bne.n	80136b0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013690:	4b15      	ldr	r3, [pc, #84]	; (80136e8 <ip4_input+0x240>)
 8013692:	695b      	ldr	r3, [r3, #20]
 8013694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013698:	2be0      	cmp	r3, #224	; 0xe0
 801369a:	d009      	beq.n	80136b0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801369c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80136a0:	4619      	mov	r1, r3
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f7f7 fcb3 	bl	800b00e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80136a8:	2102      	movs	r1, #2
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f7ff fdd8 	bl	8013260 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f7f7 fcbf 	bl	800b034 <pbuf_free>
        break;
 80136b6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80136b8:	4b0b      	ldr	r3, [pc, #44]	; (80136e8 <ip4_input+0x240>)
 80136ba:	2200      	movs	r2, #0
 80136bc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80136be:	4b0a      	ldr	r3, [pc, #40]	; (80136e8 <ip4_input+0x240>)
 80136c0:	2200      	movs	r2, #0
 80136c2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80136c4:	4b08      	ldr	r3, [pc, #32]	; (80136e8 <ip4_input+0x240>)
 80136c6:	2200      	movs	r2, #0
 80136c8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80136ca:	4b07      	ldr	r3, [pc, #28]	; (80136e8 <ip4_input+0x240>)
 80136cc:	2200      	movs	r2, #0
 80136ce:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80136d0:	4b05      	ldr	r3, [pc, #20]	; (80136e8 <ip4_input+0x240>)
 80136d2:	2200      	movs	r2, #0
 80136d4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80136d6:	4b04      	ldr	r3, [pc, #16]	; (80136e8 <ip4_input+0x240>)
 80136d8:	2200      	movs	r2, #0
 80136da:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80136dc:	2300      	movs	r3, #0
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3718      	adds	r7, #24
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	20009c18 	.word	0x20009c18
 80136ec:	2000d31c 	.word	0x2000d31c

080136f0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b08a      	sub	sp, #40	; 0x28
 80136f4:	af04      	add	r7, sp, #16
 80136f6:	60f8      	str	r0, [r7, #12]
 80136f8:	60b9      	str	r1, [r7, #8]
 80136fa:	607a      	str	r2, [r7, #4]
 80136fc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80136fe:	68bb      	ldr	r3, [r7, #8]
 8013700:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d009      	beq.n	801371c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d003      	beq.n	8013716 <ip4_output_if+0x26>
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d102      	bne.n	801371c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013718:	3304      	adds	r3, #4
 801371a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801371c:	78fa      	ldrb	r2, [r7, #3]
 801371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013720:	9302      	str	r3, [sp, #8]
 8013722:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013726:	9301      	str	r3, [sp, #4]
 8013728:	f897 3020 	ldrb.w	r3, [r7, #32]
 801372c:	9300      	str	r3, [sp, #0]
 801372e:	4613      	mov	r3, r2
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	6979      	ldr	r1, [r7, #20]
 8013734:	68f8      	ldr	r0, [r7, #12]
 8013736:	f000 f805 	bl	8013744 <ip4_output_if_src>
 801373a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801373c:	4618      	mov	r0, r3
 801373e:	3718      	adds	r7, #24
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}

08013744 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b088      	sub	sp, #32
 8013748:	af00      	add	r7, sp, #0
 801374a:	60f8      	str	r0, [r7, #12]
 801374c:	60b9      	str	r1, [r7, #8]
 801374e:	607a      	str	r2, [r7, #4]
 8013750:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	7b9b      	ldrb	r3, [r3, #14]
 8013756:	2b01      	cmp	r3, #1
 8013758:	d006      	beq.n	8013768 <ip4_output_if_src+0x24>
 801375a:	4b4b      	ldr	r3, [pc, #300]	; (8013888 <ip4_output_if_src+0x144>)
 801375c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013760:	494a      	ldr	r1, [pc, #296]	; (801388c <ip4_output_if_src+0x148>)
 8013762:	484b      	ldr	r0, [pc, #300]	; (8013890 <ip4_output_if_src+0x14c>)
 8013764:	f001 fbbe 	bl	8014ee4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d060      	beq.n	8013830 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801376e:	2314      	movs	r3, #20
 8013770:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013772:	2114      	movs	r1, #20
 8013774:	68f8      	ldr	r0, [r7, #12]
 8013776:	f7f7 fbc7 	bl	800af08 <pbuf_add_header>
 801377a:	4603      	mov	r3, r0
 801377c:	2b00      	cmp	r3, #0
 801377e:	d002      	beq.n	8013786 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013780:	f06f 0301 	mvn.w	r3, #1
 8013784:	e07c      	b.n	8013880 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	685b      	ldr	r3, [r3, #4]
 801378a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	895b      	ldrh	r3, [r3, #10]
 8013790:	2b13      	cmp	r3, #19
 8013792:	d806      	bhi.n	80137a2 <ip4_output_if_src+0x5e>
 8013794:	4b3c      	ldr	r3, [pc, #240]	; (8013888 <ip4_output_if_src+0x144>)
 8013796:	f44f 7262 	mov.w	r2, #904	; 0x388
 801379a:	493e      	ldr	r1, [pc, #248]	; (8013894 <ip4_output_if_src+0x150>)
 801379c:	483c      	ldr	r0, [pc, #240]	; (8013890 <ip4_output_if_src+0x14c>)
 801379e:	f001 fba1 	bl	8014ee4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80137a2:	69fb      	ldr	r3, [r7, #28]
 80137a4:	78fa      	ldrb	r2, [r7, #3]
 80137a6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80137a8:	69fb      	ldr	r3, [r7, #28]
 80137aa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80137ae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681a      	ldr	r2, [r3, #0]
 80137b4:	69fb      	ldr	r3, [r7, #28]
 80137b6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80137b8:	8b7b      	ldrh	r3, [r7, #26]
 80137ba:	089b      	lsrs	r3, r3, #2
 80137bc:	b29b      	uxth	r3, r3
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137c4:	b2da      	uxtb	r2, r3
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80137ca:	69fb      	ldr	r3, [r7, #28]
 80137cc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80137d0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	891b      	ldrh	r3, [r3, #8]
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7f6 f8e4 	bl	80099a4 <lwip_htons>
 80137dc:	4603      	mov	r3, r0
 80137de:	461a      	mov	r2, r3
 80137e0:	69fb      	ldr	r3, [r7, #28]
 80137e2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80137e4:	69fb      	ldr	r3, [r7, #28]
 80137e6:	2200      	movs	r2, #0
 80137e8:	719a      	strb	r2, [r3, #6]
 80137ea:	2200      	movs	r2, #0
 80137ec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80137ee:	4b2a      	ldr	r3, [pc, #168]	; (8013898 <ip4_output_if_src+0x154>)
 80137f0:	881b      	ldrh	r3, [r3, #0]
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7f6 f8d6 	bl	80099a4 <lwip_htons>
 80137f8:	4603      	mov	r3, r0
 80137fa:	461a      	mov	r2, r3
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013800:	4b25      	ldr	r3, [pc, #148]	; (8013898 <ip4_output_if_src+0x154>)
 8013802:	881b      	ldrh	r3, [r3, #0]
 8013804:	3301      	adds	r3, #1
 8013806:	b29a      	uxth	r2, r3
 8013808:	4b23      	ldr	r3, [pc, #140]	; (8013898 <ip4_output_if_src+0x154>)
 801380a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d104      	bne.n	801381c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013812:	4b22      	ldr	r3, [pc, #136]	; (801389c <ip4_output_if_src+0x158>)
 8013814:	681a      	ldr	r2, [r3, #0]
 8013816:	69fb      	ldr	r3, [r7, #28]
 8013818:	60da      	str	r2, [r3, #12]
 801381a:	e003      	b.n	8013824 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	681a      	ldr	r2, [r3, #0]
 8013820:	69fb      	ldr	r3, [r7, #28]
 8013822:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013824:	69fb      	ldr	r3, [r7, #28]
 8013826:	2200      	movs	r2, #0
 8013828:	729a      	strb	r2, [r3, #10]
 801382a:	2200      	movs	r2, #0
 801382c:	72da      	strb	r2, [r3, #11]
 801382e:	e00f      	b.n	8013850 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	895b      	ldrh	r3, [r3, #10]
 8013834:	2b13      	cmp	r3, #19
 8013836:	d802      	bhi.n	801383e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013838:	f06f 0301 	mvn.w	r3, #1
 801383c:	e020      	b.n	8013880 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	685b      	ldr	r3, [r3, #4]
 8013842:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013844:	69fb      	ldr	r3, [r7, #28]
 8013846:	691b      	ldr	r3, [r3, #16]
 8013848:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801384a:	f107 0314 	add.w	r3, r7, #20
 801384e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013852:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013854:	2b00      	cmp	r3, #0
 8013856:	d00c      	beq.n	8013872 <ip4_output_if_src+0x12e>
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	891a      	ldrh	r2, [r3, #8]
 801385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801385e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013860:	429a      	cmp	r2, r3
 8013862:	d906      	bls.n	8013872 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013864:	687a      	ldr	r2, [r7, #4]
 8013866:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013868:	68f8      	ldr	r0, [r7, #12]
 801386a:	f000 fd4d 	bl	8014308 <ip4_frag>
 801386e:	4603      	mov	r3, r0
 8013870:	e006      	b.n	8013880 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013874:	695b      	ldr	r3, [r3, #20]
 8013876:	687a      	ldr	r2, [r7, #4]
 8013878:	68f9      	ldr	r1, [r7, #12]
 801387a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801387c:	4798      	blx	r3
 801387e:	4603      	mov	r3, r0
}
 8013880:	4618      	mov	r0, r3
 8013882:	3720      	adds	r7, #32
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}
 8013888:	08018eec 	.word	0x08018eec
 801388c:	08018f20 	.word	0x08018f20
 8013890:	08018f2c 	.word	0x08018f2c
 8013894:	08018f54 	.word	0x08018f54
 8013898:	2000697a 	.word	0x2000697a
 801389c:	0801936c 	.word	0x0801936c

080138a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80138a0:	b480      	push	{r7}
 80138a2:	b085      	sub	sp, #20
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138b4:	d002      	beq.n	80138bc <ip4_addr_isbroadcast_u32+0x1c>
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d101      	bne.n	80138c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80138bc:	2301      	movs	r3, #1
 80138be:	e02a      	b.n	8013916 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80138c6:	f003 0302 	and.w	r3, r3, #2
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d101      	bne.n	80138d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80138ce:	2300      	movs	r3, #0
 80138d0:	e021      	b.n	8013916 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	3304      	adds	r3, #4
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	687a      	ldr	r2, [r7, #4]
 80138da:	429a      	cmp	r2, r3
 80138dc:	d101      	bne.n	80138e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80138de:	2300      	movs	r3, #0
 80138e0:	e019      	b.n	8013916 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80138e2:	68fa      	ldr	r2, [r7, #12]
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	3304      	adds	r3, #4
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	405a      	eors	r2, r3
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	3308      	adds	r3, #8
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	4013      	ands	r3, r2
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d10d      	bne.n	8013914 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	3308      	adds	r3, #8
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	43da      	mvns	r2, r3
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	3308      	adds	r3, #8
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801390c:	429a      	cmp	r2, r3
 801390e:	d101      	bne.n	8013914 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013910:	2301      	movs	r3, #1
 8013912:	e000      	b.n	8013916 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013914:	2300      	movs	r3, #0
  }
}
 8013916:	4618      	mov	r0, r3
 8013918:	3714      	adds	r7, #20
 801391a:	46bd      	mov	sp, r7
 801391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013920:	4770      	bx	lr
	...

08013924 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b084      	sub	sp, #16
 8013928:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801392a:	2300      	movs	r3, #0
 801392c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801392e:	4b12      	ldr	r3, [pc, #72]	; (8013978 <ip_reass_tmr+0x54>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013934:	e018      	b.n	8013968 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	7fdb      	ldrb	r3, [r3, #31]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d00b      	beq.n	8013956 <ip_reass_tmr+0x32>
      r->timer--;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	7fdb      	ldrb	r3, [r3, #31]
 8013942:	3b01      	subs	r3, #1
 8013944:	b2da      	uxtb	r2, r3
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	60fb      	str	r3, [r7, #12]
 8013954:	e008      	b.n	8013968 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013960:	68b9      	ldr	r1, [r7, #8]
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	f000 f80a 	bl	801397c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d1e3      	bne.n	8013936 <ip_reass_tmr+0x12>
    }
  }
}
 801396e:	bf00      	nop
 8013970:	bf00      	nop
 8013972:	3710      	adds	r7, #16
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}
 8013978:	2000697c 	.word	0x2000697c

0801397c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b088      	sub	sp, #32
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013986:	2300      	movs	r3, #0
 8013988:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801398a:	683a      	ldr	r2, [r7, #0]
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	429a      	cmp	r2, r3
 8013990:	d105      	bne.n	801399e <ip_reass_free_complete_datagram+0x22>
 8013992:	4b45      	ldr	r3, [pc, #276]	; (8013aa8 <ip_reass_free_complete_datagram+0x12c>)
 8013994:	22ab      	movs	r2, #171	; 0xab
 8013996:	4945      	ldr	r1, [pc, #276]	; (8013aac <ip_reass_free_complete_datagram+0x130>)
 8013998:	4845      	ldr	r0, [pc, #276]	; (8013ab0 <ip_reass_free_complete_datagram+0x134>)
 801399a:	f001 faa3 	bl	8014ee4 <iprintf>
  if (prev != NULL) {
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d00a      	beq.n	80139ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	687a      	ldr	r2, [r7, #4]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d005      	beq.n	80139ba <ip_reass_free_complete_datagram+0x3e>
 80139ae:	4b3e      	ldr	r3, [pc, #248]	; (8013aa8 <ip_reass_free_complete_datagram+0x12c>)
 80139b0:	22ad      	movs	r2, #173	; 0xad
 80139b2:	4940      	ldr	r1, [pc, #256]	; (8013ab4 <ip_reass_free_complete_datagram+0x138>)
 80139b4:	483e      	ldr	r0, [pc, #248]	; (8013ab0 <ip_reass_free_complete_datagram+0x134>)
 80139b6:	f001 fa95 	bl	8014ee4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	685b      	ldr	r3, [r3, #4]
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80139c2:	697b      	ldr	r3, [r7, #20]
 80139c4:	889b      	ldrh	r3, [r3, #4]
 80139c6:	b29b      	uxth	r3, r3
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d12a      	bne.n	8013a22 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	685b      	ldr	r3, [r3, #4]
 80139d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80139d2:	697b      	ldr	r3, [r7, #20]
 80139d4:	681a      	ldr	r2, [r3, #0]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80139da:	69bb      	ldr	r3, [r7, #24]
 80139dc:	6858      	ldr	r0, [r3, #4]
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	3308      	adds	r3, #8
 80139e2:	2214      	movs	r2, #20
 80139e4:	4619      	mov	r1, r3
 80139e6:	f001 f9bd 	bl	8014d64 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80139ea:	2101      	movs	r1, #1
 80139ec:	69b8      	ldr	r0, [r7, #24]
 80139ee:	f7ff fc47 	bl	8013280 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80139f2:	69b8      	ldr	r0, [r7, #24]
 80139f4:	f7f7 fbac 	bl	800b150 <pbuf_clen>
 80139f8:	4603      	mov	r3, r0
 80139fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80139fc:	8bfa      	ldrh	r2, [r7, #30]
 80139fe:	8a7b      	ldrh	r3, [r7, #18]
 8013a00:	4413      	add	r3, r2
 8013a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a06:	db05      	blt.n	8013a14 <ip_reass_free_complete_datagram+0x98>
 8013a08:	4b27      	ldr	r3, [pc, #156]	; (8013aa8 <ip_reass_free_complete_datagram+0x12c>)
 8013a0a:	22bc      	movs	r2, #188	; 0xbc
 8013a0c:	492a      	ldr	r1, [pc, #168]	; (8013ab8 <ip_reass_free_complete_datagram+0x13c>)
 8013a0e:	4828      	ldr	r0, [pc, #160]	; (8013ab0 <ip_reass_free_complete_datagram+0x134>)
 8013a10:	f001 fa68 	bl	8014ee4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013a14:	8bfa      	ldrh	r2, [r7, #30]
 8013a16:	8a7b      	ldrh	r3, [r7, #18]
 8013a18:	4413      	add	r3, r2
 8013a1a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013a1c:	69b8      	ldr	r0, [r7, #24]
 8013a1e:	f7f7 fb09 	bl	800b034 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	685b      	ldr	r3, [r3, #4]
 8013a26:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013a28:	e01f      	b.n	8013a6a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013a2a:	69bb      	ldr	r3, [r7, #24]
 8013a2c:	685b      	ldr	r3, [r3, #4]
 8013a2e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013a30:	69bb      	ldr	r3, [r7, #24]
 8013a32:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013a3a:	68f8      	ldr	r0, [r7, #12]
 8013a3c:	f7f7 fb88 	bl	800b150 <pbuf_clen>
 8013a40:	4603      	mov	r3, r0
 8013a42:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013a44:	8bfa      	ldrh	r2, [r7, #30]
 8013a46:	8a7b      	ldrh	r3, [r7, #18]
 8013a48:	4413      	add	r3, r2
 8013a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a4e:	db05      	blt.n	8013a5c <ip_reass_free_complete_datagram+0xe0>
 8013a50:	4b15      	ldr	r3, [pc, #84]	; (8013aa8 <ip_reass_free_complete_datagram+0x12c>)
 8013a52:	22cc      	movs	r2, #204	; 0xcc
 8013a54:	4918      	ldr	r1, [pc, #96]	; (8013ab8 <ip_reass_free_complete_datagram+0x13c>)
 8013a56:	4816      	ldr	r0, [pc, #88]	; (8013ab0 <ip_reass_free_complete_datagram+0x134>)
 8013a58:	f001 fa44 	bl	8014ee4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013a5c:	8bfa      	ldrh	r2, [r7, #30]
 8013a5e:	8a7b      	ldrh	r3, [r7, #18]
 8013a60:	4413      	add	r3, r2
 8013a62:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013a64:	68f8      	ldr	r0, [r7, #12]
 8013a66:	f7f7 fae5 	bl	800b034 <pbuf_free>
  while (p != NULL) {
 8013a6a:	69bb      	ldr	r3, [r7, #24]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d1dc      	bne.n	8013a2a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013a70:	6839      	ldr	r1, [r7, #0]
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f000 f8c2 	bl	8013bfc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013a78:	4b10      	ldr	r3, [pc, #64]	; (8013abc <ip_reass_free_complete_datagram+0x140>)
 8013a7a:	881b      	ldrh	r3, [r3, #0]
 8013a7c:	8bfa      	ldrh	r2, [r7, #30]
 8013a7e:	429a      	cmp	r2, r3
 8013a80:	d905      	bls.n	8013a8e <ip_reass_free_complete_datagram+0x112>
 8013a82:	4b09      	ldr	r3, [pc, #36]	; (8013aa8 <ip_reass_free_complete_datagram+0x12c>)
 8013a84:	22d2      	movs	r2, #210	; 0xd2
 8013a86:	490e      	ldr	r1, [pc, #56]	; (8013ac0 <ip_reass_free_complete_datagram+0x144>)
 8013a88:	4809      	ldr	r0, [pc, #36]	; (8013ab0 <ip_reass_free_complete_datagram+0x134>)
 8013a8a:	f001 fa2b 	bl	8014ee4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013a8e:	4b0b      	ldr	r3, [pc, #44]	; (8013abc <ip_reass_free_complete_datagram+0x140>)
 8013a90:	881a      	ldrh	r2, [r3, #0]
 8013a92:	8bfb      	ldrh	r3, [r7, #30]
 8013a94:	1ad3      	subs	r3, r2, r3
 8013a96:	b29a      	uxth	r2, r3
 8013a98:	4b08      	ldr	r3, [pc, #32]	; (8013abc <ip_reass_free_complete_datagram+0x140>)
 8013a9a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013a9c:	8bfb      	ldrh	r3, [r7, #30]
}
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	3720      	adds	r7, #32
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	08018f84 	.word	0x08018f84
 8013aac:	08018fc0 	.word	0x08018fc0
 8013ab0:	08018fcc 	.word	0x08018fcc
 8013ab4:	08018ff4 	.word	0x08018ff4
 8013ab8:	08019008 	.word	0x08019008
 8013abc:	20006980 	.word	0x20006980
 8013ac0:	08019028 	.word	0x08019028

08013ac4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b08a      	sub	sp, #40	; 0x28
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
 8013acc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013ada:	2300      	movs	r3, #0
 8013adc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013ae2:	4b28      	ldr	r3, [pc, #160]	; (8013b84 <ip_reass_remove_oldest_datagram+0xc0>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013ae8:	e030      	b.n	8013b4c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aec:	695a      	ldr	r2, [r3, #20]
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	68db      	ldr	r3, [r3, #12]
 8013af2:	429a      	cmp	r2, r3
 8013af4:	d10c      	bne.n	8013b10 <ip_reass_remove_oldest_datagram+0x4c>
 8013af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af8:	699a      	ldr	r2, [r3, #24]
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	691b      	ldr	r3, [r3, #16]
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d106      	bne.n	8013b10 <ip_reass_remove_oldest_datagram+0x4c>
 8013b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b04:	899a      	ldrh	r2, [r3, #12]
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	889b      	ldrh	r3, [r3, #4]
 8013b0a:	b29b      	uxth	r3, r3
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d014      	beq.n	8013b3a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	3301      	adds	r3, #1
 8013b14:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013b16:	6a3b      	ldr	r3, [r7, #32]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d104      	bne.n	8013b26 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013b20:	69fb      	ldr	r3, [r7, #28]
 8013b22:	61bb      	str	r3, [r7, #24]
 8013b24:	e009      	b.n	8013b3a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b28:	7fda      	ldrb	r2, [r3, #31]
 8013b2a:	6a3b      	ldr	r3, [r7, #32]
 8013b2c:	7fdb      	ldrb	r3, [r3, #31]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d803      	bhi.n	8013b3a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b34:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013b36:	69fb      	ldr	r3, [r7, #28]
 8013b38:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d001      	beq.n	8013b46 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b44:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d1cb      	bne.n	8013aea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013b52:	6a3b      	ldr	r3, [r7, #32]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d008      	beq.n	8013b6a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013b58:	69b9      	ldr	r1, [r7, #24]
 8013b5a:	6a38      	ldr	r0, [r7, #32]
 8013b5c:	f7ff ff0e 	bl	801397c <ip_reass_free_complete_datagram>
 8013b60:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013b62:	697a      	ldr	r2, [r7, #20]
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	4413      	add	r3, r2
 8013b68:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013b6a:	697a      	ldr	r2, [r7, #20]
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	da02      	bge.n	8013b78 <ip_reass_remove_oldest_datagram+0xb4>
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	dcac      	bgt.n	8013ad2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013b78:	697b      	ldr	r3, [r7, #20]
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3728      	adds	r7, #40	; 0x28
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}
 8013b82:	bf00      	nop
 8013b84:	2000697c 	.word	0x2000697c

08013b88 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b084      	sub	sp, #16
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013b92:	2004      	movs	r0, #4
 8013b94:	f7f6 fbbc 	bl	800a310 <memp_malloc>
 8013b98:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d110      	bne.n	8013bc2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013ba0:	6839      	ldr	r1, [r7, #0]
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f7ff ff8e 	bl	8013ac4 <ip_reass_remove_oldest_datagram>
 8013ba8:	4602      	mov	r2, r0
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	4293      	cmp	r3, r2
 8013bae:	dc03      	bgt.n	8013bb8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013bb0:	2004      	movs	r0, #4
 8013bb2:	f7f6 fbad 	bl	800a310 <memp_malloc>
 8013bb6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d101      	bne.n	8013bc2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	e016      	b.n	8013bf0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013bc2:	2220      	movs	r2, #32
 8013bc4:	2100      	movs	r1, #0
 8013bc6:	68f8      	ldr	r0, [r7, #12]
 8013bc8:	f001 f8da 	bl	8014d80 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	220f      	movs	r2, #15
 8013bd0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013bd2:	4b09      	ldr	r3, [pc, #36]	; (8013bf8 <ip_reass_enqueue_new_datagram+0x70>)
 8013bd4:	681a      	ldr	r2, [r3, #0]
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013bda:	4a07      	ldr	r2, [pc, #28]	; (8013bf8 <ip_reass_enqueue_new_datagram+0x70>)
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	3308      	adds	r3, #8
 8013be4:	2214      	movs	r2, #20
 8013be6:	6879      	ldr	r1, [r7, #4]
 8013be8:	4618      	mov	r0, r3
 8013bea:	f001 f8bb 	bl	8014d64 <memcpy>
  return ipr;
 8013bee:	68fb      	ldr	r3, [r7, #12]
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3710      	adds	r7, #16
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}
 8013bf8:	2000697c 	.word	0x2000697c

08013bfc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013c06:	4b10      	ldr	r3, [pc, #64]	; (8013c48 <ip_reass_dequeue_datagram+0x4c>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	687a      	ldr	r2, [r7, #4]
 8013c0c:	429a      	cmp	r2, r3
 8013c0e:	d104      	bne.n	8013c1a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	4a0c      	ldr	r2, [pc, #48]	; (8013c48 <ip_reass_dequeue_datagram+0x4c>)
 8013c16:	6013      	str	r3, [r2, #0]
 8013c18:	e00d      	b.n	8013c36 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d106      	bne.n	8013c2e <ip_reass_dequeue_datagram+0x32>
 8013c20:	4b0a      	ldr	r3, [pc, #40]	; (8013c4c <ip_reass_dequeue_datagram+0x50>)
 8013c22:	f240 1245 	movw	r2, #325	; 0x145
 8013c26:	490a      	ldr	r1, [pc, #40]	; (8013c50 <ip_reass_dequeue_datagram+0x54>)
 8013c28:	480a      	ldr	r0, [pc, #40]	; (8013c54 <ip_reass_dequeue_datagram+0x58>)
 8013c2a:	f001 f95b 	bl	8014ee4 <iprintf>
    prev->next = ipr->next;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013c36:	6879      	ldr	r1, [r7, #4]
 8013c38:	2004      	movs	r0, #4
 8013c3a:	f7f6 fbbb 	bl	800a3b4 <memp_free>
}
 8013c3e:	bf00      	nop
 8013c40:	3708      	adds	r7, #8
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}
 8013c46:	bf00      	nop
 8013c48:	2000697c 	.word	0x2000697c
 8013c4c:	08018f84 	.word	0x08018f84
 8013c50:	0801904c 	.word	0x0801904c
 8013c54:	08018fcc 	.word	0x08018fcc

08013c58 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b08c      	sub	sp, #48	; 0x30
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	60f8      	str	r0, [r7, #12]
 8013c60:	60b9      	str	r1, [r7, #8]
 8013c62:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013c64:	2300      	movs	r3, #0
 8013c66:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013c6c:	68bb      	ldr	r3, [r7, #8]
 8013c6e:	685b      	ldr	r3, [r3, #4]
 8013c70:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013c72:	69fb      	ldr	r3, [r7, #28]
 8013c74:	885b      	ldrh	r3, [r3, #2]
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7f5 fe93 	bl	80099a4 <lwip_htons>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013c82:	69fb      	ldr	r3, [r7, #28]
 8013c84:	781b      	ldrb	r3, [r3, #0]
 8013c86:	f003 030f 	and.w	r3, r3, #15
 8013c8a:	b2db      	uxtb	r3, r3
 8013c8c:	009b      	lsls	r3, r3, #2
 8013c8e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013c90:	7e7b      	ldrb	r3, [r7, #25]
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	8b7a      	ldrh	r2, [r7, #26]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d202      	bcs.n	8013ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8013c9e:	e135      	b.n	8013f0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013ca0:	7e7b      	ldrb	r3, [r7, #25]
 8013ca2:	b29b      	uxth	r3, r3
 8013ca4:	8b7a      	ldrh	r2, [r7, #26]
 8013ca6:	1ad3      	subs	r3, r2, r3
 8013ca8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013caa:	69fb      	ldr	r3, [r7, #28]
 8013cac:	88db      	ldrh	r3, [r3, #6]
 8013cae:	b29b      	uxth	r3, r3
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f7f5 fe77 	bl	80099a4 <lwip_htons>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	00db      	lsls	r3, r3, #3
 8013cc0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	685b      	ldr	r3, [r3, #4]
 8013cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cca:	2200      	movs	r2, #0
 8013ccc:	701a      	strb	r2, [r3, #0]
 8013cce:	2200      	movs	r2, #0
 8013cd0:	705a      	strb	r2, [r3, #1]
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	709a      	strb	r2, [r3, #2]
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cdc:	8afa      	ldrh	r2, [r7, #22]
 8013cde:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013ce0:	8afa      	ldrh	r2, [r7, #22]
 8013ce2:	8b7b      	ldrh	r3, [r7, #26]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	b29a      	uxth	r2, r3
 8013ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cee:	88db      	ldrh	r3, [r3, #6]
 8013cf0:	b29b      	uxth	r3, r3
 8013cf2:	8afa      	ldrh	r2, [r7, #22]
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d902      	bls.n	8013cfe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8013cfc:	e106      	b.n	8013f0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	685b      	ldr	r3, [r3, #4]
 8013d02:	627b      	str	r3, [r7, #36]	; 0x24
 8013d04:	e068      	b.n	8013dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d08:	685b      	ldr	r3, [r3, #4]
 8013d0a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d0e:	889b      	ldrh	r3, [r3, #4]
 8013d10:	b29a      	uxth	r2, r3
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	889b      	ldrh	r3, [r3, #4]
 8013d16:	b29b      	uxth	r3, r3
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d235      	bcs.n	8013d88 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d20:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d020      	beq.n	8013d6a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d2a:	889b      	ldrh	r3, [r3, #4]
 8013d2c:	b29a      	uxth	r2, r3
 8013d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d30:	88db      	ldrh	r3, [r3, #6]
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d307      	bcc.n	8013d48 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d3a:	88db      	ldrh	r3, [r3, #6]
 8013d3c:	b29a      	uxth	r2, r3
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	889b      	ldrh	r3, [r3, #4]
 8013d42:	b29b      	uxth	r3, r3
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d902      	bls.n	8013d4e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013d48:	f04f 33ff 	mov.w	r3, #4294967295
 8013d4c:	e0de      	b.n	8013f0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d50:	68ba      	ldr	r2, [r7, #8]
 8013d52:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d56:	88db      	ldrh	r3, [r3, #6]
 8013d58:	b29a      	uxth	r2, r3
 8013d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5c:	889b      	ldrh	r3, [r3, #4]
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d03d      	beq.n	8013de0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013d64:	2300      	movs	r3, #0
 8013d66:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013d68:	e03a      	b.n	8013de0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6c:	88db      	ldrh	r3, [r3, #6]
 8013d6e:	b29a      	uxth	r2, r3
 8013d70:	693b      	ldr	r3, [r7, #16]
 8013d72:	889b      	ldrh	r3, [r3, #4]
 8013d74:	b29b      	uxth	r3, r3
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d902      	bls.n	8013d80 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8013d7e:	e0c5      	b.n	8013f0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	68ba      	ldr	r2, [r7, #8]
 8013d84:	605a      	str	r2, [r3, #4]
      break;
 8013d86:	e02b      	b.n	8013de0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d8a:	889b      	ldrh	r3, [r3, #4]
 8013d8c:	b29a      	uxth	r2, r3
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	889b      	ldrh	r3, [r3, #4]
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d102      	bne.n	8013d9e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013d98:	f04f 33ff 	mov.w	r3, #4294967295
 8013d9c:	e0b6      	b.n	8013f0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da0:	889b      	ldrh	r3, [r3, #4]
 8013da2:	b29a      	uxth	r2, r3
 8013da4:	693b      	ldr	r3, [r7, #16]
 8013da6:	88db      	ldrh	r3, [r3, #6]
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d202      	bcs.n	8013db4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013dae:	f04f 33ff 	mov.w	r3, #4294967295
 8013db2:	e0ab      	b.n	8013f0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d009      	beq.n	8013dce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dbc:	88db      	ldrh	r3, [r3, #6]
 8013dbe:	b29a      	uxth	r2, r3
 8013dc0:	693b      	ldr	r3, [r7, #16]
 8013dc2:	889b      	ldrh	r3, [r3, #4]
 8013dc4:	b29b      	uxth	r3, r3
 8013dc6:	429a      	cmp	r2, r3
 8013dc8:	d001      	beq.n	8013dce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d193      	bne.n	8013d06 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013dde:	e000      	b.n	8013de2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013de0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d12d      	bne.n	8013e44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d01c      	beq.n	8013e28 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013df0:	88db      	ldrh	r3, [r3, #6]
 8013df2:	b29a      	uxth	r2, r3
 8013df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df6:	889b      	ldrh	r3, [r3, #4]
 8013df8:	b29b      	uxth	r3, r3
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d906      	bls.n	8013e0c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013dfe:	4b45      	ldr	r3, [pc, #276]	; (8013f14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013e00:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013e04:	4944      	ldr	r1, [pc, #272]	; (8013f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013e06:	4845      	ldr	r0, [pc, #276]	; (8013f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013e08:	f001 f86c 	bl	8014ee4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e0e:	68ba      	ldr	r2, [r7, #8]
 8013e10:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e14:	88db      	ldrh	r3, [r3, #6]
 8013e16:	b29a      	uxth	r2, r3
 8013e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e1a:	889b      	ldrh	r3, [r3, #4]
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d010      	beq.n	8013e44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013e22:	2300      	movs	r3, #0
 8013e24:	623b      	str	r3, [r7, #32]
 8013e26:	e00d      	b.n	8013e44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	685b      	ldr	r3, [r3, #4]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d006      	beq.n	8013e3e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013e30:	4b38      	ldr	r3, [pc, #224]	; (8013f14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013e32:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013e36:	493a      	ldr	r1, [pc, #232]	; (8013f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013e38:	4838      	ldr	r0, [pc, #224]	; (8013f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013e3a:	f001 f853 	bl	8014ee4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	68ba      	ldr	r2, [r7, #8]
 8013e42:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d105      	bne.n	8013e56 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	7f9b      	ldrb	r3, [r3, #30]
 8013e4e:	f003 0301 	and.w	r3, r3, #1
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d059      	beq.n	8013f0a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013e56:	6a3b      	ldr	r3, [r7, #32]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d04f      	beq.n	8013efc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	685b      	ldr	r3, [r3, #4]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d006      	beq.n	8013e72 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	889b      	ldrh	r3, [r3, #4]
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d002      	beq.n	8013e78 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013e72:	2300      	movs	r3, #0
 8013e74:	623b      	str	r3, [r7, #32]
 8013e76:	e041      	b.n	8013efc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e7a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013e82:	e012      	b.n	8013eaa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e86:	685b      	ldr	r3, [r3, #4]
 8013e88:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e8c:	88db      	ldrh	r3, [r3, #6]
 8013e8e:	b29a      	uxth	r2, r3
 8013e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e92:	889b      	ldrh	r3, [r3, #4]
 8013e94:	b29b      	uxth	r3, r3
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d002      	beq.n	8013ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	623b      	str	r3, [r7, #32]
            break;
 8013e9e:	e007      	b.n	8013eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d1e9      	bne.n	8013e84 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013eb0:	6a3b      	ldr	r3, [r7, #32]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d022      	beq.n	8013efc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	685b      	ldr	r3, [r3, #4]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d106      	bne.n	8013ecc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013ebe:	4b15      	ldr	r3, [pc, #84]	; (8013f14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013ec0:	f240 12df 	movw	r2, #479	; 0x1df
 8013ec4:	4917      	ldr	r1, [pc, #92]	; (8013f24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013ec6:	4815      	ldr	r0, [pc, #84]	; (8013f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013ec8:	f001 f80c 	bl	8014ee4 <iprintf>
          LWIP_ASSERT("sanity check",
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	685b      	ldr	r3, [r3, #4]
 8013ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ed4:	429a      	cmp	r2, r3
 8013ed6:	d106      	bne.n	8013ee6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013ed8:	4b0e      	ldr	r3, [pc, #56]	; (8013f14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013eda:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013ede:	4911      	ldr	r1, [pc, #68]	; (8013f24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013ee0:	480e      	ldr	r0, [pc, #56]	; (8013f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013ee2:	f000 ffff 	bl	8014ee4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d006      	beq.n	8013efc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013eee:	4b09      	ldr	r3, [pc, #36]	; (8013f14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013ef0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013ef4:	490c      	ldr	r1, [pc, #48]	; (8013f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013ef6:	4809      	ldr	r0, [pc, #36]	; (8013f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013ef8:	f000 fff4 	bl	8014ee4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013efc:	6a3b      	ldr	r3, [r7, #32]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	bf14      	ite	ne
 8013f02:	2301      	movne	r3, #1
 8013f04:	2300      	moveq	r3, #0
 8013f06:	b2db      	uxtb	r3, r3
 8013f08:	e000      	b.n	8013f0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013f0a:	2300      	movs	r3, #0
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3730      	adds	r7, #48	; 0x30
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}
 8013f14:	08018f84 	.word	0x08018f84
 8013f18:	08019068 	.word	0x08019068
 8013f1c:	08018fcc 	.word	0x08018fcc
 8013f20:	08019088 	.word	0x08019088
 8013f24:	080190c0 	.word	0x080190c0
 8013f28:	080190d0 	.word	0x080190d0

08013f2c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b08e      	sub	sp, #56	; 0x38
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	685b      	ldr	r3, [r3, #4]
 8013f38:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	f003 030f 	and.w	r3, r3, #15
 8013f42:	b2db      	uxtb	r3, r3
 8013f44:	009b      	lsls	r3, r3, #2
 8013f46:	b2db      	uxtb	r3, r3
 8013f48:	2b14      	cmp	r3, #20
 8013f4a:	f040 8167 	bne.w	801421c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f50:	88db      	ldrh	r3, [r3, #6]
 8013f52:	b29b      	uxth	r3, r3
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7f5 fd25 	bl	80099a4 <lwip_htons>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013f60:	b29b      	uxth	r3, r3
 8013f62:	00db      	lsls	r3, r3, #3
 8013f64:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f68:	885b      	ldrh	r3, [r3, #2]
 8013f6a:	b29b      	uxth	r3, r3
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f7f5 fd19 	bl	80099a4 <lwip_htons>
 8013f72:	4603      	mov	r3, r0
 8013f74:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	f003 030f 	and.w	r3, r3, #15
 8013f7e:	b2db      	uxtb	r3, r3
 8013f80:	009b      	lsls	r3, r3, #2
 8013f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013f86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013f8a:	b29b      	uxth	r3, r3
 8013f8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013f8e:	429a      	cmp	r2, r3
 8013f90:	f0c0 8146 	bcc.w	8014220 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013f94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013f98:	b29b      	uxth	r3, r3
 8013f9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013f9c:	1ad3      	subs	r3, r2, r3
 8013f9e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013fa0:	6878      	ldr	r0, [r7, #4]
 8013fa2:	f7f7 f8d5 	bl	800b150 <pbuf_clen>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013faa:	4b9f      	ldr	r3, [pc, #636]	; (8014228 <ip4_reass+0x2fc>)
 8013fac:	881b      	ldrh	r3, [r3, #0]
 8013fae:	461a      	mov	r2, r3
 8013fb0:	8c3b      	ldrh	r3, [r7, #32]
 8013fb2:	4413      	add	r3, r2
 8013fb4:	2b0a      	cmp	r3, #10
 8013fb6:	dd10      	ble.n	8013fda <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013fb8:	8c3b      	ldrh	r3, [r7, #32]
 8013fba:	4619      	mov	r1, r3
 8013fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fbe:	f7ff fd81 	bl	8013ac4 <ip_reass_remove_oldest_datagram>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	f000 812d 	beq.w	8014224 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013fca:	4b97      	ldr	r3, [pc, #604]	; (8014228 <ip4_reass+0x2fc>)
 8013fcc:	881b      	ldrh	r3, [r3, #0]
 8013fce:	461a      	mov	r2, r3
 8013fd0:	8c3b      	ldrh	r3, [r7, #32]
 8013fd2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013fd4:	2b0a      	cmp	r3, #10
 8013fd6:	f300 8125 	bgt.w	8014224 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013fda:	4b94      	ldr	r3, [pc, #592]	; (801422c <ip4_reass+0x300>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	633b      	str	r3, [r7, #48]	; 0x30
 8013fe0:	e015      	b.n	801400e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe4:	695a      	ldr	r2, [r3, #20]
 8013fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe8:	68db      	ldr	r3, [r3, #12]
 8013fea:	429a      	cmp	r2, r3
 8013fec:	d10c      	bne.n	8014008 <ip4_reass+0xdc>
 8013fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff0:	699a      	ldr	r2, [r3, #24]
 8013ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff4:	691b      	ldr	r3, [r3, #16]
 8013ff6:	429a      	cmp	r2, r3
 8013ff8:	d106      	bne.n	8014008 <ip4_reass+0xdc>
 8013ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffc:	899a      	ldrh	r2, [r3, #12]
 8013ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014000:	889b      	ldrh	r3, [r3, #4]
 8014002:	b29b      	uxth	r3, r3
 8014004:	429a      	cmp	r2, r3
 8014006:	d006      	beq.n	8014016 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	633b      	str	r3, [r7, #48]	; 0x30
 801400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014010:	2b00      	cmp	r3, #0
 8014012:	d1e6      	bne.n	8013fe2 <ip4_reass+0xb6>
 8014014:	e000      	b.n	8014018 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014016:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801401a:	2b00      	cmp	r3, #0
 801401c:	d109      	bne.n	8014032 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801401e:	8c3b      	ldrh	r3, [r7, #32]
 8014020:	4619      	mov	r1, r3
 8014022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014024:	f7ff fdb0 	bl	8013b88 <ip_reass_enqueue_new_datagram>
 8014028:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801402c:	2b00      	cmp	r3, #0
 801402e:	d11c      	bne.n	801406a <ip4_reass+0x13e>
      goto nullreturn;
 8014030:	e109      	b.n	8014246 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014034:	88db      	ldrh	r3, [r3, #6]
 8014036:	b29b      	uxth	r3, r3
 8014038:	4618      	mov	r0, r3
 801403a:	f7f5 fcb3 	bl	80099a4 <lwip_htons>
 801403e:	4603      	mov	r3, r0
 8014040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014044:	2b00      	cmp	r3, #0
 8014046:	d110      	bne.n	801406a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801404a:	89db      	ldrh	r3, [r3, #14]
 801404c:	4618      	mov	r0, r3
 801404e:	f7f5 fca9 	bl	80099a4 <lwip_htons>
 8014052:	4603      	mov	r3, r0
 8014054:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014058:	2b00      	cmp	r3, #0
 801405a:	d006      	beq.n	801406a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801405e:	3308      	adds	r3, #8
 8014060:	2214      	movs	r2, #20
 8014062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014064:	4618      	mov	r0, r3
 8014066:	f000 fe7d 	bl	8014d64 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801406c:	88db      	ldrh	r3, [r3, #6]
 801406e:	b29b      	uxth	r3, r3
 8014070:	f003 0320 	and.w	r3, r3, #32
 8014074:	2b00      	cmp	r3, #0
 8014076:	bf0c      	ite	eq
 8014078:	2301      	moveq	r3, #1
 801407a:	2300      	movne	r3, #0
 801407c:	b2db      	uxtb	r3, r3
 801407e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014080:	69fb      	ldr	r3, [r7, #28]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d00e      	beq.n	80140a4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014086:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801408a:	4413      	add	r3, r2
 801408c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801408e:	8b7a      	ldrh	r2, [r7, #26]
 8014090:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014092:	429a      	cmp	r2, r3
 8014094:	f0c0 80a0 	bcc.w	80141d8 <ip4_reass+0x2ac>
 8014098:	8b7b      	ldrh	r3, [r7, #26]
 801409a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801409e:	4293      	cmp	r3, r2
 80140a0:	f200 809a 	bhi.w	80141d8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80140a4:	69fa      	ldr	r2, [r7, #28]
 80140a6:	6879      	ldr	r1, [r7, #4]
 80140a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140aa:	f7ff fdd5 	bl	8013c58 <ip_reass_chain_frag_into_datagram_and_validate>
 80140ae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80140b0:	697b      	ldr	r3, [r7, #20]
 80140b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140b6:	f000 8091 	beq.w	80141dc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80140ba:	4b5b      	ldr	r3, [pc, #364]	; (8014228 <ip4_reass+0x2fc>)
 80140bc:	881a      	ldrh	r2, [r3, #0]
 80140be:	8c3b      	ldrh	r3, [r7, #32]
 80140c0:	4413      	add	r3, r2
 80140c2:	b29a      	uxth	r2, r3
 80140c4:	4b58      	ldr	r3, [pc, #352]	; (8014228 <ip4_reass+0x2fc>)
 80140c6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80140c8:	69fb      	ldr	r3, [r7, #28]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d00d      	beq.n	80140ea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80140ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80140d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80140d2:	4413      	add	r3, r2
 80140d4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80140d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140d8:	8a7a      	ldrh	r2, [r7, #18]
 80140da:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80140dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140de:	7f9b      	ldrb	r3, [r3, #30]
 80140e0:	f043 0301 	orr.w	r3, r3, #1
 80140e4:	b2da      	uxtb	r2, r3
 80140e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140e8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80140ea:	697b      	ldr	r3, [r7, #20]
 80140ec:	2b01      	cmp	r3, #1
 80140ee:	d171      	bne.n	80141d4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80140f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f2:	8b9b      	ldrh	r3, [r3, #28]
 80140f4:	3314      	adds	r3, #20
 80140f6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80140f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140fa:	685b      	ldr	r3, [r3, #4]
 80140fc:	685b      	ldr	r3, [r3, #4]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	685b      	ldr	r3, [r3, #4]
 8014108:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801410c:	3308      	adds	r3, #8
 801410e:	2214      	movs	r2, #20
 8014110:	4619      	mov	r1, r3
 8014112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014114:	f000 fe26 	bl	8014d64 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014118:	8a3b      	ldrh	r3, [r7, #16]
 801411a:	4618      	mov	r0, r3
 801411c:	f7f5 fc42 	bl	80099a4 <lwip_htons>
 8014120:	4603      	mov	r3, r0
 8014122:	461a      	mov	r2, r3
 8014124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014126:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801412a:	2200      	movs	r2, #0
 801412c:	719a      	strb	r2, [r3, #6]
 801412e:	2200      	movs	r2, #0
 8014130:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014134:	2200      	movs	r2, #0
 8014136:	729a      	strb	r2, [r3, #10]
 8014138:	2200      	movs	r2, #0
 801413a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801413e:	685b      	ldr	r3, [r3, #4]
 8014140:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014142:	e00d      	b.n	8014160 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014146:	685b      	ldr	r3, [r3, #4]
 8014148:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801414a:	2114      	movs	r1, #20
 801414c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801414e:	f7f6 feeb 	bl	800af28 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014152:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f7f7 f83b 	bl	800b1d0 <pbuf_cat>
      r = iprh->next_pbuf;
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014162:	2b00      	cmp	r3, #0
 8014164:	d1ee      	bne.n	8014144 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014166:	4b31      	ldr	r3, [pc, #196]	; (801422c <ip4_reass+0x300>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801416c:	429a      	cmp	r2, r3
 801416e:	d102      	bne.n	8014176 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014170:	2300      	movs	r3, #0
 8014172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014174:	e010      	b.n	8014198 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014176:	4b2d      	ldr	r3, [pc, #180]	; (801422c <ip4_reass+0x300>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801417c:	e007      	b.n	801418e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014184:	429a      	cmp	r2, r3
 8014186:	d006      	beq.n	8014196 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014190:	2b00      	cmp	r3, #0
 8014192:	d1f4      	bne.n	801417e <ip4_reass+0x252>
 8014194:	e000      	b.n	8014198 <ip4_reass+0x26c>
          break;
 8014196:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014198:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801419a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801419c:	f7ff fd2e 	bl	8013bfc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80141a0:	6878      	ldr	r0, [r7, #4]
 80141a2:	f7f6 ffd5 	bl	800b150 <pbuf_clen>
 80141a6:	4603      	mov	r3, r0
 80141a8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80141aa:	4b1f      	ldr	r3, [pc, #124]	; (8014228 <ip4_reass+0x2fc>)
 80141ac:	881b      	ldrh	r3, [r3, #0]
 80141ae:	8c3a      	ldrh	r2, [r7, #32]
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d906      	bls.n	80141c2 <ip4_reass+0x296>
 80141b4:	4b1e      	ldr	r3, [pc, #120]	; (8014230 <ip4_reass+0x304>)
 80141b6:	f240 229b 	movw	r2, #667	; 0x29b
 80141ba:	491e      	ldr	r1, [pc, #120]	; (8014234 <ip4_reass+0x308>)
 80141bc:	481e      	ldr	r0, [pc, #120]	; (8014238 <ip4_reass+0x30c>)
 80141be:	f000 fe91 	bl	8014ee4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80141c2:	4b19      	ldr	r3, [pc, #100]	; (8014228 <ip4_reass+0x2fc>)
 80141c4:	881a      	ldrh	r2, [r3, #0]
 80141c6:	8c3b      	ldrh	r3, [r7, #32]
 80141c8:	1ad3      	subs	r3, r2, r3
 80141ca:	b29a      	uxth	r2, r3
 80141cc:	4b16      	ldr	r3, [pc, #88]	; (8014228 <ip4_reass+0x2fc>)
 80141ce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	e03c      	b.n	801424e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80141d4:	2300      	movs	r3, #0
 80141d6:	e03a      	b.n	801424e <ip4_reass+0x322>
      goto nullreturn_ipr;
 80141d8:	bf00      	nop
 80141da:	e000      	b.n	80141de <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80141dc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80141de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d106      	bne.n	80141f2 <ip4_reass+0x2c6>
 80141e4:	4b12      	ldr	r3, [pc, #72]	; (8014230 <ip4_reass+0x304>)
 80141e6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80141ea:	4914      	ldr	r1, [pc, #80]	; (801423c <ip4_reass+0x310>)
 80141ec:	4812      	ldr	r0, [pc, #72]	; (8014238 <ip4_reass+0x30c>)
 80141ee:	f000 fe79 	bl	8014ee4 <iprintf>
  if (ipr->p == NULL) {
 80141f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f4:	685b      	ldr	r3, [r3, #4]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d124      	bne.n	8014244 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80141fa:	4b0c      	ldr	r3, [pc, #48]	; (801422c <ip4_reass+0x300>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014200:	429a      	cmp	r2, r3
 8014202:	d006      	beq.n	8014212 <ip4_reass+0x2e6>
 8014204:	4b0a      	ldr	r3, [pc, #40]	; (8014230 <ip4_reass+0x304>)
 8014206:	f240 22ab 	movw	r2, #683	; 0x2ab
 801420a:	490d      	ldr	r1, [pc, #52]	; (8014240 <ip4_reass+0x314>)
 801420c:	480a      	ldr	r0, [pc, #40]	; (8014238 <ip4_reass+0x30c>)
 801420e:	f000 fe69 	bl	8014ee4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014212:	2100      	movs	r1, #0
 8014214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014216:	f7ff fcf1 	bl	8013bfc <ip_reass_dequeue_datagram>
 801421a:	e014      	b.n	8014246 <ip4_reass+0x31a>
    goto nullreturn;
 801421c:	bf00      	nop
 801421e:	e012      	b.n	8014246 <ip4_reass+0x31a>
    goto nullreturn;
 8014220:	bf00      	nop
 8014222:	e010      	b.n	8014246 <ip4_reass+0x31a>
      goto nullreturn;
 8014224:	bf00      	nop
 8014226:	e00e      	b.n	8014246 <ip4_reass+0x31a>
 8014228:	20006980 	.word	0x20006980
 801422c:	2000697c 	.word	0x2000697c
 8014230:	08018f84 	.word	0x08018f84
 8014234:	080190f4 	.word	0x080190f4
 8014238:	08018fcc 	.word	0x08018fcc
 801423c:	08019110 	.word	0x08019110
 8014240:	0801911c 	.word	0x0801911c
  }

nullreturn:
 8014244:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f7f6 fef4 	bl	800b034 <pbuf_free>
  return NULL;
 801424c:	2300      	movs	r3, #0
}
 801424e:	4618      	mov	r0, r3
 8014250:	3738      	adds	r7, #56	; 0x38
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}
 8014256:	bf00      	nop

08014258 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801425c:	2005      	movs	r0, #5
 801425e:	f7f6 f857 	bl	800a310 <memp_malloc>
 8014262:	4603      	mov	r3, r0
}
 8014264:	4618      	mov	r0, r3
 8014266:	bd80      	pop	{r7, pc}

08014268 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b082      	sub	sp, #8
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d106      	bne.n	8014284 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014276:	4b07      	ldr	r3, [pc, #28]	; (8014294 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014278:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801427c:	4906      	ldr	r1, [pc, #24]	; (8014298 <ip_frag_free_pbuf_custom_ref+0x30>)
 801427e:	4807      	ldr	r0, [pc, #28]	; (801429c <ip_frag_free_pbuf_custom_ref+0x34>)
 8014280:	f000 fe30 	bl	8014ee4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014284:	6879      	ldr	r1, [r7, #4]
 8014286:	2005      	movs	r0, #5
 8014288:	f7f6 f894 	bl	800a3b4 <memp_free>
}
 801428c:	bf00      	nop
 801428e:	3708      	adds	r7, #8
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}
 8014294:	08018f84 	.word	0x08018f84
 8014298:	0801913c 	.word	0x0801913c
 801429c:	08018fcc 	.word	0x08018fcc

080142a0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b084      	sub	sp, #16
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d106      	bne.n	80142c0 <ipfrag_free_pbuf_custom+0x20>
 80142b2:	4b11      	ldr	r3, [pc, #68]	; (80142f8 <ipfrag_free_pbuf_custom+0x58>)
 80142b4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80142b8:	4910      	ldr	r1, [pc, #64]	; (80142fc <ipfrag_free_pbuf_custom+0x5c>)
 80142ba:	4811      	ldr	r0, [pc, #68]	; (8014300 <ipfrag_free_pbuf_custom+0x60>)
 80142bc:	f000 fe12 	bl	8014ee4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80142c0:	68fa      	ldr	r2, [r7, #12]
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	429a      	cmp	r2, r3
 80142c6:	d006      	beq.n	80142d6 <ipfrag_free_pbuf_custom+0x36>
 80142c8:	4b0b      	ldr	r3, [pc, #44]	; (80142f8 <ipfrag_free_pbuf_custom+0x58>)
 80142ca:	f240 22cf 	movw	r2, #719	; 0x2cf
 80142ce:	490d      	ldr	r1, [pc, #52]	; (8014304 <ipfrag_free_pbuf_custom+0x64>)
 80142d0:	480b      	ldr	r0, [pc, #44]	; (8014300 <ipfrag_free_pbuf_custom+0x60>)
 80142d2:	f000 fe07 	bl	8014ee4 <iprintf>
  if (pcr->original != NULL) {
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	695b      	ldr	r3, [r3, #20]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d004      	beq.n	80142e8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	695b      	ldr	r3, [r3, #20]
 80142e2:	4618      	mov	r0, r3
 80142e4:	f7f6 fea6 	bl	800b034 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80142e8:	68f8      	ldr	r0, [r7, #12]
 80142ea:	f7ff ffbd 	bl	8014268 <ip_frag_free_pbuf_custom_ref>
}
 80142ee:	bf00      	nop
 80142f0:	3710      	adds	r7, #16
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}
 80142f6:	bf00      	nop
 80142f8:	08018f84 	.word	0x08018f84
 80142fc:	08019148 	.word	0x08019148
 8014300:	08018fcc 	.word	0x08018fcc
 8014304:	08019154 	.word	0x08019154

08014308 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b094      	sub	sp, #80	; 0x50
 801430c:	af02      	add	r7, sp, #8
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	60b9      	str	r1, [r7, #8]
 8014312:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014314:	2300      	movs	r3, #0
 8014316:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801431e:	3b14      	subs	r3, #20
 8014320:	2b00      	cmp	r3, #0
 8014322:	da00      	bge.n	8014326 <ip4_frag+0x1e>
 8014324:	3307      	adds	r3, #7
 8014326:	10db      	asrs	r3, r3, #3
 8014328:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801432a:	2314      	movs	r3, #20
 801432c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	685b      	ldr	r3, [r3, #4]
 8014332:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014336:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801433a:	781b      	ldrb	r3, [r3, #0]
 801433c:	f003 030f 	and.w	r3, r3, #15
 8014340:	b2db      	uxtb	r3, r3
 8014342:	009b      	lsls	r3, r3, #2
 8014344:	b2db      	uxtb	r3, r3
 8014346:	2b14      	cmp	r3, #20
 8014348:	d002      	beq.n	8014350 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801434a:	f06f 0305 	mvn.w	r3, #5
 801434e:	e110      	b.n	8014572 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	895b      	ldrh	r3, [r3, #10]
 8014354:	2b13      	cmp	r3, #19
 8014356:	d809      	bhi.n	801436c <ip4_frag+0x64>
 8014358:	4b88      	ldr	r3, [pc, #544]	; (801457c <ip4_frag+0x274>)
 801435a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801435e:	4988      	ldr	r1, [pc, #544]	; (8014580 <ip4_frag+0x278>)
 8014360:	4888      	ldr	r0, [pc, #544]	; (8014584 <ip4_frag+0x27c>)
 8014362:	f000 fdbf 	bl	8014ee4 <iprintf>
 8014366:	f06f 0305 	mvn.w	r3, #5
 801436a:	e102      	b.n	8014572 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801436e:	88db      	ldrh	r3, [r3, #6]
 8014370:	b29b      	uxth	r3, r3
 8014372:	4618      	mov	r0, r3
 8014374:	f7f5 fb16 	bl	80099a4 <lwip_htons>
 8014378:	4603      	mov	r3, r0
 801437a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801437c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801437e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014382:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014386:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801438c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	891b      	ldrh	r3, [r3, #8]
 8014392:	3b14      	subs	r3, #20
 8014394:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014398:	e0e1      	b.n	801455e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801439a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801439c:	00db      	lsls	r3, r3, #3
 801439e:	b29b      	uxth	r3, r3
 80143a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80143a4:	4293      	cmp	r3, r2
 80143a6:	bf28      	it	cs
 80143a8:	4613      	movcs	r3, r2
 80143aa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80143ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143b0:	2114      	movs	r1, #20
 80143b2:	200e      	movs	r0, #14
 80143b4:	f7f6 fb5a 	bl	800aa6c <pbuf_alloc>
 80143b8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80143ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143bc:	2b00      	cmp	r3, #0
 80143be:	f000 80d5 	beq.w	801456c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80143c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c4:	895b      	ldrh	r3, [r3, #10]
 80143c6:	2b13      	cmp	r3, #19
 80143c8:	d806      	bhi.n	80143d8 <ip4_frag+0xd0>
 80143ca:	4b6c      	ldr	r3, [pc, #432]	; (801457c <ip4_frag+0x274>)
 80143cc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80143d0:	496d      	ldr	r1, [pc, #436]	; (8014588 <ip4_frag+0x280>)
 80143d2:	486c      	ldr	r0, [pc, #432]	; (8014584 <ip4_frag+0x27c>)
 80143d4:	f000 fd86 	bl	8014ee4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80143d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143da:	685b      	ldr	r3, [r3, #4]
 80143dc:	2214      	movs	r2, #20
 80143de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80143e0:	4618      	mov	r0, r3
 80143e2:	f000 fcbf 	bl	8014d64 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80143e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e8:	685b      	ldr	r3, [r3, #4]
 80143ea:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80143ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80143ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80143f2:	e064      	b.n	80144be <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	895a      	ldrh	r2, [r3, #10]
 80143f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80143fa:	1ad3      	subs	r3, r2, r3
 80143fc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	895b      	ldrh	r3, [r3, #10]
 8014402:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014404:	429a      	cmp	r2, r3
 8014406:	d906      	bls.n	8014416 <ip4_frag+0x10e>
 8014408:	4b5c      	ldr	r3, [pc, #368]	; (801457c <ip4_frag+0x274>)
 801440a:	f240 322d 	movw	r2, #813	; 0x32d
 801440e:	495f      	ldr	r1, [pc, #380]	; (801458c <ip4_frag+0x284>)
 8014410:	485c      	ldr	r0, [pc, #368]	; (8014584 <ip4_frag+0x27c>)
 8014412:	f000 fd67 	bl	8014ee4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014416:	8bfa      	ldrh	r2, [r7, #30]
 8014418:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801441c:	4293      	cmp	r3, r2
 801441e:	bf28      	it	cs
 8014420:	4613      	movcs	r3, r2
 8014422:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014426:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801442a:	2b00      	cmp	r3, #0
 801442c:	d105      	bne.n	801443a <ip4_frag+0x132>
        poff = 0;
 801442e:	2300      	movs	r3, #0
 8014430:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	60fb      	str	r3, [r7, #12]
        continue;
 8014438:	e041      	b.n	80144be <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801443a:	f7ff ff0d 	bl	8014258 <ip_frag_alloc_pbuf_custom_ref>
 801443e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014440:	69bb      	ldr	r3, [r7, #24]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d103      	bne.n	801444e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014448:	f7f6 fdf4 	bl	800b034 <pbuf_free>
        goto memerr;
 801444c:	e08f      	b.n	801456e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801444e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014454:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014456:	4413      	add	r3, r2
 8014458:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801445c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014460:	9201      	str	r2, [sp, #4]
 8014462:	9300      	str	r3, [sp, #0]
 8014464:	4603      	mov	r3, r0
 8014466:	2241      	movs	r2, #65	; 0x41
 8014468:	2000      	movs	r0, #0
 801446a:	f7f6 fc29 	bl	800acc0 <pbuf_alloced_custom>
 801446e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014470:	697b      	ldr	r3, [r7, #20]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d106      	bne.n	8014484 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014476:	69b8      	ldr	r0, [r7, #24]
 8014478:	f7ff fef6 	bl	8014268 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801447c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801447e:	f7f6 fdd9 	bl	800b034 <pbuf_free>
        goto memerr;
 8014482:	e074      	b.n	801456e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014484:	68f8      	ldr	r0, [r7, #12]
 8014486:	f7f6 fe7b 	bl	800b180 <pbuf_ref>
      pcr->original = p;
 801448a:	69bb      	ldr	r3, [r7, #24]
 801448c:	68fa      	ldr	r2, [r7, #12]
 801448e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014490:	69bb      	ldr	r3, [r7, #24]
 8014492:	4a3f      	ldr	r2, [pc, #252]	; (8014590 <ip4_frag+0x288>)
 8014494:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014496:	6979      	ldr	r1, [r7, #20]
 8014498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801449a:	f7f6 fe99 	bl	800b1d0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801449e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80144a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80144a6:	1ad3      	subs	r3, r2, r3
 80144a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80144ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d004      	beq.n	80144be <ip4_frag+0x1b6>
        poff = 0;
 80144b4:	2300      	movs	r3, #0
 80144b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80144be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d196      	bne.n	80143f4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80144c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80144c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80144cc:	4413      	add	r3, r2
 80144ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80144d0:	68bb      	ldr	r3, [r7, #8]
 80144d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80144d4:	f1a3 0213 	sub.w	r2, r3, #19
 80144d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80144dc:	429a      	cmp	r2, r3
 80144de:	bfcc      	ite	gt
 80144e0:	2301      	movgt	r3, #1
 80144e2:	2300      	movle	r3, #0
 80144e4:	b2db      	uxtb	r3, r3
 80144e6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80144e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80144ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80144f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80144f2:	6a3b      	ldr	r3, [r7, #32]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d002      	beq.n	80144fe <ip4_frag+0x1f6>
 80144f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d003      	beq.n	8014506 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80144fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014500:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014504:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014506:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014508:	4618      	mov	r0, r3
 801450a:	f7f5 fa4b 	bl	80099a4 <lwip_htons>
 801450e:	4603      	mov	r3, r0
 8014510:	461a      	mov	r2, r3
 8014512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014514:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014516:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014518:	3314      	adds	r3, #20
 801451a:	b29b      	uxth	r3, r3
 801451c:	4618      	mov	r0, r3
 801451e:	f7f5 fa41 	bl	80099a4 <lwip_htons>
 8014522:	4603      	mov	r3, r0
 8014524:	461a      	mov	r2, r3
 8014526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014528:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801452c:	2200      	movs	r2, #0
 801452e:	729a      	strb	r2, [r3, #10]
 8014530:	2200      	movs	r2, #0
 8014532:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014534:	68bb      	ldr	r3, [r7, #8]
 8014536:	695b      	ldr	r3, [r3, #20]
 8014538:	687a      	ldr	r2, [r7, #4]
 801453a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801453c:	68b8      	ldr	r0, [r7, #8]
 801453e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014542:	f7f6 fd77 	bl	800b034 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014546:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801454a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801454c:	1ad3      	subs	r3, r2, r3
 801454e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014552:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014556:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014558:	4413      	add	r3, r2
 801455a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801455e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014562:	2b00      	cmp	r3, #0
 8014564:	f47f af19 	bne.w	801439a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014568:	2300      	movs	r3, #0
 801456a:	e002      	b.n	8014572 <ip4_frag+0x26a>
      goto memerr;
 801456c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801456e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014572:	4618      	mov	r0, r3
 8014574:	3748      	adds	r7, #72	; 0x48
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}
 801457a:	bf00      	nop
 801457c:	08018f84 	.word	0x08018f84
 8014580:	08019160 	.word	0x08019160
 8014584:	08018fcc 	.word	0x08018fcc
 8014588:	0801917c 	.word	0x0801917c
 801458c:	0801919c 	.word	0x0801919c
 8014590:	080142a1 	.word	0x080142a1

08014594 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b086      	sub	sp, #24
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
 801459c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801459e:	230e      	movs	r3, #14
 80145a0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	895b      	ldrh	r3, [r3, #10]
 80145a6:	2b0e      	cmp	r3, #14
 80145a8:	d96e      	bls.n	8014688 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	7bdb      	ldrb	r3, [r3, #15]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d106      	bne.n	80145c0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80145b8:	3301      	adds	r3, #1
 80145ba:	b2da      	uxtb	r2, r3
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	685b      	ldr	r3, [r3, #4]
 80145c4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	7b1a      	ldrb	r2, [r3, #12]
 80145ca:	7b5b      	ldrb	r3, [r3, #13]
 80145cc:	021b      	lsls	r3, r3, #8
 80145ce:	4313      	orrs	r3, r2
 80145d0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80145d2:	693b      	ldr	r3, [r7, #16]
 80145d4:	781b      	ldrb	r3, [r3, #0]
 80145d6:	f003 0301 	and.w	r3, r3, #1
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d023      	beq.n	8014626 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80145de:	693b      	ldr	r3, [r7, #16]
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	2b01      	cmp	r3, #1
 80145e4:	d10f      	bne.n	8014606 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	785b      	ldrb	r3, [r3, #1]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d11b      	bne.n	8014626 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80145ee:	693b      	ldr	r3, [r7, #16]
 80145f0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80145f2:	2b5e      	cmp	r3, #94	; 0x5e
 80145f4:	d117      	bne.n	8014626 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	7b5b      	ldrb	r3, [r3, #13]
 80145fa:	f043 0310 	orr.w	r3, r3, #16
 80145fe:	b2da      	uxtb	r2, r3
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	735a      	strb	r2, [r3, #13]
 8014604:	e00f      	b.n	8014626 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014606:	693b      	ldr	r3, [r7, #16]
 8014608:	2206      	movs	r2, #6
 801460a:	4928      	ldr	r1, [pc, #160]	; (80146ac <ethernet_input+0x118>)
 801460c:	4618      	mov	r0, r3
 801460e:	f000 fb9b 	bl	8014d48 <memcmp>
 8014612:	4603      	mov	r3, r0
 8014614:	2b00      	cmp	r3, #0
 8014616:	d106      	bne.n	8014626 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	7b5b      	ldrb	r3, [r3, #13]
 801461c:	f043 0308 	orr.w	r3, r3, #8
 8014620:	b2da      	uxtb	r2, r3
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014626:	89fb      	ldrh	r3, [r7, #14]
 8014628:	2b08      	cmp	r3, #8
 801462a:	d003      	beq.n	8014634 <ethernet_input+0xa0>
 801462c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014630:	d014      	beq.n	801465c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014632:	e032      	b.n	801469a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014634:	683b      	ldr	r3, [r7, #0]
 8014636:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801463a:	f003 0308 	and.w	r3, r3, #8
 801463e:	2b00      	cmp	r3, #0
 8014640:	d024      	beq.n	801468c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014642:	8afb      	ldrh	r3, [r7, #22]
 8014644:	4619      	mov	r1, r3
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f7f6 fc6e 	bl	800af28 <pbuf_remove_header>
 801464c:	4603      	mov	r3, r0
 801464e:	2b00      	cmp	r3, #0
 8014650:	d11e      	bne.n	8014690 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014652:	6839      	ldr	r1, [r7, #0]
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f7fe ff27 	bl	80134a8 <ip4_input>
      break;
 801465a:	e013      	b.n	8014684 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014662:	f003 0308 	and.w	r3, r3, #8
 8014666:	2b00      	cmp	r3, #0
 8014668:	d014      	beq.n	8014694 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801466a:	8afb      	ldrh	r3, [r7, #22]
 801466c:	4619      	mov	r1, r3
 801466e:	6878      	ldr	r0, [r7, #4]
 8014670:	f7f6 fc5a 	bl	800af28 <pbuf_remove_header>
 8014674:	4603      	mov	r3, r0
 8014676:	2b00      	cmp	r3, #0
 8014678:	d10e      	bne.n	8014698 <ethernet_input+0x104>
        etharp_input(p, netif);
 801467a:	6839      	ldr	r1, [r7, #0]
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f7fe f8c7 	bl	8012810 <etharp_input>
      break;
 8014682:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014684:	2300      	movs	r3, #0
 8014686:	e00c      	b.n	80146a2 <ethernet_input+0x10e>
    goto free_and_return;
 8014688:	bf00      	nop
 801468a:	e006      	b.n	801469a <ethernet_input+0x106>
        goto free_and_return;
 801468c:	bf00      	nop
 801468e:	e004      	b.n	801469a <ethernet_input+0x106>
        goto free_and_return;
 8014690:	bf00      	nop
 8014692:	e002      	b.n	801469a <ethernet_input+0x106>
        goto free_and_return;
 8014694:	bf00      	nop
 8014696:	e000      	b.n	801469a <ethernet_input+0x106>
        goto free_and_return;
 8014698:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f7f6 fcca 	bl	800b034 <pbuf_free>
  return ERR_OK;
 80146a0:	2300      	movs	r3, #0
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	3718      	adds	r7, #24
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop
 80146ac:	08019370 	.word	0x08019370

080146b0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b086      	sub	sp, #24
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	60f8      	str	r0, [r7, #12]
 80146b8:	60b9      	str	r1, [r7, #8]
 80146ba:	607a      	str	r2, [r7, #4]
 80146bc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80146be:	8c3b      	ldrh	r3, [r7, #32]
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7f5 f96f 	bl	80099a4 <lwip_htons>
 80146c6:	4603      	mov	r3, r0
 80146c8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80146ca:	210e      	movs	r1, #14
 80146cc:	68b8      	ldr	r0, [r7, #8]
 80146ce:	f7f6 fc1b 	bl	800af08 <pbuf_add_header>
 80146d2:	4603      	mov	r3, r0
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d125      	bne.n	8014724 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80146d8:	68bb      	ldr	r3, [r7, #8]
 80146da:	685b      	ldr	r3, [r3, #4]
 80146dc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	8afa      	ldrh	r2, [r7, #22]
 80146e2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	2206      	movs	r2, #6
 80146e8:	6839      	ldr	r1, [r7, #0]
 80146ea:	4618      	mov	r0, r3
 80146ec:	f000 fb3a 	bl	8014d64 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80146f0:	693b      	ldr	r3, [r7, #16]
 80146f2:	3306      	adds	r3, #6
 80146f4:	2206      	movs	r2, #6
 80146f6:	6879      	ldr	r1, [r7, #4]
 80146f8:	4618      	mov	r0, r3
 80146fa:	f000 fb33 	bl	8014d64 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014704:	2b06      	cmp	r3, #6
 8014706:	d006      	beq.n	8014716 <ethernet_output+0x66>
 8014708:	4b0a      	ldr	r3, [pc, #40]	; (8014734 <ethernet_output+0x84>)
 801470a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801470e:	490a      	ldr	r1, [pc, #40]	; (8014738 <ethernet_output+0x88>)
 8014710:	480a      	ldr	r0, [pc, #40]	; (801473c <ethernet_output+0x8c>)
 8014712:	f000 fbe7 	bl	8014ee4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	699b      	ldr	r3, [r3, #24]
 801471a:	68b9      	ldr	r1, [r7, #8]
 801471c:	68f8      	ldr	r0, [r7, #12]
 801471e:	4798      	blx	r3
 8014720:	4603      	mov	r3, r0
 8014722:	e002      	b.n	801472a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014724:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014726:	f06f 0301 	mvn.w	r3, #1
}
 801472a:	4618      	mov	r0, r3
 801472c:	3718      	adds	r7, #24
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}
 8014732:	bf00      	nop
 8014734:	080191ac 	.word	0x080191ac
 8014738:	080191e4 	.word	0x080191e4
 801473c:	08019218 	.word	0x08019218

08014740 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b086      	sub	sp, #24
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	60bb      	str	r3, [r7, #8]
 801474e:	2304      	movs	r3, #4
 8014750:	60fb      	str	r3, [r7, #12]
 8014752:	2300      	movs	r3, #0
 8014754:	613b      	str	r3, [r7, #16]
 8014756:	2300      	movs	r3, #0
 8014758:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801475a:	f107 0308 	add.w	r3, r7, #8
 801475e:	2100      	movs	r1, #0
 8014760:	4618      	mov	r0, r3
 8014762:	f7f0 fabe 	bl	8004ce2 <osMessageCreate>
 8014766:	4602      	mov	r2, r0
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d102      	bne.n	801477a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014774:	f04f 33ff 	mov.w	r3, #4294967295
 8014778:	e000      	b.n	801477c <sys_mbox_new+0x3c>

  return ERR_OK;
 801477a:	2300      	movs	r3, #0
}
 801477c:	4618      	mov	r0, r3
 801477e:	3718      	adds	r7, #24
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}

08014784 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	4618      	mov	r0, r3
 8014792:	f7f0 fb83 	bl	8004e9c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	4618      	mov	r0, r3
 801479c:	f7f0 fb94 	bl	8004ec8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80147a0:	bf00      	nop
 80147a2:	3708      	adds	r7, #8
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd80      	pop	{r7, pc}

080147a8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b084      	sub	sp, #16
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	6839      	ldr	r1, [r7, #0]
 80147b8:	2200      	movs	r2, #0
 80147ba:	4618      	mov	r0, r3
 80147bc:	f7f0 faba 	bl	8004d34 <osMessagePut>
 80147c0:	4603      	mov	r3, r0
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d102      	bne.n	80147cc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80147c6:	2300      	movs	r3, #0
 80147c8:	73fb      	strb	r3, [r7, #15]
 80147ca:	e001      	b.n	80147d0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80147cc:	23ff      	movs	r3, #255	; 0xff
 80147ce:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80147d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80147d4:	4618      	mov	r0, r3
 80147d6:	3710      	adds	r7, #16
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}

080147dc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b08c      	sub	sp, #48	; 0x30
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	61f8      	str	r0, [r7, #28]
 80147e4:	61b9      	str	r1, [r7, #24]
 80147e6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80147e8:	f7f0 f8a5 	bl	8004936 <osKernelSysTick>
 80147ec:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d017      	beq.n	8014824 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80147f4:	69fb      	ldr	r3, [r7, #28]
 80147f6:	6819      	ldr	r1, [r3, #0]
 80147f8:	f107 0320 	add.w	r3, r7, #32
 80147fc:	697a      	ldr	r2, [r7, #20]
 80147fe:	4618      	mov	r0, r3
 8014800:	f7f0 fad8 	bl	8004db4 <osMessageGet>

    if(event.status == osEventMessage)
 8014804:	6a3b      	ldr	r3, [r7, #32]
 8014806:	2b10      	cmp	r3, #16
 8014808:	d109      	bne.n	801481e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480c:	461a      	mov	r2, r3
 801480e:	69bb      	ldr	r3, [r7, #24]
 8014810:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014812:	f7f0 f890 	bl	8004936 <osKernelSysTick>
 8014816:	4602      	mov	r2, r0
 8014818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801481a:	1ad3      	subs	r3, r2, r3
 801481c:	e019      	b.n	8014852 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801481e:	f04f 33ff 	mov.w	r3, #4294967295
 8014822:	e016      	b.n	8014852 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014824:	69fb      	ldr	r3, [r7, #28]
 8014826:	6819      	ldr	r1, [r3, #0]
 8014828:	463b      	mov	r3, r7
 801482a:	f04f 32ff 	mov.w	r2, #4294967295
 801482e:	4618      	mov	r0, r3
 8014830:	f7f0 fac0 	bl	8004db4 <osMessageGet>
 8014834:	f107 0320 	add.w	r3, r7, #32
 8014838:	463a      	mov	r2, r7
 801483a:	ca07      	ldmia	r2, {r0, r1, r2}
 801483c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014842:	461a      	mov	r2, r3
 8014844:	69bb      	ldr	r3, [r7, #24]
 8014846:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014848:	f7f0 f875 	bl	8004936 <osKernelSysTick>
 801484c:	4602      	mov	r2, r0
 801484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014850:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014852:	4618      	mov	r0, r3
 8014854:	3730      	adds	r7, #48	; 0x30
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}

0801485a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801485a:	b580      	push	{r7, lr}
 801485c:	b086      	sub	sp, #24
 801485e:	af00      	add	r7, sp, #0
 8014860:	6078      	str	r0, [r7, #4]
 8014862:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	6819      	ldr	r1, [r3, #0]
 8014868:	f107 030c 	add.w	r3, r7, #12
 801486c:	2200      	movs	r2, #0
 801486e:	4618      	mov	r0, r3
 8014870:	f7f0 faa0 	bl	8004db4 <osMessageGet>

  if(event.status == osEventMessage)
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	2b10      	cmp	r3, #16
 8014878:	d105      	bne.n	8014886 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	461a      	mov	r2, r3
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8014882:	2300      	movs	r3, #0
 8014884:	e001      	b.n	801488a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8014886:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801488a:	4618      	mov	r0, r3
 801488c:	3718      	adds	r7, #24
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}

08014892 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014892:	b480      	push	{r7}
 8014894:	b083      	sub	sp, #12
 8014896:	af00      	add	r7, sp, #0
 8014898:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d101      	bne.n	80148a6 <sys_mbox_valid+0x14>
    return 0;
 80148a2:	2300      	movs	r3, #0
 80148a4:	e000      	b.n	80148a8 <sys_mbox_valid+0x16>
  else
    return 1;
 80148a6:	2301      	movs	r3, #1
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	370c      	adds	r7, #12
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr

080148b4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80148b4:	b480      	push	{r7}
 80148b6:	b083      	sub	sp, #12
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2200      	movs	r2, #0
 80148c0:	601a      	str	r2, [r3, #0]
}
 80148c2:	bf00      	nop
 80148c4:	370c      	adds	r7, #12
 80148c6:	46bd      	mov	sp, r7
 80148c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148cc:	4770      	bx	lr

080148ce <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80148ce:	b580      	push	{r7, lr}
 80148d0:	b084      	sub	sp, #16
 80148d2:	af00      	add	r7, sp, #0
 80148d4:	6078      	str	r0, [r7, #4]
 80148d6:	460b      	mov	r3, r1
 80148d8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80148da:	2300      	movs	r3, #0
 80148dc:	60bb      	str	r3, [r7, #8]
 80148de:	2300      	movs	r3, #0
 80148e0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80148e2:	f107 0308 	add.w	r3, r7, #8
 80148e6:	2101      	movs	r1, #1
 80148e8:	4618      	mov	r0, r3
 80148ea:	f7f0 f931 	bl	8004b50 <osSemaphoreCreate>
 80148ee:	4602      	mov	r2, r0
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d102      	bne.n	8014902 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80148fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014900:	e009      	b.n	8014916 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8014902:	78fb      	ldrb	r3, [r7, #3]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d105      	bne.n	8014914 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	2100      	movs	r1, #0
 801490e:	4618      	mov	r0, r3
 8014910:	f7f0 f950 	bl	8004bb4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8014914:	2300      	movs	r3, #0
}
 8014916:	4618      	mov	r0, r3
 8014918:	3710      	adds	r7, #16
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}

0801491e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801491e:	b580      	push	{r7, lr}
 8014920:	b084      	sub	sp, #16
 8014922:	af00      	add	r7, sp, #0
 8014924:	6078      	str	r0, [r7, #4]
 8014926:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8014928:	f7f0 f805 	bl	8004936 <osKernelSysTick>
 801492c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801492e:	683b      	ldr	r3, [r7, #0]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d011      	beq.n	8014958 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	6839      	ldr	r1, [r7, #0]
 801493a:	4618      	mov	r0, r3
 801493c:	f7f0 f93a 	bl	8004bb4 <osSemaphoreWait>
 8014940:	4603      	mov	r3, r0
 8014942:	2b00      	cmp	r3, #0
 8014944:	d105      	bne.n	8014952 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8014946:	f7ef fff6 	bl	8004936 <osKernelSysTick>
 801494a:	4602      	mov	r2, r0
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	1ad3      	subs	r3, r2, r3
 8014950:	e012      	b.n	8014978 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014952:	f04f 33ff 	mov.w	r3, #4294967295
 8014956:	e00f      	b.n	8014978 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8014958:	bf00      	nop
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	f04f 31ff 	mov.w	r1, #4294967295
 8014962:	4618      	mov	r0, r3
 8014964:	f7f0 f926 	bl	8004bb4 <osSemaphoreWait>
 8014968:	4603      	mov	r3, r0
 801496a:	2b00      	cmp	r3, #0
 801496c:	d1f5      	bne.n	801495a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801496e:	f7ef ffe2 	bl	8004936 <osKernelSysTick>
 8014972:	4602      	mov	r2, r0
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014978:	4618      	mov	r0, r3
 801497a:	3710      	adds	r7, #16
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}

08014980 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b082      	sub	sp, #8
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	4618      	mov	r0, r3
 801498e:	f7f0 f95f 	bl	8004c50 <osSemaphoreRelease>
}
 8014992:	bf00      	nop
 8014994:	3708      	adds	r7, #8
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}

0801499a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801499a:	b580      	push	{r7, lr}
 801499c:	b082      	sub	sp, #8
 801499e:	af00      	add	r7, sp, #0
 80149a0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7f0 f988 	bl	8004cbc <osSemaphoreDelete>
}
 80149ac:	bf00      	nop
 80149ae:	3708      	adds	r7, #8
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80149b4:	b480      	push	{r7}
 80149b6:	b083      	sub	sp, #12
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d101      	bne.n	80149c8 <sys_sem_valid+0x14>
    return 0;
 80149c4:	2300      	movs	r3, #0
 80149c6:	e000      	b.n	80149ca <sys_sem_valid+0x16>
  else
    return 1;
 80149c8:	2301      	movs	r3, #1
}
 80149ca:	4618      	mov	r0, r3
 80149cc:	370c      	adds	r7, #12
 80149ce:	46bd      	mov	sp, r7
 80149d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d4:	4770      	bx	lr

080149d6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80149d6:	b480      	push	{r7}
 80149d8:	b083      	sub	sp, #12
 80149da:	af00      	add	r7, sp, #0
 80149dc:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	2200      	movs	r2, #0
 80149e2:	601a      	str	r2, [r3, #0]
}
 80149e4:	bf00      	nop
 80149e6:	370c      	adds	r7, #12
 80149e8:	46bd      	mov	sp, r7
 80149ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ee:	4770      	bx	lr

080149f0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80149f4:	4803      	ldr	r0, [pc, #12]	; (8014a04 <sys_init+0x14>)
 80149f6:	f7f0 f80e 	bl	8004a16 <osMutexCreate>
 80149fa:	4603      	mov	r3, r0
 80149fc:	4a02      	ldr	r2, [pc, #8]	; (8014a08 <sys_init+0x18>)
 80149fe:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014a00:	bf00      	nop
 8014a02:	bd80      	pop	{r7, pc}
 8014a04:	08019380 	.word	0x08019380
 8014a08:	2000d34c 	.word	0x2000d34c

08014a0c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b084      	sub	sp, #16
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014a14:	2300      	movs	r3, #0
 8014a16:	60bb      	str	r3, [r7, #8]
 8014a18:	2300      	movs	r3, #0
 8014a1a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014a1c:	f107 0308 	add.w	r3, r7, #8
 8014a20:	4618      	mov	r0, r3
 8014a22:	f7ef fff8 	bl	8004a16 <osMutexCreate>
 8014a26:	4602      	mov	r2, r0
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d102      	bne.n	8014a3a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014a34:	f04f 33ff 	mov.w	r3, #4294967295
 8014a38:	e000      	b.n	8014a3c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014a3a:	2300      	movs	r3, #0
}
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	3710      	adds	r7, #16
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd80      	pop	{r7, pc}

08014a44 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b082      	sub	sp, #8
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	f04f 31ff 	mov.w	r1, #4294967295
 8014a54:	4618      	mov	r0, r3
 8014a56:	f7ef fff7 	bl	8004a48 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014a5a:	bf00      	nop
 8014a5c:	3708      	adds	r7, #8
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}

08014a62 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014a62:	b580      	push	{r7, lr}
 8014a64:	b082      	sub	sp, #8
 8014a66:	af00      	add	r7, sp, #0
 8014a68:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f7f0 f838 	bl	8004ae4 <osMutexRelease>
}
 8014a74:	bf00      	nop
 8014a76:	3708      	adds	r7, #8
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}

08014a7c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b08c      	sub	sp, #48	; 0x30
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	60f8      	str	r0, [r7, #12]
 8014a84:	60b9      	str	r1, [r7, #8]
 8014a86:	607a      	str	r2, [r7, #4]
 8014a88:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014a8a:	f107 0314 	add.w	r3, r7, #20
 8014a8e:	2200      	movs	r2, #0
 8014a90:	601a      	str	r2, [r3, #0]
 8014a92:	605a      	str	r2, [r3, #4]
 8014a94:	609a      	str	r2, [r3, #8]
 8014a96:	60da      	str	r2, [r3, #12]
 8014a98:	611a      	str	r2, [r3, #16]
 8014a9a:	615a      	str	r2, [r3, #20]
 8014a9c:	619a      	str	r2, [r3, #24]
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	617b      	str	r3, [r7, #20]
 8014aa2:	68bb      	ldr	r3, [r7, #8]
 8014aa4:	61bb      	str	r3, [r7, #24]
 8014aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aa8:	b21b      	sxth	r3, r3
 8014aaa:	83bb      	strh	r3, [r7, #28]
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014ab0:	f107 0314 	add.w	r3, r7, #20
 8014ab4:	6879      	ldr	r1, [r7, #4]
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7ef ff4d 	bl	8004956 <osThreadCreate>
 8014abc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3730      	adds	r7, #48	; 0x30
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}
	...

08014ac8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014acc:	4b04      	ldr	r3, [pc, #16]	; (8014ae0 <sys_arch_protect+0x18>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7ef ffb7 	bl	8004a48 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014ada:	2301      	movs	r3, #1
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	bd80      	pop	{r7, pc}
 8014ae0:	2000d34c 	.word	0x2000d34c

08014ae4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b082      	sub	sp, #8
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014aec:	4b04      	ldr	r3, [pc, #16]	; (8014b00 <sys_arch_unprotect+0x1c>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7ef fff7 	bl	8004ae4 <osMutexRelease>
}
 8014af6:	bf00      	nop
 8014af8:	3708      	adds	r7, #8
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd80      	pop	{r7, pc}
 8014afe:	bf00      	nop
 8014b00:	2000d34c 	.word	0x2000d34c

08014b04 <std>:
 8014b04:	2300      	movs	r3, #0
 8014b06:	b510      	push	{r4, lr}
 8014b08:	4604      	mov	r4, r0
 8014b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8014b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b12:	6083      	str	r3, [r0, #8]
 8014b14:	8181      	strh	r1, [r0, #12]
 8014b16:	6643      	str	r3, [r0, #100]	; 0x64
 8014b18:	81c2      	strh	r2, [r0, #14]
 8014b1a:	6183      	str	r3, [r0, #24]
 8014b1c:	4619      	mov	r1, r3
 8014b1e:	2208      	movs	r2, #8
 8014b20:	305c      	adds	r0, #92	; 0x5c
 8014b22:	f000 f92d 	bl	8014d80 <memset>
 8014b26:	4b05      	ldr	r3, [pc, #20]	; (8014b3c <std+0x38>)
 8014b28:	6263      	str	r3, [r4, #36]	; 0x24
 8014b2a:	4b05      	ldr	r3, [pc, #20]	; (8014b40 <std+0x3c>)
 8014b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b2e:	4b05      	ldr	r3, [pc, #20]	; (8014b44 <std+0x40>)
 8014b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b32:	4b05      	ldr	r3, [pc, #20]	; (8014b48 <std+0x44>)
 8014b34:	6224      	str	r4, [r4, #32]
 8014b36:	6323      	str	r3, [r4, #48]	; 0x30
 8014b38:	bd10      	pop	{r4, pc}
 8014b3a:	bf00      	nop
 8014b3c:	08015089 	.word	0x08015089
 8014b40:	080150ab 	.word	0x080150ab
 8014b44:	080150e3 	.word	0x080150e3
 8014b48:	08015107 	.word	0x08015107

08014b4c <_cleanup_r>:
 8014b4c:	4901      	ldr	r1, [pc, #4]	; (8014b54 <_cleanup_r+0x8>)
 8014b4e:	f000 b8af 	b.w	8014cb0 <_fwalk_reent>
 8014b52:	bf00      	nop
 8014b54:	0801529d 	.word	0x0801529d

08014b58 <__sfmoreglue>:
 8014b58:	b570      	push	{r4, r5, r6, lr}
 8014b5a:	1e4a      	subs	r2, r1, #1
 8014b5c:	2568      	movs	r5, #104	; 0x68
 8014b5e:	4355      	muls	r5, r2
 8014b60:	460e      	mov	r6, r1
 8014b62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014b66:	f000 f963 	bl	8014e30 <_malloc_r>
 8014b6a:	4604      	mov	r4, r0
 8014b6c:	b140      	cbz	r0, 8014b80 <__sfmoreglue+0x28>
 8014b6e:	2100      	movs	r1, #0
 8014b70:	e9c0 1600 	strd	r1, r6, [r0]
 8014b74:	300c      	adds	r0, #12
 8014b76:	60a0      	str	r0, [r4, #8]
 8014b78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014b7c:	f000 f900 	bl	8014d80 <memset>
 8014b80:	4620      	mov	r0, r4
 8014b82:	bd70      	pop	{r4, r5, r6, pc}

08014b84 <__sfp_lock_acquire>:
 8014b84:	4801      	ldr	r0, [pc, #4]	; (8014b8c <__sfp_lock_acquire+0x8>)
 8014b86:	f7ec bd59 	b.w	800163c <__retarget_lock_acquire_recursive>
 8014b8a:	bf00      	nop
 8014b8c:	20000370 	.word	0x20000370

08014b90 <__sfp_lock_release>:
 8014b90:	4801      	ldr	r0, [pc, #4]	; (8014b98 <__sfp_lock_release+0x8>)
 8014b92:	f7ec bd67 	b.w	8001664 <__retarget_lock_release_recursive>
 8014b96:	bf00      	nop
 8014b98:	20000370 	.word	0x20000370

08014b9c <__sinit_lock_acquire>:
 8014b9c:	4801      	ldr	r0, [pc, #4]	; (8014ba4 <__sinit_lock_acquire+0x8>)
 8014b9e:	f7ec bd4d 	b.w	800163c <__retarget_lock_acquire_recursive>
 8014ba2:	bf00      	nop
 8014ba4:	20000364 	.word	0x20000364

08014ba8 <__sinit_lock_release>:
 8014ba8:	4801      	ldr	r0, [pc, #4]	; (8014bb0 <__sinit_lock_release+0x8>)
 8014baa:	f7ec bd5b 	b.w	8001664 <__retarget_lock_release_recursive>
 8014bae:	bf00      	nop
 8014bb0:	20000364 	.word	0x20000364

08014bb4 <__sinit>:
 8014bb4:	b510      	push	{r4, lr}
 8014bb6:	4604      	mov	r4, r0
 8014bb8:	f7ff fff0 	bl	8014b9c <__sinit_lock_acquire>
 8014bbc:	69a3      	ldr	r3, [r4, #24]
 8014bbe:	b11b      	cbz	r3, 8014bc8 <__sinit+0x14>
 8014bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bc4:	f7ff bff0 	b.w	8014ba8 <__sinit_lock_release>
 8014bc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014bcc:	6523      	str	r3, [r4, #80]	; 0x50
 8014bce:	4b13      	ldr	r3, [pc, #76]	; (8014c1c <__sinit+0x68>)
 8014bd0:	4a13      	ldr	r2, [pc, #76]	; (8014c20 <__sinit+0x6c>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8014bd6:	42a3      	cmp	r3, r4
 8014bd8:	bf04      	itt	eq
 8014bda:	2301      	moveq	r3, #1
 8014bdc:	61a3      	streq	r3, [r4, #24]
 8014bde:	4620      	mov	r0, r4
 8014be0:	f000 f820 	bl	8014c24 <__sfp>
 8014be4:	6060      	str	r0, [r4, #4]
 8014be6:	4620      	mov	r0, r4
 8014be8:	f000 f81c 	bl	8014c24 <__sfp>
 8014bec:	60a0      	str	r0, [r4, #8]
 8014bee:	4620      	mov	r0, r4
 8014bf0:	f000 f818 	bl	8014c24 <__sfp>
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	60e0      	str	r0, [r4, #12]
 8014bf8:	2104      	movs	r1, #4
 8014bfa:	6860      	ldr	r0, [r4, #4]
 8014bfc:	f7ff ff82 	bl	8014b04 <std>
 8014c00:	68a0      	ldr	r0, [r4, #8]
 8014c02:	2201      	movs	r2, #1
 8014c04:	2109      	movs	r1, #9
 8014c06:	f7ff ff7d 	bl	8014b04 <std>
 8014c0a:	68e0      	ldr	r0, [r4, #12]
 8014c0c:	2202      	movs	r2, #2
 8014c0e:	2112      	movs	r1, #18
 8014c10:	f7ff ff78 	bl	8014b04 <std>
 8014c14:	2301      	movs	r3, #1
 8014c16:	61a3      	str	r3, [r4, #24]
 8014c18:	e7d2      	b.n	8014bc0 <__sinit+0xc>
 8014c1a:	bf00      	nop
 8014c1c:	080193e8 	.word	0x080193e8
 8014c20:	08014b4d 	.word	0x08014b4d

08014c24 <__sfp>:
 8014c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c26:	4607      	mov	r7, r0
 8014c28:	f7ff ffac 	bl	8014b84 <__sfp_lock_acquire>
 8014c2c:	4b1e      	ldr	r3, [pc, #120]	; (8014ca8 <__sfp+0x84>)
 8014c2e:	681e      	ldr	r6, [r3, #0]
 8014c30:	69b3      	ldr	r3, [r6, #24]
 8014c32:	b913      	cbnz	r3, 8014c3a <__sfp+0x16>
 8014c34:	4630      	mov	r0, r6
 8014c36:	f7ff ffbd 	bl	8014bb4 <__sinit>
 8014c3a:	3648      	adds	r6, #72	; 0x48
 8014c3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014c40:	3b01      	subs	r3, #1
 8014c42:	d503      	bpl.n	8014c4c <__sfp+0x28>
 8014c44:	6833      	ldr	r3, [r6, #0]
 8014c46:	b30b      	cbz	r3, 8014c8c <__sfp+0x68>
 8014c48:	6836      	ldr	r6, [r6, #0]
 8014c4a:	e7f7      	b.n	8014c3c <__sfp+0x18>
 8014c4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014c50:	b9d5      	cbnz	r5, 8014c88 <__sfp+0x64>
 8014c52:	4b16      	ldr	r3, [pc, #88]	; (8014cac <__sfp+0x88>)
 8014c54:	60e3      	str	r3, [r4, #12]
 8014c56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014c5a:	6665      	str	r5, [r4, #100]	; 0x64
 8014c5c:	f7ec fcc8 	bl	80015f0 <__retarget_lock_init_recursive>
 8014c60:	f7ff ff96 	bl	8014b90 <__sfp_lock_release>
 8014c64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014c68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014c6c:	6025      	str	r5, [r4, #0]
 8014c6e:	61a5      	str	r5, [r4, #24]
 8014c70:	2208      	movs	r2, #8
 8014c72:	4629      	mov	r1, r5
 8014c74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014c78:	f000 f882 	bl	8014d80 <memset>
 8014c7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014c80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014c84:	4620      	mov	r0, r4
 8014c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c88:	3468      	adds	r4, #104	; 0x68
 8014c8a:	e7d9      	b.n	8014c40 <__sfp+0x1c>
 8014c8c:	2104      	movs	r1, #4
 8014c8e:	4638      	mov	r0, r7
 8014c90:	f7ff ff62 	bl	8014b58 <__sfmoreglue>
 8014c94:	4604      	mov	r4, r0
 8014c96:	6030      	str	r0, [r6, #0]
 8014c98:	2800      	cmp	r0, #0
 8014c9a:	d1d5      	bne.n	8014c48 <__sfp+0x24>
 8014c9c:	f7ff ff78 	bl	8014b90 <__sfp_lock_release>
 8014ca0:	230c      	movs	r3, #12
 8014ca2:	603b      	str	r3, [r7, #0]
 8014ca4:	e7ee      	b.n	8014c84 <__sfp+0x60>
 8014ca6:	bf00      	nop
 8014ca8:	080193e8 	.word	0x080193e8
 8014cac:	ffff0001 	.word	0xffff0001

08014cb0 <_fwalk_reent>:
 8014cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cb4:	4606      	mov	r6, r0
 8014cb6:	4688      	mov	r8, r1
 8014cb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014cbc:	2700      	movs	r7, #0
 8014cbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014cc2:	f1b9 0901 	subs.w	r9, r9, #1
 8014cc6:	d505      	bpl.n	8014cd4 <_fwalk_reent+0x24>
 8014cc8:	6824      	ldr	r4, [r4, #0]
 8014cca:	2c00      	cmp	r4, #0
 8014ccc:	d1f7      	bne.n	8014cbe <_fwalk_reent+0xe>
 8014cce:	4638      	mov	r0, r7
 8014cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cd4:	89ab      	ldrh	r3, [r5, #12]
 8014cd6:	2b01      	cmp	r3, #1
 8014cd8:	d907      	bls.n	8014cea <_fwalk_reent+0x3a>
 8014cda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014cde:	3301      	adds	r3, #1
 8014ce0:	d003      	beq.n	8014cea <_fwalk_reent+0x3a>
 8014ce2:	4629      	mov	r1, r5
 8014ce4:	4630      	mov	r0, r6
 8014ce6:	47c0      	blx	r8
 8014ce8:	4307      	orrs	r7, r0
 8014cea:	3568      	adds	r5, #104	; 0x68
 8014cec:	e7e9      	b.n	8014cc2 <_fwalk_reent+0x12>
	...

08014cf0 <__libc_init_array>:
 8014cf0:	b570      	push	{r4, r5, r6, lr}
 8014cf2:	4d0d      	ldr	r5, [pc, #52]	; (8014d28 <__libc_init_array+0x38>)
 8014cf4:	4c0d      	ldr	r4, [pc, #52]	; (8014d2c <__libc_init_array+0x3c>)
 8014cf6:	1b64      	subs	r4, r4, r5
 8014cf8:	10a4      	asrs	r4, r4, #2
 8014cfa:	2600      	movs	r6, #0
 8014cfc:	42a6      	cmp	r6, r4
 8014cfe:	d109      	bne.n	8014d14 <__libc_init_array+0x24>
 8014d00:	4d0b      	ldr	r5, [pc, #44]	; (8014d30 <__libc_init_array+0x40>)
 8014d02:	4c0c      	ldr	r4, [pc, #48]	; (8014d34 <__libc_init_array+0x44>)
 8014d04:	f000 ffc8 	bl	8015c98 <_init>
 8014d08:	1b64      	subs	r4, r4, r5
 8014d0a:	10a4      	asrs	r4, r4, #2
 8014d0c:	2600      	movs	r6, #0
 8014d0e:	42a6      	cmp	r6, r4
 8014d10:	d105      	bne.n	8014d1e <__libc_init_array+0x2e>
 8014d12:	bd70      	pop	{r4, r5, r6, pc}
 8014d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d18:	4798      	blx	r3
 8014d1a:	3601      	adds	r6, #1
 8014d1c:	e7ee      	b.n	8014cfc <__libc_init_array+0xc>
 8014d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d22:	4798      	blx	r3
 8014d24:	3601      	adds	r6, #1
 8014d26:	e7f2      	b.n	8014d0e <__libc_init_array+0x1e>
 8014d28:	080194dc 	.word	0x080194dc
 8014d2c:	080194dc 	.word	0x080194dc
 8014d30:	080194dc 	.word	0x080194dc
 8014d34:	080194e0 	.word	0x080194e0

08014d38 <malloc>:
 8014d38:	4b02      	ldr	r3, [pc, #8]	; (8014d44 <malloc+0xc>)
 8014d3a:	4601      	mov	r1, r0
 8014d3c:	6818      	ldr	r0, [r3, #0]
 8014d3e:	f000 b877 	b.w	8014e30 <_malloc_r>
 8014d42:	bf00      	nop
 8014d44:	20000020 	.word	0x20000020

08014d48 <memcmp>:
 8014d48:	b530      	push	{r4, r5, lr}
 8014d4a:	3901      	subs	r1, #1
 8014d4c:	2400      	movs	r4, #0
 8014d4e:	42a2      	cmp	r2, r4
 8014d50:	d101      	bne.n	8014d56 <memcmp+0xe>
 8014d52:	2000      	movs	r0, #0
 8014d54:	e005      	b.n	8014d62 <memcmp+0x1a>
 8014d56:	5d03      	ldrb	r3, [r0, r4]
 8014d58:	3401      	adds	r4, #1
 8014d5a:	5d0d      	ldrb	r5, [r1, r4]
 8014d5c:	42ab      	cmp	r3, r5
 8014d5e:	d0f6      	beq.n	8014d4e <memcmp+0x6>
 8014d60:	1b58      	subs	r0, r3, r5
 8014d62:	bd30      	pop	{r4, r5, pc}

08014d64 <memcpy>:
 8014d64:	440a      	add	r2, r1
 8014d66:	4291      	cmp	r1, r2
 8014d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8014d6c:	d100      	bne.n	8014d70 <memcpy+0xc>
 8014d6e:	4770      	bx	lr
 8014d70:	b510      	push	{r4, lr}
 8014d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d7a:	4291      	cmp	r1, r2
 8014d7c:	d1f9      	bne.n	8014d72 <memcpy+0xe>
 8014d7e:	bd10      	pop	{r4, pc}

08014d80 <memset>:
 8014d80:	4402      	add	r2, r0
 8014d82:	4603      	mov	r3, r0
 8014d84:	4293      	cmp	r3, r2
 8014d86:	d100      	bne.n	8014d8a <memset+0xa>
 8014d88:	4770      	bx	lr
 8014d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8014d8e:	e7f9      	b.n	8014d84 <memset+0x4>

08014d90 <_free_r>:
 8014d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014d92:	2900      	cmp	r1, #0
 8014d94:	d048      	beq.n	8014e28 <_free_r+0x98>
 8014d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d9a:	9001      	str	r0, [sp, #4]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8014da2:	bfb8      	it	lt
 8014da4:	18e4      	addlt	r4, r4, r3
 8014da6:	f000 fad9 	bl	801535c <__malloc_lock>
 8014daa:	4a20      	ldr	r2, [pc, #128]	; (8014e2c <_free_r+0x9c>)
 8014dac:	9801      	ldr	r0, [sp, #4]
 8014dae:	6813      	ldr	r3, [r2, #0]
 8014db0:	4615      	mov	r5, r2
 8014db2:	b933      	cbnz	r3, 8014dc2 <_free_r+0x32>
 8014db4:	6063      	str	r3, [r4, #4]
 8014db6:	6014      	str	r4, [r2, #0]
 8014db8:	b003      	add	sp, #12
 8014dba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014dbe:	f000 bad3 	b.w	8015368 <__malloc_unlock>
 8014dc2:	42a3      	cmp	r3, r4
 8014dc4:	d90b      	bls.n	8014dde <_free_r+0x4e>
 8014dc6:	6821      	ldr	r1, [r4, #0]
 8014dc8:	1862      	adds	r2, r4, r1
 8014dca:	4293      	cmp	r3, r2
 8014dcc:	bf04      	itt	eq
 8014dce:	681a      	ldreq	r2, [r3, #0]
 8014dd0:	685b      	ldreq	r3, [r3, #4]
 8014dd2:	6063      	str	r3, [r4, #4]
 8014dd4:	bf04      	itt	eq
 8014dd6:	1852      	addeq	r2, r2, r1
 8014dd8:	6022      	streq	r2, [r4, #0]
 8014dda:	602c      	str	r4, [r5, #0]
 8014ddc:	e7ec      	b.n	8014db8 <_free_r+0x28>
 8014dde:	461a      	mov	r2, r3
 8014de0:	685b      	ldr	r3, [r3, #4]
 8014de2:	b10b      	cbz	r3, 8014de8 <_free_r+0x58>
 8014de4:	42a3      	cmp	r3, r4
 8014de6:	d9fa      	bls.n	8014dde <_free_r+0x4e>
 8014de8:	6811      	ldr	r1, [r2, #0]
 8014dea:	1855      	adds	r5, r2, r1
 8014dec:	42a5      	cmp	r5, r4
 8014dee:	d10b      	bne.n	8014e08 <_free_r+0x78>
 8014df0:	6824      	ldr	r4, [r4, #0]
 8014df2:	4421      	add	r1, r4
 8014df4:	1854      	adds	r4, r2, r1
 8014df6:	42a3      	cmp	r3, r4
 8014df8:	6011      	str	r1, [r2, #0]
 8014dfa:	d1dd      	bne.n	8014db8 <_free_r+0x28>
 8014dfc:	681c      	ldr	r4, [r3, #0]
 8014dfe:	685b      	ldr	r3, [r3, #4]
 8014e00:	6053      	str	r3, [r2, #4]
 8014e02:	4421      	add	r1, r4
 8014e04:	6011      	str	r1, [r2, #0]
 8014e06:	e7d7      	b.n	8014db8 <_free_r+0x28>
 8014e08:	d902      	bls.n	8014e10 <_free_r+0x80>
 8014e0a:	230c      	movs	r3, #12
 8014e0c:	6003      	str	r3, [r0, #0]
 8014e0e:	e7d3      	b.n	8014db8 <_free_r+0x28>
 8014e10:	6825      	ldr	r5, [r4, #0]
 8014e12:	1961      	adds	r1, r4, r5
 8014e14:	428b      	cmp	r3, r1
 8014e16:	bf04      	itt	eq
 8014e18:	6819      	ldreq	r1, [r3, #0]
 8014e1a:	685b      	ldreq	r3, [r3, #4]
 8014e1c:	6063      	str	r3, [r4, #4]
 8014e1e:	bf04      	itt	eq
 8014e20:	1949      	addeq	r1, r1, r5
 8014e22:	6021      	streq	r1, [r4, #0]
 8014e24:	6054      	str	r4, [r2, #4]
 8014e26:	e7c7      	b.n	8014db8 <_free_r+0x28>
 8014e28:	b003      	add	sp, #12
 8014e2a:	bd30      	pop	{r4, r5, pc}
 8014e2c:	20006984 	.word	0x20006984

08014e30 <_malloc_r>:
 8014e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e32:	1ccd      	adds	r5, r1, #3
 8014e34:	f025 0503 	bic.w	r5, r5, #3
 8014e38:	3508      	adds	r5, #8
 8014e3a:	2d0c      	cmp	r5, #12
 8014e3c:	bf38      	it	cc
 8014e3e:	250c      	movcc	r5, #12
 8014e40:	2d00      	cmp	r5, #0
 8014e42:	4606      	mov	r6, r0
 8014e44:	db01      	blt.n	8014e4a <_malloc_r+0x1a>
 8014e46:	42a9      	cmp	r1, r5
 8014e48:	d903      	bls.n	8014e52 <_malloc_r+0x22>
 8014e4a:	230c      	movs	r3, #12
 8014e4c:	6033      	str	r3, [r6, #0]
 8014e4e:	2000      	movs	r0, #0
 8014e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e52:	f000 fa83 	bl	801535c <__malloc_lock>
 8014e56:	4921      	ldr	r1, [pc, #132]	; (8014edc <_malloc_r+0xac>)
 8014e58:	680a      	ldr	r2, [r1, #0]
 8014e5a:	4614      	mov	r4, r2
 8014e5c:	b99c      	cbnz	r4, 8014e86 <_malloc_r+0x56>
 8014e5e:	4f20      	ldr	r7, [pc, #128]	; (8014ee0 <_malloc_r+0xb0>)
 8014e60:	683b      	ldr	r3, [r7, #0]
 8014e62:	b923      	cbnz	r3, 8014e6e <_malloc_r+0x3e>
 8014e64:	4621      	mov	r1, r4
 8014e66:	4630      	mov	r0, r6
 8014e68:	f000 f8fe 	bl	8015068 <_sbrk_r>
 8014e6c:	6038      	str	r0, [r7, #0]
 8014e6e:	4629      	mov	r1, r5
 8014e70:	4630      	mov	r0, r6
 8014e72:	f000 f8f9 	bl	8015068 <_sbrk_r>
 8014e76:	1c43      	adds	r3, r0, #1
 8014e78:	d123      	bne.n	8014ec2 <_malloc_r+0x92>
 8014e7a:	230c      	movs	r3, #12
 8014e7c:	6033      	str	r3, [r6, #0]
 8014e7e:	4630      	mov	r0, r6
 8014e80:	f000 fa72 	bl	8015368 <__malloc_unlock>
 8014e84:	e7e3      	b.n	8014e4e <_malloc_r+0x1e>
 8014e86:	6823      	ldr	r3, [r4, #0]
 8014e88:	1b5b      	subs	r3, r3, r5
 8014e8a:	d417      	bmi.n	8014ebc <_malloc_r+0x8c>
 8014e8c:	2b0b      	cmp	r3, #11
 8014e8e:	d903      	bls.n	8014e98 <_malloc_r+0x68>
 8014e90:	6023      	str	r3, [r4, #0]
 8014e92:	441c      	add	r4, r3
 8014e94:	6025      	str	r5, [r4, #0]
 8014e96:	e004      	b.n	8014ea2 <_malloc_r+0x72>
 8014e98:	6863      	ldr	r3, [r4, #4]
 8014e9a:	42a2      	cmp	r2, r4
 8014e9c:	bf0c      	ite	eq
 8014e9e:	600b      	streq	r3, [r1, #0]
 8014ea0:	6053      	strne	r3, [r2, #4]
 8014ea2:	4630      	mov	r0, r6
 8014ea4:	f000 fa60 	bl	8015368 <__malloc_unlock>
 8014ea8:	f104 000b 	add.w	r0, r4, #11
 8014eac:	1d23      	adds	r3, r4, #4
 8014eae:	f020 0007 	bic.w	r0, r0, #7
 8014eb2:	1ac2      	subs	r2, r0, r3
 8014eb4:	d0cc      	beq.n	8014e50 <_malloc_r+0x20>
 8014eb6:	1a1b      	subs	r3, r3, r0
 8014eb8:	50a3      	str	r3, [r4, r2]
 8014eba:	e7c9      	b.n	8014e50 <_malloc_r+0x20>
 8014ebc:	4622      	mov	r2, r4
 8014ebe:	6864      	ldr	r4, [r4, #4]
 8014ec0:	e7cc      	b.n	8014e5c <_malloc_r+0x2c>
 8014ec2:	1cc4      	adds	r4, r0, #3
 8014ec4:	f024 0403 	bic.w	r4, r4, #3
 8014ec8:	42a0      	cmp	r0, r4
 8014eca:	d0e3      	beq.n	8014e94 <_malloc_r+0x64>
 8014ecc:	1a21      	subs	r1, r4, r0
 8014ece:	4630      	mov	r0, r6
 8014ed0:	f000 f8ca 	bl	8015068 <_sbrk_r>
 8014ed4:	3001      	adds	r0, #1
 8014ed6:	d1dd      	bne.n	8014e94 <_malloc_r+0x64>
 8014ed8:	e7cf      	b.n	8014e7a <_malloc_r+0x4a>
 8014eda:	bf00      	nop
 8014edc:	20006984 	.word	0x20006984
 8014ee0:	20006988 	.word	0x20006988

08014ee4 <iprintf>:
 8014ee4:	b40f      	push	{r0, r1, r2, r3}
 8014ee6:	4b0a      	ldr	r3, [pc, #40]	; (8014f10 <iprintf+0x2c>)
 8014ee8:	b513      	push	{r0, r1, r4, lr}
 8014eea:	681c      	ldr	r4, [r3, #0]
 8014eec:	b124      	cbz	r4, 8014ef8 <iprintf+0x14>
 8014eee:	69a3      	ldr	r3, [r4, #24]
 8014ef0:	b913      	cbnz	r3, 8014ef8 <iprintf+0x14>
 8014ef2:	4620      	mov	r0, r4
 8014ef4:	f7ff fe5e 	bl	8014bb4 <__sinit>
 8014ef8:	ab05      	add	r3, sp, #20
 8014efa:	9a04      	ldr	r2, [sp, #16]
 8014efc:	68a1      	ldr	r1, [r4, #8]
 8014efe:	9301      	str	r3, [sp, #4]
 8014f00:	4620      	mov	r0, r4
 8014f02:	f000 fa61 	bl	80153c8 <_vfiprintf_r>
 8014f06:	b002      	add	sp, #8
 8014f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f0c:	b004      	add	sp, #16
 8014f0e:	4770      	bx	lr
 8014f10:	20000020 	.word	0x20000020

08014f14 <rand>:
 8014f14:	4b17      	ldr	r3, [pc, #92]	; (8014f74 <rand+0x60>)
 8014f16:	b510      	push	{r4, lr}
 8014f18:	681c      	ldr	r4, [r3, #0]
 8014f1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014f1c:	b9b3      	cbnz	r3, 8014f4c <rand+0x38>
 8014f1e:	2018      	movs	r0, #24
 8014f20:	f7ff ff0a 	bl	8014d38 <malloc>
 8014f24:	63a0      	str	r0, [r4, #56]	; 0x38
 8014f26:	b928      	cbnz	r0, 8014f34 <rand+0x20>
 8014f28:	4602      	mov	r2, r0
 8014f2a:	4b13      	ldr	r3, [pc, #76]	; (8014f78 <rand+0x64>)
 8014f2c:	4813      	ldr	r0, [pc, #76]	; (8014f7c <rand+0x68>)
 8014f2e:	214e      	movs	r1, #78	; 0x4e
 8014f30:	f000 f900 	bl	8015134 <__assert_func>
 8014f34:	4a12      	ldr	r2, [pc, #72]	; (8014f80 <rand+0x6c>)
 8014f36:	4b13      	ldr	r3, [pc, #76]	; (8014f84 <rand+0x70>)
 8014f38:	e9c0 2300 	strd	r2, r3, [r0]
 8014f3c:	4b12      	ldr	r3, [pc, #72]	; (8014f88 <rand+0x74>)
 8014f3e:	6083      	str	r3, [r0, #8]
 8014f40:	230b      	movs	r3, #11
 8014f42:	8183      	strh	r3, [r0, #12]
 8014f44:	2201      	movs	r2, #1
 8014f46:	2300      	movs	r3, #0
 8014f48:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014f4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014f4e:	480f      	ldr	r0, [pc, #60]	; (8014f8c <rand+0x78>)
 8014f50:	690a      	ldr	r2, [r1, #16]
 8014f52:	694b      	ldr	r3, [r1, #20]
 8014f54:	4c0e      	ldr	r4, [pc, #56]	; (8014f90 <rand+0x7c>)
 8014f56:	4350      	muls	r0, r2
 8014f58:	fb04 0003 	mla	r0, r4, r3, r0
 8014f5c:	fba2 3404 	umull	r3, r4, r2, r4
 8014f60:	1c5a      	adds	r2, r3, #1
 8014f62:	4404      	add	r4, r0
 8014f64:	f144 0000 	adc.w	r0, r4, #0
 8014f68:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8014f6c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014f70:	bd10      	pop	{r4, pc}
 8014f72:	bf00      	nop
 8014f74:	20000020 	.word	0x20000020
 8014f78:	080193ec 	.word	0x080193ec
 8014f7c:	08019403 	.word	0x08019403
 8014f80:	abcd330e 	.word	0xabcd330e
 8014f84:	e66d1234 	.word	0xe66d1234
 8014f88:	0005deec 	.word	0x0005deec
 8014f8c:	5851f42d 	.word	0x5851f42d
 8014f90:	4c957f2d 	.word	0x4c957f2d

08014f94 <cleanup_glue>:
 8014f94:	b538      	push	{r3, r4, r5, lr}
 8014f96:	460c      	mov	r4, r1
 8014f98:	6809      	ldr	r1, [r1, #0]
 8014f9a:	4605      	mov	r5, r0
 8014f9c:	b109      	cbz	r1, 8014fa2 <cleanup_glue+0xe>
 8014f9e:	f7ff fff9 	bl	8014f94 <cleanup_glue>
 8014fa2:	4621      	mov	r1, r4
 8014fa4:	4628      	mov	r0, r5
 8014fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014faa:	f7ff bef1 	b.w	8014d90 <_free_r>
	...

08014fb0 <_reclaim_reent>:
 8014fb0:	4b2c      	ldr	r3, [pc, #176]	; (8015064 <_reclaim_reent+0xb4>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	4283      	cmp	r3, r0
 8014fb6:	b570      	push	{r4, r5, r6, lr}
 8014fb8:	4604      	mov	r4, r0
 8014fba:	d051      	beq.n	8015060 <_reclaim_reent+0xb0>
 8014fbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014fbe:	b143      	cbz	r3, 8014fd2 <_reclaim_reent+0x22>
 8014fc0:	68db      	ldr	r3, [r3, #12]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d14a      	bne.n	801505c <_reclaim_reent+0xac>
 8014fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fc8:	6819      	ldr	r1, [r3, #0]
 8014fca:	b111      	cbz	r1, 8014fd2 <_reclaim_reent+0x22>
 8014fcc:	4620      	mov	r0, r4
 8014fce:	f7ff fedf 	bl	8014d90 <_free_r>
 8014fd2:	6961      	ldr	r1, [r4, #20]
 8014fd4:	b111      	cbz	r1, 8014fdc <_reclaim_reent+0x2c>
 8014fd6:	4620      	mov	r0, r4
 8014fd8:	f7ff feda 	bl	8014d90 <_free_r>
 8014fdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014fde:	b111      	cbz	r1, 8014fe6 <_reclaim_reent+0x36>
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	f7ff fed5 	bl	8014d90 <_free_r>
 8014fe6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014fe8:	b111      	cbz	r1, 8014ff0 <_reclaim_reent+0x40>
 8014fea:	4620      	mov	r0, r4
 8014fec:	f7ff fed0 	bl	8014d90 <_free_r>
 8014ff0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014ff2:	b111      	cbz	r1, 8014ffa <_reclaim_reent+0x4a>
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	f7ff fecb 	bl	8014d90 <_free_r>
 8014ffa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014ffc:	b111      	cbz	r1, 8015004 <_reclaim_reent+0x54>
 8014ffe:	4620      	mov	r0, r4
 8015000:	f7ff fec6 	bl	8014d90 <_free_r>
 8015004:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8015006:	b111      	cbz	r1, 801500e <_reclaim_reent+0x5e>
 8015008:	4620      	mov	r0, r4
 801500a:	f7ff fec1 	bl	8014d90 <_free_r>
 801500e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015010:	b111      	cbz	r1, 8015018 <_reclaim_reent+0x68>
 8015012:	4620      	mov	r0, r4
 8015014:	f7ff febc 	bl	8014d90 <_free_r>
 8015018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801501a:	b111      	cbz	r1, 8015022 <_reclaim_reent+0x72>
 801501c:	4620      	mov	r0, r4
 801501e:	f7ff feb7 	bl	8014d90 <_free_r>
 8015022:	69a3      	ldr	r3, [r4, #24]
 8015024:	b1e3      	cbz	r3, 8015060 <_reclaim_reent+0xb0>
 8015026:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015028:	4620      	mov	r0, r4
 801502a:	4798      	blx	r3
 801502c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801502e:	b1b9      	cbz	r1, 8015060 <_reclaim_reent+0xb0>
 8015030:	4620      	mov	r0, r4
 8015032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015036:	f7ff bfad 	b.w	8014f94 <cleanup_glue>
 801503a:	5949      	ldr	r1, [r1, r5]
 801503c:	b941      	cbnz	r1, 8015050 <_reclaim_reent+0xa0>
 801503e:	3504      	adds	r5, #4
 8015040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015042:	2d80      	cmp	r5, #128	; 0x80
 8015044:	68d9      	ldr	r1, [r3, #12]
 8015046:	d1f8      	bne.n	801503a <_reclaim_reent+0x8a>
 8015048:	4620      	mov	r0, r4
 801504a:	f7ff fea1 	bl	8014d90 <_free_r>
 801504e:	e7ba      	b.n	8014fc6 <_reclaim_reent+0x16>
 8015050:	680e      	ldr	r6, [r1, #0]
 8015052:	4620      	mov	r0, r4
 8015054:	f7ff fe9c 	bl	8014d90 <_free_r>
 8015058:	4631      	mov	r1, r6
 801505a:	e7ef      	b.n	801503c <_reclaim_reent+0x8c>
 801505c:	2500      	movs	r5, #0
 801505e:	e7ef      	b.n	8015040 <_reclaim_reent+0x90>
 8015060:	bd70      	pop	{r4, r5, r6, pc}
 8015062:	bf00      	nop
 8015064:	20000020 	.word	0x20000020

08015068 <_sbrk_r>:
 8015068:	b538      	push	{r3, r4, r5, lr}
 801506a:	4d06      	ldr	r5, [pc, #24]	; (8015084 <_sbrk_r+0x1c>)
 801506c:	2300      	movs	r3, #0
 801506e:	4604      	mov	r4, r0
 8015070:	4608      	mov	r0, r1
 8015072:	602b      	str	r3, [r5, #0]
 8015074:	f7ec f9ce 	bl	8001414 <_sbrk>
 8015078:	1c43      	adds	r3, r0, #1
 801507a:	d102      	bne.n	8015082 <_sbrk_r+0x1a>
 801507c:	682b      	ldr	r3, [r5, #0]
 801507e:	b103      	cbz	r3, 8015082 <_sbrk_r+0x1a>
 8015080:	6023      	str	r3, [r4, #0]
 8015082:	bd38      	pop	{r3, r4, r5, pc}
 8015084:	2000d348 	.word	0x2000d348

08015088 <__sread>:
 8015088:	b510      	push	{r4, lr}
 801508a:	460c      	mov	r4, r1
 801508c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015090:	f000 fc5e 	bl	8015950 <_read_r>
 8015094:	2800      	cmp	r0, #0
 8015096:	bfab      	itete	ge
 8015098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801509a:	89a3      	ldrhlt	r3, [r4, #12]
 801509c:	181b      	addge	r3, r3, r0
 801509e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80150a2:	bfac      	ite	ge
 80150a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80150a6:	81a3      	strhlt	r3, [r4, #12]
 80150a8:	bd10      	pop	{r4, pc}

080150aa <__swrite>:
 80150aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150ae:	461f      	mov	r7, r3
 80150b0:	898b      	ldrh	r3, [r1, #12]
 80150b2:	05db      	lsls	r3, r3, #23
 80150b4:	4605      	mov	r5, r0
 80150b6:	460c      	mov	r4, r1
 80150b8:	4616      	mov	r6, r2
 80150ba:	d505      	bpl.n	80150c8 <__swrite+0x1e>
 80150bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150c0:	2302      	movs	r3, #2
 80150c2:	2200      	movs	r2, #0
 80150c4:	f000 f938 	bl	8015338 <_lseek_r>
 80150c8:	89a3      	ldrh	r3, [r4, #12]
 80150ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150d2:	81a3      	strh	r3, [r4, #12]
 80150d4:	4632      	mov	r2, r6
 80150d6:	463b      	mov	r3, r7
 80150d8:	4628      	mov	r0, r5
 80150da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150de:	f000 b817 	b.w	8015110 <_write_r>

080150e2 <__sseek>:
 80150e2:	b510      	push	{r4, lr}
 80150e4:	460c      	mov	r4, r1
 80150e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150ea:	f000 f925 	bl	8015338 <_lseek_r>
 80150ee:	1c43      	adds	r3, r0, #1
 80150f0:	89a3      	ldrh	r3, [r4, #12]
 80150f2:	bf15      	itete	ne
 80150f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80150f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80150fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80150fe:	81a3      	strheq	r3, [r4, #12]
 8015100:	bf18      	it	ne
 8015102:	81a3      	strhne	r3, [r4, #12]
 8015104:	bd10      	pop	{r4, pc}

08015106 <__sclose>:
 8015106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801510a:	f000 b831 	b.w	8015170 <_close_r>
	...

08015110 <_write_r>:
 8015110:	b538      	push	{r3, r4, r5, lr}
 8015112:	4d07      	ldr	r5, [pc, #28]	; (8015130 <_write_r+0x20>)
 8015114:	4604      	mov	r4, r0
 8015116:	4608      	mov	r0, r1
 8015118:	4611      	mov	r1, r2
 801511a:	2200      	movs	r2, #0
 801511c:	602a      	str	r2, [r5, #0]
 801511e:	461a      	mov	r2, r3
 8015120:	f7ec f927 	bl	8001372 <_write>
 8015124:	1c43      	adds	r3, r0, #1
 8015126:	d102      	bne.n	801512e <_write_r+0x1e>
 8015128:	682b      	ldr	r3, [r5, #0]
 801512a:	b103      	cbz	r3, 801512e <_write_r+0x1e>
 801512c:	6023      	str	r3, [r4, #0]
 801512e:	bd38      	pop	{r3, r4, r5, pc}
 8015130:	2000d348 	.word	0x2000d348

08015134 <__assert_func>:
 8015134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015136:	4614      	mov	r4, r2
 8015138:	461a      	mov	r2, r3
 801513a:	4b09      	ldr	r3, [pc, #36]	; (8015160 <__assert_func+0x2c>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	4605      	mov	r5, r0
 8015140:	68d8      	ldr	r0, [r3, #12]
 8015142:	b14c      	cbz	r4, 8015158 <__assert_func+0x24>
 8015144:	4b07      	ldr	r3, [pc, #28]	; (8015164 <__assert_func+0x30>)
 8015146:	9100      	str	r1, [sp, #0]
 8015148:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801514c:	4906      	ldr	r1, [pc, #24]	; (8015168 <__assert_func+0x34>)
 801514e:	462b      	mov	r3, r5
 8015150:	f000 f8e0 	bl	8015314 <fiprintf>
 8015154:	f000 fcce 	bl	8015af4 <abort>
 8015158:	4b04      	ldr	r3, [pc, #16]	; (801516c <__assert_func+0x38>)
 801515a:	461c      	mov	r4, r3
 801515c:	e7f3      	b.n	8015146 <__assert_func+0x12>
 801515e:	bf00      	nop
 8015160:	20000020 	.word	0x20000020
 8015164:	08019462 	.word	0x08019462
 8015168:	0801946f 	.word	0x0801946f
 801516c:	0801949d 	.word	0x0801949d

08015170 <_close_r>:
 8015170:	b538      	push	{r3, r4, r5, lr}
 8015172:	4d06      	ldr	r5, [pc, #24]	; (801518c <_close_r+0x1c>)
 8015174:	2300      	movs	r3, #0
 8015176:	4604      	mov	r4, r0
 8015178:	4608      	mov	r0, r1
 801517a:	602b      	str	r3, [r5, #0]
 801517c:	f7ec f915 	bl	80013aa <_close>
 8015180:	1c43      	adds	r3, r0, #1
 8015182:	d102      	bne.n	801518a <_close_r+0x1a>
 8015184:	682b      	ldr	r3, [r5, #0]
 8015186:	b103      	cbz	r3, 801518a <_close_r+0x1a>
 8015188:	6023      	str	r3, [r4, #0]
 801518a:	bd38      	pop	{r3, r4, r5, pc}
 801518c:	2000d348 	.word	0x2000d348

08015190 <__sflush_r>:
 8015190:	898a      	ldrh	r2, [r1, #12]
 8015192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015196:	4605      	mov	r5, r0
 8015198:	0710      	lsls	r0, r2, #28
 801519a:	460c      	mov	r4, r1
 801519c:	d458      	bmi.n	8015250 <__sflush_r+0xc0>
 801519e:	684b      	ldr	r3, [r1, #4]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	dc05      	bgt.n	80151b0 <__sflush_r+0x20>
 80151a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	dc02      	bgt.n	80151b0 <__sflush_r+0x20>
 80151aa:	2000      	movs	r0, #0
 80151ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151b2:	2e00      	cmp	r6, #0
 80151b4:	d0f9      	beq.n	80151aa <__sflush_r+0x1a>
 80151b6:	2300      	movs	r3, #0
 80151b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80151bc:	682f      	ldr	r7, [r5, #0]
 80151be:	602b      	str	r3, [r5, #0]
 80151c0:	d032      	beq.n	8015228 <__sflush_r+0x98>
 80151c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80151c4:	89a3      	ldrh	r3, [r4, #12]
 80151c6:	075a      	lsls	r2, r3, #29
 80151c8:	d505      	bpl.n	80151d6 <__sflush_r+0x46>
 80151ca:	6863      	ldr	r3, [r4, #4]
 80151cc:	1ac0      	subs	r0, r0, r3
 80151ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80151d0:	b10b      	cbz	r3, 80151d6 <__sflush_r+0x46>
 80151d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80151d4:	1ac0      	subs	r0, r0, r3
 80151d6:	2300      	movs	r3, #0
 80151d8:	4602      	mov	r2, r0
 80151da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151dc:	6a21      	ldr	r1, [r4, #32]
 80151de:	4628      	mov	r0, r5
 80151e0:	47b0      	blx	r6
 80151e2:	1c43      	adds	r3, r0, #1
 80151e4:	89a3      	ldrh	r3, [r4, #12]
 80151e6:	d106      	bne.n	80151f6 <__sflush_r+0x66>
 80151e8:	6829      	ldr	r1, [r5, #0]
 80151ea:	291d      	cmp	r1, #29
 80151ec:	d82c      	bhi.n	8015248 <__sflush_r+0xb8>
 80151ee:	4a2a      	ldr	r2, [pc, #168]	; (8015298 <__sflush_r+0x108>)
 80151f0:	40ca      	lsrs	r2, r1
 80151f2:	07d6      	lsls	r6, r2, #31
 80151f4:	d528      	bpl.n	8015248 <__sflush_r+0xb8>
 80151f6:	2200      	movs	r2, #0
 80151f8:	6062      	str	r2, [r4, #4]
 80151fa:	04d9      	lsls	r1, r3, #19
 80151fc:	6922      	ldr	r2, [r4, #16]
 80151fe:	6022      	str	r2, [r4, #0]
 8015200:	d504      	bpl.n	801520c <__sflush_r+0x7c>
 8015202:	1c42      	adds	r2, r0, #1
 8015204:	d101      	bne.n	801520a <__sflush_r+0x7a>
 8015206:	682b      	ldr	r3, [r5, #0]
 8015208:	b903      	cbnz	r3, 801520c <__sflush_r+0x7c>
 801520a:	6560      	str	r0, [r4, #84]	; 0x54
 801520c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801520e:	602f      	str	r7, [r5, #0]
 8015210:	2900      	cmp	r1, #0
 8015212:	d0ca      	beq.n	80151aa <__sflush_r+0x1a>
 8015214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015218:	4299      	cmp	r1, r3
 801521a:	d002      	beq.n	8015222 <__sflush_r+0x92>
 801521c:	4628      	mov	r0, r5
 801521e:	f7ff fdb7 	bl	8014d90 <_free_r>
 8015222:	2000      	movs	r0, #0
 8015224:	6360      	str	r0, [r4, #52]	; 0x34
 8015226:	e7c1      	b.n	80151ac <__sflush_r+0x1c>
 8015228:	6a21      	ldr	r1, [r4, #32]
 801522a:	2301      	movs	r3, #1
 801522c:	4628      	mov	r0, r5
 801522e:	47b0      	blx	r6
 8015230:	1c41      	adds	r1, r0, #1
 8015232:	d1c7      	bne.n	80151c4 <__sflush_r+0x34>
 8015234:	682b      	ldr	r3, [r5, #0]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d0c4      	beq.n	80151c4 <__sflush_r+0x34>
 801523a:	2b1d      	cmp	r3, #29
 801523c:	d001      	beq.n	8015242 <__sflush_r+0xb2>
 801523e:	2b16      	cmp	r3, #22
 8015240:	d101      	bne.n	8015246 <__sflush_r+0xb6>
 8015242:	602f      	str	r7, [r5, #0]
 8015244:	e7b1      	b.n	80151aa <__sflush_r+0x1a>
 8015246:	89a3      	ldrh	r3, [r4, #12]
 8015248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801524c:	81a3      	strh	r3, [r4, #12]
 801524e:	e7ad      	b.n	80151ac <__sflush_r+0x1c>
 8015250:	690f      	ldr	r7, [r1, #16]
 8015252:	2f00      	cmp	r7, #0
 8015254:	d0a9      	beq.n	80151aa <__sflush_r+0x1a>
 8015256:	0793      	lsls	r3, r2, #30
 8015258:	680e      	ldr	r6, [r1, #0]
 801525a:	bf08      	it	eq
 801525c:	694b      	ldreq	r3, [r1, #20]
 801525e:	600f      	str	r7, [r1, #0]
 8015260:	bf18      	it	ne
 8015262:	2300      	movne	r3, #0
 8015264:	eba6 0807 	sub.w	r8, r6, r7
 8015268:	608b      	str	r3, [r1, #8]
 801526a:	f1b8 0f00 	cmp.w	r8, #0
 801526e:	dd9c      	ble.n	80151aa <__sflush_r+0x1a>
 8015270:	6a21      	ldr	r1, [r4, #32]
 8015272:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015274:	4643      	mov	r3, r8
 8015276:	463a      	mov	r2, r7
 8015278:	4628      	mov	r0, r5
 801527a:	47b0      	blx	r6
 801527c:	2800      	cmp	r0, #0
 801527e:	dc06      	bgt.n	801528e <__sflush_r+0xfe>
 8015280:	89a3      	ldrh	r3, [r4, #12]
 8015282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015286:	81a3      	strh	r3, [r4, #12]
 8015288:	f04f 30ff 	mov.w	r0, #4294967295
 801528c:	e78e      	b.n	80151ac <__sflush_r+0x1c>
 801528e:	4407      	add	r7, r0
 8015290:	eba8 0800 	sub.w	r8, r8, r0
 8015294:	e7e9      	b.n	801526a <__sflush_r+0xda>
 8015296:	bf00      	nop
 8015298:	20400001 	.word	0x20400001

0801529c <_fflush_r>:
 801529c:	b538      	push	{r3, r4, r5, lr}
 801529e:	690b      	ldr	r3, [r1, #16]
 80152a0:	4605      	mov	r5, r0
 80152a2:	460c      	mov	r4, r1
 80152a4:	b913      	cbnz	r3, 80152ac <_fflush_r+0x10>
 80152a6:	2500      	movs	r5, #0
 80152a8:	4628      	mov	r0, r5
 80152aa:	bd38      	pop	{r3, r4, r5, pc}
 80152ac:	b118      	cbz	r0, 80152b6 <_fflush_r+0x1a>
 80152ae:	6983      	ldr	r3, [r0, #24]
 80152b0:	b90b      	cbnz	r3, 80152b6 <_fflush_r+0x1a>
 80152b2:	f7ff fc7f 	bl	8014bb4 <__sinit>
 80152b6:	4b14      	ldr	r3, [pc, #80]	; (8015308 <_fflush_r+0x6c>)
 80152b8:	429c      	cmp	r4, r3
 80152ba:	d11b      	bne.n	80152f4 <_fflush_r+0x58>
 80152bc:	686c      	ldr	r4, [r5, #4]
 80152be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d0ef      	beq.n	80152a6 <_fflush_r+0xa>
 80152c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80152c8:	07d0      	lsls	r0, r2, #31
 80152ca:	d404      	bmi.n	80152d6 <_fflush_r+0x3a>
 80152cc:	0599      	lsls	r1, r3, #22
 80152ce:	d402      	bmi.n	80152d6 <_fflush_r+0x3a>
 80152d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152d2:	f7ec f9b3 	bl	800163c <__retarget_lock_acquire_recursive>
 80152d6:	4628      	mov	r0, r5
 80152d8:	4621      	mov	r1, r4
 80152da:	f7ff ff59 	bl	8015190 <__sflush_r>
 80152de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80152e0:	07da      	lsls	r2, r3, #31
 80152e2:	4605      	mov	r5, r0
 80152e4:	d4e0      	bmi.n	80152a8 <_fflush_r+0xc>
 80152e6:	89a3      	ldrh	r3, [r4, #12]
 80152e8:	059b      	lsls	r3, r3, #22
 80152ea:	d4dd      	bmi.n	80152a8 <_fflush_r+0xc>
 80152ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152ee:	f7ec f9b9 	bl	8001664 <__retarget_lock_release_recursive>
 80152f2:	e7d9      	b.n	80152a8 <_fflush_r+0xc>
 80152f4:	4b05      	ldr	r3, [pc, #20]	; (801530c <_fflush_r+0x70>)
 80152f6:	429c      	cmp	r4, r3
 80152f8:	d101      	bne.n	80152fe <_fflush_r+0x62>
 80152fa:	68ac      	ldr	r4, [r5, #8]
 80152fc:	e7df      	b.n	80152be <_fflush_r+0x22>
 80152fe:	4b04      	ldr	r3, [pc, #16]	; (8015310 <_fflush_r+0x74>)
 8015300:	429c      	cmp	r4, r3
 8015302:	bf08      	it	eq
 8015304:	68ec      	ldreq	r4, [r5, #12]
 8015306:	e7da      	b.n	80152be <_fflush_r+0x22>
 8015308:	080193a8 	.word	0x080193a8
 801530c:	080193c8 	.word	0x080193c8
 8015310:	08019388 	.word	0x08019388

08015314 <fiprintf>:
 8015314:	b40e      	push	{r1, r2, r3}
 8015316:	b503      	push	{r0, r1, lr}
 8015318:	4601      	mov	r1, r0
 801531a:	ab03      	add	r3, sp, #12
 801531c:	4805      	ldr	r0, [pc, #20]	; (8015334 <fiprintf+0x20>)
 801531e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015322:	6800      	ldr	r0, [r0, #0]
 8015324:	9301      	str	r3, [sp, #4]
 8015326:	f000 f84f 	bl	80153c8 <_vfiprintf_r>
 801532a:	b002      	add	sp, #8
 801532c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015330:	b003      	add	sp, #12
 8015332:	4770      	bx	lr
 8015334:	20000020 	.word	0x20000020

08015338 <_lseek_r>:
 8015338:	b538      	push	{r3, r4, r5, lr}
 801533a:	4d07      	ldr	r5, [pc, #28]	; (8015358 <_lseek_r+0x20>)
 801533c:	4604      	mov	r4, r0
 801533e:	4608      	mov	r0, r1
 8015340:	4611      	mov	r1, r2
 8015342:	2200      	movs	r2, #0
 8015344:	602a      	str	r2, [r5, #0]
 8015346:	461a      	mov	r2, r3
 8015348:	f7ec f856 	bl	80013f8 <_lseek>
 801534c:	1c43      	adds	r3, r0, #1
 801534e:	d102      	bne.n	8015356 <_lseek_r+0x1e>
 8015350:	682b      	ldr	r3, [r5, #0]
 8015352:	b103      	cbz	r3, 8015356 <_lseek_r+0x1e>
 8015354:	6023      	str	r3, [r4, #0]
 8015356:	bd38      	pop	{r3, r4, r5, pc}
 8015358:	2000d348 	.word	0x2000d348

0801535c <__malloc_lock>:
 801535c:	4801      	ldr	r0, [pc, #4]	; (8015364 <__malloc_lock+0x8>)
 801535e:	f7ec b96d 	b.w	800163c <__retarget_lock_acquire_recursive>
 8015362:	bf00      	nop
 8015364:	2000037c 	.word	0x2000037c

08015368 <__malloc_unlock>:
 8015368:	4801      	ldr	r0, [pc, #4]	; (8015370 <__malloc_unlock+0x8>)
 801536a:	f7ec b97b 	b.w	8001664 <__retarget_lock_release_recursive>
 801536e:	bf00      	nop
 8015370:	2000037c 	.word	0x2000037c

08015374 <__sfputc_r>:
 8015374:	6893      	ldr	r3, [r2, #8]
 8015376:	3b01      	subs	r3, #1
 8015378:	2b00      	cmp	r3, #0
 801537a:	b410      	push	{r4}
 801537c:	6093      	str	r3, [r2, #8]
 801537e:	da08      	bge.n	8015392 <__sfputc_r+0x1e>
 8015380:	6994      	ldr	r4, [r2, #24]
 8015382:	42a3      	cmp	r3, r4
 8015384:	db01      	blt.n	801538a <__sfputc_r+0x16>
 8015386:	290a      	cmp	r1, #10
 8015388:	d103      	bne.n	8015392 <__sfputc_r+0x1e>
 801538a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801538e:	f000 baf1 	b.w	8015974 <__swbuf_r>
 8015392:	6813      	ldr	r3, [r2, #0]
 8015394:	1c58      	adds	r0, r3, #1
 8015396:	6010      	str	r0, [r2, #0]
 8015398:	7019      	strb	r1, [r3, #0]
 801539a:	4608      	mov	r0, r1
 801539c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153a0:	4770      	bx	lr

080153a2 <__sfputs_r>:
 80153a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153a4:	4606      	mov	r6, r0
 80153a6:	460f      	mov	r7, r1
 80153a8:	4614      	mov	r4, r2
 80153aa:	18d5      	adds	r5, r2, r3
 80153ac:	42ac      	cmp	r4, r5
 80153ae:	d101      	bne.n	80153b4 <__sfputs_r+0x12>
 80153b0:	2000      	movs	r0, #0
 80153b2:	e007      	b.n	80153c4 <__sfputs_r+0x22>
 80153b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153b8:	463a      	mov	r2, r7
 80153ba:	4630      	mov	r0, r6
 80153bc:	f7ff ffda 	bl	8015374 <__sfputc_r>
 80153c0:	1c43      	adds	r3, r0, #1
 80153c2:	d1f3      	bne.n	80153ac <__sfputs_r+0xa>
 80153c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080153c8 <_vfiprintf_r>:
 80153c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153cc:	460d      	mov	r5, r1
 80153ce:	b09d      	sub	sp, #116	; 0x74
 80153d0:	4614      	mov	r4, r2
 80153d2:	4698      	mov	r8, r3
 80153d4:	4606      	mov	r6, r0
 80153d6:	b118      	cbz	r0, 80153e0 <_vfiprintf_r+0x18>
 80153d8:	6983      	ldr	r3, [r0, #24]
 80153da:	b90b      	cbnz	r3, 80153e0 <_vfiprintf_r+0x18>
 80153dc:	f7ff fbea 	bl	8014bb4 <__sinit>
 80153e0:	4b89      	ldr	r3, [pc, #548]	; (8015608 <_vfiprintf_r+0x240>)
 80153e2:	429d      	cmp	r5, r3
 80153e4:	d11b      	bne.n	801541e <_vfiprintf_r+0x56>
 80153e6:	6875      	ldr	r5, [r6, #4]
 80153e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153ea:	07d9      	lsls	r1, r3, #31
 80153ec:	d405      	bmi.n	80153fa <_vfiprintf_r+0x32>
 80153ee:	89ab      	ldrh	r3, [r5, #12]
 80153f0:	059a      	lsls	r2, r3, #22
 80153f2:	d402      	bmi.n	80153fa <_vfiprintf_r+0x32>
 80153f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80153f6:	f7ec f921 	bl	800163c <__retarget_lock_acquire_recursive>
 80153fa:	89ab      	ldrh	r3, [r5, #12]
 80153fc:	071b      	lsls	r3, r3, #28
 80153fe:	d501      	bpl.n	8015404 <_vfiprintf_r+0x3c>
 8015400:	692b      	ldr	r3, [r5, #16]
 8015402:	b9eb      	cbnz	r3, 8015440 <_vfiprintf_r+0x78>
 8015404:	4629      	mov	r1, r5
 8015406:	4630      	mov	r0, r6
 8015408:	f000 fb06 	bl	8015a18 <__swsetup_r>
 801540c:	b1c0      	cbz	r0, 8015440 <_vfiprintf_r+0x78>
 801540e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015410:	07dc      	lsls	r4, r3, #31
 8015412:	d50e      	bpl.n	8015432 <_vfiprintf_r+0x6a>
 8015414:	f04f 30ff 	mov.w	r0, #4294967295
 8015418:	b01d      	add	sp, #116	; 0x74
 801541a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801541e:	4b7b      	ldr	r3, [pc, #492]	; (801560c <_vfiprintf_r+0x244>)
 8015420:	429d      	cmp	r5, r3
 8015422:	d101      	bne.n	8015428 <_vfiprintf_r+0x60>
 8015424:	68b5      	ldr	r5, [r6, #8]
 8015426:	e7df      	b.n	80153e8 <_vfiprintf_r+0x20>
 8015428:	4b79      	ldr	r3, [pc, #484]	; (8015610 <_vfiprintf_r+0x248>)
 801542a:	429d      	cmp	r5, r3
 801542c:	bf08      	it	eq
 801542e:	68f5      	ldreq	r5, [r6, #12]
 8015430:	e7da      	b.n	80153e8 <_vfiprintf_r+0x20>
 8015432:	89ab      	ldrh	r3, [r5, #12]
 8015434:	0598      	lsls	r0, r3, #22
 8015436:	d4ed      	bmi.n	8015414 <_vfiprintf_r+0x4c>
 8015438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801543a:	f7ec f913 	bl	8001664 <__retarget_lock_release_recursive>
 801543e:	e7e9      	b.n	8015414 <_vfiprintf_r+0x4c>
 8015440:	2300      	movs	r3, #0
 8015442:	9309      	str	r3, [sp, #36]	; 0x24
 8015444:	2320      	movs	r3, #32
 8015446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801544a:	f8cd 800c 	str.w	r8, [sp, #12]
 801544e:	2330      	movs	r3, #48	; 0x30
 8015450:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015614 <_vfiprintf_r+0x24c>
 8015454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015458:	f04f 0901 	mov.w	r9, #1
 801545c:	4623      	mov	r3, r4
 801545e:	469a      	mov	sl, r3
 8015460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015464:	b10a      	cbz	r2, 801546a <_vfiprintf_r+0xa2>
 8015466:	2a25      	cmp	r2, #37	; 0x25
 8015468:	d1f9      	bne.n	801545e <_vfiprintf_r+0x96>
 801546a:	ebba 0b04 	subs.w	fp, sl, r4
 801546e:	d00b      	beq.n	8015488 <_vfiprintf_r+0xc0>
 8015470:	465b      	mov	r3, fp
 8015472:	4622      	mov	r2, r4
 8015474:	4629      	mov	r1, r5
 8015476:	4630      	mov	r0, r6
 8015478:	f7ff ff93 	bl	80153a2 <__sfputs_r>
 801547c:	3001      	adds	r0, #1
 801547e:	f000 80aa 	beq.w	80155d6 <_vfiprintf_r+0x20e>
 8015482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015484:	445a      	add	r2, fp
 8015486:	9209      	str	r2, [sp, #36]	; 0x24
 8015488:	f89a 3000 	ldrb.w	r3, [sl]
 801548c:	2b00      	cmp	r3, #0
 801548e:	f000 80a2 	beq.w	80155d6 <_vfiprintf_r+0x20e>
 8015492:	2300      	movs	r3, #0
 8015494:	f04f 32ff 	mov.w	r2, #4294967295
 8015498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801549c:	f10a 0a01 	add.w	sl, sl, #1
 80154a0:	9304      	str	r3, [sp, #16]
 80154a2:	9307      	str	r3, [sp, #28]
 80154a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80154a8:	931a      	str	r3, [sp, #104]	; 0x68
 80154aa:	4654      	mov	r4, sl
 80154ac:	2205      	movs	r2, #5
 80154ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154b2:	4858      	ldr	r0, [pc, #352]	; (8015614 <_vfiprintf_r+0x24c>)
 80154b4:	f7ea fe8c 	bl	80001d0 <memchr>
 80154b8:	9a04      	ldr	r2, [sp, #16]
 80154ba:	b9d8      	cbnz	r0, 80154f4 <_vfiprintf_r+0x12c>
 80154bc:	06d1      	lsls	r1, r2, #27
 80154be:	bf44      	itt	mi
 80154c0:	2320      	movmi	r3, #32
 80154c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80154c6:	0713      	lsls	r3, r2, #28
 80154c8:	bf44      	itt	mi
 80154ca:	232b      	movmi	r3, #43	; 0x2b
 80154cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80154d0:	f89a 3000 	ldrb.w	r3, [sl]
 80154d4:	2b2a      	cmp	r3, #42	; 0x2a
 80154d6:	d015      	beq.n	8015504 <_vfiprintf_r+0x13c>
 80154d8:	9a07      	ldr	r2, [sp, #28]
 80154da:	4654      	mov	r4, sl
 80154dc:	2000      	movs	r0, #0
 80154de:	f04f 0c0a 	mov.w	ip, #10
 80154e2:	4621      	mov	r1, r4
 80154e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80154e8:	3b30      	subs	r3, #48	; 0x30
 80154ea:	2b09      	cmp	r3, #9
 80154ec:	d94e      	bls.n	801558c <_vfiprintf_r+0x1c4>
 80154ee:	b1b0      	cbz	r0, 801551e <_vfiprintf_r+0x156>
 80154f0:	9207      	str	r2, [sp, #28]
 80154f2:	e014      	b.n	801551e <_vfiprintf_r+0x156>
 80154f4:	eba0 0308 	sub.w	r3, r0, r8
 80154f8:	fa09 f303 	lsl.w	r3, r9, r3
 80154fc:	4313      	orrs	r3, r2
 80154fe:	9304      	str	r3, [sp, #16]
 8015500:	46a2      	mov	sl, r4
 8015502:	e7d2      	b.n	80154aa <_vfiprintf_r+0xe2>
 8015504:	9b03      	ldr	r3, [sp, #12]
 8015506:	1d19      	adds	r1, r3, #4
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	9103      	str	r1, [sp, #12]
 801550c:	2b00      	cmp	r3, #0
 801550e:	bfbb      	ittet	lt
 8015510:	425b      	neglt	r3, r3
 8015512:	f042 0202 	orrlt.w	r2, r2, #2
 8015516:	9307      	strge	r3, [sp, #28]
 8015518:	9307      	strlt	r3, [sp, #28]
 801551a:	bfb8      	it	lt
 801551c:	9204      	strlt	r2, [sp, #16]
 801551e:	7823      	ldrb	r3, [r4, #0]
 8015520:	2b2e      	cmp	r3, #46	; 0x2e
 8015522:	d10c      	bne.n	801553e <_vfiprintf_r+0x176>
 8015524:	7863      	ldrb	r3, [r4, #1]
 8015526:	2b2a      	cmp	r3, #42	; 0x2a
 8015528:	d135      	bne.n	8015596 <_vfiprintf_r+0x1ce>
 801552a:	9b03      	ldr	r3, [sp, #12]
 801552c:	1d1a      	adds	r2, r3, #4
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	9203      	str	r2, [sp, #12]
 8015532:	2b00      	cmp	r3, #0
 8015534:	bfb8      	it	lt
 8015536:	f04f 33ff 	movlt.w	r3, #4294967295
 801553a:	3402      	adds	r4, #2
 801553c:	9305      	str	r3, [sp, #20]
 801553e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015624 <_vfiprintf_r+0x25c>
 8015542:	7821      	ldrb	r1, [r4, #0]
 8015544:	2203      	movs	r2, #3
 8015546:	4650      	mov	r0, sl
 8015548:	f7ea fe42 	bl	80001d0 <memchr>
 801554c:	b140      	cbz	r0, 8015560 <_vfiprintf_r+0x198>
 801554e:	2340      	movs	r3, #64	; 0x40
 8015550:	eba0 000a 	sub.w	r0, r0, sl
 8015554:	fa03 f000 	lsl.w	r0, r3, r0
 8015558:	9b04      	ldr	r3, [sp, #16]
 801555a:	4303      	orrs	r3, r0
 801555c:	3401      	adds	r4, #1
 801555e:	9304      	str	r3, [sp, #16]
 8015560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015564:	482c      	ldr	r0, [pc, #176]	; (8015618 <_vfiprintf_r+0x250>)
 8015566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801556a:	2206      	movs	r2, #6
 801556c:	f7ea fe30 	bl	80001d0 <memchr>
 8015570:	2800      	cmp	r0, #0
 8015572:	d03f      	beq.n	80155f4 <_vfiprintf_r+0x22c>
 8015574:	4b29      	ldr	r3, [pc, #164]	; (801561c <_vfiprintf_r+0x254>)
 8015576:	bb1b      	cbnz	r3, 80155c0 <_vfiprintf_r+0x1f8>
 8015578:	9b03      	ldr	r3, [sp, #12]
 801557a:	3307      	adds	r3, #7
 801557c:	f023 0307 	bic.w	r3, r3, #7
 8015580:	3308      	adds	r3, #8
 8015582:	9303      	str	r3, [sp, #12]
 8015584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015586:	443b      	add	r3, r7
 8015588:	9309      	str	r3, [sp, #36]	; 0x24
 801558a:	e767      	b.n	801545c <_vfiprintf_r+0x94>
 801558c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015590:	460c      	mov	r4, r1
 8015592:	2001      	movs	r0, #1
 8015594:	e7a5      	b.n	80154e2 <_vfiprintf_r+0x11a>
 8015596:	2300      	movs	r3, #0
 8015598:	3401      	adds	r4, #1
 801559a:	9305      	str	r3, [sp, #20]
 801559c:	4619      	mov	r1, r3
 801559e:	f04f 0c0a 	mov.w	ip, #10
 80155a2:	4620      	mov	r0, r4
 80155a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155a8:	3a30      	subs	r2, #48	; 0x30
 80155aa:	2a09      	cmp	r2, #9
 80155ac:	d903      	bls.n	80155b6 <_vfiprintf_r+0x1ee>
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d0c5      	beq.n	801553e <_vfiprintf_r+0x176>
 80155b2:	9105      	str	r1, [sp, #20]
 80155b4:	e7c3      	b.n	801553e <_vfiprintf_r+0x176>
 80155b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80155ba:	4604      	mov	r4, r0
 80155bc:	2301      	movs	r3, #1
 80155be:	e7f0      	b.n	80155a2 <_vfiprintf_r+0x1da>
 80155c0:	ab03      	add	r3, sp, #12
 80155c2:	9300      	str	r3, [sp, #0]
 80155c4:	462a      	mov	r2, r5
 80155c6:	4b16      	ldr	r3, [pc, #88]	; (8015620 <_vfiprintf_r+0x258>)
 80155c8:	a904      	add	r1, sp, #16
 80155ca:	4630      	mov	r0, r6
 80155cc:	f3af 8000 	nop.w
 80155d0:	4607      	mov	r7, r0
 80155d2:	1c78      	adds	r0, r7, #1
 80155d4:	d1d6      	bne.n	8015584 <_vfiprintf_r+0x1bc>
 80155d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80155d8:	07d9      	lsls	r1, r3, #31
 80155da:	d405      	bmi.n	80155e8 <_vfiprintf_r+0x220>
 80155dc:	89ab      	ldrh	r3, [r5, #12]
 80155de:	059a      	lsls	r2, r3, #22
 80155e0:	d402      	bmi.n	80155e8 <_vfiprintf_r+0x220>
 80155e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80155e4:	f7ec f83e 	bl	8001664 <__retarget_lock_release_recursive>
 80155e8:	89ab      	ldrh	r3, [r5, #12]
 80155ea:	065b      	lsls	r3, r3, #25
 80155ec:	f53f af12 	bmi.w	8015414 <_vfiprintf_r+0x4c>
 80155f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155f2:	e711      	b.n	8015418 <_vfiprintf_r+0x50>
 80155f4:	ab03      	add	r3, sp, #12
 80155f6:	9300      	str	r3, [sp, #0]
 80155f8:	462a      	mov	r2, r5
 80155fa:	4b09      	ldr	r3, [pc, #36]	; (8015620 <_vfiprintf_r+0x258>)
 80155fc:	a904      	add	r1, sp, #16
 80155fe:	4630      	mov	r0, r6
 8015600:	f000 f880 	bl	8015704 <_printf_i>
 8015604:	e7e4      	b.n	80155d0 <_vfiprintf_r+0x208>
 8015606:	bf00      	nop
 8015608:	080193a8 	.word	0x080193a8
 801560c:	080193c8 	.word	0x080193c8
 8015610:	08019388 	.word	0x08019388
 8015614:	0801949e 	.word	0x0801949e
 8015618:	080194a8 	.word	0x080194a8
 801561c:	00000000 	.word	0x00000000
 8015620:	080153a3 	.word	0x080153a3
 8015624:	080194a4 	.word	0x080194a4

08015628 <_printf_common>:
 8015628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801562c:	4616      	mov	r6, r2
 801562e:	4699      	mov	r9, r3
 8015630:	688a      	ldr	r2, [r1, #8]
 8015632:	690b      	ldr	r3, [r1, #16]
 8015634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015638:	4293      	cmp	r3, r2
 801563a:	bfb8      	it	lt
 801563c:	4613      	movlt	r3, r2
 801563e:	6033      	str	r3, [r6, #0]
 8015640:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015644:	4607      	mov	r7, r0
 8015646:	460c      	mov	r4, r1
 8015648:	b10a      	cbz	r2, 801564e <_printf_common+0x26>
 801564a:	3301      	adds	r3, #1
 801564c:	6033      	str	r3, [r6, #0]
 801564e:	6823      	ldr	r3, [r4, #0]
 8015650:	0699      	lsls	r1, r3, #26
 8015652:	bf42      	ittt	mi
 8015654:	6833      	ldrmi	r3, [r6, #0]
 8015656:	3302      	addmi	r3, #2
 8015658:	6033      	strmi	r3, [r6, #0]
 801565a:	6825      	ldr	r5, [r4, #0]
 801565c:	f015 0506 	ands.w	r5, r5, #6
 8015660:	d106      	bne.n	8015670 <_printf_common+0x48>
 8015662:	f104 0a19 	add.w	sl, r4, #25
 8015666:	68e3      	ldr	r3, [r4, #12]
 8015668:	6832      	ldr	r2, [r6, #0]
 801566a:	1a9b      	subs	r3, r3, r2
 801566c:	42ab      	cmp	r3, r5
 801566e:	dc26      	bgt.n	80156be <_printf_common+0x96>
 8015670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015674:	1e13      	subs	r3, r2, #0
 8015676:	6822      	ldr	r2, [r4, #0]
 8015678:	bf18      	it	ne
 801567a:	2301      	movne	r3, #1
 801567c:	0692      	lsls	r2, r2, #26
 801567e:	d42b      	bmi.n	80156d8 <_printf_common+0xb0>
 8015680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015684:	4649      	mov	r1, r9
 8015686:	4638      	mov	r0, r7
 8015688:	47c0      	blx	r8
 801568a:	3001      	adds	r0, #1
 801568c:	d01e      	beq.n	80156cc <_printf_common+0xa4>
 801568e:	6823      	ldr	r3, [r4, #0]
 8015690:	68e5      	ldr	r5, [r4, #12]
 8015692:	6832      	ldr	r2, [r6, #0]
 8015694:	f003 0306 	and.w	r3, r3, #6
 8015698:	2b04      	cmp	r3, #4
 801569a:	bf08      	it	eq
 801569c:	1aad      	subeq	r5, r5, r2
 801569e:	68a3      	ldr	r3, [r4, #8]
 80156a0:	6922      	ldr	r2, [r4, #16]
 80156a2:	bf0c      	ite	eq
 80156a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80156a8:	2500      	movne	r5, #0
 80156aa:	4293      	cmp	r3, r2
 80156ac:	bfc4      	itt	gt
 80156ae:	1a9b      	subgt	r3, r3, r2
 80156b0:	18ed      	addgt	r5, r5, r3
 80156b2:	2600      	movs	r6, #0
 80156b4:	341a      	adds	r4, #26
 80156b6:	42b5      	cmp	r5, r6
 80156b8:	d11a      	bne.n	80156f0 <_printf_common+0xc8>
 80156ba:	2000      	movs	r0, #0
 80156bc:	e008      	b.n	80156d0 <_printf_common+0xa8>
 80156be:	2301      	movs	r3, #1
 80156c0:	4652      	mov	r2, sl
 80156c2:	4649      	mov	r1, r9
 80156c4:	4638      	mov	r0, r7
 80156c6:	47c0      	blx	r8
 80156c8:	3001      	adds	r0, #1
 80156ca:	d103      	bne.n	80156d4 <_printf_common+0xac>
 80156cc:	f04f 30ff 	mov.w	r0, #4294967295
 80156d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156d4:	3501      	adds	r5, #1
 80156d6:	e7c6      	b.n	8015666 <_printf_common+0x3e>
 80156d8:	18e1      	adds	r1, r4, r3
 80156da:	1c5a      	adds	r2, r3, #1
 80156dc:	2030      	movs	r0, #48	; 0x30
 80156de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80156e2:	4422      	add	r2, r4
 80156e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80156e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80156ec:	3302      	adds	r3, #2
 80156ee:	e7c7      	b.n	8015680 <_printf_common+0x58>
 80156f0:	2301      	movs	r3, #1
 80156f2:	4622      	mov	r2, r4
 80156f4:	4649      	mov	r1, r9
 80156f6:	4638      	mov	r0, r7
 80156f8:	47c0      	blx	r8
 80156fa:	3001      	adds	r0, #1
 80156fc:	d0e6      	beq.n	80156cc <_printf_common+0xa4>
 80156fe:	3601      	adds	r6, #1
 8015700:	e7d9      	b.n	80156b6 <_printf_common+0x8e>
	...

08015704 <_printf_i>:
 8015704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015708:	460c      	mov	r4, r1
 801570a:	4691      	mov	r9, r2
 801570c:	7e27      	ldrb	r7, [r4, #24]
 801570e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015710:	2f78      	cmp	r7, #120	; 0x78
 8015712:	4680      	mov	r8, r0
 8015714:	469a      	mov	sl, r3
 8015716:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801571a:	d807      	bhi.n	801572c <_printf_i+0x28>
 801571c:	2f62      	cmp	r7, #98	; 0x62
 801571e:	d80a      	bhi.n	8015736 <_printf_i+0x32>
 8015720:	2f00      	cmp	r7, #0
 8015722:	f000 80d8 	beq.w	80158d6 <_printf_i+0x1d2>
 8015726:	2f58      	cmp	r7, #88	; 0x58
 8015728:	f000 80a3 	beq.w	8015872 <_printf_i+0x16e>
 801572c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015734:	e03a      	b.n	80157ac <_printf_i+0xa8>
 8015736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801573a:	2b15      	cmp	r3, #21
 801573c:	d8f6      	bhi.n	801572c <_printf_i+0x28>
 801573e:	a001      	add	r0, pc, #4	; (adr r0, 8015744 <_printf_i+0x40>)
 8015740:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015744:	0801579d 	.word	0x0801579d
 8015748:	080157b1 	.word	0x080157b1
 801574c:	0801572d 	.word	0x0801572d
 8015750:	0801572d 	.word	0x0801572d
 8015754:	0801572d 	.word	0x0801572d
 8015758:	0801572d 	.word	0x0801572d
 801575c:	080157b1 	.word	0x080157b1
 8015760:	0801572d 	.word	0x0801572d
 8015764:	0801572d 	.word	0x0801572d
 8015768:	0801572d 	.word	0x0801572d
 801576c:	0801572d 	.word	0x0801572d
 8015770:	080158bd 	.word	0x080158bd
 8015774:	080157e1 	.word	0x080157e1
 8015778:	0801589f 	.word	0x0801589f
 801577c:	0801572d 	.word	0x0801572d
 8015780:	0801572d 	.word	0x0801572d
 8015784:	080158df 	.word	0x080158df
 8015788:	0801572d 	.word	0x0801572d
 801578c:	080157e1 	.word	0x080157e1
 8015790:	0801572d 	.word	0x0801572d
 8015794:	0801572d 	.word	0x0801572d
 8015798:	080158a7 	.word	0x080158a7
 801579c:	680b      	ldr	r3, [r1, #0]
 801579e:	1d1a      	adds	r2, r3, #4
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	600a      	str	r2, [r1, #0]
 80157a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80157a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80157ac:	2301      	movs	r3, #1
 80157ae:	e0a3      	b.n	80158f8 <_printf_i+0x1f4>
 80157b0:	6825      	ldr	r5, [r4, #0]
 80157b2:	6808      	ldr	r0, [r1, #0]
 80157b4:	062e      	lsls	r6, r5, #24
 80157b6:	f100 0304 	add.w	r3, r0, #4
 80157ba:	d50a      	bpl.n	80157d2 <_printf_i+0xce>
 80157bc:	6805      	ldr	r5, [r0, #0]
 80157be:	600b      	str	r3, [r1, #0]
 80157c0:	2d00      	cmp	r5, #0
 80157c2:	da03      	bge.n	80157cc <_printf_i+0xc8>
 80157c4:	232d      	movs	r3, #45	; 0x2d
 80157c6:	426d      	negs	r5, r5
 80157c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157cc:	485e      	ldr	r0, [pc, #376]	; (8015948 <_printf_i+0x244>)
 80157ce:	230a      	movs	r3, #10
 80157d0:	e019      	b.n	8015806 <_printf_i+0x102>
 80157d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80157d6:	6805      	ldr	r5, [r0, #0]
 80157d8:	600b      	str	r3, [r1, #0]
 80157da:	bf18      	it	ne
 80157dc:	b22d      	sxthne	r5, r5
 80157de:	e7ef      	b.n	80157c0 <_printf_i+0xbc>
 80157e0:	680b      	ldr	r3, [r1, #0]
 80157e2:	6825      	ldr	r5, [r4, #0]
 80157e4:	1d18      	adds	r0, r3, #4
 80157e6:	6008      	str	r0, [r1, #0]
 80157e8:	0628      	lsls	r0, r5, #24
 80157ea:	d501      	bpl.n	80157f0 <_printf_i+0xec>
 80157ec:	681d      	ldr	r5, [r3, #0]
 80157ee:	e002      	b.n	80157f6 <_printf_i+0xf2>
 80157f0:	0669      	lsls	r1, r5, #25
 80157f2:	d5fb      	bpl.n	80157ec <_printf_i+0xe8>
 80157f4:	881d      	ldrh	r5, [r3, #0]
 80157f6:	4854      	ldr	r0, [pc, #336]	; (8015948 <_printf_i+0x244>)
 80157f8:	2f6f      	cmp	r7, #111	; 0x6f
 80157fa:	bf0c      	ite	eq
 80157fc:	2308      	moveq	r3, #8
 80157fe:	230a      	movne	r3, #10
 8015800:	2100      	movs	r1, #0
 8015802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015806:	6866      	ldr	r6, [r4, #4]
 8015808:	60a6      	str	r6, [r4, #8]
 801580a:	2e00      	cmp	r6, #0
 801580c:	bfa2      	ittt	ge
 801580e:	6821      	ldrge	r1, [r4, #0]
 8015810:	f021 0104 	bicge.w	r1, r1, #4
 8015814:	6021      	strge	r1, [r4, #0]
 8015816:	b90d      	cbnz	r5, 801581c <_printf_i+0x118>
 8015818:	2e00      	cmp	r6, #0
 801581a:	d04d      	beq.n	80158b8 <_printf_i+0x1b4>
 801581c:	4616      	mov	r6, r2
 801581e:	fbb5 f1f3 	udiv	r1, r5, r3
 8015822:	fb03 5711 	mls	r7, r3, r1, r5
 8015826:	5dc7      	ldrb	r7, [r0, r7]
 8015828:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801582c:	462f      	mov	r7, r5
 801582e:	42bb      	cmp	r3, r7
 8015830:	460d      	mov	r5, r1
 8015832:	d9f4      	bls.n	801581e <_printf_i+0x11a>
 8015834:	2b08      	cmp	r3, #8
 8015836:	d10b      	bne.n	8015850 <_printf_i+0x14c>
 8015838:	6823      	ldr	r3, [r4, #0]
 801583a:	07df      	lsls	r7, r3, #31
 801583c:	d508      	bpl.n	8015850 <_printf_i+0x14c>
 801583e:	6923      	ldr	r3, [r4, #16]
 8015840:	6861      	ldr	r1, [r4, #4]
 8015842:	4299      	cmp	r1, r3
 8015844:	bfde      	ittt	le
 8015846:	2330      	movle	r3, #48	; 0x30
 8015848:	f806 3c01 	strble.w	r3, [r6, #-1]
 801584c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015850:	1b92      	subs	r2, r2, r6
 8015852:	6122      	str	r2, [r4, #16]
 8015854:	f8cd a000 	str.w	sl, [sp]
 8015858:	464b      	mov	r3, r9
 801585a:	aa03      	add	r2, sp, #12
 801585c:	4621      	mov	r1, r4
 801585e:	4640      	mov	r0, r8
 8015860:	f7ff fee2 	bl	8015628 <_printf_common>
 8015864:	3001      	adds	r0, #1
 8015866:	d14c      	bne.n	8015902 <_printf_i+0x1fe>
 8015868:	f04f 30ff 	mov.w	r0, #4294967295
 801586c:	b004      	add	sp, #16
 801586e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015872:	4835      	ldr	r0, [pc, #212]	; (8015948 <_printf_i+0x244>)
 8015874:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015878:	6823      	ldr	r3, [r4, #0]
 801587a:	680e      	ldr	r6, [r1, #0]
 801587c:	061f      	lsls	r7, r3, #24
 801587e:	f856 5b04 	ldr.w	r5, [r6], #4
 8015882:	600e      	str	r6, [r1, #0]
 8015884:	d514      	bpl.n	80158b0 <_printf_i+0x1ac>
 8015886:	07d9      	lsls	r1, r3, #31
 8015888:	bf44      	itt	mi
 801588a:	f043 0320 	orrmi.w	r3, r3, #32
 801588e:	6023      	strmi	r3, [r4, #0]
 8015890:	b91d      	cbnz	r5, 801589a <_printf_i+0x196>
 8015892:	6823      	ldr	r3, [r4, #0]
 8015894:	f023 0320 	bic.w	r3, r3, #32
 8015898:	6023      	str	r3, [r4, #0]
 801589a:	2310      	movs	r3, #16
 801589c:	e7b0      	b.n	8015800 <_printf_i+0xfc>
 801589e:	6823      	ldr	r3, [r4, #0]
 80158a0:	f043 0320 	orr.w	r3, r3, #32
 80158a4:	6023      	str	r3, [r4, #0]
 80158a6:	2378      	movs	r3, #120	; 0x78
 80158a8:	4828      	ldr	r0, [pc, #160]	; (801594c <_printf_i+0x248>)
 80158aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80158ae:	e7e3      	b.n	8015878 <_printf_i+0x174>
 80158b0:	065e      	lsls	r6, r3, #25
 80158b2:	bf48      	it	mi
 80158b4:	b2ad      	uxthmi	r5, r5
 80158b6:	e7e6      	b.n	8015886 <_printf_i+0x182>
 80158b8:	4616      	mov	r6, r2
 80158ba:	e7bb      	b.n	8015834 <_printf_i+0x130>
 80158bc:	680b      	ldr	r3, [r1, #0]
 80158be:	6826      	ldr	r6, [r4, #0]
 80158c0:	6960      	ldr	r0, [r4, #20]
 80158c2:	1d1d      	adds	r5, r3, #4
 80158c4:	600d      	str	r5, [r1, #0]
 80158c6:	0635      	lsls	r5, r6, #24
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	d501      	bpl.n	80158d0 <_printf_i+0x1cc>
 80158cc:	6018      	str	r0, [r3, #0]
 80158ce:	e002      	b.n	80158d6 <_printf_i+0x1d2>
 80158d0:	0671      	lsls	r1, r6, #25
 80158d2:	d5fb      	bpl.n	80158cc <_printf_i+0x1c8>
 80158d4:	8018      	strh	r0, [r3, #0]
 80158d6:	2300      	movs	r3, #0
 80158d8:	6123      	str	r3, [r4, #16]
 80158da:	4616      	mov	r6, r2
 80158dc:	e7ba      	b.n	8015854 <_printf_i+0x150>
 80158de:	680b      	ldr	r3, [r1, #0]
 80158e0:	1d1a      	adds	r2, r3, #4
 80158e2:	600a      	str	r2, [r1, #0]
 80158e4:	681e      	ldr	r6, [r3, #0]
 80158e6:	6862      	ldr	r2, [r4, #4]
 80158e8:	2100      	movs	r1, #0
 80158ea:	4630      	mov	r0, r6
 80158ec:	f7ea fc70 	bl	80001d0 <memchr>
 80158f0:	b108      	cbz	r0, 80158f6 <_printf_i+0x1f2>
 80158f2:	1b80      	subs	r0, r0, r6
 80158f4:	6060      	str	r0, [r4, #4]
 80158f6:	6863      	ldr	r3, [r4, #4]
 80158f8:	6123      	str	r3, [r4, #16]
 80158fa:	2300      	movs	r3, #0
 80158fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015900:	e7a8      	b.n	8015854 <_printf_i+0x150>
 8015902:	6923      	ldr	r3, [r4, #16]
 8015904:	4632      	mov	r2, r6
 8015906:	4649      	mov	r1, r9
 8015908:	4640      	mov	r0, r8
 801590a:	47d0      	blx	sl
 801590c:	3001      	adds	r0, #1
 801590e:	d0ab      	beq.n	8015868 <_printf_i+0x164>
 8015910:	6823      	ldr	r3, [r4, #0]
 8015912:	079b      	lsls	r3, r3, #30
 8015914:	d413      	bmi.n	801593e <_printf_i+0x23a>
 8015916:	68e0      	ldr	r0, [r4, #12]
 8015918:	9b03      	ldr	r3, [sp, #12]
 801591a:	4298      	cmp	r0, r3
 801591c:	bfb8      	it	lt
 801591e:	4618      	movlt	r0, r3
 8015920:	e7a4      	b.n	801586c <_printf_i+0x168>
 8015922:	2301      	movs	r3, #1
 8015924:	4632      	mov	r2, r6
 8015926:	4649      	mov	r1, r9
 8015928:	4640      	mov	r0, r8
 801592a:	47d0      	blx	sl
 801592c:	3001      	adds	r0, #1
 801592e:	d09b      	beq.n	8015868 <_printf_i+0x164>
 8015930:	3501      	adds	r5, #1
 8015932:	68e3      	ldr	r3, [r4, #12]
 8015934:	9903      	ldr	r1, [sp, #12]
 8015936:	1a5b      	subs	r3, r3, r1
 8015938:	42ab      	cmp	r3, r5
 801593a:	dcf2      	bgt.n	8015922 <_printf_i+0x21e>
 801593c:	e7eb      	b.n	8015916 <_printf_i+0x212>
 801593e:	2500      	movs	r5, #0
 8015940:	f104 0619 	add.w	r6, r4, #25
 8015944:	e7f5      	b.n	8015932 <_printf_i+0x22e>
 8015946:	bf00      	nop
 8015948:	080194af 	.word	0x080194af
 801594c:	080194c0 	.word	0x080194c0

08015950 <_read_r>:
 8015950:	b538      	push	{r3, r4, r5, lr}
 8015952:	4d07      	ldr	r5, [pc, #28]	; (8015970 <_read_r+0x20>)
 8015954:	4604      	mov	r4, r0
 8015956:	4608      	mov	r0, r1
 8015958:	4611      	mov	r1, r2
 801595a:	2200      	movs	r2, #0
 801595c:	602a      	str	r2, [r5, #0]
 801595e:	461a      	mov	r2, r3
 8015960:	f7eb fcea 	bl	8001338 <_read>
 8015964:	1c43      	adds	r3, r0, #1
 8015966:	d102      	bne.n	801596e <_read_r+0x1e>
 8015968:	682b      	ldr	r3, [r5, #0]
 801596a:	b103      	cbz	r3, 801596e <_read_r+0x1e>
 801596c:	6023      	str	r3, [r4, #0]
 801596e:	bd38      	pop	{r3, r4, r5, pc}
 8015970:	2000d348 	.word	0x2000d348

08015974 <__swbuf_r>:
 8015974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015976:	460e      	mov	r6, r1
 8015978:	4614      	mov	r4, r2
 801597a:	4605      	mov	r5, r0
 801597c:	b118      	cbz	r0, 8015986 <__swbuf_r+0x12>
 801597e:	6983      	ldr	r3, [r0, #24]
 8015980:	b90b      	cbnz	r3, 8015986 <__swbuf_r+0x12>
 8015982:	f7ff f917 	bl	8014bb4 <__sinit>
 8015986:	4b21      	ldr	r3, [pc, #132]	; (8015a0c <__swbuf_r+0x98>)
 8015988:	429c      	cmp	r4, r3
 801598a:	d12b      	bne.n	80159e4 <__swbuf_r+0x70>
 801598c:	686c      	ldr	r4, [r5, #4]
 801598e:	69a3      	ldr	r3, [r4, #24]
 8015990:	60a3      	str	r3, [r4, #8]
 8015992:	89a3      	ldrh	r3, [r4, #12]
 8015994:	071a      	lsls	r2, r3, #28
 8015996:	d52f      	bpl.n	80159f8 <__swbuf_r+0x84>
 8015998:	6923      	ldr	r3, [r4, #16]
 801599a:	b36b      	cbz	r3, 80159f8 <__swbuf_r+0x84>
 801599c:	6923      	ldr	r3, [r4, #16]
 801599e:	6820      	ldr	r0, [r4, #0]
 80159a0:	1ac0      	subs	r0, r0, r3
 80159a2:	6963      	ldr	r3, [r4, #20]
 80159a4:	b2f6      	uxtb	r6, r6
 80159a6:	4283      	cmp	r3, r0
 80159a8:	4637      	mov	r7, r6
 80159aa:	dc04      	bgt.n	80159b6 <__swbuf_r+0x42>
 80159ac:	4621      	mov	r1, r4
 80159ae:	4628      	mov	r0, r5
 80159b0:	f7ff fc74 	bl	801529c <_fflush_r>
 80159b4:	bb30      	cbnz	r0, 8015a04 <__swbuf_r+0x90>
 80159b6:	68a3      	ldr	r3, [r4, #8]
 80159b8:	3b01      	subs	r3, #1
 80159ba:	60a3      	str	r3, [r4, #8]
 80159bc:	6823      	ldr	r3, [r4, #0]
 80159be:	1c5a      	adds	r2, r3, #1
 80159c0:	6022      	str	r2, [r4, #0]
 80159c2:	701e      	strb	r6, [r3, #0]
 80159c4:	6963      	ldr	r3, [r4, #20]
 80159c6:	3001      	adds	r0, #1
 80159c8:	4283      	cmp	r3, r0
 80159ca:	d004      	beq.n	80159d6 <__swbuf_r+0x62>
 80159cc:	89a3      	ldrh	r3, [r4, #12]
 80159ce:	07db      	lsls	r3, r3, #31
 80159d0:	d506      	bpl.n	80159e0 <__swbuf_r+0x6c>
 80159d2:	2e0a      	cmp	r6, #10
 80159d4:	d104      	bne.n	80159e0 <__swbuf_r+0x6c>
 80159d6:	4621      	mov	r1, r4
 80159d8:	4628      	mov	r0, r5
 80159da:	f7ff fc5f 	bl	801529c <_fflush_r>
 80159de:	b988      	cbnz	r0, 8015a04 <__swbuf_r+0x90>
 80159e0:	4638      	mov	r0, r7
 80159e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159e4:	4b0a      	ldr	r3, [pc, #40]	; (8015a10 <__swbuf_r+0x9c>)
 80159e6:	429c      	cmp	r4, r3
 80159e8:	d101      	bne.n	80159ee <__swbuf_r+0x7a>
 80159ea:	68ac      	ldr	r4, [r5, #8]
 80159ec:	e7cf      	b.n	801598e <__swbuf_r+0x1a>
 80159ee:	4b09      	ldr	r3, [pc, #36]	; (8015a14 <__swbuf_r+0xa0>)
 80159f0:	429c      	cmp	r4, r3
 80159f2:	bf08      	it	eq
 80159f4:	68ec      	ldreq	r4, [r5, #12]
 80159f6:	e7ca      	b.n	801598e <__swbuf_r+0x1a>
 80159f8:	4621      	mov	r1, r4
 80159fa:	4628      	mov	r0, r5
 80159fc:	f000 f80c 	bl	8015a18 <__swsetup_r>
 8015a00:	2800      	cmp	r0, #0
 8015a02:	d0cb      	beq.n	801599c <__swbuf_r+0x28>
 8015a04:	f04f 37ff 	mov.w	r7, #4294967295
 8015a08:	e7ea      	b.n	80159e0 <__swbuf_r+0x6c>
 8015a0a:	bf00      	nop
 8015a0c:	080193a8 	.word	0x080193a8
 8015a10:	080193c8 	.word	0x080193c8
 8015a14:	08019388 	.word	0x08019388

08015a18 <__swsetup_r>:
 8015a18:	4b32      	ldr	r3, [pc, #200]	; (8015ae4 <__swsetup_r+0xcc>)
 8015a1a:	b570      	push	{r4, r5, r6, lr}
 8015a1c:	681d      	ldr	r5, [r3, #0]
 8015a1e:	4606      	mov	r6, r0
 8015a20:	460c      	mov	r4, r1
 8015a22:	b125      	cbz	r5, 8015a2e <__swsetup_r+0x16>
 8015a24:	69ab      	ldr	r3, [r5, #24]
 8015a26:	b913      	cbnz	r3, 8015a2e <__swsetup_r+0x16>
 8015a28:	4628      	mov	r0, r5
 8015a2a:	f7ff f8c3 	bl	8014bb4 <__sinit>
 8015a2e:	4b2e      	ldr	r3, [pc, #184]	; (8015ae8 <__swsetup_r+0xd0>)
 8015a30:	429c      	cmp	r4, r3
 8015a32:	d10f      	bne.n	8015a54 <__swsetup_r+0x3c>
 8015a34:	686c      	ldr	r4, [r5, #4]
 8015a36:	89a3      	ldrh	r3, [r4, #12]
 8015a38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a3c:	0719      	lsls	r1, r3, #28
 8015a3e:	d42c      	bmi.n	8015a9a <__swsetup_r+0x82>
 8015a40:	06dd      	lsls	r5, r3, #27
 8015a42:	d411      	bmi.n	8015a68 <__swsetup_r+0x50>
 8015a44:	2309      	movs	r3, #9
 8015a46:	6033      	str	r3, [r6, #0]
 8015a48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015a4c:	81a3      	strh	r3, [r4, #12]
 8015a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8015a52:	e03e      	b.n	8015ad2 <__swsetup_r+0xba>
 8015a54:	4b25      	ldr	r3, [pc, #148]	; (8015aec <__swsetup_r+0xd4>)
 8015a56:	429c      	cmp	r4, r3
 8015a58:	d101      	bne.n	8015a5e <__swsetup_r+0x46>
 8015a5a:	68ac      	ldr	r4, [r5, #8]
 8015a5c:	e7eb      	b.n	8015a36 <__swsetup_r+0x1e>
 8015a5e:	4b24      	ldr	r3, [pc, #144]	; (8015af0 <__swsetup_r+0xd8>)
 8015a60:	429c      	cmp	r4, r3
 8015a62:	bf08      	it	eq
 8015a64:	68ec      	ldreq	r4, [r5, #12]
 8015a66:	e7e6      	b.n	8015a36 <__swsetup_r+0x1e>
 8015a68:	0758      	lsls	r0, r3, #29
 8015a6a:	d512      	bpl.n	8015a92 <__swsetup_r+0x7a>
 8015a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a6e:	b141      	cbz	r1, 8015a82 <__swsetup_r+0x6a>
 8015a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a74:	4299      	cmp	r1, r3
 8015a76:	d002      	beq.n	8015a7e <__swsetup_r+0x66>
 8015a78:	4630      	mov	r0, r6
 8015a7a:	f7ff f989 	bl	8014d90 <_free_r>
 8015a7e:	2300      	movs	r3, #0
 8015a80:	6363      	str	r3, [r4, #52]	; 0x34
 8015a82:	89a3      	ldrh	r3, [r4, #12]
 8015a84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015a88:	81a3      	strh	r3, [r4, #12]
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	6063      	str	r3, [r4, #4]
 8015a8e:	6923      	ldr	r3, [r4, #16]
 8015a90:	6023      	str	r3, [r4, #0]
 8015a92:	89a3      	ldrh	r3, [r4, #12]
 8015a94:	f043 0308 	orr.w	r3, r3, #8
 8015a98:	81a3      	strh	r3, [r4, #12]
 8015a9a:	6923      	ldr	r3, [r4, #16]
 8015a9c:	b94b      	cbnz	r3, 8015ab2 <__swsetup_r+0x9a>
 8015a9e:	89a3      	ldrh	r3, [r4, #12]
 8015aa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015aa8:	d003      	beq.n	8015ab2 <__swsetup_r+0x9a>
 8015aaa:	4621      	mov	r1, r4
 8015aac:	4630      	mov	r0, r6
 8015aae:	f000 f84d 	bl	8015b4c <__smakebuf_r>
 8015ab2:	89a0      	ldrh	r0, [r4, #12]
 8015ab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015ab8:	f010 0301 	ands.w	r3, r0, #1
 8015abc:	d00a      	beq.n	8015ad4 <__swsetup_r+0xbc>
 8015abe:	2300      	movs	r3, #0
 8015ac0:	60a3      	str	r3, [r4, #8]
 8015ac2:	6963      	ldr	r3, [r4, #20]
 8015ac4:	425b      	negs	r3, r3
 8015ac6:	61a3      	str	r3, [r4, #24]
 8015ac8:	6923      	ldr	r3, [r4, #16]
 8015aca:	b943      	cbnz	r3, 8015ade <__swsetup_r+0xc6>
 8015acc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015ad0:	d1ba      	bne.n	8015a48 <__swsetup_r+0x30>
 8015ad2:	bd70      	pop	{r4, r5, r6, pc}
 8015ad4:	0781      	lsls	r1, r0, #30
 8015ad6:	bf58      	it	pl
 8015ad8:	6963      	ldrpl	r3, [r4, #20]
 8015ada:	60a3      	str	r3, [r4, #8]
 8015adc:	e7f4      	b.n	8015ac8 <__swsetup_r+0xb0>
 8015ade:	2000      	movs	r0, #0
 8015ae0:	e7f7      	b.n	8015ad2 <__swsetup_r+0xba>
 8015ae2:	bf00      	nop
 8015ae4:	20000020 	.word	0x20000020
 8015ae8:	080193a8 	.word	0x080193a8
 8015aec:	080193c8 	.word	0x080193c8
 8015af0:	08019388 	.word	0x08019388

08015af4 <abort>:
 8015af4:	b508      	push	{r3, lr}
 8015af6:	2006      	movs	r0, #6
 8015af8:	f000 f890 	bl	8015c1c <raise>
 8015afc:	2001      	movs	r0, #1
 8015afe:	f7eb fc11 	bl	8001324 <_exit>

08015b02 <__swhatbuf_r>:
 8015b02:	b570      	push	{r4, r5, r6, lr}
 8015b04:	460e      	mov	r6, r1
 8015b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b0a:	2900      	cmp	r1, #0
 8015b0c:	b096      	sub	sp, #88	; 0x58
 8015b0e:	4614      	mov	r4, r2
 8015b10:	461d      	mov	r5, r3
 8015b12:	da07      	bge.n	8015b24 <__swhatbuf_r+0x22>
 8015b14:	2300      	movs	r3, #0
 8015b16:	602b      	str	r3, [r5, #0]
 8015b18:	89b3      	ldrh	r3, [r6, #12]
 8015b1a:	061a      	lsls	r2, r3, #24
 8015b1c:	d410      	bmi.n	8015b40 <__swhatbuf_r+0x3e>
 8015b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b22:	e00e      	b.n	8015b42 <__swhatbuf_r+0x40>
 8015b24:	466a      	mov	r2, sp
 8015b26:	f000 f895 	bl	8015c54 <_fstat_r>
 8015b2a:	2800      	cmp	r0, #0
 8015b2c:	dbf2      	blt.n	8015b14 <__swhatbuf_r+0x12>
 8015b2e:	9a01      	ldr	r2, [sp, #4]
 8015b30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015b34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015b38:	425a      	negs	r2, r3
 8015b3a:	415a      	adcs	r2, r3
 8015b3c:	602a      	str	r2, [r5, #0]
 8015b3e:	e7ee      	b.n	8015b1e <__swhatbuf_r+0x1c>
 8015b40:	2340      	movs	r3, #64	; 0x40
 8015b42:	2000      	movs	r0, #0
 8015b44:	6023      	str	r3, [r4, #0]
 8015b46:	b016      	add	sp, #88	; 0x58
 8015b48:	bd70      	pop	{r4, r5, r6, pc}
	...

08015b4c <__smakebuf_r>:
 8015b4c:	898b      	ldrh	r3, [r1, #12]
 8015b4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015b50:	079d      	lsls	r5, r3, #30
 8015b52:	4606      	mov	r6, r0
 8015b54:	460c      	mov	r4, r1
 8015b56:	d507      	bpl.n	8015b68 <__smakebuf_r+0x1c>
 8015b58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015b5c:	6023      	str	r3, [r4, #0]
 8015b5e:	6123      	str	r3, [r4, #16]
 8015b60:	2301      	movs	r3, #1
 8015b62:	6163      	str	r3, [r4, #20]
 8015b64:	b002      	add	sp, #8
 8015b66:	bd70      	pop	{r4, r5, r6, pc}
 8015b68:	ab01      	add	r3, sp, #4
 8015b6a:	466a      	mov	r2, sp
 8015b6c:	f7ff ffc9 	bl	8015b02 <__swhatbuf_r>
 8015b70:	9900      	ldr	r1, [sp, #0]
 8015b72:	4605      	mov	r5, r0
 8015b74:	4630      	mov	r0, r6
 8015b76:	f7ff f95b 	bl	8014e30 <_malloc_r>
 8015b7a:	b948      	cbnz	r0, 8015b90 <__smakebuf_r+0x44>
 8015b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b80:	059a      	lsls	r2, r3, #22
 8015b82:	d4ef      	bmi.n	8015b64 <__smakebuf_r+0x18>
 8015b84:	f023 0303 	bic.w	r3, r3, #3
 8015b88:	f043 0302 	orr.w	r3, r3, #2
 8015b8c:	81a3      	strh	r3, [r4, #12]
 8015b8e:	e7e3      	b.n	8015b58 <__smakebuf_r+0xc>
 8015b90:	4b0d      	ldr	r3, [pc, #52]	; (8015bc8 <__smakebuf_r+0x7c>)
 8015b92:	62b3      	str	r3, [r6, #40]	; 0x28
 8015b94:	89a3      	ldrh	r3, [r4, #12]
 8015b96:	6020      	str	r0, [r4, #0]
 8015b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b9c:	81a3      	strh	r3, [r4, #12]
 8015b9e:	9b00      	ldr	r3, [sp, #0]
 8015ba0:	6163      	str	r3, [r4, #20]
 8015ba2:	9b01      	ldr	r3, [sp, #4]
 8015ba4:	6120      	str	r0, [r4, #16]
 8015ba6:	b15b      	cbz	r3, 8015bc0 <__smakebuf_r+0x74>
 8015ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bac:	4630      	mov	r0, r6
 8015bae:	f000 f863 	bl	8015c78 <_isatty_r>
 8015bb2:	b128      	cbz	r0, 8015bc0 <__smakebuf_r+0x74>
 8015bb4:	89a3      	ldrh	r3, [r4, #12]
 8015bb6:	f023 0303 	bic.w	r3, r3, #3
 8015bba:	f043 0301 	orr.w	r3, r3, #1
 8015bbe:	81a3      	strh	r3, [r4, #12]
 8015bc0:	89a0      	ldrh	r0, [r4, #12]
 8015bc2:	4305      	orrs	r5, r0
 8015bc4:	81a5      	strh	r5, [r4, #12]
 8015bc6:	e7cd      	b.n	8015b64 <__smakebuf_r+0x18>
 8015bc8:	08014b4d 	.word	0x08014b4d

08015bcc <_raise_r>:
 8015bcc:	291f      	cmp	r1, #31
 8015bce:	b538      	push	{r3, r4, r5, lr}
 8015bd0:	4604      	mov	r4, r0
 8015bd2:	460d      	mov	r5, r1
 8015bd4:	d904      	bls.n	8015be0 <_raise_r+0x14>
 8015bd6:	2316      	movs	r3, #22
 8015bd8:	6003      	str	r3, [r0, #0]
 8015bda:	f04f 30ff 	mov.w	r0, #4294967295
 8015bde:	bd38      	pop	{r3, r4, r5, pc}
 8015be0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015be2:	b112      	cbz	r2, 8015bea <_raise_r+0x1e>
 8015be4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015be8:	b94b      	cbnz	r3, 8015bfe <_raise_r+0x32>
 8015bea:	4620      	mov	r0, r4
 8015bec:	f000 f830 	bl	8015c50 <_getpid_r>
 8015bf0:	462a      	mov	r2, r5
 8015bf2:	4601      	mov	r1, r0
 8015bf4:	4620      	mov	r0, r4
 8015bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015bfa:	f000 b817 	b.w	8015c2c <_kill_r>
 8015bfe:	2b01      	cmp	r3, #1
 8015c00:	d00a      	beq.n	8015c18 <_raise_r+0x4c>
 8015c02:	1c59      	adds	r1, r3, #1
 8015c04:	d103      	bne.n	8015c0e <_raise_r+0x42>
 8015c06:	2316      	movs	r3, #22
 8015c08:	6003      	str	r3, [r0, #0]
 8015c0a:	2001      	movs	r0, #1
 8015c0c:	e7e7      	b.n	8015bde <_raise_r+0x12>
 8015c0e:	2400      	movs	r4, #0
 8015c10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015c14:	4628      	mov	r0, r5
 8015c16:	4798      	blx	r3
 8015c18:	2000      	movs	r0, #0
 8015c1a:	e7e0      	b.n	8015bde <_raise_r+0x12>

08015c1c <raise>:
 8015c1c:	4b02      	ldr	r3, [pc, #8]	; (8015c28 <raise+0xc>)
 8015c1e:	4601      	mov	r1, r0
 8015c20:	6818      	ldr	r0, [r3, #0]
 8015c22:	f7ff bfd3 	b.w	8015bcc <_raise_r>
 8015c26:	bf00      	nop
 8015c28:	20000020 	.word	0x20000020

08015c2c <_kill_r>:
 8015c2c:	b538      	push	{r3, r4, r5, lr}
 8015c2e:	4d07      	ldr	r5, [pc, #28]	; (8015c4c <_kill_r+0x20>)
 8015c30:	2300      	movs	r3, #0
 8015c32:	4604      	mov	r4, r0
 8015c34:	4608      	mov	r0, r1
 8015c36:	4611      	mov	r1, r2
 8015c38:	602b      	str	r3, [r5, #0]
 8015c3a:	f7eb fb61 	bl	8001300 <_kill>
 8015c3e:	1c43      	adds	r3, r0, #1
 8015c40:	d102      	bne.n	8015c48 <_kill_r+0x1c>
 8015c42:	682b      	ldr	r3, [r5, #0]
 8015c44:	b103      	cbz	r3, 8015c48 <_kill_r+0x1c>
 8015c46:	6023      	str	r3, [r4, #0]
 8015c48:	bd38      	pop	{r3, r4, r5, pc}
 8015c4a:	bf00      	nop
 8015c4c:	2000d348 	.word	0x2000d348

08015c50 <_getpid_r>:
 8015c50:	f7eb bb4e 	b.w	80012f0 <_getpid>

08015c54 <_fstat_r>:
 8015c54:	b538      	push	{r3, r4, r5, lr}
 8015c56:	4d07      	ldr	r5, [pc, #28]	; (8015c74 <_fstat_r+0x20>)
 8015c58:	2300      	movs	r3, #0
 8015c5a:	4604      	mov	r4, r0
 8015c5c:	4608      	mov	r0, r1
 8015c5e:	4611      	mov	r1, r2
 8015c60:	602b      	str	r3, [r5, #0]
 8015c62:	f7eb fbae 	bl	80013c2 <_fstat>
 8015c66:	1c43      	adds	r3, r0, #1
 8015c68:	d102      	bne.n	8015c70 <_fstat_r+0x1c>
 8015c6a:	682b      	ldr	r3, [r5, #0]
 8015c6c:	b103      	cbz	r3, 8015c70 <_fstat_r+0x1c>
 8015c6e:	6023      	str	r3, [r4, #0]
 8015c70:	bd38      	pop	{r3, r4, r5, pc}
 8015c72:	bf00      	nop
 8015c74:	2000d348 	.word	0x2000d348

08015c78 <_isatty_r>:
 8015c78:	b538      	push	{r3, r4, r5, lr}
 8015c7a:	4d06      	ldr	r5, [pc, #24]	; (8015c94 <_isatty_r+0x1c>)
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	4604      	mov	r4, r0
 8015c80:	4608      	mov	r0, r1
 8015c82:	602b      	str	r3, [r5, #0]
 8015c84:	f7eb fbad 	bl	80013e2 <_isatty>
 8015c88:	1c43      	adds	r3, r0, #1
 8015c8a:	d102      	bne.n	8015c92 <_isatty_r+0x1a>
 8015c8c:	682b      	ldr	r3, [r5, #0]
 8015c8e:	b103      	cbz	r3, 8015c92 <_isatty_r+0x1a>
 8015c90:	6023      	str	r3, [r4, #0]
 8015c92:	bd38      	pop	{r3, r4, r5, pc}
 8015c94:	2000d348 	.word	0x2000d348

08015c98 <_init>:
 8015c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c9a:	bf00      	nop
 8015c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c9e:	bc08      	pop	{r3}
 8015ca0:	469e      	mov	lr, r3
 8015ca2:	4770      	bx	lr

08015ca4 <_fini>:
 8015ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ca6:	bf00      	nop
 8015ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015caa:	bc08      	pop	{r3}
 8015cac:	469e      	mov	lr, r3
 8015cae:	4770      	bx	lr
