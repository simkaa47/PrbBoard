
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003858  08017f18  08017f18  00027f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b770  0801b770  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801b770  0801b770  0002b770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b778  0801b778  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b778  0801b778  0002b778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b77c  0801b77c  0002b77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801b780  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
 10 .bss          0000d3f0  20000084  20000084  00030084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d474  2000d474  00030084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033808  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008491  00000000  00000000  000638bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023e8  00000000  00000000  0006bd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002210  00000000  00000000  0006e138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033d6b  00000000  00000000  00070348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ac6e  00000000  00000000  000a40b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2be0  00000000  00000000  000ded21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d1901  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000994c  00000000  00000000  001d1954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017f00 	.word	0x08017f00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08017f00 	.word	0x08017f00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <set_bit>:
 */

#include <control_bit.h>

uint16_t set_bit(uint16_t value, uint8_t num)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	80fb      	strh	r3, [r7, #6]
 8000580:	4613      	mov	r3, r2
 8000582:	717b      	strb	r3, [r7, #5]
     return value | (1 << num);
 8000584:	797b      	ldrb	r3, [r7, #5]
 8000586:	2201      	movs	r2, #1
 8000588:	fa02 f303 	lsl.w	r3, r2, r3
 800058c:	b21a      	sxth	r2, r3
 800058e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000592:	4313      	orrs	r3, r2
 8000594:	b21b      	sxth	r3, r3
 8000596:	b29b      	uxth	r3, r3
}
 8000598:	4618      	mov	r0, r3
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <Read_Inputs>:

extern Settings_Struct settings;
extern Meas_Data meas_data;

void Read_Inputs()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	meas_data.d_inputs.in0 	= settings.input_emulation_switches.in0  ? settings.input_emulation_values.in0 :  HAL_GPIO_ReadPin(DIN_0_GPIO_Port, DIN_0_Pin);
 80005a8:	4b9f      	ldr	r3, [pc, #636]	; (8000828 <Read_Inputs+0x284>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d005      	beq.n	80005c2 <Read_Inputs+0x1e>
 80005b6:	4b9c      	ldr	r3, [pc, #624]	; (8000828 <Read_Inputs+0x284>)
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	e008      	b.n	80005d4 <Read_Inputs+0x30>
 80005c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c6:	4899      	ldr	r0, [pc, #612]	; (800082c <Read_Inputs+0x288>)
 80005c8:	f003 fe7c 	bl	80042c4 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4996      	ldr	r1, [pc, #600]	; (8000830 <Read_Inputs+0x28c>)
 80005d6:	780b      	ldrb	r3, [r1, #0]
 80005d8:	f362 0300 	bfi	r3, r2, #0, #1
 80005dc:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in1 	= settings.input_emulation_switches.in1  ? settings.input_emulation_values.in1 :  HAL_GPIO_ReadPin(DIN_1_GPIO_Port, DIN_1_Pin);
 80005de:	4b92      	ldr	r3, [pc, #584]	; (8000828 <Read_Inputs+0x284>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d005      	beq.n	80005f8 <Read_Inputs+0x54>
 80005ec:	4b8e      	ldr	r3, [pc, #568]	; (8000828 <Read_Inputs+0x284>)
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	e008      	b.n	800060a <Read_Inputs+0x66>
 80005f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fc:	488b      	ldr	r0, [pc, #556]	; (800082c <Read_Inputs+0x288>)
 80005fe:	f003 fe61 	bl	80042c4 <HAL_GPIO_ReadPin>
 8000602:	4603      	mov	r3, r0
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4989      	ldr	r1, [pc, #548]	; (8000830 <Read_Inputs+0x28c>)
 800060c:	780b      	ldrb	r3, [r1, #0]
 800060e:	f362 0341 	bfi	r3, r2, #1, #1
 8000612:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in2 	= settings.input_emulation_switches.in2  ? settings.input_emulation_values.in2 :  HAL_GPIO_ReadPin(DIN_2_GPIO_Port, DIN_2_Pin);
 8000614:	4b84      	ldr	r3, [pc, #528]	; (8000828 <Read_Inputs+0x284>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d005      	beq.n	800062e <Read_Inputs+0x8a>
 8000622:	4b81      	ldr	r3, [pc, #516]	; (8000828 <Read_Inputs+0x284>)
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800062a:	b2da      	uxtb	r2, r3
 800062c:	e007      	b.n	800063e <Read_Inputs+0x9a>
 800062e:	2101      	movs	r1, #1
 8000630:	4880      	ldr	r0, [pc, #512]	; (8000834 <Read_Inputs+0x290>)
 8000632:	f003 fe47 	bl	80042c4 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	b2da      	uxtb	r2, r3
 800063e:	497c      	ldr	r1, [pc, #496]	; (8000830 <Read_Inputs+0x28c>)
 8000640:	780b      	ldrb	r3, [r1, #0]
 8000642:	f362 0382 	bfi	r3, r2, #2, #1
 8000646:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in3 	= settings.input_emulation_switches.in3  ? settings.input_emulation_values.in3 :  HAL_GPIO_ReadPin(DIN_3_GPIO_Port, DIN_3_Pin);
 8000648:	4b77      	ldr	r3, [pc, #476]	; (8000828 <Read_Inputs+0x284>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f003 0308 	and.w	r3, r3, #8
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d005      	beq.n	8000662 <Read_Inputs+0xbe>
 8000656:	4b74      	ldr	r3, [pc, #464]	; (8000828 <Read_Inputs+0x284>)
 8000658:	791b      	ldrb	r3, [r3, #4]
 800065a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	e007      	b.n	8000672 <Read_Inputs+0xce>
 8000662:	2102      	movs	r1, #2
 8000664:	4873      	ldr	r0, [pc, #460]	; (8000834 <Read_Inputs+0x290>)
 8000666:	f003 fe2d 	bl	80042c4 <HAL_GPIO_ReadPin>
 800066a:	4603      	mov	r3, r0
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	b2da      	uxtb	r2, r3
 8000672:	496f      	ldr	r1, [pc, #444]	; (8000830 <Read_Inputs+0x28c>)
 8000674:	780b      	ldrb	r3, [r1, #0]
 8000676:	f362 03c3 	bfi	r3, r2, #3, #1
 800067a:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in4 	= settings.input_emulation_switches.in4  ? settings.input_emulation_values.in4 :  HAL_GPIO_ReadPin(DIN_4_GPIO_Port, DIN_4_Pin);
 800067c:	4b6a      	ldr	r3, [pc, #424]	; (8000828 <Read_Inputs+0x284>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	f003 0310 	and.w	r3, r3, #16
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d005      	beq.n	8000696 <Read_Inputs+0xf2>
 800068a:	4b67      	ldr	r3, [pc, #412]	; (8000828 <Read_Inputs+0x284>)
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	e007      	b.n	80006a6 <Read_Inputs+0x102>
 8000696:	2104      	movs	r1, #4
 8000698:	4866      	ldr	r0, [pc, #408]	; (8000834 <Read_Inputs+0x290>)
 800069a:	f003 fe13 	bl	80042c4 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4962      	ldr	r1, [pc, #392]	; (8000830 <Read_Inputs+0x28c>)
 80006a8:	780b      	ldrb	r3, [r1, #0]
 80006aa:	f362 1304 	bfi	r3, r2, #4, #1
 80006ae:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in5 	= settings.input_emulation_switches.in5  ? settings.input_emulation_values.in5 :  HAL_GPIO_ReadPin(DIN_5_GPIO_Port, DIN_5_Pin);
 80006b0:	4b5d      	ldr	r3, [pc, #372]	; (8000828 <Read_Inputs+0x284>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	f003 0320 	and.w	r3, r3, #32
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d005      	beq.n	80006ca <Read_Inputs+0x126>
 80006be:	4b5a      	ldr	r3, [pc, #360]	; (8000828 <Read_Inputs+0x284>)
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	e007      	b.n	80006da <Read_Inputs+0x136>
 80006ca:	2108      	movs	r1, #8
 80006cc:	4859      	ldr	r0, [pc, #356]	; (8000834 <Read_Inputs+0x290>)
 80006ce:	f003 fdf9 	bl	80042c4 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4955      	ldr	r1, [pc, #340]	; (8000830 <Read_Inputs+0x28c>)
 80006dc:	780b      	ldrb	r3, [r1, #0]
 80006de:	f362 1345 	bfi	r3, r2, #5, #1
 80006e2:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in6 	= settings.input_emulation_switches.in6  ? settings.input_emulation_values.in6 :  HAL_GPIO_ReadPin(DIN_6_GPIO_Port, DIN_6_Pin);
 80006e4:	4b50      	ldr	r3, [pc, #320]	; (8000828 <Read_Inputs+0x284>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d005      	beq.n	80006fe <Read_Inputs+0x15a>
 80006f2:	4b4d      	ldr	r3, [pc, #308]	; (8000828 <Read_Inputs+0x284>)
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	e007      	b.n	800070e <Read_Inputs+0x16a>
 80006fe:	2110      	movs	r1, #16
 8000700:	484c      	ldr	r0, [pc, #304]	; (8000834 <Read_Inputs+0x290>)
 8000702:	f003 fddf 	bl	80042c4 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4948      	ldr	r1, [pc, #288]	; (8000830 <Read_Inputs+0x28c>)
 8000710:	780b      	ldrb	r3, [r1, #0]
 8000712:	f362 1386 	bfi	r3, r2, #6, #1
 8000716:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in7 	= settings.input_emulation_switches.in7  ? settings.input_emulation_values.in7 :  HAL_GPIO_ReadPin(DIN_7_GPIO_Port, DIN_7_Pin);
 8000718:	4b43      	ldr	r3, [pc, #268]	; (8000828 <Read_Inputs+0x284>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d005      	beq.n	8000732 <Read_Inputs+0x18e>
 8000726:	4b40      	ldr	r3, [pc, #256]	; (8000828 <Read_Inputs+0x284>)
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	e007      	b.n	8000742 <Read_Inputs+0x19e>
 8000732:	2120      	movs	r1, #32
 8000734:	483f      	ldr	r0, [pc, #252]	; (8000834 <Read_Inputs+0x290>)
 8000736:	f003 fdc5 	bl	80042c4 <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	493b      	ldr	r1, [pc, #236]	; (8000830 <Read_Inputs+0x28c>)
 8000744:	780b      	ldrb	r3, [r1, #0]
 8000746:	f362 13c7 	bfi	r3, r2, #7, #1
 800074a:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in8 	= settings.input_emulation_switches.in8  ? settings.input_emulation_values.in8 :  HAL_GPIO_ReadPin(DIN_8_GPIO_Port, DIN_8_Pin);
 800074c:	4b36      	ldr	r3, [pc, #216]	; (8000828 <Read_Inputs+0x284>)
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d005      	beq.n	8000766 <Read_Inputs+0x1c2>
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <Read_Inputs+0x284>)
 800075c:	795b      	ldrb	r3, [r3, #5]
 800075e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	e007      	b.n	8000776 <Read_Inputs+0x1d2>
 8000766:	2140      	movs	r1, #64	; 0x40
 8000768:	4832      	ldr	r0, [pc, #200]	; (8000834 <Read_Inputs+0x290>)
 800076a:	f003 fdab 	bl	80042c4 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	b2da      	uxtb	r2, r3
 8000776:	492e      	ldr	r1, [pc, #184]	; (8000830 <Read_Inputs+0x28c>)
 8000778:	784b      	ldrb	r3, [r1, #1]
 800077a:	f362 0300 	bfi	r3, r2, #0, #1
 800077e:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in9 	= settings.input_emulation_switches.in9  ? settings.input_emulation_values.in9 :  HAL_GPIO_ReadPin(DIN_9_GPIO_Port, DIN_9_Pin);
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <Read_Inputs+0x284>)
 8000782:	785b      	ldrb	r3, [r3, #1]
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d005      	beq.n	800079a <Read_Inputs+0x1f6>
 800078e:	4b26      	ldr	r3, [pc, #152]	; (8000828 <Read_Inputs+0x284>)
 8000790:	795b      	ldrb	r3, [r3, #5]
 8000792:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000796:	b2da      	uxtb	r2, r3
 8000798:	e008      	b.n	80007ac <Read_Inputs+0x208>
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	4826      	ldr	r0, [pc, #152]	; (8000838 <Read_Inputs+0x294>)
 80007a0:	f003 fd90 	bl	80042c4 <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4920      	ldr	r1, [pc, #128]	; (8000830 <Read_Inputs+0x28c>)
 80007ae:	784b      	ldrb	r3, [r1, #1]
 80007b0:	f362 0341 	bfi	r3, r2, #1, #1
 80007b4:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in10 = settings.input_emulation_switches.in10 ? settings.input_emulation_values.in10 : HAL_GPIO_ReadPin(DIN_10_GPIO_Port, DIN_10_Pin);
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <Read_Inputs+0x284>)
 80007b8:	785b      	ldrb	r3, [r3, #1]
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d005      	beq.n	80007d0 <Read_Inputs+0x22c>
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <Read_Inputs+0x284>)
 80007c6:	795b      	ldrb	r3, [r3, #5]
 80007c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	e008      	b.n	80007e2 <Read_Inputs+0x23e>
 80007d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <Read_Inputs+0x294>)
 80007d6:	f003 fd75 	bl	80042c4 <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4913      	ldr	r1, [pc, #76]	; (8000830 <Read_Inputs+0x28c>)
 80007e4:	784b      	ldrb	r3, [r1, #1]
 80007e6:	f362 0382 	bfi	r3, r2, #2, #1
 80007ea:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in11 = settings.input_emulation_switches.in11 ? settings.input_emulation_values.in11 : HAL_GPIO_ReadPin(DIN_11_GPIO_Port, DIN_11_Pin);
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <Read_Inputs+0x284>)
 80007ee:	785b      	ldrb	r3, [r3, #1]
 80007f0:	f003 0308 	and.w	r3, r3, #8
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d005      	beq.n	8000806 <Read_Inputs+0x262>
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <Read_Inputs+0x284>)
 80007fc:	795b      	ldrb	r3, [r3, #5]
 80007fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000802:	b2da      	uxtb	r2, r3
 8000804:	e008      	b.n	8000818 <Read_Inputs+0x274>
 8000806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <Read_Inputs+0x294>)
 800080c:	f003 fd5a 	bl	80042c4 <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4905      	ldr	r1, [pc, #20]	; (8000830 <Read_Inputs+0x28c>)
 800081a:	784b      	ldrb	r3, [r1, #1]
 800081c:	f362 03c3 	bfi	r3, r2, #3, #1
 8000820:	704b      	strb	r3, [r1, #1]
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000450 	.word	0x20000450
 800082c:	40020400 	.word	0x40020400
 8000830:	200004c8 	.word	0x200004c8
 8000834:	40021000 	.word	0x40021000
 8000838:	40020800 	.word	0x40020800

0800083c <Write_Outputs>:

void Write_Outputs()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	meas_data.d_outputs.out0  = settings.output_emulation_switches.out0  ? settings.output_emulation_values.out0  :  0;
 8000840:	4bb4      	ldr	r3, [pc, #720]	; (8000b14 <Write_Outputs+0x2d8>)
 8000842:	7a1b      	ldrb	r3, [r3, #8]
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d005      	beq.n	800085a <Write_Outputs+0x1e>
 800084e:	4bb1      	ldr	r3, [pc, #708]	; (8000b14 <Write_Outputs+0x2d8>)
 8000850:	7b1b      	ldrb	r3, [r3, #12]
 8000852:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000856:	b2d9      	uxtb	r1, r3
 8000858:	e000      	b.n	800085c <Write_Outputs+0x20>
 800085a:	2100      	movs	r1, #0
 800085c:	4aae      	ldr	r2, [pc, #696]	; (8000b18 <Write_Outputs+0x2dc>)
 800085e:	7913      	ldrb	r3, [r2, #4]
 8000860:	f361 0300 	bfi	r3, r1, #0, #1
 8000864:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out1  = settings.output_emulation_switches.out1  ? settings.output_emulation_values.out1  :  0;
 8000866:	4bab      	ldr	r3, [pc, #684]	; (8000b14 <Write_Outputs+0x2d8>)
 8000868:	7a1b      	ldrb	r3, [r3, #8]
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d005      	beq.n	8000880 <Write_Outputs+0x44>
 8000874:	4ba7      	ldr	r3, [pc, #668]	; (8000b14 <Write_Outputs+0x2d8>)
 8000876:	7b1b      	ldrb	r3, [r3, #12]
 8000878:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800087c:	b2d9      	uxtb	r1, r3
 800087e:	e000      	b.n	8000882 <Write_Outputs+0x46>
 8000880:	2100      	movs	r1, #0
 8000882:	4aa5      	ldr	r2, [pc, #660]	; (8000b18 <Write_Outputs+0x2dc>)
 8000884:	7913      	ldrb	r3, [r2, #4]
 8000886:	f361 0341 	bfi	r3, r1, #1, #1
 800088a:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out2  = settings.output_emulation_switches.out2  ? settings.output_emulation_values.out2  :  0;
 800088c:	4ba1      	ldr	r3, [pc, #644]	; (8000b14 <Write_Outputs+0x2d8>)
 800088e:	7a1b      	ldrb	r3, [r3, #8]
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b00      	cmp	r3, #0
 8000898:	d005      	beq.n	80008a6 <Write_Outputs+0x6a>
 800089a:	4b9e      	ldr	r3, [pc, #632]	; (8000b14 <Write_Outputs+0x2d8>)
 800089c:	7b1b      	ldrb	r3, [r3, #12]
 800089e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80008a2:	b2d9      	uxtb	r1, r3
 80008a4:	e000      	b.n	80008a8 <Write_Outputs+0x6c>
 80008a6:	2100      	movs	r1, #0
 80008a8:	4a9b      	ldr	r2, [pc, #620]	; (8000b18 <Write_Outputs+0x2dc>)
 80008aa:	7913      	ldrb	r3, [r2, #4]
 80008ac:	f361 0382 	bfi	r3, r1, #2, #1
 80008b0:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out3  = settings.output_emulation_switches.out3  ? settings.output_emulation_values.out3  :  0;
 80008b2:	4b98      	ldr	r3, [pc, #608]	; (8000b14 <Write_Outputs+0x2d8>)
 80008b4:	7a1b      	ldrb	r3, [r3, #8]
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d005      	beq.n	80008cc <Write_Outputs+0x90>
 80008c0:	4b94      	ldr	r3, [pc, #592]	; (8000b14 <Write_Outputs+0x2d8>)
 80008c2:	7b1b      	ldrb	r3, [r3, #12]
 80008c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80008c8:	b2d9      	uxtb	r1, r3
 80008ca:	e000      	b.n	80008ce <Write_Outputs+0x92>
 80008cc:	2100      	movs	r1, #0
 80008ce:	4a92      	ldr	r2, [pc, #584]	; (8000b18 <Write_Outputs+0x2dc>)
 80008d0:	7913      	ldrb	r3, [r2, #4]
 80008d2:	f361 03c3 	bfi	r3, r1, #3, #1
 80008d6:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out4  = settings.output_emulation_switches.out4  ? settings.output_emulation_values.out4  :  0;
 80008d8:	4b8e      	ldr	r3, [pc, #568]	; (8000b14 <Write_Outputs+0x2d8>)
 80008da:	7a1b      	ldrb	r3, [r3, #8]
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d005      	beq.n	80008f2 <Write_Outputs+0xb6>
 80008e6:	4b8b      	ldr	r3, [pc, #556]	; (8000b14 <Write_Outputs+0x2d8>)
 80008e8:	7b1b      	ldrb	r3, [r3, #12]
 80008ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80008ee:	b2d9      	uxtb	r1, r3
 80008f0:	e000      	b.n	80008f4 <Write_Outputs+0xb8>
 80008f2:	2100      	movs	r1, #0
 80008f4:	4a88      	ldr	r2, [pc, #544]	; (8000b18 <Write_Outputs+0x2dc>)
 80008f6:	7913      	ldrb	r3, [r2, #4]
 80008f8:	f361 1304 	bfi	r3, r1, #4, #1
 80008fc:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out5  = settings.output_emulation_switches.out5  ? settings.output_emulation_values.out5  :  0;
 80008fe:	4b85      	ldr	r3, [pc, #532]	; (8000b14 <Write_Outputs+0x2d8>)
 8000900:	7a1b      	ldrb	r3, [r3, #8]
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d005      	beq.n	8000918 <Write_Outputs+0xdc>
 800090c:	4b81      	ldr	r3, [pc, #516]	; (8000b14 <Write_Outputs+0x2d8>)
 800090e:	7b1b      	ldrb	r3, [r3, #12]
 8000910:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000914:	b2d9      	uxtb	r1, r3
 8000916:	e000      	b.n	800091a <Write_Outputs+0xde>
 8000918:	2100      	movs	r1, #0
 800091a:	4a7f      	ldr	r2, [pc, #508]	; (8000b18 <Write_Outputs+0x2dc>)
 800091c:	7913      	ldrb	r3, [r2, #4]
 800091e:	f361 1345 	bfi	r3, r1, #5, #1
 8000922:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out6  = settings.output_emulation_switches.out6  ? settings.output_emulation_values.out6  :  0;
 8000924:	4b7b      	ldr	r3, [pc, #492]	; (8000b14 <Write_Outputs+0x2d8>)
 8000926:	7a1b      	ldrb	r3, [r3, #8]
 8000928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d005      	beq.n	800093e <Write_Outputs+0x102>
 8000932:	4b78      	ldr	r3, [pc, #480]	; (8000b14 <Write_Outputs+0x2d8>)
 8000934:	7b1b      	ldrb	r3, [r3, #12]
 8000936:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800093a:	b2d9      	uxtb	r1, r3
 800093c:	e000      	b.n	8000940 <Write_Outputs+0x104>
 800093e:	2100      	movs	r1, #0
 8000940:	4a75      	ldr	r2, [pc, #468]	; (8000b18 <Write_Outputs+0x2dc>)
 8000942:	7913      	ldrb	r3, [r2, #4]
 8000944:	f361 1386 	bfi	r3, r1, #6, #1
 8000948:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out7  = settings.output_emulation_switches.out7  ? settings.output_emulation_values.out7  :  0;
 800094a:	4b72      	ldr	r3, [pc, #456]	; (8000b14 <Write_Outputs+0x2d8>)
 800094c:	7a1b      	ldrb	r3, [r3, #8]
 800094e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d005      	beq.n	8000964 <Write_Outputs+0x128>
 8000958:	4b6e      	ldr	r3, [pc, #440]	; (8000b14 <Write_Outputs+0x2d8>)
 800095a:	7b1b      	ldrb	r3, [r3, #12]
 800095c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000960:	b2d9      	uxtb	r1, r3
 8000962:	e000      	b.n	8000966 <Write_Outputs+0x12a>
 8000964:	2100      	movs	r1, #0
 8000966:	4a6c      	ldr	r2, [pc, #432]	; (8000b18 <Write_Outputs+0x2dc>)
 8000968:	7913      	ldrb	r3, [r2, #4]
 800096a:	f361 13c7 	bfi	r3, r1, #7, #1
 800096e:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out8  = settings.output_emulation_switches.out8  ? settings.output_emulation_values.out8  :  0;
 8000970:	4b68      	ldr	r3, [pc, #416]	; (8000b14 <Write_Outputs+0x2d8>)
 8000972:	7a5b      	ldrb	r3, [r3, #9]
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d005      	beq.n	800098a <Write_Outputs+0x14e>
 800097e:	4b65      	ldr	r3, [pc, #404]	; (8000b14 <Write_Outputs+0x2d8>)
 8000980:	7b5b      	ldrb	r3, [r3, #13]
 8000982:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000986:	b2d9      	uxtb	r1, r3
 8000988:	e000      	b.n	800098c <Write_Outputs+0x150>
 800098a:	2100      	movs	r1, #0
 800098c:	4a62      	ldr	r2, [pc, #392]	; (8000b18 <Write_Outputs+0x2dc>)
 800098e:	7953      	ldrb	r3, [r2, #5]
 8000990:	f361 0300 	bfi	r3, r1, #0, #1
 8000994:	7153      	strb	r3, [r2, #5]
	meas_data.d_outputs.out9  = settings.output_emulation_switches.out9  ? settings.output_emulation_values.out9  :  0;
 8000996:	4b5f      	ldr	r3, [pc, #380]	; (8000b14 <Write_Outputs+0x2d8>)
 8000998:	7a5b      	ldrb	r3, [r3, #9]
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d005      	beq.n	80009b0 <Write_Outputs+0x174>
 80009a4:	4b5b      	ldr	r3, [pc, #364]	; (8000b14 <Write_Outputs+0x2d8>)
 80009a6:	7b5b      	ldrb	r3, [r3, #13]
 80009a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80009ac:	b2d9      	uxtb	r1, r3
 80009ae:	e000      	b.n	80009b2 <Write_Outputs+0x176>
 80009b0:	2100      	movs	r1, #0
 80009b2:	4a59      	ldr	r2, [pc, #356]	; (8000b18 <Write_Outputs+0x2dc>)
 80009b4:	7953      	ldrb	r3, [r2, #5]
 80009b6:	f361 0341 	bfi	r3, r1, #1, #1
 80009ba:	7153      	strb	r3, [r2, #5]
	meas_data.d_outputs.out10 = settings.output_emulation_switches.out10 ? settings.output_emulation_values.out10 :  0;
 80009bc:	4b55      	ldr	r3, [pc, #340]	; (8000b14 <Write_Outputs+0x2d8>)
 80009be:	7a5b      	ldrb	r3, [r3, #9]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d005      	beq.n	80009d6 <Write_Outputs+0x19a>
 80009ca:	4b52      	ldr	r3, [pc, #328]	; (8000b14 <Write_Outputs+0x2d8>)
 80009cc:	7b5b      	ldrb	r3, [r3, #13]
 80009ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80009d2:	b2d9      	uxtb	r1, r3
 80009d4:	e000      	b.n	80009d8 <Write_Outputs+0x19c>
 80009d6:	2100      	movs	r1, #0
 80009d8:	4a4f      	ldr	r2, [pc, #316]	; (8000b18 <Write_Outputs+0x2dc>)
 80009da:	7953      	ldrb	r3, [r2, #5]
 80009dc:	f361 0382 	bfi	r3, r1, #2, #1
 80009e0:	7153      	strb	r3, [r2, #5]
	meas_data.d_outputs.out11 = settings.output_emulation_switches.out11 ? settings.output_emulation_values.out11 :  0;
 80009e2:	4b4c      	ldr	r3, [pc, #304]	; (8000b14 <Write_Outputs+0x2d8>)
 80009e4:	7a5b      	ldrb	r3, [r3, #9]
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d005      	beq.n	80009fc <Write_Outputs+0x1c0>
 80009f0:	4b48      	ldr	r3, [pc, #288]	; (8000b14 <Write_Outputs+0x2d8>)
 80009f2:	7b5b      	ldrb	r3, [r3, #13]
 80009f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80009f8:	b2d9      	uxtb	r1, r3
 80009fa:	e000      	b.n	80009fe <Write_Outputs+0x1c2>
 80009fc:	2100      	movs	r1, #0
 80009fe:	4a46      	ldr	r2, [pc, #280]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a00:	7953      	ldrb	r3, [r2, #5]
 8000a02:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a06:	7153      	strb	r3, [r2, #5]
	HAL_GPIO_WritePin(DOUT_0_GPIO_Port, DOUT_0_Pin, meas_data.d_outputs.out0);
 8000a08:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a0a:	791b      	ldrb	r3, [r3, #4]
 8000a0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	4841      	ldr	r0, [pc, #260]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a18:	f003 fc6c 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_1_GPIO_Port, DOUT_1_Pin, meas_data.d_outputs.out1);
 8000a1c:	4b3e      	ldr	r3, [pc, #248]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a1e:	791b      	ldrb	r3, [r3, #4]
 8000a20:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	461a      	mov	r2, r3
 8000a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2c:	483b      	ldr	r0, [pc, #236]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a2e:	f003 fc61 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_2_GPIO_Port, DOUT_2_Pin, meas_data.d_outputs.out2);
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a42:	4836      	ldr	r0, [pc, #216]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a44:	f003 fc56 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_3_GPIO_Port, DOUT_3_Pin, meas_data.d_outputs.out3);
 8000a48:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a4a:	791b      	ldrb	r3, [r3, #4]
 8000a4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	461a      	mov	r2, r3
 8000a54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a58:	4830      	ldr	r0, [pc, #192]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a5a:	f003 fc4b 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_4_GPIO_Port, DOUT_4_Pin, meas_data.d_outputs.out4);
 8000a5e:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a60:	791b      	ldrb	r3, [r3, #4]
 8000a62:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	461a      	mov	r2, r3
 8000a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a6e:	482b      	ldr	r0, [pc, #172]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a70:	f003 fc40 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_5_GPIO_Port, DOUT_5_Pin, meas_data.d_outputs.out5);
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a76:	791b      	ldrb	r3, [r3, #4]
 8000a78:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a84:	4825      	ldr	r0, [pc, #148]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a86:	f003 fc35 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_6_GPIO_Port, DOUT_6_Pin, meas_data.d_outputs.out6);
 8000a8a:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <Write_Outputs+0x2dc>)
 8000a8c:	791b      	ldrb	r3, [r3, #4]
 8000a8e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9a:	4820      	ldr	r0, [pc, #128]	; (8000b1c <Write_Outputs+0x2e0>)
 8000a9c:	f003 fc2a 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_7_GPIO_Port, DOUT_7_Pin, meas_data.d_outputs.out7);
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <Write_Outputs+0x2dc>)
 8000aa2:	791b      	ldrb	r3, [r3, #4]
 8000aa4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab0:	481a      	ldr	r0, [pc, #104]	; (8000b1c <Write_Outputs+0x2e0>)
 8000ab2:	f003 fc1f 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_8_GPIO_Port, DOUT_8_Pin, meas_data.d_outputs.out8);
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <Write_Outputs+0x2dc>)
 8000ab8:	795b      	ldrb	r3, [r3, #5]
 8000aba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac6:	4815      	ldr	r0, [pc, #84]	; (8000b1c <Write_Outputs+0x2e0>)
 8000ac8:	f003 fc14 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_9_GPIO_Port, DOUT_9_Pin, meas_data.d_outputs.out9);
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <Write_Outputs+0x2dc>)
 8000ace:	795b      	ldrb	r3, [r3, #5]
 8000ad0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000adc:	4810      	ldr	r0, [pc, #64]	; (8000b20 <Write_Outputs+0x2e4>)
 8000ade:	f003 fc09 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_10_GPIO_Port, DOUT_10_Pin, meas_data.d_outputs.out10);
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <Write_Outputs+0x2dc>)
 8000ae4:	795b      	ldrb	r3, [r3, #5]
 8000ae6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af2:	480c      	ldr	r0, [pc, #48]	; (8000b24 <Write_Outputs+0x2e8>)
 8000af4:	f003 fbfe 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_11_GPIO_Port, DOUT_11_Pin, meas_data.d_outputs.out11);
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <Write_Outputs+0x2dc>)
 8000afa:	795b      	ldrb	r3, [r3, #5]
 8000afc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <Write_Outputs+0x2e8>)
 8000b0a:	f003 fbf3 	bl	80042f4 <HAL_GPIO_WritePin>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000450 	.word	0x20000450
 8000b18:	200004c8 	.word	0x200004c8
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40020400 	.word	0x40020400
 8000b24:	40020c00 	.word	0x40020c00

08000b28 <ethernet_thread>:

static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer);
static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf);

void ethernet_thread(void *arg)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b0cc      	sub	sp, #304	; 0x130
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b32:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000b36:	6018      	str	r0, [r3, #0]
	struct netconn *conn;
	struct netbuf *buf;
	ip_addr_t *client_addr;
	unsigned short local_port;
	unsigned short client_port;
	local_port = *((unsigned short*)arg);
 8000b38:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b3c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	void* data;
	uint8_t answer[256];
	u16_t len;
	uint16_t answer_len;
	conn = netconn_new(NETCONN_UDP);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2020      	movs	r0, #32
 8000b4e:	f008 ffd7 	bl	8009b00 <netconn_new_with_proto_and_callback>
 8000b52:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	if (conn!= NULL)
 8000b56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d05d      	beq.n	8000c1a <ethernet_thread+0xf2>
	{
	  err = netconn_bind(conn, IP_ADDR_ANY, local_port);
 8000b5e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8000b62:	461a      	mov	r2, r3
 8000b64:	492f      	ldr	r1, [pc, #188]	; (8000c24 <ethernet_thread+0xfc>)
 8000b66:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000b6a:	f009 f883 	bl	8009c74 <netconn_bind>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (err == ERR_OK)
 8000b74:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <ethernet_thread+0xea>
	  {
		  for(;;)
		  {
			  recv_err = netconn_recv(conn, &buf);
 8000b7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b80:	4619      	mov	r1, r3
 8000b82:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000b86:	f009 fa29 	bl	8009fdc <netconn_recv>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
			  if (recv_err == ERR_OK)
 8000b90:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f1      	bne.n	8000b7c <ethernet_thread+0x54>
			  {
				  client_addr = netbuf_fromaddr(buf);
 8000b98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b9c:	3308      	adds	r3, #8
 8000b9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				  client_port = netbuf_fromport(buf);
 8000ba2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000ba6:	899b      	ldrh	r3, [r3, #12]
 8000ba8:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

				  netbuf_data(buf, &data, &len);
 8000bac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bb0:	f107 020a 	add.w	r2, r7, #10
 8000bb4:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f00a fde5 	bl	800b788 <netbuf_data>
				  answer_len = ethernet_answer(data, len, answer);
 8000bbe:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000bc2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000bc6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	f107 020c 	add.w	r2, r7, #12
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f000 f859 	bl	8000c88 <ethernet_answer>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				  if(answer_len)
 8000bdc:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d010      	beq.n	8000c06 <ethernet_thread+0xde>
				  {
					  Send(conn, answer, answer_len, client_addr, client_port, buf);
 8000be4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000be8:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8000bec:	f107 010c 	add.w	r1, r7, #12
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000bfc:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000c00:	f000 f812 	bl	8000c28 <Send>
 8000c04:	e7ba      	b.n	8000b7c <ethernet_thread+0x54>
				  }
				  else netbuf_delete(buf);
 8000c06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f00a fd52 	bl	800b6b4 <netbuf_delete>
			  recv_err = netconn_recv(conn, &buf);
 8000c10:	e7b4      	b.n	8000b7c <ethernet_thread+0x54>

		  }
	  }
	  else
	  {
	    netconn_delete(conn);
 8000c12:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000c16:	f009 f811 	bl	8009c3c <netconn_delete>
	  }
	}
}
 8000c1a:	bf00      	nop
 8000c1c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	0801b60c 	.word	0x0801b60c

08000c28 <Send>:

static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	4613      	mov	r3, r2
 8000c36:	80fb      	strh	r3, [r7, #6]
	u32_t address = addr->addr;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	617b      	str	r3, [r7, #20]
	netbuf_delete(buf);
 8000c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c40:	f00a fd38 	bl	800b6b4 <netbuf_delete>
	buf = netbuf_new();
 8000c44:	f00a fd22 	bl	800b68c <netbuf_new>
 8000c48:	6278      	str	r0, [r7, #36]	; 0x24
	buf->port = port;
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	8c3a      	ldrh	r2, [r7, #32]
 8000c4e:	819a      	strh	r2, [r3, #12]
	addr->addr = address;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	601a      	str	r2, [r3, #0]
	err_t err;
	err  = netbuf_ref(buf, pointer, size);
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	68b9      	ldr	r1, [r7, #8]
 8000c5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c5e:	f00a fd49 	bl	800b6f4 <netbuf_ref>
 8000c62:	4603      	mov	r3, r0
 8000c64:	74fb      	strb	r3, [r7, #19]
	if(err==ERR_OK)
 8000c66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d108      	bne.n	8000c80 <Send+0x58>
	{
		netconn_sendto(conn, buf, addr, port);
 8000c6e:	8c3b      	ldrh	r3, [r7, #32]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f009 fa2b 	bl	800a0d0 <netconn_sendto>
		netbuf_delete(buf);
 8000c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c7c:	f00a fd1a 	bl	800b6b4 <netbuf_delete>
	}
}
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <ethernet_answer>:

//Возвращает кол-во байт для отправки клиенту
static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	460b      	mov	r3, r1
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	817b      	strh	r3, [r7, #10]
	int result = ModbusParse(data, data_length, answer, ETHERNET);
 8000c96:	8979      	ldrh	r1, [r7, #10]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f000 fbe1 	bl	8001464 <ModbusParse>
 8000ca2:	6178      	str	r0, [r7, #20]
	if(result)return result;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <ethernet_answer+0x26>
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	e000      	b.n	8000cb0 <ethernet_answer+0x28>
	return 0;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <vApplicationGetIdleTaskMemory+0x30>)
 8000cce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200000a0 	.word	0x200000a0
 8000ce8:	20000154 	.word	0x20000154

08000cec <task_init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task_init()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af02      	add	r7, sp, #8
	size_t fre = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
	fre=xPortGetFreeHeapSize();
 8000cf6:	f008 fe1d 	bl	8009934 <xPortGetFreeHeapSize>
 8000cfa:	6078      	str	r0, [r7, #4]
	sys_thread_new("eth_thread1", ethernet_thread, (void*)&port1, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d04:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <task_init+0x48>)
 8000d06:	490c      	ldr	r1, [pc, #48]	; (8000d38 <task_init+0x4c>)
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <task_init+0x50>)
 8000d0a:	f015 ffb5 	bl	8016c78 <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8000d0e:	f008 fe11 	bl	8009934 <xPortGetFreeHeapSize>
 8000d12:	6078      	str	r0, [r7, #4]
	sys_thread_new("eth_thread2", ethernet_thread, (void*)&port2, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000d14:	2300      	movs	r3, #0
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1c:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <task_init+0x54>)
 8000d1e:	4906      	ldr	r1, [pc, #24]	; (8000d38 <task_init+0x4c>)
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <task_init+0x58>)
 8000d22:	f015 ffa9 	bl	8016c78 <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8000d26:	f008 fe05 	bl	8009934 <xPortGetFreeHeapSize>
 8000d2a:	6078      	str	r0, [r7, #4]
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000000 	.word	0x20000000
 8000d38:	08000b29 	.word	0x08000b29
 8000d3c:	08017f18 	.word	0x08017f18
 8000d40:	20000002 	.word	0x20000002
 8000d44:	08017f24 	.word	0x08017f24

08000d48 <lcd_init>:


static void sendByte(uint8_t byte, int isData);

void lcd_init()
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDLED_GPIO_Port, LCDLED_Pin, SET);// Включаем подсветку
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d52:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <lcd_init+0x88>)
 8000d54:	f003 face 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDR_GPIO_Port, LCDR_Pin, RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	481c      	ldr	r0, [pc, #112]	; (8000dd0 <lcd_init+0x88>)
 8000d5e:	f003 fac9 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8000d62:	200f      	movs	r0, #15
 8000d64:	f001 fb02 	bl	800236c <HAL_Delay>

	sendByte(0x33, 0); // шлем в одном байте два 0011
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2033      	movs	r0, #51	; 0x33
 8000d6c:	f000 f832 	bl	8000dd4 <sendByte>
	HAL_Delay(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f001 fafb 	bl	800236c <HAL_Delay>

	sendByte(0x32, 0); // шлем в одном байте  00110010
 8000d76:	2100      	movs	r1, #0
 8000d78:	2032      	movs	r0, #50	; 0x32
 8000d7a:	f000 f82b 	bl	8000dd4 <sendByte>
	HAL_Delay(1);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f001 faf4 	bl	800236c <HAL_Delay>

	sendByte(DATA_BUS_4BIT_PAGE0, 0); // включаем режим 4 бит
 8000d84:	2100      	movs	r1, #0
 8000d86:	2028      	movs	r0, #40	; 0x28
 8000d88:	f000 f824 	bl	8000dd4 <sendByte>
	HAL_Delay(1);
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f001 faed 	bl	800236c <HAL_Delay>
	sendByte(DISPLAY_OFF, 0); // выключаем дисплей
 8000d92:	2100      	movs	r1, #0
 8000d94:	2008      	movs	r0, #8
 8000d96:	f000 f81d 	bl	8000dd4 <sendByte>
	HAL_Delay(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f001 fae6 	bl	800236c <HAL_Delay>
	sendByte(CLEAR_DISPLAY, 0); // очищаем дисплей
 8000da0:	2100      	movs	r1, #0
 8000da2:	2001      	movs	r0, #1
 8000da4:	f000 f816 	bl	8000dd4 <sendByte>
	HAL_Delay(2);
 8000da8:	2002      	movs	r0, #2
 8000daa:	f001 fadf 	bl	800236c <HAL_Delay>
	sendByte(ENTRY_MODE_SET, 0); //ставим режим смещение курсора экран не смещается
 8000dae:	2100      	movs	r1, #0
 8000db0:	2006      	movs	r0, #6
 8000db2:	f000 f80f 	bl	8000dd4 <sendByte>
	HAL_Delay(1);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f001 fad8 	bl	800236c <HAL_Delay>
	sendByte(DISPLAY_ON, 0);// включаем дисплей и убираем курсор
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	200c      	movs	r0, #12
 8000dc0:	f000 f808 	bl	8000dd4 <sendByte>
	HAL_Delay(1);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f001 fad1 	bl	800236c <HAL_Delay>



}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40020400 	.word	0x40020400

08000dd4 <sendByte>:

static void sendByte(uint8_t byte, int isData)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD_PIN_MASK, RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	216f      	movs	r1, #111	; 0x6f
 8000de4:	4841      	ldr	r0, [pc, #260]	; (8000eec <sendByte+0x118>)
 8000de6:	f003 fa85 	bl	80042f4 <HAL_GPIO_WritePin>

	if(isData == 1) HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, SET); // если данные ставмим A
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d105      	bne.n	8000dfc <sendByte+0x28>
 8000df0:	2201      	movs	r2, #1
 8000df2:	2140      	movs	r1, #64	; 0x40
 8000df4:	483d      	ldr	r0, [pc, #244]	; (8000eec <sendByte+0x118>)
 8000df6:	f003 fa7d 	bl	80042f4 <HAL_GPIO_WritePin>
 8000dfa:	e004      	b.n	8000e06 <sendByte+0x32>
	else HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, RESET);		   // иначе скидываем A
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2140      	movs	r1, #64	; 0x40
 8000e00:	483a      	ldr	r0, [pc, #232]	; (8000eec <sendByte+0x118>)
 8000e02:	f003 fa77 	bl	80042f4 <HAL_GPIO_WritePin>

	// ставим старшую тетраду на порт
	if(byte & 0x80) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	da04      	bge.n	8000e18 <sendByte+0x44>
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2108      	movs	r1, #8
 8000e12:	4836      	ldr	r0, [pc, #216]	; (8000eec <sendByte+0x118>)
 8000e14:	f003 fa6e 	bl	80042f4 <HAL_GPIO_WritePin>
	if(byte & 0x40) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d004      	beq.n	8000e2c <sendByte+0x58>
 8000e22:	2201      	movs	r2, #1
 8000e24:	2104      	movs	r1, #4
 8000e26:	4831      	ldr	r0, [pc, #196]	; (8000eec <sendByte+0x118>)
 8000e28:	f003 fa64 	bl	80042f4 <HAL_GPIO_WritePin>
	if(byte & 0x20) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 0320 	and.w	r3, r3, #32
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d004      	beq.n	8000e40 <sendByte+0x6c>
 8000e36:	2201      	movs	r2, #1
 8000e38:	2102      	movs	r1, #2
 8000e3a:	482c      	ldr	r0, [pc, #176]	; (8000eec <sendByte+0x118>)
 8000e3c:	f003 fa5a 	bl	80042f4 <HAL_GPIO_WritePin>
	if(byte & 0x10) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <sendByte+0x80>
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4827      	ldr	r0, [pc, #156]	; (8000eec <sendByte+0x118>)
 8000e50:	f003 fa50 	bl	80042f4 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2120      	movs	r1, #32
 8000e58:	4824      	ldr	r0, [pc, #144]	; (8000eec <sendByte+0x118>)
 8000e5a:	f003 fa4b 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f001 fa84 	bl	800236c <HAL_Delay>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 8000e64:	2200      	movs	r2, #0
 8000e66:	2120      	movs	r1, #32
 8000e68:	4820      	ldr	r0, [pc, #128]	; (8000eec <sendByte+0x118>)
 8000e6a:	f003 fa43 	bl	80042f4 <HAL_GPIO_WritePin>

	//обнуляем все пины дисплея кроме RS
	HAL_GPIO_WritePin(LCD0_GPIO_Port, (LCD_PIN_MASK & ~LCDA_Pin), RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	212f      	movs	r1, #47	; 0x2f
 8000e72:	481e      	ldr	r0, [pc, #120]	; (8000eec <sendByte+0x118>)
 8000e74:	f003 fa3e 	bl	80042f4 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2120      	movs	r1, #32
 8000e7c:	481b      	ldr	r0, [pc, #108]	; (8000eec <sendByte+0x118>)
 8000e7e:	f003 fa39 	bl	80042f4 <HAL_GPIO_WritePin>
	if(byte & 0x08) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d004      	beq.n	8000e96 <sendByte+0xc2>
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2108      	movs	r1, #8
 8000e90:	4816      	ldr	r0, [pc, #88]	; (8000eec <sendByte+0x118>)
 8000e92:	f003 fa2f 	bl	80042f4 <HAL_GPIO_WritePin>
	if(byte & 0x04) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d004      	beq.n	8000eaa <sendByte+0xd6>
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	4811      	ldr	r0, [pc, #68]	; (8000eec <sendByte+0x118>)
 8000ea6:	f003 fa25 	bl	80042f4 <HAL_GPIO_WritePin>
	if(byte & 0x02) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d004      	beq.n	8000ebe <sendByte+0xea>
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <sendByte+0x118>)
 8000eba:	f003 fa1b 	bl	80042f4 <HAL_GPIO_WritePin>
	if(byte & 0x01) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d004      	beq.n	8000ed2 <sendByte+0xfe>
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4807      	ldr	r0, [pc, #28]	; (8000eec <sendByte+0x118>)
 8000ece:	f003 fa11 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <sendByte+0x118>)
 8000ed8:	f003 fa0c 	bl	80042f4 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f001 fa45 	bl	800236c <HAL_Delay>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40020400 	.word	0x40020400

08000ef0 <sendStr>:


void sendStr( char *str, int row , int position )
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	char start_address;

	switch (row)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d817      	bhi.n	8000f34 <sendStr+0x44>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <sendStr+0x1c>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000f1d 	.word	0x08000f1d
 8000f10:	08000f23 	.word	0x08000f23
 8000f14:	08000f29 	.word	0x08000f29
 8000f18:	08000f2f 	.word	0x08000f2f
	{

		case 1:
			start_address = 0x0; // 1 строка
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	75fb      	strb	r3, [r7, #23]
			break;
 8000f20:	e008      	b.n	8000f34 <sendStr+0x44>

		case 2:
			start_address = 0x40; // 2 строка
 8000f22:	2340      	movs	r3, #64	; 0x40
 8000f24:	75fb      	strb	r3, [r7, #23]
			break;
 8000f26:	e005      	b.n	8000f34 <sendStr+0x44>

		case 3:
			start_address = 0x14; // 3 строка
 8000f28:	2314      	movs	r3, #20
 8000f2a:	75fb      	strb	r3, [r7, #23]
			break;
 8000f2c:	e002      	b.n	8000f34 <sendStr+0x44>

		case 4:
			start_address = 0x54; // 4 строка
 8000f2e:	2354      	movs	r3, #84	; 0x54
 8000f30:	75fb      	strb	r3, [r7, #23]
			break;
 8000f32:	bf00      	nop

	}

	start_address += position; // к началу строки прибавляем позицию в строке
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	75fb      	strb	r3, [r7, #23]

	sendByte((start_address |= SET_DDRAM_ADDRESS), 0); // ставим курсор на начало нужной строки  в DDRAM
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f44:	75fb      	strb	r3, [r7, #23]
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff42 	bl	8000dd4 <sendByte>

	HAL_Delay(4);
 8000f50:	2004      	movs	r0, #4
 8000f52:	f001 fa0b 	bl	800236c <HAL_Delay>
	while(*str != '\0'){
 8000f56:	e008      	b.n	8000f6a <sendStr+0x7a>

		sendByte(*str, 1);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff38 	bl	8000dd4 <sendByte>
		str++;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
	while(*str != '\0'){
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f2      	bne.n	8000f58 <sendStr+0x68>
	}
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ModbusInit();
 8000f82:	f000 fa47 	bl	8001414 <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f86:	f001 f9af 	bl	80022e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8a:	f000 f84d 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8e:	f000 f92b 	bl	80011e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f92:	f000 f8b3 	bl	80010fc <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000f96:	f000 f907 	bl	80011a8 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8000f9a:	f000 f8d9 	bl	8001150 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000f9e:	f7ff fed3 	bl	8000d48 <lcd_init>
  sendStr("HELLO, KONVELS",1,0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4819      	ldr	r0, [pc, #100]	; (800100c <main+0x90>)
 8000fa8:	f7ff ffa2 	bl	8000ef0 <sendStr>
  sendStr("powered by", 2,0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4817      	ldr	r0, [pc, #92]	; (8001010 <main+0x94>)
 8000fb2:	f7ff ff9d 	bl	8000ef0 <sendStr>
  sendStr("STM32F407VG",3,0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2103      	movs	r1, #3
 8000fba:	4816      	ldr	r0, [pc, #88]	; (8001014 <main+0x98>)
 8000fbc:	f7ff ff98 	bl	8000ef0 <sendStr>
  sendStr("zalupa", 4,0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4814      	ldr	r0, [pc, #80]	; (8001018 <main+0x9c>)
 8000fc6:	f7ff ff93 	bl	8000ef0 <sendStr>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 8000fd2:	f107 0320 	add.w	r3, r7, #32
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f005 feab 	bl	8006d34 <osSemaphoreCreate>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <main+0xa0>)
 8000fe2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <main+0xa4>)
 8000fe6:	1d3c      	adds	r4, r7, #4
 8000fe8:	461d      	mov	r5, r3
 8000fea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 fd9d 	bl	8006b3a <osThreadCreate>
 8001000:	4603      	mov	r3, r0
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <main+0xa8>)
 8001004:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001006:	f005 fd81 	bl	8006b0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800100a:	e7fe      	b.n	800100a <main+0x8e>
 800100c:	08017f3c 	.word	0x08017f3c
 8001010:	08017f4c 	.word	0x08017f4c
 8001014:	08017f58 	.word	0x08017f58
 8001018:	08017f64 	.word	0x08017f64
 800101c:	20000440 	.word	0x20000440
 8001020:	08017f6c 	.word	0x08017f6c
 8001024:	2000043c 	.word	0x2000043c

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2230      	movs	r2, #48	; 0x30
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f015 ffa2 	bl	8016f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <SystemClock_Config+0xcc>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <SystemClock_Config+0xcc>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	6413      	str	r3, [r2, #64]	; 0x40
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <SystemClock_Config+0xd0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <SystemClock_Config+0xd0>)
 8001072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <SystemClock_Config+0xd0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001084:	2301      	movs	r3, #1
 8001086:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108e:	2302      	movs	r3, #2
 8001090:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001092:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001098:	2319      	movs	r3, #25
 800109a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800109c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010a6:	2304      	movs	r3, #4
 80010a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 f93a 	bl	8004328 <HAL_RCC_OscConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010ba:	f000 f99d 	bl	80013f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010be:	230f      	movs	r3, #15
 80010c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c2:	2302      	movs	r3, #2
 80010c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	2105      	movs	r1, #5
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fb9b 	bl	8004818 <HAL_RCC_ClockConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010e8:	f000 f986 	bl	80013f8 <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3750      	adds	r7, #80	; 0x50
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40007000 	.word	0x40007000

080010fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <MX_USART1_UART_Init+0x50>)
 8001104:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001108:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800110c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001134:	f004 f830 	bl	8005198 <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800113e:	f000 f95b 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000354 	.word	0x20000354
 800114c:	40011000 	.word	0x40011000

08001150 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_USART6_UART_Init+0x50>)
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <MX_USART6_UART_Init+0x54>)
 8001158:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART6_UART_Init+0x50>)
 800115c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001160:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_USART6_UART_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <MX_USART6_UART_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART6_UART_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_USART6_UART_Init+0x50>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART6_UART_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_USART6_UART_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <MX_USART6_UART_Init+0x50>)
 8001188:	f004 f806 	bl	8005198 <HAL_UART_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001192:	f000 f931 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  StartReciveUart(&huart6);
 8001196:	4802      	ldr	r0, [pc, #8]	; (80011a0 <MX_USART6_UART_Init+0x50>)
 8001198:	f000 ff92 	bl	80020c0 <StartReciveUart>
  /* USER CODE END USART6_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000398 	.word	0x20000398
 80011a4:	40011400 	.word	0x40011400

080011a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <MX_DMA_Init+0x3c>)
 80011b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_DMA_Init+0x3c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2105      	movs	r1, #5
 80011ce:	203a      	movs	r0, #58	; 0x3a
 80011d0:	f001 f9a8 	bl	8002524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011d4:	203a      	movs	r0, #58	; 0x3a
 80011d6:	f001 f9c1 	bl	800255c <HAL_NVIC_EnableIRQ>

}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	4b68      	ldr	r3, [pc, #416]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a67      	ldr	r2, [pc, #412]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b65      	ldr	r3, [pc, #404]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	4b61      	ldr	r3, [pc, #388]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a60      	ldr	r2, [pc, #384]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b5e      	ldr	r3, [pc, #376]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b5a      	ldr	r3, [pc, #360]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a59      	ldr	r2, [pc, #356]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b57      	ldr	r3, [pc, #348]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a52      	ldr	r2, [pc, #328]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b50      	ldr	r3, [pc, #320]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	4b4c      	ldr	r3, [pc, #304]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a4b      	ldr	r2, [pc, #300]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b49      	ldr	r3, [pc, #292]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a44      	ldr	r2, [pc, #272]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <MX_GPIO_Init+0x1bc>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 80012a6:	2200      	movs	r2, #0
 80012a8:	f24c 417f 	movw	r1, #50303	; 0xc47f
 80012ac:	483e      	ldr	r0, [pc, #248]	; (80013a8 <MX_GPIO_Init+0x1c0>)
 80012ae:	f003 f821 	bl	80042f4 <HAL_GPIO_WritePin>
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 80012b2:	2200      	movs	r2, #0
 80012b4:	f64f 7180 	movw	r1, #65408	; 0xff80
 80012b8:	483c      	ldr	r0, [pc, #240]	; (80013ac <MX_GPIO_Init+0x1c4>)
 80012ba:	f003 f81b 	bl	80042f4 <HAL_GPIO_WritePin>
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DOUT_10_Pin|DOUT_11_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80012c4:	483a      	ldr	r0, [pc, #232]	; (80013b0 <MX_GPIO_Init+0x1c8>)
 80012c6:	f003 f815 	bl	80042f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d0:	4838      	ldr	r0, [pc, #224]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 80012d2:	f003 f80f 	bl	80042f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN_4_Pin DIN_5_Pin DIN_6_Pin DIN_7_Pin
                           DIN_8_Pin DIN_2_Pin DIN_3_Pin */
  GPIO_InitStruct.Pin = DIN_4_Pin|DIN_5_Pin|DIN_6_Pin|DIN_7_Pin
 80012d6:	237f      	movs	r3, #127	; 0x7f
 80012d8:	61fb      	str	r3, [r7, #28]
                          |DIN_8_Pin|DIN_2_Pin|DIN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4830      	ldr	r0, [pc, #192]	; (80013ac <MX_GPIO_Init+0x1c4>)
 80012ea:	f002 fe4f 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_9_Pin DIN_10_Pin DIN_11_Pin */
  GPIO_InitStruct.Pin = DIN_9_Pin|DIN_10_Pin|DIN_11_Pin;
 80012ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	482c      	ldr	r0, [pc, #176]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001304:	f002 fe42 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD0_Pin LCD1_Pin LCD2_Pin DOUT_9_Pin
                           LED_Pin LCDLED_Pin LCD3_Pin LCDR_Pin
                           LCDE_Pin LCDA_Pin */
  GPIO_InitStruct.Pin = LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8001308:	f24c 437f 	movw	r3, #50303	; 0xc47f
 800130c:	61fb      	str	r3, [r7, #28]
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	4821      	ldr	r0, [pc, #132]	; (80013a8 <MX_GPIO_Init+0x1c0>)
 8001322:	f002 fe33 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_0_Pin DOUT_1_Pin DOUT_2_Pin DOUT_3_Pin
                           DOUT_4_Pin DOUT_5_Pin DOUT_6_Pin DOUT_7_Pin
                           DOUT_8_Pin */
  GPIO_InitStruct.Pin = DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8001326:	f64f 7380 	movw	r3, #65408	; 0xff80
 800132a:	61fb      	str	r3, [r7, #28]
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	481b      	ldr	r0, [pc, #108]	; (80013ac <MX_GPIO_Init+0x1c4>)
 8001340:	f002 fe24 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_10_Pin DOUT_11_Pin */
  GPIO_InitStruct.Pin = DOUT_10_Pin|DOUT_11_Pin;
 8001344:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4814      	ldr	r0, [pc, #80]	; (80013b0 <MX_GPIO_Init+0x1c8>)
 800135e:	f002 fe15 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_TX_Pin */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 8001362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	480e      	ldr	r0, [pc, #56]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 800137c:	f002 fe06 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_0_Pin DIN_1_Pin */
  GPIO_InitStruct.Pin = DIN_0_Pin|DIN_1_Pin;
 8001380:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <MX_GPIO_Init+0x1c0>)
 8001396:	f002 fdf9 	bl	8003f8c <HAL_GPIO_Init>

}
 800139a:	bf00      	nop
 800139c:	3730      	adds	r7, #48	; 0x30
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40020800 	.word	0x40020800

080013b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80013c0:	f004 fe5e 	bl	8006080 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  task_init();
 80013c4:	f7ff fc92 	bl	8000cec <task_init>

  /* Infinite loop */
  for(;;)
  {
	main_process();
 80013c8:	f000 f81b 	bl	8001402 <main_process>
    osDelay(1);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f005 fc00 	bl	8006bd2 <osDelay>
	main_process();
 80013d2:	e7f9      	b.n	80013c8 <StartDefaultTask+0x10>

080013d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013e6:	f000 ffa1 	bl	800232c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40010000 	.word	0x40010000

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	e7fe      	b.n	8001400 <Error_Handler+0x8>

08001402 <main_process>:
 */
#include <string.h>
#include <dio.h>

void main_process()
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
	Read_Inputs();
 8001406:	f7ff f8cd 	bl	80005a4 <Read_Inputs>
	Write_Outputs();
 800140a:	f7ff fa17 	bl	800083c <Write_Outputs>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <ModbusInit+0x38>)
 800141a:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <ModbusInit+0x3c>)
 800141c:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <ModbusInit+0x40>)
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <ModbusInit+0x44>)
 8001422:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(settings)/2;
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <ModbusInit+0x48>)
 8001426:	223c      	movs	r2, #60	; 0x3c
 8001428:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <ModbusInit+0x4c>)
 800142c:	222c      	movs	r2, #44	; 0x2c
 800142e:	801a      	strh	r2, [r3, #0]
	if(settings.mb_addr==0)settings.mb_addr = 1;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <ModbusInit+0x3c>)
 8001432:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <ModbusInit+0x2e>
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <ModbusInit+0x3c>)
 800143c:	2201      	movs	r2, #1
 800143e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	20000444 	.word	0x20000444
 8001450:	20000450 	.word	0x20000450
 8001454:	20000448 	.word	0x20000448
 8001458:	200004c8 	.word	0x200004c8
 800145c:	2000044c 	.word	0x2000044c
 8001460:	2000044e 	.word	0x2000044e

08001464 <ModbusParse>:


//Ф-я парсинга входящего буфера, если это Modbus, то возвращает кол-во байт
int ModbusParse(uint8_t *request, uint16_t req_length, uint8_t *answer, ModbusSource source)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	461a      	mov	r2, r3
 8001470:	460b      	mov	r3, r1
 8001472:	817b      	strh	r3, [r7, #10]
 8001474:	4613      	mov	r3, r2
 8001476:	727b      	strb	r3, [r7, #9]
	settings.data[37]++;
 8001478:	4b26      	ldr	r3, [pc, #152]	; (8001514 <ModbusParse+0xb0>)
 800147a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800147e:	3301      	adds	r3, #1
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <ModbusParse+0xb0>)
 8001484:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	if(answer==NULL)return 0; // Проверка, выделилась ли память под ответ
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <ModbusParse+0x2e>
 800148e:	2300      	movs	r3, #0
 8001490:	e03c      	b.n	800150c <ModbusParse+0xa8>
	if(!CheckRequestLength(request,req_length,source))return 0; // Проверка корректности длины пакета
 8001492:	897b      	ldrh	r3, [r7, #10]
 8001494:	7a7a      	ldrb	r2, [r7, #9]
 8001496:	4619      	mov	r1, r3
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 f83d 	bl	8001518 <CheckRequestLength>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <ModbusParse+0x44>
 80014a4:	2300      	movs	r3, #0
 80014a6:	e031      	b.n	800150c <ModbusParse+0xa8>
	if(!CheckMbAddr(request, source))return 0; // Проверка корректности адреса
 80014a8:	7a7b      	ldrb	r3, [r7, #9]
 80014aa:	4619      	mov	r1, r3
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f857 	bl	8001560 <CheckMbAddr>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <ModbusParse+0x58>
 80014b8:	2300      	movs	r3, #0
 80014ba:	e027      	b.n	800150c <ModbusParse+0xa8>
	if(!IsCorrectMbCommand(request, source))// Проверка корректности функционального кода
 80014bc:	7a7b      	ldrb	r3, [r7, #9]
 80014be:	4619      	mov	r1, r3
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 f875 	bl	80015b0 <IsCorrectMbCommand>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <ModbusParse+0x78>
	{
		return SetInvalidCommand(request, answer, 1, source);
 80014cc:	7a7b      	ldrb	r3, [r7, #9]
 80014ce:	2201      	movs	r2, #1
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 f8a0 	bl	8001618 <SetInvalidCommand>
 80014d8:	4603      	mov	r3, r0
 80014da:	e017      	b.n	800150c <ModbusParse+0xa8>
	}
	if(!CheckCrc(request, req_length, source))
 80014dc:	897b      	ldrh	r3, [r7, #10]
 80014de:	7a7a      	ldrb	r2, [r7, #9]
 80014e0:	4619      	mov	r1, r3
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 f941 	bl	800176a <CheckCrc>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d107      	bne.n	80014fe <ModbusParse+0x9a>
	{
		return SetInvalidCommand(request, answer, 3, source);
 80014ee:	7a7b      	ldrb	r3, [r7, #9]
 80014f0:	2203      	movs	r2, #3
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 f88f 	bl	8001618 <SetInvalidCommand>
 80014fa:	4603      	mov	r3, r0
 80014fc:	e006      	b.n	800150c <ModbusParse+0xa8>
	}
	return GetModbusAnswer(request, answer, source);
 80014fe:	7a7b      	ldrb	r3, [r7, #9]
 8001500:	461a      	mov	r2, r3
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 f965 	bl	80017d4 <GetModbusAnswer>
 800150a:	4603      	mov	r3, r0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000450 	.word	0x20000450

08001518 <CheckRequestLength>:

//Проверка соответствия длины данных, передаваемых в буфере
static uint8_t CheckRequestLength(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	4613      	mov	r3, r2
 8001524:	71fb      	strb	r3, [r7, #7]
	if(source==RS485)return 1;
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <CheckRequestLength+0x18>
 800152c:	2301      	movs	r3, #1
 800152e:	e010      	b.n	8001552 <CheckRequestLength+0x3a>
    int len_from_packet = (*(request_pointer+4))*256 + *(request_pointer+5);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3304      	adds	r3, #4
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	3205      	adds	r2, #5
 800153c:	7812      	ldrb	r2, [r2, #0]
 800153e:	4413      	add	r3, r2
 8001540:	617b      	str	r3, [r7, #20]
    return len_from_packet+6 == request_length;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3306      	adds	r3, #6
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	429a      	cmp	r2, r3
 800154a:	bf0c      	ite	eq
 800154c:	2301      	moveq	r3, #1
 800154e:	2300      	movne	r3, #0
 8001550:	b2db      	uxtb	r3, r3
}
 8001552:	4618      	mov	r0, r3
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <CheckMbAddr>:

//Проверка соответсия адреса в сети Modbus сервера
static uint8_t CheckMbAddr(uint8_t *request,ModbusSource source)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d103      	bne.n	800157e <CheckMbAddr+0x1e>
	{
		addr =  *(request+6);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	799b      	ldrb	r3, [r3, #6]
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e005      	b.n	800158a <CheckMbAddr+0x2a>
	}
	else if(source==RS485)
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <CheckMbAddr+0x2a>
	{
		addr =  *(request);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	73fb      	strb	r3, [r7, #15]
	}
	return addr == settings.mb_addr;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <CheckMbAddr+0x4c>)
 8001590:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8001594:	429a      	cmp	r2, r3
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000450 	.word	0x20000450

080015b0 <IsCorrectMbCommand>:

//Проверка корректности функционального кода
static uint8_t IsCorrectMbCommand(uint8_t *request,ModbusSource source)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d103      	bne.n	80015ce <IsCorrectMbCommand+0x1e>
	{
		cmd = *(request+7);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	79db      	ldrb	r3, [r3, #7]
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e005      	b.n	80015da <IsCorrectMbCommand+0x2a>
	}
	else if(source==RS485)
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <IsCorrectMbCommand+0x2a>
	{
		cmd = *(request+1);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	785b      	ldrb	r3, [r3, #1]
 80015d8:	73fb      	strb	r3, [r7, #15]
	}
	/*
	 * Функция возвращает 1, если номер команды корректен, 0 - если некорректен
	 * cmd - номер команды
	 * */
	switch (cmd) {
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	2b10      	cmp	r3, #16
 80015de:	bf8c      	ite	hi
 80015e0:	2201      	movhi	r2, #1
 80015e2:	2200      	movls	r2, #0
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d10c      	bne.n	8001604 <IsCorrectMbCommand+0x54>
 80015ea:	2201      	movs	r2, #1
 80015ec:	409a      	lsls	r2, r3
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <IsCorrectMbCommand+0x64>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf14      	ite	ne
 80015f6:	2301      	movne	r3, #1
 80015f8:	2300      	moveq	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <IsCorrectMbCommand+0x54>
		case 3:
		case 4:
		case 6:
		//case 5:
        case 16:
            return 1;
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <IsCorrectMbCommand+0x56>
		default:
			return 0;
 8001604:	2300      	movs	r3, #0
	}
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	00010058 	.word	0x00010058

08001618 <SetInvalidCommand>:

//Формирует телеграмму ошиобного запроса
static int SetInvalidCommand(uint8_t *request, uint8_t *answer, uint8_t code, ModbusSource source)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	4611      	mov	r1, r2
 8001624:	461a      	mov	r2, r3
 8001626:	460b      	mov	r3, r1
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	4613      	mov	r3, r2
 800162c:	71bb      	strb	r3, [r7, #6]
	uint8_t func_code = source ? *(request+1) : *(request+1);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	785b      	ldrb	r3, [r3, #1]
 8001632:	75fb      	strb	r3, [r7, #23]
	func_code = set_bit(func_code, 7);
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	b29b      	uxth	r3, r3
 8001638:	2107      	movs	r1, #7
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff9a 	bl	8000574 <set_bit>
 8001640:	4603      	mov	r3, r0
 8001642:	75fb      	strb	r3, [r7, #23]
	if(source==RS485)
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d11d      	bne.n	8001686 <SetInvalidCommand+0x6e>
	{
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 800164a:	2300      	movs	r3, #0
 800164c:	82bb      	strh	r3, [r7, #20]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	781a      	ldrb	r2, [r3, #0]
		memcpy(answer,request,1);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	701a      	strb	r2, [r3, #0]
		*(answer+1) = func_code;//Функциональный код с измененным битом
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	3301      	adds	r3, #1
 800165a:	7dfa      	ldrb	r2, [r7, #23]
 800165c:	701a      	strb	r2, [r3, #0]
		*(answer+2) = code;//Функциональный код с измененным битом
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	3302      	adds	r3, #2
 8001662:	79fa      	ldrb	r2, [r7, #7]
 8001664:	701a      	strb	r2, [r3, #0]
		CRC16_CALC(answer,check_sum,3);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	2203      	movs	r2, #3
 800166c:	4619      	mov	r1, r3
 800166e:	68b8      	ldr	r0, [r7, #8]
 8001670:	f000 f832 	bl	80016d8 <CRC16_CALC>
		*(answer+3) = check_sum[0];
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	3303      	adds	r3, #3
 8001678:	7d3a      	ldrb	r2, [r7, #20]
 800167a:	701a      	strb	r2, [r3, #0]
		*(answer+4) = check_sum[1];
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	3304      	adds	r3, #4
 8001680:	7d7a      	ldrb	r2, [r7, #21]
 8001682:	701a      	strb	r2, [r3, #0]
 8001684:	e01c      	b.n	80016c0 <SetInvalidCommand+0xa8>
	}
	else if(source==ETHERNET)
 8001686:	79bb      	ldrb	r3, [r7, #6]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d119      	bne.n	80016c0 <SetInvalidCommand+0xa8>
	{
		memcpy(answer,request,8);
 800168c:	2208      	movs	r2, #8
 800168e:	68f9      	ldr	r1, [r7, #12]
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f015 fc67 	bl	8016f64 <memcpy>
		*(answer+4) = 0;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	3304      	adds	r3, #4
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
		*(answer+5) = 3;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	3305      	adds	r3, #5
 80016a2:	2203      	movs	r2, #3
 80016a4:	701a      	strb	r2, [r3, #0]
		*(answer+7) |= 128;
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3307      	adds	r3, #7
 80016aa:	781a      	ldrb	r2, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	3307      	adds	r3, #7
 80016b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	701a      	strb	r2, [r3, #0]
		*(answer+8) = code;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	3308      	adds	r3, #8
 80016bc:	79fa      	ldrb	r2, [r7, #7]
 80016be:	701a      	strb	r2, [r3, #0]
	}

	uint8_t len = source==RS485 ? 5 : 9;
 80016c0:	79bb      	ldrb	r3, [r7, #6]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <SetInvalidCommand+0xb2>
 80016c6:	2305      	movs	r3, #5
 80016c8:	e000      	b.n	80016cc <SetInvalidCommand+0xb4>
 80016ca:	2309      	movs	r3, #9
 80016cc:	75bb      	strb	r3, [r7, #22]
	return len;
 80016ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <CRC16_CALC>:

static void CRC16_CALC(uint8_t* arr, uint8_t* checkSum, uint8_t messageLength)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	4613      	mov	r3, r2
 80016e4:	71fb      	strb	r3, [r7, #7]
	/*Функция расчета контрольной суммы
		 * arr - указатель на массив байт, по которым нужно посчитать CRC
		 * checkSum - указатель на массив из 2 байт, куда нужно положить CRC
		 * messageLength - ко-во байт, по которым нужно считать CRC	 *
		 * */
		uint16_t reg = 0xFFFF;
 80016e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ea:	83fb      	strh	r3, [r7, #30]
		uint16_t polinom = 0xA001;
 80016ec:	f24a 0301 	movw	r3, #40961	; 0xa001
 80016f0:	827b      	strh	r3, [r7, #18]
		for(int i=0;i < messageLength;i++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	e023      	b.n	8001740 <CRC16_CALC+0x68>
		{
			reg^=*(arr+i);
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4413      	add	r3, r2
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b29a      	uxth	r2, r3
 8001702:	8bfb      	ldrh	r3, [r7, #30]
 8001704:	4053      	eors	r3, r2
 8001706:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e012      	b.n	8001734 <CRC16_CALC+0x5c>
			{
				if ((reg&1)==1) {
 800170e:	8bfb      	ldrh	r3, [r7, #30]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <CRC16_CALC+0x50>
					reg>>=1;
 8001718:	8bfb      	ldrh	r3, [r7, #30]
 800171a:	085b      	lsrs	r3, r3, #1
 800171c:	83fb      	strh	r3, [r7, #30]
					reg^=polinom;
 800171e:	8bfa      	ldrh	r2, [r7, #30]
 8001720:	8a7b      	ldrh	r3, [r7, #18]
 8001722:	4053      	eors	r3, r2
 8001724:	83fb      	strh	r3, [r7, #30]
 8001726:	e002      	b.n	800172e <CRC16_CALC+0x56>
				}
				else reg>>=1;
 8001728:	8bfb      	ldrh	r3, [r7, #30]
 800172a:	085b      	lsrs	r3, r3, #1
 800172c:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2b07      	cmp	r3, #7
 8001738:	dde9      	ble.n	800170e <CRC16_CALC+0x36>
		for(int i=0;i < messageLength;i++)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	3301      	adds	r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	429a      	cmp	r2, r3
 8001746:	dbd7      	blt.n	80016f8 <CRC16_CALC+0x20>
			}
		}
		*(checkSum+1)=(uint8_t)(reg>>8);
 8001748:	8bfb      	ldrh	r3, [r7, #30]
 800174a:	0a1b      	lsrs	r3, r3, #8
 800174c:	b29a      	uxth	r2, r3
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	3301      	adds	r3, #1
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]
		*checkSum = (uint8_t)(reg & 0x00FF);
 8001756:	8bfb      	ldrh	r3, [r7, #30]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	701a      	strb	r2, [r3, #0]
}
 800175e:	bf00      	nop
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <CheckCrc>:

//Проверка контрольной суммы запроса
static uint8_t CheckCrc(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	4613      	mov	r3, r2
 8001776:	71fb      	strb	r3, [r7, #7]
	if(source==ETHERNET)return 1;
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <CheckCrc+0x18>
 800177e:	2301      	movs	r3, #1
 8001780:	e024      	b.n	80017cc <CheckCrc+0x62>
	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8001782:	2300      	movs	r3, #0
 8001784:	82bb      	strh	r3, [r7, #20]
	if(request_length<4)return 0;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b03      	cmp	r3, #3
 800178a:	dc01      	bgt.n	8001790 <CheckCrc+0x26>
 800178c:	2300      	movs	r3, #0
 800178e:	e01d      	b.n	80017cc <CheckCrc+0x62>
	CRC16_CALC(request_pointer, check_sum, request_length-2);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	3b02      	subs	r3, #2
 8001796:	b2da      	uxtb	r2, r3
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f7ff ff9a 	bl	80016d8 <CRC16_CALC>
	return request_pointer[request_length-2]==check_sum[0] && request_pointer[request_length-1]==check_sum[1];
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	3b02      	subs	r3, #2
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	7d3b      	ldrb	r3, [r7, #20]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d109      	bne.n	80017c8 <CheckCrc+0x5e>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	7d7b      	ldrb	r3, [r7, #21]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d101      	bne.n	80017c8 <CheckCrc+0x5e>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <CheckCrc+0x60>
 80017c8:	2300      	movs	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <GetModbusAnswer>:

//Возвращает кол-во байт, котрые нужно передать обратно
static int GetModbusAnswer(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af02      	add	r7, sp, #8
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	4613      	mov	r3, r2
 80017e0:	71fb      	strb	r3, [r7, #7]
	uint8_t func_code = source==RS485 ? *(request+1) : *(request+7);
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <GetModbusAnswer+0x1a>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	e001      	b.n	80017f2 <GetModbusAnswer+0x1e>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	79db      	ldrb	r3, [r3, #7]
 80017f2:	75fb      	strb	r3, [r7, #23]

	switch (func_code) {
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	3b03      	subs	r3, #3
 80017f8:	2b0d      	cmp	r3, #13
 80017fa:	d849      	bhi.n	8001890 <GetModbusAnswer+0xbc>
 80017fc:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <GetModbusAnswer+0x30>)
 80017fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001802:	bf00      	nop
 8001804:	0800183d 	.word	0x0800183d
 8001808:	08001857 	.word	0x08001857
 800180c:	08001891 	.word	0x08001891
 8001810:	08001871 	.word	0x08001871
 8001814:	08001891 	.word	0x08001891
 8001818:	08001891 	.word	0x08001891
 800181c:	08001891 	.word	0x08001891
 8001820:	08001891 	.word	0x08001891
 8001824:	08001891 	.word	0x08001891
 8001828:	08001891 	.word	0x08001891
 800182c:	08001891 	.word	0x08001891
 8001830:	08001891 	.word	0x08001891
 8001834:	08001891 	.word	0x08001891
 8001838:	08001881 	.word	0x08001881
		case READ_HOLDING_REGS:
			return ReadRegisters(request, answer, holding_pointer, holding_size, source);
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <GetModbusAnswer+0xc8>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <GetModbusAnswer+0xcc>)
 8001842:	8819      	ldrh	r1, [r3, #0]
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	460b      	mov	r3, r1
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 f831 	bl	80018b4 <ReadRegisters>
 8001852:	4603      	mov	r3, r0
 8001854:	e01e      	b.n	8001894 <GetModbusAnswer+0xc0>
		case READ_INPUT_REGS:
			return ReadRegisters(request, answer, reading_pointer, reading_size, source);
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <GetModbusAnswer+0xd0>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <GetModbusAnswer+0xd4>)
 800185c:	8819      	ldrh	r1, [r3, #0]
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	460b      	mov	r3, r1
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f824 	bl	80018b4 <ReadRegisters>
 800186c:	4603      	mov	r3, r0
 800186e:	e011      	b.n	8001894 <GetModbusAnswer+0xc0>
		case WRITE_SINGLE_REG:
			return WriteToHoldings(request, answer, source, &WriteSingleRegister);
 8001870:	79fa      	ldrb	r2, [r7, #7]
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <GetModbusAnswer+0xd8>)
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f974 	bl	8001b64 <WriteToHoldings>
 800187c:	4603      	mov	r3, r0
 800187e:	e009      	b.n	8001894 <GetModbusAnswer+0xc0>
		case WRITE_MULTIPLY_REGS:
			return WriteToHoldings(request, answer, source, &WrieMultiplyRegisters);
 8001880:	79fa      	ldrb	r2, [r7, #7]
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <GetModbusAnswer+0xdc>)
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 f96c 	bl	8001b64 <WriteToHoldings>
 800188c:	4603      	mov	r3, r0
 800188e:	e001      	b.n	8001894 <GetModbusAnswer+0xc0>
		default:
			break;
 8001890:	bf00      	nop
	}
	return 0;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000444 	.word	0x20000444
 80018a0:	2000044c 	.word	0x2000044c
 80018a4:	20000448 	.word	0x20000448
 80018a8:	2000044e 	.word	0x2000044e
 80018ac:	08001a29 	.word	0x08001a29
 80018b0:	08001aad 	.word	0x08001aad

080018b4 <ReadRegisters>:

//Ф-я чтения регистров из памяти memory_pointer размером memory_size
static int ReadRegisters(uint8_t *request, uint8_t *answer, uint16_t *memory_pointer, uint16_t memory_size, ModbusSource source)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	807b      	strh	r3, [r7, #2]
	uint16_t  maxAddr = memory_size-1;
 80018c2:	887b      	ldrh	r3, [r7, #2]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 80018c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <ReadRegisters+0x20>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e000      	b.n	80018d6 <ReadRegisters+0x22>
 80018d4:	2308      	movs	r3, #8
 80018d6:	4619      	mov	r1, r3
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f84d 	bl	8001978 <GetWordFromBytes>
 80018de:	4603      	mov	r3, r0
 80018e0:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 80018e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <ReadRegisters+0x3a>
 80018ea:	2304      	movs	r3, #4
 80018ec:	e000      	b.n	80018f0 <ReadRegisters+0x3c>
 80018ee:	230a      	movs	r3, #10
 80018f0:	4619      	mov	r1, r3
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f840 	bl	8001978 <GetWordFromBytes>
 80018f8:	4603      	mov	r3, r0
 80018fa:	827b      	strh	r3, [r7, #18]
	if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 80018fc:	8aba      	ldrh	r2, [r7, #20]
 80018fe:	8a7b      	ldrh	r3, [r7, #18]
 8001900:	4413      	add	r3, r2
 8001902:	1e5a      	subs	r2, r3, #1
 8001904:	8afb      	ldrh	r3, [r7, #22]
 8001906:	429a      	cmp	r2, r3
 8001908:	dd08      	ble.n	800191c <ReadRegisters+0x68>
 800190a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800190e:	2202      	movs	r2, #2
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7ff fe80 	bl	8001618 <SetInvalidCommand>
 8001918:	4603      	mov	r3, r0
 800191a:	e029      	b.n	8001970 <ReadRegisters+0xbc>
	if(source==ETHERNET)
 800191c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d124      	bne.n	800196e <ReadRegisters+0xba>
	{
		memcpy(answer,request,8);
 8001924:	2208      	movs	r2, #8
 8001926:	68f9      	ldr	r1, [r7, #12]
 8001928:	68b8      	ldr	r0, [r7, #8]
 800192a:	f015 fb1b 	bl	8016f64 <memcpy>
		InsertWordToMemory(reg_count*2+3, answer+4);//Длина сообщения
 800192e:	8a7b      	ldrh	r3, [r7, #18]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	b29b      	uxth	r3, r3
 8001934:	3303      	adds	r3, #3
 8001936:	b29a      	uxth	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	3304      	adds	r3, #4
 800193c:	4619      	mov	r1, r3
 800193e:	4610      	mov	r0, r2
 8001940:	f000 f835 	bl	80019ae <InsertWordToMemory>
		*(answer+8) = reg_count*2;//количесво байт далее
 8001944:	8a7b      	ldrh	r3, [r7, #18]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	3308      	adds	r3, #8
 800194c:	0052      	lsls	r2, r2, #1
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+9,reg_count);
 8001952:	8abb      	ldrh	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	18d0      	adds	r0, r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	3309      	adds	r3, #9
 800195e:	8a7a      	ldrh	r2, [r7, #18]
 8001960:	4619      	mov	r1, r3
 8001962:	f000 f834 	bl	80019ce <InsertWordsToMemory>
		return 9+reg_count*2;
 8001966:	8a7b      	ldrh	r3, [r7, #18]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	3309      	adds	r3, #9
 800196c:	e000      	b.n	8001970 <ReadRegisters+0xbc>
	}
	else
	{

	}
	return 0;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <GetWordFromBytes>:

static uint16_t GetWordFromBytes(uint8_t *arr, uint8_t pos)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	70fb      	strb	r3, [r7, #3]
	/*Получает 16 битное число из 2x байт, и возвращает его
	 * arr -  указатель на массив байт, из которого нужно получить word
	 * pos - индекс первого байта в массиве
	 *
	 * */
	return (((uint16_t)(*(arr+pos)))<<8) + (uint16_t)(*(arr + pos+1));
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b29b      	uxth	r3, r3
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	b29a      	uxth	r2, r3
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	3301      	adds	r3, #1
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	440b      	add	r3, r1
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	4413      	add	r3, r2
 80019a0:	b29b      	uxth	r3, r3
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <InsertWordToMemory>:

static void InsertWordToMemory(uint16_t value, uint8_t* memory)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	6039      	str	r1, [r7, #0]
 80019b8:	80fb      	strh	r3, [r7, #6]
    InsertWordsToMemory(&value,memory,1);
 80019ba:	1dbb      	adds	r3, r7, #6
 80019bc:	2201      	movs	r2, #1
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 f804 	bl	80019ce <InsertWordsToMemory>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <InsertWordsToMemory>:

static void InsertWordsToMemory(uint16_t *source, uint8_t * destination, uint16_t count)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b087      	sub	sp, #28
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	4613      	mov	r3, r2
 80019da:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
    for(i=0;i<count*2;i+=2)
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	e014      	b.n	8001a10 <InsertWordsToMemory+0x42>
    {
        *(destination+i+1)=*((uint8_t*)source+i);
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	441a      	add	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	440b      	add	r3, r1
 80019f4:	7812      	ldrb	r2, [r2, #0]
 80019f6:	701a      	strb	r2, [r3, #0]
        *(destination+i)=*((uint8_t*)source+i+1);
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	441a      	add	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	440b      	add	r3, r1
 8001a06:	7812      	ldrb	r2, [r2, #0]
 8001a08:	701a      	strb	r2, [r3, #0]
    for(i=0;i<count*2;i+=2)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dbe5      	blt.n	80019e6 <InsertWordsToMemory+0x18>
    }
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <WriteSingleRegister>:


static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	4613      	mov	r3, r2
 8001a34:	71fb      	strb	r3, [r7, #7]
    uint16_t  maxAddr = holding_size-1;
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <WriteSingleRegister+0x7c>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	82fb      	strh	r3, [r7, #22]
    uint16_t addr = GetWordFromBytes(request,source==RS485?2:8);
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <WriteSingleRegister+0x20>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e000      	b.n	8001a4a <WriteSingleRegister+0x22>
 8001a48:	2308      	movs	r3, #8
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f7ff ff93 	bl	8001978 <GetWordFromBytes>
 8001a52:	4603      	mov	r3, r0
 8001a54:	82bb      	strh	r3, [r7, #20]
    if(addr>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8001a56:	8aba      	ldrh	r2, [r7, #20]
 8001a58:	8afb      	ldrh	r3, [r7, #22]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d907      	bls.n	8001a6e <WriteSingleRegister+0x46>
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2202      	movs	r2, #2
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f7ff fdd7 	bl	8001618 <SetInvalidCommand>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	e016      	b.n	8001a9c <WriteSingleRegister+0x74>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d112      	bne.n	8001a9a <WriteSingleRegister+0x72>
    {
    	InsertWordsToMemory((uint16_t*)(request+10), ((uint8_t*)holding_pointer)+addr*2,1);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f103 000a 	add.w	r0, r3, #10
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <WriteSingleRegister+0x80>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	8aba      	ldrh	r2, [r7, #20]
 8001a80:	0052      	lsls	r2, r2, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	2201      	movs	r2, #1
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff ffa1 	bl	80019ce <InsertWordsToMemory>
    	memcpy(answer, request,12);
 8001a8c:	220c      	movs	r2, #12
 8001a8e:	68f9      	ldr	r1, [r7, #12]
 8001a90:	68b8      	ldr	r0, [r7, #8]
 8001a92:	f015 fa67 	bl	8016f64 <memcpy>
    	return 12;
 8001a96:	230c      	movs	r3, #12
 8001a98:	e000      	b.n	8001a9c <WriteSingleRegister+0x74>
    }
    else
    {

    }
    return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000044c 	.word	0x2000044c
 8001aa8:	20000444 	.word	0x20000444

08001aac <WrieMultiplyRegisters>:

static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	71fb      	strb	r3, [r7, #7]
	uint16_t  maxAddr = holding_size-1;
 8001aba:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <WrieMultiplyRegisters+0xb0>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <WrieMultiplyRegisters+0x20>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e000      	b.n	8001ace <WrieMultiplyRegisters+0x22>
 8001acc:	2308      	movs	r3, #8
 8001ace:	4619      	mov	r1, r3
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f7ff ff51 	bl	8001978 <GetWordFromBytes>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <WrieMultiplyRegisters+0x38>
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	e000      	b.n	8001ae6 <WrieMultiplyRegisters+0x3a>
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff ff45 	bl	8001978 <GetWordFromBytes>
 8001aee:	4603      	mov	r3, r0
 8001af0:	827b      	strh	r3, [r7, #18]
    if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8001af2:	8aba      	ldrh	r2, [r7, #20]
 8001af4:	8a7b      	ldrh	r3, [r7, #18]
 8001af6:	4413      	add	r3, r2
 8001af8:	1e5a      	subs	r2, r3, #1
 8001afa:	8afb      	ldrh	r3, [r7, #22]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	dd07      	ble.n	8001b10 <WrieMultiplyRegisters+0x64>
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	2202      	movs	r2, #2
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff fd86 	bl	8001618 <SetInvalidCommand>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	e021      	b.n	8001b54 <WrieMultiplyRegisters+0xa8>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d11d      	bne.n	8001b52 <WrieMultiplyRegisters+0xa6>
    {
    	memcpy(answer, request,12);//сначала повторяющиеся с запросом данные
 8001b16:	220c      	movs	r2, #12
 8001b18:	68f9      	ldr	r1, [r7, #12]
 8001b1a:	68b8      	ldr	r0, [r7, #8]
 8001b1c:	f015 fa22 	bl	8016f64 <memcpy>
    	InsertWordToMemory(reg_count*2+4, answer+4);//Длина сообщения
 8001b20:	8a7b      	ldrh	r3, [r7, #18]
 8001b22:	3302      	adds	r3, #2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4610      	mov	r0, r2
 8001b32:	f7ff ff3c 	bl	80019ae <InsertWordToMemory>
    	InsertWordsToMemory((uint16_t*)(request+13), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f103 000d 	add.w	r0, r3, #13
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <WrieMultiplyRegisters+0xb4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	8aba      	ldrh	r2, [r7, #20]
 8001b42:	0052      	lsls	r2, r2, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	8a7a      	ldrh	r2, [r7, #18]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff ff40 	bl	80019ce <InsertWordsToMemory>
        return 12;
 8001b4e:	230c      	movs	r3, #12
 8001b50:	e000      	b.n	8001b54 <WrieMultiplyRegisters+0xa8>
    }
    else
    {

    }
    return 0;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000044c 	.word	0x2000044c
 8001b60:	20000444 	.word	0x20000444

08001b64 <WriteToHoldings>:

static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource))
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	4613      	mov	r3, r2
 8001b72:	71fb      	strb	r3, [r7, #7]
	int result = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
	if(writeMemorySemaphoreHandle!=NULL)
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <WriteToHoldings+0x50>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d014      	beq.n	8001baa <WriteToHoldings+0x46>
	{
		if(osSemaphoreWait(writeMemorySemaphoreHandle, 1000)==osOK)
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <WriteToHoldings+0x50>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f005 f905 	bl	8006d98 <osSemaphoreWait>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <WriteToHoldings+0x46>
		{
			result =  (*write)(request,answer,source);
 8001b94:	79fa      	ldrb	r2, [r7, #7]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	4798      	blx	r3
 8001b9e:	6178      	str	r0, [r7, #20]
			osSemaphoreRelease(writeMemorySemaphoreHandle);
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <WriteToHoldings+0x50>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f005 f945 	bl	8006e34 <osSemaphoreRelease>
		}
	}
	return result;
 8001baa:	697b      	ldr	r3, [r7, #20]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000440 	.word	0x20000440

08001bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_MspInit+0x54>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_MspInit+0x54>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_MspInit+0x54>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_MspInit+0x54>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_MspInit+0x54>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_MspInit+0x54>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	210f      	movs	r1, #15
 8001bfa:	f06f 0001 	mvn.w	r0, #1
 8001bfe:	f000 fc91 	bl	8002524 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800

08001c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08c      	sub	sp, #48	; 0x30
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a51      	ldr	r2, [pc, #324]	; (8001d74 <HAL_UART_MspInit+0x164>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d163      	bne.n	8001cfa <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <HAL_UART_MspInit+0x168>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a4f      	ldr	r2, [pc, #316]	; (8001d78 <HAL_UART_MspInit+0x168>)
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <HAL_UART_MspInit+0x168>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <HAL_UART_MspInit+0x168>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a48      	ldr	r2, [pc, #288]	; (8001d78 <HAL_UART_MspInit+0x168>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <HAL_UART_MspInit+0x168>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4619      	mov	r1, r3
 8001c86:	483d      	ldr	r0, [pc, #244]	; (8001d7c <HAL_UART_MspInit+0x16c>)
 8001c88:	f002 f980 	bl	8003f8c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001c8c:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <HAL_UART_MspInit+0x170>)
 8001c8e:	4a3d      	ldr	r2, [pc, #244]	; (8001d84 <HAL_UART_MspInit+0x174>)
 8001c90:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <HAL_UART_MspInit+0x170>)
 8001c94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c98:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c9a:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <HAL_UART_MspInit+0x170>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca0:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <HAL_UART_MspInit+0x170>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca6:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <HAL_UART_MspInit+0x170>)
 8001ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cae:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_UART_MspInit+0x170>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cb4:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <HAL_UART_MspInit+0x170>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_UART_MspInit+0x170>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <HAL_UART_MspInit+0x170>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <HAL_UART_MspInit+0x170>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ccc:	482c      	ldr	r0, [pc, #176]	; (8001d80 <HAL_UART_MspInit+0x170>)
 8001cce:	f000 fc53 	bl	8002578 <HAL_DMA_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001cd8:	f7ff fb8e 	bl	80013f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a28      	ldr	r2, [pc, #160]	; (8001d80 <HAL_UART_MspInit+0x170>)
 8001ce0:	639a      	str	r2, [r3, #56]	; 0x38
 8001ce2:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <HAL_UART_MspInit+0x170>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2105      	movs	r1, #5
 8001cec:	2025      	movs	r0, #37	; 0x25
 8001cee:	f000 fc19 	bl	8002524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cf2:	2025      	movs	r0, #37	; 0x25
 8001cf4:	f000 fc32 	bl	800255c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001cf8:	e038      	b.n	8001d6c <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART6)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a22      	ldr	r2, [pc, #136]	; (8001d88 <HAL_UART_MspInit+0x178>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d133      	bne.n	8001d6c <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <HAL_UART_MspInit+0x168>)
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	4a1a      	ldr	r2, [pc, #104]	; (8001d78 <HAL_UART_MspInit+0x168>)
 8001d0e:	f043 0320 	orr.w	r3, r3, #32
 8001d12:	6453      	str	r3, [r2, #68]	; 0x44
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_UART_MspInit+0x168>)
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_UART_MspInit+0x168>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <HAL_UART_MspInit+0x168>)
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_UART_MspInit+0x168>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d3c:	23c0      	movs	r3, #192	; 0xc0
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	4619      	mov	r1, r3
 8001d56:	480d      	ldr	r0, [pc, #52]	; (8001d8c <HAL_UART_MspInit+0x17c>)
 8001d58:	f002 f918 	bl	8003f8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2105      	movs	r1, #5
 8001d60:	2047      	movs	r0, #71	; 0x47
 8001d62:	f000 fbdf 	bl	8002524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d66:	2047      	movs	r0, #71	; 0x47
 8001d68:	f000 fbf8 	bl	800255c <HAL_NVIC_EnableIRQ>
}
 8001d6c:	bf00      	nop
 8001d6e:	3730      	adds	r7, #48	; 0x30
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40011000 	.word	0x40011000
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	200003dc 	.word	0x200003dc
 8001d84:	40026440 	.word	0x40026440
 8001d88:	40011400 	.word	0x40011400
 8001d8c:	40020800 	.word	0x40020800

08001d90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	; 0x30
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	2019      	movs	r0, #25
 8001da6:	f000 fbbd 	bl	8002524 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001daa:	2019      	movs	r0, #25
 8001dac:	f000 fbd6 	bl	800255c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_InitTick+0xa4>)
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_InitTick+0xa4>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_InitTick+0xa4>)
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dcc:	f107 0210 	add.w	r2, r7, #16
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 fefe 	bl	8004bd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ddc:	f002 fee8 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 8001de0:	4603      	mov	r3, r0
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <HAL_InitTick+0xa8>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0c9b      	lsrs	r3, r3, #18
 8001df0:	3b01      	subs	r3, #1
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_InitTick+0xac>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <HAL_InitTick+0xb0>)
 8001df8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_InitTick+0xac>)
 8001dfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e00:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e02:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_InitTick+0xac>)
 8001e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e06:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_InitTick+0xac>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_InitTick+0xac>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e14:	4809      	ldr	r0, [pc, #36]	; (8001e3c <HAL_InitTick+0xac>)
 8001e16:	f002 ff11 	bl	8004c3c <HAL_TIM_Base_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d104      	bne.n	8001e2a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e20:	4806      	ldr	r0, [pc, #24]	; (8001e3c <HAL_InitTick+0xac>)
 8001e22:	f002 ff65 	bl	8004cf0 <HAL_TIM_Base_Start_IT>
 8001e26:	4603      	mov	r3, r0
 8001e28:	e000      	b.n	8001e2c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3730      	adds	r7, #48	; 0x30
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	431bde83 	.word	0x431bde83
 8001e3c:	20000520 	.word	0x20000520
 8001e40:	40010000 	.word	0x40010000

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <NMI_Handler+0x4>

08001e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <MemManage_Handler+0x4>

08001e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e76:	f002 ffab 	bl	8004dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000520 	.word	0x20000520

08001e84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <USART1_IRQHandler+0x10>)
 8001e8a:	f003 fa03 	bl	8005294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000354 	.word	0x20000354

08001e98 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <DMA2_Stream2_IRQHandler+0x10>)
 8001e9e:	f000 fcab 	bl	80027f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200003dc 	.word	0x200003dc

08001eac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <ETH_IRQHandler+0x10>)
 8001eb2:	f001 fabd 	bl	8003430 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200036b8 	.word	0x200036b8

08001ec0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <USART6_IRQHandler+0x10>)
 8001ec6:	f003 f9e5 	bl	8005294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000398 	.word	0x20000398

08001ed4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
	return 1;
 8001ed8:	2301      	movs	r3, #1
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_kill>:

int _kill(int pid, int sig)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <_kill+0x20>)
 8001ef0:	2216      	movs	r2, #22
 8001ef2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	2000d470 	.word	0x2000d470

08001f08 <_exit>:

void _exit (int status)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ffe5 	bl	8001ee4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f1a:	e7fe      	b.n	8001f1a <_exit+0x12>

08001f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e00a      	b.n	8001f44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f2e:	f3af 8000 	nop.w
 8001f32:	4601      	mov	r1, r0
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	60ba      	str	r2, [r7, #8]
 8001f3a:	b2ca      	uxtb	r2, r1
 8001f3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	dbf0      	blt.n	8001f2e <_read+0x12>
	}

return len;
 8001f4c:	687b      	ldr	r3, [r7, #4]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e009      	b.n	8001f7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	60ba      	str	r2, [r7, #8]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	dbf1      	blt.n	8001f68 <_write+0x12>
	}
	return len;
 8001f84:	687b      	ldr	r3, [r7, #4]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <_close>:

int _close(int file)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
	return -1;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fb6:	605a      	str	r2, [r3, #4]
	return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_isatty>:

int _isatty(int file)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
	return 1;
 8001fce:	2301      	movs	r3, #1
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
	return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <_sbrk+0x5c>)
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <_sbrk+0x60>)
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <_sbrk+0x64>)
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <_sbrk+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d205      	bcs.n	8002034 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <_sbrk+0x6c>)
 800202a:	220c      	movs	r2, #12
 800202c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	e009      	b.n	8002048 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <_sbrk+0x64>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	4a06      	ldr	r2, [pc, #24]	; (800205c <_sbrk+0x64>)
 8002044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	4618      	mov	r0, r3
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	20020000 	.word	0x20020000
 8002058:	00000400 	.word	0x00000400
 800205c:	20000568 	.word	0x20000568
 8002060:	2000d478 	.word	0x2000d478
 8002064:	2000d470 	.word	0x2000d470

08002068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <SystemInit+0x20>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <SystemInit+0x20>)
 8002074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <HAL_UART_RxCpltCallback>:

static void RecognizePacket(int index, int bytes_count);


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	int index = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
	if (huart == &huart6) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_UART_RxCpltCallback+0x30>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d109      	bne.n	80020b4 <HAL_UART_RxCpltCallback+0x28>
		index = 1;
 80020a0:	2301      	movs	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
	}
	else return;
	RecognizePacket(index,1);
 80020a4:	2101      	movs	r1, #1
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f820 	bl	80020ec <RecognizePacket>
	StartReciveUart(huart);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f807 	bl	80020c0 <StartReciveUart>
 80020b2:	e000      	b.n	80020b6 <HAL_UART_RxCpltCallback+0x2a>
	else return;
 80020b4:	bf00      	nop
}
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000398 	.word	0x20000398

080020c0 <StartReciveUart>:

void StartReciveUart(UART_HandleTypeDef *huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <StartReciveUart+0x24>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d105      	bne.n	80020dc <StartReciveUart+0x1c>
		HAL_UART_Receive_IT(huart, uart_input_buffer[1], 1);
 80020d0:	2201      	movs	r2, #1
 80020d2:	4905      	ldr	r1, [pc, #20]	; (80020e8 <StartReciveUart+0x28>)
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f003 f8ac 	bl	8005232 <HAL_UART_Receive_IT>
	}
	return;
 80020da:	bf00      	nop
 80020dc:	bf00      	nop
}
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000398 	.word	0x20000398
 80020e8:	20000580 	.word	0x20000580

080020ec <RecognizePacket>:

static void RecognizePacket(int index, int bytes_count)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]

}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800213c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800210a:	490e      	ldr	r1, [pc, #56]	; (8002144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002110:	e002      	b.n	8002118 <LoopCopyDataInit>

08002112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002116:	3304      	adds	r3, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800211c:	d3f9      	bcc.n	8002112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211e:	4a0b      	ldr	r2, [pc, #44]	; (800214c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002120:	4c0b      	ldr	r4, [pc, #44]	; (8002150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002124:	e001      	b.n	800212a <LoopFillZerobss>

08002126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002128:	3204      	adds	r2, #4

0800212a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800212c:	d3fb      	bcc.n	8002126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800212e:	f7ff ff9b 	bl	8002068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002132:	f014 fedb 	bl	8016eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002136:	f7fe ff21 	bl	8000f7c <main>
  bx  lr    
 800213a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800213c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002148:	0801b780 	.word	0x0801b780
  ldr r2, =_sbss
 800214c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002150:	2000d474 	.word	0x2000d474

08002154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC_IRQHandler>

08002156 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d104      	bne.n	800216e <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002164:	b672      	cpsid	i
}
 8002166:	bf00      	nop
 8002168:	f7ff f946 	bl	80013f8 <Error_Handler>
 800216c:	e7fe      	b.n	800216c <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	e007      	b.n	8002184 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	2100      	movs	r1, #0
 800217a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3301      	adds	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d9f4      	bls.n	8002174 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	721a      	strb	r2, [r3, #8]
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d104      	bne.n	80021b0 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80021a6:	b672      	cpsid	i
}
 80021a8:	bf00      	nop
 80021aa:	f7ff f925 	bl	80013f8 <Error_Handler>
 80021ae:	e7fe      	b.n	80021ae <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7a1b      	ldrb	r3, [r3, #8]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d904      	bls.n	80021c2 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
 80021bc:	f7ff f91c 	bl	80013f8 <Error_Handler>
 80021c0:	e7fe      	b.n	80021c0 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7a1b      	ldrb	r3, [r3, #8]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	b2d1      	uxtb	r1, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	7211      	strb	r1, [r2, #8]
 80021ce:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80021d0:	f3ef 8211 	mrs	r2, BASEPRI
 80021d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	60fa      	str	r2, [r7, #12]
 80021e6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d104      	bne.n	8002210 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002206:	b672      	cpsid	i
}
 8002208:	bf00      	nop
 800220a:	f7ff f8f5 	bl	80013f8 <Error_Handler>
 800220e:	e7fe      	b.n	800220e <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7a1b      	ldrb	r3, [r3, #8]
 8002214:	3b01      	subs	r3, #1
 8002216:	b2da      	uxtb	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7a1b      	ldrb	r3, [r3, #8]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d904      	bls.n	800222e <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002224:	b672      	cpsid	i
}
 8002226:	bf00      	nop
 8002228:	f7ff f8e6 	bl	80013f8 <Error_Handler>
 800222c:	e7fe      	b.n	800222c <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7a1b      	ldrb	r3, [r3, #8]
 8002232:	461a      	mov	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002242:	bf00      	nop
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d103      	bne.n	8002262 <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <__retarget_lock_init_recursive+0x48>)
 800225c:	2216      	movs	r2, #22
 800225e:	601a      	str	r2, [r3, #0]
    return;
 8002260:	e015      	b.n	800228e <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002262:	200c      	movs	r0, #12
 8002264:	f014 fe66 	bl	8016f34 <malloc>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff6a 	bl	8002156 <stm32_lock_init>
    return;
 8002282:	e004      	b.n	800228e <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
}
 8002286:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002288:	f7ff f8b6 	bl	80013f8 <Error_Handler>
 800228c:	e7fe      	b.n	800228c <__retarget_lock_init_recursive+0x40>
}
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	2000d470 	.word	0x2000d470

08002298 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d104      	bne.n	80022b0 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80022a6:	b672      	cpsid	i
}
 80022a8:	bf00      	nop
 80022aa:	f7ff f8a5 	bl	80013f8 <Error_Handler>
 80022ae:	e7fe      	b.n	80022ae <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff70 	bl	8002198 <stm32_lock_acquire>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d104      	bne.n	80022d8 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80022ce:	b672      	cpsid	i
}
 80022d0:	bf00      	nop
 80022d2:	f7ff f891 	bl	80013f8 <Error_Handler>
 80022d6:	e7fe      	b.n	80022d6 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff8c 	bl	80021f8 <stm32_lock_release>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022ec:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <HAL_Init+0x40>)
 80022f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_Init+0x40>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_Init+0x40>)
 80022fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <HAL_Init+0x40>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a07      	ldr	r2, [pc, #28]	; (8002328 <HAL_Init+0x40>)
 800230a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002310:	2003      	movs	r0, #3
 8002312:	f000 f8fc 	bl	800250e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002316:	200f      	movs	r0, #15
 8002318:	f7ff fd3a 	bl	8001d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800231c:	f7ff fc4c 	bl	8001bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023c00 	.word	0x40023c00

0800232c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_IncTick+0x20>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_IncTick+0x24>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4413      	add	r3, r2
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <HAL_IncTick+0x24>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	2000000c 	.word	0x2000000c
 8002350:	200005b8 	.word	0x200005b8

08002354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return uwTick;
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_GetTick+0x14>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	200005b8 	.word	0x200005b8

0800236c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff ffee 	bl	8002354 <HAL_GetTick>
 8002378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d005      	beq.n	8002392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_Delay+0x44>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002392:	bf00      	nop
 8002394:	f7ff ffde 	bl	8002354 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d8f7      	bhi.n	8002394 <HAL_Delay+0x28>
  {
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000000c 	.word	0x2000000c

080023b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d0:	4013      	ands	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e6:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	60d3      	str	r3, [r2, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <__NVIC_GetPriorityGrouping+0x18>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 0307 	and.w	r3, r3, #7
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	2b00      	cmp	r3, #0
 8002428:	db0b      	blt.n	8002442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4907      	ldr	r1, [pc, #28]	; (8002450 <__NVIC_EnableIRQ+0x38>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2001      	movs	r0, #1
 800243a:	fa00 f202 	lsl.w	r2, r0, r2
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000e100 	.word	0xe000e100

08002454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	db0a      	blt.n	800247e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	490c      	ldr	r1, [pc, #48]	; (80024a0 <__NVIC_SetPriority+0x4c>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	0112      	lsls	r2, r2, #4
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	440b      	add	r3, r1
 8002478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800247c:	e00a      	b.n	8002494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4908      	ldr	r1, [pc, #32]	; (80024a4 <__NVIC_SetPriority+0x50>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3b04      	subs	r3, #4
 800248c:	0112      	lsls	r2, r2, #4
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	440b      	add	r3, r1
 8002492:	761a      	strb	r2, [r3, #24]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f1c3 0307 	rsb	r3, r3, #7
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	bf28      	it	cs
 80024c6:	2304      	movcs	r3, #4
 80024c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d902      	bls.n	80024d8 <NVIC_EncodePriority+0x30>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3b03      	subs	r3, #3
 80024d6:	e000      	b.n	80024da <NVIC_EncodePriority+0x32>
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	401a      	ands	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	43d9      	mvns	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	4313      	orrs	r3, r2
         );
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ff4c 	bl	80023b4 <__NVIC_SetPriorityGrouping>
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002536:	f7ff ff61 	bl	80023fc <__NVIC_GetPriorityGrouping>
 800253a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	6978      	ldr	r0, [r7, #20]
 8002542:	f7ff ffb1 	bl	80024a8 <NVIC_EncodePriority>
 8002546:	4602      	mov	r2, r0
 8002548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff80 	bl	8002454 <__NVIC_SetPriority>
}
 8002554:	bf00      	nop
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ff54 	bl	8002418 <__NVIC_EnableIRQ>
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff fee6 	bl	8002354 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e099      	b.n	80026c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b4:	e00f      	b.n	80025d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b6:	f7ff fecd 	bl	8002354 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d908      	bls.n	80025d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2203      	movs	r2, #3
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e078      	b.n	80026c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e8      	bne.n	80025b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4b38      	ldr	r3, [pc, #224]	; (80026d0 <HAL_DMA_Init+0x158>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002602:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	2b04      	cmp	r3, #4
 800262e:	d107      	bne.n	8002640 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	4313      	orrs	r3, r2
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f023 0307 	bic.w	r3, r3, #7
 8002656:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	2b04      	cmp	r3, #4
 8002668:	d117      	bne.n	800269a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00e      	beq.n	800269a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fa7b 	bl	8002b78 <DMA_CheckFifoParam>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2240      	movs	r2, #64	; 0x40
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002696:	2301      	movs	r3, #1
 8002698:	e016      	b.n	80026c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fa32 	bl	8002b0c <DMA_CalcBaseAndBitshift>
 80026a8:	4603      	mov	r3, r0
 80026aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	223f      	movs	r2, #63	; 0x3f
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	f010803f 	.word	0xf010803f

080026d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026e2:	f7ff fe37 	bl	8002354 <HAL_GetTick>
 80026e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d008      	beq.n	8002706 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e052      	b.n	80027ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0216 	bic.w	r2, r2, #22
 8002714:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002724:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d103      	bne.n	8002736 <HAL_DMA_Abort+0x62>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0208 	bic.w	r2, r2, #8
 8002744:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0201 	bic.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002756:	e013      	b.n	8002780 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002758:	f7ff fdfc 	bl	8002354 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b05      	cmp	r3, #5
 8002764:	d90c      	bls.n	8002780 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2203      	movs	r2, #3
 8002770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e015      	b.n	80027ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e4      	bne.n	8002758 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	223f      	movs	r2, #63	; 0x3f
 8002794:	409a      	lsls	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d004      	beq.n	80027d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2280      	movs	r2, #128	; 0x80
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00c      	b.n	80027ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2205      	movs	r2, #5
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002804:	4b8e      	ldr	r3, [pc, #568]	; (8002a40 <HAL_DMA_IRQHandler+0x248>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a8e      	ldr	r2, [pc, #568]	; (8002a44 <HAL_DMA_IRQHandler+0x24c>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	0a9b      	lsrs	r3, r3, #10
 8002810:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2208      	movs	r2, #8
 8002824:	409a      	lsls	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d01a      	beq.n	8002864 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0204 	bic.w	r2, r2, #4
 800284a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	2208      	movs	r2, #8
 8002852:	409a      	lsls	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f043 0201 	orr.w	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	2201      	movs	r2, #1
 800286a:	409a      	lsls	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d012      	beq.n	800289a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	2201      	movs	r2, #1
 8002888:	409a      	lsls	r2, r3
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002892:	f043 0202 	orr.w	r2, r3, #2
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	2204      	movs	r2, #4
 80028a0:	409a      	lsls	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d012      	beq.n	80028d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00b      	beq.n	80028d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	2204      	movs	r2, #4
 80028be:	409a      	lsls	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	f043 0204 	orr.w	r2, r3, #4
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	2210      	movs	r2, #16
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d043      	beq.n	8002968 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d03c      	beq.n	8002968 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f2:	2210      	movs	r2, #16
 80028f4:	409a      	lsls	r2, r3
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d018      	beq.n	800293a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d108      	bne.n	8002928 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d024      	beq.n	8002968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4798      	blx	r3
 8002926:	e01f      	b.n	8002968 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01b      	beq.n	8002968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
 8002938:	e016      	b.n	8002968 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d107      	bne.n	8002958 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0208 	bic.w	r2, r2, #8
 8002956:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	2220      	movs	r2, #32
 800296e:	409a      	lsls	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 808f 	beq.w	8002a98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8087 	beq.w	8002a98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	2220      	movs	r2, #32
 8002990:	409a      	lsls	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b05      	cmp	r3, #5
 80029a0:	d136      	bne.n	8002a10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0216 	bic.w	r2, r2, #22
 80029b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <HAL_DMA_IRQHandler+0x1da>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0208 	bic.w	r2, r2, #8
 80029e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	223f      	movs	r2, #63	; 0x3f
 80029e8:	409a      	lsls	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d07e      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
        }
        return;
 8002a0e:	e079      	b.n	8002b04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d01d      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10d      	bne.n	8002a48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d031      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
 8002a3c:	e02c      	b.n	8002a98 <HAL_DMA_IRQHandler+0x2a0>
 8002a3e:	bf00      	nop
 8002a40:	20000004 	.word	0x20000004
 8002a44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d023      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
 8002a58:	e01e      	b.n	8002a98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10f      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0210 	bic.w	r2, r2, #16
 8002a76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d032      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d022      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2205      	movs	r2, #5
 8002ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d307      	bcc.n	8002ae0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f2      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x2cc>
 8002ade:	e000      	b.n	8002ae2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ae0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
 8002b02:	e000      	b.n	8002b06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b04:	bf00      	nop
    }
  }
}
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	3b10      	subs	r3, #16
 8002b1c:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <DMA_CalcBaseAndBitshift+0x64>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b26:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <DMA_CalcBaseAndBitshift+0x68>)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d909      	bls.n	8002b4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	1d1a      	adds	r2, r3, #4
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b4c:	e007      	b.n	8002b5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b56:	f023 0303 	bic.w	r3, r3, #3
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	aaaaaaab 	.word	0xaaaaaaab
 8002b74:	0801b4f0 	.word	0x0801b4f0

08002b78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d11f      	bne.n	8002bd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d856      	bhi.n	8002c46 <DMA_CheckFifoParam+0xce>
 8002b98:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <DMA_CheckFifoParam+0x28>)
 8002b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9e:	bf00      	nop
 8002ba0:	08002bb1 	.word	0x08002bb1
 8002ba4:	08002bc3 	.word	0x08002bc3
 8002ba8:	08002bb1 	.word	0x08002bb1
 8002bac:	08002c47 	.word	0x08002c47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d046      	beq.n	8002c4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc0:	e043      	b.n	8002c4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bca:	d140      	bne.n	8002c4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd0:	e03d      	b.n	8002c4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bda:	d121      	bne.n	8002c20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d837      	bhi.n	8002c52 <DMA_CheckFifoParam+0xda>
 8002be2:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <DMA_CheckFifoParam+0x70>)
 8002be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be8:	08002bf9 	.word	0x08002bf9
 8002bec:	08002bff 	.word	0x08002bff
 8002bf0:	08002bf9 	.word	0x08002bf9
 8002bf4:	08002c11 	.word	0x08002c11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bfc:	e030      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d025      	beq.n	8002c56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0e:	e022      	b.n	8002c56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c18:	d11f      	bne.n	8002c5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c1e:	e01c      	b.n	8002c5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d903      	bls.n	8002c2e <DMA_CheckFifoParam+0xb6>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d003      	beq.n	8002c34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c2c:	e018      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
      break;
 8002c32:	e015      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00e      	beq.n	8002c5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      break;
 8002c44:	e00b      	b.n	8002c5e <DMA_CheckFifoParam+0xe6>
      break;
 8002c46:	bf00      	nop
 8002c48:	e00a      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e008      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e006      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      break;
 8002c52:	bf00      	nop
 8002c54:	e004      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      break;
 8002c56:	bf00      	nop
 8002c58:	e002      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c5a:	bf00      	nop
 8002c5c:	e000      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop

08002c70 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002c80:	4ba1      	ldr	r3, [pc, #644]	; (8002f08 <HAL_ETH_Init+0x298>)
 8002c82:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e182      	b.n	8002f9c <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f003 fb34 	bl	8006318 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	4b95      	ldr	r3, [pc, #596]	; (8002f0c <HAL_ETH_Init+0x29c>)
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	4a94      	ldr	r2, [pc, #592]	; (8002f0c <HAL_ETH_Init+0x29c>)
 8002cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cbe:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc0:	4b92      	ldr	r3, [pc, #584]	; (8002f0c <HAL_ETH_Init+0x29c>)
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002ccc:	4b90      	ldr	r3, [pc, #576]	; (8002f10 <HAL_ETH_Init+0x2a0>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4a8f      	ldr	r2, [pc, #572]	; (8002f10 <HAL_ETH_Init+0x2a0>)
 8002cd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cd6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002cd8:	4b8d      	ldr	r3, [pc, #564]	; (8002f10 <HAL_ETH_Init+0x2a0>)
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	498b      	ldr	r1, [pc, #556]	; (8002f10 <HAL_ETH_Init+0x2a0>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cfc:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002cfe:	f7ff fb29 	bl	8002354 <HAL_GetTick>
 8002d02:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002d04:	e011      	b.n	8002d2a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002d06:	f7ff fb25 	bl	8002354 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d14:	d909      	bls.n	8002d2a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e138      	b.n	8002f9c <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e4      	bne.n	8002d06 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f023 031c 	bic.w	r3, r3, #28
 8002d4a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d4c:	f001 ff10 	bl	8004b70 <HAL_RCC_GetHCLKFreq>
 8002d50:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	4a6f      	ldr	r2, [pc, #444]	; (8002f14 <HAL_ETH_Init+0x2a4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d908      	bls.n	8002d6c <HAL_ETH_Init+0xfc>
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4a6e      	ldr	r2, [pc, #440]	; (8002f18 <HAL_ETH_Init+0x2a8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d804      	bhi.n	8002d6c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	e027      	b.n	8002dbc <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	4a6a      	ldr	r2, [pc, #424]	; (8002f18 <HAL_ETH_Init+0x2a8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d908      	bls.n	8002d86 <HAL_ETH_Init+0x116>
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	4a64      	ldr	r2, [pc, #400]	; (8002f08 <HAL_ETH_Init+0x298>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d204      	bcs.n	8002d86 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f043 030c 	orr.w	r3, r3, #12
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	e01a      	b.n	8002dbc <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	4a5f      	ldr	r2, [pc, #380]	; (8002f08 <HAL_ETH_Init+0x298>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d303      	bcc.n	8002d96 <HAL_ETH_Init+0x126>
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	4a62      	ldr	r2, [pc, #392]	; (8002f1c <HAL_ETH_Init+0x2ac>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d911      	bls.n	8002dba <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	4a60      	ldr	r2, [pc, #384]	; (8002f1c <HAL_ETH_Init+0x2ac>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d908      	bls.n	8002db0 <HAL_ETH_Init+0x140>
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4a5f      	ldr	r2, [pc, #380]	; (8002f20 <HAL_ETH_Init+0x2b0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d804      	bhi.n	8002db0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	e005      	b.n	8002dbc <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f043 0310 	orr.w	r3, r3, #16
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	e000      	b.n	8002dbc <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002dba:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002dc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dc8:	2100      	movs	r1, #0
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fc10 	bl	80035f0 <HAL_ETH_WritePHYRegister>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002dda:	6939      	ldr	r1, [r7, #16]
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fdc5 	bl	800396c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0d6      	b.n	8002f9c <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002dee:	20ff      	movs	r0, #255	; 0xff
 8002df0:	f7ff fabc 	bl	800236c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80a4 	beq.w	8002f46 <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dfe:	f7ff faa9 	bl	8002354 <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fb87 	bl	8003520 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002e12:	f7ff fa9f 	bl	8002354 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d90f      	bls.n	8002e44 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002e28:	6939      	ldr	r1, [r7, #16]
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fd9e 	bl	800396c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e0ab      	b.n	8002f9c <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0da      	beq.n	8002e04 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002e4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e52:	2100      	movs	r1, #0
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fbcb 	bl	80035f0 <HAL_ETH_WritePHYRegister>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002e64:	6939      	ldr	r1, [r7, #16]
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fd80 	bl	800396c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002e74:	2301      	movs	r3, #1
 8002e76:	e091      	b.n	8002f9c <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e78:	f7ff fa6c 	bl	8002354 <HAL_GetTick>
 8002e7c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	461a      	mov	r2, r3
 8002e84:	2101      	movs	r1, #1
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fb4a 	bl	8003520 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002e8c:	f7ff fa62 	bl	8002354 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d90f      	bls.n	8002ebe <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002ea2:	6939      	ldr	r1, [r7, #16]
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fd61 	bl	800396c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e06e      	b.n	8002f9c <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0da      	beq.n	8002e7e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2110      	movs	r1, #16
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fb25 	bl	8003520 <HAL_ETH_ReadPHYRegister>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00b      	beq.n	8002ef4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002ee0:	6939      	ldr	r1, [r7, #16]
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fd42 	bl	800396c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e053      	b.n	8002f9c <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d012      	beq.n	8002f24 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	e010      	b.n	8002f2a <HAL_ETH_Init+0x2ba>
 8002f08:	03938700 	.word	0x03938700
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40013800 	.word	0x40013800
 8002f14:	01312cff 	.word	0x01312cff
 8002f18:	02160ebf 	.word	0x02160ebf
 8002f1c:	05f5e0ff 	.word	0x05f5e0ff
 8002f20:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	e026      	b.n	8002f8a <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	e021      	b.n	8002f8a <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	08db      	lsrs	r3, r3, #3
 8002f4c:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002f56:	4313      	orrs	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fb46 	bl	80035f0 <HAL_ETH_WritePHYRegister>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002f6e:	6939      	ldr	r1, [r7, #16]
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fcfb 	bl	800396c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e00c      	b.n	8002f9c <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002f82:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002f86:	f7ff f9f1 	bl	800236c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002f8a:	6939      	ldr	r1, [r7, #16]
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fced 	bl	800396c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3720      	adds	r7, #32
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_ETH_DMATxDescListInit+0x20>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e051      	b.n	8003068 <HAL_ETH_DMATxDescListInit+0xc4>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	e030      	b.n	8003042 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	015b      	lsls	r3, r3, #5
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ff0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002ff8:	fb02 f303 	mul.w	r3, r2, r3
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	461a      	mov	r2, r3
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	3b01      	subs	r3, #1
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	d208      	bcs.n	8003036 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3301      	adds	r3, #1
 8003028:	015b      	lsls	r3, r3, #5
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	4413      	add	r3, r2
 800302e:	461a      	mov	r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	60da      	str	r2, [r3, #12]
 8003034:	e002      	b.n	800303c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3301      	adds	r3, #1
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d3ca      	bcc.n	8002fe0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003054:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_ETH_DMARxDescListInit+0x20>
 8003090:	2302      	movs	r3, #2
 8003092:	e055      	b.n	8003140 <HAL_ETH_DMARxDescListInit+0xcc>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	e034      	b.n	800311a <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	015b      	lsls	r3, r3, #5
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	4413      	add	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80030c0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80030c8:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80030d0:	fb02 f303 	mul.w	r3, r2, r3
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d105      	bne.n	80030f2 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d208      	bcs.n	800310e <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	3301      	adds	r3, #1
 8003100:	015b      	lsls	r3, r3, #5
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	4413      	add	r3, r2
 8003106:	461a      	mov	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	60da      	str	r2, [r3, #12]
 800310c:	e002      	b.n	8003114 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	3301      	adds	r3, #1
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d3c6      	bcc.n	80030b0 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800312c:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_ETH_TransmitFrame+0x24>
 800316c:	2302      	movs	r3, #2
 800316e:	e0cc      	b.n	800330a <HAL_ETH_TransmitFrame+0x1be>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003196:	2301      	movs	r3, #1
 8003198:	e0b7      	b.n	800330a <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	da09      	bge.n	80031b8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2212      	movs	r2, #18
 80031a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0a8      	b.n	800330a <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80031be:	4293      	cmp	r3, r2
 80031c0:	d915      	bls.n	80031ee <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	4a54      	ldr	r2, [pc, #336]	; (8003318 <HAL_ETH_TransmitFrame+0x1cc>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	0a9b      	lsrs	r3, r3, #10
 80031cc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	4b51      	ldr	r3, [pc, #324]	; (8003318 <HAL_ETH_TransmitFrame+0x1cc>)
 80031d2:	fba3 1302 	umull	r1, r3, r3, r2
 80031d6:	0a9b      	lsrs	r3, r3, #10
 80031d8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	3301      	adds	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	e001      	b.n	80031f2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80031ee:	2301      	movs	r3, #1
 80031f0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d11c      	bne.n	8003232 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003206:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003212:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003222:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	461a      	mov	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003230:	e04b      	b.n	80032ca <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	e044      	b.n	80032c2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003246:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d107      	bne.n	800325e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800325c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003266:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	3b01      	subs	r3, #1
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	429a      	cmp	r2, r3
 8003270:	d116      	bne.n	80032a0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003280:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4a25      	ldr	r2, [pc, #148]	; (800331c <HAL_ETH_TransmitFrame+0x1d0>)
 8003286:	fb03 f202 	mul.w	r2, r3, r2
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	4413      	add	r3, r2
 800328e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003292:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800329e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80032ae:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	461a      	mov	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	3301      	adds	r3, #1
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d3b6      	bcc.n	8003238 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e4:	461a      	mov	r2, r3
 80032e6:	2304      	movs	r3, #4
 80032e8:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f2:	461a      	mov	r2, r3
 80032f4:	2300      	movs	r3, #0
 80032f6:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	ac02b00b 	.word	0xac02b00b
 800331c:	fffffa0c 	.word	0xfffffa0c

08003320 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8003336:	2302      	movs	r3, #2
 8003338:	e074      	b.n	8003424 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800334a:	e05a      	b.n	8003402 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3301      	adds	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003360:	d10d      	bne.n	800337e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	461a      	mov	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
 800337c:	e041      	b.n	8003402 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	461a      	mov	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	629a      	str	r2, [r3, #40]	; 0x28
 80033a2:	e02e      	b.n	8003402 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d103      	bne.n	80033c6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80033d2:	1f1a      	subs	r2, r3, #4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	461a      	mov	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e010      	b.n	8003424 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	db02      	blt.n	8003412 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d99c      	bls.n	800334c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	2b40      	cmp	r3, #64	; 0x40
 8003448:	d112      	bne.n	8003470 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f003 f812 	bl	8006474 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003458:	461a      	mov	r2, r3
 800345a:	2340      	movs	r3, #64	; 0x40
 800345c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800346e:	e01a      	b.n	80034a6 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d111      	bne.n	80034a6 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f838 	bl	80034f8 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003490:	461a      	mov	r2, r3
 8003492:	2301      	movs	r3, #1
 8003494:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ae:	461a      	mov	r2, r3
 80034b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034b4:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c8:	d112      	bne.n	80034f0 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f81e 	bl	800350c <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d8:	461a      	mov	r2, r3
 80034da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034de:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	460b      	mov	r3, r1
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b82      	cmp	r3, #130	; 0x82
 8003540:	d101      	bne.n	8003546 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
 8003544:	e050      	b.n	80035e8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2282      	movs	r2, #130	; 0x82
 800354a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 031c 	and.w	r3, r3, #28
 800355c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8a1b      	ldrh	r3, [r3, #16]
 8003562:	02db      	lsls	r3, r3, #11
 8003564:	b29b      	uxth	r3, r3
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800356c:	897b      	ldrh	r3, [r7, #10]
 800356e:	019b      	lsls	r3, r3, #6
 8003570:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f023 0302 	bic.w	r3, r3, #2
 8003580:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003592:	f7fe fedf 	bl	8002354 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003598:	e015      	b.n	80035c6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800359a:	f7fe fedb 	bl	8002354 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d309      	bcc.n	80035be <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e014      	b.n	80035e8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e4      	bne.n	800359a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	460b      	mov	r3, r1
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b42      	cmp	r3, #66	; 0x42
 8003610:	d101      	bne.n	8003616 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
 8003614:	e04e      	b.n	80036b4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2242      	movs	r2, #66	; 0x42
 800361a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 031c 	and.w	r3, r3, #28
 800362c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8a1b      	ldrh	r3, [r3, #16]
 8003632:	02db      	lsls	r3, r3, #11
 8003634:	b29b      	uxth	r3, r3
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800363c:	897b      	ldrh	r3, [r7, #10]
 800363e:	019b      	lsls	r3, r3, #6
 8003640:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f043 0302 	orr.w	r3, r3, #2
 8003650:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800366c:	f7fe fe72 	bl	8002354 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003672:	e015      	b.n	80036a0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003674:	f7fe fe6e 	bl	8002354 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003682:	d309      	bcc.n	8003698 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e00d      	b.n	80036b4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e4      	bne.n	8003674 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_ETH_Start+0x16>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e01f      	b.n	8003712 <HAL_ETH_Start+0x56>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fb40 	bl	8003d68 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fb77 	bl	8003ddc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fc06 	bl	8003f00 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fbab 	bl	8003e50 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fbd4 	bl	8003ea8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_ETH_Stop+0x16>
 800372c:	2302      	movs	r3, #2
 800372e:	e01f      	b.n	8003770 <HAL_ETH_Stop+0x56>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fb9b 	bl	8003e7c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fbc4 	bl	8003ed4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fb62 	bl	8003e16 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fbd4 	bl	8003f00 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fb22 	bl	8003da2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_ETH_ConfigMAC+0x1c>
 8003790:	2302      	movs	r3, #2
 8003792:	e0e4      	b.n	800395e <HAL_ETH_ConfigMAC+0x1e6>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80b1 	beq.w	800390e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4b6c      	ldr	r3, [pc, #432]	; (8003968 <HAL_ETH_ConfigMAC+0x1f0>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80037c4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80037ca:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80037d0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80037d6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80037dc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80037e2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80037e8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80037ee:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80037f4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80037fa:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003800:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003806:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800381e:	2001      	movs	r0, #1
 8003820:	f7fe fda4 	bl	800236c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003834:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800383a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003840:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003846:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800384c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003852:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800385e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003860:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800386a:	2001      	movs	r0, #1
 800386c:	f7fe fd7e 	bl	800236c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003880:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800388a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	f64f 7341 	movw	r3, #65345	; 0xff41
 800389a:	4013      	ands	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80038a8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80038ae:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80038b4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80038ba:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80038c0:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80038d8:	2001      	movs	r0, #1
 80038da:	f7fe fd47 	bl	800236c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80038fe:	2001      	movs	r0, #1
 8003900:	f7fe fd34 	bl	800236c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	61da      	str	r2, [r3, #28]
 800390c:	e01e      	b.n	800394c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800391c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800393e:	2001      	movs	r0, #1
 8003940:	f7fe fd14 	bl	800236c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	ff20810f 	.word	0xff20810f

0800396c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b0b0      	sub	sp, #192	; 0xc0
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003988:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003990:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003992:	2300      	movs	r3, #0
 8003994:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003996:	2300      	movs	r3, #0
 8003998:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800399a:	2300      	movs	r3, #0
 800399c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800399e:	2300      	movs	r3, #0
 80039a0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80039b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039b6:	663b      	str	r3, [r7, #96]	; 0x60
 80039b8:	e001      	b.n	80039be <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80039be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039c2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80039c4:	2300      	movs	r3, #0
 80039c6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80039c8:	2300      	movs	r3, #0
 80039ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80039d0:	2300      	movs	r3, #0
 80039d2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80039d4:	2300      	movs	r3, #0
 80039d6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80039d8:	2340      	movs	r3, #64	; 0x40
 80039da:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003a40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a44:	4baa      	ldr	r3, [pc, #680]	; (8003cf0 <ETH_MACDMAConfig+0x384>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003a50:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003a54:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003a58:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003a5e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003a62:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003a66:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003a6c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003a70:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003a72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003a74:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003a78:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003a7c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003a80:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003a82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a94:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	f7fe fc63 	bl	800236c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003aae:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003ab0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003ab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003ab4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003ab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003ab8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003aba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003abe:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003ac4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003ac6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003aca:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003ad0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003ad4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003adc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003ade:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003aea:	2001      	movs	r0, #1
 8003aec:	f7fe fc3e 	bl	800236c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003af8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b02:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003b0c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003b18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b1c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003b20:	4013      	ands	r3, r2
 8003b22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003b26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b2a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003b2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003b30:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003b32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003b36:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003b38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003b3c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003b42:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003b44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003b48:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003b4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b5c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b68:	2001      	movs	r0, #1
 8003b6a:	f7fe fbff 	bl	800236c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b76:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003b78:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003b7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b92:	2001      	movs	r0, #1
 8003b94:	f7fe fbea 	bl	800236c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ba0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003baa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003bb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bb4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bd4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003bd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003be0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003bea:	2300      	movs	r3, #0
 8003bec:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003bfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c00:	4b3c      	ldr	r3, [pc, #240]	; (8003cf4 <ETH_MACDMAConfig+0x388>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003c08:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003c0a:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003c0c:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003c0e:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003c10:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003c12:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003c14:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003c16:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003c18:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003c1a:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003c1c:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003c20:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003c24:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003c28:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003c2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c42:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c52:	2001      	movs	r0, #1
 8003c54:	f7fe fb8a 	bl	800236c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c60:	461a      	mov	r2, r3
 8003c62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c66:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003c6c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003c70:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003c74:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003c78:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003c7e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003c82:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c90:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	f7fe fb63 	bl	800236c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003cb4:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d10d      	bne.n	8003cda <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cd8:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f808 	bl	8003cf8 <ETH_MACAddressConfig>
}
 8003ce8:	bf00      	nop
 8003cea:	37c0      	adds	r7, #192	; 0xc0
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	ff20810f 	.word	0xff20810f
 8003cf4:	f8de3f23 	.word	0xf8de3f23

08003cf8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3305      	adds	r3, #5
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	3204      	adds	r2, #4
 8003d10:	7812      	ldrb	r2, [r2, #0]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <ETH_MACAddressConfig+0x68>)
 8003d1a:	4413      	add	r3, r2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3303      	adds	r3, #3
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	061a      	lsls	r2, r3, #24
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3301      	adds	r3, #1
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <ETH_MACAddressConfig+0x6c>)
 8003d4a:	4413      	add	r3, r2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	6013      	str	r3, [r2, #0]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40028040 	.word	0x40028040
 8003d64:	40028044 	.word	0x40028044

08003d68 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0208 	orr.w	r2, r2, #8
 8003d82:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	f000 f8dd 	bl	8003f4c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	601a      	str	r2, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0208 	bic.w	r2, r2, #8
 8003dbc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	f000 f8c0 	bl	8003f4c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	601a      	str	r2, [r3, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0204 	orr.w	r2, r2, #4
 8003df6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003e00:	2001      	movs	r0, #1
 8003e02:	f000 f8a3 	bl	8003f4c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	601a      	str	r2, [r3, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0204 	bic.w	r2, r2, #4
 8003e30:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003e3a:	2001      	movs	r0, #1
 8003e3c:	f000 f886 	bl	8003f4c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	601a      	str	r2, [r3, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e6e:	6193      	str	r3, [r2, #24]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e9a:	6193      	str	r3, [r2, #24]
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	f043 0302 	orr.w	r3, r3, #2
 8003ec2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ec6:	6193      	str	r3, [r2, #24]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	f023 0302 	bic.w	r3, r3, #2
 8003eee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ef2:	6193      	str	r3, [r2, #24]
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f22:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003f30:	2001      	movs	r0, #1
 8003f32:	f000 f80b 	bl	8003f4c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f40:	6193      	str	r3, [r2, #24]
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <ETH_Delay+0x38>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0b      	ldr	r2, [pc, #44]	; (8003f88 <ETH_Delay+0x3c>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	0a5b      	lsrs	r3, r3, #9
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003f68:	bf00      	nop
  } 
  while (Delay --);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1e5a      	subs	r2, r3, #1
 8003f6e:	60fa      	str	r2, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f9      	bne.n	8003f68 <ETH_Delay+0x1c>
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000004 	.word	0x20000004
 8003f88:	10624dd3 	.word	0x10624dd3

08003f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	; 0x24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	e16b      	b.n	8004280 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fa8:	2201      	movs	r2, #1
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	f040 815a 	bne.w	800427a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d005      	beq.n	8003fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d130      	bne.n	8004040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	2203      	movs	r2, #3
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4313      	orrs	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004014:	2201      	movs	r2, #1
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	f003 0201 	and.w	r2, r3, #1
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4313      	orrs	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	2b03      	cmp	r3, #3
 800404a:	d017      	beq.n	800407c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	2203      	movs	r2, #3
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4013      	ands	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d123      	bne.n	80040d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	08da      	lsrs	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3208      	adds	r2, #8
 8004090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	220f      	movs	r2, #15
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	08da      	lsrs	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3208      	adds	r2, #8
 80040ca:	69b9      	ldr	r1, [r7, #24]
 80040cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	2203      	movs	r2, #3
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0203 	and.w	r2, r3, #3
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80b4 	beq.w	800427a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	4b60      	ldr	r3, [pc, #384]	; (8004298 <HAL_GPIO_Init+0x30c>)
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	4a5f      	ldr	r2, [pc, #380]	; (8004298 <HAL_GPIO_Init+0x30c>)
 800411c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004120:	6453      	str	r3, [r2, #68]	; 0x44
 8004122:	4b5d      	ldr	r3, [pc, #372]	; (8004298 <HAL_GPIO_Init+0x30c>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800412e:	4a5b      	ldr	r2, [pc, #364]	; (800429c <HAL_GPIO_Init+0x310>)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	220f      	movs	r2, #15
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4013      	ands	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a52      	ldr	r2, [pc, #328]	; (80042a0 <HAL_GPIO_Init+0x314>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d02b      	beq.n	80041b2 <HAL_GPIO_Init+0x226>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a51      	ldr	r2, [pc, #324]	; (80042a4 <HAL_GPIO_Init+0x318>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d025      	beq.n	80041ae <HAL_GPIO_Init+0x222>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a50      	ldr	r2, [pc, #320]	; (80042a8 <HAL_GPIO_Init+0x31c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d01f      	beq.n	80041aa <HAL_GPIO_Init+0x21e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a4f      	ldr	r2, [pc, #316]	; (80042ac <HAL_GPIO_Init+0x320>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d019      	beq.n	80041a6 <HAL_GPIO_Init+0x21a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a4e      	ldr	r2, [pc, #312]	; (80042b0 <HAL_GPIO_Init+0x324>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <HAL_GPIO_Init+0x216>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a4d      	ldr	r2, [pc, #308]	; (80042b4 <HAL_GPIO_Init+0x328>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00d      	beq.n	800419e <HAL_GPIO_Init+0x212>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a4c      	ldr	r2, [pc, #304]	; (80042b8 <HAL_GPIO_Init+0x32c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d007      	beq.n	800419a <HAL_GPIO_Init+0x20e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a4b      	ldr	r2, [pc, #300]	; (80042bc <HAL_GPIO_Init+0x330>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d101      	bne.n	8004196 <HAL_GPIO_Init+0x20a>
 8004192:	2307      	movs	r3, #7
 8004194:	e00e      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 8004196:	2308      	movs	r3, #8
 8004198:	e00c      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 800419a:	2306      	movs	r3, #6
 800419c:	e00a      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 800419e:	2305      	movs	r3, #5
 80041a0:	e008      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 80041a2:	2304      	movs	r3, #4
 80041a4:	e006      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 80041a6:	2303      	movs	r3, #3
 80041a8:	e004      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e002      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 80041b2:	2300      	movs	r3, #0
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	f002 0203 	and.w	r2, r2, #3
 80041ba:	0092      	lsls	r2, r2, #2
 80041bc:	4093      	lsls	r3, r2
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041c4:	4935      	ldr	r1, [pc, #212]	; (800429c <HAL_GPIO_Init+0x310>)
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	089b      	lsrs	r3, r3, #2
 80041ca:	3302      	adds	r3, #2
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041d2:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <HAL_GPIO_Init+0x334>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	43db      	mvns	r3, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4013      	ands	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041f6:	4a32      	ldr	r2, [pc, #200]	; (80042c0 <HAL_GPIO_Init+0x334>)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041fc:	4b30      	ldr	r3, [pc, #192]	; (80042c0 <HAL_GPIO_Init+0x334>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	43db      	mvns	r3, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4013      	ands	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004220:	4a27      	ldr	r2, [pc, #156]	; (80042c0 <HAL_GPIO_Init+0x334>)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004226:	4b26      	ldr	r3, [pc, #152]	; (80042c0 <HAL_GPIO_Init+0x334>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	43db      	mvns	r3, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4013      	ands	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800424a:	4a1d      	ldr	r2, [pc, #116]	; (80042c0 <HAL_GPIO_Init+0x334>)
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004250:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <HAL_GPIO_Init+0x334>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004274:	4a12      	ldr	r2, [pc, #72]	; (80042c0 <HAL_GPIO_Init+0x334>)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3301      	adds	r3, #1
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b0f      	cmp	r3, #15
 8004284:	f67f ae90 	bls.w	8003fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	3724      	adds	r7, #36	; 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800
 800429c:	40013800 	.word	0x40013800
 80042a0:	40020000 	.word	0x40020000
 80042a4:	40020400 	.word	0x40020400
 80042a8:	40020800 	.word	0x40020800
 80042ac:	40020c00 	.word	0x40020c00
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40021400 	.word	0x40021400
 80042b8:	40021800 	.word	0x40021800
 80042bc:	40021c00 	.word	0x40021c00
 80042c0:	40013c00 	.word	0x40013c00

080042c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	887b      	ldrh	r3, [r7, #2]
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
 80042e0:	e001      	b.n	80042e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	807b      	strh	r3, [r7, #2]
 8004300:	4613      	mov	r3, r2
 8004302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004304:	787b      	ldrb	r3, [r7, #1]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800430a:	887a      	ldrh	r2, [r7, #2]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004310:	e003      	b.n	800431a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004312:	887b      	ldrh	r3, [r7, #2]
 8004314:	041a      	lsls	r2, r3, #16
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	619a      	str	r2, [r3, #24]
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e267      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d075      	beq.n	8004432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004346:	4b88      	ldr	r3, [pc, #544]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b04      	cmp	r3, #4
 8004350:	d00c      	beq.n	800436c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004352:	4b85      	ldr	r3, [pc, #532]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800435a:	2b08      	cmp	r3, #8
 800435c:	d112      	bne.n	8004384 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435e:	4b82      	ldr	r3, [pc, #520]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436a:	d10b      	bne.n	8004384 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436c:	4b7e      	ldr	r3, [pc, #504]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d05b      	beq.n	8004430 <HAL_RCC_OscConfig+0x108>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d157      	bne.n	8004430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e242      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800438c:	d106      	bne.n	800439c <HAL_RCC_OscConfig+0x74>
 800438e:	4b76      	ldr	r3, [pc, #472]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a75      	ldr	r2, [pc, #468]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 8004394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e01d      	b.n	80043d8 <HAL_RCC_OscConfig+0xb0>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x98>
 80043a6:	4b70      	ldr	r3, [pc, #448]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6f      	ldr	r2, [pc, #444]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 80043ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	4b6d      	ldr	r3, [pc, #436]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6c      	ldr	r2, [pc, #432]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e00b      	b.n	80043d8 <HAL_RCC_OscConfig+0xb0>
 80043c0:	4b69      	ldr	r3, [pc, #420]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a68      	ldr	r2, [pc, #416]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4b66      	ldr	r3, [pc, #408]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a65      	ldr	r2, [pc, #404]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 80043d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d013      	beq.n	8004408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fd ffb8 	bl	8002354 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fd ffb4 	bl	8002354 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e207      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	4b5b      	ldr	r3, [pc, #364]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0xc0>
 8004406:	e014      	b.n	8004432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fd ffa4 	bl	8002354 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004410:	f7fd ffa0 	bl	8002354 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	; 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e1f3      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	4b51      	ldr	r3, [pc, #324]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0xe8>
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d063      	beq.n	8004506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800443e:	4b4a      	ldr	r3, [pc, #296]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004452:	2b08      	cmp	r3, #8
 8004454:	d11c      	bne.n	8004490 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004456:	4b44      	ldr	r3, [pc, #272]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d116      	bne.n	8004490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004462:	4b41      	ldr	r3, [pc, #260]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_RCC_OscConfig+0x152>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d001      	beq.n	800447a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e1c7      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447a:	4b3b      	ldr	r3, [pc, #236]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4937      	ldr	r1, [pc, #220]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 800448a:	4313      	orrs	r3, r2
 800448c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448e:	e03a      	b.n	8004506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d020      	beq.n	80044da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004498:	4b34      	ldr	r3, [pc, #208]	; (800456c <HAL_RCC_OscConfig+0x244>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fd ff59 	bl	8002354 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a6:	f7fd ff55 	bl	8002354 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e1a8      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b8:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c4:	4b28      	ldr	r3, [pc, #160]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4925      	ldr	r1, [pc, #148]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	600b      	str	r3, [r1, #0]
 80044d8:	e015      	b.n	8004506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044da:	4b24      	ldr	r3, [pc, #144]	; (800456c <HAL_RCC_OscConfig+0x244>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fd ff38 	bl	8002354 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e8:	f7fd ff34 	bl	8002354 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e187      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fa:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d036      	beq.n	8004580 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d016      	beq.n	8004548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <HAL_RCC_OscConfig+0x248>)
 800451c:	2201      	movs	r2, #1
 800451e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004520:	f7fd ff18 	bl	8002354 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004528:	f7fd ff14 	bl	8002354 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e167      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453a:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_RCC_OscConfig+0x240>)
 800453c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0x200>
 8004546:	e01b      	b.n	8004580 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004548:	4b09      	ldr	r3, [pc, #36]	; (8004570 <HAL_RCC_OscConfig+0x248>)
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454e:	f7fd ff01 	bl	8002354 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004554:	e00e      	b.n	8004574 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004556:	f7fd fefd 	bl	8002354 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d907      	bls.n	8004574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e150      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
 8004568:	40023800 	.word	0x40023800
 800456c:	42470000 	.word	0x42470000
 8004570:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	4b88      	ldr	r3, [pc, #544]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 8004576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1ea      	bne.n	8004556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8097 	beq.w	80046bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004592:	4b81      	ldr	r3, [pc, #516]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	4b7d      	ldr	r3, [pc, #500]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	4a7c      	ldr	r2, [pc, #496]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ac:	6413      	str	r3, [r2, #64]	; 0x40
 80045ae:	4b7a      	ldr	r3, [pc, #488]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ba:	2301      	movs	r3, #1
 80045bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045be:	4b77      	ldr	r3, [pc, #476]	; (800479c <HAL_RCC_OscConfig+0x474>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d118      	bne.n	80045fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ca:	4b74      	ldr	r3, [pc, #464]	; (800479c <HAL_RCC_OscConfig+0x474>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a73      	ldr	r2, [pc, #460]	; (800479c <HAL_RCC_OscConfig+0x474>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d6:	f7fd febd 	bl	8002354 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045de:	f7fd feb9 	bl	8002354 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e10c      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	4b6a      	ldr	r3, [pc, #424]	; (800479c <HAL_RCC_OscConfig+0x474>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d106      	bne.n	8004612 <HAL_RCC_OscConfig+0x2ea>
 8004604:	4b64      	ldr	r3, [pc, #400]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	4a63      	ldr	r2, [pc, #396]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	6713      	str	r3, [r2, #112]	; 0x70
 8004610:	e01c      	b.n	800464c <HAL_RCC_OscConfig+0x324>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b05      	cmp	r3, #5
 8004618:	d10c      	bne.n	8004634 <HAL_RCC_OscConfig+0x30c>
 800461a:	4b5f      	ldr	r3, [pc, #380]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	4a5e      	ldr	r2, [pc, #376]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 8004620:	f043 0304 	orr.w	r3, r3, #4
 8004624:	6713      	str	r3, [r2, #112]	; 0x70
 8004626:	4b5c      	ldr	r3, [pc, #368]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4a5b      	ldr	r2, [pc, #364]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	6713      	str	r3, [r2, #112]	; 0x70
 8004632:	e00b      	b.n	800464c <HAL_RCC_OscConfig+0x324>
 8004634:	4b58      	ldr	r3, [pc, #352]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4a57      	ldr	r2, [pc, #348]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	6713      	str	r3, [r2, #112]	; 0x70
 8004640:	4b55      	ldr	r3, [pc, #340]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	4a54      	ldr	r2, [pc, #336]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 8004646:	f023 0304 	bic.w	r3, r3, #4
 800464a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d015      	beq.n	8004680 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004654:	f7fd fe7e 	bl	8002354 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465a:	e00a      	b.n	8004672 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7fd fe7a 	bl	8002354 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e0cb      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004672:	4b49      	ldr	r3, [pc, #292]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ee      	beq.n	800465c <HAL_RCC_OscConfig+0x334>
 800467e:	e014      	b.n	80046aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004680:	f7fd fe68 	bl	8002354 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004686:	e00a      	b.n	800469e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004688:	f7fd fe64 	bl	8002354 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	; 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e0b5      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469e:	4b3e      	ldr	r3, [pc, #248]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1ee      	bne.n	8004688 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d105      	bne.n	80046bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b0:	4b39      	ldr	r3, [pc, #228]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	4a38      	ldr	r2, [pc, #224]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 80046b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80a1 	beq.w	8004808 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046c6:	4b34      	ldr	r3, [pc, #208]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d05c      	beq.n	800478c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d141      	bne.n	800475e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046da:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <HAL_RCC_OscConfig+0x478>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fd fe38 	bl	8002354 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fd fe34 	bl	8002354 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e087      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	4b27      	ldr	r3, [pc, #156]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69da      	ldr	r2, [r3, #28]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	019b      	lsls	r3, r3, #6
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	3b01      	subs	r3, #1
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	061b      	lsls	r3, r3, #24
 800472a:	491b      	ldr	r1, [pc, #108]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004730:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_RCC_OscConfig+0x478>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004736:	f7fd fe0d 	bl	8002354 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473e:	f7fd fe09 	bl	8002354 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e05c      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004750:	4b11      	ldr	r3, [pc, #68]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x416>
 800475c:	e054      	b.n	8004808 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475e:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <HAL_RCC_OscConfig+0x478>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004764:	f7fd fdf6 	bl	8002354 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476c:	f7fd fdf2 	bl	8002354 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e045      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_RCC_OscConfig+0x470>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x444>
 800478a:	e03d      	b.n	8004808 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d107      	bne.n	80047a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e038      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
 8004798:	40023800 	.word	0x40023800
 800479c:	40007000 	.word	0x40007000
 80047a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <HAL_RCC_OscConfig+0x4ec>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d028      	beq.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d121      	bne.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d11a      	bne.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047d4:	4013      	ands	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047dc:	4293      	cmp	r3, r2
 80047de:	d111      	bne.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	3b01      	subs	r3, #1
 80047ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d107      	bne.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800

08004818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0cc      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800482c:	4b68      	ldr	r3, [pc, #416]	; (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d90c      	bls.n	8004854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483a:	4b65      	ldr	r3, [pc, #404]	; (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b63      	ldr	r3, [pc, #396]	; (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0b8      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d020      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800486c:	4b59      	ldr	r3, [pc, #356]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	4a58      	ldr	r2, [pc, #352]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004884:	4b53      	ldr	r3, [pc, #332]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4a52      	ldr	r2, [pc, #328]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800488e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004890:	4b50      	ldr	r3, [pc, #320]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	494d      	ldr	r1, [pc, #308]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d044      	beq.n	8004938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b6:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d119      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e07f      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d003      	beq.n	80048d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d107      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d6:	4b3f      	ldr	r3, [pc, #252]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e06f      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e6:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e067      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048f6:	4b37      	ldr	r3, [pc, #220]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f023 0203 	bic.w	r2, r3, #3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4934      	ldr	r1, [pc, #208]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	4313      	orrs	r3, r2
 8004906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004908:	f7fd fd24 	bl	8002354 <HAL_GetTick>
 800490c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	e00a      	b.n	8004926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004910:	f7fd fd20 	bl	8002354 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	; 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e04f      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004926:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 020c 	and.w	r2, r3, #12
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	429a      	cmp	r2, r3
 8004936:	d1eb      	bne.n	8004910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d20c      	bcs.n	8004960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004946:	4b22      	ldr	r3, [pc, #136]	; (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800494e:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d001      	beq.n	8004960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e032      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800496c:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4916      	ldr	r1, [pc, #88]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d009      	beq.n	800499e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800498a:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	490e      	ldr	r1, [pc, #56]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800499e:	f000 f821 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 80049a2:	4602      	mov	r2, r0
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	091b      	lsrs	r3, r3, #4
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	490a      	ldr	r1, [pc, #40]	; (80049d8 <HAL_RCC_ClockConfig+0x1c0>)
 80049b0:	5ccb      	ldrb	r3, [r1, r3]
 80049b2:	fa22 f303 	lsr.w	r3, r2, r3
 80049b6:	4a09      	ldr	r2, [pc, #36]	; (80049dc <HAL_RCC_ClockConfig+0x1c4>)
 80049b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ba:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fd f9e6 	bl	8001d90 <HAL_InitTick>

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023c00 	.word	0x40023c00
 80049d4:	40023800 	.word	0x40023800
 80049d8:	0801b4d8 	.word	0x0801b4d8
 80049dc:	20000004 	.word	0x20000004
 80049e0:	20000008 	.word	0x20000008

080049e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e8:	b090      	sub	sp, #64	; 0x40
 80049ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	637b      	str	r3, [r7, #52]	; 0x34
 80049f0:	2300      	movs	r3, #0
 80049f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f4:	2300      	movs	r3, #0
 80049f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049fc:	4b59      	ldr	r3, [pc, #356]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x180>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d00d      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0x40>
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	f200 80a1 	bhi.w	8004b50 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x34>
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d003      	beq.n	8004a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a16:	e09b      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a18:	4b53      	ldr	r3, [pc, #332]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a1c:	e09b      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a1e:	4b53      	ldr	r3, [pc, #332]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a22:	e098      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a24:	4b4f      	ldr	r3, [pc, #316]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a2e:	4b4d      	ldr	r3, [pc, #308]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d028      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3a:	4b4a      	ldr	r3, [pc, #296]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	099b      	lsrs	r3, r3, #6
 8004a40:	2200      	movs	r2, #0
 8004a42:	623b      	str	r3, [r7, #32]
 8004a44:	627a      	str	r2, [r7, #36]	; 0x24
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4b47      	ldr	r3, [pc, #284]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a50:	fb03 f201 	mul.w	r2, r3, r1
 8004a54:	2300      	movs	r3, #0
 8004a56:	fb00 f303 	mul.w	r3, r0, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	4a43      	ldr	r2, [pc, #268]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a5e:	fba0 1202 	umull	r1, r2, r0, r2
 8004a62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a64:	460a      	mov	r2, r1
 8004a66:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a6a:	4413      	add	r3, r2
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a70:	2200      	movs	r2, #0
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	61fa      	str	r2, [r7, #28]
 8004a76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a7e:	f7fb fbf7 	bl	8000270 <__aeabi_uldivmod>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4613      	mov	r3, r2
 8004a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a8a:	e053      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8c:	4b35      	ldr	r3, [pc, #212]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	099b      	lsrs	r3, r3, #6
 8004a92:	2200      	movs	r2, #0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	617a      	str	r2, [r7, #20]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a9e:	f04f 0b00 	mov.w	fp, #0
 8004aa2:	4652      	mov	r2, sl
 8004aa4:	465b      	mov	r3, fp
 8004aa6:	f04f 0000 	mov.w	r0, #0
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	0159      	lsls	r1, r3, #5
 8004ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab4:	0150      	lsls	r0, r2, #5
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	ebb2 080a 	subs.w	r8, r2, sl
 8004abe:	eb63 090b 	sbc.w	r9, r3, fp
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ace:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ad2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ad6:	ebb2 0408 	subs.w	r4, r2, r8
 8004ada:	eb63 0509 	sbc.w	r5, r3, r9
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	00eb      	lsls	r3, r5, #3
 8004ae8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aec:	00e2      	lsls	r2, r4, #3
 8004aee:	4614      	mov	r4, r2
 8004af0:	461d      	mov	r5, r3
 8004af2:	eb14 030a 	adds.w	r3, r4, sl
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	eb45 030b 	adc.w	r3, r5, fp
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	028b      	lsls	r3, r1, #10
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b14:	4621      	mov	r1, r4
 8004b16:	028a      	lsls	r2, r1, #10
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1e:	2200      	movs	r2, #0
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	60fa      	str	r2, [r7, #12]
 8004b24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b28:	f7fb fba2 	bl	8000270 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4613      	mov	r3, r2
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b4e:	e002      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b50:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3740      	adds	r7, #64	; 0x40
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800
 8004b68:	00f42400 	.word	0x00f42400
 8004b6c:	017d7840 	.word	0x017d7840

08004b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000004 	.word	0x20000004

08004b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b8c:	f7ff fff0 	bl	8004b70 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0a9b      	lsrs	r3, r3, #10
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4903      	ldr	r1, [pc, #12]	; (8004bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	0801b4e8 	.word	0x0801b4e8

08004bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bb4:	f7ff ffdc 	bl	8004b70 <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	0b5b      	lsrs	r3, r3, #13
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4903      	ldr	r1, [pc, #12]	; (8004bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	0801b4e8 	.word	0x0801b4e8

08004bd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	220f      	movs	r2, #15
 8004be6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004be8:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <HAL_RCC_GetClockConfig+0x5c>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0203 	and.w	r2, r3, #3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bf4:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <HAL_RCC_GetClockConfig+0x5c>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <HAL_RCC_GetClockConfig+0x5c>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c0c:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <HAL_RCC_GetClockConfig+0x5c>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	08db      	lsrs	r3, r3, #3
 8004c12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c1a:	4b07      	ldr	r3, [pc, #28]	; (8004c38 <HAL_RCC_GetClockConfig+0x60>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0207 	and.w	r2, r3, #7
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40023800 	.word	0x40023800
 8004c38:	40023c00 	.word	0x40023c00

08004c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e041      	b.n	8004cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f839 	bl	8004cda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f000 f9d8 	bl	8005030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d001      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e04e      	b.n	8004da6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a23      	ldr	r2, [pc, #140]	; (8004db4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d022      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d32:	d01d      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1f      	ldr	r2, [pc, #124]	; (8004db8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d018      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1e      	ldr	r2, [pc, #120]	; (8004dbc <HAL_TIM_Base_Start_IT+0xcc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d013      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00e      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d111      	bne.n	8004d94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b06      	cmp	r3, #6
 8004d80:	d010      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0201 	orr.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d92:	e007      	b.n	8004da4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40010000 	.word	0x40010000
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40000800 	.word	0x40000800
 8004dc0:	40000c00 	.word	0x40000c00
 8004dc4:	40010400 	.word	0x40010400
 8004dc8:	40014000 	.word	0x40014000
 8004dcc:	40001800 	.word	0x40001800

08004dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d122      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d11b      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0202 	mvn.w	r2, #2
 8004dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f8ee 	bl	8004ff4 <HAL_TIM_IC_CaptureCallback>
 8004e18:	e005      	b.n	8004e26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f8e0 	bl	8004fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f8f1 	bl	8005008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d122      	bne.n	8004e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d11b      	bne.n	8004e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0204 	mvn.w	r2, #4
 8004e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f8c4 	bl	8004ff4 <HAL_TIM_IC_CaptureCallback>
 8004e6c:	e005      	b.n	8004e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f8b6 	bl	8004fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f8c7 	bl	8005008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d122      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d11b      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0208 	mvn.w	r2, #8
 8004ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f89a 	bl	8004ff4 <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f88c 	bl	8004fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f89d 	bl	8005008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b10      	cmp	r3, #16
 8004ee0:	d122      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d11b      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0210 	mvn.w	r2, #16
 8004ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2208      	movs	r2, #8
 8004efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f870 	bl	8004ff4 <HAL_TIM_IC_CaptureCallback>
 8004f14:	e005      	b.n	8004f22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f862 	bl	8004fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f873 	bl	8005008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d10e      	bne.n	8004f54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d107      	bne.n	8004f54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0201 	mvn.w	r2, #1
 8004f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fc fa40 	bl	80013d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5e:	2b80      	cmp	r3, #128	; 0x80
 8004f60:	d10e      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6c:	2b80      	cmp	r3, #128	; 0x80
 8004f6e:	d107      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f902 	bl	8005184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d10e      	bne.n	8004fac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d107      	bne.n	8004fac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f838 	bl	800501c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d10e      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0320 	and.w	r3, r3, #32
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d107      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0220 	mvn.w	r2, #32
 8004fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f8cc 	bl	8005170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fd8:	bf00      	nop
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a40      	ldr	r2, [pc, #256]	; (8005144 <TIM_Base_SetConfig+0x114>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d013      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504e:	d00f      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a3d      	ldr	r2, [pc, #244]	; (8005148 <TIM_Base_SetConfig+0x118>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00b      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a3c      	ldr	r2, [pc, #240]	; (800514c <TIM_Base_SetConfig+0x11c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3b      	ldr	r2, [pc, #236]	; (8005150 <TIM_Base_SetConfig+0x120>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_Base_SetConfig+0x40>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a3a      	ldr	r2, [pc, #232]	; (8005154 <TIM_Base_SetConfig+0x124>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d108      	bne.n	8005082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a2f      	ldr	r2, [pc, #188]	; (8005144 <TIM_Base_SetConfig+0x114>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d02b      	beq.n	80050e2 <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005090:	d027      	beq.n	80050e2 <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2c      	ldr	r2, [pc, #176]	; (8005148 <TIM_Base_SetConfig+0x118>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d023      	beq.n	80050e2 <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a2b      	ldr	r2, [pc, #172]	; (800514c <TIM_Base_SetConfig+0x11c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01f      	beq.n	80050e2 <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a2a      	ldr	r2, [pc, #168]	; (8005150 <TIM_Base_SetConfig+0x120>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d01b      	beq.n	80050e2 <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a29      	ldr	r2, [pc, #164]	; (8005154 <TIM_Base_SetConfig+0x124>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d017      	beq.n	80050e2 <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a28      	ldr	r2, [pc, #160]	; (8005158 <TIM_Base_SetConfig+0x128>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d013      	beq.n	80050e2 <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a27      	ldr	r2, [pc, #156]	; (800515c <TIM_Base_SetConfig+0x12c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00f      	beq.n	80050e2 <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a26      	ldr	r2, [pc, #152]	; (8005160 <TIM_Base_SetConfig+0x130>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00b      	beq.n	80050e2 <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a25      	ldr	r2, [pc, #148]	; (8005164 <TIM_Base_SetConfig+0x134>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d007      	beq.n	80050e2 <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a24      	ldr	r2, [pc, #144]	; (8005168 <TIM_Base_SetConfig+0x138>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d003      	beq.n	80050e2 <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a23      	ldr	r2, [pc, #140]	; (800516c <TIM_Base_SetConfig+0x13c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d108      	bne.n	80050f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <TIM_Base_SetConfig+0x114>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_Base_SetConfig+0xf8>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a0c      	ldr	r2, [pc, #48]	; (8005154 <TIM_Base_SetConfig+0x124>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d103      	bne.n	8005130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	615a      	str	r2, [r3, #20]
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40010000 	.word	0x40010000
 8005148:	40000400 	.word	0x40000400
 800514c:	40000800 	.word	0x40000800
 8005150:	40000c00 	.word	0x40000c00
 8005154:	40010400 	.word	0x40010400
 8005158:	40014000 	.word	0x40014000
 800515c:	40014400 	.word	0x40014400
 8005160:	40014800 	.word	0x40014800
 8005164:	40001800 	.word	0x40001800
 8005168:	40001c00 	.word	0x40001c00
 800516c:	40002000 	.word	0x40002000

08005170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e03f      	b.n	800522a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fc fd26 	bl	8001c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2224      	movs	r2, #36	; 0x24
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fcdb 	bl	8005b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695a      	ldr	r2, [r3, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	4613      	mov	r3, r2
 800523e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b20      	cmp	r3, #32
 800524a:	d11d      	bne.n	8005288 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <HAL_UART_Receive_IT+0x26>
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e016      	b.n	800528a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_UART_Receive_IT+0x38>
 8005266:	2302      	movs	r3, #2
 8005268:	e00f      	b.n	800528a <HAL_UART_Receive_IT+0x58>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	461a      	mov	r2, r3
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 fab6 	bl	80057f0 <UART_Start_Receive_IT>
 8005284:	4603      	mov	r3, r0
 8005286:	e000      	b.n	800528a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005288:	2302      	movs	r3, #2
  }
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b0ba      	sub	sp, #232	; 0xe8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10f      	bne.n	80052fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <HAL_UART_IRQHandler+0x66>
 80052e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fb95 	bl	8005a22 <UART_Receive_IT>
      return;
 80052f8:	e256      	b.n	80057a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 80de 	beq.w	80054c0 <HAL_UART_IRQHandler+0x22c>
 8005304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d106      	bne.n	800531e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005314:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80d1 	beq.w	80054c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800531e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00b      	beq.n	8005342 <HAL_UART_IRQHandler+0xae>
 800532a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800532e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f043 0201 	orr.w	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <HAL_UART_IRQHandler+0xd2>
 800534e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f043 0202 	orr.w	r2, r3, #2
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <HAL_UART_IRQHandler+0xf6>
 8005372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f043 0204 	orr.w	r2, r3, #4
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800538a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d011      	beq.n	80053ba <HAL_UART_IRQHandler+0x126>
 8005396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d105      	bne.n	80053ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	f043 0208 	orr.w	r2, r3, #8
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 81ed 	beq.w	800579e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <HAL_UART_IRQHandler+0x14e>
 80053d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fb20 	bl	8005a22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d103      	bne.n	800540e <HAL_UART_IRQHandler+0x17a>
 8005406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d04f      	beq.n	80054ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fa28 	bl	8005864 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b40      	cmp	r3, #64	; 0x40
 8005420:	d141      	bne.n	80054a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3314      	adds	r3, #20
 8005428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800543c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3314      	adds	r3, #20
 800544a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800544e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800545a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800545e:	e841 2300 	strex	r3, r2, [r1]
 8005462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1d9      	bne.n	8005422 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	2b00      	cmp	r3, #0
 8005474:	d013      	beq.n	800549e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	4a7d      	ldr	r2, [pc, #500]	; (8005670 <HAL_UART_IRQHandler+0x3dc>)
 800547c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	4618      	mov	r0, r3
 8005484:	f7fd f996 	bl	80027b4 <HAL_DMA_Abort_IT>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d016      	beq.n	80054bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005498:	4610      	mov	r0, r2
 800549a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549c:	e00e      	b.n	80054bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f990 	bl	80057c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a4:	e00a      	b.n	80054bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f98c 	bl	80057c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ac:	e006      	b.n	80054bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f988 	bl	80057c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054ba:	e170      	b.n	800579e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054bc:	bf00      	nop
    return;
 80054be:	e16e      	b.n	800579e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	f040 814a 	bne.w	800575e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ce:	f003 0310 	and.w	r3, r3, #16
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 8143 	beq.w	800575e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 813c 	beq.w	800575e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005506:	2b40      	cmp	r3, #64	; 0x40
 8005508:	f040 80b4 	bne.w	8005674 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005518:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8140 	beq.w	80057a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800552a:	429a      	cmp	r2, r3
 800552c:	f080 8139 	bcs.w	80057a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005536:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005542:	f000 8088 	beq.w	8005656 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	330c      	adds	r3, #12
 800554c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800555c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	330c      	adds	r3, #12
 800556e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005572:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005576:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800557e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800558a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1d9      	bne.n	8005546 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3314      	adds	r3, #20
 8005598:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a4:	f023 0301 	bic.w	r3, r3, #1
 80055a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3314      	adds	r3, #20
 80055b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e1      	bne.n	8005592 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3314      	adds	r3, #20
 80055d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3314      	adds	r3, #20
 80055ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e3      	bne.n	80055ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005626:	f023 0310 	bic.w	r3, r3, #16
 800562a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005638:	65ba      	str	r2, [r7, #88]	; 0x58
 800563a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800563e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e3      	bne.n	8005614 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	4618      	mov	r0, r3
 8005652:	f7fd f83f 	bl	80026d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800565e:	b29b      	uxth	r3, r3
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	b29b      	uxth	r3, r3
 8005664:	4619      	mov	r1, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f8b6 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800566c:	e099      	b.n	80057a2 <HAL_UART_IRQHandler+0x50e>
 800566e:	bf00      	nop
 8005670:	0800592b 	.word	0x0800592b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800567c:	b29b      	uxth	r3, r3
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 808b 	beq.w	80057a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8086 	beq.w	80057a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	330c      	adds	r3, #12
 80056a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	330c      	adds	r3, #12
 80056ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056be:	647a      	str	r2, [r7, #68]	; 0x44
 80056c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e3      	bne.n	800569a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3314      	adds	r3, #20
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	623b      	str	r3, [r7, #32]
   return(result);
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3314      	adds	r3, #20
 80056f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056f6:	633a      	str	r2, [r7, #48]	; 0x30
 80056f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e3      	bne.n	80056d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	60fb      	str	r3, [r7, #12]
   return(result);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0310 	bic.w	r3, r3, #16
 800572e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	330c      	adds	r3, #12
 8005738:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800573c:	61fa      	str	r2, [r7, #28]
 800573e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	69b9      	ldr	r1, [r7, #24]
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	617b      	str	r3, [r7, #20]
   return(result);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e3      	bne.n	8005718 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f83e 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800575c:	e023      	b.n	80057a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800575e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <HAL_UART_IRQHandler+0x4ea>
 800576a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f8eb 	bl	8005952 <UART_Transmit_IT>
    return;
 800577c:	e014      	b.n	80057a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800577e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00e      	beq.n	80057a8 <HAL_UART_IRQHandler+0x514>
 800578a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d008      	beq.n	80057a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f92b 	bl	80059f2 <UART_EndTransmit_IT>
    return;
 800579c:	e004      	b.n	80057a8 <HAL_UART_IRQHandler+0x514>
    return;
 800579e:	bf00      	nop
 80057a0:	e002      	b.n	80057a8 <HAL_UART_IRQHandler+0x514>
      return;
 80057a2:	bf00      	nop
 80057a4:	e000      	b.n	80057a8 <HAL_UART_IRQHandler+0x514>
      return;
 80057a6:	bf00      	nop
  }
}
 80057a8:	37e8      	adds	r7, #232	; 0xe8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop

080057b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	88fa      	ldrh	r2, [r7, #6]
 800580e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2222      	movs	r2, #34	; 0x22
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005834:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695a      	ldr	r2, [r3, #20]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0201 	orr.w	r2, r2, #1
 8005844:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 0220 	orr.w	r2, r2, #32
 8005854:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b095      	sub	sp, #84	; 0x54
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	330c      	adds	r3, #12
 8005872:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800588c:	643a      	str	r2, [r7, #64]	; 0x40
 800588e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005892:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e5      	bne.n	800586c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3314      	adds	r3, #20
 80058a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f023 0301 	bic.w	r3, r3, #1
 80058b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3314      	adds	r3, #20
 80058be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e5      	bne.n	80058a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d119      	bne.n	8005910 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	330c      	adds	r3, #12
 80058e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	e853 3f00 	ldrex	r3, [r3]
 80058ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f023 0310 	bic.w	r3, r3, #16
 80058f2:	647b      	str	r3, [r7, #68]	; 0x44
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	330c      	adds	r3, #12
 80058fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058fc:	61ba      	str	r2, [r7, #24]
 80058fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	6979      	ldr	r1, [r7, #20]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	613b      	str	r3, [r7, #16]
   return(result);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e5      	bne.n	80058dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800591e:	bf00      	nop
 8005920:	3754      	adds	r7, #84	; 0x54
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f7ff ff3d 	bl	80057c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800594a:	bf00      	nop
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005952:	b480      	push	{r7}
 8005954:	b085      	sub	sp, #20
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b21      	cmp	r3, #33	; 0x21
 8005964:	d13e      	bne.n	80059e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596e:	d114      	bne.n	800599a <UART_Transmit_IT+0x48>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d110      	bne.n	800599a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800598c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	1c9a      	adds	r2, r3, #2
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	621a      	str	r2, [r3, #32]
 8005998:	e008      	b.n	80059ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	1c59      	adds	r1, r3, #1
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6211      	str	r1, [r2, #32]
 80059a4:	781a      	ldrb	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4619      	mov	r1, r3
 80059ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10f      	bne.n	80059e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	e000      	b.n	80059e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059e4:	2302      	movs	r3, #2
  }
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b082      	sub	sp, #8
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff fecc 	bl	80057b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b08c      	sub	sp, #48	; 0x30
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b22      	cmp	r3, #34	; 0x22
 8005a34:	f040 80ab 	bne.w	8005b8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a40:	d117      	bne.n	8005a72 <UART_Receive_IT+0x50>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d113      	bne.n	8005a72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	1c9a      	adds	r2, r3, #2
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005a70:	e026      	b.n	8005ac0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a84:	d007      	beq.n	8005a96 <UART_Receive_IT+0x74>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <UART_Receive_IT+0x82>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	e008      	b.n	8005ab6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	4619      	mov	r1, r3
 8005ace:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d15a      	bne.n	8005b8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0220 	bic.w	r2, r2, #32
 8005ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005af2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695a      	ldr	r2, [r3, #20]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d135      	bne.n	8005b80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	330c      	adds	r3, #12
 8005b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	613b      	str	r3, [r7, #16]
   return(result);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f023 0310 	bic.w	r3, r3, #16
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3a:	623a      	str	r2, [r7, #32]
 8005b3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	69f9      	ldr	r1, [r7, #28]
 8005b40:	6a3a      	ldr	r2, [r7, #32]
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e5      	bne.n	8005b1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d10a      	bne.n	8005b72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff fe2d 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
 8005b7e:	e002      	b.n	8005b86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7fc fa83 	bl	800208c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e002      	b.n	8005b90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e000      	b.n	8005b90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b8e:	2302      	movs	r3, #2
  }
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3730      	adds	r7, #48	; 0x30
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b9c:	b0c0      	sub	sp, #256	; 0x100
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb4:	68d9      	ldr	r1, [r3, #12]
 8005bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	ea40 0301 	orr.w	r3, r0, r1
 8005bc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bf0:	f021 010c 	bic.w	r1, r1, #12
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c12:	6999      	ldr	r1, [r3, #24]
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	ea40 0301 	orr.w	r3, r0, r1
 8005c1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4b8f      	ldr	r3, [pc, #572]	; (8005e64 <UART_SetConfig+0x2cc>)
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d005      	beq.n	8005c38 <UART_SetConfig+0xa0>
 8005c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4b8d      	ldr	r3, [pc, #564]	; (8005e68 <UART_SetConfig+0x2d0>)
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d104      	bne.n	8005c42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c38:	f7fe ffba 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 8005c3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c40:	e003      	b.n	8005c4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c42:	f7fe ffa1 	bl	8004b88 <HAL_RCC_GetPCLK1Freq>
 8005c46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c54:	f040 810c 	bne.w	8005e70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	1891      	adds	r1, r2, r2
 8005c70:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c72:	415b      	adcs	r3, r3
 8005c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	eb12 0801 	adds.w	r8, r2, r1
 8005c80:	4629      	mov	r1, r5
 8005c82:	eb43 0901 	adc.w	r9, r3, r1
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c9a:	4690      	mov	r8, r2
 8005c9c:	4699      	mov	r9, r3
 8005c9e:	4623      	mov	r3, r4
 8005ca0:	eb18 0303 	adds.w	r3, r8, r3
 8005ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ca8:	462b      	mov	r3, r5
 8005caa:	eb49 0303 	adc.w	r3, r9, r3
 8005cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005cc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	18db      	adds	r3, r3, r3
 8005cca:	653b      	str	r3, [r7, #80]	; 0x50
 8005ccc:	4613      	mov	r3, r2
 8005cce:	eb42 0303 	adc.w	r3, r2, r3
 8005cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8005cd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005cd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005cdc:	f7fa fac8 	bl	8000270 <__aeabi_uldivmod>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4b61      	ldr	r3, [pc, #388]	; (8005e6c <UART_SetConfig+0x2d4>)
 8005ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	011c      	lsls	r4, r3, #4
 8005cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cf8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005cfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d00:	4642      	mov	r2, r8
 8005d02:	464b      	mov	r3, r9
 8005d04:	1891      	adds	r1, r2, r2
 8005d06:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d10:	4641      	mov	r1, r8
 8005d12:	eb12 0a01 	adds.w	sl, r2, r1
 8005d16:	4649      	mov	r1, r9
 8005d18:	eb43 0b01 	adc.w	fp, r3, r1
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d30:	4692      	mov	sl, r2
 8005d32:	469b      	mov	fp, r3
 8005d34:	4643      	mov	r3, r8
 8005d36:	eb1a 0303 	adds.w	r3, sl, r3
 8005d3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d3e:	464b      	mov	r3, r9
 8005d40:	eb4b 0303 	adc.w	r3, fp, r3
 8005d44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	18db      	adds	r3, r3, r3
 8005d60:	643b      	str	r3, [r7, #64]	; 0x40
 8005d62:	4613      	mov	r3, r2
 8005d64:	eb42 0303 	adc.w	r3, r2, r3
 8005d68:	647b      	str	r3, [r7, #68]	; 0x44
 8005d6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d72:	f7fa fa7d 	bl	8000270 <__aeabi_uldivmod>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	4b3b      	ldr	r3, [pc, #236]	; (8005e6c <UART_SetConfig+0x2d4>)
 8005d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d82:	095b      	lsrs	r3, r3, #5
 8005d84:	2264      	movs	r2, #100	; 0x64
 8005d86:	fb02 f303 	mul.w	r3, r2, r3
 8005d8a:	1acb      	subs	r3, r1, r3
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d92:	4b36      	ldr	r3, [pc, #216]	; (8005e6c <UART_SetConfig+0x2d4>)
 8005d94:	fba3 2302 	umull	r2, r3, r3, r2
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005da0:	441c      	add	r4, r3
 8005da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005db0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005db4:	4642      	mov	r2, r8
 8005db6:	464b      	mov	r3, r9
 8005db8:	1891      	adds	r1, r2, r2
 8005dba:	63b9      	str	r1, [r7, #56]	; 0x38
 8005dbc:	415b      	adcs	r3, r3
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	1851      	adds	r1, r2, r1
 8005dc8:	6339      	str	r1, [r7, #48]	; 0x30
 8005dca:	4649      	mov	r1, r9
 8005dcc:	414b      	adcs	r3, r1
 8005dce:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd0:	f04f 0200 	mov.w	r2, #0
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ddc:	4659      	mov	r1, fp
 8005dde:	00cb      	lsls	r3, r1, #3
 8005de0:	4651      	mov	r1, sl
 8005de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005de6:	4651      	mov	r1, sl
 8005de8:	00ca      	lsls	r2, r1, #3
 8005dea:	4610      	mov	r0, r2
 8005dec:	4619      	mov	r1, r3
 8005dee:	4603      	mov	r3, r0
 8005df0:	4642      	mov	r2, r8
 8005df2:	189b      	adds	r3, r3, r2
 8005df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005df8:	464b      	mov	r3, r9
 8005dfa:	460a      	mov	r2, r1
 8005dfc:	eb42 0303 	adc.w	r3, r2, r3
 8005e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e18:	460b      	mov	r3, r1
 8005e1a:	18db      	adds	r3, r3, r3
 8005e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e1e:	4613      	mov	r3, r2
 8005e20:	eb42 0303 	adc.w	r3, r2, r3
 8005e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e2e:	f7fa fa1f 	bl	8000270 <__aeabi_uldivmod>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <UART_SetConfig+0x2d4>)
 8005e38:	fba3 1302 	umull	r1, r3, r3, r2
 8005e3c:	095b      	lsrs	r3, r3, #5
 8005e3e:	2164      	movs	r1, #100	; 0x64
 8005e40:	fb01 f303 	mul.w	r3, r1, r3
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	3332      	adds	r3, #50	; 0x32
 8005e4a:	4a08      	ldr	r2, [pc, #32]	; (8005e6c <UART_SetConfig+0x2d4>)
 8005e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	f003 0207 	and.w	r2, r3, #7
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4422      	add	r2, r4
 8005e5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e60:	e105      	b.n	800606e <UART_SetConfig+0x4d6>
 8005e62:	bf00      	nop
 8005e64:	40011000 	.word	0x40011000
 8005e68:	40011400 	.word	0x40011400
 8005e6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e82:	4642      	mov	r2, r8
 8005e84:	464b      	mov	r3, r9
 8005e86:	1891      	adds	r1, r2, r2
 8005e88:	6239      	str	r1, [r7, #32]
 8005e8a:	415b      	adcs	r3, r3
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e92:	4641      	mov	r1, r8
 8005e94:	1854      	adds	r4, r2, r1
 8005e96:	4649      	mov	r1, r9
 8005e98:	eb43 0501 	adc.w	r5, r3, r1
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	00eb      	lsls	r3, r5, #3
 8005ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eaa:	00e2      	lsls	r2, r4, #3
 8005eac:	4614      	mov	r4, r2
 8005eae:	461d      	mov	r5, r3
 8005eb0:	4643      	mov	r3, r8
 8005eb2:	18e3      	adds	r3, r4, r3
 8005eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005eb8:	464b      	mov	r3, r9
 8005eba:	eb45 0303 	adc.w	r3, r5, r3
 8005ebe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ece:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ede:	4629      	mov	r1, r5
 8005ee0:	008b      	lsls	r3, r1, #2
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ee8:	4621      	mov	r1, r4
 8005eea:	008a      	lsls	r2, r1, #2
 8005eec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ef0:	f7fa f9be 	bl	8000270 <__aeabi_uldivmod>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4b60      	ldr	r3, [pc, #384]	; (800607c <UART_SetConfig+0x4e4>)
 8005efa:	fba3 2302 	umull	r2, r3, r3, r2
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	011c      	lsls	r4, r3, #4
 8005f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f14:	4642      	mov	r2, r8
 8005f16:	464b      	mov	r3, r9
 8005f18:	1891      	adds	r1, r2, r2
 8005f1a:	61b9      	str	r1, [r7, #24]
 8005f1c:	415b      	adcs	r3, r3
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f24:	4641      	mov	r1, r8
 8005f26:	1851      	adds	r1, r2, r1
 8005f28:	6139      	str	r1, [r7, #16]
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	414b      	adcs	r3, r1
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	f04f 0300 	mov.w	r3, #0
 8005f38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f3c:	4659      	mov	r1, fp
 8005f3e:	00cb      	lsls	r3, r1, #3
 8005f40:	4651      	mov	r1, sl
 8005f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f46:	4651      	mov	r1, sl
 8005f48:	00ca      	lsls	r2, r1, #3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4642      	mov	r2, r8
 8005f52:	189b      	adds	r3, r3, r2
 8005f54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f58:	464b      	mov	r3, r9
 8005f5a:	460a      	mov	r2, r1
 8005f5c:	eb42 0303 	adc.w	r3, r2, r3
 8005f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	008b      	lsls	r3, r1, #2
 8005f80:	4641      	mov	r1, r8
 8005f82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f86:	4641      	mov	r1, r8
 8005f88:	008a      	lsls	r2, r1, #2
 8005f8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f8e:	f7fa f96f 	bl	8000270 <__aeabi_uldivmod>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4b39      	ldr	r3, [pc, #228]	; (800607c <UART_SetConfig+0x4e4>)
 8005f98:	fba3 1302 	umull	r1, r3, r3, r2
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	2164      	movs	r1, #100	; 0x64
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	3332      	adds	r3, #50	; 0x32
 8005faa:	4a34      	ldr	r2, [pc, #208]	; (800607c <UART_SetConfig+0x4e4>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fb6:	441c      	add	r4, r3
 8005fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	673b      	str	r3, [r7, #112]	; 0x70
 8005fc0:	677a      	str	r2, [r7, #116]	; 0x74
 8005fc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005fc6:	4642      	mov	r2, r8
 8005fc8:	464b      	mov	r3, r9
 8005fca:	1891      	adds	r1, r2, r2
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	415b      	adcs	r3, r3
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fd6:	4641      	mov	r1, r8
 8005fd8:	1851      	adds	r1, r2, r1
 8005fda:	6039      	str	r1, [r7, #0]
 8005fdc:	4649      	mov	r1, r9
 8005fde:	414b      	adcs	r3, r1
 8005fe0:	607b      	str	r3, [r7, #4]
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fee:	4659      	mov	r1, fp
 8005ff0:	00cb      	lsls	r3, r1, #3
 8005ff2:	4651      	mov	r1, sl
 8005ff4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ff8:	4651      	mov	r1, sl
 8005ffa:	00ca      	lsls	r2, r1, #3
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4619      	mov	r1, r3
 8006000:	4603      	mov	r3, r0
 8006002:	4642      	mov	r2, r8
 8006004:	189b      	adds	r3, r3, r2
 8006006:	66bb      	str	r3, [r7, #104]	; 0x68
 8006008:	464b      	mov	r3, r9
 800600a:	460a      	mov	r2, r1
 800600c:	eb42 0303 	adc.w	r3, r2, r3
 8006010:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	663b      	str	r3, [r7, #96]	; 0x60
 800601c:	667a      	str	r2, [r7, #100]	; 0x64
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800602a:	4649      	mov	r1, r9
 800602c:	008b      	lsls	r3, r1, #2
 800602e:	4641      	mov	r1, r8
 8006030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006034:	4641      	mov	r1, r8
 8006036:	008a      	lsls	r2, r1, #2
 8006038:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800603c:	f7fa f918 	bl	8000270 <__aeabi_uldivmod>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4b0d      	ldr	r3, [pc, #52]	; (800607c <UART_SetConfig+0x4e4>)
 8006046:	fba3 1302 	umull	r1, r3, r3, r2
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	2164      	movs	r1, #100	; 0x64
 800604e:	fb01 f303 	mul.w	r3, r1, r3
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	3332      	adds	r3, #50	; 0x32
 8006058:	4a08      	ldr	r2, [pc, #32]	; (800607c <UART_SetConfig+0x4e4>)
 800605a:	fba2 2303 	umull	r2, r3, r2, r3
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	f003 020f 	and.w	r2, r3, #15
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4422      	add	r2, r4
 800606c:	609a      	str	r2, [r3, #8]
}
 800606e:	bf00      	nop
 8006070:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006074:	46bd      	mov	sp, r7
 8006076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800607a:	bf00      	nop
 800607c:	51eb851f 	.word	0x51eb851f

08006080 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006086:	4b98      	ldr	r3, [pc, #608]	; (80062e8 <MX_LWIP_Init+0x268>)
 8006088:	22c0      	movs	r2, #192	; 0xc0
 800608a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800608c:	4b96      	ldr	r3, [pc, #600]	; (80062e8 <MX_LWIP_Init+0x268>)
 800608e:	22a8      	movs	r2, #168	; 0xa8
 8006090:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8006092:	4b95      	ldr	r3, [pc, #596]	; (80062e8 <MX_LWIP_Init+0x268>)
 8006094:	2200      	movs	r2, #0
 8006096:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 8006098:	4b93      	ldr	r3, [pc, #588]	; (80062e8 <MX_LWIP_Init+0x268>)
 800609a:	22b1      	movs	r2, #177	; 0xb1
 800609c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800609e:	4b93      	ldr	r3, [pc, #588]	; (80062ec <MX_LWIP_Init+0x26c>)
 80060a0:	22ff      	movs	r2, #255	; 0xff
 80060a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80060a4:	4b91      	ldr	r3, [pc, #580]	; (80062ec <MX_LWIP_Init+0x26c>)
 80060a6:	22ff      	movs	r2, #255	; 0xff
 80060a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80060aa:	4b90      	ldr	r3, [pc, #576]	; (80062ec <MX_LWIP_Init+0x26c>)
 80060ac:	22ff      	movs	r2, #255	; 0xff
 80060ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80060b0:	4b8e      	ldr	r3, [pc, #568]	; (80062ec <MX_LWIP_Init+0x26c>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80060b6:	4b8e      	ldr	r3, [pc, #568]	; (80062f0 <MX_LWIP_Init+0x270>)
 80060b8:	22c0      	movs	r2, #192	; 0xc0
 80060ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80060bc:	4b8c      	ldr	r3, [pc, #560]	; (80062f0 <MX_LWIP_Init+0x270>)
 80060be:	22a8      	movs	r2, #168	; 0xa8
 80060c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80060c2:	4b8b      	ldr	r3, [pc, #556]	; (80062f0 <MX_LWIP_Init+0x270>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80060c8:	4b89      	ldr	r3, [pc, #548]	; (80062f0 <MX_LWIP_Init+0x270>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80060ce:	2100      	movs	r1, #0
 80060d0:	2000      	movs	r0, #0
 80060d2:	f005 fd11 	bl	800baf8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80060d6:	4b84      	ldr	r3, [pc, #528]	; (80062e8 <MX_LWIP_Init+0x268>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	061a      	lsls	r2, r3, #24
 80060dc:	4b82      	ldr	r3, [pc, #520]	; (80062e8 <MX_LWIP_Init+0x268>)
 80060de:	785b      	ldrb	r3, [r3, #1]
 80060e0:	041b      	lsls	r3, r3, #16
 80060e2:	431a      	orrs	r2, r3
 80060e4:	4b80      	ldr	r3, [pc, #512]	; (80062e8 <MX_LWIP_Init+0x268>)
 80060e6:	789b      	ldrb	r3, [r3, #2]
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	4313      	orrs	r3, r2
 80060ec:	4a7e      	ldr	r2, [pc, #504]	; (80062e8 <MX_LWIP_Init+0x268>)
 80060ee:	78d2      	ldrb	r2, [r2, #3]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	061a      	lsls	r2, r3, #24
 80060f4:	4b7c      	ldr	r3, [pc, #496]	; (80062e8 <MX_LWIP_Init+0x268>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	0619      	lsls	r1, r3, #24
 80060fa:	4b7b      	ldr	r3, [pc, #492]	; (80062e8 <MX_LWIP_Init+0x268>)
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	041b      	lsls	r3, r3, #16
 8006100:	4319      	orrs	r1, r3
 8006102:	4b79      	ldr	r3, [pc, #484]	; (80062e8 <MX_LWIP_Init+0x268>)
 8006104:	789b      	ldrb	r3, [r3, #2]
 8006106:	021b      	lsls	r3, r3, #8
 8006108:	430b      	orrs	r3, r1
 800610a:	4977      	ldr	r1, [pc, #476]	; (80062e8 <MX_LWIP_Init+0x268>)
 800610c:	78c9      	ldrb	r1, [r1, #3]
 800610e:	430b      	orrs	r3, r1
 8006110:	021b      	lsls	r3, r3, #8
 8006112:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006116:	431a      	orrs	r2, r3
 8006118:	4b73      	ldr	r3, [pc, #460]	; (80062e8 <MX_LWIP_Init+0x268>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	0619      	lsls	r1, r3, #24
 800611e:	4b72      	ldr	r3, [pc, #456]	; (80062e8 <MX_LWIP_Init+0x268>)
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	041b      	lsls	r3, r3, #16
 8006124:	4319      	orrs	r1, r3
 8006126:	4b70      	ldr	r3, [pc, #448]	; (80062e8 <MX_LWIP_Init+0x268>)
 8006128:	789b      	ldrb	r3, [r3, #2]
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	430b      	orrs	r3, r1
 800612e:	496e      	ldr	r1, [pc, #440]	; (80062e8 <MX_LWIP_Init+0x268>)
 8006130:	78c9      	ldrb	r1, [r1, #3]
 8006132:	430b      	orrs	r3, r1
 8006134:	0a1b      	lsrs	r3, r3, #8
 8006136:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800613a:	431a      	orrs	r2, r3
 800613c:	4b6a      	ldr	r3, [pc, #424]	; (80062e8 <MX_LWIP_Init+0x268>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	0619      	lsls	r1, r3, #24
 8006142:	4b69      	ldr	r3, [pc, #420]	; (80062e8 <MX_LWIP_Init+0x268>)
 8006144:	785b      	ldrb	r3, [r3, #1]
 8006146:	041b      	lsls	r3, r3, #16
 8006148:	4319      	orrs	r1, r3
 800614a:	4b67      	ldr	r3, [pc, #412]	; (80062e8 <MX_LWIP_Init+0x268>)
 800614c:	789b      	ldrb	r3, [r3, #2]
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	430b      	orrs	r3, r1
 8006152:	4965      	ldr	r1, [pc, #404]	; (80062e8 <MX_LWIP_Init+0x268>)
 8006154:	78c9      	ldrb	r1, [r1, #3]
 8006156:	430b      	orrs	r3, r1
 8006158:	0e1b      	lsrs	r3, r3, #24
 800615a:	4313      	orrs	r3, r2
 800615c:	4a65      	ldr	r2, [pc, #404]	; (80062f4 <MX_LWIP_Init+0x274>)
 800615e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006160:	4b62      	ldr	r3, [pc, #392]	; (80062ec <MX_LWIP_Init+0x26c>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	061a      	lsls	r2, r3, #24
 8006166:	4b61      	ldr	r3, [pc, #388]	; (80062ec <MX_LWIP_Init+0x26c>)
 8006168:	785b      	ldrb	r3, [r3, #1]
 800616a:	041b      	lsls	r3, r3, #16
 800616c:	431a      	orrs	r2, r3
 800616e:	4b5f      	ldr	r3, [pc, #380]	; (80062ec <MX_LWIP_Init+0x26c>)
 8006170:	789b      	ldrb	r3, [r3, #2]
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	4313      	orrs	r3, r2
 8006176:	4a5d      	ldr	r2, [pc, #372]	; (80062ec <MX_LWIP_Init+0x26c>)
 8006178:	78d2      	ldrb	r2, [r2, #3]
 800617a:	4313      	orrs	r3, r2
 800617c:	061a      	lsls	r2, r3, #24
 800617e:	4b5b      	ldr	r3, [pc, #364]	; (80062ec <MX_LWIP_Init+0x26c>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	0619      	lsls	r1, r3, #24
 8006184:	4b59      	ldr	r3, [pc, #356]	; (80062ec <MX_LWIP_Init+0x26c>)
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	041b      	lsls	r3, r3, #16
 800618a:	4319      	orrs	r1, r3
 800618c:	4b57      	ldr	r3, [pc, #348]	; (80062ec <MX_LWIP_Init+0x26c>)
 800618e:	789b      	ldrb	r3, [r3, #2]
 8006190:	021b      	lsls	r3, r3, #8
 8006192:	430b      	orrs	r3, r1
 8006194:	4955      	ldr	r1, [pc, #340]	; (80062ec <MX_LWIP_Init+0x26c>)
 8006196:	78c9      	ldrb	r1, [r1, #3]
 8006198:	430b      	orrs	r3, r1
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061a0:	431a      	orrs	r2, r3
 80061a2:	4b52      	ldr	r3, [pc, #328]	; (80062ec <MX_LWIP_Init+0x26c>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	0619      	lsls	r1, r3, #24
 80061a8:	4b50      	ldr	r3, [pc, #320]	; (80062ec <MX_LWIP_Init+0x26c>)
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	041b      	lsls	r3, r3, #16
 80061ae:	4319      	orrs	r1, r3
 80061b0:	4b4e      	ldr	r3, [pc, #312]	; (80062ec <MX_LWIP_Init+0x26c>)
 80061b2:	789b      	ldrb	r3, [r3, #2]
 80061b4:	021b      	lsls	r3, r3, #8
 80061b6:	430b      	orrs	r3, r1
 80061b8:	494c      	ldr	r1, [pc, #304]	; (80062ec <MX_LWIP_Init+0x26c>)
 80061ba:	78c9      	ldrb	r1, [r1, #3]
 80061bc:	430b      	orrs	r3, r1
 80061be:	0a1b      	lsrs	r3, r3, #8
 80061c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80061c4:	431a      	orrs	r2, r3
 80061c6:	4b49      	ldr	r3, [pc, #292]	; (80062ec <MX_LWIP_Init+0x26c>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	0619      	lsls	r1, r3, #24
 80061cc:	4b47      	ldr	r3, [pc, #284]	; (80062ec <MX_LWIP_Init+0x26c>)
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	041b      	lsls	r3, r3, #16
 80061d2:	4319      	orrs	r1, r3
 80061d4:	4b45      	ldr	r3, [pc, #276]	; (80062ec <MX_LWIP_Init+0x26c>)
 80061d6:	789b      	ldrb	r3, [r3, #2]
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	430b      	orrs	r3, r1
 80061dc:	4943      	ldr	r1, [pc, #268]	; (80062ec <MX_LWIP_Init+0x26c>)
 80061de:	78c9      	ldrb	r1, [r1, #3]
 80061e0:	430b      	orrs	r3, r1
 80061e2:	0e1b      	lsrs	r3, r3, #24
 80061e4:	4313      	orrs	r3, r2
 80061e6:	4a44      	ldr	r2, [pc, #272]	; (80062f8 <MX_LWIP_Init+0x278>)
 80061e8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80061ea:	4b41      	ldr	r3, [pc, #260]	; (80062f0 <MX_LWIP_Init+0x270>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	061a      	lsls	r2, r3, #24
 80061f0:	4b3f      	ldr	r3, [pc, #252]	; (80062f0 <MX_LWIP_Init+0x270>)
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	041b      	lsls	r3, r3, #16
 80061f6:	431a      	orrs	r2, r3
 80061f8:	4b3d      	ldr	r3, [pc, #244]	; (80062f0 <MX_LWIP_Init+0x270>)
 80061fa:	789b      	ldrb	r3, [r3, #2]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	4313      	orrs	r3, r2
 8006200:	4a3b      	ldr	r2, [pc, #236]	; (80062f0 <MX_LWIP_Init+0x270>)
 8006202:	78d2      	ldrb	r2, [r2, #3]
 8006204:	4313      	orrs	r3, r2
 8006206:	061a      	lsls	r2, r3, #24
 8006208:	4b39      	ldr	r3, [pc, #228]	; (80062f0 <MX_LWIP_Init+0x270>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	0619      	lsls	r1, r3, #24
 800620e:	4b38      	ldr	r3, [pc, #224]	; (80062f0 <MX_LWIP_Init+0x270>)
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	041b      	lsls	r3, r3, #16
 8006214:	4319      	orrs	r1, r3
 8006216:	4b36      	ldr	r3, [pc, #216]	; (80062f0 <MX_LWIP_Init+0x270>)
 8006218:	789b      	ldrb	r3, [r3, #2]
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	430b      	orrs	r3, r1
 800621e:	4934      	ldr	r1, [pc, #208]	; (80062f0 <MX_LWIP_Init+0x270>)
 8006220:	78c9      	ldrb	r1, [r1, #3]
 8006222:	430b      	orrs	r3, r1
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800622a:	431a      	orrs	r2, r3
 800622c:	4b30      	ldr	r3, [pc, #192]	; (80062f0 <MX_LWIP_Init+0x270>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	0619      	lsls	r1, r3, #24
 8006232:	4b2f      	ldr	r3, [pc, #188]	; (80062f0 <MX_LWIP_Init+0x270>)
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	041b      	lsls	r3, r3, #16
 8006238:	4319      	orrs	r1, r3
 800623a:	4b2d      	ldr	r3, [pc, #180]	; (80062f0 <MX_LWIP_Init+0x270>)
 800623c:	789b      	ldrb	r3, [r3, #2]
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	430b      	orrs	r3, r1
 8006242:	492b      	ldr	r1, [pc, #172]	; (80062f0 <MX_LWIP_Init+0x270>)
 8006244:	78c9      	ldrb	r1, [r1, #3]
 8006246:	430b      	orrs	r3, r1
 8006248:	0a1b      	lsrs	r3, r3, #8
 800624a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800624e:	431a      	orrs	r2, r3
 8006250:	4b27      	ldr	r3, [pc, #156]	; (80062f0 <MX_LWIP_Init+0x270>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	0619      	lsls	r1, r3, #24
 8006256:	4b26      	ldr	r3, [pc, #152]	; (80062f0 <MX_LWIP_Init+0x270>)
 8006258:	785b      	ldrb	r3, [r3, #1]
 800625a:	041b      	lsls	r3, r3, #16
 800625c:	4319      	orrs	r1, r3
 800625e:	4b24      	ldr	r3, [pc, #144]	; (80062f0 <MX_LWIP_Init+0x270>)
 8006260:	789b      	ldrb	r3, [r3, #2]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	430b      	orrs	r3, r1
 8006266:	4922      	ldr	r1, [pc, #136]	; (80062f0 <MX_LWIP_Init+0x270>)
 8006268:	78c9      	ldrb	r1, [r1, #3]
 800626a:	430b      	orrs	r3, r1
 800626c:	0e1b      	lsrs	r3, r3, #24
 800626e:	4313      	orrs	r3, r2
 8006270:	4a22      	ldr	r2, [pc, #136]	; (80062fc <MX_LWIP_Init+0x27c>)
 8006272:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006274:	4b22      	ldr	r3, [pc, #136]	; (8006300 <MX_LWIP_Init+0x280>)
 8006276:	9302      	str	r3, [sp, #8]
 8006278:	4b22      	ldr	r3, [pc, #136]	; (8006304 <MX_LWIP_Init+0x284>)
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	2300      	movs	r3, #0
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	4b1e      	ldr	r3, [pc, #120]	; (80062fc <MX_LWIP_Init+0x27c>)
 8006282:	4a1d      	ldr	r2, [pc, #116]	; (80062f8 <MX_LWIP_Init+0x278>)
 8006284:	491b      	ldr	r1, [pc, #108]	; (80062f4 <MX_LWIP_Init+0x274>)
 8006286:	4820      	ldr	r0, [pc, #128]	; (8006308 <MX_LWIP_Init+0x288>)
 8006288:	f006 f9ba 	bl	800c600 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800628c:	481e      	ldr	r0, [pc, #120]	; (8006308 <MX_LWIP_Init+0x288>)
 800628e:	f006 fb69 	bl	800c964 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006292:	4b1d      	ldr	r3, [pc, #116]	; (8006308 <MX_LWIP_Init+0x288>)
 8006294:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006298:	089b      	lsrs	r3, r3, #2
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80062a4:	4818      	ldr	r0, [pc, #96]	; (8006308 <MX_LWIP_Init+0x288>)
 80062a6:	f006 fb6d 	bl	800c984 <netif_set_up>
 80062aa:	e002      	b.n	80062b2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80062ac:	4816      	ldr	r0, [pc, #88]	; (8006308 <MX_LWIP_Init+0x288>)
 80062ae:	f006 fbd5 	bl	800ca5c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80062b2:	4916      	ldr	r1, [pc, #88]	; (800630c <MX_LWIP_Init+0x28c>)
 80062b4:	4814      	ldr	r0, [pc, #80]	; (8006308 <MX_LWIP_Init+0x288>)
 80062b6:	f006 fc03 	bl	800cac0 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80062ba:	2300      	movs	r3, #0
 80062bc:	603b      	str	r3, [r7, #0]
 80062be:	2300      	movs	r3, #0
 80062c0:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80062c2:	463b      	mov	r3, r7
 80062c4:	2101      	movs	r1, #1
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fd34 	bl	8006d34 <osSemaphoreCreate>
 80062cc:	4603      	mov	r3, r0
 80062ce:	4a10      	ldr	r2, [pc, #64]	; (8006310 <MX_LWIP_Init+0x290>)
 80062d0:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80062d2:	4b10      	ldr	r3, [pc, #64]	; (8006314 <MX_LWIP_Init+0x294>)
 80062d4:	4a0c      	ldr	r2, [pc, #48]	; (8006308 <MX_LWIP_Init+0x288>)
 80062d6:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80062d8:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <MX_LWIP_Init+0x290>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a0d      	ldr	r2, [pc, #52]	; (8006314 <MX_LWIP_Init+0x294>)
 80062de:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80062e0:	bf00      	nop
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20000608 	.word	0x20000608
 80062ec:	2000060c 	.word	0x2000060c
 80062f0:	20000610 	.word	0x20000610
 80062f4:	200005fc 	.word	0x200005fc
 80062f8:	20000600 	.word	0x20000600
 80062fc:	20000604 	.word	0x20000604
 8006300:	0800ba09 	.word	0x0800ba09
 8006304:	08006941 	.word	0x08006941
 8006308:	200005c8 	.word	0x200005c8
 800630c:	080069ad 	.word	0x080069ad
 8006310:	200005bc 	.word	0x200005bc
 8006314:	200005c0 	.word	0x200005c0

08006318 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08e      	sub	sp, #56	; 0x38
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	605a      	str	r2, [r3, #4]
 800632a:	609a      	str	r2, [r3, #8]
 800632c:	60da      	str	r2, [r3, #12]
 800632e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a4a      	ldr	r2, [pc, #296]	; (8006460 <HAL_ETH_MspInit+0x148>)
 8006336:	4293      	cmp	r3, r2
 8006338:	f040 808d 	bne.w	8006456 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800633c:	2300      	movs	r3, #0
 800633e:	623b      	str	r3, [r7, #32]
 8006340:	4b48      	ldr	r3, [pc, #288]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	4a47      	ldr	r2, [pc, #284]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 8006346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800634a:	6313      	str	r3, [r2, #48]	; 0x30
 800634c:	4b45      	ldr	r3, [pc, #276]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006354:	623b      	str	r3, [r7, #32]
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	2300      	movs	r3, #0
 800635a:	61fb      	str	r3, [r7, #28]
 800635c:	4b41      	ldr	r3, [pc, #260]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	4a40      	ldr	r2, [pc, #256]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 8006362:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006366:	6313      	str	r3, [r2, #48]	; 0x30
 8006368:	4b3e      	ldr	r3, [pc, #248]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 800636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	2300      	movs	r3, #0
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	4b3a      	ldr	r3, [pc, #232]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 800637a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637c:	4a39      	ldr	r2, [pc, #228]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 800637e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006382:	6313      	str	r3, [r2, #48]	; 0x30
 8006384:	4b37      	ldr	r3, [pc, #220]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	4b33      	ldr	r3, [pc, #204]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	4a32      	ldr	r2, [pc, #200]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 800639a:	f043 0304 	orr.w	r3, r3, #4
 800639e:	6313      	str	r3, [r2, #48]	; 0x30
 80063a0:	4b30      	ldr	r3, [pc, #192]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 80063a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063ac:	2300      	movs	r3, #0
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	4b2c      	ldr	r3, [pc, #176]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	4a2b      	ldr	r2, [pc, #172]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	6313      	str	r3, [r2, #48]	; 0x30
 80063bc:	4b29      	ldr	r3, [pc, #164]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 80063be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	4b25      	ldr	r3, [pc, #148]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	4a24      	ldr	r2, [pc, #144]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 80063d2:	f043 0302 	orr.w	r3, r3, #2
 80063d6:	6313      	str	r3, [r2, #48]	; 0x30
 80063d8:	4b22      	ldr	r3, [pc, #136]	; (8006464 <HAL_ETH_MspInit+0x14c>)
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80063e4:	2332      	movs	r3, #50	; 0x32
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063e8:	2302      	movs	r3, #2
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063f0:	2303      	movs	r3, #3
 80063f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80063f4:	230b      	movs	r3, #11
 80063f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063fc:	4619      	mov	r1, r3
 80063fe:	481a      	ldr	r0, [pc, #104]	; (8006468 <HAL_ETH_MspInit+0x150>)
 8006400:	f7fd fdc4 	bl	8003f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006404:	2386      	movs	r3, #134	; 0x86
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006408:	2302      	movs	r3, #2
 800640a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800640c:	2300      	movs	r3, #0
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006410:	2303      	movs	r3, #3
 8006412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006414:	230b      	movs	r3, #11
 8006416:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800641c:	4619      	mov	r1, r3
 800641e:	4813      	ldr	r0, [pc, #76]	; (800646c <HAL_ETH_MspInit+0x154>)
 8006420:	f7fd fdb4 	bl	8003f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8006424:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800642a:	2302      	movs	r3, #2
 800642c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800642e:	2300      	movs	r3, #0
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006432:	2303      	movs	r3, #3
 8006434:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006436:	230b      	movs	r3, #11
 8006438:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800643a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800643e:	4619      	mov	r1, r3
 8006440:	480b      	ldr	r0, [pc, #44]	; (8006470 <HAL_ETH_MspInit+0x158>)
 8006442:	f7fd fda3 	bl	8003f8c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006446:	2200      	movs	r2, #0
 8006448:	2105      	movs	r1, #5
 800644a:	203d      	movs	r0, #61	; 0x3d
 800644c:	f7fc f86a 	bl	8002524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006450:	203d      	movs	r0, #61	; 0x3d
 8006452:	f7fc f883 	bl	800255c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006456:	bf00      	nop
 8006458:	3738      	adds	r7, #56	; 0x38
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40028000 	.word	0x40028000
 8006464:	40023800 	.word	0x40023800
 8006468:	40020800 	.word	0x40020800
 800646c:	40020000 	.word	0x40020000
 8006470:	40020400 	.word	0x40020400

08006474 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800647c:	4b04      	ldr	r3, [pc, #16]	; (8006490 <HAL_ETH_RxCpltCallback+0x1c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fcd7 	bl	8006e34 <osSemaphoreRelease>
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	200036b4 	.word	0x200036b4

08006494 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006494:	b5b0      	push	{r4, r5, r7, lr}
 8006496:	b090      	sub	sp, #64	; 0x40
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80064a0:	4b5f      	ldr	r3, [pc, #380]	; (8006620 <low_level_init+0x18c>)
 80064a2:	4a60      	ldr	r2, [pc, #384]	; (8006624 <low_level_init+0x190>)
 80064a4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 80064a6:	4b5e      	ldr	r3, [pc, #376]	; (8006620 <low_level_init+0x18c>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80064ac:	4b5c      	ldr	r3, [pc, #368]	; (8006620 <low_level_init+0x18c>)
 80064ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064b2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80064b4:	4b5a      	ldr	r3, [pc, #360]	; (8006620 <low_level_init+0x18c>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80064ba:	4b59      	ldr	r3, [pc, #356]	; (8006620 <low_level_init+0x18c>)
 80064bc:	2200      	movs	r2, #0
 80064be:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80064c0:	2300      	movs	r3, #0
 80064c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80064c6:	2380      	movs	r3, #128	; 0x80
 80064c8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80064cc:	23e1      	movs	r3, #225	; 0xe1
 80064ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80064d2:	2300      	movs	r3, #0
 80064d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80064d8:	2300      	movs	r3, #0
 80064da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80064de:	2300      	movs	r3, #0
 80064e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80064e4:	4a4e      	ldr	r2, [pc, #312]	; (8006620 <low_level_init+0x18c>)
 80064e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064ea:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80064ec:	4b4c      	ldr	r3, [pc, #304]	; (8006620 <low_level_init+0x18c>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80064f2:	4b4b      	ldr	r3, [pc, #300]	; (8006620 <low_level_init+0x18c>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80064f8:	4b49      	ldr	r3, [pc, #292]	; (8006620 <low_level_init+0x18c>)
 80064fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80064fe:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006500:	4847      	ldr	r0, [pc, #284]	; (8006620 <low_level_init+0x18c>)
 8006502:	f7fc fbb5 	bl	8002c70 <HAL_ETH_Init>
 8006506:	4603      	mov	r3, r0
 8006508:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800650c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006510:	2b00      	cmp	r3, #0
 8006512:	d108      	bne.n	8006526 <low_level_init+0x92>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800651a:	f043 0304 	orr.w	r3, r3, #4
 800651e:	b2da      	uxtb	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006526:	2304      	movs	r3, #4
 8006528:	4a3f      	ldr	r2, [pc, #252]	; (8006628 <low_level_init+0x194>)
 800652a:	4940      	ldr	r1, [pc, #256]	; (800662c <low_level_init+0x198>)
 800652c:	483c      	ldr	r0, [pc, #240]	; (8006620 <low_level_init+0x18c>)
 800652e:	f7fc fd39 	bl	8002fa4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006532:	2304      	movs	r3, #4
 8006534:	4a3e      	ldr	r2, [pc, #248]	; (8006630 <low_level_init+0x19c>)
 8006536:	493f      	ldr	r1, [pc, #252]	; (8006634 <low_level_init+0x1a0>)
 8006538:	4839      	ldr	r0, [pc, #228]	; (8006620 <low_level_init+0x18c>)
 800653a:	f7fc fd9b 	bl	8003074 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2206      	movs	r2, #6
 8006542:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006546:	4b36      	ldr	r3, [pc, #216]	; (8006620 <low_level_init+0x18c>)
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	781a      	ldrb	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006552:	4b33      	ldr	r3, [pc, #204]	; (8006620 <low_level_init+0x18c>)
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	785a      	ldrb	r2, [r3, #1]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800655e:	4b30      	ldr	r3, [pc, #192]	; (8006620 <low_level_init+0x18c>)
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	789a      	ldrb	r2, [r3, #2]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800656a:	4b2d      	ldr	r3, [pc, #180]	; (8006620 <low_level_init+0x18c>)
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	78da      	ldrb	r2, [r3, #3]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006576:	4b2a      	ldr	r3, [pc, #168]	; (8006620 <low_level_init+0x18c>)
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	791a      	ldrb	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006582:	4b27      	ldr	r3, [pc, #156]	; (8006620 <low_level_init+0x18c>)
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	795a      	ldrb	r2, [r3, #5]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006594:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800659c:	f043 030a 	orr.w	r3, r3, #10
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80065a8:	2300      	movs	r3, #0
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ac:	2300      	movs	r3, #0
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80065b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065b4:	2101      	movs	r1, #1
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fbbc 	bl	8006d34 <osSemaphoreCreate>
 80065bc:	4603      	mov	r3, r0
 80065be:	4a1e      	ldr	r2, [pc, #120]	; (8006638 <low_level_init+0x1a4>)
 80065c0:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80065c2:	4b1e      	ldr	r3, [pc, #120]	; (800663c <low_level_init+0x1a8>)
 80065c4:	f107 040c 	add.w	r4, r7, #12
 80065c8:	461d      	mov	r5, r3
 80065ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80065d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80065d6:	f107 030c 	add.w	r3, r7, #12
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 faac 	bl	8006b3a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80065e2:	480f      	ldr	r0, [pc, #60]	; (8006620 <low_level_init+0x18c>)
 80065e4:	f7fd f86a 	bl	80036bc <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80065e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065ec:	461a      	mov	r2, r3
 80065ee:	211d      	movs	r1, #29
 80065f0:	480b      	ldr	r0, [pc, #44]	; (8006620 <low_level_init+0x18c>)
 80065f2:	f7fc ff95 	bl	8003520 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	f043 030b 	orr.w	r3, r3, #11
 80065fc:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80065fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006600:	461a      	mov	r2, r3
 8006602:	211d      	movs	r1, #29
 8006604:	4806      	ldr	r0, [pc, #24]	; (8006620 <low_level_init+0x18c>)
 8006606:	f7fc fff3 	bl	80035f0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800660a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800660e:	461a      	mov	r2, r3
 8006610:	211d      	movs	r1, #29
 8006612:	4803      	ldr	r0, [pc, #12]	; (8006620 <low_level_init+0x18c>)
 8006614:	f7fc ff84 	bl	8003520 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006618:	bf00      	nop
 800661a:	3740      	adds	r7, #64	; 0x40
 800661c:	46bd      	mov	sp, r7
 800661e:	bdb0      	pop	{r4, r5, r7, pc}
 8006620:	200036b8 	.word	0x200036b8
 8006624:	40028000 	.word	0x40028000
 8006628:	20001ee4 	.word	0x20001ee4
 800662c:	20000694 	.word	0x20000694
 8006630:	20000714 	.word	0x20000714
 8006634:	20000614 	.word	0x20000614
 8006638:	200036b4 	.word	0x200036b4
 800663c:	08017f90 	.word	0x08017f90

08006640 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08a      	sub	sp, #40	; 0x28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800664a:	4b4b      	ldr	r3, [pc, #300]	; (8006778 <low_level_output+0x138>)
 800664c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006662:	4b45      	ldr	r3, [pc, #276]	; (8006778 <low_level_output+0x138>)
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006668:	2300      	movs	r3, #0
 800666a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	623b      	str	r3, [r7, #32]
 8006670:	e05a      	b.n	8006728 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da03      	bge.n	8006682 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800667a:	23f8      	movs	r3, #248	; 0xf8
 800667c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006680:	e05c      	b.n	800673c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	895b      	ldrh	r3, [r3, #10]
 8006686:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800668c:	e02f      	b.n	80066ee <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	18d0      	adds	r0, r2, r3
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	18d1      	adds	r1, r2, r3
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80066a2:	3304      	adds	r3, #4
 80066a4:	461a      	mov	r2, r3
 80066a6:	f010 fc5d 	bl	8016f64 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	da03      	bge.n	80066c0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80066b8:	23f8      	movs	r3, #248	; 0xf8
 80066ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80066be:	e03d      	b.n	800673c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80066d0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80066dc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80066e8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4413      	add	r3, r2
 80066f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d8c8      	bhi.n	800668e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	18d0      	adds	r0, r2, r3
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4413      	add	r3, r2
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4619      	mov	r1, r3
 800670e:	f010 fc29 	bl	8016f64 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	623b      	str	r3, [r7, #32]
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1a1      	bne.n	8006672 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800672e:	6979      	ldr	r1, [r7, #20]
 8006730:	4811      	ldr	r0, [pc, #68]	; (8006778 <low_level_output+0x138>)
 8006732:	f7fc fd0b 	bl	800314c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800673c:	4b0e      	ldr	r3, [pc, #56]	; (8006778 <low_level_output+0x138>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00d      	beq.n	800676a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800674e:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <low_level_output+0x138>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006756:	461a      	mov	r2, r3
 8006758:	2320      	movs	r3, #32
 800675a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800675c:	4b06      	ldr	r3, [pc, #24]	; (8006778 <low_level_output+0x138>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006764:	461a      	mov	r2, r3
 8006766:	2300      	movs	r3, #0
 8006768:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800676a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800676e:	4618      	mov	r0, r3
 8006770:	3728      	adds	r7, #40	; 0x28
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	200036b8 	.word	0x200036b8

0800677c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08c      	sub	sp, #48	; 0x30
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006784:	2300      	movs	r3, #0
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006788:	2300      	movs	r3, #0
 800678a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80067a0:	484e      	ldr	r0, [pc, #312]	; (80068dc <low_level_input+0x160>)
 80067a2:	f7fc fdbd 	bl	8003320 <HAL_ETH_GetReceivedFrame_IT>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <low_level_input+0x34>

    return NULL;
 80067ac:	2300      	movs	r3, #0
 80067ae:	e091      	b.n	80068d4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80067b0:	4b4a      	ldr	r3, [pc, #296]	; (80068dc <low_level_input+0x160>)
 80067b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80067b6:	4b49      	ldr	r3, [pc, #292]	; (80068dc <low_level_input+0x160>)
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80067bc:	89fb      	ldrh	r3, [r7, #14]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80067c2:	89fb      	ldrh	r3, [r7, #14]
 80067c4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80067c8:	4619      	mov	r1, r3
 80067ca:	2000      	movs	r0, #0
 80067cc:	f006 fa42 	bl	800cc54 <pbuf_alloc>
 80067d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d04b      	beq.n	8006870 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80067d8:	4b40      	ldr	r3, [pc, #256]	; (80068dc <low_level_input+0x160>)
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e6:	e040      	b.n	800686a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	895b      	ldrh	r3, [r3, #10]
 80067ec:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80067f2:	e021      	b.n	8006838 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	18d0      	adds	r0, r2, r3
 80067fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	18d1      	adds	r1, r2, r3
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006808:	3304      	adds	r3, #4
 800680a:	461a      	mov	r2, r3
 800680c:	f010 fbaa 	bl	8016f64 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	4413      	add	r3, r2
 8006822:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006826:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006832:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006842:	4293      	cmp	r3, r2
 8006844:	d8d6      	bhi.n	80067f4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	18d0      	adds	r0, r2, r3
 800684e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	4413      	add	r3, r2
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4619      	mov	r1, r3
 8006858:	f010 fb84 	bl	8016f64 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	4413      	add	r3, r2
 8006862:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1bb      	bne.n	80067e8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006870:	4b1a      	ldr	r3, [pc, #104]	; (80068dc <low_level_input+0x160>)
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006876:	2300      	movs	r3, #0
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	e00b      	b.n	8006894 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	3301      	adds	r3, #1
 8006892:	613b      	str	r3, [r7, #16]
 8006894:	4b11      	ldr	r3, [pc, #68]	; (80068dc <low_level_input+0x160>)
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	429a      	cmp	r2, r3
 800689c:	d3ee      	bcc.n	800687c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800689e:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <low_level_input+0x160>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80068a4:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <low_level_input+0x160>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00d      	beq.n	80068d2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80068b6:	4b09      	ldr	r3, [pc, #36]	; (80068dc <low_level_input+0x160>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068be:	461a      	mov	r2, r3
 80068c0:	2380      	movs	r3, #128	; 0x80
 80068c2:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <low_level_input+0x160>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068cc:	461a      	mov	r2, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	6093      	str	r3, [r2, #8]
  }
  return p;
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3730      	adds	r7, #48	; 0x30
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	200036b8 	.word	0x200036b8

080068e0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80068ec:	4b12      	ldr	r3, [pc, #72]	; (8006938 <ethernetif_input+0x58>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f04f 31ff 	mov.w	r1, #4294967295
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fa4f 	bl	8006d98 <osSemaphoreWait>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1f5      	bne.n	80068ec <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006900:	480e      	ldr	r0, [pc, #56]	; (800693c <ethernetif_input+0x5c>)
 8006902:	f010 f99d 	bl	8016c40 <sys_mutex_lock>
        p = low_level_input( netif );
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff ff38 	bl	800677c <low_level_input>
 800690c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	68f9      	ldr	r1, [r7, #12]
 800691a:	68b8      	ldr	r0, [r7, #8]
 800691c:	4798      	blx	r3
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8006924:	68b8      	ldr	r0, [r7, #8]
 8006926:	f006 fc79 	bl	800d21c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800692a:	4804      	ldr	r0, [pc, #16]	; (800693c <ethernetif_input+0x5c>)
 800692c:	f010 f997 	bl	8016c5e <sys_mutex_unlock>
      } while(p!=NULL);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e4      	bne.n	8006900 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006936:	e7d9      	b.n	80068ec <ethernetif_input+0xc>
 8006938:	200036b4 	.word	0x200036b4
 800693c:	20009bb0 	.word	0x20009bb0

08006940 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <ethernetif_init+0x1c>
 800694e:	4b0e      	ldr	r3, [pc, #56]	; (8006988 <ethernetif_init+0x48>)
 8006950:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8006954:	490d      	ldr	r1, [pc, #52]	; (800698c <ethernetif_init+0x4c>)
 8006956:	480e      	ldr	r0, [pc, #56]	; (8006990 <ethernetif_init+0x50>)
 8006958:	f010 fbfa 	bl	8017150 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2273      	movs	r2, #115	; 0x73
 8006960:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2274      	movs	r2, #116	; 0x74
 8006968:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a09      	ldr	r2, [pc, #36]	; (8006994 <ethernetif_init+0x54>)
 8006970:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a08      	ldr	r2, [pc, #32]	; (8006998 <ethernetif_init+0x58>)
 8006976:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fd8b 	bl	8006494 <low_level_init>

  return ERR_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	08017fac 	.word	0x08017fac
 800698c:	08017fc8 	.word	0x08017fc8
 8006990:	08017fd8 	.word	0x08017fd8
 8006994:	08014c49 	.word	0x08014c49
 8006998:	08006641 	.word	0x08006641

0800699c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80069a0:	f7fb fcd8 	bl	8002354 <HAL_GetTick>
 80069a4:	4603      	mov	r3, r0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069c2:	089b      	lsrs	r3, r3, #2
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d05d      	beq.n	8006a8a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80069ce:	4b34      	ldr	r3, [pc, #208]	; (8006aa0 <ethernetif_update_config+0xf4>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d03f      	beq.n	8006a56 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80069d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069da:	2100      	movs	r1, #0
 80069dc:	4830      	ldr	r0, [pc, #192]	; (8006aa0 <ethernetif_update_config+0xf4>)
 80069de:	f7fc fe07 	bl	80035f0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80069e2:	f7fb fcb7 	bl	8002354 <HAL_GetTick>
 80069e6:	4603      	mov	r3, r0
 80069e8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80069ea:	f107 0308 	add.w	r3, r7, #8
 80069ee:	461a      	mov	r2, r3
 80069f0:	2101      	movs	r1, #1
 80069f2:	482b      	ldr	r0, [pc, #172]	; (8006aa0 <ethernetif_update_config+0xf4>)
 80069f4:	f7fc fd94 	bl	8003520 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80069f8:	f7fb fcac 	bl	8002354 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a06:	d828      	bhi.n	8006a5a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0eb      	beq.n	80069ea <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006a12:	f107 0308 	add.w	r3, r7, #8
 8006a16:	461a      	mov	r2, r3
 8006a18:	2110      	movs	r1, #16
 8006a1a:	4821      	ldr	r0, [pc, #132]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a1c:	f7fc fd80 	bl	8003520 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006a2a:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a30:	60da      	str	r2, [r3, #12]
 8006a32:	e002      	b.n	8006a3a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006a34:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006a44:	4b16      	ldr	r3, [pc, #88]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	609a      	str	r2, [r3, #8]
 8006a4a:	e016      	b.n	8006a7a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006a4c:	4b14      	ldr	r3, [pc, #80]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a52:	609a      	str	r2, [r3, #8]
 8006a54:	e011      	b.n	8006a7a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006a56:	bf00      	nop
 8006a58:	e000      	b.n	8006a5c <ethernetif_update_config+0xb0>
          goto error;
 8006a5a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006a5c:	4b10      	ldr	r3, [pc, #64]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	08db      	lsrs	r3, r3, #3
 8006a62:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006a64:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	085b      	lsrs	r3, r3, #1
 8006a6a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	2100      	movs	r1, #0
 8006a74:	480a      	ldr	r0, [pc, #40]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a76:	f7fc fdbb 	bl	80035f0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	4808      	ldr	r0, [pc, #32]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a7e:	f7fc fe7b 	bl	8003778 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006a82:	4807      	ldr	r0, [pc, #28]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a84:	f7fc fe1a 	bl	80036bc <HAL_ETH_Start>
 8006a88:	e002      	b.n	8006a90 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006a8a:	4805      	ldr	r0, [pc, #20]	; (8006aa0 <ethernetif_update_config+0xf4>)
 8006a8c:	f7fc fe45 	bl	800371a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f807 	bl	8006aa4 <ethernetif_notify_conn_changed>
}
 8006a96:	bf00      	nop
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	200036b8 	.word	0x200036b8

08006aa4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006aca:	2b84      	cmp	r3, #132	; 0x84
 8006acc:	d005      	beq.n	8006ada <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006ace:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	3303      	adds	r3, #3
 8006ad8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006ada:	68fb      	ldr	r3, [r7, #12]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aee:	f3ef 8305 	mrs	r3, IPSR
 8006af2:	607b      	str	r3, [r7, #4]
  return(result);
 8006af4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bf14      	ite	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	2300      	moveq	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006b10:	f001 fd3c 	bl	800858c <vTaskStartScheduler>
  
  return osOK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006b1e:	f7ff ffe3 	bl	8006ae8 <inHandlerMode>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006b28:	f001 fe54 	bl	80087d4 <xTaskGetTickCountFromISR>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	e002      	b.n	8006b36 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006b30:	f001 fe40 	bl	80087b4 <xTaskGetTickCount>
 8006b34:	4603      	mov	r3, r0
  }
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b3c:	b089      	sub	sp, #36	; 0x24
 8006b3e:	af04      	add	r7, sp, #16
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d020      	beq.n	8006b8e <osThreadCreate+0x54>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01c      	beq.n	8006b8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685c      	ldr	r4, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681d      	ldr	r5, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	691e      	ldr	r6, [r3, #16]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7ff ffa6 	bl	8006ab8 <makeFreeRtosPriority>
 8006b6c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b76:	9202      	str	r2, [sp, #8]
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	9100      	str	r1, [sp, #0]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	4632      	mov	r2, r6
 8006b80:	4629      	mov	r1, r5
 8006b82:	4620      	mov	r0, r4
 8006b84:	f001 fb24 	bl	80081d0 <xTaskCreateStatic>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	e01c      	b.n	8006bc8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685c      	ldr	r4, [r3, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b9a:	b29e      	uxth	r6, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff ff88 	bl	8006ab8 <makeFreeRtosPriority>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	f107 030c 	add.w	r3, r7, #12
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	9200      	str	r2, [sp, #0]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	4632      	mov	r2, r6
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f001 fb66 	bl	800828a <xTaskCreate>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d001      	beq.n	8006bc8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	e000      	b.n	8006bca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006bd2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <osDelay+0x16>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	e000      	b.n	8006bea <osDelay+0x18>
 8006be8:	2301      	movs	r3, #1
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 fc9a 	bl	8008524 <vTaskDelay>
  
  return osOK;
 8006bf0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d007      	beq.n	8006c1a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	2001      	movs	r0, #1
 8006c12:	f000 fc7e 	bl	8007512 <xQueueCreateMutexStatic>
 8006c16:	4603      	mov	r3, r0
 8006c18:	e003      	b.n	8006c22 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	f000 fc61 	bl	80074e2 <xQueueCreateMutex>
 8006c20:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006c36:	2300      	movs	r3, #0
 8006c38:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <osMutexWait+0x18>
    return osErrorParameter;
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	e03a      	b.n	8006cba <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4e:	d103      	bne.n	8006c58 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006c50:	f04f 33ff 	mov.w	r3, #4294967295
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	e009      	b.n	8006c6c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d006      	beq.n	8006c6c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <osMutexWait+0x40>
      ticks = 1;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006c6c:	f7ff ff3c 	bl	8006ae8 <inHandlerMode>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d017      	beq.n	8006ca6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006c76:	f107 0308 	add.w	r3, r7, #8
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 f874 	bl	8007d6c <xQueueReceiveFromISR>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d001      	beq.n	8006c8e <osMutexWait+0x62>
      return osErrorOS;
 8006c8a:	23ff      	movs	r3, #255	; 0xff
 8006c8c:	e015      	b.n	8006cba <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d011      	beq.n	8006cb8 <osMutexWait+0x8c>
 8006c94:	4b0b      	ldr	r3, [pc, #44]	; (8006cc4 <osMutexWait+0x98>)
 8006c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	e008      	b.n	8006cb8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 ff53 	bl	8007b54 <xQueueSemaphoreTake>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d001      	beq.n	8006cb8 <osMutexWait+0x8c>
    return osErrorOS;
 8006cb4:	23ff      	movs	r3, #255	; 0xff
 8006cb6:	e000      	b.n	8006cba <osMutexWait+0x8e>
  }
  
  return osOK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006cd8:	f7ff ff06 	bl	8006ae8 <inHandlerMode>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d016      	beq.n	8006d10 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006ce2:	f107 0308 	add.w	r3, r7, #8
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fdc6 	bl	800787a <xQueueGiveFromISR>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d001      	beq.n	8006cf8 <osMutexRelease+0x30>
      return osErrorOS;
 8006cf4:	23ff      	movs	r3, #255	; 0xff
 8006cf6:	e017      	b.n	8006d28 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d013      	beq.n	8006d26 <osMutexRelease+0x5e>
 8006cfe:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <osMutexRelease+0x68>)
 8006d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	e00a      	b.n	8006d26 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006d10:	2300      	movs	r3, #0
 8006d12:	2200      	movs	r2, #0
 8006d14:	2100      	movs	r1, #0
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fc16 	bl	8007548 <xQueueGenericSend>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d001      	beq.n	8006d26 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006d22:	23ff      	movs	r3, #255	; 0xff
 8006d24:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006d26:	68fb      	ldr	r3, [r7, #12]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	e000ed04 	.word	0xe000ed04

08006d34 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00f      	beq.n	8006d66 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d10a      	bne.n	8006d62 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2203      	movs	r2, #3
 8006d52:	9200      	str	r2, [sp, #0]
 8006d54:	2200      	movs	r2, #0
 8006d56:	2100      	movs	r1, #0
 8006d58:	2001      	movs	r0, #1
 8006d5a:	f000 fad7 	bl	800730c <xQueueGenericCreateStatic>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	e016      	b.n	8006d90 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e014      	b.n	8006d90 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d110      	bne.n	8006d8e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	2100      	movs	r1, #0
 8006d70:	2001      	movs	r0, #1
 8006d72:	f000 fb43 	bl	80073fc <xQueueGenericCreate>
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d005      	beq.n	8006d8a <osSemaphoreCreate+0x56>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	2200      	movs	r2, #0
 8006d82:	2100      	movs	r1, #0
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 fbdf 	bl	8007548 <xQueueGenericSend>
      return sema;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	e000      	b.n	8006d90 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006d8e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006da2:	2300      	movs	r3, #0
 8006da4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006dac:	2380      	movs	r3, #128	; 0x80
 8006dae:	e03a      	b.n	8006e26 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d103      	bne.n	8006dc4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	e009      	b.n	8006dd8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d006      	beq.n	8006dd8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <osSemaphoreWait+0x40>
      ticks = 1;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006dd8:	f7ff fe86 	bl	8006ae8 <inHandlerMode>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d017      	beq.n	8006e12 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006de2:	f107 0308 	add.w	r3, r7, #8
 8006de6:	461a      	mov	r2, r3
 8006de8:	2100      	movs	r1, #0
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 ffbe 	bl	8007d6c <xQueueReceiveFromISR>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d001      	beq.n	8006dfa <osSemaphoreWait+0x62>
      return osErrorOS;
 8006df6:	23ff      	movs	r3, #255	; 0xff
 8006df8:	e015      	b.n	8006e26 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d011      	beq.n	8006e24 <osSemaphoreWait+0x8c>
 8006e00:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <osSemaphoreWait+0x98>)
 8006e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	e008      	b.n	8006e24 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006e12:	68f9      	ldr	r1, [r7, #12]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fe9d 	bl	8007b54 <xQueueSemaphoreTake>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d001      	beq.n	8006e24 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006e20:	23ff      	movs	r3, #255	; 0xff
 8006e22:	e000      	b.n	8006e26 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	e000ed04 	.word	0xe000ed04

08006e34 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006e40:	2300      	movs	r3, #0
 8006e42:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006e44:	f7ff fe50 	bl	8006ae8 <inHandlerMode>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d016      	beq.n	8006e7c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006e4e:	f107 0308 	add.w	r3, r7, #8
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fd10 	bl	800787a <xQueueGiveFromISR>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d001      	beq.n	8006e64 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006e60:	23ff      	movs	r3, #255	; 0xff
 8006e62:	e017      	b.n	8006e94 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d013      	beq.n	8006e92 <osSemaphoreRelease+0x5e>
 8006e6a:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <osSemaphoreRelease+0x68>)
 8006e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	e00a      	b.n	8006e92 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2100      	movs	r1, #0
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fb60 	bl	8007548 <xQueueGenericSend>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d001      	beq.n	8006e92 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006e8e:	23ff      	movs	r3, #255	; 0xff
 8006e90:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006e92:	68fb      	ldr	r3, [r7, #12]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	e000ed04 	.word	0xe000ed04

08006ea0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006ea8:	f7ff fe1e 	bl	8006ae8 <inHandlerMode>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8006eb2:	2382      	movs	r3, #130	; 0x82
 8006eb4:	e003      	b.n	8006ebe <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 f814 	bl	8007ee4 <vQueueDelete>

  return osOK; 
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006ec6:	b590      	push	{r4, r7, lr}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af02      	add	r7, sp, #8
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d011      	beq.n	8006efc <osMessageCreate+0x36>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00d      	beq.n	8006efc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6818      	ldr	r0, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6859      	ldr	r1, [r3, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	2400      	movs	r4, #0
 8006ef2:	9400      	str	r4, [sp, #0]
 8006ef4:	f000 fa0a 	bl	800730c <xQueueGenericCreateStatic>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	e008      	b.n	8006f0e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	4619      	mov	r1, r3
 8006f08:	f000 fa78 	bl	80073fc <xQueueGenericCreate>
 8006f0c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd90      	pop	{r4, r7, pc}
	...

08006f18 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006f24:	2300      	movs	r3, #0
 8006f26:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <osMessagePut+0x1e>
    ticks = 1;
 8006f32:	2301      	movs	r3, #1
 8006f34:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006f36:	f7ff fdd7 	bl	8006ae8 <inHandlerMode>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d018      	beq.n	8006f72 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006f40:	f107 0210 	add.w	r2, r7, #16
 8006f44:	f107 0108 	add.w	r1, r7, #8
 8006f48:	2300      	movs	r3, #0
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 fbfa 	bl	8007744 <xQueueGenericSendFromISR>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d001      	beq.n	8006f5a <osMessagePut+0x42>
      return osErrorOS;
 8006f56:	23ff      	movs	r3, #255	; 0xff
 8006f58:	e018      	b.n	8006f8c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d014      	beq.n	8006f8a <osMessagePut+0x72>
 8006f60:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <osMessagePut+0x7c>)
 8006f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	e00b      	b.n	8006f8a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006f72:	f107 0108 	add.w	r1, r7, #8
 8006f76:	2300      	movs	r3, #0
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fae4 	bl	8007548 <xQueueGenericSend>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d001      	beq.n	8006f8a <osMessagePut+0x72>
      return osErrorOS;
 8006f86:	23ff      	movs	r3, #255	; 0xff
 8006f88:	e000      	b.n	8006f8c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	e000ed04 	.word	0xe000ed04

08006f98 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006f98:	b590      	push	{r4, r7, lr}
 8006f9a:	b08b      	sub	sp, #44	; 0x2c
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10a      	bne.n	8006fc8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006fb2:	2380      	movs	r3, #128	; 0x80
 8006fb4:	617b      	str	r3, [r7, #20]
    return event;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	461c      	mov	r4, r3
 8006fba:	f107 0314 	add.w	r3, r7, #20
 8006fbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006fc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006fc6:	e054      	b.n	8007072 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd6:	d103      	bne.n	8006fe0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8006fde:	e009      	b.n	8006ff4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d006      	beq.n	8006ff4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <osMessageGet+0x5c>
      ticks = 1;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006ff4:	f7ff fd78 	bl	8006ae8 <inHandlerMode>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d01c      	beq.n	8007038 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006ffe:	f107 0220 	add.w	r2, r7, #32
 8007002:	f107 0314 	add.w	r3, r7, #20
 8007006:	3304      	adds	r3, #4
 8007008:	4619      	mov	r1, r3
 800700a:	68b8      	ldr	r0, [r7, #8]
 800700c:	f000 feae 	bl	8007d6c <xQueueReceiveFromISR>
 8007010:	4603      	mov	r3, r0
 8007012:	2b01      	cmp	r3, #1
 8007014:	d102      	bne.n	800701c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007016:	2310      	movs	r3, #16
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	e001      	b.n	8007020 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800701c:	2300      	movs	r3, #0
 800701e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01d      	beq.n	8007062 <osMessageGet+0xca>
 8007026:	4b15      	ldr	r3, [pc, #84]	; (800707c <osMessageGet+0xe4>)
 8007028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	e014      	b.n	8007062 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007038:	f107 0314 	add.w	r3, r7, #20
 800703c:	3304      	adds	r3, #4
 800703e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007040:	4619      	mov	r1, r3
 8007042:	68b8      	ldr	r0, [r7, #8]
 8007044:	f000 fca6 	bl	8007994 <xQueueReceive>
 8007048:	4603      	mov	r3, r0
 800704a:	2b01      	cmp	r3, #1
 800704c:	d102      	bne.n	8007054 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800704e:	2310      	movs	r3, #16
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	e006      	b.n	8007062 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <osMessageGet+0xc6>
 800705a:	2300      	movs	r3, #0
 800705c:	e000      	b.n	8007060 <osMessageGet+0xc8>
 800705e:	2340      	movs	r3, #64	; 0x40
 8007060:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	461c      	mov	r4, r3
 8007066:	f107 0314 	add.w	r3, r7, #20
 800706a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800706e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	372c      	adds	r7, #44	; 0x2c
 8007076:	46bd      	mov	sp, r7
 8007078:	bd90      	pop	{r4, r7, pc}
 800707a:	bf00      	nop
 800707c:	e000ed04 	.word	0xe000ed04

08007080 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007088:	f7ff fd2e 	bl	8006ae8 <inHandlerMode>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d004      	beq.n	800709c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 ff08 	bl	8007ea8 <uxQueueMessagesWaitingFromISR>
 8007098:	4603      	mov	r3, r0
 800709a:	e003      	b.n	80070a4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fee5 	bl	8007e6c <uxQueueMessagesWaiting>
 80070a2:	4603      	mov	r3, r0
  }
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80070b4:	f7ff fd18 	bl	8006ae8 <inHandlerMode>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <osMessageDelete+0x16>
    return osErrorISR;
 80070be:	2382      	movs	r3, #130	; 0x82
 80070c0:	e003      	b.n	80070ca <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 ff0e 	bl	8007ee4 <vQueueDelete>

  return osOK; 
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f103 0208 	add.w	r2, r3, #8
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f103 0208 	add.w	r2, r3, #8
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f103 0208 	add.w	r2, r3, #8
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	601a      	str	r2, [r3, #0]
}
 8007168:	bf00      	nop
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718a:	d103      	bne.n	8007194 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e00c      	b.n	80071ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3308      	adds	r3, #8
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e002      	b.n	80071a2 <vListInsert+0x2e>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d2f6      	bcs.n	800719c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	601a      	str	r2, [r3, #0]
}
 80071da:	bf00      	nop
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6892      	ldr	r2, [r2, #8]
 80071fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6852      	ldr	r2, [r2, #4]
 8007206:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	429a      	cmp	r2, r3
 8007210:	d103      	bne.n	800721a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	1e5a      	subs	r2, r3, #1
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
	...

0800723c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <xQueueGenericReset+0x2a>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	60bb      	str	r3, [r7, #8]
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007266:	f002 f915 	bl	8009494 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007272:	68f9      	ldr	r1, [r7, #12]
 8007274:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	441a      	add	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007296:	3b01      	subs	r3, #1
 8007298:	68f9      	ldr	r1, [r7, #12]
 800729a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800729c:	fb01 f303 	mul.w	r3, r1, r3
 80072a0:	441a      	add	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	22ff      	movs	r2, #255	; 0xff
 80072aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	22ff      	movs	r2, #255	; 0xff
 80072b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d114      	bne.n	80072e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01a      	beq.n	80072fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3310      	adds	r3, #16
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 fbd3 	bl	8008a74 <xTaskRemoveFromEventList>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d012      	beq.n	80072fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072d4:	4b0c      	ldr	r3, [pc, #48]	; (8007308 <xQueueGenericReset+0xcc>)
 80072d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	e009      	b.n	80072fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3310      	adds	r3, #16
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff fef1 	bl	80070d2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3324      	adds	r3, #36	; 0x24
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff feec 	bl	80070d2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072fa:	f002 f8fb 	bl	80094f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072fe:	2301      	movs	r3, #1
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08e      	sub	sp, #56	; 0x38
 8007310:	af02      	add	r7, sp, #8
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <xQueueGenericCreateStatic+0x52>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <xQueueGenericCreateStatic+0x56>
 800735e:	2301      	movs	r3, #1
 8007360:	e000      	b.n	8007364 <xQueueGenericCreateStatic+0x58>
 8007362:	2300      	movs	r3, #0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	623b      	str	r3, [r7, #32]
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <xQueueGenericCreateStatic+0x7e>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <xQueueGenericCreateStatic+0x82>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <xQueueGenericCreateStatic+0x84>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	61fb      	str	r3, [r7, #28]
}
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073aa:	2348      	movs	r3, #72	; 0x48
 80073ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b48      	cmp	r3, #72	; 0x48
 80073b2:	d00a      	beq.n	80073ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	61bb      	str	r3, [r7, #24]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00d      	beq.n	80073f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	4613      	mov	r3, r2
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 f83f 	bl	8007470 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3730      	adds	r7, #48	; 0x30
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08a      	sub	sp, #40	; 0x28
 8007400:	af02      	add	r7, sp, #8
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	4613      	mov	r3, r2
 8007408:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	3348      	adds	r3, #72	; 0x48
 8007434:	4618      	mov	r0, r3
 8007436:	f002 f94f 	bl	80096d8 <pvPortMalloc>
 800743a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d011      	beq.n	8007466 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	3348      	adds	r3, #72	; 0x48
 800744a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007454:	79fa      	ldrb	r2, [r7, #7]
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	4613      	mov	r3, r2
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	68b9      	ldr	r1, [r7, #8]
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f805 	bl	8007470 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007466:	69bb      	ldr	r3, [r7, #24]
	}
 8007468:	4618      	mov	r0, r3
 800746a:	3720      	adds	r7, #32
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d103      	bne.n	800748c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	e002      	b.n	8007492 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800749e:	2101      	movs	r1, #1
 80074a0:	69b8      	ldr	r0, [r7, #24]
 80074a2:	f7ff fecb 	bl	800723c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074a6:	bf00      	nop
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00e      	beq.n	80074da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80074ce:	2300      	movs	r3, #0
 80074d0:	2200      	movs	r2, #0
 80074d2:	2100      	movs	r1, #0
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f837 	bl	8007548 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80074da:	bf00      	nop
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b086      	sub	sp, #24
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	4603      	mov	r3, r0
 80074ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80074ec:	2301      	movs	r3, #1
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	2300      	movs	r3, #0
 80074f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	461a      	mov	r2, r3
 80074f8:	6939      	ldr	r1, [r7, #16]
 80074fa:	6978      	ldr	r0, [r7, #20]
 80074fc:	f7ff ff7e 	bl	80073fc <xQueueGenericCreate>
 8007500:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f7ff ffd3 	bl	80074ae <prvInitialiseMutex>

		return xNewQueue;
 8007508:	68fb      	ldr	r3, [r7, #12]
	}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007512:	b580      	push	{r7, lr}
 8007514:	b088      	sub	sp, #32
 8007516:	af02      	add	r7, sp, #8
 8007518:	4603      	mov	r3, r0
 800751a:	6039      	str	r1, [r7, #0]
 800751c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800751e:	2301      	movs	r3, #1
 8007520:	617b      	str	r3, [r7, #20]
 8007522:	2300      	movs	r3, #0
 8007524:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2200      	movs	r2, #0
 800752e:	6939      	ldr	r1, [r7, #16]
 8007530:	6978      	ldr	r0, [r7, #20]
 8007532:	f7ff feeb 	bl	800730c <xQueueGenericCreateStatic>
 8007536:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f7ff ffb8 	bl	80074ae <prvInitialiseMutex>

		return xNewQueue;
 800753e:	68fb      	ldr	r3, [r7, #12]
	}
 8007540:	4618      	mov	r0, r3
 8007542:	3718      	adds	r7, #24
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b08e      	sub	sp, #56	; 0x38
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007556:	2300      	movs	r3, #0
 8007558:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10a      	bne.n	800757a <xQueueGenericSend+0x32>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d103      	bne.n	8007588 <xQueueGenericSend+0x40>
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <xQueueGenericSend+0x44>
 8007588:	2301      	movs	r3, #1
 800758a:	e000      	b.n	800758e <xQueueGenericSend+0x46>
 800758c:	2300      	movs	r3, #0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <xQueueGenericSend+0x60>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d103      	bne.n	80075b6 <xQueueGenericSend+0x6e>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d101      	bne.n	80075ba <xQueueGenericSend+0x72>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e000      	b.n	80075bc <xQueueGenericSend+0x74>
 80075ba:	2300      	movs	r3, #0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	623b      	str	r3, [r7, #32]
}
 80075d2:	bf00      	nop
 80075d4:	e7fe      	b.n	80075d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075d6:	f001 fc0d 	bl	8008df4 <xTaskGetSchedulerState>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d102      	bne.n	80075e6 <xQueueGenericSend+0x9e>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <xQueueGenericSend+0xa2>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <xQueueGenericSend+0xa4>
 80075ea:	2300      	movs	r3, #0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10a      	bne.n	8007606 <xQueueGenericSend+0xbe>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	61fb      	str	r3, [r7, #28]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007606:	f001 ff45 	bl	8009494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007612:	429a      	cmp	r2, r3
 8007614:	d302      	bcc.n	800761c <xQueueGenericSend+0xd4>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d129      	bne.n	8007670 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007622:	f000 fc9a 	bl	8007f5a <prvCopyDataToQueue>
 8007626:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	d010      	beq.n	8007652 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	3324      	adds	r3, #36	; 0x24
 8007634:	4618      	mov	r0, r3
 8007636:	f001 fa1d 	bl	8008a74 <xTaskRemoveFromEventList>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d013      	beq.n	8007668 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007640:	4b3f      	ldr	r3, [pc, #252]	; (8007740 <xQueueGenericSend+0x1f8>)
 8007642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007646:	601a      	str	r2, [r3, #0]
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	e00a      	b.n	8007668 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d007      	beq.n	8007668 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007658:	4b39      	ldr	r3, [pc, #228]	; (8007740 <xQueueGenericSend+0x1f8>)
 800765a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007668:	f001 ff44 	bl	80094f4 <vPortExitCritical>
				return pdPASS;
 800766c:	2301      	movs	r3, #1
 800766e:	e063      	b.n	8007738 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d103      	bne.n	800767e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007676:	f001 ff3d 	bl	80094f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800767a:	2300      	movs	r3, #0
 800767c:	e05c      	b.n	8007738 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800767e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007680:	2b00      	cmp	r3, #0
 8007682:	d106      	bne.n	8007692 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007684:	f107 0314 	add.w	r3, r7, #20
 8007688:	4618      	mov	r0, r3
 800768a:	f001 fa55 	bl	8008b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800768e:	2301      	movs	r3, #1
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007692:	f001 ff2f 	bl	80094f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007696:	f000 ffe3 	bl	8008660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800769a:	f001 fefb 	bl	8009494 <vPortEnterCritical>
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076a4:	b25b      	sxtb	r3, r3
 80076a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076aa:	d103      	bne.n	80076b4 <xQueueGenericSend+0x16c>
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ba:	b25b      	sxtb	r3, r3
 80076bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c0:	d103      	bne.n	80076ca <xQueueGenericSend+0x182>
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076ca:	f001 ff13 	bl	80094f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076ce:	1d3a      	adds	r2, r7, #4
 80076d0:	f107 0314 	add.w	r3, r7, #20
 80076d4:	4611      	mov	r1, r2
 80076d6:	4618      	mov	r0, r3
 80076d8:	f001 fa44 	bl	8008b64 <xTaskCheckForTimeOut>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d124      	bne.n	800772c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076e4:	f000 fd31 	bl	800814a <prvIsQueueFull>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d018      	beq.n	8007720 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	3310      	adds	r3, #16
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	4611      	mov	r1, r2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 f998 	bl	8008a2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80076fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076fe:	f000 fcbc 	bl	800807a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007702:	f000 ffbb 	bl	800867c <xTaskResumeAll>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	f47f af7c 	bne.w	8007606 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800770e:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <xQueueGenericSend+0x1f8>)
 8007710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	e772      	b.n	8007606 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007722:	f000 fcaa 	bl	800807a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007726:	f000 ffa9 	bl	800867c <xTaskResumeAll>
 800772a:	e76c      	b.n	8007606 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800772c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800772e:	f000 fca4 	bl	800807a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007732:	f000 ffa3 	bl	800867c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007736:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007738:	4618      	mov	r0, r3
 800773a:	3738      	adds	r7, #56	; 0x38
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	e000ed04 	.word	0xe000ed04

08007744 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b090      	sub	sp, #64	; 0x40
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800776e:	bf00      	nop
 8007770:	e7fe      	b.n	8007770 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d103      	bne.n	8007780 <xQueueGenericSendFromISR+0x3c>
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <xQueueGenericSendFromISR+0x40>
 8007780:	2301      	movs	r3, #1
 8007782:	e000      	b.n	8007786 <xQueueGenericSendFromISR+0x42>
 8007784:	2300      	movs	r3, #0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d103      	bne.n	80077ae <xQueueGenericSendFromISR+0x6a>
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d101      	bne.n	80077b2 <xQueueGenericSendFromISR+0x6e>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <xQueueGenericSendFromISR+0x70>
 80077b2:	2300      	movs	r3, #0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	623b      	str	r3, [r7, #32]
}
 80077ca:	bf00      	nop
 80077cc:	e7fe      	b.n	80077cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077ce:	f001 ff43 	bl	8009658 <vPortValidateInterruptPriority>
	__asm volatile
 80077d2:	f3ef 8211 	mrs	r2, BASEPRI
 80077d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	61fa      	str	r2, [r7, #28]
 80077e8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80077ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d302      	bcc.n	8007800 <xQueueGenericSendFromISR+0xbc>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d12f      	bne.n	8007860 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	68b9      	ldr	r1, [r7, #8]
 8007814:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007816:	f000 fba0 	bl	8007f5a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800781a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007822:	d112      	bne.n	800784a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d016      	beq.n	800785a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800782c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782e:	3324      	adds	r3, #36	; 0x24
 8007830:	4618      	mov	r0, r3
 8007832:	f001 f91f 	bl	8008a74 <xTaskRemoveFromEventList>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00e      	beq.n	800785a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00b      	beq.n	800785a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e007      	b.n	800785a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800784a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800784e:	3301      	adds	r3, #1
 8007850:	b2db      	uxtb	r3, r3
 8007852:	b25a      	sxtb	r2, r3
 8007854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800785a:	2301      	movs	r3, #1
 800785c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800785e:	e001      	b.n	8007864 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007860:	2300      	movs	r3, #0
 8007862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007866:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f383 8811 	msr	BASEPRI, r3
}
 800786e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007872:	4618      	mov	r0, r3
 8007874:	3740      	adds	r7, #64	; 0x40
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b08e      	sub	sp, #56	; 0x38
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10a      	bne.n	80078a4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	623b      	str	r3, [r7, #32]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	61fb      	str	r3, [r7, #28]
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <xQueueGiveFromISR+0x58>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <xQueueGiveFromISR+0x5c>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <xQueueGiveFromISR+0x5e>
 80078d6:	2300      	movs	r3, #0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	61bb      	str	r3, [r7, #24]
}
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078f2:	f001 feb1 	bl	8009658 <vPortValidateInterruptPriority>
	__asm volatile
 80078f6:	f3ef 8211 	mrs	r2, BASEPRI
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	617a      	str	r2, [r7, #20]
 800790c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800790e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007910:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007916:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800791e:	429a      	cmp	r2, r3
 8007920:	d22b      	bcs.n	800797a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007932:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007934:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793c:	d112      	bne.n	8007964 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	2b00      	cmp	r3, #0
 8007944:	d016      	beq.n	8007974 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	3324      	adds	r3, #36	; 0x24
 800794a:	4618      	mov	r0, r3
 800794c:	f001 f892 	bl	8008a74 <xTaskRemoveFromEventList>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00e      	beq.n	8007974 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00b      	beq.n	8007974 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2201      	movs	r2, #1
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	e007      	b.n	8007974 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007968:	3301      	adds	r3, #1
 800796a:	b2db      	uxtb	r3, r3
 800796c:	b25a      	sxtb	r2, r3
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007974:	2301      	movs	r3, #1
 8007976:	637b      	str	r3, [r7, #52]	; 0x34
 8007978:	e001      	b.n	800797e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800797a:	2300      	movs	r3, #0
 800797c:	637b      	str	r3, [r7, #52]	; 0x34
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f383 8811 	msr	BASEPRI, r3
}
 8007988:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800798a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800798c:	4618      	mov	r0, r3
 800798e:	3738      	adds	r7, #56	; 0x38
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08c      	sub	sp, #48	; 0x30
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80079a0:	2300      	movs	r3, #0
 80079a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <xQueueReceive+0x30>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	623b      	str	r3, [r7, #32]
}
 80079c0:	bf00      	nop
 80079c2:	e7fe      	b.n	80079c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d103      	bne.n	80079d2 <xQueueReceive+0x3e>
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <xQueueReceive+0x42>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <xQueueReceive+0x44>
 80079d6:	2300      	movs	r3, #0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10a      	bne.n	80079f2 <xQueueReceive+0x5e>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	61fb      	str	r3, [r7, #28]
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079f2:	f001 f9ff 	bl	8008df4 <xTaskGetSchedulerState>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d102      	bne.n	8007a02 <xQueueReceive+0x6e>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <xQueueReceive+0x72>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e000      	b.n	8007a08 <xQueueReceive+0x74>
 8007a06:	2300      	movs	r3, #0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10a      	bne.n	8007a22 <xQueueReceive+0x8e>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	61bb      	str	r3, [r7, #24]
}
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a22:	f001 fd37 	bl	8009494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01f      	beq.n	8007a72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a32:	68b9      	ldr	r1, [r7, #8]
 8007a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a36:	f000 fafa 	bl	800802e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	1e5a      	subs	r2, r3, #1
 8007a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00f      	beq.n	8007a6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	3310      	adds	r3, #16
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f001 f810 	bl	8008a74 <xTaskRemoveFromEventList>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d007      	beq.n	8007a6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a5a:	4b3d      	ldr	r3, [pc, #244]	; (8007b50 <xQueueReceive+0x1bc>)
 8007a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a6a:	f001 fd43 	bl	80094f4 <vPortExitCritical>
				return pdPASS;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e069      	b.n	8007b46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d103      	bne.n	8007a80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a78:	f001 fd3c 	bl	80094f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e062      	b.n	8007b46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d106      	bne.n	8007a94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a86:	f107 0310 	add.w	r3, r7, #16
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 f854 	bl	8008b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a90:	2301      	movs	r3, #1
 8007a92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a94:	f001 fd2e 	bl	80094f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a98:	f000 fde2 	bl	8008660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a9c:	f001 fcfa 	bl	8009494 <vPortEnterCritical>
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aa6:	b25b      	sxtb	r3, r3
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d103      	bne.n	8007ab6 <xQueueReceive+0x122>
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007abc:	b25b      	sxtb	r3, r3
 8007abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac2:	d103      	bne.n	8007acc <xQueueReceive+0x138>
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007acc:	f001 fd12 	bl	80094f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ad0:	1d3a      	adds	r2, r7, #4
 8007ad2:	f107 0310 	add.w	r3, r7, #16
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f001 f843 	bl	8008b64 <xTaskCheckForTimeOut>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d123      	bne.n	8007b2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ae6:	f000 fb1a 	bl	800811e <prvIsQueueEmpty>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d017      	beq.n	8007b20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	3324      	adds	r3, #36	; 0x24
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	4611      	mov	r1, r2
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 ff97 	bl	8008a2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b00:	f000 fabb 	bl	800807a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b04:	f000 fdba 	bl	800867c <xTaskResumeAll>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d189      	bne.n	8007a22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007b0e:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <xQueueReceive+0x1bc>)
 8007b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	e780      	b.n	8007a22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b22:	f000 faaa 	bl	800807a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b26:	f000 fda9 	bl	800867c <xTaskResumeAll>
 8007b2a:	e77a      	b.n	8007a22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b2e:	f000 faa4 	bl	800807a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b32:	f000 fda3 	bl	800867c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b38:	f000 faf1 	bl	800811e <prvIsQueueEmpty>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f43f af6f 	beq.w	8007a22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3730      	adds	r7, #48	; 0x30
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	e000ed04 	.word	0xe000ed04

08007b54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08e      	sub	sp, #56	; 0x38
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007b66:	2300      	movs	r3, #0
 8007b68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	623b      	str	r3, [r7, #32]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	61fb      	str	r3, [r7, #28]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ba4:	f001 f926 	bl	8008df4 <xTaskGetSchedulerState>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d102      	bne.n	8007bb4 <xQueueSemaphoreTake+0x60>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <xQueueSemaphoreTake+0x64>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <xQueueSemaphoreTake+0x66>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10a      	bne.n	8007bd4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	61bb      	str	r3, [r7, #24]
}
 8007bd0:	bf00      	nop
 8007bd2:	e7fe      	b.n	8007bd2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bd4:	f001 fc5e 	bl	8009494 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bdc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d024      	beq.n	8007c2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	1e5a      	subs	r2, r3, #1
 8007be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d104      	bne.n	8007bfe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007bf4:	f001 faa6 	bl	8009144 <pvTaskIncrementMutexHeldCount>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00f      	beq.n	8007c26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	3310      	adds	r3, #16
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 ff32 	bl	8008a74 <xTaskRemoveFromEventList>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d007      	beq.n	8007c26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c16:	4b54      	ldr	r3, [pc, #336]	; (8007d68 <xQueueSemaphoreTake+0x214>)
 8007c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c26:	f001 fc65 	bl	80094f4 <vPortExitCritical>
				return pdPASS;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e097      	b.n	8007d5e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d111      	bne.n	8007c58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	617b      	str	r3, [r7, #20]
}
 8007c4c:	bf00      	nop
 8007c4e:	e7fe      	b.n	8007c4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007c50:	f001 fc50 	bl	80094f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c54:	2300      	movs	r3, #0
 8007c56:	e082      	b.n	8007d5e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d106      	bne.n	8007c6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c5e:	f107 030c 	add.w	r3, r7, #12
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 ff68 	bl	8008b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c6c:	f001 fc42 	bl	80094f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c70:	f000 fcf6 	bl	8008660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c74:	f001 fc0e 	bl	8009494 <vPortEnterCritical>
 8007c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c7e:	b25b      	sxtb	r3, r3
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c84:	d103      	bne.n	8007c8e <xQueueSemaphoreTake+0x13a>
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c94:	b25b      	sxtb	r3, r3
 8007c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9a:	d103      	bne.n	8007ca4 <xQueueSemaphoreTake+0x150>
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ca4:	f001 fc26 	bl	80094f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ca8:	463a      	mov	r2, r7
 8007caa:	f107 030c 	add.w	r3, r7, #12
 8007cae:	4611      	mov	r1, r2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 ff57 	bl	8008b64 <xTaskCheckForTimeOut>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d132      	bne.n	8007d22 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cbe:	f000 fa2e 	bl	800811e <prvIsQueueEmpty>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d026      	beq.n	8007d16 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d109      	bne.n	8007ce4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007cd0:	f001 fbe0 	bl	8009494 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 f8a9 	bl	8008e30 <xTaskPriorityInherit>
 8007cde:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007ce0:	f001 fc08 	bl	80094f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce6:	3324      	adds	r3, #36	; 0x24
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	4611      	mov	r1, r2
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fe9d 	bl	8008a2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cf4:	f000 f9c1 	bl	800807a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cf8:	f000 fcc0 	bl	800867c <xTaskResumeAll>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f47f af68 	bne.w	8007bd4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007d04:	4b18      	ldr	r3, [pc, #96]	; (8007d68 <xQueueSemaphoreTake+0x214>)
 8007d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	e75e      	b.n	8007bd4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007d16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d18:	f000 f9af 	bl	800807a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d1c:	f000 fcae 	bl	800867c <xTaskResumeAll>
 8007d20:	e758      	b.n	8007bd4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d24:	f000 f9a9 	bl	800807a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d28:	f000 fca8 	bl	800867c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d2e:	f000 f9f6 	bl	800811e <prvIsQueueEmpty>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f43f af4d 	beq.w	8007bd4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00d      	beq.n	8007d5c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007d40:	f001 fba8 	bl	8009494 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007d44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d46:	f000 f8f0 	bl	8007f2a <prvGetDisinheritPriorityAfterTimeout>
 8007d4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d52:	4618      	mov	r0, r3
 8007d54:	f001 f968 	bl	8009028 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007d58:	f001 fbcc 	bl	80094f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3738      	adds	r7, #56	; 0x38
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	e000ed04 	.word	0xe000ed04

08007d6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08e      	sub	sp, #56	; 0x38
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	623b      	str	r3, [r7, #32]
}
 8007d94:	bf00      	nop
 8007d96:	e7fe      	b.n	8007d96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d103      	bne.n	8007da6 <xQueueReceiveFromISR+0x3a>
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <xQueueReceiveFromISR+0x3e>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e000      	b.n	8007dac <xQueueReceiveFromISR+0x40>
 8007daa:	2300      	movs	r3, #0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10a      	bne.n	8007dc6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	61fb      	str	r3, [r7, #28]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007dc6:	f001 fc47 	bl	8009658 <vPortValidateInterruptPriority>
	__asm volatile
 8007dca:	f3ef 8211 	mrs	r2, BASEPRI
 8007dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	61ba      	str	r2, [r7, #24]
 8007de0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007de2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007de4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d02f      	beq.n	8007e52 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dfc:	68b9      	ldr	r1, [r7, #8]
 8007dfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e00:	f000 f915 	bl	800802e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e06:	1e5a      	subs	r2, r3, #1
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007e0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e14:	d112      	bne.n	8007e3c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d016      	beq.n	8007e4c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	3310      	adds	r3, #16
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fe26 	bl	8008a74 <xTaskRemoveFromEventList>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00e      	beq.n	8007e4c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00b      	beq.n	8007e4c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	e007      	b.n	8007e4c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e40:	3301      	adds	r3, #1
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	b25a      	sxtb	r2, r3
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e50:	e001      	b.n	8007e56 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f383 8811 	msr	BASEPRI, r3
}
 8007e60:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3738      	adds	r7, #56	; 0x38
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10a      	bne.n	8007e90 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	60bb      	str	r3, [r7, #8]
}
 8007e8c:	bf00      	nop
 8007e8e:	e7fe      	b.n	8007e8e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007e90:	f001 fb00 	bl	8009494 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007e9a:	f001 fb2b 	bl	80094f4 <vPortExitCritical>

	return uxReturn;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10a      	bne.n	8007ed0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	60fb      	str	r3, [r7, #12]
}
 8007ecc:	bf00      	nop
 8007ece:	e7fe      	b.n	8007ece <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007ed6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007ed8:	4618      	mov	r0, r3
 8007eda:	371c      	adds	r7, #28
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10a      	bne.n	8007f0c <vQueueDelete+0x28>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	60bb      	str	r3, [r7, #8]
}
 8007f08:	bf00      	nop
 8007f0a:	e7fe      	b.n	8007f0a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f935 	bl	800817c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d102      	bne.n	8007f22 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f001 fca7 	bl	8009870 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007f22:	bf00      	nop
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d006      	beq.n	8007f48 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f1c3 0307 	rsb	r3, r3, #7
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	e001      	b.n	8007f4c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
	}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b086      	sub	sp, #24
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	60b9      	str	r1, [r7, #8]
 8007f64:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f66:	2300      	movs	r3, #0
 8007f68:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10d      	bne.n	8007f94 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d14d      	bne.n	800801c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 ffc9 	bl	8008f1c <xTaskPriorityDisinherit>
 8007f8a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	609a      	str	r2, [r3, #8]
 8007f92:	e043      	b.n	800801c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d119      	bne.n	8007fce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6858      	ldr	r0, [r3, #4]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	68b9      	ldr	r1, [r7, #8]
 8007fa6:	f00e ffdd 	bl	8016f64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	441a      	add	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d32b      	bcc.n	800801c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	605a      	str	r2, [r3, #4]
 8007fcc:	e026      	b.n	800801c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	68d8      	ldr	r0, [r3, #12]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	68b9      	ldr	r1, [r7, #8]
 8007fda:	f00e ffc3 	bl	8016f64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	425b      	negs	r3, r3
 8007fe8:	441a      	add	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d207      	bcs.n	800800a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	689a      	ldr	r2, [r3, #8]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	425b      	negs	r3, r3
 8008004:	441a      	add	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d105      	bne.n	800801c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	3b01      	subs	r3, #1
 800801a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008024:	697b      	ldr	r3, [r7, #20]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803c:	2b00      	cmp	r3, #0
 800803e:	d018      	beq.n	8008072 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008048:	441a      	add	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	429a      	cmp	r2, r3
 8008058:	d303      	bcc.n	8008062 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68d9      	ldr	r1, [r3, #12]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	461a      	mov	r2, r3
 800806c:	6838      	ldr	r0, [r7, #0]
 800806e:	f00e ff79 	bl	8016f64 <memcpy>
	}
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008082:	f001 fa07 	bl	8009494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800808c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800808e:	e011      	b.n	80080b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	2b00      	cmp	r3, #0
 8008096:	d012      	beq.n	80080be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3324      	adds	r3, #36	; 0x24
 800809c:	4618      	mov	r0, r3
 800809e:	f000 fce9 	bl	8008a74 <xTaskRemoveFromEventList>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080a8:	f000 fdbe 	bl	8008c28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	dce9      	bgt.n	8008090 <prvUnlockQueue+0x16>
 80080bc:	e000      	b.n	80080c0 <prvUnlockQueue+0x46>
					break;
 80080be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	22ff      	movs	r2, #255	; 0xff
 80080c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80080c8:	f001 fa14 	bl	80094f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080cc:	f001 f9e2 	bl	8009494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080d8:	e011      	b.n	80080fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d012      	beq.n	8008108 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3310      	adds	r3, #16
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 fcc4 	bl	8008a74 <xTaskRemoveFromEventList>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080f2:	f000 fd99 	bl	8008c28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008102:	2b00      	cmp	r3, #0
 8008104:	dce9      	bgt.n	80080da <prvUnlockQueue+0x60>
 8008106:	e000      	b.n	800810a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008108:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	22ff      	movs	r2, #255	; 0xff
 800810e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008112:	f001 f9ef 	bl	80094f4 <vPortExitCritical>
}
 8008116:	bf00      	nop
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008126:	f001 f9b5 	bl	8009494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812e:	2b00      	cmp	r3, #0
 8008130:	d102      	bne.n	8008138 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008132:	2301      	movs	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	e001      	b.n	800813c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008138:	2300      	movs	r3, #0
 800813a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800813c:	f001 f9da 	bl	80094f4 <vPortExitCritical>

	return xReturn;
 8008140:	68fb      	ldr	r3, [r7, #12]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008152:	f001 f99f 	bl	8009494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815e:	429a      	cmp	r2, r3
 8008160:	d102      	bne.n	8008168 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008162:	2301      	movs	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]
 8008166:	e001      	b.n	800816c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008168:	2300      	movs	r3, #0
 800816a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800816c:	f001 f9c2 	bl	80094f4 <vPortExitCritical>

	return xReturn;
 8008170:	68fb      	ldr	r3, [r7, #12]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	e016      	b.n	80081b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800818a:	4a10      	ldr	r2, [pc, #64]	; (80081cc <vQueueUnregisterQueue+0x50>)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	4413      	add	r3, r2
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	429a      	cmp	r2, r3
 8008198:	d10b      	bne.n	80081b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800819a:	4a0c      	ldr	r2, [pc, #48]	; (80081cc <vQueueUnregisterQueue+0x50>)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2100      	movs	r1, #0
 80081a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80081a4:	4a09      	ldr	r2, [pc, #36]	; (80081cc <vQueueUnregisterQueue+0x50>)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	4413      	add	r3, r2
 80081ac:	2200      	movs	r2, #0
 80081ae:	605a      	str	r2, [r3, #4]
				break;
 80081b0:	e006      	b.n	80081c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3301      	adds	r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b07      	cmp	r3, #7
 80081bc:	d9e5      	bls.n	800818a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80081be:	bf00      	nop
 80081c0:	bf00      	nop
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	20003700 	.word	0x20003700

080081d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08e      	sub	sp, #56	; 0x38
 80081d4:	af04      	add	r7, sp, #16
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10a      	bne.n	80081fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	623b      	str	r3, [r7, #32]
}
 80081f6:	bf00      	nop
 80081f8:	e7fe      	b.n	80081f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10a      	bne.n	8008216 <xTaskCreateStatic+0x46>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	61fb      	str	r3, [r7, #28]
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008216:	23b4      	movs	r3, #180	; 0xb4
 8008218:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2bb4      	cmp	r3, #180	; 0xb4
 800821e:	d00a      	beq.n	8008236 <xTaskCreateStatic+0x66>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	61bb      	str	r3, [r7, #24]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008236:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	2b00      	cmp	r3, #0
 800823c:	d01e      	beq.n	800827c <xTaskCreateStatic+0xac>
 800823e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008240:	2b00      	cmp	r3, #0
 8008242:	d01b      	beq.n	800827c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800824c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	2202      	movs	r2, #2
 8008252:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008256:	2300      	movs	r3, #0
 8008258:	9303      	str	r3, [sp, #12]
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	9302      	str	r3, [sp, #8]
 800825e:	f107 0314 	add.w	r3, r7, #20
 8008262:	9301      	str	r3, [sp, #4]
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 f850 	bl	8008314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008276:	f000 f8eb 	bl	8008450 <prvAddNewTaskToReadyList>
 800827a:	e001      	b.n	8008280 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800827c:	2300      	movs	r3, #0
 800827e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008280:	697b      	ldr	r3, [r7, #20]
	}
 8008282:	4618      	mov	r0, r3
 8008284:	3728      	adds	r7, #40	; 0x28
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800828a:	b580      	push	{r7, lr}
 800828c:	b08c      	sub	sp, #48	; 0x30
 800828e:	af04      	add	r7, sp, #16
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	603b      	str	r3, [r7, #0]
 8008296:	4613      	mov	r3, r2
 8008298:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800829a:	88fb      	ldrh	r3, [r7, #6]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 fa1a 	bl	80096d8 <pvPortMalloc>
 80082a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00e      	beq.n	80082ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082ac:	20b4      	movs	r0, #180	; 0xb4
 80082ae:	f001 fa13 	bl	80096d8 <pvPortMalloc>
 80082b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	631a      	str	r2, [r3, #48]	; 0x30
 80082c0:	e005      	b.n	80082ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082c2:	6978      	ldr	r0, [r7, #20]
 80082c4:	f001 fad4 	bl	8009870 <vPortFree>
 80082c8:	e001      	b.n	80082ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d017      	beq.n	8008304 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082dc:	88fa      	ldrh	r2, [r7, #6]
 80082de:	2300      	movs	r3, #0
 80082e0:	9303      	str	r3, [sp, #12]
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	9302      	str	r3, [sp, #8]
 80082e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68b9      	ldr	r1, [r7, #8]
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 f80e 	bl	8008314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082f8:	69f8      	ldr	r0, [r7, #28]
 80082fa:	f000 f8a9 	bl	8008450 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082fe:	2301      	movs	r3, #1
 8008300:	61bb      	str	r3, [r7, #24]
 8008302:	e002      	b.n	800830a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008304:	f04f 33ff 	mov.w	r3, #4294967295
 8008308:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800830a:	69bb      	ldr	r3, [r7, #24]
	}
 800830c:	4618      	mov	r0, r3
 800830e:	3720      	adds	r7, #32
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800832c:	3b01      	subs	r3, #1
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	f023 0307 	bic.w	r3, r3, #7
 800833a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	f003 0307 	and.w	r3, r3, #7
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00a      	beq.n	800835c <prvInitialiseNewTask+0x48>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	617b      	str	r3, [r7, #20]
}
 8008358:	bf00      	nop
 800835a:	e7fe      	b.n	800835a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d01f      	beq.n	80083a2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008362:	2300      	movs	r3, #0
 8008364:	61fb      	str	r3, [r7, #28]
 8008366:	e012      	b.n	800838e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	7819      	ldrb	r1, [r3, #0]
 8008370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	4413      	add	r3, r2
 8008376:	3334      	adds	r3, #52	; 0x34
 8008378:	460a      	mov	r2, r1
 800837a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	4413      	add	r3, r2
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d006      	beq.n	8008396 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	3301      	adds	r3, #1
 800838c:	61fb      	str	r3, [r7, #28]
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	2b0f      	cmp	r3, #15
 8008392:	d9e9      	bls.n	8008368 <prvInitialiseNewTask+0x54>
 8008394:	e000      	b.n	8008398 <prvInitialiseNewTask+0x84>
			{
				break;
 8008396:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083a0:	e003      	b.n	80083aa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ac:	2b06      	cmp	r3, #6
 80083ae:	d901      	bls.n	80083b4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083b0:	2306      	movs	r3, #6
 80083b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	2200      	movs	r2, #0
 80083c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	3304      	adds	r3, #4
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe fea1 	bl	8007112 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	3318      	adds	r3, #24
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fe fe9c 	bl	8007112 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	f1c3 0207 	rsb	r2, r3, #7
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	334c      	adds	r3, #76	; 0x4c
 8008404:	2260      	movs	r2, #96	; 0x60
 8008406:	2100      	movs	r1, #0
 8008408:	4618      	mov	r0, r3
 800840a:	f00e fdb9 	bl	8016f80 <memset>
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	4a0c      	ldr	r2, [pc, #48]	; (8008444 <prvInitialiseNewTask+0x130>)
 8008412:	651a      	str	r2, [r3, #80]	; 0x50
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	4a0c      	ldr	r2, [pc, #48]	; (8008448 <prvInitialiseNewTask+0x134>)
 8008418:	655a      	str	r2, [r3, #84]	; 0x54
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	4a0b      	ldr	r2, [pc, #44]	; (800844c <prvInitialiseNewTask+0x138>)
 800841e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	68f9      	ldr	r1, [r7, #12]
 8008424:	69b8      	ldr	r0, [r7, #24]
 8008426:	f000 ff07 	bl	8009238 <pxPortInitialiseStack>
 800842a:	4602      	mov	r2, r0
 800842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800843a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800843c:	bf00      	nop
 800843e:	3720      	adds	r7, #32
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	0801b648 	.word	0x0801b648
 8008448:	0801b668 	.word	0x0801b668
 800844c:	0801b628 	.word	0x0801b628

08008450 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008458:	f001 f81c 	bl	8009494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800845c:	4b2a      	ldr	r3, [pc, #168]	; (8008508 <prvAddNewTaskToReadyList+0xb8>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3301      	adds	r3, #1
 8008462:	4a29      	ldr	r2, [pc, #164]	; (8008508 <prvAddNewTaskToReadyList+0xb8>)
 8008464:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008466:	4b29      	ldr	r3, [pc, #164]	; (800850c <prvAddNewTaskToReadyList+0xbc>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d109      	bne.n	8008482 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800846e:	4a27      	ldr	r2, [pc, #156]	; (800850c <prvAddNewTaskToReadyList+0xbc>)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008474:	4b24      	ldr	r3, [pc, #144]	; (8008508 <prvAddNewTaskToReadyList+0xb8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d110      	bne.n	800849e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800847c:	f000 fbf8 	bl	8008c70 <prvInitialiseTaskLists>
 8008480:	e00d      	b.n	800849e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008482:	4b23      	ldr	r3, [pc, #140]	; (8008510 <prvAddNewTaskToReadyList+0xc0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d109      	bne.n	800849e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800848a:	4b20      	ldr	r3, [pc, #128]	; (800850c <prvAddNewTaskToReadyList+0xbc>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008494:	429a      	cmp	r2, r3
 8008496:	d802      	bhi.n	800849e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008498:	4a1c      	ldr	r2, [pc, #112]	; (800850c <prvAddNewTaskToReadyList+0xbc>)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800849e:	4b1d      	ldr	r3, [pc, #116]	; (8008514 <prvAddNewTaskToReadyList+0xc4>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3301      	adds	r3, #1
 80084a4:	4a1b      	ldr	r2, [pc, #108]	; (8008514 <prvAddNewTaskToReadyList+0xc4>)
 80084a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	2201      	movs	r2, #1
 80084ae:	409a      	lsls	r2, r3
 80084b0:	4b19      	ldr	r3, [pc, #100]	; (8008518 <prvAddNewTaskToReadyList+0xc8>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	4a18      	ldr	r2, [pc, #96]	; (8008518 <prvAddNewTaskToReadyList+0xc8>)
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4a15      	ldr	r2, [pc, #84]	; (800851c <prvAddNewTaskToReadyList+0xcc>)
 80084c8:	441a      	add	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fe fe2b 	bl	800712c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084d6:	f001 f80d 	bl	80094f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084da:	4b0d      	ldr	r3, [pc, #52]	; (8008510 <prvAddNewTaskToReadyList+0xc0>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00e      	beq.n	8008500 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084e2:	4b0a      	ldr	r3, [pc, #40]	; (800850c <prvAddNewTaskToReadyList+0xbc>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d207      	bcs.n	8008500 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084f0:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <prvAddNewTaskToReadyList+0xd0>)
 80084f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20003840 	.word	0x20003840
 800850c:	20003740 	.word	0x20003740
 8008510:	2000384c 	.word	0x2000384c
 8008514:	2000385c 	.word	0x2000385c
 8008518:	20003848 	.word	0x20003848
 800851c:	20003744 	.word	0x20003744
 8008520:	e000ed04 	.word	0xe000ed04

08008524 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800852c:	2300      	movs	r3, #0
 800852e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d017      	beq.n	8008566 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008536:	4b13      	ldr	r3, [pc, #76]	; (8008584 <vTaskDelay+0x60>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <vTaskDelay+0x30>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	60bb      	str	r3, [r7, #8]
}
 8008550:	bf00      	nop
 8008552:	e7fe      	b.n	8008552 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008554:	f000 f884 	bl	8008660 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008558:	2100      	movs	r1, #0
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fe06 	bl	800916c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008560:	f000 f88c 	bl	800867c <xTaskResumeAll>
 8008564:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d107      	bne.n	800857c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800856c:	4b06      	ldr	r3, [pc, #24]	; (8008588 <vTaskDelay+0x64>)
 800856e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800857c:	bf00      	nop
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20003868 	.word	0x20003868
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08a      	sub	sp, #40	; 0x28
 8008590:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008592:	2300      	movs	r3, #0
 8008594:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800859a:	463a      	mov	r2, r7
 800859c:	1d39      	adds	r1, r7, #4
 800859e:	f107 0308 	add.w	r3, r7, #8
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7f8 fb88 	bl	8000cb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	9202      	str	r2, [sp, #8]
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	2300      	movs	r3, #0
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	2300      	movs	r3, #0
 80085b8:	460a      	mov	r2, r1
 80085ba:	4921      	ldr	r1, [pc, #132]	; (8008640 <vTaskStartScheduler+0xb4>)
 80085bc:	4821      	ldr	r0, [pc, #132]	; (8008644 <vTaskStartScheduler+0xb8>)
 80085be:	f7ff fe07 	bl	80081d0 <xTaskCreateStatic>
 80085c2:	4603      	mov	r3, r0
 80085c4:	4a20      	ldr	r2, [pc, #128]	; (8008648 <vTaskStartScheduler+0xbc>)
 80085c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085c8:	4b1f      	ldr	r3, [pc, #124]	; (8008648 <vTaskStartScheduler+0xbc>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085d0:	2301      	movs	r3, #1
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	e001      	b.n	80085da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d11b      	bne.n	8008618 <vTaskStartScheduler+0x8c>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	613b      	str	r3, [r7, #16]
}
 80085f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085f4:	4b15      	ldr	r3, [pc, #84]	; (800864c <vTaskStartScheduler+0xc0>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	334c      	adds	r3, #76	; 0x4c
 80085fa:	4a15      	ldr	r2, [pc, #84]	; (8008650 <vTaskStartScheduler+0xc4>)
 80085fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085fe:	4b15      	ldr	r3, [pc, #84]	; (8008654 <vTaskStartScheduler+0xc8>)
 8008600:	f04f 32ff 	mov.w	r2, #4294967295
 8008604:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008606:	4b14      	ldr	r3, [pc, #80]	; (8008658 <vTaskStartScheduler+0xcc>)
 8008608:	2201      	movs	r2, #1
 800860a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800860c:	4b13      	ldr	r3, [pc, #76]	; (800865c <vTaskStartScheduler+0xd0>)
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008612:	f000 fe9d 	bl	8009350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008616:	e00e      	b.n	8008636 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861e:	d10a      	bne.n	8008636 <vTaskStartScheduler+0xaa>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	60fb      	str	r3, [r7, #12]
}
 8008632:	bf00      	nop
 8008634:	e7fe      	b.n	8008634 <vTaskStartScheduler+0xa8>
}
 8008636:	bf00      	nop
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	08018000 	.word	0x08018000
 8008644:	08008c41 	.word	0x08008c41
 8008648:	20003864 	.word	0x20003864
 800864c:	20003740 	.word	0x20003740
 8008650:	20000020 	.word	0x20000020
 8008654:	20003860 	.word	0x20003860
 8008658:	2000384c 	.word	0x2000384c
 800865c:	20003844 	.word	0x20003844

08008660 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008660:	b480      	push	{r7}
 8008662:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008664:	4b04      	ldr	r3, [pc, #16]	; (8008678 <vTaskSuspendAll+0x18>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3301      	adds	r3, #1
 800866a:	4a03      	ldr	r2, [pc, #12]	; (8008678 <vTaskSuspendAll+0x18>)
 800866c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800866e:	bf00      	nop
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	20003868 	.word	0x20003868

0800867c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008686:	2300      	movs	r3, #0
 8008688:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800868a:	4b41      	ldr	r3, [pc, #260]	; (8008790 <xTaskResumeAll+0x114>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10a      	bne.n	80086a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	603b      	str	r3, [r7, #0]
}
 80086a4:	bf00      	nop
 80086a6:	e7fe      	b.n	80086a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086a8:	f000 fef4 	bl	8009494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086ac:	4b38      	ldr	r3, [pc, #224]	; (8008790 <xTaskResumeAll+0x114>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	4a37      	ldr	r2, [pc, #220]	; (8008790 <xTaskResumeAll+0x114>)
 80086b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086b6:	4b36      	ldr	r3, [pc, #216]	; (8008790 <xTaskResumeAll+0x114>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d161      	bne.n	8008782 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086be:	4b35      	ldr	r3, [pc, #212]	; (8008794 <xTaskResumeAll+0x118>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d05d      	beq.n	8008782 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086c6:	e02e      	b.n	8008726 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c8:	4b33      	ldr	r3, [pc, #204]	; (8008798 <xTaskResumeAll+0x11c>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3318      	adds	r3, #24
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fe fd86 	bl	80071e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3304      	adds	r3, #4
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe fd81 	bl	80071e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	2201      	movs	r2, #1
 80086ea:	409a      	lsls	r2, r3
 80086ec:	4b2b      	ldr	r3, [pc, #172]	; (800879c <xTaskResumeAll+0x120>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	4a2a      	ldr	r2, [pc, #168]	; (800879c <xTaskResumeAll+0x120>)
 80086f4:	6013      	str	r3, [r2, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4a27      	ldr	r2, [pc, #156]	; (80087a0 <xTaskResumeAll+0x124>)
 8008704:	441a      	add	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3304      	adds	r3, #4
 800870a:	4619      	mov	r1, r3
 800870c:	4610      	mov	r0, r2
 800870e:	f7fe fd0d 	bl	800712c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008716:	4b23      	ldr	r3, [pc, #140]	; (80087a4 <xTaskResumeAll+0x128>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871c:	429a      	cmp	r2, r3
 800871e:	d302      	bcc.n	8008726 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008720:	4b21      	ldr	r3, [pc, #132]	; (80087a8 <xTaskResumeAll+0x12c>)
 8008722:	2201      	movs	r2, #1
 8008724:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008726:	4b1c      	ldr	r3, [pc, #112]	; (8008798 <xTaskResumeAll+0x11c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1cc      	bne.n	80086c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008734:	f000 fb3e 	bl	8008db4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008738:	4b1c      	ldr	r3, [pc, #112]	; (80087ac <xTaskResumeAll+0x130>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d010      	beq.n	8008766 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008744:	f000 f858 	bl	80087f8 <xTaskIncrementTick>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800874e:	4b16      	ldr	r3, [pc, #88]	; (80087a8 <xTaskResumeAll+0x12c>)
 8008750:	2201      	movs	r2, #1
 8008752:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3b01      	subs	r3, #1
 8008758:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1f1      	bne.n	8008744 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008760:	4b12      	ldr	r3, [pc, #72]	; (80087ac <xTaskResumeAll+0x130>)
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <xTaskResumeAll+0x12c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d009      	beq.n	8008782 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800876e:	2301      	movs	r3, #1
 8008770:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008772:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <xTaskResumeAll+0x134>)
 8008774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008782:	f000 feb7 	bl	80094f4 <vPortExitCritical>

	return xAlreadyYielded;
 8008786:	68bb      	ldr	r3, [r7, #8]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20003868 	.word	0x20003868
 8008794:	20003840 	.word	0x20003840
 8008798:	20003800 	.word	0x20003800
 800879c:	20003848 	.word	0x20003848
 80087a0:	20003744 	.word	0x20003744
 80087a4:	20003740 	.word	0x20003740
 80087a8:	20003854 	.word	0x20003854
 80087ac:	20003850 	.word	0x20003850
 80087b0:	e000ed04 	.word	0xe000ed04

080087b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087ba:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <xTaskGetTickCount+0x1c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087c0:	687b      	ldr	r3, [r7, #4]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	20003844 	.word	0x20003844

080087d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087da:	f000 ff3d 	bl	8009658 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80087de:	2300      	movs	r3, #0
 80087e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80087e2:	4b04      	ldr	r3, [pc, #16]	; (80087f4 <xTaskGetTickCountFromISR+0x20>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087e8:	683b      	ldr	r3, [r7, #0]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20003844 	.word	0x20003844

080087f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008802:	4b4e      	ldr	r3, [pc, #312]	; (800893c <xTaskIncrementTick+0x144>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f040 808e 	bne.w	8008928 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800880c:	4b4c      	ldr	r3, [pc, #304]	; (8008940 <xTaskIncrementTick+0x148>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3301      	adds	r3, #1
 8008812:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008814:	4a4a      	ldr	r2, [pc, #296]	; (8008940 <xTaskIncrementTick+0x148>)
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d120      	bne.n	8008862 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008820:	4b48      	ldr	r3, [pc, #288]	; (8008944 <xTaskIncrementTick+0x14c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <xTaskIncrementTick+0x48>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	603b      	str	r3, [r7, #0]
}
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <xTaskIncrementTick+0x46>
 8008840:	4b40      	ldr	r3, [pc, #256]	; (8008944 <xTaskIncrementTick+0x14c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	4b40      	ldr	r3, [pc, #256]	; (8008948 <xTaskIncrementTick+0x150>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a3e      	ldr	r2, [pc, #248]	; (8008944 <xTaskIncrementTick+0x14c>)
 800884c:	6013      	str	r3, [r2, #0]
 800884e:	4a3e      	ldr	r2, [pc, #248]	; (8008948 <xTaskIncrementTick+0x150>)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6013      	str	r3, [r2, #0]
 8008854:	4b3d      	ldr	r3, [pc, #244]	; (800894c <xTaskIncrementTick+0x154>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3301      	adds	r3, #1
 800885a:	4a3c      	ldr	r2, [pc, #240]	; (800894c <xTaskIncrementTick+0x154>)
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	f000 faa9 	bl	8008db4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008862:	4b3b      	ldr	r3, [pc, #236]	; (8008950 <xTaskIncrementTick+0x158>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	429a      	cmp	r2, r3
 800886a:	d348      	bcc.n	80088fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800886c:	4b35      	ldr	r3, [pc, #212]	; (8008944 <xTaskIncrementTick+0x14c>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d104      	bne.n	8008880 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008876:	4b36      	ldr	r3, [pc, #216]	; (8008950 <xTaskIncrementTick+0x158>)
 8008878:	f04f 32ff 	mov.w	r2, #4294967295
 800887c:	601a      	str	r2, [r3, #0]
					break;
 800887e:	e03e      	b.n	80088fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008880:	4b30      	ldr	r3, [pc, #192]	; (8008944 <xTaskIncrementTick+0x14c>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	429a      	cmp	r2, r3
 8008896:	d203      	bcs.n	80088a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008898:	4a2d      	ldr	r2, [pc, #180]	; (8008950 <xTaskIncrementTick+0x158>)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800889e:	e02e      	b.n	80088fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	3304      	adds	r3, #4
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fe fc9e 	bl	80071e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	3318      	adds	r3, #24
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fc95 	bl	80071e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	2201      	movs	r2, #1
 80088c2:	409a      	lsls	r2, r3
 80088c4:	4b23      	ldr	r3, [pc, #140]	; (8008954 <xTaskIncrementTick+0x15c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	4a22      	ldr	r2, [pc, #136]	; (8008954 <xTaskIncrementTick+0x15c>)
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4a1f      	ldr	r2, [pc, #124]	; (8008958 <xTaskIncrementTick+0x160>)
 80088dc:	441a      	add	r2, r3
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f7fe fc21 	bl	800712c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ee:	4b1b      	ldr	r3, [pc, #108]	; (800895c <xTaskIncrementTick+0x164>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d3b9      	bcc.n	800886c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80088f8:	2301      	movs	r3, #1
 80088fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088fc:	e7b6      	b.n	800886c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088fe:	4b17      	ldr	r3, [pc, #92]	; (800895c <xTaskIncrementTick+0x164>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008904:	4914      	ldr	r1, [pc, #80]	; (8008958 <xTaskIncrementTick+0x160>)
 8008906:	4613      	mov	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	440b      	add	r3, r1
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d901      	bls.n	800891a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008916:	2301      	movs	r3, #1
 8008918:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800891a:	4b11      	ldr	r3, [pc, #68]	; (8008960 <xTaskIncrementTick+0x168>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d007      	beq.n	8008932 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008922:	2301      	movs	r3, #1
 8008924:	617b      	str	r3, [r7, #20]
 8008926:	e004      	b.n	8008932 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008928:	4b0e      	ldr	r3, [pc, #56]	; (8008964 <xTaskIncrementTick+0x16c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3301      	adds	r3, #1
 800892e:	4a0d      	ldr	r2, [pc, #52]	; (8008964 <xTaskIncrementTick+0x16c>)
 8008930:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008932:	697b      	ldr	r3, [r7, #20]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	20003868 	.word	0x20003868
 8008940:	20003844 	.word	0x20003844
 8008944:	200037f8 	.word	0x200037f8
 8008948:	200037fc 	.word	0x200037fc
 800894c:	20003858 	.word	0x20003858
 8008950:	20003860 	.word	0x20003860
 8008954:	20003848 	.word	0x20003848
 8008958:	20003744 	.word	0x20003744
 800895c:	20003740 	.word	0x20003740
 8008960:	20003854 	.word	0x20003854
 8008964:	20003850 	.word	0x20003850

08008968 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800896e:	4b29      	ldr	r3, [pc, #164]	; (8008a14 <vTaskSwitchContext+0xac>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008976:	4b28      	ldr	r3, [pc, #160]	; (8008a18 <vTaskSwitchContext+0xb0>)
 8008978:	2201      	movs	r2, #1
 800897a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800897c:	e044      	b.n	8008a08 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800897e:	4b26      	ldr	r3, [pc, #152]	; (8008a18 <vTaskSwitchContext+0xb0>)
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008984:	4b25      	ldr	r3, [pc, #148]	; (8008a1c <vTaskSwitchContext+0xb4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	fab3 f383 	clz	r3, r3
 8008990:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008992:	7afb      	ldrb	r3, [r7, #11]
 8008994:	f1c3 031f 	rsb	r3, r3, #31
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	4921      	ldr	r1, [pc, #132]	; (8008a20 <vTaskSwitchContext+0xb8>)
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	440b      	add	r3, r1
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10a      	bne.n	80089c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	607b      	str	r3, [r7, #4]
}
 80089c0:	bf00      	nop
 80089c2:	e7fe      	b.n	80089c2 <vTaskSwitchContext+0x5a>
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	4613      	mov	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4a14      	ldr	r2, [pc, #80]	; (8008a20 <vTaskSwitchContext+0xb8>)
 80089d0:	4413      	add	r3, r2
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	605a      	str	r2, [r3, #4]
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	685a      	ldr	r2, [r3, #4]
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	3308      	adds	r3, #8
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d104      	bne.n	80089f4 <vTaskSwitchContext+0x8c>
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	605a      	str	r2, [r3, #4]
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	4a0a      	ldr	r2, [pc, #40]	; (8008a24 <vTaskSwitchContext+0xbc>)
 80089fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089fe:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <vTaskSwitchContext+0xbc>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	334c      	adds	r3, #76	; 0x4c
 8008a04:	4a08      	ldr	r2, [pc, #32]	; (8008a28 <vTaskSwitchContext+0xc0>)
 8008a06:	6013      	str	r3, [r2, #0]
}
 8008a08:	bf00      	nop
 8008a0a:	371c      	adds	r7, #28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	20003868 	.word	0x20003868
 8008a18:	20003854 	.word	0x20003854
 8008a1c:	20003848 	.word	0x20003848
 8008a20:	20003744 	.word	0x20003744
 8008a24:	20003740 	.word	0x20003740
 8008a28:	20000020 	.word	0x20000020

08008a2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	60fb      	str	r3, [r7, #12]
}
 8008a4e:	bf00      	nop
 8008a50:	e7fe      	b.n	8008a50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a52:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <vTaskPlaceOnEventList+0x44>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3318      	adds	r3, #24
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7fe fb8a 	bl	8007174 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a60:	2101      	movs	r1, #1
 8008a62:	6838      	ldr	r0, [r7, #0]
 8008a64:	f000 fb82 	bl	800916c <prvAddCurrentTaskToDelayedList>
}
 8008a68:	bf00      	nop
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	20003740 	.word	0x20003740

08008a74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10a      	bne.n	8008aa0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	60fb      	str	r3, [r7, #12]
}
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	3318      	adds	r3, #24
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe fb9e 	bl	80071e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aaa:	4b1d      	ldr	r3, [pc, #116]	; (8008b20 <xTaskRemoveFromEventList+0xac>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d11c      	bne.n	8008aec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe fb95 	bl	80071e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	409a      	lsls	r2, r3
 8008ac4:	4b17      	ldr	r3, [pc, #92]	; (8008b24 <xTaskRemoveFromEventList+0xb0>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	4a16      	ldr	r2, [pc, #88]	; (8008b24 <xTaskRemoveFromEventList+0xb0>)
 8008acc:	6013      	str	r3, [r2, #0]
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4a13      	ldr	r2, [pc, #76]	; (8008b28 <xTaskRemoveFromEventList+0xb4>)
 8008adc:	441a      	add	r2, r3
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	f7fe fb21 	bl	800712c <vListInsertEnd>
 8008aea:	e005      	b.n	8008af8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	3318      	adds	r3, #24
 8008af0:	4619      	mov	r1, r3
 8008af2:	480e      	ldr	r0, [pc, #56]	; (8008b2c <xTaskRemoveFromEventList+0xb8>)
 8008af4:	f7fe fb1a 	bl	800712c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afc:	4b0c      	ldr	r3, [pc, #48]	; (8008b30 <xTaskRemoveFromEventList+0xbc>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d905      	bls.n	8008b12 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b06:	2301      	movs	r3, #1
 8008b08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b0a:	4b0a      	ldr	r3, [pc, #40]	; (8008b34 <xTaskRemoveFromEventList+0xc0>)
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	e001      	b.n	8008b16 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008b12:	2300      	movs	r3, #0
 8008b14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b16:	697b      	ldr	r3, [r7, #20]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20003868 	.word	0x20003868
 8008b24:	20003848 	.word	0x20003848
 8008b28:	20003744 	.word	0x20003744
 8008b2c:	20003800 	.word	0x20003800
 8008b30:	20003740 	.word	0x20003740
 8008b34:	20003854 	.word	0x20003854

08008b38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b40:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <vTaskInternalSetTimeOutState+0x24>)
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b48:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <vTaskInternalSetTimeOutState+0x28>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	605a      	str	r2, [r3, #4]
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	20003858 	.word	0x20003858
 8008b60:	20003844 	.word	0x20003844

08008b64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10a      	bne.n	8008b8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	613b      	str	r3, [r7, #16]
}
 8008b86:	bf00      	nop
 8008b88:	e7fe      	b.n	8008b88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	60fb      	str	r3, [r7, #12]
}
 8008ba2:	bf00      	nop
 8008ba4:	e7fe      	b.n	8008ba4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ba6:	f000 fc75 	bl	8009494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008baa:	4b1d      	ldr	r3, [pc, #116]	; (8008c20 <xTaskCheckForTimeOut+0xbc>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc2:	d102      	bne.n	8008bca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	61fb      	str	r3, [r7, #28]
 8008bc8:	e023      	b.n	8008c12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	4b15      	ldr	r3, [pc, #84]	; (8008c24 <xTaskCheckForTimeOut+0xc0>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d007      	beq.n	8008be6 <xTaskCheckForTimeOut+0x82>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d302      	bcc.n	8008be6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008be0:	2301      	movs	r3, #1
 8008be2:	61fb      	str	r3, [r7, #28]
 8008be4:	e015      	b.n	8008c12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d20b      	bcs.n	8008c08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	1ad2      	subs	r2, r2, r3
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7ff ff9b 	bl	8008b38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c02:	2300      	movs	r3, #0
 8008c04:	61fb      	str	r3, [r7, #28]
 8008c06:	e004      	b.n	8008c12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c12:	f000 fc6f 	bl	80094f4 <vPortExitCritical>

	return xReturn;
 8008c16:	69fb      	ldr	r3, [r7, #28]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3720      	adds	r7, #32
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20003844 	.word	0x20003844
 8008c24:	20003858 	.word	0x20003858

08008c28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c2c:	4b03      	ldr	r3, [pc, #12]	; (8008c3c <vTaskMissedYield+0x14>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]
}
 8008c32:	bf00      	nop
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	20003854 	.word	0x20003854

08008c40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c48:	f000 f852 	bl	8008cf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c4c:	4b06      	ldr	r3, [pc, #24]	; (8008c68 <prvIdleTask+0x28>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d9f9      	bls.n	8008c48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c54:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <prvIdleTask+0x2c>)
 8008c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5a:	601a      	str	r2, [r3, #0]
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c64:	e7f0      	b.n	8008c48 <prvIdleTask+0x8>
 8008c66:	bf00      	nop
 8008c68:	20003744 	.word	0x20003744
 8008c6c:	e000ed04 	.word	0xe000ed04

08008c70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c76:	2300      	movs	r3, #0
 8008c78:	607b      	str	r3, [r7, #4]
 8008c7a:	e00c      	b.n	8008c96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4a12      	ldr	r2, [pc, #72]	; (8008cd0 <prvInitialiseTaskLists+0x60>)
 8008c88:	4413      	add	r3, r2
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fe fa21 	bl	80070d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3301      	adds	r3, #1
 8008c94:	607b      	str	r3, [r7, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b06      	cmp	r3, #6
 8008c9a:	d9ef      	bls.n	8008c7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c9c:	480d      	ldr	r0, [pc, #52]	; (8008cd4 <prvInitialiseTaskLists+0x64>)
 8008c9e:	f7fe fa18 	bl	80070d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ca2:	480d      	ldr	r0, [pc, #52]	; (8008cd8 <prvInitialiseTaskLists+0x68>)
 8008ca4:	f7fe fa15 	bl	80070d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ca8:	480c      	ldr	r0, [pc, #48]	; (8008cdc <prvInitialiseTaskLists+0x6c>)
 8008caa:	f7fe fa12 	bl	80070d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008cae:	480c      	ldr	r0, [pc, #48]	; (8008ce0 <prvInitialiseTaskLists+0x70>)
 8008cb0:	f7fe fa0f 	bl	80070d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008cb4:	480b      	ldr	r0, [pc, #44]	; (8008ce4 <prvInitialiseTaskLists+0x74>)
 8008cb6:	f7fe fa0c 	bl	80070d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008cba:	4b0b      	ldr	r3, [pc, #44]	; (8008ce8 <prvInitialiseTaskLists+0x78>)
 8008cbc:	4a05      	ldr	r2, [pc, #20]	; (8008cd4 <prvInitialiseTaskLists+0x64>)
 8008cbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008cc0:	4b0a      	ldr	r3, [pc, #40]	; (8008cec <prvInitialiseTaskLists+0x7c>)
 8008cc2:	4a05      	ldr	r2, [pc, #20]	; (8008cd8 <prvInitialiseTaskLists+0x68>)
 8008cc4:	601a      	str	r2, [r3, #0]
}
 8008cc6:	bf00      	nop
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20003744 	.word	0x20003744
 8008cd4:	200037d0 	.word	0x200037d0
 8008cd8:	200037e4 	.word	0x200037e4
 8008cdc:	20003800 	.word	0x20003800
 8008ce0:	20003814 	.word	0x20003814
 8008ce4:	2000382c 	.word	0x2000382c
 8008ce8:	200037f8 	.word	0x200037f8
 8008cec:	200037fc 	.word	0x200037fc

08008cf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cf6:	e019      	b.n	8008d2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008cf8:	f000 fbcc 	bl	8009494 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cfc:	4b10      	ldr	r3, [pc, #64]	; (8008d40 <prvCheckTasksWaitingTermination+0x50>)
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3304      	adds	r3, #4
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fe fa6c 	bl	80071e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d0e:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <prvCheckTasksWaitingTermination+0x54>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3b01      	subs	r3, #1
 8008d14:	4a0b      	ldr	r2, [pc, #44]	; (8008d44 <prvCheckTasksWaitingTermination+0x54>)
 8008d16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d18:	4b0b      	ldr	r3, [pc, #44]	; (8008d48 <prvCheckTasksWaitingTermination+0x58>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	4a0a      	ldr	r2, [pc, #40]	; (8008d48 <prvCheckTasksWaitingTermination+0x58>)
 8008d20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d22:	f000 fbe7 	bl	80094f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f810 	bl	8008d4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d2c:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <prvCheckTasksWaitingTermination+0x58>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1e1      	bne.n	8008cf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20003814 	.word	0x20003814
 8008d44:	20003840 	.word	0x20003840
 8008d48:	20003828 	.word	0x20003828

08008d4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	334c      	adds	r3, #76	; 0x4c
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f00e fa5d 	bl	8017218 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d108      	bne.n	8008d7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 fd7f 	bl	8009870 <vPortFree>
				vPortFree( pxTCB );
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fd7c 	bl	8009870 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d78:	e018      	b.n	8008dac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d103      	bne.n	8008d8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fd73 	bl	8009870 <vPortFree>
	}
 8008d8a:	e00f      	b.n	8008dac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d00a      	beq.n	8008dac <prvDeleteTCB+0x60>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	60fb      	str	r3, [r7, #12]
}
 8008da8:	bf00      	nop
 8008daa:	e7fe      	b.n	8008daa <prvDeleteTCB+0x5e>
	}
 8008dac:	bf00      	nop
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dba:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <prvResetNextTaskUnblockTime+0x38>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d104      	bne.n	8008dce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008dc4:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <prvResetNextTaskUnblockTime+0x3c>)
 8008dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008dcc:	e008      	b.n	8008de0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dce:	4b07      	ldr	r3, [pc, #28]	; (8008dec <prvResetNextTaskUnblockTime+0x38>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	4a04      	ldr	r2, [pc, #16]	; (8008df0 <prvResetNextTaskUnblockTime+0x3c>)
 8008dde:	6013      	str	r3, [r2, #0]
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	200037f8 	.word	0x200037f8
 8008df0:	20003860 	.word	0x20003860

08008df4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008dfa:	4b0b      	ldr	r3, [pc, #44]	; (8008e28 <xTaskGetSchedulerState+0x34>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d102      	bne.n	8008e08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e02:	2301      	movs	r3, #1
 8008e04:	607b      	str	r3, [r7, #4]
 8008e06:	e008      	b.n	8008e1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e08:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <xTaskGetSchedulerState+0x38>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d102      	bne.n	8008e16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e10:	2302      	movs	r3, #2
 8008e12:	607b      	str	r3, [r7, #4]
 8008e14:	e001      	b.n	8008e1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e16:	2300      	movs	r3, #0
 8008e18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e1a:	687b      	ldr	r3, [r7, #4]
	}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	2000384c 	.word	0x2000384c
 8008e2c:	20003868 	.word	0x20003868

08008e30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d05e      	beq.n	8008f04 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4a:	4b31      	ldr	r3, [pc, #196]	; (8008f10 <xTaskPriorityInherit+0xe0>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d24e      	bcs.n	8008ef2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	db06      	blt.n	8008e6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e5c:	4b2c      	ldr	r3, [pc, #176]	; (8008f10 <xTaskPriorityInherit+0xe0>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	f1c3 0207 	rsb	r2, r3, #7
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	6959      	ldr	r1, [r3, #20]
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4a26      	ldr	r2, [pc, #152]	; (8008f14 <xTaskPriorityInherit+0xe4>)
 8008e7c:	4413      	add	r3, r2
 8008e7e:	4299      	cmp	r1, r3
 8008e80:	d12f      	bne.n	8008ee2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	3304      	adds	r3, #4
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe f9ad 	bl	80071e6 <uxListRemove>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10a      	bne.n	8008ea8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e96:	2201      	movs	r2, #1
 8008e98:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9c:	43da      	mvns	r2, r3
 8008e9e:	4b1e      	ldr	r3, [pc, #120]	; (8008f18 <xTaskPriorityInherit+0xe8>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	4a1c      	ldr	r2, [pc, #112]	; (8008f18 <xTaskPriorityInherit+0xe8>)
 8008ea6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ea8:	4b19      	ldr	r3, [pc, #100]	; (8008f10 <xTaskPriorityInherit+0xe0>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	409a      	lsls	r2, r3
 8008eba:	4b17      	ldr	r3, [pc, #92]	; (8008f18 <xTaskPriorityInherit+0xe8>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	4a15      	ldr	r2, [pc, #84]	; (8008f18 <xTaskPriorityInherit+0xe8>)
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec8:	4613      	mov	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4a10      	ldr	r2, [pc, #64]	; (8008f14 <xTaskPriorityInherit+0xe4>)
 8008ed2:	441a      	add	r2, r3
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f7fe f926 	bl	800712c <vListInsertEnd>
 8008ee0:	e004      	b.n	8008eec <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ee2:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <xTaskPriorityInherit+0xe0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008eec:	2301      	movs	r3, #1
 8008eee:	60fb      	str	r3, [r7, #12]
 8008ef0:	e008      	b.n	8008f04 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ef6:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <xTaskPriorityInherit+0xe0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d201      	bcs.n	8008f04 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008f00:	2301      	movs	r3, #1
 8008f02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f04:	68fb      	ldr	r3, [r7, #12]
	}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20003740 	.word	0x20003740
 8008f14:	20003744 	.word	0x20003744
 8008f18:	20003848 	.word	0x20003848

08008f1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d06e      	beq.n	8009010 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f32:	4b3a      	ldr	r3, [pc, #232]	; (800901c <xTaskPriorityDisinherit+0x100>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d00a      	beq.n	8008f52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	60fb      	str	r3, [r7, #12]
}
 8008f4e:	bf00      	nop
 8008f50:	e7fe      	b.n	8008f50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	60bb      	str	r3, [r7, #8]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f74:	1e5a      	subs	r2, r3, #1
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d044      	beq.n	8009010 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d140      	bne.n	8009010 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	3304      	adds	r3, #4
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe f927 	bl	80071e6 <uxListRemove>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d115      	bne.n	8008fca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa2:	491f      	ldr	r1, [pc, #124]	; (8009020 <xTaskPriorityDisinherit+0x104>)
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	440b      	add	r3, r1
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10a      	bne.n	8008fca <xTaskPriorityDisinherit+0xae>
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb8:	2201      	movs	r2, #1
 8008fba:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbe:	43da      	mvns	r2, r3
 8008fc0:	4b18      	ldr	r3, [pc, #96]	; (8009024 <xTaskPriorityDisinherit+0x108>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	4a17      	ldr	r2, [pc, #92]	; (8009024 <xTaskPriorityDisinherit+0x108>)
 8008fc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd6:	f1c3 0207 	rsb	r2, r3, #7
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	409a      	lsls	r2, r3
 8008fe6:	4b0f      	ldr	r3, [pc, #60]	; (8009024 <xTaskPriorityDisinherit+0x108>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	4a0d      	ldr	r2, [pc, #52]	; (8009024 <xTaskPriorityDisinherit+0x108>)
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4a08      	ldr	r2, [pc, #32]	; (8009020 <xTaskPriorityDisinherit+0x104>)
 8008ffe:	441a      	add	r2, r3
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	3304      	adds	r3, #4
 8009004:	4619      	mov	r1, r3
 8009006:	4610      	mov	r0, r2
 8009008:	f7fe f890 	bl	800712c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800900c:	2301      	movs	r3, #1
 800900e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009010:	697b      	ldr	r3, [r7, #20]
	}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20003740 	.word	0x20003740
 8009020:	20003744 	.word	0x20003744
 8009024:	20003848 	.word	0x20003848

08009028 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009036:	2301      	movs	r3, #1
 8009038:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d077      	beq.n	8009130 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10a      	bne.n	800905e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	60fb      	str	r3, [r7, #12]
}
 800905a:	bf00      	nop
 800905c:	e7fe      	b.n	800905c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	429a      	cmp	r2, r3
 8009066:	d902      	bls.n	800906e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	61fb      	str	r3, [r7, #28]
 800906c:	e002      	b.n	8009074 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009072:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009078:	69fa      	ldr	r2, [r7, #28]
 800907a:	429a      	cmp	r2, r3
 800907c:	d058      	beq.n	8009130 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	429a      	cmp	r2, r3
 8009086:	d153      	bne.n	8009130 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009088:	4b2b      	ldr	r3, [pc, #172]	; (8009138 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	429a      	cmp	r2, r3
 8009090:	d10a      	bne.n	80090a8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	60bb      	str	r3, [r7, #8]
}
 80090a4:	bf00      	nop
 80090a6:	e7fe      	b.n	80090a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	69fa      	ldr	r2, [r7, #28]
 80090b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	db04      	blt.n	80090c6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	f1c3 0207 	rsb	r2, r3, #7
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	6959      	ldr	r1, [r3, #20]
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	4613      	mov	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4a19      	ldr	r2, [pc, #100]	; (800913c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80090d6:	4413      	add	r3, r2
 80090d8:	4299      	cmp	r1, r3
 80090da:	d129      	bne.n	8009130 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	3304      	adds	r3, #4
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fe f880 	bl	80071e6 <uxListRemove>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10a      	bne.n	8009102 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	2201      	movs	r2, #1
 80090f2:	fa02 f303 	lsl.w	r3, r2, r3
 80090f6:	43da      	mvns	r2, r3
 80090f8:	4b11      	ldr	r3, [pc, #68]	; (8009140 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4013      	ands	r3, r2
 80090fe:	4a10      	ldr	r2, [pc, #64]	; (8009140 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009100:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009106:	2201      	movs	r2, #1
 8009108:	409a      	lsls	r2, r3
 800910a:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4313      	orrs	r3, r2
 8009110:	4a0b      	ldr	r2, [pc, #44]	; (8009140 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009118:	4613      	mov	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4a06      	ldr	r2, [pc, #24]	; (800913c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009122:	441a      	add	r2, r3
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	3304      	adds	r3, #4
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f7fd fffe 	bl	800712c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009130:	bf00      	nop
 8009132:	3720      	adds	r7, #32
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	20003740 	.word	0x20003740
 800913c:	20003744 	.word	0x20003744
 8009140:	20003848 	.word	0x20003848

08009144 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009144:	b480      	push	{r7}
 8009146:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009148:	4b07      	ldr	r3, [pc, #28]	; (8009168 <pvTaskIncrementMutexHeldCount+0x24>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d004      	beq.n	800915a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009150:	4b05      	ldr	r3, [pc, #20]	; (8009168 <pvTaskIncrementMutexHeldCount+0x24>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009156:	3201      	adds	r2, #1
 8009158:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800915a:	4b03      	ldr	r3, [pc, #12]	; (8009168 <pvTaskIncrementMutexHeldCount+0x24>)
 800915c:	681b      	ldr	r3, [r3, #0]
	}
 800915e:	4618      	mov	r0, r3
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	20003740 	.word	0x20003740

0800916c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009176:	4b29      	ldr	r3, [pc, #164]	; (800921c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800917c:	4b28      	ldr	r3, [pc, #160]	; (8009220 <prvAddCurrentTaskToDelayedList+0xb4>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3304      	adds	r3, #4
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe f82f 	bl	80071e6 <uxListRemove>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10b      	bne.n	80091a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800918e:	4b24      	ldr	r3, [pc, #144]	; (8009220 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009194:	2201      	movs	r2, #1
 8009196:	fa02 f303 	lsl.w	r3, r2, r3
 800919a:	43da      	mvns	r2, r3
 800919c:	4b21      	ldr	r3, [pc, #132]	; (8009224 <prvAddCurrentTaskToDelayedList+0xb8>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4013      	ands	r3, r2
 80091a2:	4a20      	ldr	r2, [pc, #128]	; (8009224 <prvAddCurrentTaskToDelayedList+0xb8>)
 80091a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ac:	d10a      	bne.n	80091c4 <prvAddCurrentTaskToDelayedList+0x58>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d007      	beq.n	80091c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091b4:	4b1a      	ldr	r3, [pc, #104]	; (8009220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3304      	adds	r3, #4
 80091ba:	4619      	mov	r1, r3
 80091bc:	481a      	ldr	r0, [pc, #104]	; (8009228 <prvAddCurrentTaskToDelayedList+0xbc>)
 80091be:	f7fd ffb5 	bl	800712c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091c2:	e026      	b.n	8009212 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4413      	add	r3, r2
 80091ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091cc:	4b14      	ldr	r3, [pc, #80]	; (8009220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d209      	bcs.n	80091f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091dc:	4b13      	ldr	r3, [pc, #76]	; (800922c <prvAddCurrentTaskToDelayedList+0xc0>)
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f7fd ffc3 	bl	8007174 <vListInsert>
}
 80091ee:	e010      	b.n	8009212 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091f0:	4b0f      	ldr	r3, [pc, #60]	; (8009230 <prvAddCurrentTaskToDelayedList+0xc4>)
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4619      	mov	r1, r3
 80091fc:	4610      	mov	r0, r2
 80091fe:	f7fd ffb9 	bl	8007174 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009202:	4b0c      	ldr	r3, [pc, #48]	; (8009234 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	429a      	cmp	r2, r3
 800920a:	d202      	bcs.n	8009212 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800920c:	4a09      	ldr	r2, [pc, #36]	; (8009234 <prvAddCurrentTaskToDelayedList+0xc8>)
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	6013      	str	r3, [r2, #0]
}
 8009212:	bf00      	nop
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	20003844 	.word	0x20003844
 8009220:	20003740 	.word	0x20003740
 8009224:	20003848 	.word	0x20003848
 8009228:	2000382c 	.word	0x2000382c
 800922c:	200037fc 	.word	0x200037fc
 8009230:	200037f8 	.word	0x200037f8
 8009234:	20003860 	.word	0x20003860

08009238 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	3b04      	subs	r3, #4
 8009248:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3b04      	subs	r3, #4
 8009256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f023 0201 	bic.w	r2, r3, #1
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3b04      	subs	r3, #4
 8009266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009268:	4a0c      	ldr	r2, [pc, #48]	; (800929c <pxPortInitialiseStack+0x64>)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3b14      	subs	r3, #20
 8009272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3b04      	subs	r3, #4
 800927e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f06f 0202 	mvn.w	r2, #2
 8009286:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	3b20      	subs	r3, #32
 800928c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800928e:	68fb      	ldr	r3, [r7, #12]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	080092a1 	.word	0x080092a1

080092a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092aa:	4b12      	ldr	r3, [pc, #72]	; (80092f4 <prvTaskExitError+0x54>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b2:	d00a      	beq.n	80092ca <prvTaskExitError+0x2a>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	60fb      	str	r3, [r7, #12]
}
 80092c6:	bf00      	nop
 80092c8:	e7fe      	b.n	80092c8 <prvTaskExitError+0x28>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	60bb      	str	r3, [r7, #8]
}
 80092dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80092de:	bf00      	nop
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0fc      	beq.n	80092e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80092e6:	bf00      	nop
 80092e8:	bf00      	nop
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	20000010 	.word	0x20000010
	...

08009300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009300:	4b07      	ldr	r3, [pc, #28]	; (8009320 <pxCurrentTCBConst2>)
 8009302:	6819      	ldr	r1, [r3, #0]
 8009304:	6808      	ldr	r0, [r1, #0]
 8009306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930a:	f380 8809 	msr	PSP, r0
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f04f 0000 	mov.w	r0, #0
 8009316:	f380 8811 	msr	BASEPRI, r0
 800931a:	4770      	bx	lr
 800931c:	f3af 8000 	nop.w

08009320 <pxCurrentTCBConst2>:
 8009320:	20003740 	.word	0x20003740
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009324:	bf00      	nop
 8009326:	bf00      	nop

08009328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009328:	4808      	ldr	r0, [pc, #32]	; (800934c <prvPortStartFirstTask+0x24>)
 800932a:	6800      	ldr	r0, [r0, #0]
 800932c:	6800      	ldr	r0, [r0, #0]
 800932e:	f380 8808 	msr	MSP, r0
 8009332:	f04f 0000 	mov.w	r0, #0
 8009336:	f380 8814 	msr	CONTROL, r0
 800933a:	b662      	cpsie	i
 800933c:	b661      	cpsie	f
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	df00      	svc	0
 8009348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800934a:	bf00      	nop
 800934c:	e000ed08 	.word	0xe000ed08

08009350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009356:	4b46      	ldr	r3, [pc, #280]	; (8009470 <xPortStartScheduler+0x120>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a46      	ldr	r2, [pc, #280]	; (8009474 <xPortStartScheduler+0x124>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d10a      	bne.n	8009376 <xPortStartScheduler+0x26>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	613b      	str	r3, [r7, #16]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009376:	4b3e      	ldr	r3, [pc, #248]	; (8009470 <xPortStartScheduler+0x120>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a3f      	ldr	r2, [pc, #252]	; (8009478 <xPortStartScheduler+0x128>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d10a      	bne.n	8009396 <xPortStartScheduler+0x46>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	60fb      	str	r3, [r7, #12]
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009396:	4b39      	ldr	r3, [pc, #228]	; (800947c <xPortStartScheduler+0x12c>)
 8009398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	22ff      	movs	r2, #255	; 0xff
 80093a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	4b31      	ldr	r3, [pc, #196]	; (8009480 <xPortStartScheduler+0x130>)
 80093bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093be:	4b31      	ldr	r3, [pc, #196]	; (8009484 <xPortStartScheduler+0x134>)
 80093c0:	2207      	movs	r2, #7
 80093c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093c4:	e009      	b.n	80093da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80093c6:	4b2f      	ldr	r3, [pc, #188]	; (8009484 <xPortStartScheduler+0x134>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	4a2d      	ldr	r2, [pc, #180]	; (8009484 <xPortStartScheduler+0x134>)
 80093ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093da:	78fb      	ldrb	r3, [r7, #3]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e2:	2b80      	cmp	r3, #128	; 0x80
 80093e4:	d0ef      	beq.n	80093c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093e6:	4b27      	ldr	r3, [pc, #156]	; (8009484 <xPortStartScheduler+0x134>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f1c3 0307 	rsb	r3, r3, #7
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	d00a      	beq.n	8009408 <xPortStartScheduler+0xb8>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	60bb      	str	r3, [r7, #8]
}
 8009404:	bf00      	nop
 8009406:	e7fe      	b.n	8009406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009408:	4b1e      	ldr	r3, [pc, #120]	; (8009484 <xPortStartScheduler+0x134>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	021b      	lsls	r3, r3, #8
 800940e:	4a1d      	ldr	r2, [pc, #116]	; (8009484 <xPortStartScheduler+0x134>)
 8009410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009412:	4b1c      	ldr	r3, [pc, #112]	; (8009484 <xPortStartScheduler+0x134>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800941a:	4a1a      	ldr	r2, [pc, #104]	; (8009484 <xPortStartScheduler+0x134>)
 800941c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	b2da      	uxtb	r2, r3
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009426:	4b18      	ldr	r3, [pc, #96]	; (8009488 <xPortStartScheduler+0x138>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a17      	ldr	r2, [pc, #92]	; (8009488 <xPortStartScheduler+0x138>)
 800942c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009432:	4b15      	ldr	r3, [pc, #84]	; (8009488 <xPortStartScheduler+0x138>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a14      	ldr	r2, [pc, #80]	; (8009488 <xPortStartScheduler+0x138>)
 8009438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800943c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800943e:	f000 f8dd 	bl	80095fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009442:	4b12      	ldr	r3, [pc, #72]	; (800948c <xPortStartScheduler+0x13c>)
 8009444:	2200      	movs	r2, #0
 8009446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009448:	f000 f8fc 	bl	8009644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800944c:	4b10      	ldr	r3, [pc, #64]	; (8009490 <xPortStartScheduler+0x140>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a0f      	ldr	r2, [pc, #60]	; (8009490 <xPortStartScheduler+0x140>)
 8009452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009458:	f7ff ff66 	bl	8009328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800945c:	f7ff fa84 	bl	8008968 <vTaskSwitchContext>
	prvTaskExitError();
 8009460:	f7ff ff1e 	bl	80092a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	e000ed00 	.word	0xe000ed00
 8009474:	410fc271 	.word	0x410fc271
 8009478:	410fc270 	.word	0x410fc270
 800947c:	e000e400 	.word	0xe000e400
 8009480:	2000386c 	.word	0x2000386c
 8009484:	20003870 	.word	0x20003870
 8009488:	e000ed20 	.word	0xe000ed20
 800948c:	20000010 	.word	0x20000010
 8009490:	e000ef34 	.word	0xe000ef34

08009494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	607b      	str	r3, [r7, #4]
}
 80094ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094ae:	4b0f      	ldr	r3, [pc, #60]	; (80094ec <vPortEnterCritical+0x58>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3301      	adds	r3, #1
 80094b4:	4a0d      	ldr	r2, [pc, #52]	; (80094ec <vPortEnterCritical+0x58>)
 80094b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094b8:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <vPortEnterCritical+0x58>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d10f      	bne.n	80094e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094c0:	4b0b      	ldr	r3, [pc, #44]	; (80094f0 <vPortEnterCritical+0x5c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00a      	beq.n	80094e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	603b      	str	r3, [r7, #0]
}
 80094dc:	bf00      	nop
 80094de:	e7fe      	b.n	80094de <vPortEnterCritical+0x4a>
	}
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	20000010 	.word	0x20000010
 80094f0:	e000ed04 	.word	0xe000ed04

080094f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094fa:	4b12      	ldr	r3, [pc, #72]	; (8009544 <vPortExitCritical+0x50>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <vPortExitCritical+0x24>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	607b      	str	r3, [r7, #4]
}
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009518:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <vPortExitCritical+0x50>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3b01      	subs	r3, #1
 800951e:	4a09      	ldr	r2, [pc, #36]	; (8009544 <vPortExitCritical+0x50>)
 8009520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009522:	4b08      	ldr	r3, [pc, #32]	; (8009544 <vPortExitCritical+0x50>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d105      	bne.n	8009536 <vPortExitCritical+0x42>
 800952a:	2300      	movs	r3, #0
 800952c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	f383 8811 	msr	BASEPRI, r3
}
 8009534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009536:	bf00      	nop
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	20000010 	.word	0x20000010
	...

08009550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009550:	f3ef 8009 	mrs	r0, PSP
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	4b15      	ldr	r3, [pc, #84]	; (80095b0 <pxCurrentTCBConst>)
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	f01e 0f10 	tst.w	lr, #16
 8009560:	bf08      	it	eq
 8009562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956a:	6010      	str	r0, [r2, #0]
 800956c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009574:	f380 8811 	msr	BASEPRI, r0
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f7ff f9f2 	bl	8008968 <vTaskSwitchContext>
 8009584:	f04f 0000 	mov.w	r0, #0
 8009588:	f380 8811 	msr	BASEPRI, r0
 800958c:	bc09      	pop	{r0, r3}
 800958e:	6819      	ldr	r1, [r3, #0]
 8009590:	6808      	ldr	r0, [r1, #0]
 8009592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009596:	f01e 0f10 	tst.w	lr, #16
 800959a:	bf08      	it	eq
 800959c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095a0:	f380 8809 	msr	PSP, r0
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	f3af 8000 	nop.w

080095b0 <pxCurrentTCBConst>:
 80095b0:	20003740 	.word	0x20003740
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop

080095b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	607b      	str	r3, [r7, #4]
}
 80095d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095d2:	f7ff f911 	bl	80087f8 <xTaskIncrementTick>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d003      	beq.n	80095e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095dc:	4b06      	ldr	r3, [pc, #24]	; (80095f8 <SysTick_Handler+0x40>)
 80095de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	2300      	movs	r3, #0
 80095e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	f383 8811 	msr	BASEPRI, r3
}
 80095ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095f0:	bf00      	nop
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	e000ed04 	.word	0xe000ed04

080095fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095fc:	b480      	push	{r7}
 80095fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009600:	4b0b      	ldr	r3, [pc, #44]	; (8009630 <vPortSetupTimerInterrupt+0x34>)
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009606:	4b0b      	ldr	r3, [pc, #44]	; (8009634 <vPortSetupTimerInterrupt+0x38>)
 8009608:	2200      	movs	r2, #0
 800960a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800960c:	4b0a      	ldr	r3, [pc, #40]	; (8009638 <vPortSetupTimerInterrupt+0x3c>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a0a      	ldr	r2, [pc, #40]	; (800963c <vPortSetupTimerInterrupt+0x40>)
 8009612:	fba2 2303 	umull	r2, r3, r2, r3
 8009616:	099b      	lsrs	r3, r3, #6
 8009618:	4a09      	ldr	r2, [pc, #36]	; (8009640 <vPortSetupTimerInterrupt+0x44>)
 800961a:	3b01      	subs	r3, #1
 800961c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800961e:	4b04      	ldr	r3, [pc, #16]	; (8009630 <vPortSetupTimerInterrupt+0x34>)
 8009620:	2207      	movs	r2, #7
 8009622:	601a      	str	r2, [r3, #0]
}
 8009624:	bf00      	nop
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	e000e010 	.word	0xe000e010
 8009634:	e000e018 	.word	0xe000e018
 8009638:	20000004 	.word	0x20000004
 800963c:	10624dd3 	.word	0x10624dd3
 8009640:	e000e014 	.word	0xe000e014

08009644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009654 <vPortEnableVFP+0x10>
 8009648:	6801      	ldr	r1, [r0, #0]
 800964a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800964e:	6001      	str	r1, [r0, #0]
 8009650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009652:	bf00      	nop
 8009654:	e000ed88 	.word	0xe000ed88

08009658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800965e:	f3ef 8305 	mrs	r3, IPSR
 8009662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2b0f      	cmp	r3, #15
 8009668:	d914      	bls.n	8009694 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800966a:	4a17      	ldr	r2, [pc, #92]	; (80096c8 <vPortValidateInterruptPriority+0x70>)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4413      	add	r3, r2
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009674:	4b15      	ldr	r3, [pc, #84]	; (80096cc <vPortValidateInterruptPriority+0x74>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	7afa      	ldrb	r2, [r7, #11]
 800967a:	429a      	cmp	r2, r3
 800967c:	d20a      	bcs.n	8009694 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	607b      	str	r3, [r7, #4]
}
 8009690:	bf00      	nop
 8009692:	e7fe      	b.n	8009692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009694:	4b0e      	ldr	r3, [pc, #56]	; (80096d0 <vPortValidateInterruptPriority+0x78>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800969c:	4b0d      	ldr	r3, [pc, #52]	; (80096d4 <vPortValidateInterruptPriority+0x7c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d90a      	bls.n	80096ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	603b      	str	r3, [r7, #0]
}
 80096b6:	bf00      	nop
 80096b8:	e7fe      	b.n	80096b8 <vPortValidateInterruptPriority+0x60>
	}
 80096ba:	bf00      	nop
 80096bc:	3714      	adds	r7, #20
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	e000e3f0 	.word	0xe000e3f0
 80096cc:	2000386c 	.word	0x2000386c
 80096d0:	e000ed0c 	.word	0xe000ed0c
 80096d4:	20003870 	.word	0x20003870

080096d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b08a      	sub	sp, #40	; 0x28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096e0:	2300      	movs	r3, #0
 80096e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80096e4:	f7fe ffbc 	bl	8008660 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80096e8:	4b5b      	ldr	r3, [pc, #364]	; (8009858 <pvPortMalloc+0x180>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80096f0:	f000 f92c 	bl	800994c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80096f4:	4b59      	ldr	r3, [pc, #356]	; (800985c <pvPortMalloc+0x184>)
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4013      	ands	r3, r2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f040 8093 	bne.w	8009828 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d01d      	beq.n	8009744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009708:	2208      	movs	r2, #8
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4413      	add	r3, r2
 800970e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f003 0307 	and.w	r3, r3, #7
 8009716:	2b00      	cmp	r3, #0
 8009718:	d014      	beq.n	8009744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f023 0307 	bic.w	r3, r3, #7
 8009720:	3308      	adds	r3, #8
 8009722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f003 0307 	and.w	r3, r3, #7
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00a      	beq.n	8009744 <pvPortMalloc+0x6c>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	617b      	str	r3, [r7, #20]
}
 8009740:	bf00      	nop
 8009742:	e7fe      	b.n	8009742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d06e      	beq.n	8009828 <pvPortMalloc+0x150>
 800974a:	4b45      	ldr	r3, [pc, #276]	; (8009860 <pvPortMalloc+0x188>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d869      	bhi.n	8009828 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009754:	4b43      	ldr	r3, [pc, #268]	; (8009864 <pvPortMalloc+0x18c>)
 8009756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009758:	4b42      	ldr	r3, [pc, #264]	; (8009864 <pvPortMalloc+0x18c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800975e:	e004      	b.n	800976a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	429a      	cmp	r2, r3
 8009772:	d903      	bls.n	800977c <pvPortMalloc+0xa4>
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1f1      	bne.n	8009760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800977c:	4b36      	ldr	r3, [pc, #216]	; (8009858 <pvPortMalloc+0x180>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009782:	429a      	cmp	r2, r3
 8009784:	d050      	beq.n	8009828 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2208      	movs	r2, #8
 800978c:	4413      	add	r3, r2
 800978e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	1ad2      	subs	r2, r2, r3
 80097a0:	2308      	movs	r3, #8
 80097a2:	005b      	lsls	r3, r3, #1
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d91f      	bls.n	80097e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4413      	add	r3, r2
 80097ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	f003 0307 	and.w	r3, r3, #7
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00a      	beq.n	80097d0 <pvPortMalloc+0xf8>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	613b      	str	r3, [r7, #16]
}
 80097cc:	bf00      	nop
 80097ce:	e7fe      	b.n	80097ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	1ad2      	subs	r2, r2, r3
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097e2:	69b8      	ldr	r0, [r7, #24]
 80097e4:	f000 f914 	bl	8009a10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80097e8:	4b1d      	ldr	r3, [pc, #116]	; (8009860 <pvPortMalloc+0x188>)
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	4a1b      	ldr	r2, [pc, #108]	; (8009860 <pvPortMalloc+0x188>)
 80097f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80097f6:	4b1a      	ldr	r3, [pc, #104]	; (8009860 <pvPortMalloc+0x188>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	4b1b      	ldr	r3, [pc, #108]	; (8009868 <pvPortMalloc+0x190>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d203      	bcs.n	800980a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009802:	4b17      	ldr	r3, [pc, #92]	; (8009860 <pvPortMalloc+0x188>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a18      	ldr	r2, [pc, #96]	; (8009868 <pvPortMalloc+0x190>)
 8009808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	4b13      	ldr	r3, [pc, #76]	; (800985c <pvPortMalloc+0x184>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	431a      	orrs	r2, r3
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	2200      	movs	r2, #0
 800981c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800981e:	4b13      	ldr	r3, [pc, #76]	; (800986c <pvPortMalloc+0x194>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	3301      	adds	r3, #1
 8009824:	4a11      	ldr	r2, [pc, #68]	; (800986c <pvPortMalloc+0x194>)
 8009826:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009828:	f7fe ff28 	bl	800867c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	f003 0307 	and.w	r3, r3, #7
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <pvPortMalloc+0x174>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	60fb      	str	r3, [r7, #12]
}
 8009848:	bf00      	nop
 800984a:	e7fe      	b.n	800984a <pvPortMalloc+0x172>
	return pvReturn;
 800984c:	69fb      	ldr	r3, [r7, #28]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3728      	adds	r7, #40	; 0x28
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20009b8c 	.word	0x20009b8c
 800985c:	20009ba0 	.word	0x20009ba0
 8009860:	20009b90 	.word	0x20009b90
 8009864:	20009b84 	.word	0x20009b84
 8009868:	20009b94 	.word	0x20009b94
 800986c:	20009b98 	.word	0x20009b98

08009870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d04d      	beq.n	800991e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009882:	2308      	movs	r3, #8
 8009884:	425b      	negs	r3, r3
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	4413      	add	r3, r2
 800988a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	4b24      	ldr	r3, [pc, #144]	; (8009928 <vPortFree+0xb8>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4013      	ands	r3, r2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10a      	bne.n	80098b4 <vPortFree+0x44>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	60fb      	str	r3, [r7, #12]
}
 80098b0:	bf00      	nop
 80098b2:	e7fe      	b.n	80098b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00a      	beq.n	80098d2 <vPortFree+0x62>
	__asm volatile
 80098bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	60bb      	str	r3, [r7, #8]
}
 80098ce:	bf00      	nop
 80098d0:	e7fe      	b.n	80098d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	685a      	ldr	r2, [r3, #4]
 80098d6:	4b14      	ldr	r3, [pc, #80]	; (8009928 <vPortFree+0xb8>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4013      	ands	r3, r2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d01e      	beq.n	800991e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d11a      	bne.n	800991e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	4b0e      	ldr	r3, [pc, #56]	; (8009928 <vPortFree+0xb8>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	43db      	mvns	r3, r3
 80098f2:	401a      	ands	r2, r3
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098f8:	f7fe feb2 	bl	8008660 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	4b0a      	ldr	r3, [pc, #40]	; (800992c <vPortFree+0xbc>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4413      	add	r3, r2
 8009906:	4a09      	ldr	r2, [pc, #36]	; (800992c <vPortFree+0xbc>)
 8009908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800990a:	6938      	ldr	r0, [r7, #16]
 800990c:	f000 f880 	bl	8009a10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009910:	4b07      	ldr	r3, [pc, #28]	; (8009930 <vPortFree+0xc0>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3301      	adds	r3, #1
 8009916:	4a06      	ldr	r2, [pc, #24]	; (8009930 <vPortFree+0xc0>)
 8009918:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800991a:	f7fe feaf 	bl	800867c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800991e:	bf00      	nop
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20009ba0 	.word	0x20009ba0
 800992c:	20009b90 	.word	0x20009b90
 8009930:	20009b9c 	.word	0x20009b9c

08009934 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8009934:	b480      	push	{r7}
 8009936:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8009938:	4b03      	ldr	r3, [pc, #12]	; (8009948 <xPortGetFreeHeapSize+0x14>)
 800993a:	681b      	ldr	r3, [r3, #0]
}
 800993c:	4618      	mov	r0, r3
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	20009b90 	.word	0x20009b90

0800994c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009952:	f246 3310 	movw	r3, #25360	; 0x6310
 8009956:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009958:	4b27      	ldr	r3, [pc, #156]	; (80099f8 <prvHeapInit+0xac>)
 800995a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f003 0307 	and.w	r3, r3, #7
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00c      	beq.n	8009980 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	3307      	adds	r3, #7
 800996a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f023 0307 	bic.w	r3, r3, #7
 8009972:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	4a1f      	ldr	r2, [pc, #124]	; (80099f8 <prvHeapInit+0xac>)
 800997c:	4413      	add	r3, r2
 800997e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009984:	4a1d      	ldr	r2, [pc, #116]	; (80099fc <prvHeapInit+0xb0>)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800998a:	4b1c      	ldr	r3, [pc, #112]	; (80099fc <prvHeapInit+0xb0>)
 800998c:	2200      	movs	r2, #0
 800998e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	4413      	add	r3, r2
 8009996:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009998:	2208      	movs	r2, #8
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	1a9b      	subs	r3, r3, r2
 800999e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f023 0307 	bic.w	r3, r3, #7
 80099a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4a15      	ldr	r2, [pc, #84]	; (8009a00 <prvHeapInit+0xb4>)
 80099ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099ae:	4b14      	ldr	r3, [pc, #80]	; (8009a00 <prvHeapInit+0xb4>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2200      	movs	r2, #0
 80099b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099b6:	4b12      	ldr	r3, [pc, #72]	; (8009a00 <prvHeapInit+0xb4>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	1ad2      	subs	r2, r2, r3
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099cc:	4b0c      	ldr	r3, [pc, #48]	; (8009a00 <prvHeapInit+0xb4>)
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	4a0a      	ldr	r2, [pc, #40]	; (8009a04 <prvHeapInit+0xb8>)
 80099da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	4a09      	ldr	r2, [pc, #36]	; (8009a08 <prvHeapInit+0xbc>)
 80099e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099e4:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <prvHeapInit+0xc0>)
 80099e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099ea:	601a      	str	r2, [r3, #0]
}
 80099ec:	bf00      	nop
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	20003874 	.word	0x20003874
 80099fc:	20009b84 	.word	0x20009b84
 8009a00:	20009b8c 	.word	0x20009b8c
 8009a04:	20009b94 	.word	0x20009b94
 8009a08:	20009b90 	.word	0x20009b90
 8009a0c:	20009ba0 	.word	0x20009ba0

08009a10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a18:	4b28      	ldr	r3, [pc, #160]	; (8009abc <prvInsertBlockIntoFreeList+0xac>)
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	e002      	b.n	8009a24 <prvInsertBlockIntoFreeList+0x14>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d8f7      	bhi.n	8009a1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	4413      	add	r3, r2
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d108      	bne.n	8009a52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	441a      	add	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	441a      	add	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d118      	bne.n	8009a98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	4b15      	ldr	r3, [pc, #84]	; (8009ac0 <prvInsertBlockIntoFreeList+0xb0>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d00d      	beq.n	8009a8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	441a      	add	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	e008      	b.n	8009aa0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a8e:	4b0c      	ldr	r3, [pc, #48]	; (8009ac0 <prvInsertBlockIntoFreeList+0xb0>)
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	601a      	str	r2, [r3, #0]
 8009a96:	e003      	b.n	8009aa0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d002      	beq.n	8009aae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009aae:	bf00      	nop
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	20009b84 	.word	0x20009b84
 8009ac0:	20009b8c 	.word	0x20009b8c

08009ac4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	330c      	adds	r3, #12
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f001 fff7 	bl	800bacc <tcpip_send_msg_wait_sem>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d103      	bne.n	8009af2 <netconn_apimsg+0x2e>
    return apimsg->err;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009af0:	e001      	b.n	8009af6 <netconn_apimsg+0x32>
  }
  return err;
 8009af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b08c      	sub	sp, #48	; 0x30
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	603a      	str	r2, [r7, #0]
 8009b0a:	71fb      	strb	r3, [r7, #7]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 ff21 	bl	800a95c <netconn_alloc>
 8009b1a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d054      	beq.n	8009bcc <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009b22:	79bb      	ldrb	r3, [r7, #6]
 8009b24:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8009b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b28:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009b2a:	f107 0308 	add.w	r3, r7, #8
 8009b2e:	4619      	mov	r1, r3
 8009b30:	4829      	ldr	r0, [pc, #164]	; (8009bd8 <netconn_new_with_proto_and_callback+0xd8>)
 8009b32:	f7ff ffc7 	bl	8009ac4 <netconn_apimsg>
 8009b36:	4603      	mov	r3, r0
 8009b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009b3c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d043      	beq.n	8009bcc <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <netconn_new_with_proto_and_callback+0x58>
 8009b4c:	4b23      	ldr	r3, [pc, #140]	; (8009bdc <netconn_new_with_proto_and_callback+0xdc>)
 8009b4e:	22a3      	movs	r2, #163	; 0xa3
 8009b50:	4923      	ldr	r1, [pc, #140]	; (8009be0 <netconn_new_with_proto_and_callback+0xe0>)
 8009b52:	4824      	ldr	r0, [pc, #144]	; (8009be4 <netconn_new_with_proto_and_callback+0xe4>)
 8009b54:	f00d fafc 	bl	8017150 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5a:	3310      	adds	r3, #16
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f00c ff96 	bl	8016a8e <sys_mbox_valid>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d105      	bne.n	8009b74 <netconn_new_with_proto_and_callback+0x74>
 8009b68:	4b1c      	ldr	r3, [pc, #112]	; (8009bdc <netconn_new_with_proto_and_callback+0xdc>)
 8009b6a:	22a4      	movs	r2, #164	; 0xa4
 8009b6c:	491e      	ldr	r1, [pc, #120]	; (8009be8 <netconn_new_with_proto_and_callback+0xe8>)
 8009b6e:	481d      	ldr	r0, [pc, #116]	; (8009be4 <netconn_new_with_proto_and_callback+0xe4>)
 8009b70:	f00d faee 	bl	8017150 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b76:	3314      	adds	r3, #20
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f00c ff88 	bl	8016a8e <sys_mbox_valid>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d005      	beq.n	8009b90 <netconn_new_with_proto_and_callback+0x90>
 8009b84:	4b15      	ldr	r3, [pc, #84]	; (8009bdc <netconn_new_with_proto_and_callback+0xdc>)
 8009b86:	22a6      	movs	r2, #166	; 0xa6
 8009b88:	4918      	ldr	r1, [pc, #96]	; (8009bec <netconn_new_with_proto_and_callback+0xec>)
 8009b8a:	4816      	ldr	r0, [pc, #88]	; (8009be4 <netconn_new_with_proto_and_callback+0xe4>)
 8009b8c:	f00d fae0 	bl	8017150 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b92:	330c      	adds	r3, #12
 8009b94:	4618      	mov	r0, r3
 8009b96:	f00d f80b 	bl	8016bb0 <sys_sem_valid>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d105      	bne.n	8009bac <netconn_new_with_proto_and_callback+0xac>
 8009ba0:	4b0e      	ldr	r3, [pc, #56]	; (8009bdc <netconn_new_with_proto_and_callback+0xdc>)
 8009ba2:	22a9      	movs	r2, #169	; 0xa9
 8009ba4:	4912      	ldr	r1, [pc, #72]	; (8009bf0 <netconn_new_with_proto_and_callback+0xf0>)
 8009ba6:	480f      	ldr	r0, [pc, #60]	; (8009be4 <netconn_new_with_proto_and_callback+0xe4>)
 8009ba8:	f00d fad2 	bl	8017150 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bae:	330c      	adds	r3, #12
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f00c fff0 	bl	8016b96 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb8:	3310      	adds	r3, #16
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f00c fee0 	bl	8016980 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009bc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bc2:	2007      	movs	r0, #7
 8009bc4:	f002 fcea 	bl	800c59c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e000      	b.n	8009bce <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3730      	adds	r7, #48	; 0x30
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	0800a931 	.word	0x0800a931
 8009bdc:	08018008 	.word	0x08018008
 8009be0:	0801803c 	.word	0x0801803c
 8009be4:	08018060 	.word	0x08018060
 8009be8:	08018088 	.word	0x08018088
 8009bec:	080180a0 	.word	0x080180a0
 8009bf0:	080180c4 	.word	0x080180c4

08009bf4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b08c      	sub	sp, #48	; 0x30
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	e014      	b.n	8009c30 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009c0a:	2329      	movs	r3, #41	; 0x29
 8009c0c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009c0e:	f107 030c 	add.w	r3, r7, #12
 8009c12:	4619      	mov	r1, r3
 8009c14:	4808      	ldr	r0, [pc, #32]	; (8009c38 <netconn_prepare_delete+0x44>)
 8009c16:	f7ff ff55 	bl	8009ac4 <netconn_apimsg>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009c20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <netconn_prepare_delete+0x3a>
    return err;
 8009c28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009c2c:	e000      	b.n	8009c30 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3730      	adds	r7, #48	; 0x30
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	0800ae9d 	.word	0x0800ae9d

08009c3c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <netconn_delete+0x12>
    return ERR_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	e00d      	b.n	8009c6a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff ffd0 	bl	8009bf4 <netconn_prepare_delete>
 8009c54:	4603      	mov	r3, r0
 8009c56:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d102      	bne.n	8009c66 <netconn_delete+0x2a>
    netconn_free(conn);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fee9 	bl	800aa38 <netconn_free>
  }
  return err;
 8009c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
	...

08009c74 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08e      	sub	sp, #56	; 0x38
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d109      	bne.n	8009c9c <netconn_bind+0x28>
 8009c88:	4b11      	ldr	r3, [pc, #68]	; (8009cd0 <netconn_bind+0x5c>)
 8009c8a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8009c8e:	4911      	ldr	r1, [pc, #68]	; (8009cd4 <netconn_bind+0x60>)
 8009c90:	4811      	ldr	r0, [pc, #68]	; (8009cd8 <netconn_bind+0x64>)
 8009c92:	f00d fa5d 	bl	8017150 <iprintf>
 8009c96:	f06f 030f 	mvn.w	r3, #15
 8009c9a:	e015      	b.n	8009cc8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d101      	bne.n	8009ca6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8009ca2:	4b0e      	ldr	r3, [pc, #56]	; (8009cdc <netconn_bind+0x68>)
 8009ca4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009cae:	88fb      	ldrh	r3, [r7, #6]
 8009cb0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8009cb2:	f107 0314 	add.w	r3, r7, #20
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	4809      	ldr	r0, [pc, #36]	; (8009ce0 <netconn_bind+0x6c>)
 8009cba:	f7ff ff03 	bl	8009ac4 <netconn_apimsg>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009cc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3738      	adds	r7, #56	; 0x38
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	08018008 	.word	0x08018008
 8009cd4:	08018140 	.word	0x08018140
 8009cd8:	08018060 	.word	0x08018060
 8009cdc:	0801b60c 	.word	0x0801b60c
 8009ce0:	0800b065 	.word	0x0800b065

08009ce4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b088      	sub	sp, #32
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d109      	bne.n	8009d10 <netconn_recv_data+0x2c>
 8009cfc:	4b58      	ldr	r3, [pc, #352]	; (8009e60 <netconn_recv_data+0x17c>)
 8009cfe:	f44f 7212 	mov.w	r2, #584	; 0x248
 8009d02:	4958      	ldr	r1, [pc, #352]	; (8009e64 <netconn_recv_data+0x180>)
 8009d04:	4858      	ldr	r0, [pc, #352]	; (8009e68 <netconn_recv_data+0x184>)
 8009d06:	f00d fa23 	bl	8017150 <iprintf>
 8009d0a:	f06f 030f 	mvn.w	r3, #15
 8009d0e:	e0a2      	b.n	8009e56 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d109      	bne.n	8009d30 <netconn_recv_data+0x4c>
 8009d1c:	4b50      	ldr	r3, [pc, #320]	; (8009e60 <netconn_recv_data+0x17c>)
 8009d1e:	f240 224a 	movw	r2, #586	; 0x24a
 8009d22:	4952      	ldr	r1, [pc, #328]	; (8009e6c <netconn_recv_data+0x188>)
 8009d24:	4850      	ldr	r0, [pc, #320]	; (8009e68 <netconn_recv_data+0x184>)
 8009d26:	f00d fa13 	bl	8017150 <iprintf>
 8009d2a:	f06f 030f 	mvn.w	r3, #15
 8009d2e:	e092      	b.n	8009e56 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3310      	adds	r3, #16
 8009d34:	4618      	mov	r0, r3
 8009d36:	f00c feaa 	bl	8016a8e <sys_mbox_valid>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10e      	bne.n	8009d5e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 fa45 	bl	800a1d0 <netconn_err>
 8009d46:	4603      	mov	r3, r0
 8009d48:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009d4a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d002      	beq.n	8009d58 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8009d52:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009d56:	e07e      	b.n	8009e56 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009d58:	f06f 030a 	mvn.w	r3, #10
 8009d5c:	e07b      	b.n	8009e56 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	7f1b      	ldrb	r3, [r3, #28]
 8009d62:	f003 0302 	and.w	r3, r3, #2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10f      	bne.n	8009d8a <netconn_recv_data+0xa6>
 8009d6a:	79fb      	ldrb	r3, [r7, #7]
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10a      	bne.n	8009d8a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	7f1b      	ldrb	r3, [r3, #28]
 8009d78:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d104      	bne.n	8009d8a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d023      	beq.n	8009dd2 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3310      	adds	r3, #16
 8009d8e:	f107 0218 	add.w	r2, r7, #24
 8009d92:	4611      	mov	r1, r2
 8009d94:	4618      	mov	r0, r3
 8009d96:	f00c fe5e 	bl	8016a56 <sys_arch_mbox_tryfetch>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da0:	d11f      	bne.n	8009de2 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 fa14 	bl	800a1d0 <netconn_err>
 8009da8:	4603      	mov	r3, r0
 8009daa:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009dac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009db4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009db8:	e04d      	b.n	8009e56 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	7f1b      	ldrb	r3, [r3, #28]
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <netconn_recv_data+0xe8>
        return ERR_CONN;
 8009dc6:	f06f 030a 	mvn.w	r3, #10
 8009dca:	e044      	b.n	8009e56 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009dcc:	f06f 0306 	mvn.w	r3, #6
 8009dd0:	e041      	b.n	8009e56 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3310      	adds	r3, #16
 8009dd6:	f107 0118 	add.w	r1, r7, #24
 8009dda:	2200      	movs	r2, #0
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f00c fdfb 	bl	80169d8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009dea:	2b10      	cmp	r3, #16
 8009dec:	d117      	bne.n	8009e1e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	f107 0217 	add.w	r2, r7, #23
 8009df4:	4611      	mov	r1, r2
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fa3c 	bl	800a274 <lwip_netconn_is_err_msg>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d009      	beq.n	8009e16 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8009e02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e06:	f113 0f0f 	cmn.w	r3, #15
 8009e0a:	d101      	bne.n	8009e10 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	e022      	b.n	8009e56 <netconn_recv_data+0x172>
      }
      return err;
 8009e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e14:	e01f      	b.n	8009e56 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	891b      	ldrh	r3, [r3, #8]
 8009e1a:	83fb      	strh	r3, [r7, #30]
 8009e1c:	e00d      	b.n	8009e3a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d106      	bne.n	8009e32 <netconn_recv_data+0x14e>
 8009e24:	4b0e      	ldr	r3, [pc, #56]	; (8009e60 <netconn_recv_data+0x17c>)
 8009e26:	f240 2291 	movw	r2, #657	; 0x291
 8009e2a:	4911      	ldr	r1, [pc, #68]	; (8009e70 <netconn_recv_data+0x18c>)
 8009e2c:	480e      	ldr	r0, [pc, #56]	; (8009e68 <netconn_recv_data+0x184>)
 8009e2e:	f00d f98f 	bl	8017150 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	891b      	ldrh	r3, [r3, #8]
 8009e38:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d005      	beq.n	8009e4e <netconn_recv_data+0x16a>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e46:	8bfa      	ldrh	r2, [r7, #30]
 8009e48:	2101      	movs	r1, #1
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009e4e:	69ba      	ldr	r2, [r7, #24]
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3720      	adds	r7, #32
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	08018008 	.word	0x08018008
 8009e64:	08018220 	.word	0x08018220
 8009e68:	08018060 	.word	0x08018060
 8009e6c:	08018240 	.word	0x08018240
 8009e70:	0801825c 	.word	0x0801825c

08009e74 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d005      	beq.n	8009e92 <netconn_tcp_recvd_msg+0x1e>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e8e:	2b10      	cmp	r3, #16
 8009e90:	d009      	beq.n	8009ea6 <netconn_tcp_recvd_msg+0x32>
 8009e92:	4b0c      	ldr	r3, [pc, #48]	; (8009ec4 <netconn_tcp_recvd_msg+0x50>)
 8009e94:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009e98:	490b      	ldr	r1, [pc, #44]	; (8009ec8 <netconn_tcp_recvd_msg+0x54>)
 8009e9a:	480c      	ldr	r0, [pc, #48]	; (8009ecc <netconn_tcp_recvd_msg+0x58>)
 8009e9c:	f00d f958 	bl	8017150 <iprintf>
 8009ea0:	f06f 030f 	mvn.w	r3, #15
 8009ea4:	e00a      	b.n	8009ebc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	4806      	ldr	r0, [pc, #24]	; (8009ed0 <netconn_tcp_recvd_msg+0x5c>)
 8009eb6:	f7ff fe05 	bl	8009ac4 <netconn_apimsg>
 8009eba:	4603      	mov	r3, r0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	08018008 	.word	0x08018008
 8009ec8:	08018268 	.word	0x08018268
 8009ecc:	08018060 	.word	0x08018060
 8009ed0:	0800b173 	.word	0x0800b173

08009ed4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b090      	sub	sp, #64	; 0x40
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3310      	adds	r3, #16
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f00c fdd1 	bl	8016a8e <sys_mbox_valid>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d102      	bne.n	8009ef8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009ef2:	f06f 030a 	mvn.w	r3, #10
 8009ef6:	e06d      	b.n	8009fd4 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	7f1b      	ldrb	r3, [r3, #28]
 8009efc:	b25b      	sxtb	r3, r3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	da07      	bge.n	8009f12 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	7f1b      	ldrb	r3, [r3, #28]
 8009f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009f10:	e039      	b.n	8009f86 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009f12:	79fb      	ldrb	r3, [r7, #7]
 8009f14:	461a      	mov	r2, r3
 8009f16:	68b9      	ldr	r1, [r7, #8]
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f7ff fee3 	bl	8009ce4 <netconn_recv_data>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8009f24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009f2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009f30:	e050      	b.n	8009fd4 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009f38:	79fb      	ldrb	r3, [r7, #7]
 8009f3a:	f003 0308 	and.w	r3, r3, #8
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10e      	bne.n	8009f60 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <netconn_recv_data_tcp+0x7a>
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	891b      	ldrh	r3, [r3, #8]
 8009f4c:	e000      	b.n	8009f50 <netconn_recv_data_tcp+0x7c>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009f52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009f54:	f107 0214 	add.w	r2, r7, #20
 8009f58:	4619      	mov	r1, r3
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f7ff ff8a 	bl	8009e74 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d134      	bne.n	8009fd0 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8009f66:	79fb      	ldrb	r3, [r7, #7]
 8009f68:	f003 0310 	and.w	r3, r3, #16
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d009      	beq.n	8009f84 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	7f1b      	ldrb	r3, [r3, #28]
 8009f74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009f7e:	f06f 0306 	mvn.w	r3, #6
 8009f82:	e027      	b.n	8009fd4 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8009f84:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d005      	beq.n	8009f9a <netconn_recv_data_tcp+0xc6>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f92:	2200      	movs	r2, #0
 8009f94:	2101      	movs	r1, #1
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10f      	bne.n	8009fc2 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f000 f914 	bl	800a1d0 <netconn_err>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009fae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <netconn_recv_data_tcp+0xe8>
          return err;
 8009fb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009fba:	e00b      	b.n	8009fd4 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009fbc:	f06f 030d 	mvn.w	r3, #13
 8009fc0:	e008      	b.n	8009fd4 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009fc2:	2101      	movs	r1, #1
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 f8d3 	bl	800a170 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009fca:	f06f 030e 	mvn.w	r3, #14
 8009fce:	e001      	b.n	8009fd4 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009fd0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3740      	adds	r7, #64	; 0x40
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d109      	bne.n	800a004 <netconn_recv+0x28>
 8009ff0:	4b32      	ldr	r3, [pc, #200]	; (800a0bc <netconn_recv+0xe0>)
 8009ff2:	f240 3263 	movw	r2, #867	; 0x363
 8009ff6:	4932      	ldr	r1, [pc, #200]	; (800a0c0 <netconn_recv+0xe4>)
 8009ff8:	4832      	ldr	r0, [pc, #200]	; (800a0c4 <netconn_recv+0xe8>)
 8009ffa:	f00d f8a9 	bl	8017150 <iprintf>
 8009ffe:	f06f 030f 	mvn.w	r3, #15
 800a002:	e056      	b.n	800a0b2 <netconn_recv+0xd6>
  *new_buf = NULL;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2200      	movs	r2, #0
 800a008:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d109      	bne.n	800a024 <netconn_recv+0x48>
 800a010:	4b2a      	ldr	r3, [pc, #168]	; (800a0bc <netconn_recv+0xe0>)
 800a012:	f240 3265 	movw	r2, #869	; 0x365
 800a016:	492c      	ldr	r1, [pc, #176]	; (800a0c8 <netconn_recv+0xec>)
 800a018:	482a      	ldr	r0, [pc, #168]	; (800a0c4 <netconn_recv+0xe8>)
 800a01a:	f00d f899 	bl	8017150 <iprintf>
 800a01e:	f06f 030f 	mvn.w	r3, #15
 800a022:	e046      	b.n	800a0b2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a02c:	2b10      	cmp	r3, #16
 800a02e:	d13a      	bne.n	800a0a6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800a030:	2300      	movs	r3, #0
 800a032:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a034:	2006      	movs	r0, #6
 800a036:	f002 fa5f 	bl	800c4f8 <memp_malloc>
 800a03a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d102      	bne.n	800a048 <netconn_recv+0x6c>
      return ERR_MEM;
 800a042:	f04f 33ff 	mov.w	r3, #4294967295
 800a046:	e034      	b.n	800a0b2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800a048:	f107 030c 	add.w	r3, r7, #12
 800a04c:	2200      	movs	r2, #0
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff ff3f 	bl	8009ed4 <netconn_recv_data_tcp>
 800a056:	4603      	mov	r3, r0
 800a058:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a05a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d006      	beq.n	800a070 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800a062:	6979      	ldr	r1, [r7, #20]
 800a064:	2006      	movs	r0, #6
 800a066:	f002 fa99 	bl	800c59c <memp_free>
      return err;
 800a06a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a06e:	e020      	b.n	800a0b2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d106      	bne.n	800a084 <netconn_recv+0xa8>
 800a076:	4b11      	ldr	r3, [pc, #68]	; (800a0bc <netconn_recv+0xe0>)
 800a078:	f240 3279 	movw	r2, #889	; 0x379
 800a07c:	4913      	ldr	r1, [pc, #76]	; (800a0cc <netconn_recv+0xf0>)
 800a07e:	4811      	ldr	r0, [pc, #68]	; (800a0c4 <netconn_recv+0xe8>)
 800a080:	f00d f866 	bl	8017150 <iprintf>

    buf->p = p;
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2200      	movs	r2, #0
 800a094:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2200      	movs	r2, #0
 800a09a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	e005      	b.n	800a0b2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f7ff fe1a 	bl	8009ce4 <netconn_recv_data>
 800a0b0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	08018008 	.word	0x08018008
 800a0c0:	08018220 	.word	0x08018220
 800a0c4:	08018060 	.word	0x08018060
 800a0c8:	08018240 	.word	0x08018240
 800a0cc:	080182b8 	.word	0x080182b8

0800a0d0 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d011      	beq.n	800a108 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <netconn_sendto+0x20>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	e000      	b.n	800a0f2 <netconn_sendto+0x22>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	887a      	ldrh	r2, [r7, #2]
 800a0fa:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 800a0fc:	68b9      	ldr	r1, [r7, #8]
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 f808 	bl	800a114 <netconn_send>
 800a104:	4603      	mov	r3, r0
 800a106:	e001      	b.n	800a10c <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 800a108:	f06f 0305 	mvn.w	r3, #5
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08c      	sub	sp, #48	; 0x30
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d109      	bne.n	800a138 <netconn_send+0x24>
 800a124:	4b0e      	ldr	r3, [pc, #56]	; (800a160 <netconn_send+0x4c>)
 800a126:	f240 32b2 	movw	r2, #946	; 0x3b2
 800a12a:	490e      	ldr	r1, [pc, #56]	; (800a164 <netconn_send+0x50>)
 800a12c:	480e      	ldr	r0, [pc, #56]	; (800a168 <netconn_send+0x54>)
 800a12e:	f00d f80f 	bl	8017150 <iprintf>
 800a132:	f06f 030f 	mvn.w	r3, #15
 800a136:	e00e      	b.n	800a156 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800a140:	f107 030c 	add.w	r3, r7, #12
 800a144:	4619      	mov	r1, r3
 800a146:	4809      	ldr	r0, [pc, #36]	; (800a16c <netconn_send+0x58>)
 800a148:	f7ff fcbc 	bl	8009ac4 <netconn_apimsg>
 800a14c:	4603      	mov	r3, r0
 800a14e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a152:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a156:	4618      	mov	r0, r3
 800a158:	3730      	adds	r7, #48	; 0x30
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	08018008 	.word	0x08018008
 800a164:	080182c4 	.word	0x080182c4
 800a168:	08018060 	.word	0x08018060
 800a16c:	0800b0d9 	.word	0x0800b0d9

0800a170 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08c      	sub	sp, #48	; 0x30
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	460b      	mov	r3, r1
 800a17a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d109      	bne.n	800a196 <netconn_close_shutdown+0x26>
 800a182:	4b0f      	ldr	r3, [pc, #60]	; (800a1c0 <netconn_close_shutdown+0x50>)
 800a184:	f240 4247 	movw	r2, #1095	; 0x447
 800a188:	490e      	ldr	r1, [pc, #56]	; (800a1c4 <netconn_close_shutdown+0x54>)
 800a18a:	480f      	ldr	r0, [pc, #60]	; (800a1c8 <netconn_close_shutdown+0x58>)
 800a18c:	f00c ffe0 	bl	8017150 <iprintf>
 800a190:	f06f 030f 	mvn.w	r3, #15
 800a194:	e010      	b.n	800a1b8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a19a:	78fb      	ldrb	r3, [r7, #3]
 800a19c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a19e:	2329      	movs	r3, #41	; 0x29
 800a1a0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a1a2:	f107 030c 	add.w	r3, r7, #12
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4808      	ldr	r0, [pc, #32]	; (800a1cc <netconn_close_shutdown+0x5c>)
 800a1aa:	f7ff fc8b 	bl	8009ac4 <netconn_apimsg>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a1b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3730      	adds	r7, #48	; 0x30
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	08018008 	.word	0x08018008
 800a1c4:	08018344 	.word	0x08018344
 800a1c8:	08018060 	.word	0x08018060
 800a1cc:	0800b575 	.word	0x0800b575

0800a1d0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <netconn_err+0x12>
    return ERR_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	e00d      	b.n	800a1fe <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a1e2:	f00c fd6f 	bl	8016cc4 <sys_arch_protect>
 800a1e6:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	7a1b      	ldrb	r3, [r3, #8]
 800a1ec:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f00c fd73 	bl	8016ce0 <sys_arch_unprotect>
  return err;
 800a1fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800a212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a216:	f113 0f0d 	cmn.w	r3, #13
 800a21a:	d009      	beq.n	800a230 <lwip_netconn_err_to_msg+0x28>
 800a21c:	f113 0f0d 	cmn.w	r3, #13
 800a220:	dc0c      	bgt.n	800a23c <lwip_netconn_err_to_msg+0x34>
 800a222:	f113 0f0f 	cmn.w	r3, #15
 800a226:	d007      	beq.n	800a238 <lwip_netconn_err_to_msg+0x30>
 800a228:	f113 0f0e 	cmn.w	r3, #14
 800a22c:	d002      	beq.n	800a234 <lwip_netconn_err_to_msg+0x2c>
 800a22e:	e005      	b.n	800a23c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800a230:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <lwip_netconn_err_to_msg+0x54>)
 800a232:	e00e      	b.n	800a252 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800a234:	4b0a      	ldr	r3, [pc, #40]	; (800a260 <lwip_netconn_err_to_msg+0x58>)
 800a236:	e00c      	b.n	800a252 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800a238:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <lwip_netconn_err_to_msg+0x5c>)
 800a23a:	e00a      	b.n	800a252 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a23c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d005      	beq.n	800a250 <lwip_netconn_err_to_msg+0x48>
 800a244:	4b08      	ldr	r3, [pc, #32]	; (800a268 <lwip_netconn_err_to_msg+0x60>)
 800a246:	227d      	movs	r2, #125	; 0x7d
 800a248:	4908      	ldr	r1, [pc, #32]	; (800a26c <lwip_netconn_err_to_msg+0x64>)
 800a24a:	4809      	ldr	r0, [pc, #36]	; (800a270 <lwip_netconn_err_to_msg+0x68>)
 800a24c:	f00c ff80 	bl	8017150 <iprintf>
      return NULL;
 800a250:	2300      	movs	r3, #0
  }
}
 800a252:	4618      	mov	r0, r3
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	0801b4f8 	.word	0x0801b4f8
 800a260:	0801b4f9 	.word	0x0801b4f9
 800a264:	0801b4fa 	.word	0x0801b4fa
 800a268:	08018360 	.word	0x08018360
 800a26c:	08018394 	.word	0x08018394
 800a270:	080183a4 	.word	0x080183a4

0800a274 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d105      	bne.n	800a290 <lwip_netconn_is_err_msg+0x1c>
 800a284:	4b12      	ldr	r3, [pc, #72]	; (800a2d0 <lwip_netconn_is_err_msg+0x5c>)
 800a286:	2285      	movs	r2, #133	; 0x85
 800a288:	4912      	ldr	r1, [pc, #72]	; (800a2d4 <lwip_netconn_is_err_msg+0x60>)
 800a28a:	4813      	ldr	r0, [pc, #76]	; (800a2d8 <lwip_netconn_is_err_msg+0x64>)
 800a28c:	f00c ff60 	bl	8017150 <iprintf>

  if (msg == &netconn_aborted) {
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a12      	ldr	r2, [pc, #72]	; (800a2dc <lwip_netconn_is_err_msg+0x68>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d104      	bne.n	800a2a2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	22f3      	movs	r2, #243	; 0xf3
 800a29c:	701a      	strb	r2, [r3, #0]
    return 1;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e012      	b.n	800a2c8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a0e      	ldr	r2, [pc, #56]	; (800a2e0 <lwip_netconn_is_err_msg+0x6c>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d104      	bne.n	800a2b4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	22f2      	movs	r2, #242	; 0xf2
 800a2ae:	701a      	strb	r2, [r3, #0]
    return 1;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e009      	b.n	800a2c8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a0b      	ldr	r2, [pc, #44]	; (800a2e4 <lwip_netconn_is_err_msg+0x70>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d104      	bne.n	800a2c6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	22f1      	movs	r2, #241	; 0xf1
 800a2c0:	701a      	strb	r2, [r3, #0]
    return 1;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e000      	b.n	800a2c8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	08018360 	.word	0x08018360
 800a2d4:	080183cc 	.word	0x080183cc
 800a2d8:	080183a4 	.word	0x080183a4
 800a2dc:	0801b4f8 	.word	0x0801b4f8
 800a2e0:	0801b4f9 	.word	0x0801b4f9
 800a2e4:	0801b4fa 	.word	0x0801b4fa

0800a2e8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b088      	sub	sp, #32
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
 800a2f4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d105      	bne.n	800a308 <recv_udp+0x20>
 800a2fc:	4b34      	ldr	r3, [pc, #208]	; (800a3d0 <recv_udp+0xe8>)
 800a2fe:	22e5      	movs	r2, #229	; 0xe5
 800a300:	4934      	ldr	r1, [pc, #208]	; (800a3d4 <recv_udp+0xec>)
 800a302:	4835      	ldr	r0, [pc, #212]	; (800a3d8 <recv_udp+0xf0>)
 800a304:	f00c ff24 	bl	8017150 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d105      	bne.n	800a31a <recv_udp+0x32>
 800a30e:	4b30      	ldr	r3, [pc, #192]	; (800a3d0 <recv_udp+0xe8>)
 800a310:	22e6      	movs	r2, #230	; 0xe6
 800a312:	4932      	ldr	r1, [pc, #200]	; (800a3dc <recv_udp+0xf4>)
 800a314:	4830      	ldr	r0, [pc, #192]	; (800a3d8 <recv_udp+0xf0>)
 800a316:	f00c ff1b 	bl	8017150 <iprintf>
  conn = (struct netconn *)arg;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d103      	bne.n	800a32c <recv_udp+0x44>
    pbuf_free(p);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f002 ff79 	bl	800d21c <pbuf_free>
    return;
 800a32a:	e04d      	b.n	800a3c8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	429a      	cmp	r2, r3
 800a334:	d005      	beq.n	800a342 <recv_udp+0x5a>
 800a336:	4b26      	ldr	r3, [pc, #152]	; (800a3d0 <recv_udp+0xe8>)
 800a338:	22ee      	movs	r2, #238	; 0xee
 800a33a:	4929      	ldr	r1, [pc, #164]	; (800a3e0 <recv_udp+0xf8>)
 800a33c:	4826      	ldr	r0, [pc, #152]	; (800a3d8 <recv_udp+0xf0>)
 800a33e:	f00c ff07 	bl	8017150 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	3310      	adds	r3, #16
 800a346:	4618      	mov	r0, r3
 800a348:	f00c fba1 	bl	8016a8e <sys_mbox_valid>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d103      	bne.n	800a35a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f002 ff62 	bl	800d21c <pbuf_free>
    return;
 800a358:	e036      	b.n	800a3c8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a35a:	2006      	movs	r0, #6
 800a35c:	f002 f8cc 	bl	800c4f8 <memp_malloc>
 800a360:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d103      	bne.n	800a370 <recv_udp+0x88>
    pbuf_free(p);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f002 ff57 	bl	800d21c <pbuf_free>
    return;
 800a36e:	e02b      	b.n	800a3c8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d002      	beq.n	800a388 <recv_udp+0xa0>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	e000      	b.n	800a38a <recv_udp+0xa2>
 800a388:	2300      	movs	r3, #0
 800a38a:	69ba      	ldr	r2, [r7, #24]
 800a38c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a392:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	891b      	ldrh	r3, [r3, #8]
 800a398:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	3310      	adds	r3, #16
 800a39e:	69b9      	ldr	r1, [r7, #24]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f00c faff 	bl	80169a4 <sys_mbox_trypost>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a3ac:	69b8      	ldr	r0, [r7, #24]
 800a3ae:	f001 f981 	bl	800b6b4 <netbuf_delete>
    return;
 800a3b2:	e009      	b.n	800a3c8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d005      	beq.n	800a3c8 <recv_udp+0xe0>
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	8afa      	ldrh	r2, [r7, #22]
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	69f8      	ldr	r0, [r7, #28]
 800a3c6:	4798      	blx	r3
  }
}
 800a3c8:	3720      	adds	r7, #32
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	08018360 	.word	0x08018360
 800a3d4:	080183d8 	.word	0x080183d8
 800a3d8:	080183a4 	.word	0x080183a4
 800a3dc:	080183fc 	.word	0x080183fc
 800a3e0:	0801841c 	.word	0x0801841c

0800a3e4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d106      	bne.n	800a406 <recv_tcp+0x22>
 800a3f8:	4b36      	ldr	r3, [pc, #216]	; (800a4d4 <recv_tcp+0xf0>)
 800a3fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a3fe:	4936      	ldr	r1, [pc, #216]	; (800a4d8 <recv_tcp+0xf4>)
 800a400:	4836      	ldr	r0, [pc, #216]	; (800a4dc <recv_tcp+0xf8>)
 800a402:	f00c fea5 	bl	8017150 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d106      	bne.n	800a41a <recv_tcp+0x36>
 800a40c:	4b31      	ldr	r3, [pc, #196]	; (800a4d4 <recv_tcp+0xf0>)
 800a40e:	f240 122d 	movw	r2, #301	; 0x12d
 800a412:	4933      	ldr	r1, [pc, #204]	; (800a4e0 <recv_tcp+0xfc>)
 800a414:	4831      	ldr	r0, [pc, #196]	; (800a4dc <recv_tcp+0xf8>)
 800a416:	f00c fe9b 	bl	8017150 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a41a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d006      	beq.n	800a430 <recv_tcp+0x4c>
 800a422:	4b2c      	ldr	r3, [pc, #176]	; (800a4d4 <recv_tcp+0xf0>)
 800a424:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a428:	492e      	ldr	r1, [pc, #184]	; (800a4e4 <recv_tcp+0x100>)
 800a42a:	482c      	ldr	r0, [pc, #176]	; (800a4dc <recv_tcp+0xf8>)
 800a42c:	f00c fe90 	bl	8017150 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d102      	bne.n	800a440 <recv_tcp+0x5c>
    return ERR_VAL;
 800a43a:	f06f 0305 	mvn.w	r3, #5
 800a43e:	e045      	b.n	800a4cc <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	429a      	cmp	r2, r3
 800a448:	d006      	beq.n	800a458 <recv_tcp+0x74>
 800a44a:	4b22      	ldr	r3, [pc, #136]	; (800a4d4 <recv_tcp+0xf0>)
 800a44c:	f240 1235 	movw	r2, #309	; 0x135
 800a450:	4925      	ldr	r1, [pc, #148]	; (800a4e8 <recv_tcp+0x104>)
 800a452:	4822      	ldr	r0, [pc, #136]	; (800a4dc <recv_tcp+0xf8>)
 800a454:	f00c fe7c 	bl	8017150 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	3310      	adds	r3, #16
 800a45c:	4618      	mov	r0, r3
 800a45e:	f00c fb16 	bl	8016a8e <sys_mbox_valid>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10d      	bne.n	800a484 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d008      	beq.n	800a480 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	891b      	ldrh	r3, [r3, #8]
 800a472:	4619      	mov	r1, r3
 800a474:	68b8      	ldr	r0, [r7, #8]
 800a476:	f003 fdcf 	bl	800e018 <tcp_recved>
      pbuf_free(p);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f002 fece 	bl	800d21c <pbuf_free>
    }
    return ERR_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	e023      	b.n	800a4cc <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d005      	beq.n	800a496 <recv_tcp+0xb2>
    msg = p;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	891b      	ldrh	r3, [r3, #8]
 800a492:	83fb      	strh	r3, [r7, #30]
 800a494:	e003      	b.n	800a49e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a496:	4b15      	ldr	r3, [pc, #84]	; (800a4ec <recv_tcp+0x108>)
 800a498:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	3310      	adds	r3, #16
 800a4a2:	69b9      	ldr	r1, [r7, #24]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f00c fa7d 	bl	80169a4 <sys_mbox_trypost>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d002      	beq.n	800a4b6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b4:	e00a      	b.n	800a4cc <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d005      	beq.n	800a4ca <recv_tcp+0xe6>
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	8bfa      	ldrh	r2, [r7, #30]
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	6978      	ldr	r0, [r7, #20]
 800a4c8:	4798      	blx	r3
  }

  return ERR_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3720      	adds	r7, #32
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	08018360 	.word	0x08018360
 800a4d8:	0801843c 	.word	0x0801843c
 800a4dc:	080183a4 	.word	0x080183a4
 800a4e0:	08018460 	.word	0x08018460
 800a4e4:	08018480 	.word	0x08018480
 800a4e8:	08018498 	.word	0x08018498
 800a4ec:	0801b4fa 	.word	0x0801b4fa

0800a4f0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d106      	bne.n	800a512 <poll_tcp+0x22>
 800a504:	4b29      	ldr	r3, [pc, #164]	; (800a5ac <poll_tcp+0xbc>)
 800a506:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a50a:	4929      	ldr	r1, [pc, #164]	; (800a5b0 <poll_tcp+0xc0>)
 800a50c:	4829      	ldr	r0, [pc, #164]	; (800a5b4 <poll_tcp+0xc4>)
 800a50e:	f00c fe1f 	bl	8017150 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	785b      	ldrb	r3, [r3, #1]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d104      	bne.n	800a524 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a51a:	2101      	movs	r1, #1
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f000 fe5d 	bl	800b1dc <lwip_netconn_do_writemore>
 800a522:	e016      	b.n	800a552 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	785b      	ldrb	r3, [r3, #1]
 800a528:	2b04      	cmp	r3, #4
 800a52a:	d112      	bne.n	800a552 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6a1b      	ldr	r3, [r3, #32]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00a      	beq.n	800a54a <poll_tcp+0x5a>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	7a5b      	ldrb	r3, [r3, #9]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d005      	beq.n	800a54a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	7a5a      	ldrb	r2, [r3, #9]
 800a544:	3a01      	subs	r2, #1
 800a546:	b2d2      	uxtb	r2, r2
 800a548:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a54a:	2101      	movs	r1, #1
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f000 fb3b 	bl	800abc8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	7f1b      	ldrb	r3, [r3, #28]
 800a556:	f003 0310 	and.w	r3, r3, #16
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d021      	beq.n	800a5a2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d01d      	beq.n	800a5a2 <poll_tcp+0xb2>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a56e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a572:	d316      	bcc.n	800a5a2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a57c:	2b04      	cmp	r3, #4
 800a57e:	d810      	bhi.n	800a5a2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	7f1b      	ldrb	r3, [r3, #28]
 800a584:	f023 0310 	bic.w	r3, r3, #16
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a592:	2b00      	cmp	r3, #0
 800a594:	d005      	beq.n	800a5a2 <poll_tcp+0xb2>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59a:	2200      	movs	r2, #0
 800a59c:	2102      	movs	r1, #2
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	08018360 	.word	0x08018360
 800a5b0:	080184b8 	.word	0x080184b8
 800a5b4:	080183a4 	.word	0x080183a4

0800a5b8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d106      	bne.n	800a5de <sent_tcp+0x26>
 800a5d0:	4b20      	ldr	r3, [pc, #128]	; (800a654 <sent_tcp+0x9c>)
 800a5d2:	f240 1293 	movw	r2, #403	; 0x193
 800a5d6:	4920      	ldr	r1, [pc, #128]	; (800a658 <sent_tcp+0xa0>)
 800a5d8:	4820      	ldr	r0, [pc, #128]	; (800a65c <sent_tcp+0xa4>)
 800a5da:	f00c fdb9 	bl	8017150 <iprintf>

  if (conn) {
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d032      	beq.n	800a64a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	785b      	ldrb	r3, [r3, #1]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d104      	bne.n	800a5f6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	6978      	ldr	r0, [r7, #20]
 800a5f0:	f000 fdf4 	bl	800b1dc <lwip_netconn_do_writemore>
 800a5f4:	e007      	b.n	800a606 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	785b      	ldrb	r3, [r3, #1]
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	d103      	bne.n	800a606 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a5fe:	2101      	movs	r1, #1
 800a600:	6978      	ldr	r0, [r7, #20]
 800a602:	f000 fae1 	bl	800abc8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d01d      	beq.n	800a64a <sent_tcp+0x92>
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a616:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a61a:	d316      	bcc.n	800a64a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a624:	2b04      	cmp	r3, #4
 800a626:	d810      	bhi.n	800a64a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	7f1b      	ldrb	r3, [r3, #28]
 800a62c:	f023 0310 	bic.w	r3, r3, #16
 800a630:	b2da      	uxtb	r2, r3
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d005      	beq.n	800a64a <sent_tcp+0x92>
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a642:	88fa      	ldrh	r2, [r7, #6]
 800a644:	2102      	movs	r1, #2
 800a646:	6978      	ldr	r0, [r7, #20]
 800a648:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3718      	adds	r7, #24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	08018360 	.word	0x08018360
 800a658:	080184b8 	.word	0x080184b8
 800a65c:	080183a4 	.word	0x080183a4

0800a660 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	460b      	mov	r3, r1
 800a66a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d106      	bne.n	800a684 <err_tcp+0x24>
 800a676:	4b5f      	ldr	r3, [pc, #380]	; (800a7f4 <err_tcp+0x194>)
 800a678:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a67c:	495e      	ldr	r1, [pc, #376]	; (800a7f8 <err_tcp+0x198>)
 800a67e:	485f      	ldr	r0, [pc, #380]	; (800a7fc <err_tcp+0x19c>)
 800a680:	f00c fd66 	bl	8017150 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a684:	f00c fb1e 	bl	8016cc4 <sys_arch_protect>
 800a688:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	2200      	movs	r2, #0
 800a68e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	78fa      	ldrb	r2, [r7, #3]
 800a694:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	7f1b      	ldrb	r3, [r3, #28]
 800a69a:	f043 0301 	orr.w	r3, r3, #1
 800a69e:	b2da      	uxtb	r2, r3
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	785b      	ldrb	r3, [r3, #1]
 800a6a8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a6b0:	69b8      	ldr	r0, [r7, #24]
 800a6b2:	f00c fb15 	bl	8016ce0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d005      	beq.n	800a6ca <err_tcp+0x6a>
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	2104      	movs	r1, #4
 800a6c6:	69f8      	ldr	r0, [r7, #28]
 800a6c8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d005      	beq.n	800a6de <err_tcp+0x7e>
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2100      	movs	r1, #0
 800a6da:	69f8      	ldr	r0, [r7, #28]
 800a6dc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d005      	beq.n	800a6f2 <err_tcp+0x92>
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2102      	movs	r1, #2
 800a6ee:	69f8      	ldr	r0, [r7, #28]
 800a6f0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a6f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7ff fd86 	bl	800a208 <lwip_netconn_err_to_msg>
 800a6fc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	3310      	adds	r3, #16
 800a702:	4618      	mov	r0, r3
 800a704:	f00c f9c3 	bl	8016a8e <sys_mbox_valid>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d005      	beq.n	800a71a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	3310      	adds	r3, #16
 800a712:	6939      	ldr	r1, [r7, #16]
 800a714:	4618      	mov	r0, r3
 800a716:	f00c f945 	bl	80169a4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	3314      	adds	r3, #20
 800a71e:	4618      	mov	r0, r3
 800a720:	f00c f9b5 	bl	8016a8e <sys_mbox_valid>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d005      	beq.n	800a736 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	3314      	adds	r3, #20
 800a72e:	6939      	ldr	r1, [r7, #16]
 800a730:	4618      	mov	r0, r3
 800a732:	f00c f937 	bl	80169a4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a736:	7dfb      	ldrb	r3, [r7, #23]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d005      	beq.n	800a748 <err_tcp+0xe8>
 800a73c:	7dfb      	ldrb	r3, [r7, #23]
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d002      	beq.n	800a748 <err_tcp+0xe8>
 800a742:	7dfb      	ldrb	r3, [r7, #23]
 800a744:	2b03      	cmp	r3, #3
 800a746:	d143      	bne.n	800a7d0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	7f1b      	ldrb	r3, [r3, #28]
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b00      	cmp	r3, #0
 800a752:	bf14      	ite	ne
 800a754:	2301      	movne	r3, #1
 800a756:	2300      	moveq	r3, #0
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	7f1b      	ldrb	r3, [r3, #28]
 800a760:	f023 0304 	bic.w	r3, r3, #4
 800a764:	b2da      	uxtb	r2, r3
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d13b      	bne.n	800a7e8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	6a1b      	ldr	r3, [r3, #32]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d106      	bne.n	800a786 <err_tcp+0x126>
 800a778:	4b1e      	ldr	r3, [pc, #120]	; (800a7f4 <err_tcp+0x194>)
 800a77a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a77e:	4920      	ldr	r1, [pc, #128]	; (800a800 <err_tcp+0x1a0>)
 800a780:	481e      	ldr	r0, [pc, #120]	; (800a7fc <err_tcp+0x19c>)
 800a782:	f00c fce5 	bl	8017150 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a786:	7dfb      	ldrb	r3, [r7, #23]
 800a788:	2b04      	cmp	r3, #4
 800a78a:	d104      	bne.n	800a796 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	6a1b      	ldr	r3, [r3, #32]
 800a790:	2200      	movs	r2, #0
 800a792:	711a      	strb	r2, [r3, #4]
 800a794:	e003      	b.n	800a79e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	78fa      	ldrb	r2, [r7, #3]
 800a79c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	330c      	adds	r3, #12
 800a7a6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a7a8:	68b8      	ldr	r0, [r7, #8]
 800a7aa:	f00c fa01 	bl	8016bb0 <sys_sem_valid>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d106      	bne.n	800a7c2 <err_tcp+0x162>
 800a7b4:	4b0f      	ldr	r3, [pc, #60]	; (800a7f4 <err_tcp+0x194>)
 800a7b6:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a7ba:	4912      	ldr	r1, [pc, #72]	; (800a804 <err_tcp+0x1a4>)
 800a7bc:	480f      	ldr	r0, [pc, #60]	; (800a7fc <err_tcp+0x19c>)
 800a7be:	f00c fcc7 	bl	8017150 <iprintf>
      conn->current_msg = NULL;
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a7c8:	68b8      	ldr	r0, [r7, #8]
 800a7ca:	f00c f9d7 	bl	8016b7c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a7ce:	e00b      	b.n	800a7e8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	6a1b      	ldr	r3, [r3, #32]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d008      	beq.n	800a7ea <err_tcp+0x18a>
 800a7d8:	4b06      	ldr	r3, [pc, #24]	; (800a7f4 <err_tcp+0x194>)
 800a7da:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a7de:	490a      	ldr	r1, [pc, #40]	; (800a808 <err_tcp+0x1a8>)
 800a7e0:	4806      	ldr	r0, [pc, #24]	; (800a7fc <err_tcp+0x19c>)
 800a7e2:	f00c fcb5 	bl	8017150 <iprintf>
  }
}
 800a7e6:	e000      	b.n	800a7ea <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a7e8:	bf00      	nop
}
 800a7ea:	bf00      	nop
 800a7ec:	3720      	adds	r7, #32
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	08018360 	.word	0x08018360
 800a7f8:	080184b8 	.word	0x080184b8
 800a7fc:	080183a4 	.word	0x080183a4
 800a800:	080184c8 	.word	0x080184c8
 800a804:	080184e4 	.word	0x080184e4
 800a808:	08018500 	.word	0x08018500

0800a80c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a81a:	6879      	ldr	r1, [r7, #4]
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f004 fac1 	bl	800eda4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a822:	490a      	ldr	r1, [pc, #40]	; (800a84c <setup_tcp+0x40>)
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f004 facf 	bl	800edc8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a82a:	4909      	ldr	r1, [pc, #36]	; (800a850 <setup_tcp+0x44>)
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f004 faed 	bl	800ee0c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a832:	2202      	movs	r2, #2
 800a834:	4907      	ldr	r1, [pc, #28]	; (800a854 <setup_tcp+0x48>)
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f004 fb44 	bl	800eec4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a83c:	4906      	ldr	r1, [pc, #24]	; (800a858 <setup_tcp+0x4c>)
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f004 fb06 	bl	800ee50 <tcp_err>
}
 800a844:	bf00      	nop
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	0800a3e5 	.word	0x0800a3e5
 800a850:	0800a5b9 	.word	0x0800a5b9
 800a854:	0800a4f1 	.word	0x0800a4f1
 800a858:	0800a661 	.word	0x0800a661

0800a85c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a85c:	b590      	push	{r4, r7, lr}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a864:	2300      	movs	r3, #0
 800a866:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d006      	beq.n	800a880 <pcb_new+0x24>
 800a872:	4b2b      	ldr	r3, [pc, #172]	; (800a920 <pcb_new+0xc4>)
 800a874:	f240 2265 	movw	r2, #613	; 0x265
 800a878:	492a      	ldr	r1, [pc, #168]	; (800a924 <pcb_new+0xc8>)
 800a87a:	482b      	ldr	r0, [pc, #172]	; (800a928 <pcb_new+0xcc>)
 800a87c:	f00c fc68 	bl	8017150 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a88a:	2b10      	cmp	r3, #16
 800a88c:	d022      	beq.n	800a8d4 <pcb_new+0x78>
 800a88e:	2b20      	cmp	r3, #32
 800a890:	d133      	bne.n	800a8fa <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681c      	ldr	r4, [r3, #0]
 800a896:	7bfb      	ldrb	r3, [r7, #15]
 800a898:	4618      	mov	r0, r3
 800a89a:	f009 fd4c 	bl	8014336 <udp_new_ip_type>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d02a      	beq.n	800a902 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	2b22      	cmp	r3, #34	; 0x22
 800a8b4:	d104      	bne.n	800a8c0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6858      	ldr	r0, [r3, #4]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	4917      	ldr	r1, [pc, #92]	; (800a92c <pcb_new+0xd0>)
 800a8ce:	f009 fcb9 	bl	8014244 <udp_recv>
      }
      break;
 800a8d2:	e016      	b.n	800a902 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681c      	ldr	r4, [r3, #0]
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f004 fa54 	bl	800ed88 <tcp_new_ip_type>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00b      	beq.n	800a906 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff ff8a 	bl	800a80c <setup_tcp>
      }
      break;
 800a8f8:	e005      	b.n	800a906 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	22fa      	movs	r2, #250	; 0xfa
 800a8fe:	711a      	strb	r2, [r3, #4]
      return;
 800a900:	e00a      	b.n	800a918 <pcb_new+0xbc>
      break;
 800a902:	bf00      	nop
 800a904:	e000      	b.n	800a908 <pcb_new+0xac>
      break;
 800a906:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d102      	bne.n	800a918 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	22ff      	movs	r2, #255	; 0xff
 800a916:	711a      	strb	r2, [r3, #4]
  }
}
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd90      	pop	{r4, r7, pc}
 800a91e:	bf00      	nop
 800a920:	08018360 	.word	0x08018360
 800a924:	08018544 	.word	0x08018544
 800a928:	080183a4 	.word	0x080183a4
 800a92c:	0800a2e9 	.word	0x0800a2e9

0800a930 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2200      	movs	r2, #0
 800a940:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d102      	bne.n	800a952 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f7ff ff85 	bl	800a85c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a952:	bf00      	nop
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
	...

0800a95c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af00      	add	r7, sp, #0
 800a962:	4603      	mov	r3, r0
 800a964:	6039      	str	r1, [r7, #0]
 800a966:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a968:	2300      	movs	r3, #0
 800a96a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a96c:	2007      	movs	r0, #7
 800a96e:	f001 fdc3 	bl	800c4f8 <memp_malloc>
 800a972:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d101      	bne.n	800a97e <netconn_alloc+0x22>
    return NULL;
 800a97a:	2300      	movs	r3, #0
 800a97c:	e052      	b.n	800aa24 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	79fa      	ldrb	r2, [r7, #7]
 800a988:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a990:	79fb      	ldrb	r3, [r7, #7]
 800a992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a996:	2b10      	cmp	r3, #16
 800a998:	d004      	beq.n	800a9a4 <netconn_alloc+0x48>
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	d105      	bne.n	800a9aa <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a99e:	2306      	movs	r3, #6
 800a9a0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a9a2:	e00a      	b.n	800a9ba <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a9a4:	2306      	movs	r3, #6
 800a9a6:	617b      	str	r3, [r7, #20]
      break;
 800a9a8:	e007      	b.n	800a9ba <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a9aa:	4b20      	ldr	r3, [pc, #128]	; (800aa2c <netconn_alloc+0xd0>)
 800a9ac:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a9b0:	491f      	ldr	r1, [pc, #124]	; (800aa30 <netconn_alloc+0xd4>)
 800a9b2:	4820      	ldr	r0, [pc, #128]	; (800aa34 <netconn_alloc+0xd8>)
 800a9b4:	f00c fbcc 	bl	8017150 <iprintf>
      goto free_and_return;
 800a9b8:	e02f      	b.n	800aa1a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	3310      	adds	r3, #16
 800a9be:	6979      	ldr	r1, [r7, #20]
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f00b ffbb 	bl	801693c <sys_mbox_new>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d125      	bne.n	800aa18 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	330c      	adds	r3, #12
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f00c f879 	bl	8016aca <sys_sem_new>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d005      	beq.n	800a9ea <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3310      	adds	r3, #16
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f00b ffcc 	bl	8016980 <sys_mbox_free>
    goto free_and_return;
 800a9e8:	e017      	b.n	800aa1a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3314      	adds	r3, #20
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f00c f85e 	bl	8016ab0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800aa00:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	683a      	ldr	r2, [r7, #0]
 800aa06:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	7cfa      	ldrb	r2, [r7, #19]
 800aa12:	771a      	strb	r2, [r3, #28]
  return conn;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	e005      	b.n	800aa24 <netconn_alloc+0xc8>
    goto free_and_return;
 800aa18:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800aa1a:	68f9      	ldr	r1, [r7, #12]
 800aa1c:	2007      	movs	r0, #7
 800aa1e:	f001 fdbd 	bl	800c59c <memp_free>
  return NULL;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3718      	adds	r7, #24
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	08018360 	.word	0x08018360
 800aa30:	08018564 	.word	0x08018564
 800aa34:	080183a4 	.word	0x080183a4

0800aa38 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d006      	beq.n	800aa56 <netconn_free+0x1e>
 800aa48:	4b1b      	ldr	r3, [pc, #108]	; (800aab8 <netconn_free+0x80>)
 800aa4a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800aa4e:	491b      	ldr	r1, [pc, #108]	; (800aabc <netconn_free+0x84>)
 800aa50:	481b      	ldr	r0, [pc, #108]	; (800aac0 <netconn_free+0x88>)
 800aa52:	f00c fb7d 	bl	8017150 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	3310      	adds	r3, #16
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f00c f817 	bl	8016a8e <sys_mbox_valid>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d006      	beq.n	800aa74 <netconn_free+0x3c>
 800aa66:	4b14      	ldr	r3, [pc, #80]	; (800aab8 <netconn_free+0x80>)
 800aa68:	f240 3223 	movw	r2, #803	; 0x323
 800aa6c:	4915      	ldr	r1, [pc, #84]	; (800aac4 <netconn_free+0x8c>)
 800aa6e:	4814      	ldr	r0, [pc, #80]	; (800aac0 <netconn_free+0x88>)
 800aa70:	f00c fb6e 	bl	8017150 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	3314      	adds	r3, #20
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f00c f808 	bl	8016a8e <sys_mbox_valid>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d006      	beq.n	800aa92 <netconn_free+0x5a>
 800aa84:	4b0c      	ldr	r3, [pc, #48]	; (800aab8 <netconn_free+0x80>)
 800aa86:	f240 3226 	movw	r2, #806	; 0x326
 800aa8a:	490f      	ldr	r1, [pc, #60]	; (800aac8 <netconn_free+0x90>)
 800aa8c:	480c      	ldr	r0, [pc, #48]	; (800aac0 <netconn_free+0x88>)
 800aa8e:	f00c fb5f 	bl	8017150 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	330c      	adds	r3, #12
 800aa96:	4618      	mov	r0, r3
 800aa98:	f00c f87d 	bl	8016b96 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	330c      	adds	r3, #12
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f00c f896 	bl	8016bd2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800aaa6:	6879      	ldr	r1, [r7, #4]
 800aaa8:	2007      	movs	r0, #7
 800aaaa:	f001 fd77 	bl	800c59c <memp_free>
}
 800aaae:	bf00      	nop
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	08018360 	.word	0x08018360
 800aabc:	0801858c 	.word	0x0801858c
 800aac0:	080183a4 	.word	0x080183a4
 800aac4:	080185bc 	.word	0x080185bc
 800aac8:	080185f8 	.word	0x080185f8

0800aacc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3310      	adds	r3, #16
 800aad8:	4618      	mov	r0, r3
 800aada:	f00b ffd8 	bl	8016a8e <sys_mbox_valid>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d02f      	beq.n	800ab44 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800aae4:	e018      	b.n	800ab18 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aaee:	2b10      	cmp	r3, #16
 800aaf0:	d10e      	bne.n	800ab10 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	f107 020f 	add.w	r2, r7, #15
 800aaf8:	4611      	mov	r1, r2
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7ff fbba 	bl	800a274 <lwip_netconn_is_err_msg>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d108      	bne.n	800ab18 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f002 fb87 	bl	800d21c <pbuf_free>
 800ab0e:	e003      	b.n	800ab18 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 fdce 	bl	800b6b4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3310      	adds	r3, #16
 800ab1c:	f107 0210 	add.w	r2, r7, #16
 800ab20:	4611      	mov	r1, r2
 800ab22:	4618      	mov	r0, r3
 800ab24:	f00b ff97 	bl	8016a56 <sys_arch_mbox_tryfetch>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab2e:	d1da      	bne.n	800aae6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3310      	adds	r3, #16
 800ab34:	4618      	mov	r0, r3
 800ab36:	f00b ff23 	bl	8016980 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	3310      	adds	r3, #16
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f00b ffb6 	bl	8016ab0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	3314      	adds	r3, #20
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f00b ffa0 	bl	8016a8e <sys_mbox_valid>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d034      	beq.n	800abbe <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ab54:	e01d      	b.n	800ab92 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	f107 020e 	add.w	r2, r7, #14
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fb88 	bl	800a274 <lwip_netconn_is_err_msg>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d113      	bne.n	800ab92 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800ab6e:	6978      	ldr	r0, [r7, #20]
 800ab70:	f7ff ffac 	bl	800aacc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d007      	beq.n	800ab8c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f003 f94b 	bl	800de1c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800ab8c:	6978      	ldr	r0, [r7, #20]
 800ab8e:	f7ff ff53 	bl	800aa38 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	3314      	adds	r3, #20
 800ab96:	f107 0210 	add.w	r2, r7, #16
 800ab9a:	4611      	mov	r1, r2
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f00b ff5a 	bl	8016a56 <sys_arch_mbox_tryfetch>
 800aba2:	4603      	mov	r3, r0
 800aba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba8:	d1d5      	bne.n	800ab56 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	3314      	adds	r3, #20
 800abae:	4618      	mov	r0, r3
 800abb0:	f00b fee6 	bl	8016980 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	3314      	adds	r3, #20
 800abb8:	4618      	mov	r0, r3
 800abba:	f00b ff79 	bl	8016ab0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800abbe:	bf00      	nop
 800abc0:	3718      	adds	r7, #24
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d106      	bne.n	800abec <lwip_netconn_do_close_internal+0x24>
 800abde:	4b87      	ldr	r3, [pc, #540]	; (800adfc <lwip_netconn_do_close_internal+0x234>)
 800abe0:	f240 32a2 	movw	r2, #930	; 0x3a2
 800abe4:	4986      	ldr	r1, [pc, #536]	; (800ae00 <lwip_netconn_do_close_internal+0x238>)
 800abe6:	4887      	ldr	r0, [pc, #540]	; (800ae04 <lwip_netconn_do_close_internal+0x23c>)
 800abe8:	f00c fab2 	bl	8017150 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abf4:	2b10      	cmp	r3, #16
 800abf6:	d006      	beq.n	800ac06 <lwip_netconn_do_close_internal+0x3e>
 800abf8:	4b80      	ldr	r3, [pc, #512]	; (800adfc <lwip_netconn_do_close_internal+0x234>)
 800abfa:	f240 32a3 	movw	r2, #931	; 0x3a3
 800abfe:	4982      	ldr	r1, [pc, #520]	; (800ae08 <lwip_netconn_do_close_internal+0x240>)
 800ac00:	4880      	ldr	r0, [pc, #512]	; (800ae04 <lwip_netconn_do_close_internal+0x23c>)
 800ac02:	f00c faa5 	bl	8017150 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	785b      	ldrb	r3, [r3, #1]
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	d006      	beq.n	800ac1c <lwip_netconn_do_close_internal+0x54>
 800ac0e:	4b7b      	ldr	r3, [pc, #492]	; (800adfc <lwip_netconn_do_close_internal+0x234>)
 800ac10:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800ac14:	497d      	ldr	r1, [pc, #500]	; (800ae0c <lwip_netconn_do_close_internal+0x244>)
 800ac16:	487b      	ldr	r0, [pc, #492]	; (800ae04 <lwip_netconn_do_close_internal+0x23c>)
 800ac18:	f00c fa9a 	bl	8017150 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d106      	bne.n	800ac32 <lwip_netconn_do_close_internal+0x6a>
 800ac24:	4b75      	ldr	r3, [pc, #468]	; (800adfc <lwip_netconn_do_close_internal+0x234>)
 800ac26:	f240 32a5 	movw	r2, #933	; 0x3a5
 800ac2a:	4979      	ldr	r1, [pc, #484]	; (800ae10 <lwip_netconn_do_close_internal+0x248>)
 800ac2c:	4875      	ldr	r0, [pc, #468]	; (800ae04 <lwip_netconn_do_close_internal+0x23c>)
 800ac2e:	f00c fa8f 	bl	8017150 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d106      	bne.n	800ac48 <lwip_netconn_do_close_internal+0x80>
 800ac3a:	4b70      	ldr	r3, [pc, #448]	; (800adfc <lwip_netconn_do_close_internal+0x234>)
 800ac3c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ac40:	4974      	ldr	r1, [pc, #464]	; (800ae14 <lwip_netconn_do_close_internal+0x24c>)
 800ac42:	4870      	ldr	r0, [pc, #448]	; (800ae04 <lwip_netconn_do_close_internal+0x23c>)
 800ac44:	f00c fa84 	bl	8017150 <iprintf>

  tpcb = conn->pcb.tcp;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	7a1b      	ldrb	r3, [r3, #8]
 800ac54:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
 800ac58:	f003 0301 	and.w	r3, r3, #1
 800ac5c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
 800ac60:	f003 0302 	and.w	r3, r3, #2
 800ac64:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800ac66:	7bfb      	ldrb	r3, [r7, #15]
 800ac68:	2b03      	cmp	r3, #3
 800ac6a:	d102      	bne.n	800ac72 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	75bb      	strb	r3, [r7, #22]
 800ac70:	e01f      	b.n	800acb2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800ac72:	7bbb      	ldrb	r3, [r7, #14]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00e      	beq.n	800ac96 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800ac7c:	2b05      	cmp	r3, #5
 800ac7e:	d007      	beq.n	800ac90 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800ac84:	2b06      	cmp	r3, #6
 800ac86:	d003      	beq.n	800ac90 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800ac8c:	2b08      	cmp	r3, #8
 800ac8e:	d102      	bne.n	800ac96 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800ac90:	2301      	movs	r3, #1
 800ac92:	75bb      	strb	r3, [r7, #22]
 800ac94:	e00d      	b.n	800acb2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800ac96:	7b7b      	ldrb	r3, [r7, #13]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d008      	beq.n	800acae <lwip_netconn_do_close_internal+0xe6>
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	8b5b      	ldrh	r3, [r3, #26]
 800aca0:	f003 0310 	and.w	r3, r3, #16
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800aca8:	2301      	movs	r3, #1
 800acaa:	75bb      	strb	r3, [r7, #22]
 800acac:	e001      	b.n	800acb2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800acb2:	7dbb      	ldrb	r3, [r7, #22]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d003      	beq.n	800acc0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800acb8:	2100      	movs	r1, #0
 800acba:	6938      	ldr	r0, [r7, #16]
 800acbc:	f004 f872 	bl	800eda4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	7d1b      	ldrb	r3, [r3, #20]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d104      	bne.n	800acd2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800acc8:	2100      	movs	r1, #0
 800acca:	6938      	ldr	r0, [r7, #16]
 800accc:	f004 f8e2 	bl	800ee94 <tcp_accept>
 800acd0:	e01d      	b.n	800ad0e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800acd2:	7bbb      	ldrb	r3, [r7, #14]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d007      	beq.n	800ace8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800acd8:	2100      	movs	r1, #0
 800acda:	6938      	ldr	r0, [r7, #16]
 800acdc:	f004 f874 	bl	800edc8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800ace0:	2100      	movs	r1, #0
 800ace2:	6938      	ldr	r0, [r7, #16]
 800ace4:	f004 f8d6 	bl	800ee94 <tcp_accept>
    }
    if (shut_tx) {
 800ace8:	7b7b      	ldrb	r3, [r7, #13]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800acee:	2100      	movs	r1, #0
 800acf0:	6938      	ldr	r0, [r7, #16]
 800acf2:	f004 f88b 	bl	800ee0c <tcp_sent>
    }
    if (shut_close) {
 800acf6:	7dbb      	ldrb	r3, [r7, #22]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d008      	beq.n	800ad0e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800acfc:	2200      	movs	r2, #0
 800acfe:	2100      	movs	r1, #0
 800ad00:	6938      	ldr	r0, [r7, #16]
 800ad02:	f004 f8df 	bl	800eec4 <tcp_poll>
      tcp_err(tpcb, NULL);
 800ad06:	2100      	movs	r1, #0
 800ad08:	6938      	ldr	r0, [r7, #16]
 800ad0a:	f004 f8a1 	bl	800ee50 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800ad0e:	7dbb      	ldrb	r3, [r7, #22]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d005      	beq.n	800ad20 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800ad14:	6938      	ldr	r0, [r7, #16]
 800ad16:	f002 ff3b 	bl	800db90 <tcp_close>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	75fb      	strb	r3, [r7, #23]
 800ad1e:	e007      	b.n	800ad30 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
 800ad22:	7b7a      	ldrb	r2, [r7, #13]
 800ad24:	4619      	mov	r1, r3
 800ad26:	6938      	ldr	r0, [r7, #16]
 800ad28:	f002 ff5e 	bl	800dbe8 <tcp_shutdown>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ad30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d102      	bne.n	800ad3e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	757b      	strb	r3, [r7, #21]
 800ad3c:	e016      	b.n	800ad6c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ad3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad46:	d10f      	bne.n	800ad68 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a1b      	ldr	r3, [r3, #32]
 800ad4c:	7a5b      	ldrb	r3, [r3, #9]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10c      	bne.n	800ad6c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ad52:	2301      	movs	r3, #1
 800ad54:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800ad56:	7dbb      	ldrb	r3, [r7, #22]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d007      	beq.n	800ad6c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800ad5c:	6938      	ldr	r0, [r7, #16]
 800ad5e:	f003 f85d 	bl	800de1c <tcp_abort>
          err = ERR_OK;
 800ad62:	2300      	movs	r3, #0
 800ad64:	75fb      	strb	r3, [r7, #23]
 800ad66:	e001      	b.n	800ad6c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800ad6c:	7d7b      	ldrb	r3, [r7, #21]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d052      	beq.n	800ae18 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	330c      	adds	r3, #12
 800ad7a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a1b      	ldr	r3, [r3, #32]
 800ad80:	7dfa      	ldrb	r2, [r7, #23]
 800ad82:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800ad90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d129      	bne.n	800adec <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800ad98:	7dbb      	ldrb	r3, [r7, #22]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00c      	beq.n	800adb8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d005      	beq.n	800adb8 <lwip_netconn_do_close_internal+0x1f0>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb0:	2200      	movs	r2, #0
 800adb2:	2104      	movs	r1, #4
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	4798      	blx	r3
      }
      if (shut_rx) {
 800adb8:	7bbb      	ldrb	r3, [r7, #14]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d009      	beq.n	800add2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d005      	beq.n	800add2 <lwip_netconn_do_close_internal+0x20a>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adca:	2200      	movs	r2, #0
 800adcc:	2100      	movs	r1, #0
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	4798      	blx	r3
      }
      if (shut_tx) {
 800add2:	7b7b      	ldrb	r3, [r7, #13]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d009      	beq.n	800adec <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800addc:	2b00      	cmp	r3, #0
 800adde:	d005      	beq.n	800adec <lwip_netconn_do_close_internal+0x224>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade4:	2200      	movs	r2, #0
 800ade6:	2102      	movs	r1, #2
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800adec:	78fb      	ldrb	r3, [r7, #3]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d002      	beq.n	800adf8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800adf2:	68b8      	ldr	r0, [r7, #8]
 800adf4:	f00b fec2 	bl	8016b7c <sys_sem_signal>
    }
    return ERR_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	e03c      	b.n	800ae76 <lwip_netconn_do_close_internal+0x2ae>
 800adfc:	08018360 	.word	0x08018360
 800ae00:	08018634 	.word	0x08018634
 800ae04:	080183a4 	.word	0x080183a4
 800ae08:	08018644 	.word	0x08018644
 800ae0c:	08018664 	.word	0x08018664
 800ae10:	08018688 	.word	0x08018688
 800ae14:	080184c8 	.word	0x080184c8
  }
  if (!close_finished) {
 800ae18:	7d7b      	ldrb	r3, [r7, #21]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d11e      	bne.n	800ae5c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	7d1b      	ldrb	r3, [r3, #20]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d106      	bne.n	800ae34 <lwip_netconn_do_close_internal+0x26c>
 800ae26:	4b16      	ldr	r3, [pc, #88]	; (800ae80 <lwip_netconn_do_close_internal+0x2b8>)
 800ae28:	f240 4241 	movw	r2, #1089	; 0x441
 800ae2c:	4915      	ldr	r1, [pc, #84]	; (800ae84 <lwip_netconn_do_close_internal+0x2bc>)
 800ae2e:	4816      	ldr	r0, [pc, #88]	; (800ae88 <lwip_netconn_do_close_internal+0x2c0>)
 800ae30:	f00c f98e 	bl	8017150 <iprintf>
    if (shut_tx) {
 800ae34:	7b7b      	ldrb	r3, [r7, #13]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d003      	beq.n	800ae42 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800ae3a:	4914      	ldr	r1, [pc, #80]	; (800ae8c <lwip_netconn_do_close_internal+0x2c4>)
 800ae3c:	6938      	ldr	r0, [r7, #16]
 800ae3e:	f003 ffe5 	bl	800ee0c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800ae42:	2201      	movs	r2, #1
 800ae44:	4912      	ldr	r1, [pc, #72]	; (800ae90 <lwip_netconn_do_close_internal+0x2c8>)
 800ae46:	6938      	ldr	r0, [r7, #16]
 800ae48:	f004 f83c 	bl	800eec4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800ae4c:	4911      	ldr	r1, [pc, #68]	; (800ae94 <lwip_netconn_do_close_internal+0x2cc>)
 800ae4e:	6938      	ldr	r0, [r7, #16]
 800ae50:	f003 fffe 	bl	800ee50 <tcp_err>
    tcp_arg(tpcb, conn);
 800ae54:	6879      	ldr	r1, [r7, #4]
 800ae56:	6938      	ldr	r0, [r7, #16]
 800ae58:	f003 ffa4 	bl	800eda4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800ae5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d106      	bne.n	800ae72 <lwip_netconn_do_close_internal+0x2aa>
 800ae64:	4b06      	ldr	r3, [pc, #24]	; (800ae80 <lwip_netconn_do_close_internal+0x2b8>)
 800ae66:	f240 424d 	movw	r2, #1101	; 0x44d
 800ae6a:	490b      	ldr	r1, [pc, #44]	; (800ae98 <lwip_netconn_do_close_internal+0x2d0>)
 800ae6c:	4806      	ldr	r0, [pc, #24]	; (800ae88 <lwip_netconn_do_close_internal+0x2c0>)
 800ae6e:	f00c f96f 	bl	8017150 <iprintf>
  return err;
 800ae72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3718      	adds	r7, #24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	08018360 	.word	0x08018360
 800ae84:	0801869c 	.word	0x0801869c
 800ae88:	080183a4 	.word	0x080183a4
 800ae8c:	0800a5b9 	.word	0x0800a5b9
 800ae90:	0800a4f1 	.word	0x0800a4f1
 800ae94:	0800a661 	.word	0x0800a661
 800ae98:	080186c0 	.word	0x080186c0

0800ae9c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	785b      	ldrb	r3, [r3, #1]
 800aeae:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800aeb0:	7afb      	ldrb	r3, [r7, #11]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00d      	beq.n	800aed2 <lwip_netconn_do_delconn+0x36>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aec0:	2b10      	cmp	r3, #16
 800aec2:	d006      	beq.n	800aed2 <lwip_netconn_do_delconn+0x36>
 800aec4:	4b60      	ldr	r3, [pc, #384]	; (800b048 <lwip_netconn_do_delconn+0x1ac>)
 800aec6:	f240 425e 	movw	r2, #1118	; 0x45e
 800aeca:	4960      	ldr	r1, [pc, #384]	; (800b04c <lwip_netconn_do_delconn+0x1b0>)
 800aecc:	4860      	ldr	r0, [pc, #384]	; (800b050 <lwip_netconn_do_delconn+0x1b4>)
 800aece:	f00c f93f 	bl	8017150 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800aed2:	7afb      	ldrb	r3, [r7, #11]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d005      	beq.n	800aee4 <lwip_netconn_do_delconn+0x48>
 800aed8:	7afb      	ldrb	r3, [r7, #11]
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d002      	beq.n	800aee4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800aede:	7afb      	ldrb	r3, [r7, #11]
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	d109      	bne.n	800aef8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800aee4:	7afb      	ldrb	r3, [r7, #11]
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d10a      	bne.n	800af00 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	7f1b      	ldrb	r3, [r3, #28]
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d103      	bne.n	800af00 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	22fb      	movs	r2, #251	; 0xfb
 800aefc:	711a      	strb	r2, [r3, #4]
 800aefe:	e097      	b.n	800b030 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800af00:	7afb      	ldrb	r3, [r7, #11]
 800af02:	2b03      	cmp	r3, #3
 800af04:	d10d      	bne.n	800af22 <lwip_netconn_do_delconn+0x86>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	7f1b      	ldrb	r3, [r3, #28]
 800af0c:	f003 0304 	and.w	r3, r3, #4
 800af10:	2b00      	cmp	r3, #0
 800af12:	d106      	bne.n	800af22 <lwip_netconn_do_delconn+0x86>
 800af14:	4b4c      	ldr	r3, [pc, #304]	; (800b048 <lwip_netconn_do_delconn+0x1ac>)
 800af16:	f240 427a 	movw	r2, #1146	; 0x47a
 800af1a:	494e      	ldr	r1, [pc, #312]	; (800b054 <lwip_netconn_do_delconn+0x1b8>)
 800af1c:	484c      	ldr	r0, [pc, #304]	; (800b050 <lwip_netconn_do_delconn+0x1b4>)
 800af1e:	f00c f917 	bl	8017150 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7ff fdcd 	bl	800aacc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d05f      	beq.n	800affc <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af46:	2b10      	cmp	r3, #16
 800af48:	d00d      	beq.n	800af66 <lwip_netconn_do_delconn+0xca>
 800af4a:	2b20      	cmp	r3, #32
 800af4c:	d151      	bne.n	800aff2 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	4618      	mov	r0, r3
 800af60:	f009 f990 	bl	8014284 <udp_remove>
          break;
 800af64:	e046      	b.n	800aff4 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	6a1b      	ldr	r3, [r3, #32]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d006      	beq.n	800af7e <lwip_netconn_do_delconn+0xe2>
 800af70:	4b35      	ldr	r3, [pc, #212]	; (800b048 <lwip_netconn_do_delconn+0x1ac>)
 800af72:	f240 4294 	movw	r2, #1172	; 0x494
 800af76:	4938      	ldr	r1, [pc, #224]	; (800b058 <lwip_netconn_do_delconn+0x1bc>)
 800af78:	4835      	ldr	r0, [pc, #212]	; (800b050 <lwip_netconn_do_delconn+0x1b4>)
 800af7a:	f00c f8e9 	bl	8017150 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2204      	movs	r2, #4
 800af84:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2203      	movs	r2, #3
 800af8a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2100      	movs	r1, #0
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7ff fe14 	bl	800abc8 <lwip_netconn_do_close_internal>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d04b      	beq.n	800b03e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	785b      	ldrb	r3, [r3, #1]
 800afac:	2b04      	cmp	r3, #4
 800afae:	d006      	beq.n	800afbe <lwip_netconn_do_delconn+0x122>
 800afb0:	4b25      	ldr	r3, [pc, #148]	; (800b048 <lwip_netconn_do_delconn+0x1ac>)
 800afb2:	f240 429a 	movw	r2, #1178	; 0x49a
 800afb6:	4929      	ldr	r1, [pc, #164]	; (800b05c <lwip_netconn_do_delconn+0x1c0>)
 800afb8:	4825      	ldr	r0, [pc, #148]	; (800b050 <lwip_netconn_do_delconn+0x1b4>)
 800afba:	f00c f8c9 	bl	8017150 <iprintf>
            UNLOCK_TCPIP_CORE();
 800afbe:	4828      	ldr	r0, [pc, #160]	; (800b060 <lwip_netconn_do_delconn+0x1c4>)
 800afc0:	f00b fe4d 	bl	8016c5e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	330c      	adds	r3, #12
 800afca:	2100      	movs	r1, #0
 800afcc:	4618      	mov	r0, r3
 800afce:	f00b fda4 	bl	8016b1a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800afd2:	4823      	ldr	r0, [pc, #140]	; (800b060 <lwip_netconn_do_delconn+0x1c4>)
 800afd4:	f00b fe34 	bl	8016c40 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	785b      	ldrb	r3, [r3, #1]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d02d      	beq.n	800b03e <lwip_netconn_do_delconn+0x1a2>
 800afe2:	4b19      	ldr	r3, [pc, #100]	; (800b048 <lwip_netconn_do_delconn+0x1ac>)
 800afe4:	f240 429e 	movw	r2, #1182	; 0x49e
 800afe8:	491c      	ldr	r1, [pc, #112]	; (800b05c <lwip_netconn_do_delconn+0x1c0>)
 800afea:	4819      	ldr	r0, [pc, #100]	; (800b050 <lwip_netconn_do_delconn+0x1b4>)
 800afec:	f00c f8b0 	bl	8017150 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800aff0:	e025      	b.n	800b03e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800aff2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2200      	movs	r2, #0
 800affa:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b002:	2b00      	cmp	r3, #0
 800b004:	d007      	beq.n	800b016 <lwip_netconn_do_delconn+0x17a>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	6810      	ldr	r0, [r2, #0]
 800b010:	2200      	movs	r2, #0
 800b012:	2100      	movs	r1, #0
 800b014:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d007      	beq.n	800b030 <lwip_netconn_do_delconn+0x194>
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	6810      	ldr	r0, [r2, #0]
 800b02a:	2200      	movs	r2, #0
 800b02c:	2102      	movs	r1, #2
 800b02e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	330c      	adds	r3, #12
 800b036:	4618      	mov	r0, r3
 800b038:	f00b fdba 	bl	8016bb0 <sys_sem_valid>
 800b03c:	e000      	b.n	800b040 <lwip_netconn_do_delconn+0x1a4>
          return;
 800b03e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	08018360 	.word	0x08018360
 800b04c:	080186d0 	.word	0x080186d0
 800b050:	080183a4 	.word	0x080183a4
 800b054:	080186e4 	.word	0x080186e4
 800b058:	08018704 	.word	0x08018704
 800b05c:	08018720 	.word	0x08018720
 800b060:	20009bb0 	.word	0x20009bb0

0800b064 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d025      	beq.n	800b0c6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b084:	2b10      	cmp	r3, #16
 800b086:	d00e      	beq.n	800b0a6 <lwip_netconn_do_bind+0x42>
 800b088:	2b20      	cmp	r3, #32
 800b08a:	d119      	bne.n	800b0c0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6858      	ldr	r0, [r3, #4]
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	6899      	ldr	r1, [r3, #8]
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	899b      	ldrh	r3, [r3, #12]
 800b09a:	461a      	mov	r2, r3
 800b09c:	f009 f84a 	bl	8014134 <udp_bind>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]
        break;
 800b0a4:	e011      	b.n	800b0ca <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	6858      	ldr	r0, [r3, #4]
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	6899      	ldr	r1, [r3, #8]
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	899b      	ldrh	r3, [r3, #12]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	f002 febd 	bl	800de34 <tcp_bind>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	73fb      	strb	r3, [r7, #15]
        break;
 800b0be:	e004      	b.n	800b0ca <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800b0c0:	23fa      	movs	r3, #250	; 0xfa
 800b0c2:	73fb      	strb	r3, [r7, #15]
        break;
 800b0c4:	e001      	b.n	800b0ca <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800b0c6:	23fa      	movs	r3, #250	; 0xfa
 800b0c8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	7bfa      	ldrb	r2, [r7, #15]
 800b0ce:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b0d0:	bf00      	nop
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7ff f871 	bl	800a1d0 <netconn_err>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b0f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d134      	bne.n	800b164 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d02d      	beq.n	800b160 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b10e:	2b20      	cmp	r3, #32
 800b110:	d123      	bne.n	800b15a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10c      	bne.n	800b136 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4619      	mov	r1, r3
 800b12a:	4610      	mov	r0, r2
 800b12c:	f008 fe18 	bl	8013d60 <udp_send>
 800b130:	4603      	mov	r3, r0
 800b132:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b134:	e016      	b.n	800b164 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6858      	ldr	r0, [r3, #4]
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	6819      	ldr	r1, [r3, #0]
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	f103 0208 	add.w	r2, r3, #8
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	899b      	ldrh	r3, [r3, #12]
 800b150:	f008 fe3a 	bl	8013dc8 <udp_sendto>
 800b154:	4603      	mov	r3, r0
 800b156:	73fb      	strb	r3, [r7, #15]
          break;
 800b158:	e004      	b.n	800b164 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b15a:	23f5      	movs	r3, #245	; 0xf5
 800b15c:	73fb      	strb	r3, [r7, #15]
          break;
 800b15e:	e001      	b.n	800b164 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800b160:	23f5      	movs	r3, #245	; 0xf5
 800b162:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	7bfa      	ldrb	r2, [r7, #15]
 800b168:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b16a:	bf00      	nop
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b086      	sub	sp, #24
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	2200      	movs	r2, #0
 800b182:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d022      	beq.n	800b1d4 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b198:	2b10      	cmp	r3, #16
 800b19a:	d11b      	bne.n	800b1d4 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1a8:	d202      	bcs.n	800b1b0 <lwip_netconn_do_recv+0x3e>
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	e001      	b.n	800b1b4 <lwip_netconn_do_recv+0x42>
 800b1b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1b4:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	89fa      	ldrh	r2, [r7, #14]
 800b1be:	4611      	mov	r1, r2
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f002 ff29 	bl	800e018 <tcp_recved>
        remaining -= recved;
 800b1c6:	89fb      	ldrh	r3, [r7, #14]
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1e6      	bne.n	800b1a2 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b1d4:	bf00      	nop
 800b1d6:	3718      	adds	r7, #24
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d106      	bne.n	800b200 <lwip_netconn_do_writemore+0x24>
 800b1f2:	4b96      	ldr	r3, [pc, #600]	; (800b44c <lwip_netconn_do_writemore+0x270>)
 800b1f4:	f240 6273 	movw	r2, #1651	; 0x673
 800b1f8:	4995      	ldr	r1, [pc, #596]	; (800b450 <lwip_netconn_do_writemore+0x274>)
 800b1fa:	4896      	ldr	r0, [pc, #600]	; (800b454 <lwip_netconn_do_writemore+0x278>)
 800b1fc:	f00b ffa8 	bl	8017150 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	785b      	ldrb	r3, [r3, #1]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d006      	beq.n	800b216 <lwip_netconn_do_writemore+0x3a>
 800b208:	4b90      	ldr	r3, [pc, #576]	; (800b44c <lwip_netconn_do_writemore+0x270>)
 800b20a:	f240 6274 	movw	r2, #1652	; 0x674
 800b20e:	4992      	ldr	r1, [pc, #584]	; (800b458 <lwip_netconn_do_writemore+0x27c>)
 800b210:	4890      	ldr	r0, [pc, #576]	; (800b454 <lwip_netconn_do_writemore+0x278>)
 800b212:	f00b ff9d 	bl	8017150 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a1b      	ldr	r3, [r3, #32]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d106      	bne.n	800b22c <lwip_netconn_do_writemore+0x50>
 800b21e:	4b8b      	ldr	r3, [pc, #556]	; (800b44c <lwip_netconn_do_writemore+0x270>)
 800b220:	f240 6275 	movw	r2, #1653	; 0x675
 800b224:	498d      	ldr	r1, [pc, #564]	; (800b45c <lwip_netconn_do_writemore+0x280>)
 800b226:	488b      	ldr	r0, [pc, #556]	; (800b454 <lwip_netconn_do_writemore+0x278>)
 800b228:	f00b ff92 	bl	8017150 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d106      	bne.n	800b242 <lwip_netconn_do_writemore+0x66>
 800b234:	4b85      	ldr	r3, [pc, #532]	; (800b44c <lwip_netconn_do_writemore+0x270>)
 800b236:	f240 6276 	movw	r2, #1654	; 0x676
 800b23a:	4989      	ldr	r1, [pc, #548]	; (800b460 <lwip_netconn_do_writemore+0x284>)
 800b23c:	4885      	ldr	r0, [pc, #532]	; (800b454 <lwip_netconn_do_writemore+0x278>)
 800b23e:	f00b ff87 	bl	8017150 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	699a      	ldr	r2, [r3, #24]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a1b      	ldr	r3, [r3, #32]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d306      	bcc.n	800b260 <lwip_netconn_do_writemore+0x84>
 800b252:	4b7e      	ldr	r3, [pc, #504]	; (800b44c <lwip_netconn_do_writemore+0x270>)
 800b254:	f240 6277 	movw	r2, #1655	; 0x677
 800b258:	4982      	ldr	r1, [pc, #520]	; (800b464 <lwip_netconn_do_writemore+0x288>)
 800b25a:	487e      	ldr	r0, [pc, #504]	; (800b454 <lwip_netconn_do_writemore+0x278>)
 800b25c:	f00b ff78 	bl	8017150 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a1b      	ldr	r3, [r3, #32]
 800b264:	899b      	ldrh	r3, [r3, #12]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <lwip_netconn_do_writemore+0x9c>
 800b26a:	4b78      	ldr	r3, [pc, #480]	; (800b44c <lwip_netconn_do_writemore+0x270>)
 800b26c:	f240 6279 	movw	r2, #1657	; 0x679
 800b270:	497d      	ldr	r1, [pc, #500]	; (800b468 <lwip_netconn_do_writemore+0x28c>)
 800b272:	4878      	ldr	r0, [pc, #480]	; (800b454 <lwip_netconn_do_writemore+0x278>)
 800b274:	f00b ff6c 	bl	8017150 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a1b      	ldr	r3, [r3, #32]
 800b27c:	7f1b      	ldrb	r3, [r3, #28]
 800b27e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	7f1b      	ldrb	r3, [r3, #28]
 800b284:	f003 0302 	and.w	r3, r3, #2
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d104      	bne.n	800b296 <lwip_netconn_do_writemore+0xba>
 800b28c:	7ebb      	ldrb	r3, [r7, #26]
 800b28e:	f003 0304 	and.w	r3, r3, #4
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <lwip_netconn_do_writemore+0xbe>
 800b296:	2301      	movs	r3, #1
 800b298:	e000      	b.n	800b29c <lwip_netconn_do_writemore+0xc0>
 800b29a:	2300      	movs	r3, #0
 800b29c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a1b      	ldr	r3, [r3, #32]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6a1b      	ldr	r3, [r3, #32]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	685a      	ldr	r2, [r3, #4]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a1b      	ldr	r3, [r3, #32]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c8:	d307      	bcc.n	800b2da <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b2ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2ce:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b2d0:	7ebb      	ldrb	r3, [r7, #26]
 800b2d2:	f043 0302 	orr.w	r3, r3, #2
 800b2d6:	76bb      	strb	r3, [r7, #26]
 800b2d8:	e001      	b.n	800b2de <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b2e6:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b2e8:	89fa      	ldrh	r2, [r7, #14]
 800b2ea:	8bbb      	ldrh	r3, [r7, #28]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d216      	bcs.n	800b31e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b2f0:	89fb      	ldrh	r3, [r7, #14]
 800b2f2:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b2f4:	7e3b      	ldrb	r3, [r7, #24]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00d      	beq.n	800b316 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b2fa:	8bbb      	ldrh	r3, [r7, #28]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d10e      	bne.n	800b31e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a1b      	ldr	r3, [r3, #32]
 800b304:	699b      	ldr	r3, [r3, #24]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d102      	bne.n	800b310 <lwip_netconn_do_writemore+0x134>
 800b30a:	f06f 0306 	mvn.w	r3, #6
 800b30e:	e000      	b.n	800b312 <lwip_netconn_do_writemore+0x136>
 800b310:	2300      	movs	r3, #0
 800b312:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b314:	e07d      	b.n	800b412 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b316:	7ebb      	ldrb	r3, [r7, #26]
 800b318:	f043 0302 	orr.w	r3, r3, #2
 800b31c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a1b      	ldr	r3, [r3, #32]
 800b322:	691a      	ldr	r2, [r3, #16]
 800b324:	8bbb      	ldrh	r3, [r7, #28]
 800b326:	441a      	add	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a1b      	ldr	r3, [r3, #32]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	429a      	cmp	r2, r3
 800b332:	d906      	bls.n	800b342 <lwip_netconn_do_writemore+0x166>
 800b334:	4b45      	ldr	r3, [pc, #276]	; (800b44c <lwip_netconn_do_writemore+0x270>)
 800b336:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b33a:	494c      	ldr	r1, [pc, #304]	; (800b46c <lwip_netconn_do_writemore+0x290>)
 800b33c:	4845      	ldr	r0, [pc, #276]	; (800b454 <lwip_netconn_do_writemore+0x278>)
 800b33e:	f00b ff07 	bl	8017150 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b342:	8bbb      	ldrh	r3, [r7, #28]
 800b344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b348:	4293      	cmp	r3, r2
 800b34a:	d103      	bne.n	800b354 <lwip_netconn_do_writemore+0x178>
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b352:	d209      	bcs.n	800b368 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b358:	8bba      	ldrh	r2, [r7, #28]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d10b      	bne.n	800b376 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	899b      	ldrh	r3, [r3, #12]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d906      	bls.n	800b376 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b368:	2301      	movs	r3, #1
 800b36a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b36c:	7ebb      	ldrb	r3, [r7, #26]
 800b36e:	f043 0302 	orr.w	r3, r3, #2
 800b372:	76bb      	strb	r3, [r7, #26]
 800b374:	e001      	b.n	800b37a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6858      	ldr	r0, [r3, #4]
 800b37e:	7ebb      	ldrb	r3, [r7, #26]
 800b380:	8bba      	ldrh	r2, [r7, #28]
 800b382:	6979      	ldr	r1, [r7, #20]
 800b384:	f006 fc50 	bl	8011c28 <tcp_write>
 800b388:	4603      	mov	r3, r0
 800b38a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b38c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d12c      	bne.n	800b3ee <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a1b      	ldr	r3, [r3, #32]
 800b398:	6999      	ldr	r1, [r3, #24]
 800b39a:	8bba      	ldrh	r2, [r7, #28]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a1b      	ldr	r3, [r3, #32]
 800b3a0:	440a      	add	r2, r1
 800b3a2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a1b      	ldr	r3, [r3, #32]
 800b3a8:	6919      	ldr	r1, [r3, #16]
 800b3aa:	8bba      	ldrh	r2, [r7, #28]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a1b      	ldr	r3, [r3, #32]
 800b3b0:	440a      	add	r2, r1
 800b3b2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	691a      	ldr	r2, [r3, #16]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d113      	bne.n	800b3ee <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	899a      	ldrh	r2, [r3, #12]
 800b3cc:	3a01      	subs	r2, #1
 800b3ce:	b292      	uxth	r2, r2
 800b3d0:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a1b      	ldr	r3, [r3, #32]
 800b3d6:	899b      	ldrh	r3, [r3, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d008      	beq.n	800b3ee <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6a1b      	ldr	r3, [r3, #32]
 800b3e0:	689a      	ldr	r2, [r3, #8]
 800b3e2:	3208      	adds	r2, #8
 800b3e4:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a1b      	ldr	r3, [r3, #32]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b3ee:	7e7b      	ldrb	r3, [r7, #25]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d004      	beq.n	800b3fe <lwip_netconn_do_writemore+0x222>
 800b3f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f43f af50 	beq.w	800b29e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b3fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d004      	beq.n	800b410 <lwip_netconn_do_writemore+0x234>
 800b406:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b40e:	d146      	bne.n	800b49e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b410:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b412:	7e3b      	ldrb	r3, [r7, #24]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d02b      	beq.n	800b470 <lwip_netconn_do_writemore+0x294>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a1b      	ldr	r3, [r3, #32]
 800b41c:	699a      	ldr	r2, [r3, #24]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a1b      	ldr	r3, [r3, #32]
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	429a      	cmp	r2, r3
 800b426:	d223      	bcs.n	800b470 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d005      	beq.n	800b43c <lwip_netconn_do_writemore+0x260>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b434:	2200      	movs	r2, #0
 800b436:	2103      	movs	r1, #3
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	7f1b      	ldrb	r3, [r3, #28]
 800b440:	f043 0310 	orr.w	r3, r3, #16
 800b444:	b2da      	uxtb	r2, r3
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	771a      	strb	r2, [r3, #28]
 800b44a:	e028      	b.n	800b49e <lwip_netconn_do_writemore+0x2c2>
 800b44c:	08018360 	.word	0x08018360
 800b450:	080184b8 	.word	0x080184b8
 800b454:	080183a4 	.word	0x080183a4
 800b458:	080187c0 	.word	0x080187c0
 800b45c:	080184c8 	.word	0x080184c8
 800b460:	080187e0 	.word	0x080187e0
 800b464:	080187f8 	.word	0x080187f8
 800b468:	08018838 	.word	0x08018838
 800b46c:	08018860 	.word	0x08018860
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b478:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b47c:	d305      	bcc.n	800b48a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b486:	2b04      	cmp	r3, #4
 800b488:	d909      	bls.n	800b49e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d005      	beq.n	800b49e <lwip_netconn_do_writemore+0x2c2>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	2200      	movs	r2, #0
 800b498:	2103      	movs	r1, #3
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b49e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d11d      	bne.n	800b4e2 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a1b      	ldr	r3, [r3, #32]
 800b4aa:	699a      	ldr	r2, [r3, #24]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a1b      	ldr	r3, [r3, #32]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d002      	beq.n	800b4bc <lwip_netconn_do_writemore+0x2e0>
 800b4b6:	7e3b      	ldrb	r3, [r7, #24]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f007 f999 	bl	80127fc <tcp_output>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b4ce:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b4d2:	f113 0f04 	cmn.w	r3, #4
 800b4d6:	d12c      	bne.n	800b532 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b4d8:	7b3b      	ldrb	r3, [r7, #12]
 800b4da:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	76fb      	strb	r3, [r7, #27]
 800b4e0:	e027      	b.n	800b532 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b4e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ea:	d120      	bne.n	800b52e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f007 f983 	bl	80127fc <tcp_output>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b4fa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b4fe:	f113 0f04 	cmn.w	r3, #4
 800b502:	d104      	bne.n	800b50e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b504:	7b7b      	ldrb	r3, [r7, #13]
 800b506:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b508:	2301      	movs	r3, #1
 800b50a:	76fb      	strb	r3, [r7, #27]
 800b50c:	e011      	b.n	800b532 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b50e:	7e3b      	ldrb	r3, [r7, #24]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00e      	beq.n	800b532 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a1b      	ldr	r3, [r3, #32]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d102      	bne.n	800b524 <lwip_netconn_do_writemore+0x348>
 800b51e:	f06f 0306 	mvn.w	r3, #6
 800b522:	e000      	b.n	800b526 <lwip_netconn_do_writemore+0x34a>
 800b524:	2300      	movs	r3, #0
 800b526:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b528:	2301      	movs	r3, #1
 800b52a:	76fb      	strb	r3, [r7, #27]
 800b52c:	e001      	b.n	800b532 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b52e:	2301      	movs	r3, #1
 800b530:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b532:	7efb      	ldrb	r3, [r7, #27]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d015      	beq.n	800b564 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6a1b      	ldr	r3, [r3, #32]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	330c      	adds	r3, #12
 800b540:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	7ffa      	ldrb	r2, [r7, #31]
 800b548:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b556:	78fb      	ldrb	r3, [r7, #3]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d006      	beq.n	800b56a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b55c:	68b8      	ldr	r0, [r7, #8]
 800b55e:	f00b fb0d 	bl	8016b7c <sys_sem_signal>
 800b562:	e002      	b.n	800b56a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b564:	f04f 33ff 	mov.w	r3, #4294967295
 800b568:	e000      	b.n	800b56c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3720      	adds	r7, #32
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	785b      	ldrb	r3, [r3, #1]
 800b586:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d069      	beq.n	800b666 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b59c:	2b10      	cmp	r3, #16
 800b59e:	d162      	bne.n	800b666 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	d002      	beq.n	800b5ae <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b5a8:	7afb      	ldrb	r3, [r7, #11]
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d05b      	beq.n	800b666 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b5ae:	7afb      	ldrb	r3, [r7, #11]
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	d103      	bne.n	800b5bc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	22f5      	movs	r2, #245	; 0xf5
 800b5b8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b5ba:	e059      	b.n	800b670 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b5bc:	7afb      	ldrb	r3, [r7, #11]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d103      	bne.n	800b5ca <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	22fb      	movs	r2, #251	; 0xfb
 800b5c6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b5c8:	e052      	b.n	800b670 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	7a1b      	ldrb	r3, [r3, #8]
 800b5ce:	f003 0301 	and.w	r3, r3, #1
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d004      	beq.n	800b5e0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7ff fa76 	bl	800aacc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	6a1b      	ldr	r3, [r3, #32]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d006      	beq.n	800b5f8 <lwip_netconn_do_close+0x84>
 800b5ea:	4b23      	ldr	r3, [pc, #140]	; (800b678 <lwip_netconn_do_close+0x104>)
 800b5ec:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b5f0:	4922      	ldr	r1, [pc, #136]	; (800b67c <lwip_netconn_do_close+0x108>)
 800b5f2:	4823      	ldr	r0, [pc, #140]	; (800b680 <lwip_netconn_do_close+0x10c>)
 800b5f4:	f00b fdac 	bl	8017150 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2204      	movs	r2, #4
 800b5fe:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2100      	movs	r1, #0
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff fada 	bl	800abc8 <lwip_netconn_do_close_internal>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d029      	beq.n	800b66e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	785b      	ldrb	r3, [r3, #1]
 800b620:	2b04      	cmp	r3, #4
 800b622:	d006      	beq.n	800b632 <lwip_netconn_do_close+0xbe>
 800b624:	4b14      	ldr	r3, [pc, #80]	; (800b678 <lwip_netconn_do_close+0x104>)
 800b626:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b62a:	4916      	ldr	r1, [pc, #88]	; (800b684 <lwip_netconn_do_close+0x110>)
 800b62c:	4814      	ldr	r0, [pc, #80]	; (800b680 <lwip_netconn_do_close+0x10c>)
 800b62e:	f00b fd8f 	bl	8017150 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b632:	4815      	ldr	r0, [pc, #84]	; (800b688 <lwip_netconn_do_close+0x114>)
 800b634:	f00b fb13 	bl	8016c5e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	330c      	adds	r3, #12
 800b63e:	2100      	movs	r1, #0
 800b640:	4618      	mov	r0, r3
 800b642:	f00b fa6a 	bl	8016b1a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b646:	4810      	ldr	r0, [pc, #64]	; (800b688 <lwip_netconn_do_close+0x114>)
 800b648:	f00b fafa 	bl	8016c40 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	785b      	ldrb	r3, [r3, #1]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00b      	beq.n	800b66e <lwip_netconn_do_close+0xfa>
 800b656:	4b08      	ldr	r3, [pc, #32]	; (800b678 <lwip_netconn_do_close+0x104>)
 800b658:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b65c:	4909      	ldr	r1, [pc, #36]	; (800b684 <lwip_netconn_do_close+0x110>)
 800b65e:	4808      	ldr	r0, [pc, #32]	; (800b680 <lwip_netconn_do_close+0x10c>)
 800b660:	f00b fd76 	bl	8017150 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b664:	e003      	b.n	800b66e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	22f5      	movs	r2, #245	; 0xf5
 800b66a:	711a      	strb	r2, [r3, #4]
 800b66c:	e000      	b.n	800b670 <lwip_netconn_do_close+0xfc>
      return;
 800b66e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	08018360 	.word	0x08018360
 800b67c:	08018704 	.word	0x08018704
 800b680:	080183a4 	.word	0x080183a4
 800b684:	08018720 	.word	0x08018720
 800b688:	20009bb0 	.word	0x20009bb0

0800b68c <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b692:	2006      	movs	r0, #6
 800b694:	f000 ff30 	bl	800c4f8 <memp_malloc>
 800b698:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d004      	beq.n	800b6aa <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 800b6a0:	2210      	movs	r2, #16
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f00b fc6b 	bl	8016f80 <memset>
  }
  return buf;
 800b6aa:	687b      	ldr	r3, [r7, #4]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d013      	beq.n	800b6ea <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00b      	beq.n	800b6e2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f001 fda4 	bl	800d21c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	605a      	str	r2, [r3, #4]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b6e2:	6879      	ldr	r1, [r7, #4]
 800b6e4:	2006      	movs	r0, #6
 800b6e6:	f000 ff59 	bl	800c59c <memp_free>
  }
}
 800b6ea:	bf00      	nop
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	4613      	mov	r3, r2
 800b700:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d108      	bne.n	800b71a <netbuf_ref+0x26>
 800b708:	4b1c      	ldr	r3, [pc, #112]	; (800b77c <netbuf_ref+0x88>)
 800b70a:	2299      	movs	r2, #153	; 0x99
 800b70c:	491c      	ldr	r1, [pc, #112]	; (800b780 <netbuf_ref+0x8c>)
 800b70e:	481d      	ldr	r0, [pc, #116]	; (800b784 <netbuf_ref+0x90>)
 800b710:	f00b fd1e 	bl	8017150 <iprintf>
 800b714:	f06f 030f 	mvn.w	r3, #15
 800b718:	e02b      	b.n	800b772 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d004      	beq.n	800b72c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4618      	mov	r0, r3
 800b728:	f001 fd78 	bl	800d21c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800b72c:	2241      	movs	r2, #65	; 0x41
 800b72e:	2100      	movs	r1, #0
 800b730:	2036      	movs	r0, #54	; 0x36
 800b732:	f001 fa8f 	bl	800cc54 <pbuf_alloc>
 800b736:	4602      	mov	r2, r0
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d105      	bne.n	800b750 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2200      	movs	r2, #0
 800b748:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800b74a:	f04f 33ff 	mov.w	r3, #4294967295
 800b74e:	e010      	b.n	800b772 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	68ba      	ldr	r2, [r7, #8]
 800b756:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	88fa      	ldrh	r2, [r7, #6]
 800b75e:	811a      	strh	r2, [r3, #8]
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	6812      	ldr	r2, [r2, #0]
 800b764:	891b      	ldrh	r3, [r3, #8]
 800b766:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	080188b8 	.word	0x080188b8
 800b780:	08018970 	.word	0x08018970
 800b784:	08018908 	.word	0x08018908

0800b788 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d108      	bne.n	800b7ac <netbuf_data+0x24>
 800b79a:	4b1b      	ldr	r3, [pc, #108]	; (800b808 <netbuf_data+0x80>)
 800b79c:	22c6      	movs	r2, #198	; 0xc6
 800b79e:	491b      	ldr	r1, [pc, #108]	; (800b80c <netbuf_data+0x84>)
 800b7a0:	481b      	ldr	r0, [pc, #108]	; (800b810 <netbuf_data+0x88>)
 800b7a2:	f00b fcd5 	bl	8017150 <iprintf>
 800b7a6:	f06f 030f 	mvn.w	r3, #15
 800b7aa:	e029      	b.n	800b800 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d108      	bne.n	800b7c4 <netbuf_data+0x3c>
 800b7b2:	4b15      	ldr	r3, [pc, #84]	; (800b808 <netbuf_data+0x80>)
 800b7b4:	22c7      	movs	r2, #199	; 0xc7
 800b7b6:	4917      	ldr	r1, [pc, #92]	; (800b814 <netbuf_data+0x8c>)
 800b7b8:	4815      	ldr	r0, [pc, #84]	; (800b810 <netbuf_data+0x88>)
 800b7ba:	f00b fcc9 	bl	8017150 <iprintf>
 800b7be:	f06f 030f 	mvn.w	r3, #15
 800b7c2:	e01d      	b.n	800b800 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d108      	bne.n	800b7dc <netbuf_data+0x54>
 800b7ca:	4b0f      	ldr	r3, [pc, #60]	; (800b808 <netbuf_data+0x80>)
 800b7cc:	22c8      	movs	r2, #200	; 0xc8
 800b7ce:	4912      	ldr	r1, [pc, #72]	; (800b818 <netbuf_data+0x90>)
 800b7d0:	480f      	ldr	r0, [pc, #60]	; (800b810 <netbuf_data+0x88>)
 800b7d2:	f00b fcbd 	bl	8017150 <iprintf>
 800b7d6:	f06f 030f 	mvn.w	r3, #15
 800b7da:	e011      	b.n	800b800 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d102      	bne.n	800b7ea <netbuf_data+0x62>
    return ERR_BUF;
 800b7e4:	f06f 0301 	mvn.w	r3, #1
 800b7e8:	e00a      	b.n	800b800 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	685a      	ldr	r2, [r3, #4]
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	895a      	ldrh	r2, [r3, #10]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	080188b8 	.word	0x080188b8
 800b80c:	080189c0 	.word	0x080189c0
 800b810:	08018908 	.word	0x08018908
 800b814:	080189dc 	.word	0x080189dc
 800b818:	080189fc 	.word	0x080189fc

0800b81c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b826:	f008 f8a1 	bl	801396c <sys_timeouts_sleeptime>
 800b82a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b832:	d10b      	bne.n	800b84c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b834:	4813      	ldr	r0, [pc, #76]	; (800b884 <tcpip_timeouts_mbox_fetch+0x68>)
 800b836:	f00b fa12 	bl	8016c5e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b83a:	2200      	movs	r2, #0
 800b83c:	6839      	ldr	r1, [r7, #0]
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f00b f8ca 	bl	80169d8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b844:	480f      	ldr	r0, [pc, #60]	; (800b884 <tcpip_timeouts_mbox_fetch+0x68>)
 800b846:	f00b f9fb 	bl	8016c40 <sys_mutex_lock>
    return;
 800b84a:	e018      	b.n	800b87e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d102      	bne.n	800b858 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b852:	f008 f851 	bl	80138f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b856:	e7e6      	b.n	800b826 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b858:	480a      	ldr	r0, [pc, #40]	; (800b884 <tcpip_timeouts_mbox_fetch+0x68>)
 800b85a:	f00b fa00 	bl	8016c5e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	6839      	ldr	r1, [r7, #0]
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f00b f8b8 	bl	80169d8 <sys_arch_mbox_fetch>
 800b868:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b86a:	4806      	ldr	r0, [pc, #24]	; (800b884 <tcpip_timeouts_mbox_fetch+0x68>)
 800b86c:	f00b f9e8 	bl	8016c40 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b876:	d102      	bne.n	800b87e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b878:	f008 f83e 	bl	80138f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b87c:	e7d3      	b.n	800b826 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	20009bb0 	.word	0x20009bb0

0800b888 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b890:	4810      	ldr	r0, [pc, #64]	; (800b8d4 <tcpip_thread+0x4c>)
 800b892:	f00b f9d5 	bl	8016c40 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b896:	4b10      	ldr	r3, [pc, #64]	; (800b8d8 <tcpip_thread+0x50>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d005      	beq.n	800b8aa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b89e:	4b0e      	ldr	r3, [pc, #56]	; (800b8d8 <tcpip_thread+0x50>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a0e      	ldr	r2, [pc, #56]	; (800b8dc <tcpip_thread+0x54>)
 800b8a4:	6812      	ldr	r2, [r2, #0]
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b8aa:	f107 030c 	add.w	r3, r7, #12
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	480b      	ldr	r0, [pc, #44]	; (800b8e0 <tcpip_thread+0x58>)
 800b8b2:	f7ff ffb3 	bl	800b81c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d106      	bne.n	800b8ca <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b8bc:	4b09      	ldr	r3, [pc, #36]	; (800b8e4 <tcpip_thread+0x5c>)
 800b8be:	2291      	movs	r2, #145	; 0x91
 800b8c0:	4909      	ldr	r1, [pc, #36]	; (800b8e8 <tcpip_thread+0x60>)
 800b8c2:	480a      	ldr	r0, [pc, #40]	; (800b8ec <tcpip_thread+0x64>)
 800b8c4:	f00b fc44 	bl	8017150 <iprintf>
      continue;
 800b8c8:	e003      	b.n	800b8d2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 f80f 	bl	800b8f0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b8d2:	e7ea      	b.n	800b8aa <tcpip_thread+0x22>
 800b8d4:	20009bb0 	.word	0x20009bb0
 800b8d8:	20009ba4 	.word	0x20009ba4
 800b8dc:	20009ba8 	.word	0x20009ba8
 800b8e0:	20009bac 	.word	0x20009bac
 800b8e4:	08018a50 	.word	0x08018a50
 800b8e8:	08018a80 	.word	0x08018a80
 800b8ec:	08018aa0 	.word	0x08018aa0

0800b8f0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d026      	beq.n	800b94e <tcpip_thread_handle_msg+0x5e>
 800b900:	2b02      	cmp	r3, #2
 800b902:	dc2b      	bgt.n	800b95c <tcpip_thread_handle_msg+0x6c>
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <tcpip_thread_handle_msg+0x1e>
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d015      	beq.n	800b938 <tcpip_thread_handle_msg+0x48>
 800b90c:	e026      	b.n	800b95c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	6850      	ldr	r0, [r2, #4]
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	6892      	ldr	r2, [r2, #8]
 800b91a:	4611      	mov	r1, r2
 800b91c:	4798      	blx	r3
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d004      	beq.n	800b92e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	4618      	mov	r0, r3
 800b92a:	f001 fc77 	bl	800d21c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b92e:	6879      	ldr	r1, [r7, #4]
 800b930:	2009      	movs	r0, #9
 800b932:	f000 fe33 	bl	800c59c <memp_free>
      break;
 800b936:	e018      	b.n	800b96a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	6892      	ldr	r2, [r2, #8]
 800b940:	4610      	mov	r0, r2
 800b942:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b944:	6879      	ldr	r1, [r7, #4]
 800b946:	2008      	movs	r0, #8
 800b948:	f000 fe28 	bl	800c59c <memp_free>
      break;
 800b94c:	e00d      	b.n	800b96a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	6892      	ldr	r2, [r2, #8]
 800b956:	4610      	mov	r0, r2
 800b958:	4798      	blx	r3
      break;
 800b95a:	e006      	b.n	800b96a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b95c:	4b05      	ldr	r3, [pc, #20]	; (800b974 <tcpip_thread_handle_msg+0x84>)
 800b95e:	22cf      	movs	r2, #207	; 0xcf
 800b960:	4905      	ldr	r1, [pc, #20]	; (800b978 <tcpip_thread_handle_msg+0x88>)
 800b962:	4806      	ldr	r0, [pc, #24]	; (800b97c <tcpip_thread_handle_msg+0x8c>)
 800b964:	f00b fbf4 	bl	8017150 <iprintf>
      break;
 800b968:	bf00      	nop
  }
}
 800b96a:	bf00      	nop
 800b96c:	3708      	adds	r7, #8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	08018a50 	.word	0x08018a50
 800b978:	08018a80 	.word	0x08018a80
 800b97c:	08018aa0 	.word	0x08018aa0

0800b980 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b98c:	481a      	ldr	r0, [pc, #104]	; (800b9f8 <tcpip_inpkt+0x78>)
 800b98e:	f00b f87e 	bl	8016a8e <sys_mbox_valid>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d105      	bne.n	800b9a4 <tcpip_inpkt+0x24>
 800b998:	4b18      	ldr	r3, [pc, #96]	; (800b9fc <tcpip_inpkt+0x7c>)
 800b99a:	22fc      	movs	r2, #252	; 0xfc
 800b99c:	4918      	ldr	r1, [pc, #96]	; (800ba00 <tcpip_inpkt+0x80>)
 800b99e:	4819      	ldr	r0, [pc, #100]	; (800ba04 <tcpip_inpkt+0x84>)
 800b9a0:	f00b fbd6 	bl	8017150 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b9a4:	2009      	movs	r0, #9
 800b9a6:	f000 fda7 	bl	800c4f8 <memp_malloc>
 800b9aa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d102      	bne.n	800b9b8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b6:	e01a      	b.n	800b9ee <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b9d0:	6979      	ldr	r1, [r7, #20]
 800b9d2:	4809      	ldr	r0, [pc, #36]	; (800b9f8 <tcpip_inpkt+0x78>)
 800b9d4:	f00a ffe6 	bl	80169a4 <sys_mbox_trypost>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d006      	beq.n	800b9ec <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b9de:	6979      	ldr	r1, [r7, #20]
 800b9e0:	2009      	movs	r0, #9
 800b9e2:	f000 fddb 	bl	800c59c <memp_free>
    return ERR_MEM;
 800b9e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ea:	e000      	b.n	800b9ee <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b9ec:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3718      	adds	r7, #24
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	20009bac 	.word	0x20009bac
 800b9fc:	08018a50 	.word	0x08018a50
 800ba00:	08018ac8 	.word	0x08018ac8
 800ba04:	08018aa0 	.word	0x08018aa0

0800ba08 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba18:	f003 0318 	and.w	r3, r3, #24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d006      	beq.n	800ba2e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ba20:	4a08      	ldr	r2, [pc, #32]	; (800ba44 <tcpip_input+0x3c>)
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7ff ffab 	bl	800b980 <tcpip_inpkt>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	e005      	b.n	800ba3a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ba2e:	4a06      	ldr	r2, [pc, #24]	; (800ba48 <tcpip_input+0x40>)
 800ba30:	6839      	ldr	r1, [r7, #0]
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7ff ffa4 	bl	800b980 <tcpip_inpkt>
 800ba38:	4603      	mov	r3, r0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	08016791 	.word	0x08016791
 800ba48:	08015699 	.word	0x08015699

0800ba4c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ba56:	4819      	ldr	r0, [pc, #100]	; (800babc <tcpip_try_callback+0x70>)
 800ba58:	f00b f819 	bl	8016a8e <sys_mbox_valid>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d106      	bne.n	800ba70 <tcpip_try_callback+0x24>
 800ba62:	4b17      	ldr	r3, [pc, #92]	; (800bac0 <tcpip_try_callback+0x74>)
 800ba64:	f240 125d 	movw	r2, #349	; 0x15d
 800ba68:	4916      	ldr	r1, [pc, #88]	; (800bac4 <tcpip_try_callback+0x78>)
 800ba6a:	4817      	ldr	r0, [pc, #92]	; (800bac8 <tcpip_try_callback+0x7c>)
 800ba6c:	f00b fb70 	bl	8017150 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ba70:	2008      	movs	r0, #8
 800ba72:	f000 fd41 	bl	800c4f8 <memp_malloc>
 800ba76:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d102      	bne.n	800ba84 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ba7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba82:	e017      	b.n	800bab4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2201      	movs	r2, #1
 800ba88:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ba96:	68f9      	ldr	r1, [r7, #12]
 800ba98:	4808      	ldr	r0, [pc, #32]	; (800babc <tcpip_try_callback+0x70>)
 800ba9a:	f00a ff83 	bl	80169a4 <sys_mbox_trypost>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d006      	beq.n	800bab2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800baa4:	68f9      	ldr	r1, [r7, #12]
 800baa6:	2008      	movs	r0, #8
 800baa8:	f000 fd78 	bl	800c59c <memp_free>
    return ERR_MEM;
 800baac:	f04f 33ff 	mov.w	r3, #4294967295
 800bab0:	e000      	b.n	800bab4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	20009bac 	.word	0x20009bac
 800bac0:	08018a50 	.word	0x08018a50
 800bac4:	08018ac8 	.word	0x08018ac8
 800bac8:	08018aa0 	.word	0x08018aa0

0800bacc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800bad8:	4806      	ldr	r0, [pc, #24]	; (800baf4 <tcpip_send_msg_wait_sem+0x28>)
 800bada:	f00b f8b1 	bl	8016c40 <sys_mutex_lock>
  fn(apimsg);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	68b8      	ldr	r0, [r7, #8]
 800bae2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800bae4:	4803      	ldr	r0, [pc, #12]	; (800baf4 <tcpip_send_msg_wait_sem+0x28>)
 800bae6:	f00b f8ba 	bl	8016c5e <sys_mutex_unlock>
  return ERR_OK;
 800baea:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800baec:	4618      	mov	r0, r3
 800baee:	3710      	adds	r7, #16
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	20009bb0 	.word	0x20009bb0

0800baf8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af02      	add	r7, sp, #8
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bb02:	f000 f871 	bl	800bbe8 <lwip_init>

  tcpip_init_done = initfunc;
 800bb06:	4a17      	ldr	r2, [pc, #92]	; (800bb64 <tcpip_init+0x6c>)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bb0c:	4a16      	ldr	r2, [pc, #88]	; (800bb68 <tcpip_init+0x70>)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bb12:	2106      	movs	r1, #6
 800bb14:	4815      	ldr	r0, [pc, #84]	; (800bb6c <tcpip_init+0x74>)
 800bb16:	f00a ff11 	bl	801693c <sys_mbox_new>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d006      	beq.n	800bb2e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bb20:	4b13      	ldr	r3, [pc, #76]	; (800bb70 <tcpip_init+0x78>)
 800bb22:	f240 2261 	movw	r2, #609	; 0x261
 800bb26:	4913      	ldr	r1, [pc, #76]	; (800bb74 <tcpip_init+0x7c>)
 800bb28:	4813      	ldr	r0, [pc, #76]	; (800bb78 <tcpip_init+0x80>)
 800bb2a:	f00b fb11 	bl	8017150 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800bb2e:	4813      	ldr	r0, [pc, #76]	; (800bb7c <tcpip_init+0x84>)
 800bb30:	f00b f86a 	bl	8016c08 <sys_mutex_new>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d006      	beq.n	800bb48 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800bb3a:	4b0d      	ldr	r3, [pc, #52]	; (800bb70 <tcpip_init+0x78>)
 800bb3c:	f240 2265 	movw	r2, #613	; 0x265
 800bb40:	490f      	ldr	r1, [pc, #60]	; (800bb80 <tcpip_init+0x88>)
 800bb42:	480d      	ldr	r0, [pc, #52]	; (800bb78 <tcpip_init+0x80>)
 800bb44:	f00b fb04 	bl	8017150 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bb48:	2300      	movs	r3, #0
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb50:	2200      	movs	r2, #0
 800bb52:	490c      	ldr	r1, [pc, #48]	; (800bb84 <tcpip_init+0x8c>)
 800bb54:	480c      	ldr	r0, [pc, #48]	; (800bb88 <tcpip_init+0x90>)
 800bb56:	f00b f88f 	bl	8016c78 <sys_thread_new>
}
 800bb5a:	bf00      	nop
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	20009ba4 	.word	0x20009ba4
 800bb68:	20009ba8 	.word	0x20009ba8
 800bb6c:	20009bac 	.word	0x20009bac
 800bb70:	08018a50 	.word	0x08018a50
 800bb74:	08018ad8 	.word	0x08018ad8
 800bb78:	08018aa0 	.word	0x08018aa0
 800bb7c:	20009bb0 	.word	0x20009bb0
 800bb80:	08018afc 	.word	0x08018afc
 800bb84:	0800b889 	.word	0x0800b889
 800bb88:	08018b20 	.word	0x08018b20

0800bb8c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	4603      	mov	r3, r0
 800bb94:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bb96:	88fb      	ldrh	r3, [r7, #6]
 800bb98:	021b      	lsls	r3, r3, #8
 800bb9a:	b21a      	sxth	r2, r3
 800bb9c:	88fb      	ldrh	r3, [r7, #6]
 800bb9e:	0a1b      	lsrs	r3, r3, #8
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	b21b      	sxth	r3, r3
 800bba4:	4313      	orrs	r3, r2
 800bba6:	b21b      	sxth	r3, r3
 800bba8:	b29b      	uxth	r3, r3
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	370c      	adds	r7, #12
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bbb6:	b480      	push	{r7}
 800bbb8:	b083      	sub	sp, #12
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	061a      	lsls	r2, r3, #24
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	021b      	lsls	r3, r3, #8
 800bbc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbca:	431a      	orrs	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	0a1b      	lsrs	r3, r3, #8
 800bbd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bbd4:	431a      	orrs	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	0e1b      	lsrs	r3, r3, #24
 800bbda:	4313      	orrs	r3, r2
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bbf2:	f00a fffb 	bl	8016bec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bbf6:	f000 f8d5 	bl	800bda4 <mem_init>
  memp_init();
 800bbfa:	f000 fc31 	bl	800c460 <memp_init>
  pbuf_init();
  netif_init();
 800bbfe:	f000 fcf7 	bl	800c5f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bc02:	f007 feeb 	bl	80139dc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bc06:	f001 fdb3 	bl	800d770 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bc0a:	f007 fe2d 	bl	8013868 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bc0e:	bf00      	nop
 800bc10:	3708      	adds	r7, #8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
	...

0800bc18 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	4603      	mov	r3, r0
 800bc20:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bc22:	4b05      	ldr	r3, [pc, #20]	; (800bc38 <ptr_to_mem+0x20>)
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	88fb      	ldrh	r3, [r7, #6]
 800bc28:	4413      	add	r3, r2
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	370c      	adds	r7, #12
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	2000a220 	.word	0x2000a220

0800bc3c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bc44:	4b05      	ldr	r3, [pc, #20]	; (800bc5c <mem_to_ptr+0x20>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	1ad3      	subs	r3, r2, r3
 800bc4c:	b29b      	uxth	r3, r3
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	2000a220 	.word	0x2000a220

0800bc60 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bc60:	b590      	push	{r4, r7, lr}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bc68:	4b45      	ldr	r3, [pc, #276]	; (800bd80 <plug_holes+0x120>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d206      	bcs.n	800bc80 <plug_holes+0x20>
 800bc72:	4b44      	ldr	r3, [pc, #272]	; (800bd84 <plug_holes+0x124>)
 800bc74:	f240 12df 	movw	r2, #479	; 0x1df
 800bc78:	4943      	ldr	r1, [pc, #268]	; (800bd88 <plug_holes+0x128>)
 800bc7a:	4844      	ldr	r0, [pc, #272]	; (800bd8c <plug_holes+0x12c>)
 800bc7c:	f00b fa68 	bl	8017150 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bc80:	4b43      	ldr	r3, [pc, #268]	; (800bd90 <plug_holes+0x130>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d306      	bcc.n	800bc98 <plug_holes+0x38>
 800bc8a:	4b3e      	ldr	r3, [pc, #248]	; (800bd84 <plug_holes+0x124>)
 800bc8c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bc90:	4940      	ldr	r1, [pc, #256]	; (800bd94 <plug_holes+0x134>)
 800bc92:	483e      	ldr	r0, [pc, #248]	; (800bd8c <plug_holes+0x12c>)
 800bc94:	f00b fa5c 	bl	8017150 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	791b      	ldrb	r3, [r3, #4]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d006      	beq.n	800bcae <plug_holes+0x4e>
 800bca0:	4b38      	ldr	r3, [pc, #224]	; (800bd84 <plug_holes+0x124>)
 800bca2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bca6:	493c      	ldr	r1, [pc, #240]	; (800bd98 <plug_holes+0x138>)
 800bca8:	4838      	ldr	r0, [pc, #224]	; (800bd8c <plug_holes+0x12c>)
 800bcaa:	f00b fa51 	bl	8017150 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcb6:	d906      	bls.n	800bcc6 <plug_holes+0x66>
 800bcb8:	4b32      	ldr	r3, [pc, #200]	; (800bd84 <plug_holes+0x124>)
 800bcba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bcbe:	4937      	ldr	r1, [pc, #220]	; (800bd9c <plug_holes+0x13c>)
 800bcc0:	4832      	ldr	r0, [pc, #200]	; (800bd8c <plug_holes+0x12c>)
 800bcc2:	f00b fa45 	bl	8017150 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	881b      	ldrh	r3, [r3, #0]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7ff ffa4 	bl	800bc18 <ptr_to_mem>
 800bcd0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d024      	beq.n	800bd24 <plug_holes+0xc4>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	791b      	ldrb	r3, [r3, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d120      	bne.n	800bd24 <plug_holes+0xc4>
 800bce2:	4b2b      	ldr	r3, [pc, #172]	; (800bd90 <plug_holes+0x130>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d01b      	beq.n	800bd24 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bcec:	4b2c      	ldr	r3, [pc, #176]	; (800bda0 <plug_holes+0x140>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d102      	bne.n	800bcfc <plug_holes+0x9c>
      lfree = mem;
 800bcf6:	4a2a      	ldr	r2, [pc, #168]	; (800bda0 <plug_holes+0x140>)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	881a      	ldrh	r2, [r3, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd0c:	d00a      	beq.n	800bd24 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	881b      	ldrh	r3, [r3, #0]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff ff80 	bl	800bc18 <ptr_to_mem>
 800bd18:	4604      	mov	r4, r0
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7ff ff8e 	bl	800bc3c <mem_to_ptr>
 800bd20:	4603      	mov	r3, r0
 800bd22:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	885b      	ldrh	r3, [r3, #2]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7ff ff75 	bl	800bc18 <ptr_to_mem>
 800bd2e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d01f      	beq.n	800bd78 <plug_holes+0x118>
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	791b      	ldrb	r3, [r3, #4]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d11b      	bne.n	800bd78 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bd40:	4b17      	ldr	r3, [pc, #92]	; (800bda0 <plug_holes+0x140>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d102      	bne.n	800bd50 <plug_holes+0xf0>
      lfree = pmem;
 800bd4a:	4a15      	ldr	r2, [pc, #84]	; (800bda0 <plug_holes+0x140>)
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	881a      	ldrh	r2, [r3, #0]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	881b      	ldrh	r3, [r3, #0]
 800bd5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd60:	d00a      	beq.n	800bd78 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7ff ff56 	bl	800bc18 <ptr_to_mem>
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	68b8      	ldr	r0, [r7, #8]
 800bd70:	f7ff ff64 	bl	800bc3c <mem_to_ptr>
 800bd74:	4603      	mov	r3, r0
 800bd76:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bd78:	bf00      	nop
 800bd7a:	3714      	adds	r7, #20
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd90      	pop	{r4, r7, pc}
 800bd80:	2000a220 	.word	0x2000a220
 800bd84:	08018b30 	.word	0x08018b30
 800bd88:	08018b60 	.word	0x08018b60
 800bd8c:	08018b78 	.word	0x08018b78
 800bd90:	2000a224 	.word	0x2000a224
 800bd94:	08018ba0 	.word	0x08018ba0
 800bd98:	08018bbc 	.word	0x08018bbc
 800bd9c:	08018bd8 	.word	0x08018bd8
 800bda0:	2000a22c 	.word	0x2000a22c

0800bda4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bdaa:	4b1f      	ldr	r3, [pc, #124]	; (800be28 <mem_init+0x84>)
 800bdac:	3303      	adds	r3, #3
 800bdae:	f023 0303 	bic.w	r3, r3, #3
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	4b1d      	ldr	r3, [pc, #116]	; (800be2c <mem_init+0x88>)
 800bdb6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bdb8:	4b1c      	ldr	r3, [pc, #112]	; (800be2c <mem_init+0x88>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bdc4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bdd2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800bdd6:	f7ff ff1f 	bl	800bc18 <ptr_to_mem>
 800bdda:	4603      	mov	r3, r0
 800bddc:	4a14      	ldr	r2, [pc, #80]	; (800be30 <mem_init+0x8c>)
 800bdde:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bde0:	4b13      	ldr	r3, [pc, #76]	; (800be30 <mem_init+0x8c>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2201      	movs	r2, #1
 800bde6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bde8:	4b11      	ldr	r3, [pc, #68]	; (800be30 <mem_init+0x8c>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bdf0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bdf2:	4b0f      	ldr	r3, [pc, #60]	; (800be30 <mem_init+0x8c>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bdfa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bdfc:	4b0b      	ldr	r3, [pc, #44]	; (800be2c <mem_init+0x88>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a0c      	ldr	r2, [pc, #48]	; (800be34 <mem_init+0x90>)
 800be02:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800be04:	480c      	ldr	r0, [pc, #48]	; (800be38 <mem_init+0x94>)
 800be06:	f00a feff 	bl	8016c08 <sys_mutex_new>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d006      	beq.n	800be1e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800be10:	4b0a      	ldr	r3, [pc, #40]	; (800be3c <mem_init+0x98>)
 800be12:	f240 221f 	movw	r2, #543	; 0x21f
 800be16:	490a      	ldr	r1, [pc, #40]	; (800be40 <mem_init+0x9c>)
 800be18:	480a      	ldr	r0, [pc, #40]	; (800be44 <mem_init+0xa0>)
 800be1a:	f00b f999 	bl	8017150 <iprintf>
  }
}
 800be1e:	bf00      	nop
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	20009bcc 	.word	0x20009bcc
 800be2c:	2000a220 	.word	0x2000a220
 800be30:	2000a224 	.word	0x2000a224
 800be34:	2000a22c 	.word	0x2000a22c
 800be38:	2000a228 	.word	0x2000a228
 800be3c:	08018b30 	.word	0x08018b30
 800be40:	08018c04 	.word	0x08018c04
 800be44:	08018b78 	.word	0x08018b78

0800be48 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b086      	sub	sp, #24
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7ff fef3 	bl	800bc3c <mem_to_ptr>
 800be56:	4603      	mov	r3, r0
 800be58:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	881b      	ldrh	r3, [r3, #0]
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff feda 	bl	800bc18 <ptr_to_mem>
 800be64:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	885b      	ldrh	r3, [r3, #2]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7ff fed4 	bl	800bc18 <ptr_to_mem>
 800be70:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	881b      	ldrh	r3, [r3, #0]
 800be76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be7a:	d818      	bhi.n	800beae <mem_link_valid+0x66>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	885b      	ldrh	r3, [r3, #2]
 800be80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be84:	d813      	bhi.n	800beae <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800be8a:	8afa      	ldrh	r2, [r7, #22]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d004      	beq.n	800be9a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	881b      	ldrh	r3, [r3, #0]
 800be94:	8afa      	ldrh	r2, [r7, #22]
 800be96:	429a      	cmp	r2, r3
 800be98:	d109      	bne.n	800beae <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800be9a:	4b08      	ldr	r3, [pc, #32]	; (800bebc <mem_link_valid+0x74>)
 800be9c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be9e:	693a      	ldr	r2, [r7, #16]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d006      	beq.n	800beb2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	885b      	ldrh	r3, [r3, #2]
 800bea8:	8afa      	ldrh	r2, [r7, #22]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d001      	beq.n	800beb2 <mem_link_valid+0x6a>
    return 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	e000      	b.n	800beb4 <mem_link_valid+0x6c>
  }
  return 1;
 800beb2:	2301      	movs	r3, #1
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3718      	adds	r7, #24
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	2000a224 	.word	0x2000a224

0800bec0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b088      	sub	sp, #32
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d070      	beq.n	800bfb0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f003 0303 	and.w	r3, r3, #3
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00d      	beq.n	800bef4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bed8:	4b37      	ldr	r3, [pc, #220]	; (800bfb8 <mem_free+0xf8>)
 800beda:	f240 2273 	movw	r2, #627	; 0x273
 800bede:	4937      	ldr	r1, [pc, #220]	; (800bfbc <mem_free+0xfc>)
 800bee0:	4837      	ldr	r0, [pc, #220]	; (800bfc0 <mem_free+0x100>)
 800bee2:	f00b f935 	bl	8017150 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bee6:	f00a feed 	bl	8016cc4 <sys_arch_protect>
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f00a fef7 	bl	8016ce0 <sys_arch_unprotect>
    return;
 800bef2:	e05e      	b.n	800bfb2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	3b08      	subs	r3, #8
 800bef8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800befa:	4b32      	ldr	r3, [pc, #200]	; (800bfc4 <mem_free+0x104>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	69fa      	ldr	r2, [r7, #28]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d306      	bcc.n	800bf12 <mem_free+0x52>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f103 020c 	add.w	r2, r3, #12
 800bf0a:	4b2f      	ldr	r3, [pc, #188]	; (800bfc8 <mem_free+0x108>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d90d      	bls.n	800bf2e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bf12:	4b29      	ldr	r3, [pc, #164]	; (800bfb8 <mem_free+0xf8>)
 800bf14:	f240 227f 	movw	r2, #639	; 0x27f
 800bf18:	492c      	ldr	r1, [pc, #176]	; (800bfcc <mem_free+0x10c>)
 800bf1a:	4829      	ldr	r0, [pc, #164]	; (800bfc0 <mem_free+0x100>)
 800bf1c:	f00b f918 	bl	8017150 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf20:	f00a fed0 	bl	8016cc4 <sys_arch_protect>
 800bf24:	6138      	str	r0, [r7, #16]
 800bf26:	6938      	ldr	r0, [r7, #16]
 800bf28:	f00a feda 	bl	8016ce0 <sys_arch_unprotect>
    return;
 800bf2c:	e041      	b.n	800bfb2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bf2e:	4828      	ldr	r0, [pc, #160]	; (800bfd0 <mem_free+0x110>)
 800bf30:	f00a fe86 	bl	8016c40 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	791b      	ldrb	r3, [r3, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d110      	bne.n	800bf5e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bf3c:	4b1e      	ldr	r3, [pc, #120]	; (800bfb8 <mem_free+0xf8>)
 800bf3e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bf42:	4924      	ldr	r1, [pc, #144]	; (800bfd4 <mem_free+0x114>)
 800bf44:	481e      	ldr	r0, [pc, #120]	; (800bfc0 <mem_free+0x100>)
 800bf46:	f00b f903 	bl	8017150 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bf4a:	4821      	ldr	r0, [pc, #132]	; (800bfd0 <mem_free+0x110>)
 800bf4c:	f00a fe87 	bl	8016c5e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf50:	f00a feb8 	bl	8016cc4 <sys_arch_protect>
 800bf54:	6178      	str	r0, [r7, #20]
 800bf56:	6978      	ldr	r0, [r7, #20]
 800bf58:	f00a fec2 	bl	8016ce0 <sys_arch_unprotect>
    return;
 800bf5c:	e029      	b.n	800bfb2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bf5e:	69f8      	ldr	r0, [r7, #28]
 800bf60:	f7ff ff72 	bl	800be48 <mem_link_valid>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d110      	bne.n	800bf8c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bf6a:	4b13      	ldr	r3, [pc, #76]	; (800bfb8 <mem_free+0xf8>)
 800bf6c:	f240 2295 	movw	r2, #661	; 0x295
 800bf70:	4919      	ldr	r1, [pc, #100]	; (800bfd8 <mem_free+0x118>)
 800bf72:	4813      	ldr	r0, [pc, #76]	; (800bfc0 <mem_free+0x100>)
 800bf74:	f00b f8ec 	bl	8017150 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bf78:	4815      	ldr	r0, [pc, #84]	; (800bfd0 <mem_free+0x110>)
 800bf7a:	f00a fe70 	bl	8016c5e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf7e:	f00a fea1 	bl	8016cc4 <sys_arch_protect>
 800bf82:	61b8      	str	r0, [r7, #24]
 800bf84:	69b8      	ldr	r0, [r7, #24]
 800bf86:	f00a feab 	bl	8016ce0 <sys_arch_unprotect>
    return;
 800bf8a:	e012      	b.n	800bfb2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bf92:	4b12      	ldr	r3, [pc, #72]	; (800bfdc <mem_free+0x11c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	69fa      	ldr	r2, [r7, #28]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d202      	bcs.n	800bfa2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bf9c:	4a0f      	ldr	r2, [pc, #60]	; (800bfdc <mem_free+0x11c>)
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bfa2:	69f8      	ldr	r0, [r7, #28]
 800bfa4:	f7ff fe5c 	bl	800bc60 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bfa8:	4809      	ldr	r0, [pc, #36]	; (800bfd0 <mem_free+0x110>)
 800bfaa:	f00a fe58 	bl	8016c5e <sys_mutex_unlock>
 800bfae:	e000      	b.n	800bfb2 <mem_free+0xf2>
    return;
 800bfb0:	bf00      	nop
}
 800bfb2:	3720      	adds	r7, #32
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	08018b30 	.word	0x08018b30
 800bfbc:	08018c20 	.word	0x08018c20
 800bfc0:	08018b78 	.word	0x08018b78
 800bfc4:	2000a220 	.word	0x2000a220
 800bfc8:	2000a224 	.word	0x2000a224
 800bfcc:	08018c44 	.word	0x08018c44
 800bfd0:	2000a228 	.word	0x2000a228
 800bfd4:	08018c60 	.word	0x08018c60
 800bfd8:	08018c88 	.word	0x08018c88
 800bfdc:	2000a22c 	.word	0x2000a22c

0800bfe0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b088      	sub	sp, #32
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bfec:	887b      	ldrh	r3, [r7, #2]
 800bfee:	3303      	adds	r3, #3
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	f023 0303 	bic.w	r3, r3, #3
 800bff6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bff8:	8bfb      	ldrh	r3, [r7, #30]
 800bffa:	2b0b      	cmp	r3, #11
 800bffc:	d801      	bhi.n	800c002 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bffe:	230c      	movs	r3, #12
 800c000:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c002:	8bfb      	ldrh	r3, [r7, #30]
 800c004:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c008:	d803      	bhi.n	800c012 <mem_trim+0x32>
 800c00a:	8bfa      	ldrh	r2, [r7, #30]
 800c00c:	887b      	ldrh	r3, [r7, #2]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d201      	bcs.n	800c016 <mem_trim+0x36>
    return NULL;
 800c012:	2300      	movs	r3, #0
 800c014:	e0d8      	b.n	800c1c8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c016:	4b6e      	ldr	r3, [pc, #440]	; (800c1d0 <mem_trim+0x1f0>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d304      	bcc.n	800c02a <mem_trim+0x4a>
 800c020:	4b6c      	ldr	r3, [pc, #432]	; (800c1d4 <mem_trim+0x1f4>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	429a      	cmp	r2, r3
 800c028:	d306      	bcc.n	800c038 <mem_trim+0x58>
 800c02a:	4b6b      	ldr	r3, [pc, #428]	; (800c1d8 <mem_trim+0x1f8>)
 800c02c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c030:	496a      	ldr	r1, [pc, #424]	; (800c1dc <mem_trim+0x1fc>)
 800c032:	486b      	ldr	r0, [pc, #428]	; (800c1e0 <mem_trim+0x200>)
 800c034:	f00b f88c 	bl	8017150 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c038:	4b65      	ldr	r3, [pc, #404]	; (800c1d0 <mem_trim+0x1f0>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d304      	bcc.n	800c04c <mem_trim+0x6c>
 800c042:	4b64      	ldr	r3, [pc, #400]	; (800c1d4 <mem_trim+0x1f4>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d307      	bcc.n	800c05c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c04c:	f00a fe3a 	bl	8016cc4 <sys_arch_protect>
 800c050:	60b8      	str	r0, [r7, #8]
 800c052:	68b8      	ldr	r0, [r7, #8]
 800c054:	f00a fe44 	bl	8016ce0 <sys_arch_unprotect>
    return rmem;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	e0b5      	b.n	800c1c8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	3b08      	subs	r3, #8
 800c060:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c062:	69b8      	ldr	r0, [r7, #24]
 800c064:	f7ff fdea 	bl	800bc3c <mem_to_ptr>
 800c068:	4603      	mov	r3, r0
 800c06a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	881a      	ldrh	r2, [r3, #0]
 800c070:	8afb      	ldrh	r3, [r7, #22]
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	b29b      	uxth	r3, r3
 800c076:	3b08      	subs	r3, #8
 800c078:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c07a:	8bfa      	ldrh	r2, [r7, #30]
 800c07c:	8abb      	ldrh	r3, [r7, #20]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d906      	bls.n	800c090 <mem_trim+0xb0>
 800c082:	4b55      	ldr	r3, [pc, #340]	; (800c1d8 <mem_trim+0x1f8>)
 800c084:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c088:	4956      	ldr	r1, [pc, #344]	; (800c1e4 <mem_trim+0x204>)
 800c08a:	4855      	ldr	r0, [pc, #340]	; (800c1e0 <mem_trim+0x200>)
 800c08c:	f00b f860 	bl	8017150 <iprintf>
  if (newsize > size) {
 800c090:	8bfa      	ldrh	r2, [r7, #30]
 800c092:	8abb      	ldrh	r3, [r7, #20]
 800c094:	429a      	cmp	r2, r3
 800c096:	d901      	bls.n	800c09c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c098:	2300      	movs	r3, #0
 800c09a:	e095      	b.n	800c1c8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c09c:	8bfa      	ldrh	r2, [r7, #30]
 800c09e:	8abb      	ldrh	r3, [r7, #20]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d101      	bne.n	800c0a8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	e08f      	b.n	800c1c8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c0a8:	484f      	ldr	r0, [pc, #316]	; (800c1e8 <mem_trim+0x208>)
 800c0aa:	f00a fdc9 	bl	8016c40 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	881b      	ldrh	r3, [r3, #0]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7ff fdb0 	bl	800bc18 <ptr_to_mem>
 800c0b8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	791b      	ldrb	r3, [r3, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d13f      	bne.n	800c142 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	881b      	ldrh	r3, [r3, #0]
 800c0c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c0ca:	d106      	bne.n	800c0da <mem_trim+0xfa>
 800c0cc:	4b42      	ldr	r3, [pc, #264]	; (800c1d8 <mem_trim+0x1f8>)
 800c0ce:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c0d2:	4946      	ldr	r1, [pc, #280]	; (800c1ec <mem_trim+0x20c>)
 800c0d4:	4842      	ldr	r0, [pc, #264]	; (800c1e0 <mem_trim+0x200>)
 800c0d6:	f00b f83b 	bl	8017150 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c0e0:	8afa      	ldrh	r2, [r7, #22]
 800c0e2:	8bfb      	ldrh	r3, [r7, #30]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	3308      	adds	r3, #8
 800c0ea:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c0ec:	4b40      	ldr	r3, [pc, #256]	; (800c1f0 <mem_trim+0x210>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	693a      	ldr	r2, [r7, #16]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d106      	bne.n	800c104 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c0f6:	89fb      	ldrh	r3, [r7, #14]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7ff fd8d 	bl	800bc18 <ptr_to_mem>
 800c0fe:	4603      	mov	r3, r0
 800c100:	4a3b      	ldr	r2, [pc, #236]	; (800c1f0 <mem_trim+0x210>)
 800c102:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c104:	89fb      	ldrh	r3, [r7, #14]
 800c106:	4618      	mov	r0, r3
 800c108:	f7ff fd86 	bl	800bc18 <ptr_to_mem>
 800c10c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	2200      	movs	r2, #0
 800c112:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	89ba      	ldrh	r2, [r7, #12]
 800c118:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	8afa      	ldrh	r2, [r7, #22]
 800c11e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	89fa      	ldrh	r2, [r7, #14]
 800c124:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	881b      	ldrh	r3, [r3, #0]
 800c12a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c12e:	d047      	beq.n	800c1c0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	881b      	ldrh	r3, [r3, #0]
 800c134:	4618      	mov	r0, r3
 800c136:	f7ff fd6f 	bl	800bc18 <ptr_to_mem>
 800c13a:	4602      	mov	r2, r0
 800c13c:	89fb      	ldrh	r3, [r7, #14]
 800c13e:	8053      	strh	r3, [r2, #2]
 800c140:	e03e      	b.n	800c1c0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c142:	8bfb      	ldrh	r3, [r7, #30]
 800c144:	f103 0214 	add.w	r2, r3, #20
 800c148:	8abb      	ldrh	r3, [r7, #20]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d838      	bhi.n	800c1c0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c14e:	8afa      	ldrh	r2, [r7, #22]
 800c150:	8bfb      	ldrh	r3, [r7, #30]
 800c152:	4413      	add	r3, r2
 800c154:	b29b      	uxth	r3, r3
 800c156:	3308      	adds	r3, #8
 800c158:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	881b      	ldrh	r3, [r3, #0]
 800c15e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c162:	d106      	bne.n	800c172 <mem_trim+0x192>
 800c164:	4b1c      	ldr	r3, [pc, #112]	; (800c1d8 <mem_trim+0x1f8>)
 800c166:	f240 3216 	movw	r2, #790	; 0x316
 800c16a:	4920      	ldr	r1, [pc, #128]	; (800c1ec <mem_trim+0x20c>)
 800c16c:	481c      	ldr	r0, [pc, #112]	; (800c1e0 <mem_trim+0x200>)
 800c16e:	f00a ffef 	bl	8017150 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c172:	89fb      	ldrh	r3, [r7, #14]
 800c174:	4618      	mov	r0, r3
 800c176:	f7ff fd4f 	bl	800bc18 <ptr_to_mem>
 800c17a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c17c:	4b1c      	ldr	r3, [pc, #112]	; (800c1f0 <mem_trim+0x210>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	429a      	cmp	r2, r3
 800c184:	d202      	bcs.n	800c18c <mem_trim+0x1ac>
      lfree = mem2;
 800c186:	4a1a      	ldr	r2, [pc, #104]	; (800c1f0 <mem_trim+0x210>)
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	2200      	movs	r2, #0
 800c190:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	881a      	ldrh	r2, [r3, #0]
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	8afa      	ldrh	r2, [r7, #22]
 800c19e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	89fa      	ldrh	r2, [r7, #14]
 800c1a4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	881b      	ldrh	r3, [r3, #0]
 800c1aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1ae:	d007      	beq.n	800c1c0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	881b      	ldrh	r3, [r3, #0]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff fd2f 	bl	800bc18 <ptr_to_mem>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	89fb      	ldrh	r3, [r7, #14]
 800c1be:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c1c0:	4809      	ldr	r0, [pc, #36]	; (800c1e8 <mem_trim+0x208>)
 800c1c2:	f00a fd4c 	bl	8016c5e <sys_mutex_unlock>
  return rmem;
 800c1c6:	687b      	ldr	r3, [r7, #4]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3720      	adds	r7, #32
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	2000a220 	.word	0x2000a220
 800c1d4:	2000a224 	.word	0x2000a224
 800c1d8:	08018b30 	.word	0x08018b30
 800c1dc:	08018cbc 	.word	0x08018cbc
 800c1e0:	08018b78 	.word	0x08018b78
 800c1e4:	08018cd4 	.word	0x08018cd4
 800c1e8:	2000a228 	.word	0x2000a228
 800c1ec:	08018cf4 	.word	0x08018cf4
 800c1f0:	2000a22c 	.word	0x2000a22c

0800c1f4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b088      	sub	sp, #32
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c1fe:	88fb      	ldrh	r3, [r7, #6]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d101      	bne.n	800c208 <mem_malloc+0x14>
    return NULL;
 800c204:	2300      	movs	r3, #0
 800c206:	e0e2      	b.n	800c3ce <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c208:	88fb      	ldrh	r3, [r7, #6]
 800c20a:	3303      	adds	r3, #3
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	f023 0303 	bic.w	r3, r3, #3
 800c212:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c214:	8bbb      	ldrh	r3, [r7, #28]
 800c216:	2b0b      	cmp	r3, #11
 800c218:	d801      	bhi.n	800c21e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c21a:	230c      	movs	r3, #12
 800c21c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c21e:	8bbb      	ldrh	r3, [r7, #28]
 800c220:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c224:	d803      	bhi.n	800c22e <mem_malloc+0x3a>
 800c226:	8bba      	ldrh	r2, [r7, #28]
 800c228:	88fb      	ldrh	r3, [r7, #6]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d201      	bcs.n	800c232 <mem_malloc+0x3e>
    return NULL;
 800c22e:	2300      	movs	r3, #0
 800c230:	e0cd      	b.n	800c3ce <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c232:	4869      	ldr	r0, [pc, #420]	; (800c3d8 <mem_malloc+0x1e4>)
 800c234:	f00a fd04 	bl	8016c40 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c238:	4b68      	ldr	r3, [pc, #416]	; (800c3dc <mem_malloc+0x1e8>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7ff fcfd 	bl	800bc3c <mem_to_ptr>
 800c242:	4603      	mov	r3, r0
 800c244:	83fb      	strh	r3, [r7, #30]
 800c246:	e0b7      	b.n	800c3b8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c248:	8bfb      	ldrh	r3, [r7, #30]
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7ff fce4 	bl	800bc18 <ptr_to_mem>
 800c250:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	791b      	ldrb	r3, [r3, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	f040 80a7 	bne.w	800c3aa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	881b      	ldrh	r3, [r3, #0]
 800c260:	461a      	mov	r2, r3
 800c262:	8bfb      	ldrh	r3, [r7, #30]
 800c264:	1ad3      	subs	r3, r2, r3
 800c266:	f1a3 0208 	sub.w	r2, r3, #8
 800c26a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c26c:	429a      	cmp	r2, r3
 800c26e:	f0c0 809c 	bcc.w	800c3aa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	881b      	ldrh	r3, [r3, #0]
 800c276:	461a      	mov	r2, r3
 800c278:	8bfb      	ldrh	r3, [r7, #30]
 800c27a:	1ad3      	subs	r3, r2, r3
 800c27c:	f1a3 0208 	sub.w	r2, r3, #8
 800c280:	8bbb      	ldrh	r3, [r7, #28]
 800c282:	3314      	adds	r3, #20
 800c284:	429a      	cmp	r2, r3
 800c286:	d333      	bcc.n	800c2f0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c288:	8bfa      	ldrh	r2, [r7, #30]
 800c28a:	8bbb      	ldrh	r3, [r7, #28]
 800c28c:	4413      	add	r3, r2
 800c28e:	b29b      	uxth	r3, r3
 800c290:	3308      	adds	r3, #8
 800c292:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c294:	8a7b      	ldrh	r3, [r7, #18]
 800c296:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c29a:	d106      	bne.n	800c2aa <mem_malloc+0xb6>
 800c29c:	4b50      	ldr	r3, [pc, #320]	; (800c3e0 <mem_malloc+0x1ec>)
 800c29e:	f240 3287 	movw	r2, #903	; 0x387
 800c2a2:	4950      	ldr	r1, [pc, #320]	; (800c3e4 <mem_malloc+0x1f0>)
 800c2a4:	4850      	ldr	r0, [pc, #320]	; (800c3e8 <mem_malloc+0x1f4>)
 800c2a6:	f00a ff53 	bl	8017150 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c2aa:	8a7b      	ldrh	r3, [r7, #18]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7ff fcb3 	bl	800bc18 <ptr_to_mem>
 800c2b2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	881a      	ldrh	r2, [r3, #0]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	8bfa      	ldrh	r2, [r7, #30]
 800c2c6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	8a7a      	ldrh	r2, [r7, #18]
 800c2cc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	881b      	ldrh	r3, [r3, #0]
 800c2d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2dc:	d00b      	beq.n	800c2f6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	881b      	ldrh	r3, [r3, #0]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7ff fc98 	bl	800bc18 <ptr_to_mem>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	8a7b      	ldrh	r3, [r7, #18]
 800c2ec:	8053      	strh	r3, [r2, #2]
 800c2ee:	e002      	b.n	800c2f6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c2f6:	4b39      	ldr	r3, [pc, #228]	; (800c3dc <mem_malloc+0x1e8>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d127      	bne.n	800c350 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c300:	4b36      	ldr	r3, [pc, #216]	; (800c3dc <mem_malloc+0x1e8>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c306:	e005      	b.n	800c314 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	881b      	ldrh	r3, [r3, #0]
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7ff fc83 	bl	800bc18 <ptr_to_mem>
 800c312:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	791b      	ldrb	r3, [r3, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d004      	beq.n	800c326 <mem_malloc+0x132>
 800c31c:	4b33      	ldr	r3, [pc, #204]	; (800c3ec <mem_malloc+0x1f8>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	69ba      	ldr	r2, [r7, #24]
 800c322:	429a      	cmp	r2, r3
 800c324:	d1f0      	bne.n	800c308 <mem_malloc+0x114>
          }
          lfree = cur;
 800c326:	4a2d      	ldr	r2, [pc, #180]	; (800c3dc <mem_malloc+0x1e8>)
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c32c:	4b2b      	ldr	r3, [pc, #172]	; (800c3dc <mem_malloc+0x1e8>)
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	4b2e      	ldr	r3, [pc, #184]	; (800c3ec <mem_malloc+0x1f8>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	429a      	cmp	r2, r3
 800c336:	d00b      	beq.n	800c350 <mem_malloc+0x15c>
 800c338:	4b28      	ldr	r3, [pc, #160]	; (800c3dc <mem_malloc+0x1e8>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	791b      	ldrb	r3, [r3, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d006      	beq.n	800c350 <mem_malloc+0x15c>
 800c342:	4b27      	ldr	r3, [pc, #156]	; (800c3e0 <mem_malloc+0x1ec>)
 800c344:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c348:	4929      	ldr	r1, [pc, #164]	; (800c3f0 <mem_malloc+0x1fc>)
 800c34a:	4827      	ldr	r0, [pc, #156]	; (800c3e8 <mem_malloc+0x1f4>)
 800c34c:	f00a ff00 	bl	8017150 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c350:	4821      	ldr	r0, [pc, #132]	; (800c3d8 <mem_malloc+0x1e4>)
 800c352:	f00a fc84 	bl	8016c5e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c356:	8bba      	ldrh	r2, [r7, #28]
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	4413      	add	r3, r2
 800c35c:	3308      	adds	r3, #8
 800c35e:	4a23      	ldr	r2, [pc, #140]	; (800c3ec <mem_malloc+0x1f8>)
 800c360:	6812      	ldr	r2, [r2, #0]
 800c362:	4293      	cmp	r3, r2
 800c364:	d906      	bls.n	800c374 <mem_malloc+0x180>
 800c366:	4b1e      	ldr	r3, [pc, #120]	; (800c3e0 <mem_malloc+0x1ec>)
 800c368:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c36c:	4921      	ldr	r1, [pc, #132]	; (800c3f4 <mem_malloc+0x200>)
 800c36e:	481e      	ldr	r0, [pc, #120]	; (800c3e8 <mem_malloc+0x1f4>)
 800c370:	f00a feee 	bl	8017150 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	f003 0303 	and.w	r3, r3, #3
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d006      	beq.n	800c38c <mem_malloc+0x198>
 800c37e:	4b18      	ldr	r3, [pc, #96]	; (800c3e0 <mem_malloc+0x1ec>)
 800c380:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c384:	491c      	ldr	r1, [pc, #112]	; (800c3f8 <mem_malloc+0x204>)
 800c386:	4818      	ldr	r0, [pc, #96]	; (800c3e8 <mem_malloc+0x1f4>)
 800c388:	f00a fee2 	bl	8017150 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	f003 0303 	and.w	r3, r3, #3
 800c392:	2b00      	cmp	r3, #0
 800c394:	d006      	beq.n	800c3a4 <mem_malloc+0x1b0>
 800c396:	4b12      	ldr	r3, [pc, #72]	; (800c3e0 <mem_malloc+0x1ec>)
 800c398:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c39c:	4917      	ldr	r1, [pc, #92]	; (800c3fc <mem_malloc+0x208>)
 800c39e:	4812      	ldr	r0, [pc, #72]	; (800c3e8 <mem_malloc+0x1f4>)
 800c3a0:	f00a fed6 	bl	8017150 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	3308      	adds	r3, #8
 800c3a8:	e011      	b.n	800c3ce <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c3aa:	8bfb      	ldrh	r3, [r7, #30]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7ff fc33 	bl	800bc18 <ptr_to_mem>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	881b      	ldrh	r3, [r3, #0]
 800c3b6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c3b8:	8bfa      	ldrh	r2, [r7, #30]
 800c3ba:	8bbb      	ldrh	r3, [r7, #28]
 800c3bc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	f4ff af41 	bcc.w	800c248 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c3c6:	4804      	ldr	r0, [pc, #16]	; (800c3d8 <mem_malloc+0x1e4>)
 800c3c8:	f00a fc49 	bl	8016c5e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3720      	adds	r7, #32
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	2000a228 	.word	0x2000a228
 800c3dc:	2000a22c 	.word	0x2000a22c
 800c3e0:	08018b30 	.word	0x08018b30
 800c3e4:	08018cf4 	.word	0x08018cf4
 800c3e8:	08018b78 	.word	0x08018b78
 800c3ec:	2000a224 	.word	0x2000a224
 800c3f0:	08018d08 	.word	0x08018d08
 800c3f4:	08018d24 	.word	0x08018d24
 800c3f8:	08018d54 	.word	0x08018d54
 800c3fc:	08018d84 	.word	0x08018d84

0800c400 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	2200      	movs	r2, #0
 800c40e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	3303      	adds	r3, #3
 800c416:	f023 0303 	bic.w	r3, r3, #3
 800c41a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c41c:	2300      	movs	r3, #0
 800c41e:	60fb      	str	r3, [r7, #12]
 800c420:	e011      	b.n	800c446 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	881b      	ldrh	r3, [r3, #0]
 800c438:	461a      	mov	r2, r3
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	4413      	add	r3, r2
 800c43e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	3301      	adds	r3, #1
 800c444:	60fb      	str	r3, [r7, #12]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	885b      	ldrh	r3, [r3, #2]
 800c44a:	461a      	mov	r2, r3
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	4293      	cmp	r3, r2
 800c450:	dbe7      	blt.n	800c422 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c452:	bf00      	nop
 800c454:	bf00      	nop
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c466:	2300      	movs	r3, #0
 800c468:	80fb      	strh	r3, [r7, #6]
 800c46a:	e009      	b.n	800c480 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c46c:	88fb      	ldrh	r3, [r7, #6]
 800c46e:	4a08      	ldr	r2, [pc, #32]	; (800c490 <memp_init+0x30>)
 800c470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c474:	4618      	mov	r0, r3
 800c476:	f7ff ffc3 	bl	800c400 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c47a:	88fb      	ldrh	r3, [r7, #6]
 800c47c:	3301      	adds	r3, #1
 800c47e:	80fb      	strh	r3, [r7, #6]
 800c480:	88fb      	ldrh	r3, [r7, #6]
 800c482:	2b0c      	cmp	r3, #12
 800c484:	d9f2      	bls.n	800c46c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c486:	bf00      	nop
 800c488:	bf00      	nop
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	0801b598 	.word	0x0801b598

0800c494 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c49c:	f00a fc12 	bl	8016cc4 <sys_arch_protect>
 800c4a0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d015      	beq.n	800c4dc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	68ba      	ldr	r2, [r7, #8]
 800c4b6:	6812      	ldr	r2, [r2, #0]
 800c4b8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	f003 0303 	and.w	r3, r3, #3
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d006      	beq.n	800c4d2 <do_memp_malloc_pool+0x3e>
 800c4c4:	4b09      	ldr	r3, [pc, #36]	; (800c4ec <do_memp_malloc_pool+0x58>)
 800c4c6:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c4ca:	4909      	ldr	r1, [pc, #36]	; (800c4f0 <do_memp_malloc_pool+0x5c>)
 800c4cc:	4809      	ldr	r0, [pc, #36]	; (800c4f4 <do_memp_malloc_pool+0x60>)
 800c4ce:	f00a fe3f 	bl	8017150 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f00a fc04 	bl	8016ce0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	e003      	b.n	800c4e4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f00a fbff 	bl	8016ce0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	08018da8 	.word	0x08018da8
 800c4f0:	08018dd8 	.word	0x08018dd8
 800c4f4:	08018dfc 	.word	0x08018dfc

0800c4f8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c502:	79fb      	ldrb	r3, [r7, #7]
 800c504:	2b0c      	cmp	r3, #12
 800c506:	d908      	bls.n	800c51a <memp_malloc+0x22>
 800c508:	4b0a      	ldr	r3, [pc, #40]	; (800c534 <memp_malloc+0x3c>)
 800c50a:	f240 1257 	movw	r2, #343	; 0x157
 800c50e:	490a      	ldr	r1, [pc, #40]	; (800c538 <memp_malloc+0x40>)
 800c510:	480a      	ldr	r0, [pc, #40]	; (800c53c <memp_malloc+0x44>)
 800c512:	f00a fe1d 	bl	8017150 <iprintf>
 800c516:	2300      	movs	r3, #0
 800c518:	e008      	b.n	800c52c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c51a:	79fb      	ldrb	r3, [r7, #7]
 800c51c:	4a08      	ldr	r2, [pc, #32]	; (800c540 <memp_malloc+0x48>)
 800c51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c522:	4618      	mov	r0, r3
 800c524:	f7ff ffb6 	bl	800c494 <do_memp_malloc_pool>
 800c528:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c52a:	68fb      	ldr	r3, [r7, #12]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	08018da8 	.word	0x08018da8
 800c538:	08018e38 	.word	0x08018e38
 800c53c:	08018dfc 	.word	0x08018dfc
 800c540:	0801b598 	.word	0x0801b598

0800c544 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	f003 0303 	and.w	r3, r3, #3
 800c554:	2b00      	cmp	r3, #0
 800c556:	d006      	beq.n	800c566 <do_memp_free_pool+0x22>
 800c558:	4b0d      	ldr	r3, [pc, #52]	; (800c590 <do_memp_free_pool+0x4c>)
 800c55a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c55e:	490d      	ldr	r1, [pc, #52]	; (800c594 <do_memp_free_pool+0x50>)
 800c560:	480d      	ldr	r0, [pc, #52]	; (800c598 <do_memp_free_pool+0x54>)
 800c562:	f00a fdf5 	bl	8017150 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c56a:	f00a fbab 	bl	8016cc4 <sys_arch_protect>
 800c56e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c582:	68b8      	ldr	r0, [r7, #8]
 800c584:	f00a fbac 	bl	8016ce0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c588:	bf00      	nop
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	08018da8 	.word	0x08018da8
 800c594:	08018e58 	.word	0x08018e58
 800c598:	08018dfc 	.word	0x08018dfc

0800c59c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	6039      	str	r1, [r7, #0]
 800c5a6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c5a8:	79fb      	ldrb	r3, [r7, #7]
 800c5aa:	2b0c      	cmp	r3, #12
 800c5ac:	d907      	bls.n	800c5be <memp_free+0x22>
 800c5ae:	4b0c      	ldr	r3, [pc, #48]	; (800c5e0 <memp_free+0x44>)
 800c5b0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c5b4:	490b      	ldr	r1, [pc, #44]	; (800c5e4 <memp_free+0x48>)
 800c5b6:	480c      	ldr	r0, [pc, #48]	; (800c5e8 <memp_free+0x4c>)
 800c5b8:	f00a fdca 	bl	8017150 <iprintf>
 800c5bc:	e00c      	b.n	800c5d8 <memp_free+0x3c>

  if (mem == NULL) {
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d008      	beq.n	800c5d6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c5c4:	79fb      	ldrb	r3, [r7, #7]
 800c5c6:	4a09      	ldr	r2, [pc, #36]	; (800c5ec <memp_free+0x50>)
 800c5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7ff ffb8 	bl	800c544 <do_memp_free_pool>
 800c5d4:	e000      	b.n	800c5d8 <memp_free+0x3c>
    return;
 800c5d6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	08018da8 	.word	0x08018da8
 800c5e4:	08018e78 	.word	0x08018e78
 800c5e8:	08018dfc 	.word	0x08018dfc
 800c5ec:	0801b598 	.word	0x0801b598

0800c5f0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c5f4:	bf00      	nop
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
	...

0800c600 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
 800c60c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d108      	bne.n	800c626 <netif_add+0x26>
 800c614:	4b57      	ldr	r3, [pc, #348]	; (800c774 <netif_add+0x174>)
 800c616:	f240 1227 	movw	r2, #295	; 0x127
 800c61a:	4957      	ldr	r1, [pc, #348]	; (800c778 <netif_add+0x178>)
 800c61c:	4857      	ldr	r0, [pc, #348]	; (800c77c <netif_add+0x17c>)
 800c61e:	f00a fd97 	bl	8017150 <iprintf>
 800c622:	2300      	movs	r3, #0
 800c624:	e0a2      	b.n	800c76c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d108      	bne.n	800c63e <netif_add+0x3e>
 800c62c:	4b51      	ldr	r3, [pc, #324]	; (800c774 <netif_add+0x174>)
 800c62e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c632:	4953      	ldr	r1, [pc, #332]	; (800c780 <netif_add+0x180>)
 800c634:	4851      	ldr	r0, [pc, #324]	; (800c77c <netif_add+0x17c>)
 800c636:	f00a fd8b 	bl	8017150 <iprintf>
 800c63a:	2300      	movs	r3, #0
 800c63c:	e096      	b.n	800c76c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c644:	4b4f      	ldr	r3, [pc, #316]	; (800c784 <netif_add+0x184>)
 800c646:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d101      	bne.n	800c652 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c64e:	4b4d      	ldr	r3, [pc, #308]	; (800c784 <netif_add+0x184>)
 800c650:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d101      	bne.n	800c65c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c658:	4b4a      	ldr	r3, [pc, #296]	; (800c784 <netif_add+0x184>)
 800c65a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2200      	movs	r2, #0
 800c66c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	4a45      	ldr	r2, [pc, #276]	; (800c788 <netif_add+0x188>)
 800c672:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2200      	movs	r2, #0
 800c678:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2200      	movs	r2, #0
 800c686:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6a3a      	ldr	r2, [r7, #32]
 800c68c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c68e:	4b3f      	ldr	r3, [pc, #252]	; (800c78c <netif_add+0x18c>)
 800c690:	781a      	ldrb	r2, [r3, #0]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c69c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	68b9      	ldr	r1, [r7, #8]
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f000 f913 	bl	800c8d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	4798      	blx	r3
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d001      	beq.n	800c6ba <netif_add+0xba>
    return NULL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	e058      	b.n	800c76c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6c0:	2bff      	cmp	r3, #255	; 0xff
 800c6c2:	d103      	bne.n	800c6cc <netif_add+0xcc>
        netif->num = 0;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c6d0:	4b2f      	ldr	r3, [pc, #188]	; (800c790 <netif_add+0x190>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	617b      	str	r3, [r7, #20]
 800c6d6:	e02b      	b.n	800c730 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d106      	bne.n	800c6ee <netif_add+0xee>
 800c6e0:	4b24      	ldr	r3, [pc, #144]	; (800c774 <netif_add+0x174>)
 800c6e2:	f240 128b 	movw	r2, #395	; 0x18b
 800c6e6:	492b      	ldr	r1, [pc, #172]	; (800c794 <netif_add+0x194>)
 800c6e8:	4824      	ldr	r0, [pc, #144]	; (800c77c <netif_add+0x17c>)
 800c6ea:	f00a fd31 	bl	8017150 <iprintf>
        num_netifs++;
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	2bff      	cmp	r3, #255	; 0xff
 800c6f8:	dd06      	ble.n	800c708 <netif_add+0x108>
 800c6fa:	4b1e      	ldr	r3, [pc, #120]	; (800c774 <netif_add+0x174>)
 800c6fc:	f240 128d 	movw	r2, #397	; 0x18d
 800c700:	4925      	ldr	r1, [pc, #148]	; (800c798 <netif_add+0x198>)
 800c702:	481e      	ldr	r0, [pc, #120]	; (800c77c <netif_add+0x17c>)
 800c704:	f00a fd24 	bl	8017150 <iprintf>
        if (netif2->num == netif->num) {
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c714:	429a      	cmp	r2, r3
 800c716:	d108      	bne.n	800c72a <netif_add+0x12a>
          netif->num++;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c71e:	3301      	adds	r3, #1
 800c720:	b2da      	uxtb	r2, r3
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c728:	e005      	b.n	800c736 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	617b      	str	r3, [r7, #20]
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1d0      	bne.n	800c6d8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1be      	bne.n	800c6ba <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c742:	2bfe      	cmp	r3, #254	; 0xfe
 800c744:	d103      	bne.n	800c74e <netif_add+0x14e>
    netif_num = 0;
 800c746:	4b11      	ldr	r3, [pc, #68]	; (800c78c <netif_add+0x18c>)
 800c748:	2200      	movs	r2, #0
 800c74a:	701a      	strb	r2, [r3, #0]
 800c74c:	e006      	b.n	800c75c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c754:	3301      	adds	r3, #1
 800c756:	b2da      	uxtb	r2, r3
 800c758:	4b0c      	ldr	r3, [pc, #48]	; (800c78c <netif_add+0x18c>)
 800c75a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c75c:	4b0c      	ldr	r3, [pc, #48]	; (800c790 <netif_add+0x190>)
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c764:	4a0a      	ldr	r2, [pc, #40]	; (800c790 <netif_add+0x190>)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c76a:	68fb      	ldr	r3, [r7, #12]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3718      	adds	r7, #24
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	08018e94 	.word	0x08018e94
 800c778:	08018f28 	.word	0x08018f28
 800c77c:	08018ee4 	.word	0x08018ee4
 800c780:	08018f44 	.word	0x08018f44
 800c784:	0801b60c 	.word	0x0801b60c
 800c788:	0800cae3 	.word	0x0800cae3
 800c78c:	2000d304 	.word	0x2000d304
 800c790:	2000d2fc 	.word	0x2000d2fc
 800c794:	08018f68 	.word	0x08018f68
 800c798:	08018f7c 	.word	0x08018f7c

0800c79c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f002 fd31 	bl	800f210 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c7ae:	6839      	ldr	r1, [r7, #0]
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f007 fdcd 	bl	8014350 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c7b6:	bf00      	nop
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
	...

0800c7c0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d106      	bne.n	800c7e0 <netif_do_set_ipaddr+0x20>
 800c7d2:	4b1d      	ldr	r3, [pc, #116]	; (800c848 <netif_do_set_ipaddr+0x88>)
 800c7d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c7d8:	491c      	ldr	r1, [pc, #112]	; (800c84c <netif_do_set_ipaddr+0x8c>)
 800c7da:	481d      	ldr	r0, [pc, #116]	; (800c850 <netif_do_set_ipaddr+0x90>)
 800c7dc:	f00a fcb8 	bl	8017150 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d106      	bne.n	800c7f4 <netif_do_set_ipaddr+0x34>
 800c7e6:	4b18      	ldr	r3, [pc, #96]	; (800c848 <netif_do_set_ipaddr+0x88>)
 800c7e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c7ec:	4917      	ldr	r1, [pc, #92]	; (800c84c <netif_do_set_ipaddr+0x8c>)
 800c7ee:	4818      	ldr	r0, [pc, #96]	; (800c850 <netif_do_set_ipaddr+0x90>)
 800c7f0:	f00a fcae 	bl	8017150 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d01c      	beq.n	800c83c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	3304      	adds	r3, #4
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c812:	f107 0314 	add.w	r3, r7, #20
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7ff ffbf 	bl	800c79c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d002      	beq.n	800c82a <netif_do_set_ipaddr+0x6a>
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	e000      	b.n	800c82c <netif_do_set_ipaddr+0x6c>
 800c82a:	2300      	movs	r3, #0
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c830:	2101      	movs	r1, #1
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f000 f8d2 	bl	800c9dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c838:	2301      	movs	r3, #1
 800c83a:	e000      	b.n	800c83e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3718      	adds	r7, #24
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	08018e94 	.word	0x08018e94
 800c84c:	08018fac 	.word	0x08018fac
 800c850:	08018ee4 	.word	0x08018ee4

0800c854 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	3308      	adds	r3, #8
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d00a      	beq.n	800c884 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d002      	beq.n	800c87a <netif_do_set_netmask+0x26>
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	e000      	b.n	800c87c <netif_do_set_netmask+0x28>
 800c87a:	2300      	movs	r3, #0
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c880:	2301      	movs	r3, #1
 800c882:	e000      	b.n	800c886 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c892:	b480      	push	{r7}
 800c894:	b085      	sub	sp, #20
 800c896:	af00      	add	r7, sp, #0
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	330c      	adds	r3, #12
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d00a      	beq.n	800c8c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d002      	beq.n	800c8b8 <netif_do_set_gw+0x26>
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	e000      	b.n	800c8ba <netif_do_set_gw+0x28>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e000      	b.n	800c8c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b088      	sub	sp, #32
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
 800c8dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d101      	bne.n	800c8f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c8ec:	4b1c      	ldr	r3, [pc, #112]	; (800c960 <netif_set_addr+0x90>)
 800c8ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c8f6:	4b1a      	ldr	r3, [pc, #104]	; (800c960 <netif_set_addr+0x90>)
 800c8f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d101      	bne.n	800c904 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c900:	4b17      	ldr	r3, [pc, #92]	; (800c960 <netif_set_addr+0x90>)
 800c902:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d003      	beq.n	800c912 <netif_set_addr+0x42>
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <netif_set_addr+0x46>
 800c912:	2301      	movs	r3, #1
 800c914:	e000      	b.n	800c918 <netif_set_addr+0x48>
 800c916:	2300      	movs	r3, #0
 800c918:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d006      	beq.n	800c92e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c920:	f107 0310 	add.w	r3, r7, #16
 800c924:	461a      	mov	r2, r3
 800c926:	68b9      	ldr	r1, [r7, #8]
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f7ff ff49 	bl	800c7c0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c92e:	69fa      	ldr	r2, [r7, #28]
 800c930:	6879      	ldr	r1, [r7, #4]
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	f7ff ff8e 	bl	800c854 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c938:	69ba      	ldr	r2, [r7, #24]
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f7ff ffa8 	bl	800c892 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d106      	bne.n	800c956 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c948:	f107 0310 	add.w	r3, r7, #16
 800c94c:	461a      	mov	r2, r3
 800c94e:	68b9      	ldr	r1, [r7, #8]
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f7ff ff35 	bl	800c7c0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c956:	bf00      	nop
 800c958:	3720      	adds	r7, #32
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	0801b60c 	.word	0x0801b60c

0800c964 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c96c:	4a04      	ldr	r2, [pc, #16]	; (800c980 <netif_set_default+0x1c>)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c972:	bf00      	nop
 800c974:	370c      	adds	r7, #12
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	2000d300 	.word	0x2000d300

0800c984 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d107      	bne.n	800c9a2 <netif_set_up+0x1e>
 800c992:	4b0f      	ldr	r3, [pc, #60]	; (800c9d0 <netif_set_up+0x4c>)
 800c994:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c998:	490e      	ldr	r1, [pc, #56]	; (800c9d4 <netif_set_up+0x50>)
 800c99a:	480f      	ldr	r0, [pc, #60]	; (800c9d8 <netif_set_up+0x54>)
 800c99c:	f00a fbd8 	bl	8017150 <iprintf>
 800c9a0:	e013      	b.n	800c9ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9a8:	f003 0301 	and.w	r3, r3, #1
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d10c      	bne.n	800c9ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9b6:	f043 0301 	orr.w	r3, r3, #1
 800c9ba:	b2da      	uxtb	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c9c2:	2103      	movs	r1, #3
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 f809 	bl	800c9dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	08018e94 	.word	0x08018e94
 800c9d4:	0801901c 	.word	0x0801901c
 800c9d8:	08018ee4 	.word	0x08018ee4

0800c9dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d106      	bne.n	800c9fc <netif_issue_reports+0x20>
 800c9ee:	4b18      	ldr	r3, [pc, #96]	; (800ca50 <netif_issue_reports+0x74>)
 800c9f0:	f240 326d 	movw	r2, #877	; 0x36d
 800c9f4:	4917      	ldr	r1, [pc, #92]	; (800ca54 <netif_issue_reports+0x78>)
 800c9f6:	4818      	ldr	r0, [pc, #96]	; (800ca58 <netif_issue_reports+0x7c>)
 800c9f8:	f00a fbaa 	bl	8017150 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca02:	f003 0304 	and.w	r3, r3, #4
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d01e      	beq.n	800ca48 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca10:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d017      	beq.n	800ca48 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ca18:	78fb      	ldrb	r3, [r7, #3]
 800ca1a:	f003 0301 	and.w	r3, r3, #1
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d013      	beq.n	800ca4a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	3304      	adds	r3, #4
 800ca26:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00e      	beq.n	800ca4a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca32:	f003 0308 	and.w	r3, r3, #8
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d007      	beq.n	800ca4a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	4619      	mov	r1, r3
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f008 fbef 	bl	8015224 <etharp_request>
 800ca46:	e000      	b.n	800ca4a <netif_issue_reports+0x6e>
    return;
 800ca48:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	08018e94 	.word	0x08018e94
 800ca54:	08019038 	.word	0x08019038
 800ca58:	08018ee4 	.word	0x08018ee4

0800ca5c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d107      	bne.n	800ca7a <netif_set_down+0x1e>
 800ca6a:	4b12      	ldr	r3, [pc, #72]	; (800cab4 <netif_set_down+0x58>)
 800ca6c:	f240 329b 	movw	r2, #923	; 0x39b
 800ca70:	4911      	ldr	r1, [pc, #68]	; (800cab8 <netif_set_down+0x5c>)
 800ca72:	4812      	ldr	r0, [pc, #72]	; (800cabc <netif_set_down+0x60>)
 800ca74:	f00a fb6c 	bl	8017150 <iprintf>
 800ca78:	e019      	b.n	800caae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca80:	f003 0301 	and.w	r3, r3, #1
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d012      	beq.n	800caae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca8e:	f023 0301 	bic.w	r3, r3, #1
 800ca92:	b2da      	uxtb	r2, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800caa0:	f003 0308 	and.w	r3, r3, #8
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d002      	beq.n	800caae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f007 ff79 	bl	80149a0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	08018e94 	.word	0x08018e94
 800cab8:	0801905c 	.word	0x0801905c
 800cabc:	08018ee4 	.word	0x08018ee4

0800cac0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	683a      	ldr	r2, [r7, #0]
 800cad4:	61da      	str	r2, [r3, #28]
  }
}
 800cad6:	bf00      	nop
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr

0800cae2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cae2:	b480      	push	{r7}
 800cae4:	b085      	sub	sp, #20
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	60f8      	str	r0, [r7, #12]
 800caea:	60b9      	str	r1, [r7, #8]
 800caec:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800caee:	f06f 030b 	mvn.w	r3, #11
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3714      	adds	r7, #20
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
	...

0800cb00 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	4603      	mov	r3, r0
 800cb08:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cb0a:	79fb      	ldrb	r3, [r7, #7]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d013      	beq.n	800cb38 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cb10:	4b0d      	ldr	r3, [pc, #52]	; (800cb48 <netif_get_by_index+0x48>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	60fb      	str	r3, [r7, #12]
 800cb16:	e00c      	b.n	800cb32 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb1e:	3301      	adds	r3, #1
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	79fa      	ldrb	r2, [r7, #7]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d101      	bne.n	800cb2c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	e006      	b.n	800cb3a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	60fb      	str	r3, [r7, #12]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1ef      	bne.n	800cb18 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3714      	adds	r7, #20
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop
 800cb48:	2000d2fc 	.word	0x2000d2fc

0800cb4c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cb52:	f00a f8b7 	bl	8016cc4 <sys_arch_protect>
 800cb56:	6038      	str	r0, [r7, #0]
 800cb58:	4b0d      	ldr	r3, [pc, #52]	; (800cb90 <pbuf_free_ooseq+0x44>)
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	701a      	strb	r2, [r3, #0]
 800cb5e:	6838      	ldr	r0, [r7, #0]
 800cb60:	f00a f8be 	bl	8016ce0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cb64:	4b0b      	ldr	r3, [pc, #44]	; (800cb94 <pbuf_free_ooseq+0x48>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	607b      	str	r3, [r7, #4]
 800cb6a:	e00a      	b.n	800cb82 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d003      	beq.n	800cb7c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f002 fb89 	bl	800f28c <tcp_free_ooseq>
      return;
 800cb7a:	e005      	b.n	800cb88 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	607b      	str	r3, [r7, #4]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1f1      	bne.n	800cb6c <pbuf_free_ooseq+0x20>
    }
  }
}
 800cb88:	3708      	adds	r7, #8
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	2000d305 	.word	0x2000d305
 800cb94:	2000d314 	.word	0x2000d314

0800cb98 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cba0:	f7ff ffd4 	bl	800cb4c <pbuf_free_ooseq>
}
 800cba4:	bf00      	nop
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cbb2:	f00a f887 	bl	8016cc4 <sys_arch_protect>
 800cbb6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cbb8:	4b0f      	ldr	r3, [pc, #60]	; (800cbf8 <pbuf_pool_is_empty+0x4c>)
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cbbe:	4b0e      	ldr	r3, [pc, #56]	; (800cbf8 <pbuf_pool_is_empty+0x4c>)
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f00a f88b 	bl	8016ce0 <sys_arch_unprotect>

  if (!queued) {
 800cbca:	78fb      	ldrb	r3, [r7, #3]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10f      	bne.n	800cbf0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	480a      	ldr	r0, [pc, #40]	; (800cbfc <pbuf_pool_is_empty+0x50>)
 800cbd4:	f7fe ff3a 	bl	800ba4c <tcpip_try_callback>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d008      	beq.n	800cbf0 <pbuf_pool_is_empty+0x44>
 800cbde:	f00a f871 	bl	8016cc4 <sys_arch_protect>
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	4b04      	ldr	r3, [pc, #16]	; (800cbf8 <pbuf_pool_is_empty+0x4c>)
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	701a      	strb	r2, [r3, #0]
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f00a f878 	bl	8016ce0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cbf0:	bf00      	nop
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	2000d305 	.word	0x2000d305
 800cbfc:	0800cb99 	.word	0x0800cb99

0800cc00 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	4611      	mov	r1, r2
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	460b      	mov	r3, r1
 800cc10:	80fb      	strh	r3, [r7, #6]
 800cc12:	4613      	mov	r3, r2
 800cc14:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	68ba      	ldr	r2, [r7, #8]
 800cc20:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	88fa      	ldrh	r2, [r7, #6]
 800cc26:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	88ba      	ldrh	r2, [r7, #4]
 800cc2c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cc2e:	8b3b      	ldrh	r3, [r7, #24]
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	7f3a      	ldrb	r2, [r7, #28]
 800cc3a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2200      	movs	r2, #0
 800cc46:	73da      	strb	r2, [r3, #15]
}
 800cc48:	bf00      	nop
 800cc4a:	3714      	adds	r7, #20
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b08c      	sub	sp, #48	; 0x30
 800cc58:	af02      	add	r7, sp, #8
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	71fb      	strb	r3, [r7, #7]
 800cc5e:	460b      	mov	r3, r1
 800cc60:	80bb      	strh	r3, [r7, #4]
 800cc62:	4613      	mov	r3, r2
 800cc64:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cc66:	79fb      	ldrb	r3, [r7, #7]
 800cc68:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cc6a:	887b      	ldrh	r3, [r7, #2]
 800cc6c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cc70:	d07f      	beq.n	800cd72 <pbuf_alloc+0x11e>
 800cc72:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cc76:	f300 80c8 	bgt.w	800ce0a <pbuf_alloc+0x1b6>
 800cc7a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cc7e:	d010      	beq.n	800cca2 <pbuf_alloc+0x4e>
 800cc80:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cc84:	f300 80c1 	bgt.w	800ce0a <pbuf_alloc+0x1b6>
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d002      	beq.n	800cc92 <pbuf_alloc+0x3e>
 800cc8c:	2b41      	cmp	r3, #65	; 0x41
 800cc8e:	f040 80bc 	bne.w	800ce0a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cc92:	887a      	ldrh	r2, [r7, #2]
 800cc94:	88bb      	ldrh	r3, [r7, #4]
 800cc96:	4619      	mov	r1, r3
 800cc98:	2000      	movs	r0, #0
 800cc9a:	f000 f8d1 	bl	800ce40 <pbuf_alloc_reference>
 800cc9e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cca0:	e0bd      	b.n	800ce1e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cca2:	2300      	movs	r3, #0
 800cca4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cca6:	2300      	movs	r3, #0
 800cca8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ccaa:	88bb      	ldrh	r3, [r7, #4]
 800ccac:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ccae:	200c      	movs	r0, #12
 800ccb0:	f7ff fc22 	bl	800c4f8 <memp_malloc>
 800ccb4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d109      	bne.n	800ccd0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ccbc:	f7ff ff76 	bl	800cbac <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d002      	beq.n	800cccc <pbuf_alloc+0x78>
            pbuf_free(p);
 800ccc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccc8:	f000 faa8 	bl	800d21c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cccc:	2300      	movs	r3, #0
 800ccce:	e0a7      	b.n	800ce20 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ccd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccd2:	3303      	adds	r3, #3
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	f023 0303 	bic.w	r3, r3, #3
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	8b7a      	ldrh	r2, [r7, #26]
 800cce4:	4293      	cmp	r3, r2
 800cce6:	bf28      	it	cs
 800cce8:	4613      	movcs	r3, r2
 800ccea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ccec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccee:	3310      	adds	r3, #16
 800ccf0:	693a      	ldr	r2, [r7, #16]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	3303      	adds	r3, #3
 800ccf6:	f023 0303 	bic.w	r3, r3, #3
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	89f9      	ldrh	r1, [r7, #14]
 800ccfe:	8b7a      	ldrh	r2, [r7, #26]
 800cd00:	2300      	movs	r3, #0
 800cd02:	9301      	str	r3, [sp, #4]
 800cd04:	887b      	ldrh	r3, [r7, #2]
 800cd06:	9300      	str	r3, [sp, #0]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	4601      	mov	r1, r0
 800cd0c:	6938      	ldr	r0, [r7, #16]
 800cd0e:	f7ff ff77 	bl	800cc00 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	f003 0303 	and.w	r3, r3, #3
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d006      	beq.n	800cd2c <pbuf_alloc+0xd8>
 800cd1e:	4b42      	ldr	r3, [pc, #264]	; (800ce28 <pbuf_alloc+0x1d4>)
 800cd20:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd24:	4941      	ldr	r1, [pc, #260]	; (800ce2c <pbuf_alloc+0x1d8>)
 800cd26:	4842      	ldr	r0, [pc, #264]	; (800ce30 <pbuf_alloc+0x1dc>)
 800cd28:	f00a fa12 	bl	8017150 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cd2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd2e:	3303      	adds	r3, #3
 800cd30:	f023 0303 	bic.w	r3, r3, #3
 800cd34:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cd38:	d106      	bne.n	800cd48 <pbuf_alloc+0xf4>
 800cd3a:	4b3b      	ldr	r3, [pc, #236]	; (800ce28 <pbuf_alloc+0x1d4>)
 800cd3c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cd40:	493c      	ldr	r1, [pc, #240]	; (800ce34 <pbuf_alloc+0x1e0>)
 800cd42:	483b      	ldr	r0, [pc, #236]	; (800ce30 <pbuf_alloc+0x1dc>)
 800cd44:	f00a fa04 	bl	8017150 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d102      	bne.n	800cd54 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	627b      	str	r3, [r7, #36]	; 0x24
 800cd52:	e002      	b.n	800cd5a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	693a      	ldr	r2, [r7, #16]
 800cd58:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cd5e:	8b7a      	ldrh	r2, [r7, #26]
 800cd60:	89fb      	ldrh	r3, [r7, #14]
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cd6a:	8b7b      	ldrh	r3, [r7, #26]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d19e      	bne.n	800ccae <pbuf_alloc+0x5a>
      break;
 800cd70:	e055      	b.n	800ce1e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cd72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd74:	3303      	adds	r3, #3
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	f023 0303 	bic.w	r3, r3, #3
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	88bb      	ldrh	r3, [r7, #4]
 800cd80:	3303      	adds	r3, #3
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	f023 0303 	bic.w	r3, r3, #3
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	4413      	add	r3, r2
 800cd8c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cd8e:	8b3b      	ldrh	r3, [r7, #24]
 800cd90:	3310      	adds	r3, #16
 800cd92:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cd94:	8b3a      	ldrh	r2, [r7, #24]
 800cd96:	88bb      	ldrh	r3, [r7, #4]
 800cd98:	3303      	adds	r3, #3
 800cd9a:	f023 0303 	bic.w	r3, r3, #3
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d306      	bcc.n	800cdb0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cda2:	8afa      	ldrh	r2, [r7, #22]
 800cda4:	88bb      	ldrh	r3, [r7, #4]
 800cda6:	3303      	adds	r3, #3
 800cda8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d201      	bcs.n	800cdb4 <pbuf_alloc+0x160>
        return NULL;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	e035      	b.n	800ce20 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cdb4:	8afb      	ldrh	r3, [r7, #22]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff fa1c 	bl	800c1f4 <mem_malloc>
 800cdbc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d101      	bne.n	800cdc8 <pbuf_alloc+0x174>
        return NULL;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	e02b      	b.n	800ce20 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cdc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdca:	3310      	adds	r3, #16
 800cdcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdce:	4413      	add	r3, r2
 800cdd0:	3303      	adds	r3, #3
 800cdd2:	f023 0303 	bic.w	r3, r3, #3
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	88b9      	ldrh	r1, [r7, #4]
 800cdda:	88ba      	ldrh	r2, [r7, #4]
 800cddc:	2300      	movs	r3, #0
 800cdde:	9301      	str	r3, [sp, #4]
 800cde0:	887b      	ldrh	r3, [r7, #2]
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	460b      	mov	r3, r1
 800cde6:	4601      	mov	r1, r0
 800cde8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdea:	f7ff ff09 	bl	800cc00 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	f003 0303 	and.w	r3, r3, #3
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d010      	beq.n	800ce1c <pbuf_alloc+0x1c8>
 800cdfa:	4b0b      	ldr	r3, [pc, #44]	; (800ce28 <pbuf_alloc+0x1d4>)
 800cdfc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ce00:	490d      	ldr	r1, [pc, #52]	; (800ce38 <pbuf_alloc+0x1e4>)
 800ce02:	480b      	ldr	r0, [pc, #44]	; (800ce30 <pbuf_alloc+0x1dc>)
 800ce04:	f00a f9a4 	bl	8017150 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ce08:	e008      	b.n	800ce1c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ce0a:	4b07      	ldr	r3, [pc, #28]	; (800ce28 <pbuf_alloc+0x1d4>)
 800ce0c:	f240 1227 	movw	r2, #295	; 0x127
 800ce10:	490a      	ldr	r1, [pc, #40]	; (800ce3c <pbuf_alloc+0x1e8>)
 800ce12:	4807      	ldr	r0, [pc, #28]	; (800ce30 <pbuf_alloc+0x1dc>)
 800ce14:	f00a f99c 	bl	8017150 <iprintf>
      return NULL;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	e001      	b.n	800ce20 <pbuf_alloc+0x1cc>
      break;
 800ce1c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3728      	adds	r7, #40	; 0x28
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	080190c4 	.word	0x080190c4
 800ce2c:	080190f4 	.word	0x080190f4
 800ce30:	08019124 	.word	0x08019124
 800ce34:	0801914c 	.word	0x0801914c
 800ce38:	08019180 	.word	0x08019180
 800ce3c:	080191ac 	.word	0x080191ac

0800ce40 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af02      	add	r7, sp, #8
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	807b      	strh	r3, [r7, #2]
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ce50:	883b      	ldrh	r3, [r7, #0]
 800ce52:	2b41      	cmp	r3, #65	; 0x41
 800ce54:	d009      	beq.n	800ce6a <pbuf_alloc_reference+0x2a>
 800ce56:	883b      	ldrh	r3, [r7, #0]
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d006      	beq.n	800ce6a <pbuf_alloc_reference+0x2a>
 800ce5c:	4b0f      	ldr	r3, [pc, #60]	; (800ce9c <pbuf_alloc_reference+0x5c>)
 800ce5e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ce62:	490f      	ldr	r1, [pc, #60]	; (800cea0 <pbuf_alloc_reference+0x60>)
 800ce64:	480f      	ldr	r0, [pc, #60]	; (800cea4 <pbuf_alloc_reference+0x64>)
 800ce66:	f00a f973 	bl	8017150 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ce6a:	200b      	movs	r0, #11
 800ce6c:	f7ff fb44 	bl	800c4f8 <memp_malloc>
 800ce70:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d101      	bne.n	800ce7c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	e00b      	b.n	800ce94 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ce7c:	8879      	ldrh	r1, [r7, #2]
 800ce7e:	887a      	ldrh	r2, [r7, #2]
 800ce80:	2300      	movs	r3, #0
 800ce82:	9301      	str	r3, [sp, #4]
 800ce84:	883b      	ldrh	r3, [r7, #0]
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	460b      	mov	r3, r1
 800ce8a:	6879      	ldr	r1, [r7, #4]
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f7ff feb7 	bl	800cc00 <pbuf_init_alloced_pbuf>
  return p;
 800ce92:	68fb      	ldr	r3, [r7, #12]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3710      	adds	r7, #16
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	080190c4 	.word	0x080190c4
 800cea0:	080191c8 	.word	0x080191c8
 800cea4:	08019124 	.word	0x08019124

0800cea8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b088      	sub	sp, #32
 800ceac:	af02      	add	r7, sp, #8
 800ceae:	607b      	str	r3, [r7, #4]
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	73fb      	strb	r3, [r7, #15]
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	81bb      	strh	r3, [r7, #12]
 800ceb8:	4613      	mov	r3, r2
 800ceba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cebc:	7bfb      	ldrb	r3, [r7, #15]
 800cebe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cec0:	8a7b      	ldrh	r3, [r7, #18]
 800cec2:	3303      	adds	r3, #3
 800cec4:	f023 0203 	bic.w	r2, r3, #3
 800cec8:	89bb      	ldrh	r3, [r7, #12]
 800ceca:	441a      	add	r2, r3
 800cecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cece:	429a      	cmp	r2, r3
 800ced0:	d901      	bls.n	800ced6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ced2:	2300      	movs	r3, #0
 800ced4:	e018      	b.n	800cf08 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ced6:	6a3b      	ldr	r3, [r7, #32]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d007      	beq.n	800ceec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cedc:	8a7b      	ldrh	r3, [r7, #18]
 800cede:	3303      	adds	r3, #3
 800cee0:	f023 0303 	bic.w	r3, r3, #3
 800cee4:	6a3a      	ldr	r2, [r7, #32]
 800cee6:	4413      	add	r3, r2
 800cee8:	617b      	str	r3, [r7, #20]
 800ceea:	e001      	b.n	800cef0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ceec:	2300      	movs	r3, #0
 800ceee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	89b9      	ldrh	r1, [r7, #12]
 800cef4:	89ba      	ldrh	r2, [r7, #12]
 800cef6:	2302      	movs	r3, #2
 800cef8:	9301      	str	r3, [sp, #4]
 800cefa:	897b      	ldrh	r3, [r7, #10]
 800cefc:	9300      	str	r3, [sp, #0]
 800cefe:	460b      	mov	r3, r1
 800cf00:	6979      	ldr	r1, [r7, #20]
 800cf02:	f7ff fe7d 	bl	800cc00 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cf06:	687b      	ldr	r3, [r7, #4]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3718      	adds	r7, #24
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	460b      	mov	r3, r1
 800cf1a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <pbuf_realloc+0x20>
 800cf22:	4b3a      	ldr	r3, [pc, #232]	; (800d00c <pbuf_realloc+0xfc>)
 800cf24:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cf28:	4939      	ldr	r1, [pc, #228]	; (800d010 <pbuf_realloc+0x100>)
 800cf2a:	483a      	ldr	r0, [pc, #232]	; (800d014 <pbuf_realloc+0x104>)
 800cf2c:	f00a f910 	bl	8017150 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	891b      	ldrh	r3, [r3, #8]
 800cf34:	887a      	ldrh	r2, [r7, #2]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d263      	bcs.n	800d002 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	891a      	ldrh	r2, [r3, #8]
 800cf3e:	887b      	ldrh	r3, [r7, #2]
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cf44:	887b      	ldrh	r3, [r7, #2]
 800cf46:	817b      	strh	r3, [r7, #10]
  q = p;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cf4c:	e018      	b.n	800cf80 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	895b      	ldrh	r3, [r3, #10]
 800cf52:	897a      	ldrh	r2, [r7, #10]
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	891a      	ldrh	r2, [r3, #8]
 800cf5c:	893b      	ldrh	r3, [r7, #8]
 800cf5e:	1ad3      	subs	r3, r2, r3
 800cf60:	b29a      	uxth	r2, r3
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d106      	bne.n	800cf80 <pbuf_realloc+0x70>
 800cf72:	4b26      	ldr	r3, [pc, #152]	; (800d00c <pbuf_realloc+0xfc>)
 800cf74:	f240 12af 	movw	r2, #431	; 0x1af
 800cf78:	4927      	ldr	r1, [pc, #156]	; (800d018 <pbuf_realloc+0x108>)
 800cf7a:	4826      	ldr	r0, [pc, #152]	; (800d014 <pbuf_realloc+0x104>)
 800cf7c:	f00a f8e8 	bl	8017150 <iprintf>
  while (rem_len > q->len) {
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	895b      	ldrh	r3, [r3, #10]
 800cf84:	897a      	ldrh	r2, [r7, #10]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d8e1      	bhi.n	800cf4e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	7b1b      	ldrb	r3, [r3, #12]
 800cf8e:	f003 030f 	and.w	r3, r3, #15
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d121      	bne.n	800cfda <pbuf_realloc+0xca>
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	895b      	ldrh	r3, [r3, #10]
 800cf9a:	897a      	ldrh	r2, [r7, #10]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d01c      	beq.n	800cfda <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	7b5b      	ldrb	r3, [r3, #13]
 800cfa4:	f003 0302 	and.w	r3, r3, #2
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d116      	bne.n	800cfda <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	685a      	ldr	r2, [r3, #4]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	897b      	ldrh	r3, [r7, #10]
 800cfb8:	4413      	add	r3, r2
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f7ff f80e 	bl	800bfe0 <mem_trim>
 800cfc4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d106      	bne.n	800cfda <pbuf_realloc+0xca>
 800cfcc:	4b0f      	ldr	r3, [pc, #60]	; (800d00c <pbuf_realloc+0xfc>)
 800cfce:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cfd2:	4912      	ldr	r1, [pc, #72]	; (800d01c <pbuf_realloc+0x10c>)
 800cfd4:	480f      	ldr	r0, [pc, #60]	; (800d014 <pbuf_realloc+0x104>)
 800cfd6:	f00a f8bb 	bl	8017150 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	897a      	ldrh	r2, [r7, #10]
 800cfde:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	895a      	ldrh	r2, [r3, #10]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d004      	beq.n	800cffa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4618      	mov	r0, r3
 800cff6:	f000 f911 	bl	800d21c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2200      	movs	r2, #0
 800cffe:	601a      	str	r2, [r3, #0]
 800d000:	e000      	b.n	800d004 <pbuf_realloc+0xf4>
    return;
 800d002:	bf00      	nop

}
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	080190c4 	.word	0x080190c4
 800d010:	080191dc 	.word	0x080191dc
 800d014:	08019124 	.word	0x08019124
 800d018:	080191f4 	.word	0x080191f4
 800d01c:	0801920c 	.word	0x0801920c

0800d020 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	4613      	mov	r3, r2
 800d02c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d106      	bne.n	800d042 <pbuf_add_header_impl+0x22>
 800d034:	4b2b      	ldr	r3, [pc, #172]	; (800d0e4 <pbuf_add_header_impl+0xc4>)
 800d036:	f240 12df 	movw	r2, #479	; 0x1df
 800d03a:	492b      	ldr	r1, [pc, #172]	; (800d0e8 <pbuf_add_header_impl+0xc8>)
 800d03c:	482b      	ldr	r0, [pc, #172]	; (800d0ec <pbuf_add_header_impl+0xcc>)
 800d03e:	f00a f887 	bl	8017150 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d003      	beq.n	800d050 <pbuf_add_header_impl+0x30>
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d04e:	d301      	bcc.n	800d054 <pbuf_add_header_impl+0x34>
    return 1;
 800d050:	2301      	movs	r3, #1
 800d052:	e043      	b.n	800d0dc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d101      	bne.n	800d05e <pbuf_add_header_impl+0x3e>
    return 0;
 800d05a:	2300      	movs	r3, #0
 800d05c:	e03e      	b.n	800d0dc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	891a      	ldrh	r2, [r3, #8]
 800d066:	8a7b      	ldrh	r3, [r7, #18]
 800d068:	4413      	add	r3, r2
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	8a7a      	ldrh	r2, [r7, #18]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d901      	bls.n	800d076 <pbuf_add_header_impl+0x56>
    return 1;
 800d072:	2301      	movs	r3, #1
 800d074:	e032      	b.n	800d0dc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	7b1b      	ldrb	r3, [r3, #12]
 800d07a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d07c:	8a3b      	ldrh	r3, [r7, #16]
 800d07e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00c      	beq.n	800d0a0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	685a      	ldr	r2, [r3, #4]
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	425b      	negs	r3, r3
 800d08e:	4413      	add	r3, r2
 800d090:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	3310      	adds	r3, #16
 800d096:	697a      	ldr	r2, [r7, #20]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d20d      	bcs.n	800d0b8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d09c:	2301      	movs	r3, #1
 800d09e:	e01d      	b.n	800d0dc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d0a0:	79fb      	ldrb	r3, [r7, #7]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d006      	beq.n	800d0b4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	685a      	ldr	r2, [r3, #4]
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	425b      	negs	r3, r3
 800d0ae:	4413      	add	r3, r2
 800d0b0:	617b      	str	r3, [r7, #20]
 800d0b2:	e001      	b.n	800d0b8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e011      	b.n	800d0dc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	697a      	ldr	r2, [r7, #20]
 800d0bc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	895a      	ldrh	r2, [r3, #10]
 800d0c2:	8a7b      	ldrh	r3, [r7, #18]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	b29a      	uxth	r2, r3
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	891a      	ldrh	r2, [r3, #8]
 800d0d0:	8a7b      	ldrh	r3, [r7, #18]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	811a      	strh	r2, [r3, #8]


  return 0;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3718      	adds	r7, #24
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	080190c4 	.word	0x080190c4
 800d0e8:	08019228 	.word	0x08019228
 800d0ec:	08019124 	.word	0x08019124

0800d0f0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	6839      	ldr	r1, [r7, #0]
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f7ff ff8e 	bl	800d020 <pbuf_add_header_impl>
 800d104:	4603      	mov	r3, r0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
	...

0800d110 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d106      	bne.n	800d12e <pbuf_remove_header+0x1e>
 800d120:	4b20      	ldr	r3, [pc, #128]	; (800d1a4 <pbuf_remove_header+0x94>)
 800d122:	f240 224b 	movw	r2, #587	; 0x24b
 800d126:	4920      	ldr	r1, [pc, #128]	; (800d1a8 <pbuf_remove_header+0x98>)
 800d128:	4820      	ldr	r0, [pc, #128]	; (800d1ac <pbuf_remove_header+0x9c>)
 800d12a:	f00a f811 	bl	8017150 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d003      	beq.n	800d13c <pbuf_remove_header+0x2c>
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d13a:	d301      	bcc.n	800d140 <pbuf_remove_header+0x30>
    return 1;
 800d13c:	2301      	movs	r3, #1
 800d13e:	e02c      	b.n	800d19a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d101      	bne.n	800d14a <pbuf_remove_header+0x3a>
    return 0;
 800d146:	2300      	movs	r3, #0
 800d148:	e027      	b.n	800d19a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	895b      	ldrh	r3, [r3, #10]
 800d152:	89fa      	ldrh	r2, [r7, #14]
 800d154:	429a      	cmp	r2, r3
 800d156:	d908      	bls.n	800d16a <pbuf_remove_header+0x5a>
 800d158:	4b12      	ldr	r3, [pc, #72]	; (800d1a4 <pbuf_remove_header+0x94>)
 800d15a:	f240 2255 	movw	r2, #597	; 0x255
 800d15e:	4914      	ldr	r1, [pc, #80]	; (800d1b0 <pbuf_remove_header+0xa0>)
 800d160:	4812      	ldr	r0, [pc, #72]	; (800d1ac <pbuf_remove_header+0x9c>)
 800d162:	f009 fff5 	bl	8017150 <iprintf>
 800d166:	2301      	movs	r3, #1
 800d168:	e017      	b.n	800d19a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	685a      	ldr	r2, [r3, #4]
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	441a      	add	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	895a      	ldrh	r2, [r3, #10]
 800d180:	89fb      	ldrh	r3, [r7, #14]
 800d182:	1ad3      	subs	r3, r2, r3
 800d184:	b29a      	uxth	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	891a      	ldrh	r2, [r3, #8]
 800d18e:	89fb      	ldrh	r3, [r7, #14]
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	b29a      	uxth	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d198:	2300      	movs	r3, #0
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	080190c4 	.word	0x080190c4
 800d1a8:	08019228 	.word	0x08019228
 800d1ac:	08019124 	.word	0x08019124
 800d1b0:	08019234 	.word	0x08019234

0800d1b4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	460b      	mov	r3, r1
 800d1be:	807b      	strh	r3, [r7, #2]
 800d1c0:	4613      	mov	r3, r2
 800d1c2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d1c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	da08      	bge.n	800d1de <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d1cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1d0:	425b      	negs	r3, r3
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7ff ff9b 	bl	800d110 <pbuf_remove_header>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	e007      	b.n	800d1ee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d1de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1e2:	787a      	ldrb	r2, [r7, #1]
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7ff ff1a 	bl	800d020 <pbuf_add_header_impl>
 800d1ec:	4603      	mov	r3, r0
  }
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b082      	sub	sp, #8
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
 800d1fe:	460b      	mov	r3, r1
 800d200:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d202:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d206:	2201      	movs	r2, #1
 800d208:	4619      	mov	r1, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7ff ffd2 	bl	800d1b4 <pbuf_header_impl>
 800d210:	4603      	mov	r3, r0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
	...

0800d21c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b088      	sub	sp, #32
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d10b      	bne.n	800d242 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d106      	bne.n	800d23e <pbuf_free+0x22>
 800d230:	4b3b      	ldr	r3, [pc, #236]	; (800d320 <pbuf_free+0x104>)
 800d232:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d236:	493b      	ldr	r1, [pc, #236]	; (800d324 <pbuf_free+0x108>)
 800d238:	483b      	ldr	r0, [pc, #236]	; (800d328 <pbuf_free+0x10c>)
 800d23a:	f009 ff89 	bl	8017150 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	e069      	b.n	800d316 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d242:	2300      	movs	r3, #0
 800d244:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d246:	e062      	b.n	800d30e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d248:	f009 fd3c 	bl	8016cc4 <sys_arch_protect>
 800d24c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	7b9b      	ldrb	r3, [r3, #14]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d106      	bne.n	800d264 <pbuf_free+0x48>
 800d256:	4b32      	ldr	r3, [pc, #200]	; (800d320 <pbuf_free+0x104>)
 800d258:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d25c:	4933      	ldr	r1, [pc, #204]	; (800d32c <pbuf_free+0x110>)
 800d25e:	4832      	ldr	r0, [pc, #200]	; (800d328 <pbuf_free+0x10c>)
 800d260:	f009 ff76 	bl	8017150 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	7b9b      	ldrb	r3, [r3, #14]
 800d268:	3b01      	subs	r3, #1
 800d26a:	b2da      	uxtb	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	739a      	strb	r2, [r3, #14]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	7b9b      	ldrb	r3, [r3, #14]
 800d274:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d276:	69b8      	ldr	r0, [r7, #24]
 800d278:	f009 fd32 	bl	8016ce0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d27c:	7dfb      	ldrb	r3, [r7, #23]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d143      	bne.n	800d30a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	7b1b      	ldrb	r3, [r3, #12]
 800d28c:	f003 030f 	and.w	r3, r3, #15
 800d290:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	7b5b      	ldrb	r3, [r3, #13]
 800d296:	f003 0302 	and.w	r3, r3, #2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d011      	beq.n	800d2c2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	691b      	ldr	r3, [r3, #16]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d106      	bne.n	800d2b8 <pbuf_free+0x9c>
 800d2aa:	4b1d      	ldr	r3, [pc, #116]	; (800d320 <pbuf_free+0x104>)
 800d2ac:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d2b0:	491f      	ldr	r1, [pc, #124]	; (800d330 <pbuf_free+0x114>)
 800d2b2:	481d      	ldr	r0, [pc, #116]	; (800d328 <pbuf_free+0x10c>)
 800d2b4:	f009 ff4c 	bl	8017150 <iprintf>
        pc->custom_free_function(p);
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	691b      	ldr	r3, [r3, #16]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	4798      	blx	r3
 800d2c0:	e01d      	b.n	800d2fe <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d2c2:	7bfb      	ldrb	r3, [r7, #15]
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	d104      	bne.n	800d2d2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d2c8:	6879      	ldr	r1, [r7, #4]
 800d2ca:	200c      	movs	r0, #12
 800d2cc:	f7ff f966 	bl	800c59c <memp_free>
 800d2d0:	e015      	b.n	800d2fe <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d2d2:	7bfb      	ldrb	r3, [r7, #15]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d104      	bne.n	800d2e2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d2d8:	6879      	ldr	r1, [r7, #4]
 800d2da:	200b      	movs	r0, #11
 800d2dc:	f7ff f95e 	bl	800c59c <memp_free>
 800d2e0:	e00d      	b.n	800d2fe <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d2e2:	7bfb      	ldrb	r3, [r7, #15]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d103      	bne.n	800d2f0 <pbuf_free+0xd4>
          mem_free(p);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f7fe fde9 	bl	800bec0 <mem_free>
 800d2ee:	e006      	b.n	800d2fe <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d2f0:	4b0b      	ldr	r3, [pc, #44]	; (800d320 <pbuf_free+0x104>)
 800d2f2:	f240 320f 	movw	r2, #783	; 0x30f
 800d2f6:	490f      	ldr	r1, [pc, #60]	; (800d334 <pbuf_free+0x118>)
 800d2f8:	480b      	ldr	r0, [pc, #44]	; (800d328 <pbuf_free+0x10c>)
 800d2fa:	f009 ff29 	bl	8017150 <iprintf>
        }
      }
      count++;
 800d2fe:	7ffb      	ldrb	r3, [r7, #31]
 800d300:	3301      	adds	r3, #1
 800d302:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	607b      	str	r3, [r7, #4]
 800d308:	e001      	b.n	800d30e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d30a:	2300      	movs	r3, #0
 800d30c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d199      	bne.n	800d248 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d314:	7ffb      	ldrb	r3, [r7, #31]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3720      	adds	r7, #32
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	080190c4 	.word	0x080190c4
 800d324:	08019228 	.word	0x08019228
 800d328:	08019124 	.word	0x08019124
 800d32c:	08019254 	.word	0x08019254
 800d330:	0801926c 	.word	0x0801926c
 800d334:	08019290 	.word	0x08019290

0800d338 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d338:	b480      	push	{r7}
 800d33a:	b085      	sub	sp, #20
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d340:	2300      	movs	r3, #0
 800d342:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d344:	e005      	b.n	800d352 <pbuf_clen+0x1a>
    ++len;
 800d346:	89fb      	ldrh	r3, [r7, #14]
 800d348:	3301      	adds	r3, #1
 800d34a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1f6      	bne.n	800d346 <pbuf_clen+0xe>
  }
  return len;
 800d358:	89fb      	ldrh	r3, [r7, #14]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3714      	adds	r7, #20
 800d35e:	46bd      	mov	sp, r7
 800d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d364:	4770      	bx	lr
	...

0800d368 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d016      	beq.n	800d3a4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d376:	f009 fca5 	bl	8016cc4 <sys_arch_protect>
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	7b9b      	ldrb	r3, [r3, #14]
 800d380:	3301      	adds	r3, #1
 800d382:	b2da      	uxtb	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	739a      	strb	r2, [r3, #14]
 800d388:	68f8      	ldr	r0, [r7, #12]
 800d38a:	f009 fca9 	bl	8016ce0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	7b9b      	ldrb	r3, [r3, #14]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d106      	bne.n	800d3a4 <pbuf_ref+0x3c>
 800d396:	4b05      	ldr	r3, [pc, #20]	; (800d3ac <pbuf_ref+0x44>)
 800d398:	f240 3242 	movw	r2, #834	; 0x342
 800d39c:	4904      	ldr	r1, [pc, #16]	; (800d3b0 <pbuf_ref+0x48>)
 800d39e:	4805      	ldr	r0, [pc, #20]	; (800d3b4 <pbuf_ref+0x4c>)
 800d3a0:	f009 fed6 	bl	8017150 <iprintf>
  }
}
 800d3a4:	bf00      	nop
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	080190c4 	.word	0x080190c4
 800d3b0:	080192a4 	.word	0x080192a4
 800d3b4:	08019124 	.word	0x08019124

0800d3b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d002      	beq.n	800d3ce <pbuf_cat+0x16>
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d107      	bne.n	800d3de <pbuf_cat+0x26>
 800d3ce:	4b20      	ldr	r3, [pc, #128]	; (800d450 <pbuf_cat+0x98>)
 800d3d0:	f240 3259 	movw	r2, #857	; 0x359
 800d3d4:	491f      	ldr	r1, [pc, #124]	; (800d454 <pbuf_cat+0x9c>)
 800d3d6:	4820      	ldr	r0, [pc, #128]	; (800d458 <pbuf_cat+0xa0>)
 800d3d8:	f009 feba 	bl	8017150 <iprintf>
 800d3dc:	e034      	b.n	800d448 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	60fb      	str	r3, [r7, #12]
 800d3e2:	e00a      	b.n	800d3fa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	891a      	ldrh	r2, [r3, #8]
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	891b      	ldrh	r3, [r3, #8]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	60fb      	str	r3, [r7, #12]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1f0      	bne.n	800d3e4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	891a      	ldrh	r2, [r3, #8]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	895b      	ldrh	r3, [r3, #10]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d006      	beq.n	800d41c <pbuf_cat+0x64>
 800d40e:	4b10      	ldr	r3, [pc, #64]	; (800d450 <pbuf_cat+0x98>)
 800d410:	f240 3262 	movw	r2, #866	; 0x362
 800d414:	4911      	ldr	r1, [pc, #68]	; (800d45c <pbuf_cat+0xa4>)
 800d416:	4810      	ldr	r0, [pc, #64]	; (800d458 <pbuf_cat+0xa0>)
 800d418:	f009 fe9a 	bl	8017150 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d006      	beq.n	800d432 <pbuf_cat+0x7a>
 800d424:	4b0a      	ldr	r3, [pc, #40]	; (800d450 <pbuf_cat+0x98>)
 800d426:	f240 3263 	movw	r2, #867	; 0x363
 800d42a:	490d      	ldr	r1, [pc, #52]	; (800d460 <pbuf_cat+0xa8>)
 800d42c:	480a      	ldr	r0, [pc, #40]	; (800d458 <pbuf_cat+0xa0>)
 800d42e:	f009 fe8f 	bl	8017150 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	891a      	ldrh	r2, [r3, #8]
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	891b      	ldrh	r3, [r3, #8]
 800d43a:	4413      	add	r3, r2
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	683a      	ldr	r2, [r7, #0]
 800d446:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	080190c4 	.word	0x080190c4
 800d454:	080192b8 	.word	0x080192b8
 800d458:	08019124 	.word	0x08019124
 800d45c:	080192f0 	.word	0x080192f0
 800d460:	08019320 	.word	0x08019320

0800d464 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d46e:	6839      	ldr	r1, [r7, #0]
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f7ff ffa1 	bl	800d3b8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d476:	6838      	ldr	r0, [r7, #0]
 800d478:	f7ff ff76 	bl	800d368 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d47c:	bf00      	nop
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b086      	sub	sp, #24
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d48e:	2300      	movs	r3, #0
 800d490:	617b      	str	r3, [r7, #20]
 800d492:	2300      	movs	r3, #0
 800d494:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d008      	beq.n	800d4ae <pbuf_copy+0x2a>
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d005      	beq.n	800d4ae <pbuf_copy+0x2a>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	891a      	ldrh	r2, [r3, #8]
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	891b      	ldrh	r3, [r3, #8]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d209      	bcs.n	800d4c2 <pbuf_copy+0x3e>
 800d4ae:	4b57      	ldr	r3, [pc, #348]	; (800d60c <pbuf_copy+0x188>)
 800d4b0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d4b4:	4956      	ldr	r1, [pc, #344]	; (800d610 <pbuf_copy+0x18c>)
 800d4b6:	4857      	ldr	r0, [pc, #348]	; (800d614 <pbuf_copy+0x190>)
 800d4b8:	f009 fe4a 	bl	8017150 <iprintf>
 800d4bc:	f06f 030f 	mvn.w	r3, #15
 800d4c0:	e09f      	b.n	800d602 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	895b      	ldrh	r3, [r3, #10]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	1ad2      	subs	r2, r2, r3
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	895b      	ldrh	r3, [r3, #10]
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	1acb      	subs	r3, r1, r3
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d306      	bcc.n	800d4e8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	895b      	ldrh	r3, [r3, #10]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	1ad3      	subs	r3, r2, r3
 800d4e4:	60fb      	str	r3, [r7, #12]
 800d4e6:	e005      	b.n	800d4f4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	895b      	ldrh	r3, [r3, #10]
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	685a      	ldr	r2, [r3, #4]
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	18d0      	adds	r0, r2, r3
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	685a      	ldr	r2, [r3, #4]
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	4413      	add	r3, r2
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	4619      	mov	r1, r3
 800d508:	f009 fd2c 	bl	8016f64 <memcpy>
    offset_to += len;
 800d50c:	697a      	ldr	r2, [r7, #20]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	4413      	add	r3, r2
 800d512:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d514:	693a      	ldr	r2, [r7, #16]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	4413      	add	r3, r2
 800d51a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	895b      	ldrh	r3, [r3, #10]
 800d520:	461a      	mov	r2, r3
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	4293      	cmp	r3, r2
 800d526:	d906      	bls.n	800d536 <pbuf_copy+0xb2>
 800d528:	4b38      	ldr	r3, [pc, #224]	; (800d60c <pbuf_copy+0x188>)
 800d52a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d52e:	493a      	ldr	r1, [pc, #232]	; (800d618 <pbuf_copy+0x194>)
 800d530:	4838      	ldr	r0, [pc, #224]	; (800d614 <pbuf_copy+0x190>)
 800d532:	f009 fe0d 	bl	8017150 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	895b      	ldrh	r3, [r3, #10]
 800d53a:	461a      	mov	r2, r3
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	4293      	cmp	r3, r2
 800d540:	d906      	bls.n	800d550 <pbuf_copy+0xcc>
 800d542:	4b32      	ldr	r3, [pc, #200]	; (800d60c <pbuf_copy+0x188>)
 800d544:	f240 32da 	movw	r2, #986	; 0x3da
 800d548:	4934      	ldr	r1, [pc, #208]	; (800d61c <pbuf_copy+0x198>)
 800d54a:	4832      	ldr	r0, [pc, #200]	; (800d614 <pbuf_copy+0x190>)
 800d54c:	f009 fe00 	bl	8017150 <iprintf>
    if (offset_from >= p_from->len) {
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	895b      	ldrh	r3, [r3, #10]
 800d554:	461a      	mov	r2, r3
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	4293      	cmp	r3, r2
 800d55a:	d304      	bcc.n	800d566 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d55c:	2300      	movs	r3, #0
 800d55e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	895b      	ldrh	r3, [r3, #10]
 800d56a:	461a      	mov	r2, r3
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	4293      	cmp	r3, r2
 800d570:	d114      	bne.n	800d59c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d572:	2300      	movs	r3, #0
 800d574:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10c      	bne.n	800d59c <pbuf_copy+0x118>
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d009      	beq.n	800d59c <pbuf_copy+0x118>
 800d588:	4b20      	ldr	r3, [pc, #128]	; (800d60c <pbuf_copy+0x188>)
 800d58a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d58e:	4924      	ldr	r1, [pc, #144]	; (800d620 <pbuf_copy+0x19c>)
 800d590:	4820      	ldr	r0, [pc, #128]	; (800d614 <pbuf_copy+0x190>)
 800d592:	f009 fddd 	bl	8017150 <iprintf>
 800d596:	f06f 030f 	mvn.w	r3, #15
 800d59a:	e032      	b.n	800d602 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d013      	beq.n	800d5ca <pbuf_copy+0x146>
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	895a      	ldrh	r2, [r3, #10]
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	891b      	ldrh	r3, [r3, #8]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d10d      	bne.n	800d5ca <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d009      	beq.n	800d5ca <pbuf_copy+0x146>
 800d5b6:	4b15      	ldr	r3, [pc, #84]	; (800d60c <pbuf_copy+0x188>)
 800d5b8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d5bc:	4919      	ldr	r1, [pc, #100]	; (800d624 <pbuf_copy+0x1a0>)
 800d5be:	4815      	ldr	r0, [pc, #84]	; (800d614 <pbuf_copy+0x190>)
 800d5c0:	f009 fdc6 	bl	8017150 <iprintf>
 800d5c4:	f06f 0305 	mvn.w	r3, #5
 800d5c8:	e01b      	b.n	800d602 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d013      	beq.n	800d5f8 <pbuf_copy+0x174>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	895a      	ldrh	r2, [r3, #10]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	891b      	ldrh	r3, [r3, #8]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d10d      	bne.n	800d5f8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d009      	beq.n	800d5f8 <pbuf_copy+0x174>
 800d5e4:	4b09      	ldr	r3, [pc, #36]	; (800d60c <pbuf_copy+0x188>)
 800d5e6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d5ea:	490e      	ldr	r1, [pc, #56]	; (800d624 <pbuf_copy+0x1a0>)
 800d5ec:	4809      	ldr	r0, [pc, #36]	; (800d614 <pbuf_copy+0x190>)
 800d5ee:	f009 fdaf 	bl	8017150 <iprintf>
 800d5f2:	f06f 0305 	mvn.w	r3, #5
 800d5f6:	e004      	b.n	800d602 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	f47f af61 	bne.w	800d4c2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3718      	adds	r7, #24
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	080190c4 	.word	0x080190c4
 800d610:	0801936c 	.word	0x0801936c
 800d614:	08019124 	.word	0x08019124
 800d618:	0801939c 	.word	0x0801939c
 800d61c:	080193b4 	.word	0x080193b4
 800d620:	080193d0 	.word	0x080193d0
 800d624:	080193e0 	.word	0x080193e0

0800d628 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b088      	sub	sp, #32
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	4611      	mov	r1, r2
 800d634:	461a      	mov	r2, r3
 800d636:	460b      	mov	r3, r1
 800d638:	80fb      	strh	r3, [r7, #6]
 800d63a:	4613      	mov	r3, r2
 800d63c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d63e:	2300      	movs	r3, #0
 800d640:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d642:	2300      	movs	r3, #0
 800d644:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d108      	bne.n	800d65e <pbuf_copy_partial+0x36>
 800d64c:	4b2b      	ldr	r3, [pc, #172]	; (800d6fc <pbuf_copy_partial+0xd4>)
 800d64e:	f240 420a 	movw	r2, #1034	; 0x40a
 800d652:	492b      	ldr	r1, [pc, #172]	; (800d700 <pbuf_copy_partial+0xd8>)
 800d654:	482b      	ldr	r0, [pc, #172]	; (800d704 <pbuf_copy_partial+0xdc>)
 800d656:	f009 fd7b 	bl	8017150 <iprintf>
 800d65a:	2300      	movs	r3, #0
 800d65c:	e04a      	b.n	800d6f4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d108      	bne.n	800d676 <pbuf_copy_partial+0x4e>
 800d664:	4b25      	ldr	r3, [pc, #148]	; (800d6fc <pbuf_copy_partial+0xd4>)
 800d666:	f240 420b 	movw	r2, #1035	; 0x40b
 800d66a:	4927      	ldr	r1, [pc, #156]	; (800d708 <pbuf_copy_partial+0xe0>)
 800d66c:	4825      	ldr	r0, [pc, #148]	; (800d704 <pbuf_copy_partial+0xdc>)
 800d66e:	f009 fd6f 	bl	8017150 <iprintf>
 800d672:	2300      	movs	r3, #0
 800d674:	e03e      	b.n	800d6f4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	61fb      	str	r3, [r7, #28]
 800d67a:	e034      	b.n	800d6e6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d67c:	88bb      	ldrh	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00a      	beq.n	800d698 <pbuf_copy_partial+0x70>
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	895b      	ldrh	r3, [r3, #10]
 800d686:	88ba      	ldrh	r2, [r7, #4]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d305      	bcc.n	800d698 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	895b      	ldrh	r3, [r3, #10]
 800d690:	88ba      	ldrh	r2, [r7, #4]
 800d692:	1ad3      	subs	r3, r2, r3
 800d694:	80bb      	strh	r3, [r7, #4]
 800d696:	e023      	b.n	800d6e0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	895a      	ldrh	r2, [r3, #10]
 800d69c:	88bb      	ldrh	r3, [r7, #4]
 800d69e:	1ad3      	subs	r3, r2, r3
 800d6a0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d6a2:	8b3a      	ldrh	r2, [r7, #24]
 800d6a4:	88fb      	ldrh	r3, [r7, #6]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d901      	bls.n	800d6ae <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d6aa:	88fb      	ldrh	r3, [r7, #6]
 800d6ac:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d6ae:	8b7b      	ldrh	r3, [r7, #26]
 800d6b0:	68ba      	ldr	r2, [r7, #8]
 800d6b2:	18d0      	adds	r0, r2, r3
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	685a      	ldr	r2, [r3, #4]
 800d6b8:	88bb      	ldrh	r3, [r7, #4]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	8b3a      	ldrh	r2, [r7, #24]
 800d6be:	4619      	mov	r1, r3
 800d6c0:	f009 fc50 	bl	8016f64 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d6c4:	8afa      	ldrh	r2, [r7, #22]
 800d6c6:	8b3b      	ldrh	r3, [r7, #24]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d6cc:	8b7a      	ldrh	r2, [r7, #26]
 800d6ce:	8b3b      	ldrh	r3, [r7, #24]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d6d4:	88fa      	ldrh	r2, [r7, #6]
 800d6d6:	8b3b      	ldrh	r3, [r7, #24]
 800d6d8:	1ad3      	subs	r3, r2, r3
 800d6da:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	61fb      	str	r3, [r7, #28]
 800d6e6:	88fb      	ldrh	r3, [r7, #6]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d002      	beq.n	800d6f2 <pbuf_copy_partial+0xca>
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d1c4      	bne.n	800d67c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d6f2:	8afb      	ldrh	r3, [r7, #22]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3720      	adds	r7, #32
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	080190c4 	.word	0x080190c4
 800d700:	0801940c 	.word	0x0801940c
 800d704:	08019124 	.word	0x08019124
 800d708:	0801942c 	.word	0x0801942c

0800d70c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	4603      	mov	r3, r0
 800d714:	603a      	str	r2, [r7, #0]
 800d716:	71fb      	strb	r3, [r7, #7]
 800d718:	460b      	mov	r3, r1
 800d71a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	8919      	ldrh	r1, [r3, #8]
 800d720:	88ba      	ldrh	r2, [r7, #4]
 800d722:	79fb      	ldrb	r3, [r7, #7]
 800d724:	4618      	mov	r0, r3
 800d726:	f7ff fa95 	bl	800cc54 <pbuf_alloc>
 800d72a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d101      	bne.n	800d736 <pbuf_clone+0x2a>
    return NULL;
 800d732:	2300      	movs	r3, #0
 800d734:	e011      	b.n	800d75a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d736:	6839      	ldr	r1, [r7, #0]
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f7ff fea3 	bl	800d484 <pbuf_copy>
 800d73e:	4603      	mov	r3, r0
 800d740:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d742:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d006      	beq.n	800d758 <pbuf_clone+0x4c>
 800d74a:	4b06      	ldr	r3, [pc, #24]	; (800d764 <pbuf_clone+0x58>)
 800d74c:	f240 5224 	movw	r2, #1316	; 0x524
 800d750:	4905      	ldr	r1, [pc, #20]	; (800d768 <pbuf_clone+0x5c>)
 800d752:	4806      	ldr	r0, [pc, #24]	; (800d76c <pbuf_clone+0x60>)
 800d754:	f009 fcfc 	bl	8017150 <iprintf>
  return q;
 800d758:	68fb      	ldr	r3, [r7, #12]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	080190c4 	.word	0x080190c4
 800d768:	08019538 	.word	0x08019538
 800d76c:	08019124 	.word	0x08019124

0800d770 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d774:	f009 fd04 	bl	8017180 <rand>
 800d778:	4603      	mov	r3, r0
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d780:	b29b      	uxth	r3, r3
 800d782:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d786:	b29a      	uxth	r2, r3
 800d788:	4b01      	ldr	r3, [pc, #4]	; (800d790 <tcp_init+0x20>)
 800d78a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d78c:	bf00      	nop
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	20000014 	.word	0x20000014

0800d794 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	7d1b      	ldrb	r3, [r3, #20]
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d105      	bne.n	800d7b0 <tcp_free+0x1c>
 800d7a4:	4b06      	ldr	r3, [pc, #24]	; (800d7c0 <tcp_free+0x2c>)
 800d7a6:	22d4      	movs	r2, #212	; 0xd4
 800d7a8:	4906      	ldr	r1, [pc, #24]	; (800d7c4 <tcp_free+0x30>)
 800d7aa:	4807      	ldr	r0, [pc, #28]	; (800d7c8 <tcp_free+0x34>)
 800d7ac:	f009 fcd0 	bl	8017150 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d7b0:	6879      	ldr	r1, [r7, #4]
 800d7b2:	2001      	movs	r0, #1
 800d7b4:	f7fe fef2 	bl	800c59c <memp_free>
}
 800d7b8:	bf00      	nop
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	080195c4 	.word	0x080195c4
 800d7c4:	080195f4 	.word	0x080195f4
 800d7c8:	08019608 	.word	0x08019608

0800d7cc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	7d1b      	ldrb	r3, [r3, #20]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d105      	bne.n	800d7e8 <tcp_free_listen+0x1c>
 800d7dc:	4b06      	ldr	r3, [pc, #24]	; (800d7f8 <tcp_free_listen+0x2c>)
 800d7de:	22df      	movs	r2, #223	; 0xdf
 800d7e0:	4906      	ldr	r1, [pc, #24]	; (800d7fc <tcp_free_listen+0x30>)
 800d7e2:	4807      	ldr	r0, [pc, #28]	; (800d800 <tcp_free_listen+0x34>)
 800d7e4:	f009 fcb4 	bl	8017150 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d7e8:	6879      	ldr	r1, [r7, #4]
 800d7ea:	2002      	movs	r0, #2
 800d7ec:	f7fe fed6 	bl	800c59c <memp_free>
}
 800d7f0:	bf00      	nop
 800d7f2:	3708      	adds	r7, #8
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	080195c4 	.word	0x080195c4
 800d7fc:	08019630 	.word	0x08019630
 800d800:	08019608 	.word	0x08019608

0800d804 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d808:	f000 ffdc 	bl	800e7c4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d80c:	4b07      	ldr	r3, [pc, #28]	; (800d82c <tcp_tmr+0x28>)
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	3301      	adds	r3, #1
 800d812:	b2da      	uxtb	r2, r3
 800d814:	4b05      	ldr	r3, [pc, #20]	; (800d82c <tcp_tmr+0x28>)
 800d816:	701a      	strb	r2, [r3, #0]
 800d818:	4b04      	ldr	r3, [pc, #16]	; (800d82c <tcp_tmr+0x28>)
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	f003 0301 	and.w	r3, r3, #1
 800d820:	2b00      	cmp	r3, #0
 800d822:	d001      	beq.n	800d828 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d824:	f000 fc8e 	bl	800e144 <tcp_slowtmr>
  }
}
 800d828:	bf00      	nop
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	2000d31d 	.word	0x2000d31d

0800d830 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d105      	bne.n	800d84c <tcp_remove_listener+0x1c>
 800d840:	4b0d      	ldr	r3, [pc, #52]	; (800d878 <tcp_remove_listener+0x48>)
 800d842:	22ff      	movs	r2, #255	; 0xff
 800d844:	490d      	ldr	r1, [pc, #52]	; (800d87c <tcp_remove_listener+0x4c>)
 800d846:	480e      	ldr	r0, [pc, #56]	; (800d880 <tcp_remove_listener+0x50>)
 800d848:	f009 fc82 	bl	8017150 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	60fb      	str	r3, [r7, #12]
 800d850:	e00a      	b.n	800d868 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d856:	683a      	ldr	r2, [r7, #0]
 800d858:	429a      	cmp	r2, r3
 800d85a:	d102      	bne.n	800d862 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2200      	movs	r2, #0
 800d860:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	60fb      	str	r3, [r7, #12]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1f1      	bne.n	800d852 <tcp_remove_listener+0x22>
    }
  }
}
 800d86e:	bf00      	nop
 800d870:	bf00      	nop
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	080195c4 	.word	0x080195c4
 800d87c:	0801964c 	.word	0x0801964c
 800d880:	08019608 	.word	0x08019608

0800d884 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d106      	bne.n	800d8a0 <tcp_listen_closed+0x1c>
 800d892:	4b14      	ldr	r3, [pc, #80]	; (800d8e4 <tcp_listen_closed+0x60>)
 800d894:	f240 1211 	movw	r2, #273	; 0x111
 800d898:	4913      	ldr	r1, [pc, #76]	; (800d8e8 <tcp_listen_closed+0x64>)
 800d89a:	4814      	ldr	r0, [pc, #80]	; (800d8ec <tcp_listen_closed+0x68>)
 800d89c:	f009 fc58 	bl	8017150 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	7d1b      	ldrb	r3, [r3, #20]
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d006      	beq.n	800d8b6 <tcp_listen_closed+0x32>
 800d8a8:	4b0e      	ldr	r3, [pc, #56]	; (800d8e4 <tcp_listen_closed+0x60>)
 800d8aa:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d8ae:	4910      	ldr	r1, [pc, #64]	; (800d8f0 <tcp_listen_closed+0x6c>)
 800d8b0:	480e      	ldr	r0, [pc, #56]	; (800d8ec <tcp_listen_closed+0x68>)
 800d8b2:	f009 fc4d 	bl	8017150 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	60fb      	str	r3, [r7, #12]
 800d8ba:	e00b      	b.n	800d8d4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d8bc:	4a0d      	ldr	r2, [pc, #52]	; (800d8f4 <tcp_listen_closed+0x70>)
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6879      	ldr	r1, [r7, #4]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7ff ffb1 	bl	800d830 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	60fb      	str	r3, [r7, #12]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	d9f0      	bls.n	800d8bc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d8da:	bf00      	nop
 800d8dc:	bf00      	nop
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	080195c4 	.word	0x080195c4
 800d8e8:	08019674 	.word	0x08019674
 800d8ec:	08019608 	.word	0x08019608
 800d8f0:	08019680 	.word	0x08019680
 800d8f4:	0801b5e4 	.word	0x0801b5e4

0800d8f8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d8f8:	b5b0      	push	{r4, r5, r7, lr}
 800d8fa:	b088      	sub	sp, #32
 800d8fc:	af04      	add	r7, sp, #16
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	460b      	mov	r3, r1
 800d902:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d106      	bne.n	800d918 <tcp_close_shutdown+0x20>
 800d90a:	4b63      	ldr	r3, [pc, #396]	; (800da98 <tcp_close_shutdown+0x1a0>)
 800d90c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d910:	4962      	ldr	r1, [pc, #392]	; (800da9c <tcp_close_shutdown+0x1a4>)
 800d912:	4863      	ldr	r0, [pc, #396]	; (800daa0 <tcp_close_shutdown+0x1a8>)
 800d914:	f009 fc1c 	bl	8017150 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d918:	78fb      	ldrb	r3, [r7, #3]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d066      	beq.n	800d9ec <tcp_close_shutdown+0xf4>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	7d1b      	ldrb	r3, [r3, #20]
 800d922:	2b04      	cmp	r3, #4
 800d924:	d003      	beq.n	800d92e <tcp_close_shutdown+0x36>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	7d1b      	ldrb	r3, [r3, #20]
 800d92a:	2b07      	cmp	r3, #7
 800d92c:	d15e      	bne.n	800d9ec <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d932:	2b00      	cmp	r3, #0
 800d934:	d104      	bne.n	800d940 <tcp_close_shutdown+0x48>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d93a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d93e:	d055      	beq.n	800d9ec <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	8b5b      	ldrh	r3, [r3, #26]
 800d944:	f003 0310 	and.w	r3, r3, #16
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d106      	bne.n	800d95a <tcp_close_shutdown+0x62>
 800d94c:	4b52      	ldr	r3, [pc, #328]	; (800da98 <tcp_close_shutdown+0x1a0>)
 800d94e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d952:	4954      	ldr	r1, [pc, #336]	; (800daa4 <tcp_close_shutdown+0x1ac>)
 800d954:	4852      	ldr	r0, [pc, #328]	; (800daa0 <tcp_close_shutdown+0x1a8>)
 800d956:	f009 fbfb 	bl	8017150 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d962:	687d      	ldr	r5, [r7, #4]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	3304      	adds	r3, #4
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	8ad2      	ldrh	r2, [r2, #22]
 800d96c:	6879      	ldr	r1, [r7, #4]
 800d96e:	8b09      	ldrh	r1, [r1, #24]
 800d970:	9102      	str	r1, [sp, #8]
 800d972:	9201      	str	r2, [sp, #4]
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	462b      	mov	r3, r5
 800d978:	4622      	mov	r2, r4
 800d97a:	4601      	mov	r1, r0
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f005 fcf1 	bl	8013364 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f001 face 	bl	800ef24 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d988:	4b47      	ldr	r3, [pc, #284]	; (800daa8 <tcp_close_shutdown+0x1b0>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d105      	bne.n	800d99e <tcp_close_shutdown+0xa6>
 800d992:	4b45      	ldr	r3, [pc, #276]	; (800daa8 <tcp_close_shutdown+0x1b0>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	4a43      	ldr	r2, [pc, #268]	; (800daa8 <tcp_close_shutdown+0x1b0>)
 800d99a:	6013      	str	r3, [r2, #0]
 800d99c:	e013      	b.n	800d9c6 <tcp_close_shutdown+0xce>
 800d99e:	4b42      	ldr	r3, [pc, #264]	; (800daa8 <tcp_close_shutdown+0x1b0>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	60fb      	str	r3, [r7, #12]
 800d9a4:	e00c      	b.n	800d9c0 <tcp_close_shutdown+0xc8>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d104      	bne.n	800d9ba <tcp_close_shutdown+0xc2>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	68da      	ldr	r2, [r3, #12]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	60da      	str	r2, [r3, #12]
 800d9b8:	e005      	b.n	800d9c6 <tcp_close_shutdown+0xce>
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	60fb      	str	r3, [r7, #12]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d1ef      	bne.n	800d9a6 <tcp_close_shutdown+0xae>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	60da      	str	r2, [r3, #12]
 800d9cc:	4b37      	ldr	r3, [pc, #220]	; (800daac <tcp_close_shutdown+0x1b4>)
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d9d2:	4b37      	ldr	r3, [pc, #220]	; (800dab0 <tcp_close_shutdown+0x1b8>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d102      	bne.n	800d9e2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d9dc:	f003 ff66 	bl	80118ac <tcp_trigger_input_pcb_close>
 800d9e0:	e002      	b.n	800d9e8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f7ff fed6 	bl	800d794 <tcp_free>
      }
      return ERR_OK;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	e050      	b.n	800da8e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	7d1b      	ldrb	r3, [r3, #20]
 800d9f0:	2b02      	cmp	r3, #2
 800d9f2:	d03b      	beq.n	800da6c <tcp_close_shutdown+0x174>
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	dc44      	bgt.n	800da82 <tcp_close_shutdown+0x18a>
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d002      	beq.n	800da02 <tcp_close_shutdown+0x10a>
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d02a      	beq.n	800da56 <tcp_close_shutdown+0x15e>
 800da00:	e03f      	b.n	800da82 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	8adb      	ldrh	r3, [r3, #22]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d021      	beq.n	800da4e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800da0a:	4b2a      	ldr	r3, [pc, #168]	; (800dab4 <tcp_close_shutdown+0x1bc>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	429a      	cmp	r2, r3
 800da12:	d105      	bne.n	800da20 <tcp_close_shutdown+0x128>
 800da14:	4b27      	ldr	r3, [pc, #156]	; (800dab4 <tcp_close_shutdown+0x1bc>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	4a26      	ldr	r2, [pc, #152]	; (800dab4 <tcp_close_shutdown+0x1bc>)
 800da1c:	6013      	str	r3, [r2, #0]
 800da1e:	e013      	b.n	800da48 <tcp_close_shutdown+0x150>
 800da20:	4b24      	ldr	r3, [pc, #144]	; (800dab4 <tcp_close_shutdown+0x1bc>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	60bb      	str	r3, [r7, #8]
 800da26:	e00c      	b.n	800da42 <tcp_close_shutdown+0x14a>
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d104      	bne.n	800da3c <tcp_close_shutdown+0x144>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	68da      	ldr	r2, [r3, #12]
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	60da      	str	r2, [r3, #12]
 800da3a:	e005      	b.n	800da48 <tcp_close_shutdown+0x150>
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	60bb      	str	r3, [r7, #8]
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d1ef      	bne.n	800da28 <tcp_close_shutdown+0x130>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7ff fea0 	bl	800d794 <tcp_free>
      break;
 800da54:	e01a      	b.n	800da8c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f7ff ff14 	bl	800d884 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800da5c:	6879      	ldr	r1, [r7, #4]
 800da5e:	4816      	ldr	r0, [pc, #88]	; (800dab8 <tcp_close_shutdown+0x1c0>)
 800da60:	f001 fab0 	bl	800efc4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7ff feb1 	bl	800d7cc <tcp_free_listen>
      break;
 800da6a:	e00f      	b.n	800da8c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800da6c:	6879      	ldr	r1, [r7, #4]
 800da6e:	480e      	ldr	r0, [pc, #56]	; (800daa8 <tcp_close_shutdown+0x1b0>)
 800da70:	f001 faa8 	bl	800efc4 <tcp_pcb_remove>
 800da74:	4b0d      	ldr	r3, [pc, #52]	; (800daac <tcp_close_shutdown+0x1b4>)
 800da76:	2201      	movs	r2, #1
 800da78:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f7ff fe8a 	bl	800d794 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800da80:	e004      	b.n	800da8c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f81a 	bl	800dabc <tcp_close_shutdown_fin>
 800da88:	4603      	mov	r3, r0
 800da8a:	e000      	b.n	800da8e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bdb0      	pop	{r4, r5, r7, pc}
 800da96:	bf00      	nop
 800da98:	080195c4 	.word	0x080195c4
 800da9c:	08019698 	.word	0x08019698
 800daa0:	08019608 	.word	0x08019608
 800daa4:	080196b8 	.word	0x080196b8
 800daa8:	2000d314 	.word	0x2000d314
 800daac:	2000d31c 	.word	0x2000d31c
 800dab0:	2000d354 	.word	0x2000d354
 800dab4:	2000d30c 	.word	0x2000d30c
 800dab8:	2000d310 	.word	0x2000d310

0800dabc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d106      	bne.n	800dad8 <tcp_close_shutdown_fin+0x1c>
 800daca:	4b2e      	ldr	r3, [pc, #184]	; (800db84 <tcp_close_shutdown_fin+0xc8>)
 800dacc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dad0:	492d      	ldr	r1, [pc, #180]	; (800db88 <tcp_close_shutdown_fin+0xcc>)
 800dad2:	482e      	ldr	r0, [pc, #184]	; (800db8c <tcp_close_shutdown_fin+0xd0>)
 800dad4:	f009 fb3c 	bl	8017150 <iprintf>

  switch (pcb->state) {
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	7d1b      	ldrb	r3, [r3, #20]
 800dadc:	2b07      	cmp	r3, #7
 800dade:	d020      	beq.n	800db22 <tcp_close_shutdown_fin+0x66>
 800dae0:	2b07      	cmp	r3, #7
 800dae2:	dc2b      	bgt.n	800db3c <tcp_close_shutdown_fin+0x80>
 800dae4:	2b03      	cmp	r3, #3
 800dae6:	d002      	beq.n	800daee <tcp_close_shutdown_fin+0x32>
 800dae8:	2b04      	cmp	r3, #4
 800daea:	d00d      	beq.n	800db08 <tcp_close_shutdown_fin+0x4c>
 800daec:	e026      	b.n	800db3c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f004 fd46 	bl	8012580 <tcp_send_fin>
 800daf4:	4603      	mov	r3, r0
 800daf6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800daf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d11f      	bne.n	800db40 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2205      	movs	r2, #5
 800db04:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db06:	e01b      	b.n	800db40 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f004 fd39 	bl	8012580 <tcp_send_fin>
 800db0e:	4603      	mov	r3, r0
 800db10:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d114      	bne.n	800db44 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2205      	movs	r2, #5
 800db1e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db20:	e010      	b.n	800db44 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f004 fd2c 	bl	8012580 <tcp_send_fin>
 800db28:	4603      	mov	r3, r0
 800db2a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d109      	bne.n	800db48 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2209      	movs	r2, #9
 800db38:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db3a:	e005      	b.n	800db48 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800db3c:	2300      	movs	r3, #0
 800db3e:	e01c      	b.n	800db7a <tcp_close_shutdown_fin+0xbe>
      break;
 800db40:	bf00      	nop
 800db42:	e002      	b.n	800db4a <tcp_close_shutdown_fin+0x8e>
      break;
 800db44:	bf00      	nop
 800db46:	e000      	b.n	800db4a <tcp_close_shutdown_fin+0x8e>
      break;
 800db48:	bf00      	nop
  }

  if (err == ERR_OK) {
 800db4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d103      	bne.n	800db5a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f004 fe52 	bl	80127fc <tcp_output>
 800db58:	e00d      	b.n	800db76 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800db5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db62:	d108      	bne.n	800db76 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	8b5b      	ldrh	r3, [r3, #26]
 800db68:	f043 0308 	orr.w	r3, r3, #8
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800db72:	2300      	movs	r3, #0
 800db74:	e001      	b.n	800db7a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800db76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	080195c4 	.word	0x080195c4
 800db88:	08019674 	.word	0x08019674
 800db8c:	08019608 	.word	0x08019608

0800db90 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d109      	bne.n	800dbb2 <tcp_close+0x22>
 800db9e:	4b0f      	ldr	r3, [pc, #60]	; (800dbdc <tcp_close+0x4c>)
 800dba0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dba4:	490e      	ldr	r1, [pc, #56]	; (800dbe0 <tcp_close+0x50>)
 800dba6:	480f      	ldr	r0, [pc, #60]	; (800dbe4 <tcp_close+0x54>)
 800dba8:	f009 fad2 	bl	8017150 <iprintf>
 800dbac:	f06f 030f 	mvn.w	r3, #15
 800dbb0:	e00f      	b.n	800dbd2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	7d1b      	ldrb	r3, [r3, #20]
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d006      	beq.n	800dbc8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	8b5b      	ldrh	r3, [r3, #26]
 800dbbe:	f043 0310 	orr.w	r3, r3, #16
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dbc8:	2101      	movs	r1, #1
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f7ff fe94 	bl	800d8f8 <tcp_close_shutdown>
 800dbd0:	4603      	mov	r3, r0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	080195c4 	.word	0x080195c4
 800dbe0:	080196d4 	.word	0x080196d4
 800dbe4:	08019608 	.word	0x08019608

0800dbe8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	60b9      	str	r1, [r7, #8]
 800dbf2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d109      	bne.n	800dc0e <tcp_shutdown+0x26>
 800dbfa:	4b26      	ldr	r3, [pc, #152]	; (800dc94 <tcp_shutdown+0xac>)
 800dbfc:	f240 2207 	movw	r2, #519	; 0x207
 800dc00:	4925      	ldr	r1, [pc, #148]	; (800dc98 <tcp_shutdown+0xb0>)
 800dc02:	4826      	ldr	r0, [pc, #152]	; (800dc9c <tcp_shutdown+0xb4>)
 800dc04:	f009 faa4 	bl	8017150 <iprintf>
 800dc08:	f06f 030f 	mvn.w	r3, #15
 800dc0c:	e03d      	b.n	800dc8a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	7d1b      	ldrb	r3, [r3, #20]
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d102      	bne.n	800dc1c <tcp_shutdown+0x34>
    return ERR_CONN;
 800dc16:	f06f 030a 	mvn.w	r3, #10
 800dc1a:	e036      	b.n	800dc8a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d01b      	beq.n	800dc5a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	8b5b      	ldrh	r3, [r3, #26]
 800dc26:	f043 0310 	orr.w	r3, r3, #16
 800dc2a:	b29a      	uxth	r2, r3
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d005      	beq.n	800dc42 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800dc36:	2101      	movs	r1, #1
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f7ff fe5d 	bl	800d8f8 <tcp_close_shutdown>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	e023      	b.n	800dc8a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d007      	beq.n	800dc5a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff fae4 	bl	800d21c <pbuf_free>
      pcb->refused_data = NULL;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2200      	movs	r2, #0
 800dc58:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d013      	beq.n	800dc88 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	7d1b      	ldrb	r3, [r3, #20]
 800dc64:	2b04      	cmp	r3, #4
 800dc66:	dc02      	bgt.n	800dc6e <tcp_shutdown+0x86>
 800dc68:	2b03      	cmp	r3, #3
 800dc6a:	da02      	bge.n	800dc72 <tcp_shutdown+0x8a>
 800dc6c:	e009      	b.n	800dc82 <tcp_shutdown+0x9a>
 800dc6e:	2b07      	cmp	r3, #7
 800dc70:	d107      	bne.n	800dc82 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	4619      	mov	r1, r3
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	f7ff fe3d 	bl	800d8f8 <tcp_close_shutdown>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	e003      	b.n	800dc8a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800dc82:	f06f 030a 	mvn.w	r3, #10
 800dc86:	e000      	b.n	800dc8a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800dc88:	2300      	movs	r3, #0
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3710      	adds	r7, #16
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	080195c4 	.word	0x080195c4
 800dc98:	080196ec 	.word	0x080196ec
 800dc9c:	08019608 	.word	0x08019608

0800dca0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b08e      	sub	sp, #56	; 0x38
 800dca4:	af04      	add	r7, sp, #16
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d107      	bne.n	800dcc0 <tcp_abandon+0x20>
 800dcb0:	4b52      	ldr	r3, [pc, #328]	; (800ddfc <tcp_abandon+0x15c>)
 800dcb2:	f240 223d 	movw	r2, #573	; 0x23d
 800dcb6:	4952      	ldr	r1, [pc, #328]	; (800de00 <tcp_abandon+0x160>)
 800dcb8:	4852      	ldr	r0, [pc, #328]	; (800de04 <tcp_abandon+0x164>)
 800dcba:	f009 fa49 	bl	8017150 <iprintf>
 800dcbe:	e099      	b.n	800ddf4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	7d1b      	ldrb	r3, [r3, #20]
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d106      	bne.n	800dcd6 <tcp_abandon+0x36>
 800dcc8:	4b4c      	ldr	r3, [pc, #304]	; (800ddfc <tcp_abandon+0x15c>)
 800dcca:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dcce:	494e      	ldr	r1, [pc, #312]	; (800de08 <tcp_abandon+0x168>)
 800dcd0:	484c      	ldr	r0, [pc, #304]	; (800de04 <tcp_abandon+0x164>)
 800dcd2:	f009 fa3d 	bl	8017150 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	7d1b      	ldrb	r3, [r3, #20]
 800dcda:	2b0a      	cmp	r3, #10
 800dcdc:	d107      	bne.n	800dcee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dcde:	6879      	ldr	r1, [r7, #4]
 800dce0:	484a      	ldr	r0, [pc, #296]	; (800de0c <tcp_abandon+0x16c>)
 800dce2:	f001 f96f 	bl	800efc4 <tcp_pcb_remove>
    tcp_free(pcb);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7ff fd54 	bl	800d794 <tcp_free>
 800dcec:	e082      	b.n	800ddf4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcfa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd00:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd08:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	691b      	ldr	r3, [r3, #16]
 800dd0e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	7d1b      	ldrb	r3, [r3, #20]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d126      	bne.n	800dd66 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	8adb      	ldrh	r3, [r3, #22]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d02e      	beq.n	800dd7e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd20:	4b3b      	ldr	r3, [pc, #236]	; (800de10 <tcp_abandon+0x170>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d105      	bne.n	800dd36 <tcp_abandon+0x96>
 800dd2a:	4b39      	ldr	r3, [pc, #228]	; (800de10 <tcp_abandon+0x170>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	4a37      	ldr	r2, [pc, #220]	; (800de10 <tcp_abandon+0x170>)
 800dd32:	6013      	str	r3, [r2, #0]
 800dd34:	e013      	b.n	800dd5e <tcp_abandon+0xbe>
 800dd36:	4b36      	ldr	r3, [pc, #216]	; (800de10 <tcp_abandon+0x170>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	61fb      	str	r3, [r7, #28]
 800dd3c:	e00c      	b.n	800dd58 <tcp_abandon+0xb8>
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	68db      	ldr	r3, [r3, #12]
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d104      	bne.n	800dd52 <tcp_abandon+0xb2>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	68da      	ldr	r2, [r3, #12]
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	60da      	str	r2, [r3, #12]
 800dd50:	e005      	b.n	800dd5e <tcp_abandon+0xbe>
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	61fb      	str	r3, [r7, #28]
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d1ef      	bne.n	800dd3e <tcp_abandon+0x9e>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2200      	movs	r2, #0
 800dd62:	60da      	str	r2, [r3, #12]
 800dd64:	e00b      	b.n	800dd7e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	8adb      	ldrh	r3, [r3, #22]
 800dd6e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dd70:	6879      	ldr	r1, [r7, #4]
 800dd72:	4828      	ldr	r0, [pc, #160]	; (800de14 <tcp_abandon+0x174>)
 800dd74:	f001 f926 	bl	800efc4 <tcp_pcb_remove>
 800dd78:	4b27      	ldr	r3, [pc, #156]	; (800de18 <tcp_abandon+0x178>)
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d004      	beq.n	800dd90 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f000 fdfa 	bl	800e984 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d004      	beq.n	800dda2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f000 fdf1 	bl	800e984 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d004      	beq.n	800ddb4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f000 fde8 	bl	800e984 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ddb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00e      	beq.n	800ddd8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ddba:	6879      	ldr	r1, [r7, #4]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	3304      	adds	r3, #4
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	8b12      	ldrh	r2, [r2, #24]
 800ddc4:	9202      	str	r2, [sp, #8]
 800ddc6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ddc8:	9201      	str	r2, [sp, #4]
 800ddca:	9300      	str	r3, [sp, #0]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	697a      	ldr	r2, [r7, #20]
 800ddd0:	69b9      	ldr	r1, [r7, #24]
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f005 fac6 	bl	8013364 <tcp_rst>
    }
    last_state = pcb->state;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	7d1b      	ldrb	r3, [r3, #20]
 800dddc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f7ff fcd8 	bl	800d794 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d004      	beq.n	800ddf4 <tcp_abandon+0x154>
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	f06f 010c 	mvn.w	r1, #12
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	4798      	blx	r3
  }
}
 800ddf4:	3728      	adds	r7, #40	; 0x28
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	080195c4 	.word	0x080195c4
 800de00:	08019708 	.word	0x08019708
 800de04:	08019608 	.word	0x08019608
 800de08:	08019724 	.word	0x08019724
 800de0c:	2000d318 	.word	0x2000d318
 800de10:	2000d30c 	.word	0x2000d30c
 800de14:	2000d314 	.word	0x2000d314
 800de18:	2000d31c 	.word	0x2000d31c

0800de1c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800de24:	2101      	movs	r1, #1
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7ff ff3a 	bl	800dca0 <tcp_abandon>
}
 800de2c:	bf00      	nop
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b088      	sub	sp, #32
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	4613      	mov	r3, r2
 800de40:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800de42:	2304      	movs	r3, #4
 800de44:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d101      	bne.n	800de50 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800de4c:	4b3e      	ldr	r3, [pc, #248]	; (800df48 <tcp_bind+0x114>)
 800de4e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d109      	bne.n	800de6a <tcp_bind+0x36>
 800de56:	4b3d      	ldr	r3, [pc, #244]	; (800df4c <tcp_bind+0x118>)
 800de58:	f240 22a9 	movw	r2, #681	; 0x2a9
 800de5c:	493c      	ldr	r1, [pc, #240]	; (800df50 <tcp_bind+0x11c>)
 800de5e:	483d      	ldr	r0, [pc, #244]	; (800df54 <tcp_bind+0x120>)
 800de60:	f009 f976 	bl	8017150 <iprintf>
 800de64:	f06f 030f 	mvn.w	r3, #15
 800de68:	e06a      	b.n	800df40 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	7d1b      	ldrb	r3, [r3, #20]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d009      	beq.n	800de86 <tcp_bind+0x52>
 800de72:	4b36      	ldr	r3, [pc, #216]	; (800df4c <tcp_bind+0x118>)
 800de74:	f240 22ab 	movw	r2, #683	; 0x2ab
 800de78:	4937      	ldr	r1, [pc, #220]	; (800df58 <tcp_bind+0x124>)
 800de7a:	4836      	ldr	r0, [pc, #216]	; (800df54 <tcp_bind+0x120>)
 800de7c:	f009 f968 	bl	8017150 <iprintf>
 800de80:	f06f 0305 	mvn.w	r3, #5
 800de84:	e05c      	b.n	800df40 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800de86:	88fb      	ldrh	r3, [r7, #6]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d109      	bne.n	800dea0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800de8c:	f000 f914 	bl	800e0b8 <tcp_new_port>
 800de90:	4603      	mov	r3, r0
 800de92:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800de94:	88fb      	ldrh	r3, [r7, #6]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d135      	bne.n	800df06 <tcp_bind+0xd2>
      return ERR_BUF;
 800de9a:	f06f 0301 	mvn.w	r3, #1
 800de9e:	e04f      	b.n	800df40 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dea0:	2300      	movs	r3, #0
 800dea2:	61fb      	str	r3, [r7, #28]
 800dea4:	e02b      	b.n	800defe <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dea6:	4a2d      	ldr	r2, [pc, #180]	; (800df5c <tcp_bind+0x128>)
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	61bb      	str	r3, [r7, #24]
 800deb2:	e01e      	b.n	800def2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800deb4:	69bb      	ldr	r3, [r7, #24]
 800deb6:	8adb      	ldrh	r3, [r3, #22]
 800deb8:	88fa      	ldrh	r2, [r7, #6]
 800deba:	429a      	cmp	r2, r3
 800debc:	d116      	bne.n	800deec <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800debe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d010      	beq.n	800dee6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800dec4:	69bb      	ldr	r3, [r7, #24]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d00c      	beq.n	800dee6 <tcp_bind+0xb2>
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d009      	beq.n	800dee6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d005      	beq.n	800dee6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d102      	bne.n	800deec <tcp_bind+0xb8>
              return ERR_USE;
 800dee6:	f06f 0307 	mvn.w	r3, #7
 800deea:	e029      	b.n	800df40 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	61bb      	str	r3, [r7, #24]
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d1dd      	bne.n	800deb4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	3301      	adds	r3, #1
 800defc:	61fb      	str	r3, [r7, #28]
 800defe:	69fa      	ldr	r2, [r7, #28]
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	429a      	cmp	r2, r3
 800df04:	dbcf      	blt.n	800dea6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d00c      	beq.n	800df26 <tcp_bind+0xf2>
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d008      	beq.n	800df26 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d002      	beq.n	800df20 <tcp_bind+0xec>
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	e000      	b.n	800df22 <tcp_bind+0xee>
 800df20:	2300      	movs	r3, #0
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	88fa      	ldrh	r2, [r7, #6]
 800df2a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800df2c:	4b0c      	ldr	r3, [pc, #48]	; (800df60 <tcp_bind+0x12c>)
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	60da      	str	r2, [r3, #12]
 800df34:	4a0a      	ldr	r2, [pc, #40]	; (800df60 <tcp_bind+0x12c>)
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	6013      	str	r3, [r2, #0]
 800df3a:	f005 fbd5 	bl	80136e8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800df3e:	2300      	movs	r3, #0
}
 800df40:	4618      	mov	r0, r3
 800df42:	3720      	adds	r7, #32
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	0801b60c 	.word	0x0801b60c
 800df4c:	080195c4 	.word	0x080195c4
 800df50:	08019758 	.word	0x08019758
 800df54:	08019608 	.word	0x08019608
 800df58:	08019770 	.word	0x08019770
 800df5c:	0801b5e4 	.word	0x0801b5e4
 800df60:	2000d30c 	.word	0x2000d30c

0800df64 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d106      	bne.n	800df80 <tcp_update_rcv_ann_wnd+0x1c>
 800df72:	4b25      	ldr	r3, [pc, #148]	; (800e008 <tcp_update_rcv_ann_wnd+0xa4>)
 800df74:	f240 32a6 	movw	r2, #934	; 0x3a6
 800df78:	4924      	ldr	r1, [pc, #144]	; (800e00c <tcp_update_rcv_ann_wnd+0xa8>)
 800df7a:	4825      	ldr	r0, [pc, #148]	; (800e010 <tcp_update_rcv_ann_wnd+0xac>)
 800df7c:	f009 f8e8 	bl	8017150 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800df88:	4413      	add	r3, r2
 800df8a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800df94:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800df98:	bf28      	it	cs
 800df9a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800df9e:	b292      	uxth	r2, r2
 800dfa0:	4413      	add	r3, r2
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	1ad3      	subs	r3, r2, r3
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	db08      	blt.n	800dfbc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	e020      	b.n	800dffe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	dd03      	ble.n	800dfd2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dfd0:	e014      	b.n	800dffc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfda:	1ad3      	subs	r3, r2, r3
 800dfdc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfe4:	d306      	bcc.n	800dff4 <tcp_update_rcv_ann_wnd+0x90>
 800dfe6:	4b08      	ldr	r3, [pc, #32]	; (800e008 <tcp_update_rcv_ann_wnd+0xa4>)
 800dfe8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dfec:	4909      	ldr	r1, [pc, #36]	; (800e014 <tcp_update_rcv_ann_wnd+0xb0>)
 800dfee:	4808      	ldr	r0, [pc, #32]	; (800e010 <tcp_update_rcv_ann_wnd+0xac>)
 800dff0:	f009 f8ae 	bl	8017150 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800dffc:	2300      	movs	r3, #0
  }
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	080195c4 	.word	0x080195c4
 800e00c:	08019820 	.word	0x08019820
 800e010:	08019608 	.word	0x08019608
 800e014:	08019844 	.word	0x08019844

0800e018 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	460b      	mov	r3, r1
 800e022:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d107      	bne.n	800e03a <tcp_recved+0x22>
 800e02a:	4b1f      	ldr	r3, [pc, #124]	; (800e0a8 <tcp_recved+0x90>)
 800e02c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e030:	491e      	ldr	r1, [pc, #120]	; (800e0ac <tcp_recved+0x94>)
 800e032:	481f      	ldr	r0, [pc, #124]	; (800e0b0 <tcp_recved+0x98>)
 800e034:	f009 f88c 	bl	8017150 <iprintf>
 800e038:	e032      	b.n	800e0a0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	7d1b      	ldrb	r3, [r3, #20]
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d106      	bne.n	800e050 <tcp_recved+0x38>
 800e042:	4b19      	ldr	r3, [pc, #100]	; (800e0a8 <tcp_recved+0x90>)
 800e044:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e048:	491a      	ldr	r1, [pc, #104]	; (800e0b4 <tcp_recved+0x9c>)
 800e04a:	4819      	ldr	r0, [pc, #100]	; (800e0b0 <tcp_recved+0x98>)
 800e04c:	f009 f880 	bl	8017150 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e054:	887b      	ldrh	r3, [r7, #2]
 800e056:	4413      	add	r3, r2
 800e058:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e05a:	89fb      	ldrh	r3, [r7, #14]
 800e05c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e060:	d804      	bhi.n	800e06c <tcp_recved+0x54>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e066:	89fa      	ldrh	r2, [r7, #14]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d204      	bcs.n	800e076 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e072:	851a      	strh	r2, [r3, #40]	; 0x28
 800e074:	e002      	b.n	800e07c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	89fa      	ldrh	r2, [r7, #14]
 800e07a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f7ff ff71 	bl	800df64 <tcp_update_rcv_ann_wnd>
 800e082:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e08a:	d309      	bcc.n	800e0a0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	8b5b      	ldrh	r3, [r3, #26]
 800e090:	f043 0302 	orr.w	r3, r3, #2
 800e094:	b29a      	uxth	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f004 fbae 	bl	80127fc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	080195c4 	.word	0x080195c4
 800e0ac:	08019860 	.word	0x08019860
 800e0b0:	08019608 	.word	0x08019608
 800e0b4:	08019878 	.word	0x08019878

0800e0b8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e0c2:	4b1e      	ldr	r3, [pc, #120]	; (800e13c <tcp_new_port+0x84>)
 800e0c4:	881b      	ldrh	r3, [r3, #0]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	b29a      	uxth	r2, r3
 800e0ca:	4b1c      	ldr	r3, [pc, #112]	; (800e13c <tcp_new_port+0x84>)
 800e0cc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e0ce:	4b1b      	ldr	r3, [pc, #108]	; (800e13c <tcp_new_port+0x84>)
 800e0d0:	881b      	ldrh	r3, [r3, #0]
 800e0d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d103      	bne.n	800e0e2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e0da:	4b18      	ldr	r3, [pc, #96]	; (800e13c <tcp_new_port+0x84>)
 800e0dc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e0e0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	71fb      	strb	r3, [r7, #7]
 800e0e6:	e01e      	b.n	800e126 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e0e8:	79fb      	ldrb	r3, [r7, #7]
 800e0ea:	4a15      	ldr	r2, [pc, #84]	; (800e140 <tcp_new_port+0x88>)
 800e0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	603b      	str	r3, [r7, #0]
 800e0f4:	e011      	b.n	800e11a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	8ada      	ldrh	r2, [r3, #22]
 800e0fa:	4b10      	ldr	r3, [pc, #64]	; (800e13c <tcp_new_port+0x84>)
 800e0fc:	881b      	ldrh	r3, [r3, #0]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d108      	bne.n	800e114 <tcp_new_port+0x5c>
        n++;
 800e102:	88bb      	ldrh	r3, [r7, #4]
 800e104:	3301      	adds	r3, #1
 800e106:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e108:	88bb      	ldrh	r3, [r7, #4]
 800e10a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e10e:	d3d8      	bcc.n	800e0c2 <tcp_new_port+0xa>
          return 0;
 800e110:	2300      	movs	r3, #0
 800e112:	e00d      	b.n	800e130 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	603b      	str	r3, [r7, #0]
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d1ea      	bne.n	800e0f6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e120:	79fb      	ldrb	r3, [r7, #7]
 800e122:	3301      	adds	r3, #1
 800e124:	71fb      	strb	r3, [r7, #7]
 800e126:	79fb      	ldrb	r3, [r7, #7]
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d9dd      	bls.n	800e0e8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e12c:	4b03      	ldr	r3, [pc, #12]	; (800e13c <tcp_new_port+0x84>)
 800e12e:	881b      	ldrh	r3, [r3, #0]
}
 800e130:	4618      	mov	r0, r3
 800e132:	370c      	adds	r7, #12
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr
 800e13c:	20000014 	.word	0x20000014
 800e140:	0801b5e4 	.word	0x0801b5e4

0800e144 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e144:	b5b0      	push	{r4, r5, r7, lr}
 800e146:	b090      	sub	sp, #64	; 0x40
 800e148:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e14a:	2300      	movs	r3, #0
 800e14c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e150:	4b94      	ldr	r3, [pc, #592]	; (800e3a4 <tcp_slowtmr+0x260>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	3301      	adds	r3, #1
 800e156:	4a93      	ldr	r2, [pc, #588]	; (800e3a4 <tcp_slowtmr+0x260>)
 800e158:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e15a:	4b93      	ldr	r3, [pc, #588]	; (800e3a8 <tcp_slowtmr+0x264>)
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	3301      	adds	r3, #1
 800e160:	b2da      	uxtb	r2, r3
 800e162:	4b91      	ldr	r3, [pc, #580]	; (800e3a8 <tcp_slowtmr+0x264>)
 800e164:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e166:	2300      	movs	r3, #0
 800e168:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e16a:	4b90      	ldr	r3, [pc, #576]	; (800e3ac <tcp_slowtmr+0x268>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e170:	e29f      	b.n	800e6b2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e174:	7d1b      	ldrb	r3, [r3, #20]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d106      	bne.n	800e188 <tcp_slowtmr+0x44>
 800e17a:	4b8d      	ldr	r3, [pc, #564]	; (800e3b0 <tcp_slowtmr+0x26c>)
 800e17c:	f240 42be 	movw	r2, #1214	; 0x4be
 800e180:	498c      	ldr	r1, [pc, #560]	; (800e3b4 <tcp_slowtmr+0x270>)
 800e182:	488d      	ldr	r0, [pc, #564]	; (800e3b8 <tcp_slowtmr+0x274>)
 800e184:	f008 ffe4 	bl	8017150 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18a:	7d1b      	ldrb	r3, [r3, #20]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d106      	bne.n	800e19e <tcp_slowtmr+0x5a>
 800e190:	4b87      	ldr	r3, [pc, #540]	; (800e3b0 <tcp_slowtmr+0x26c>)
 800e192:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e196:	4989      	ldr	r1, [pc, #548]	; (800e3bc <tcp_slowtmr+0x278>)
 800e198:	4887      	ldr	r0, [pc, #540]	; (800e3b8 <tcp_slowtmr+0x274>)
 800e19a:	f008 ffd9 	bl	8017150 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	7d1b      	ldrb	r3, [r3, #20]
 800e1a2:	2b0a      	cmp	r3, #10
 800e1a4:	d106      	bne.n	800e1b4 <tcp_slowtmr+0x70>
 800e1a6:	4b82      	ldr	r3, [pc, #520]	; (800e3b0 <tcp_slowtmr+0x26c>)
 800e1a8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e1ac:	4984      	ldr	r1, [pc, #528]	; (800e3c0 <tcp_slowtmr+0x27c>)
 800e1ae:	4882      	ldr	r0, [pc, #520]	; (800e3b8 <tcp_slowtmr+0x274>)
 800e1b0:	f008 ffce 	bl	8017150 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b6:	7f9a      	ldrb	r2, [r3, #30]
 800e1b8:	4b7b      	ldr	r3, [pc, #492]	; (800e3a8 <tcp_slowtmr+0x264>)
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d105      	bne.n	800e1cc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e1ca:	e272      	b.n	800e6b2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e1cc:	4b76      	ldr	r3, [pc, #472]	; (800e3a8 <tcp_slowtmr+0x264>)
 800e1ce:	781a      	ldrb	r2, [r3, #0]
 800e1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e2:	7d1b      	ldrb	r3, [r3, #20]
 800e1e4:	2b02      	cmp	r3, #2
 800e1e6:	d10a      	bne.n	800e1fe <tcp_slowtmr+0xba>
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e1ee:	2b05      	cmp	r3, #5
 800e1f0:	d905      	bls.n	800e1fe <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e1f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1fc:	e11e      	b.n	800e43c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e200:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e204:	2b0b      	cmp	r3, #11
 800e206:	d905      	bls.n	800e214 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e20c:	3301      	adds	r3, #1
 800e20e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e212:	e113      	b.n	800e43c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e216:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d075      	beq.n	800e30a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e222:	2b00      	cmp	r3, #0
 800e224:	d006      	beq.n	800e234 <tcp_slowtmr+0xf0>
 800e226:	4b62      	ldr	r3, [pc, #392]	; (800e3b0 <tcp_slowtmr+0x26c>)
 800e228:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e22c:	4965      	ldr	r1, [pc, #404]	; (800e3c4 <tcp_slowtmr+0x280>)
 800e22e:	4862      	ldr	r0, [pc, #392]	; (800e3b8 <tcp_slowtmr+0x274>)
 800e230:	f008 ff8e 	bl	8017150 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d106      	bne.n	800e24a <tcp_slowtmr+0x106>
 800e23c:	4b5c      	ldr	r3, [pc, #368]	; (800e3b0 <tcp_slowtmr+0x26c>)
 800e23e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e242:	4961      	ldr	r1, [pc, #388]	; (800e3c8 <tcp_slowtmr+0x284>)
 800e244:	485c      	ldr	r0, [pc, #368]	; (800e3b8 <tcp_slowtmr+0x274>)
 800e246:	f008 ff83 	bl	8017150 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e250:	2b0b      	cmp	r3, #11
 800e252:	d905      	bls.n	800e260 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e258:	3301      	adds	r3, #1
 800e25a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e25e:	e0ed      	b.n	800e43c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e262:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e266:	3b01      	subs	r3, #1
 800e268:	4a58      	ldr	r2, [pc, #352]	; (800e3cc <tcp_slowtmr+0x288>)
 800e26a:	5cd3      	ldrb	r3, [r2, r3]
 800e26c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e270:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e274:	7c7a      	ldrb	r2, [r7, #17]
 800e276:	429a      	cmp	r2, r3
 800e278:	d907      	bls.n	800e28a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e280:	3301      	adds	r3, #1
 800e282:	b2da      	uxtb	r2, r3
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e290:	7c7a      	ldrb	r2, [r7, #17]
 800e292:	429a      	cmp	r2, r3
 800e294:	f200 80d2 	bhi.w	800e43c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e298:	2301      	movs	r3, #1
 800e29a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d108      	bne.n	800e2b8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e2a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2a8:	f005 f950 	bl	801354c <tcp_zero_window_probe>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d014      	beq.n	800e2dc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	623b      	str	r3, [r7, #32]
 800e2b6:	e011      	b.n	800e2dc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2be:	4619      	mov	r1, r3
 800e2c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2c2:	f004 f815 	bl	80122f0 <tcp_split_unsent_seg>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d107      	bne.n	800e2dc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e2cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2ce:	f004 fa95 	bl	80127fc <tcp_output>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d101      	bne.n	800e2dc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e2dc:	6a3b      	ldr	r3, [r7, #32]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	f000 80ac 	beq.w	800e43c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e2f2:	2b06      	cmp	r3, #6
 800e2f4:	f200 80a2 	bhi.w	800e43c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e2fe:	3301      	adds	r3, #1
 800e300:	b2da      	uxtb	r2, r3
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e308:	e098      	b.n	800e43c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e310:	2b00      	cmp	r3, #0
 800e312:	db0f      	blt.n	800e334 <tcp_slowtmr+0x1f0>
 800e314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e316:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e31a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e31e:	4293      	cmp	r3, r2
 800e320:	d008      	beq.n	800e334 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e324:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e328:	b29b      	uxth	r3, r3
 800e32a:	3301      	adds	r3, #1
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	b21a      	sxth	r2, r3
 800e330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e332:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e336:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e340:	429a      	cmp	r2, r3
 800e342:	db7b      	blt.n	800e43c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e346:	f004 fd4b 	bl	8012de0 <tcp_rexmit_rto_prepare>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d007      	beq.n	800e360 <tcp_slowtmr+0x21c>
 800e350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e354:	2b00      	cmp	r3, #0
 800e356:	d171      	bne.n	800e43c <tcp_slowtmr+0x2f8>
 800e358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d06d      	beq.n	800e43c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e362:	7d1b      	ldrb	r3, [r3, #20]
 800e364:	2b02      	cmp	r3, #2
 800e366:	d03a      	beq.n	800e3de <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e36e:	2b0c      	cmp	r3, #12
 800e370:	bf28      	it	cs
 800e372:	230c      	movcs	r3, #12
 800e374:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e378:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e37c:	10db      	asrs	r3, r3, #3
 800e37e:	b21b      	sxth	r3, r3
 800e380:	461a      	mov	r2, r3
 800e382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e384:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e388:	4413      	add	r3, r2
 800e38a:	7efa      	ldrb	r2, [r7, #27]
 800e38c:	4910      	ldr	r1, [pc, #64]	; (800e3d0 <tcp_slowtmr+0x28c>)
 800e38e:	5c8a      	ldrb	r2, [r1, r2]
 800e390:	4093      	lsls	r3, r2
 800e392:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e39a:	4293      	cmp	r3, r2
 800e39c:	dc1a      	bgt.n	800e3d4 <tcp_slowtmr+0x290>
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	b21a      	sxth	r2, r3
 800e3a2:	e019      	b.n	800e3d8 <tcp_slowtmr+0x294>
 800e3a4:	2000d308 	.word	0x2000d308
 800e3a8:	2000d31e 	.word	0x2000d31e
 800e3ac:	2000d314 	.word	0x2000d314
 800e3b0:	080195c4 	.word	0x080195c4
 800e3b4:	08019908 	.word	0x08019908
 800e3b8:	08019608 	.word	0x08019608
 800e3bc:	08019934 	.word	0x08019934
 800e3c0:	08019960 	.word	0x08019960
 800e3c4:	08019990 	.word	0x08019990
 800e3c8:	080199c4 	.word	0x080199c4
 800e3cc:	0801b5dc 	.word	0x0801b5dc
 800e3d0:	0801b5cc 	.word	0x0801b5cc
 800e3d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	bf28      	it	cs
 800e3f4:	4613      	movcs	r3, r2
 800e3f6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e3f8:	8a7b      	ldrh	r3, [r7, #18]
 800e3fa:	085b      	lsrs	r3, r3, #1
 800e3fc:	b29a      	uxth	r2, r3
 800e3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e400:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e406:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e40e:	005b      	lsls	r3, r3, #1
 800e410:	b29b      	uxth	r3, r3
 800e412:	429a      	cmp	r2, r3
 800e414:	d206      	bcs.n	800e424 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e41a:	005b      	lsls	r3, r3, #1
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e420:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e430:	2200      	movs	r2, #0
 800e432:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e436:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e438:	f004 fd42 	bl	8012ec0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43e:	7d1b      	ldrb	r3, [r3, #20]
 800e440:	2b06      	cmp	r3, #6
 800e442:	d111      	bne.n	800e468 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e446:	8b5b      	ldrh	r3, [r3, #26]
 800e448:	f003 0310 	and.w	r3, r3, #16
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d00b      	beq.n	800e468 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e450:	4b9d      	ldr	r3, [pc, #628]	; (800e6c8 <tcp_slowtmr+0x584>)
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e456:	6a1b      	ldr	r3, [r3, #32]
 800e458:	1ad3      	subs	r3, r2, r3
 800e45a:	2b28      	cmp	r3, #40	; 0x28
 800e45c:	d904      	bls.n	800e468 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e45e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e462:	3301      	adds	r3, #1
 800e464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46a:	7a5b      	ldrb	r3, [r3, #9]
 800e46c:	f003 0308 	and.w	r3, r3, #8
 800e470:	2b00      	cmp	r3, #0
 800e472:	d04c      	beq.n	800e50e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e476:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e478:	2b04      	cmp	r3, #4
 800e47a:	d003      	beq.n	800e484 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e480:	2b07      	cmp	r3, #7
 800e482:	d144      	bne.n	800e50e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e484:	4b90      	ldr	r3, [pc, #576]	; (800e6c8 <tcp_slowtmr+0x584>)
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48a:	6a1b      	ldr	r3, [r3, #32]
 800e48c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e494:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e498:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e49c:	498b      	ldr	r1, [pc, #556]	; (800e6cc <tcp_slowtmr+0x588>)
 800e49e:	fba1 1303 	umull	r1, r3, r1, r3
 800e4a2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d90a      	bls.n	800e4be <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e4a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e4b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e4bc:	e027      	b.n	800e50e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4be:	4b82      	ldr	r3, [pc, #520]	; (800e6c8 <tcp_slowtmr+0x584>)
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c4:	6a1b      	ldr	r3, [r3, #32]
 800e4c6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ca:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	4b7e      	ldr	r3, [pc, #504]	; (800e6d0 <tcp_slowtmr+0x58c>)
 800e4d8:	fb00 f303 	mul.w	r3, r0, r3
 800e4dc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e4de:	497b      	ldr	r1, [pc, #492]	; (800e6cc <tcp_slowtmr+0x588>)
 800e4e0:	fba1 1303 	umull	r1, r3, r1, r3
 800e4e4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d911      	bls.n	800e50e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e4ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4ec:	f004 ffee 	bl	80134cc <tcp_keepalive>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e4f6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d107      	bne.n	800e50e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e500:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e504:	3301      	adds	r3, #1
 800e506:	b2da      	uxtb	r2, r3
 800e508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e512:	2b00      	cmp	r3, #0
 800e514:	d011      	beq.n	800e53a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e516:	4b6c      	ldr	r3, [pc, #432]	; (800e6c8 <tcp_slowtmr+0x584>)
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51c:	6a1b      	ldr	r3, [r3, #32]
 800e51e:	1ad2      	subs	r2, r2, r3
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e526:	4619      	mov	r1, r3
 800e528:	460b      	mov	r3, r1
 800e52a:	005b      	lsls	r3, r3, #1
 800e52c:	440b      	add	r3, r1
 800e52e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e530:	429a      	cmp	r2, r3
 800e532:	d302      	bcc.n	800e53a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e536:	f000 fea9 	bl	800f28c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53c:	7d1b      	ldrb	r3, [r3, #20]
 800e53e:	2b03      	cmp	r3, #3
 800e540:	d10b      	bne.n	800e55a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e542:	4b61      	ldr	r3, [pc, #388]	; (800e6c8 <tcp_slowtmr+0x584>)
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e548:	6a1b      	ldr	r3, [r3, #32]
 800e54a:	1ad3      	subs	r3, r2, r3
 800e54c:	2b28      	cmp	r3, #40	; 0x28
 800e54e:	d904      	bls.n	800e55a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e554:	3301      	adds	r3, #1
 800e556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55c:	7d1b      	ldrb	r3, [r3, #20]
 800e55e:	2b09      	cmp	r3, #9
 800e560:	d10b      	bne.n	800e57a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e562:	4b59      	ldr	r3, [pc, #356]	; (800e6c8 <tcp_slowtmr+0x584>)
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e568:	6a1b      	ldr	r3, [r3, #32]
 800e56a:	1ad3      	subs	r3, r2, r3
 800e56c:	2bf0      	cmp	r3, #240	; 0xf0
 800e56e:	d904      	bls.n	800e57a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e574:	3301      	adds	r3, #1
 800e576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e57a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d060      	beq.n	800e644 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e588:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e58a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e58c:	f000 fcca 	bl	800ef24 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e592:	2b00      	cmp	r3, #0
 800e594:	d010      	beq.n	800e5b8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e596:	4b4f      	ldr	r3, [pc, #316]	; (800e6d4 <tcp_slowtmr+0x590>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d106      	bne.n	800e5ae <tcp_slowtmr+0x46a>
 800e5a0:	4b4d      	ldr	r3, [pc, #308]	; (800e6d8 <tcp_slowtmr+0x594>)
 800e5a2:	f240 526d 	movw	r2, #1389	; 0x56d
 800e5a6:	494d      	ldr	r1, [pc, #308]	; (800e6dc <tcp_slowtmr+0x598>)
 800e5a8:	484d      	ldr	r0, [pc, #308]	; (800e6e0 <tcp_slowtmr+0x59c>)
 800e5aa:	f008 fdd1 	bl	8017150 <iprintf>
        prev->next = pcb->next;
 800e5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b0:	68da      	ldr	r2, [r3, #12]
 800e5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b4:	60da      	str	r2, [r3, #12]
 800e5b6:	e00f      	b.n	800e5d8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e5b8:	4b46      	ldr	r3, [pc, #280]	; (800e6d4 <tcp_slowtmr+0x590>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d006      	beq.n	800e5d0 <tcp_slowtmr+0x48c>
 800e5c2:	4b45      	ldr	r3, [pc, #276]	; (800e6d8 <tcp_slowtmr+0x594>)
 800e5c4:	f240 5271 	movw	r2, #1393	; 0x571
 800e5c8:	4946      	ldr	r1, [pc, #280]	; (800e6e4 <tcp_slowtmr+0x5a0>)
 800e5ca:	4845      	ldr	r0, [pc, #276]	; (800e6e0 <tcp_slowtmr+0x59c>)
 800e5cc:	f008 fdc0 	bl	8017150 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	4a3f      	ldr	r2, [pc, #252]	; (800e6d4 <tcp_slowtmr+0x590>)
 800e5d6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e5d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d013      	beq.n	800e608 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e5e8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ec:	3304      	adds	r3, #4
 800e5ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5f0:	8ad2      	ldrh	r2, [r2, #22]
 800e5f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5f4:	8b09      	ldrh	r1, [r1, #24]
 800e5f6:	9102      	str	r1, [sp, #8]
 800e5f8:	9201      	str	r2, [sp, #4]
 800e5fa:	9300      	str	r3, [sp, #0]
 800e5fc:	462b      	mov	r3, r5
 800e5fe:	4622      	mov	r2, r4
 800e600:	4601      	mov	r1, r0
 800e602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e604:	f004 feae 	bl	8013364 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60a:	691b      	ldr	r3, [r3, #16]
 800e60c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e610:	7d1b      	ldrb	r3, [r3, #20]
 800e612:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e616:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e61e:	6838      	ldr	r0, [r7, #0]
 800e620:	f7ff f8b8 	bl	800d794 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e624:	4b30      	ldr	r3, [pc, #192]	; (800e6e8 <tcp_slowtmr+0x5a4>)
 800e626:	2200      	movs	r2, #0
 800e628:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d004      	beq.n	800e63a <tcp_slowtmr+0x4f6>
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f06f 010c 	mvn.w	r1, #12
 800e636:	68b8      	ldr	r0, [r7, #8]
 800e638:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e63a:	4b2b      	ldr	r3, [pc, #172]	; (800e6e8 <tcp_slowtmr+0x5a4>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d037      	beq.n	800e6b2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e642:	e590      	b.n	800e166 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e646:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64a:	68db      	ldr	r3, [r3, #12]
 800e64c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e650:	7f1b      	ldrb	r3, [r3, #28]
 800e652:	3301      	adds	r3, #1
 800e654:	b2da      	uxtb	r2, r3
 800e656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e658:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65c:	7f1a      	ldrb	r2, [r3, #28]
 800e65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e660:	7f5b      	ldrb	r3, [r3, #29]
 800e662:	429a      	cmp	r2, r3
 800e664:	d325      	bcc.n	800e6b2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e668:	2200      	movs	r2, #0
 800e66a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e66c:	4b1e      	ldr	r3, [pc, #120]	; (800e6e8 <tcp_slowtmr+0x5a4>)
 800e66e:	2200      	movs	r2, #0
 800e670:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d00b      	beq.n	800e694 <tcp_slowtmr+0x550>
 800e67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e684:	6912      	ldr	r2, [r2, #16]
 800e686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e688:	4610      	mov	r0, r2
 800e68a:	4798      	blx	r3
 800e68c:	4603      	mov	r3, r0
 800e68e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e692:	e002      	b.n	800e69a <tcp_slowtmr+0x556>
 800e694:	2300      	movs	r3, #0
 800e696:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e69a:	4b13      	ldr	r3, [pc, #76]	; (800e6e8 <tcp_slowtmr+0x5a4>)
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d000      	beq.n	800e6a4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e6a2:	e560      	b.n	800e166 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e6a4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d102      	bne.n	800e6b2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6ae:	f004 f8a5 	bl	80127fc <tcp_output>
  while (pcb != NULL) {
 800e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f47f ad5c 	bne.w	800e172 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e6be:	4b0b      	ldr	r3, [pc, #44]	; (800e6ec <tcp_slowtmr+0x5a8>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e6c4:	e067      	b.n	800e796 <tcp_slowtmr+0x652>
 800e6c6:	bf00      	nop
 800e6c8:	2000d308 	.word	0x2000d308
 800e6cc:	10624dd3 	.word	0x10624dd3
 800e6d0:	000124f8 	.word	0x000124f8
 800e6d4:	2000d314 	.word	0x2000d314
 800e6d8:	080195c4 	.word	0x080195c4
 800e6dc:	080199fc 	.word	0x080199fc
 800e6e0:	08019608 	.word	0x08019608
 800e6e4:	08019a28 	.word	0x08019a28
 800e6e8:	2000d31c 	.word	0x2000d31c
 800e6ec:	2000d318 	.word	0x2000d318
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f2:	7d1b      	ldrb	r3, [r3, #20]
 800e6f4:	2b0a      	cmp	r3, #10
 800e6f6:	d006      	beq.n	800e706 <tcp_slowtmr+0x5c2>
 800e6f8:	4b2b      	ldr	r3, [pc, #172]	; (800e7a8 <tcp_slowtmr+0x664>)
 800e6fa:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e6fe:	492b      	ldr	r1, [pc, #172]	; (800e7ac <tcp_slowtmr+0x668>)
 800e700:	482b      	ldr	r0, [pc, #172]	; (800e7b0 <tcp_slowtmr+0x66c>)
 800e702:	f008 fd25 	bl	8017150 <iprintf>
    pcb_remove = 0;
 800e706:	2300      	movs	r3, #0
 800e708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e70c:	4b29      	ldr	r3, [pc, #164]	; (800e7b4 <tcp_slowtmr+0x670>)
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e712:	6a1b      	ldr	r3, [r3, #32]
 800e714:	1ad3      	subs	r3, r2, r3
 800e716:	2bf0      	cmp	r3, #240	; 0xf0
 800e718:	d904      	bls.n	800e724 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e71a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e71e:	3301      	adds	r3, #1
 800e720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d02f      	beq.n	800e78c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e72c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e72e:	f000 fbf9 	bl	800ef24 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e734:	2b00      	cmp	r3, #0
 800e736:	d010      	beq.n	800e75a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e738:	4b1f      	ldr	r3, [pc, #124]	; (800e7b8 <tcp_slowtmr+0x674>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e73e:	429a      	cmp	r2, r3
 800e740:	d106      	bne.n	800e750 <tcp_slowtmr+0x60c>
 800e742:	4b19      	ldr	r3, [pc, #100]	; (800e7a8 <tcp_slowtmr+0x664>)
 800e744:	f240 52af 	movw	r2, #1455	; 0x5af
 800e748:	491c      	ldr	r1, [pc, #112]	; (800e7bc <tcp_slowtmr+0x678>)
 800e74a:	4819      	ldr	r0, [pc, #100]	; (800e7b0 <tcp_slowtmr+0x66c>)
 800e74c:	f008 fd00 	bl	8017150 <iprintf>
        prev->next = pcb->next;
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	68da      	ldr	r2, [r3, #12]
 800e754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e756:	60da      	str	r2, [r3, #12]
 800e758:	e00f      	b.n	800e77a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e75a:	4b17      	ldr	r3, [pc, #92]	; (800e7b8 <tcp_slowtmr+0x674>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e760:	429a      	cmp	r2, r3
 800e762:	d006      	beq.n	800e772 <tcp_slowtmr+0x62e>
 800e764:	4b10      	ldr	r3, [pc, #64]	; (800e7a8 <tcp_slowtmr+0x664>)
 800e766:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e76a:	4915      	ldr	r1, [pc, #84]	; (800e7c0 <tcp_slowtmr+0x67c>)
 800e76c:	4810      	ldr	r0, [pc, #64]	; (800e7b0 <tcp_slowtmr+0x66c>)
 800e76e:	f008 fcef 	bl	8017150 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	4a10      	ldr	r2, [pc, #64]	; (800e7b8 <tcp_slowtmr+0x674>)
 800e778:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e784:	69f8      	ldr	r0, [r7, #28]
 800e786:	f7ff f805 	bl	800d794 <tcp_free>
 800e78a:	e004      	b.n	800e796 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d1a9      	bne.n	800e6f0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e79c:	bf00      	nop
 800e79e:	bf00      	nop
 800e7a0:	3730      	adds	r7, #48	; 0x30
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bdb0      	pop	{r4, r5, r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	080195c4 	.word	0x080195c4
 800e7ac:	08019a54 	.word	0x08019a54
 800e7b0:	08019608 	.word	0x08019608
 800e7b4:	2000d308 	.word	0x2000d308
 800e7b8:	2000d318 	.word	0x2000d318
 800e7bc:	08019a84 	.word	0x08019a84
 800e7c0:	08019aac 	.word	0x08019aac

0800e7c4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e7ca:	4b2d      	ldr	r3, [pc, #180]	; (800e880 <tcp_fasttmr+0xbc>)
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	b2da      	uxtb	r2, r3
 800e7d2:	4b2b      	ldr	r3, [pc, #172]	; (800e880 <tcp_fasttmr+0xbc>)
 800e7d4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e7d6:	4b2b      	ldr	r3, [pc, #172]	; (800e884 <tcp_fasttmr+0xc0>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e7dc:	e048      	b.n	800e870 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	7f9a      	ldrb	r2, [r3, #30]
 800e7e2:	4b27      	ldr	r3, [pc, #156]	; (800e880 <tcp_fasttmr+0xbc>)
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d03f      	beq.n	800e86a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e7ea:	4b25      	ldr	r3, [pc, #148]	; (800e880 <tcp_fasttmr+0xbc>)
 800e7ec:	781a      	ldrb	r2, [r3, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	8b5b      	ldrh	r3, [r3, #26]
 800e7f6:	f003 0301 	and.w	r3, r3, #1
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d010      	beq.n	800e820 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	8b5b      	ldrh	r3, [r3, #26]
 800e802:	f043 0302 	orr.w	r3, r3, #2
 800e806:	b29a      	uxth	r2, r3
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f003 fff5 	bl	80127fc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	8b5b      	ldrh	r3, [r3, #26]
 800e816:	f023 0303 	bic.w	r3, r3, #3
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	8b5b      	ldrh	r3, [r3, #26]
 800e824:	f003 0308 	and.w	r3, r3, #8
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d009      	beq.n	800e840 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	8b5b      	ldrh	r3, [r3, #26]
 800e830:	f023 0308 	bic.w	r3, r3, #8
 800e834:	b29a      	uxth	r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f7ff f93e 	bl	800dabc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d00a      	beq.n	800e864 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e84e:	4b0e      	ldr	r3, [pc, #56]	; (800e888 <tcp_fasttmr+0xc4>)
 800e850:	2200      	movs	r2, #0
 800e852:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 f819 	bl	800e88c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e85a:	4b0b      	ldr	r3, [pc, #44]	; (800e888 <tcp_fasttmr+0xc4>)
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d000      	beq.n	800e864 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e862:	e7b8      	b.n	800e7d6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	607b      	str	r3, [r7, #4]
 800e868:	e002      	b.n	800e870 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d1b3      	bne.n	800e7de <tcp_fasttmr+0x1a>
    }
  }
}
 800e876:	bf00      	nop
 800e878:	bf00      	nop
 800e87a:	3708      	adds	r7, #8
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	2000d31e 	.word	0x2000d31e
 800e884:	2000d314 	.word	0x2000d314
 800e888:	2000d31c 	.word	0x2000d31c

0800e88c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e88c:	b590      	push	{r4, r7, lr}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d109      	bne.n	800e8ae <tcp_process_refused_data+0x22>
 800e89a:	4b37      	ldr	r3, [pc, #220]	; (800e978 <tcp_process_refused_data+0xec>)
 800e89c:	f240 6209 	movw	r2, #1545	; 0x609
 800e8a0:	4936      	ldr	r1, [pc, #216]	; (800e97c <tcp_process_refused_data+0xf0>)
 800e8a2:	4837      	ldr	r0, [pc, #220]	; (800e980 <tcp_process_refused_data+0xf4>)
 800e8a4:	f008 fc54 	bl	8017150 <iprintf>
 800e8a8:	f06f 030f 	mvn.w	r3, #15
 800e8ac:	e060      	b.n	800e970 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8b2:	7b5b      	ldrb	r3, [r3, #13]
 800e8b4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8ba:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d00b      	beq.n	800e8e4 <tcp_process_refused_data+0x58>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6918      	ldr	r0, [r3, #16]
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	68ba      	ldr	r2, [r7, #8]
 800e8da:	6879      	ldr	r1, [r7, #4]
 800e8dc:	47a0      	blx	r4
 800e8de:	4603      	mov	r3, r0
 800e8e0:	73fb      	strb	r3, [r7, #15]
 800e8e2:	e007      	b.n	800e8f4 <tcp_process_refused_data+0x68>
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	68ba      	ldr	r2, [r7, #8]
 800e8e8:	6879      	ldr	r1, [r7, #4]
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	f000 f8a4 	bl	800ea38 <tcp_recv_null>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e8f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d12a      	bne.n	800e952 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e8fc:	7bbb      	ldrb	r3, [r7, #14]
 800e8fe:	f003 0320 	and.w	r3, r3, #32
 800e902:	2b00      	cmp	r3, #0
 800e904:	d033      	beq.n	800e96e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e90a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e90e:	d005      	beq.n	800e91c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e914:	3301      	adds	r3, #1
 800e916:	b29a      	uxth	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00b      	beq.n	800e93e <tcp_process_refused_data+0xb2>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6918      	ldr	r0, [r3, #16]
 800e930:	2300      	movs	r3, #0
 800e932:	2200      	movs	r2, #0
 800e934:	6879      	ldr	r1, [r7, #4]
 800e936:	47a0      	blx	r4
 800e938:	4603      	mov	r3, r0
 800e93a:	73fb      	strb	r3, [r7, #15]
 800e93c:	e001      	b.n	800e942 <tcp_process_refused_data+0xb6>
 800e93e:	2300      	movs	r3, #0
 800e940:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e946:	f113 0f0d 	cmn.w	r3, #13
 800e94a:	d110      	bne.n	800e96e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e94c:	f06f 030c 	mvn.w	r3, #12
 800e950:	e00e      	b.n	800e970 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e956:	f113 0f0d 	cmn.w	r3, #13
 800e95a:	d102      	bne.n	800e962 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e95c:	f06f 030c 	mvn.w	r3, #12
 800e960:	e006      	b.n	800e970 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68ba      	ldr	r2, [r7, #8]
 800e966:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e968:	f06f 0304 	mvn.w	r3, #4
 800e96c:	e000      	b.n	800e970 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3714      	adds	r7, #20
 800e974:	46bd      	mov	sp, r7
 800e976:	bd90      	pop	{r4, r7, pc}
 800e978:	080195c4 	.word	0x080195c4
 800e97c:	08019ad4 	.word	0x08019ad4
 800e980:	08019608 	.word	0x08019608

0800e984 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e98c:	e007      	b.n	800e99e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f000 f80a 	bl	800e9ae <tcp_seg_free>
    seg = next;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d1f4      	bne.n	800e98e <tcp_segs_free+0xa>
  }
}
 800e9a4:	bf00      	nop
 800e9a6:	bf00      	nop
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b082      	sub	sp, #8
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00c      	beq.n	800e9d6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d004      	beq.n	800e9ce <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7fe fc27 	bl	800d21c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e9ce:	6879      	ldr	r1, [r7, #4]
 800e9d0:	2003      	movs	r0, #3
 800e9d2:	f7fd fde3 	bl	800c59c <memp_free>
  }
}
 800e9d6:	bf00      	nop
 800e9d8:	3708      	adds	r7, #8
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
	...

0800e9e0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d106      	bne.n	800e9fc <tcp_seg_copy+0x1c>
 800e9ee:	4b0f      	ldr	r3, [pc, #60]	; (800ea2c <tcp_seg_copy+0x4c>)
 800e9f0:	f240 6282 	movw	r2, #1666	; 0x682
 800e9f4:	490e      	ldr	r1, [pc, #56]	; (800ea30 <tcp_seg_copy+0x50>)
 800e9f6:	480f      	ldr	r0, [pc, #60]	; (800ea34 <tcp_seg_copy+0x54>)
 800e9f8:	f008 fbaa 	bl	8017150 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e9fc:	2003      	movs	r0, #3
 800e9fe:	f7fd fd7b 	bl	800c4f8 <memp_malloc>
 800ea02:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d101      	bne.n	800ea0e <tcp_seg_copy+0x2e>
    return NULL;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	e00a      	b.n	800ea24 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ea0e:	2210      	movs	r2, #16
 800ea10:	6879      	ldr	r1, [r7, #4]
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	f008 faa6 	bl	8016f64 <memcpy>
  pbuf_ref(cseg->p);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7fe fca3 	bl	800d368 <pbuf_ref>
  return cseg;
 800ea22:	68fb      	ldr	r3, [r7, #12]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3710      	adds	r7, #16
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	080195c4 	.word	0x080195c4
 800ea30:	08019b18 	.word	0x08019b18
 800ea34:	08019608 	.word	0x08019608

0800ea38 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	607a      	str	r2, [r7, #4]
 800ea44:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d109      	bne.n	800ea60 <tcp_recv_null+0x28>
 800ea4c:	4b12      	ldr	r3, [pc, #72]	; (800ea98 <tcp_recv_null+0x60>)
 800ea4e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ea52:	4912      	ldr	r1, [pc, #72]	; (800ea9c <tcp_recv_null+0x64>)
 800ea54:	4812      	ldr	r0, [pc, #72]	; (800eaa0 <tcp_recv_null+0x68>)
 800ea56:	f008 fb7b 	bl	8017150 <iprintf>
 800ea5a:	f06f 030f 	mvn.w	r3, #15
 800ea5e:	e016      	b.n	800ea8e <tcp_recv_null+0x56>

  if (p != NULL) {
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d009      	beq.n	800ea7a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	891b      	ldrh	r3, [r3, #8]
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	68b8      	ldr	r0, [r7, #8]
 800ea6e:	f7ff fad3 	bl	800e018 <tcp_recved>
    pbuf_free(p);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f7fe fbd2 	bl	800d21c <pbuf_free>
 800ea78:	e008      	b.n	800ea8c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ea7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d104      	bne.n	800ea8c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ea82:	68b8      	ldr	r0, [r7, #8]
 800ea84:	f7ff f884 	bl	800db90 <tcp_close>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	e000      	b.n	800ea8e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ea8c:	2300      	movs	r3, #0
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	080195c4 	.word	0x080195c4
 800ea9c:	08019b34 	.word	0x08019b34
 800eaa0:	08019608 	.word	0x08019608

0800eaa4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b086      	sub	sp, #24
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	4603      	mov	r3, r0
 800eaac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800eaae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	db01      	blt.n	800eaba <tcp_kill_prio+0x16>
 800eab6:	79fb      	ldrb	r3, [r7, #7]
 800eab8:	e000      	b.n	800eabc <tcp_kill_prio+0x18>
 800eaba:	237f      	movs	r3, #127	; 0x7f
 800eabc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800eabe:	7afb      	ldrb	r3, [r7, #11]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d034      	beq.n	800eb2e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800eac4:	7afb      	ldrb	r3, [r7, #11]
 800eac6:	3b01      	subs	r3, #1
 800eac8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800eaca:	2300      	movs	r3, #0
 800eacc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eace:	2300      	movs	r3, #0
 800ead0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ead2:	4b19      	ldr	r3, [pc, #100]	; (800eb38 <tcp_kill_prio+0x94>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	617b      	str	r3, [r7, #20]
 800ead8:	e01f      	b.n	800eb1a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	7d5b      	ldrb	r3, [r3, #21]
 800eade:	7afa      	ldrb	r2, [r7, #11]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d80c      	bhi.n	800eafe <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800eae8:	7afa      	ldrb	r2, [r7, #11]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d112      	bne.n	800eb14 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eaee:	4b13      	ldr	r3, [pc, #76]	; (800eb3c <tcp_kill_prio+0x98>)
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	6a1b      	ldr	r3, [r3, #32]
 800eaf6:	1ad3      	subs	r3, r2, r3
 800eaf8:	68fa      	ldr	r2, [r7, #12]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d80a      	bhi.n	800eb14 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800eafe:	4b0f      	ldr	r3, [pc, #60]	; (800eb3c <tcp_kill_prio+0x98>)
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	6a1b      	ldr	r3, [r3, #32]
 800eb06:	1ad3      	subs	r3, r2, r3
 800eb08:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	7d5b      	ldrb	r3, [r3, #21]
 800eb12:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	617b      	str	r3, [r7, #20]
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d1dc      	bne.n	800eada <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d004      	beq.n	800eb30 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eb26:	6938      	ldr	r0, [r7, #16]
 800eb28:	f7ff f978 	bl	800de1c <tcp_abort>
 800eb2c:	e000      	b.n	800eb30 <tcp_kill_prio+0x8c>
    return;
 800eb2e:	bf00      	nop
  }
}
 800eb30:	3718      	adds	r7, #24
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	2000d314 	.word	0x2000d314
 800eb3c:	2000d308 	.word	0x2000d308

0800eb40 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b086      	sub	sp, #24
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	4603      	mov	r3, r0
 800eb48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800eb4a:	79fb      	ldrb	r3, [r7, #7]
 800eb4c:	2b08      	cmp	r3, #8
 800eb4e:	d009      	beq.n	800eb64 <tcp_kill_state+0x24>
 800eb50:	79fb      	ldrb	r3, [r7, #7]
 800eb52:	2b09      	cmp	r3, #9
 800eb54:	d006      	beq.n	800eb64 <tcp_kill_state+0x24>
 800eb56:	4b1a      	ldr	r3, [pc, #104]	; (800ebc0 <tcp_kill_state+0x80>)
 800eb58:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800eb5c:	4919      	ldr	r1, [pc, #100]	; (800ebc4 <tcp_kill_state+0x84>)
 800eb5e:	481a      	ldr	r0, [pc, #104]	; (800ebc8 <tcp_kill_state+0x88>)
 800eb60:	f008 faf6 	bl	8017150 <iprintf>

  inactivity = 0;
 800eb64:	2300      	movs	r3, #0
 800eb66:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb6c:	4b17      	ldr	r3, [pc, #92]	; (800ebcc <tcp_kill_state+0x8c>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	617b      	str	r3, [r7, #20]
 800eb72:	e017      	b.n	800eba4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	7d1b      	ldrb	r3, [r3, #20]
 800eb78:	79fa      	ldrb	r2, [r7, #7]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d10f      	bne.n	800eb9e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eb7e:	4b14      	ldr	r3, [pc, #80]	; (800ebd0 <tcp_kill_state+0x90>)
 800eb80:	681a      	ldr	r2, [r3, #0]
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	6a1b      	ldr	r3, [r3, #32]
 800eb86:	1ad3      	subs	r3, r2, r3
 800eb88:	68fa      	ldr	r2, [r7, #12]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d807      	bhi.n	800eb9e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eb8e:	4b10      	ldr	r3, [pc, #64]	; (800ebd0 <tcp_kill_state+0x90>)
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	6a1b      	ldr	r3, [r3, #32]
 800eb96:	1ad3      	subs	r3, r2, r3
 800eb98:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	68db      	ldr	r3, [r3, #12]
 800eba2:	617b      	str	r3, [r7, #20]
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1e4      	bne.n	800eb74 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d003      	beq.n	800ebb8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	6938      	ldr	r0, [r7, #16]
 800ebb4:	f7ff f874 	bl	800dca0 <tcp_abandon>
  }
}
 800ebb8:	bf00      	nop
 800ebba:	3718      	adds	r7, #24
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	080195c4 	.word	0x080195c4
 800ebc4:	08019b50 	.word	0x08019b50
 800ebc8:	08019608 	.word	0x08019608
 800ebcc:	2000d314 	.word	0x2000d314
 800ebd0:	2000d308 	.word	0x2000d308

0800ebd4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebe2:	4b12      	ldr	r3, [pc, #72]	; (800ec2c <tcp_kill_timewait+0x58>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	60fb      	str	r3, [r7, #12]
 800ebe8:	e012      	b.n	800ec10 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ebea:	4b11      	ldr	r3, [pc, #68]	; (800ec30 <tcp_kill_timewait+0x5c>)
 800ebec:	681a      	ldr	r2, [r3, #0]
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	6a1b      	ldr	r3, [r3, #32]
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d807      	bhi.n	800ec0a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ebfa:	4b0d      	ldr	r3, [pc, #52]	; (800ec30 <tcp_kill_timewait+0x5c>)
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	6a1b      	ldr	r3, [r3, #32]
 800ec02:	1ad3      	subs	r3, r2, r3
 800ec04:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	60fb      	str	r3, [r7, #12]
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d1e9      	bne.n	800ebea <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d002      	beq.n	800ec22 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec1c:	68b8      	ldr	r0, [r7, #8]
 800ec1e:	f7ff f8fd 	bl	800de1c <tcp_abort>
  }
}
 800ec22:	bf00      	nop
 800ec24:	3710      	adds	r7, #16
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	2000d318 	.word	0x2000d318
 800ec30:	2000d308 	.word	0x2000d308

0800ec34 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ec3a:	4b10      	ldr	r3, [pc, #64]	; (800ec7c <tcp_handle_closepend+0x48>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ec40:	e014      	b.n	800ec6c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	68db      	ldr	r3, [r3, #12]
 800ec46:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	8b5b      	ldrh	r3, [r3, #26]
 800ec4c:	f003 0308 	and.w	r3, r3, #8
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d009      	beq.n	800ec68 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	8b5b      	ldrh	r3, [r3, #26]
 800ec58:	f023 0308 	bic.w	r3, r3, #8
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f7fe ff2a 	bl	800dabc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1e7      	bne.n	800ec42 <tcp_handle_closepend+0xe>
  }
}
 800ec72:	bf00      	nop
 800ec74:	bf00      	nop
 800ec76:	3708      	adds	r7, #8
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	2000d314 	.word	0x2000d314

0800ec80 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	4603      	mov	r3, r0
 800ec88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec8a:	2001      	movs	r0, #1
 800ec8c:	f7fd fc34 	bl	800c4f8 <memp_malloc>
 800ec90:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d126      	bne.n	800ece6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ec98:	f7ff ffcc 	bl	800ec34 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ec9c:	f7ff ff9a 	bl	800ebd4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eca0:	2001      	movs	r0, #1
 800eca2:	f7fd fc29 	bl	800c4f8 <memp_malloc>
 800eca6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d11b      	bne.n	800ece6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ecae:	2009      	movs	r0, #9
 800ecb0:	f7ff ff46 	bl	800eb40 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ecb4:	2001      	movs	r0, #1
 800ecb6:	f7fd fc1f 	bl	800c4f8 <memp_malloc>
 800ecba:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d111      	bne.n	800ece6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ecc2:	2008      	movs	r0, #8
 800ecc4:	f7ff ff3c 	bl	800eb40 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ecc8:	2001      	movs	r0, #1
 800ecca:	f7fd fc15 	bl	800c4f8 <memp_malloc>
 800ecce:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d107      	bne.n	800ece6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ecd6:	79fb      	ldrb	r3, [r7, #7]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7ff fee3 	bl	800eaa4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ecde:	2001      	movs	r0, #1
 800ece0:	f7fd fc0a 	bl	800c4f8 <memp_malloc>
 800ece4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d03f      	beq.n	800ed6c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ecec:	229c      	movs	r2, #156	; 0x9c
 800ecee:	2100      	movs	r1, #0
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	f008 f945 	bl	8016f80 <memset>
    pcb->prio = prio;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	79fa      	ldrb	r2, [r7, #7]
 800ecfa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ed02:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ed0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	22ff      	movs	r2, #255	; 0xff
 800ed1a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ed22:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2206      	movs	r2, #6
 800ed28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2206      	movs	r2, #6
 800ed30:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed38:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2201      	movs	r2, #1
 800ed3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ed42:	4b0d      	ldr	r3, [pc, #52]	; (800ed78 <tcp_alloc+0xf8>)
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ed4a:	4b0c      	ldr	r3, [pc, #48]	; (800ed7c <tcp_alloc+0xfc>)
 800ed4c:	781a      	ldrb	r2, [r3, #0]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ed58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	4a08      	ldr	r2, [pc, #32]	; (800ed80 <tcp_alloc+0x100>)
 800ed60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	4a07      	ldr	r2, [pc, #28]	; (800ed84 <tcp_alloc+0x104>)
 800ed68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3710      	adds	r7, #16
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	2000d308 	.word	0x2000d308
 800ed7c:	2000d31e 	.word	0x2000d31e
 800ed80:	0800ea39 	.word	0x0800ea39
 800ed84:	006ddd00 	.word	0x006ddd00

0800ed88 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	4603      	mov	r3, r0
 800ed90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ed92:	2040      	movs	r0, #64	; 0x40
 800ed94:	f7ff ff74 	bl	800ec80 <tcp_alloc>
 800ed98:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d002      	beq.n	800edba <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	683a      	ldr	r2, [r7, #0]
 800edb8:	611a      	str	r2, [r3, #16]
  }
}
 800edba:	bf00      	nop
 800edbc:	370c      	adds	r7, #12
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr
	...

0800edc8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d00e      	beq.n	800edf6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	7d1b      	ldrb	r3, [r3, #20]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d106      	bne.n	800edee <tcp_recv+0x26>
 800ede0:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <tcp_recv+0x38>)
 800ede2:	f240 72df 	movw	r2, #2015	; 0x7df
 800ede6:	4907      	ldr	r1, [pc, #28]	; (800ee04 <tcp_recv+0x3c>)
 800ede8:	4807      	ldr	r0, [pc, #28]	; (800ee08 <tcp_recv+0x40>)
 800edea:	f008 f9b1 	bl	8017150 <iprintf>
    pcb->recv = recv;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	683a      	ldr	r2, [r7, #0]
 800edf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800edf6:	bf00      	nop
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	080195c4 	.word	0x080195c4
 800ee04:	08019b60 	.word	0x08019b60
 800ee08:	08019608 	.word	0x08019608

0800ee0c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d00e      	beq.n	800ee3a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	7d1b      	ldrb	r3, [r3, #20]
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d106      	bne.n	800ee32 <tcp_sent+0x26>
 800ee24:	4b07      	ldr	r3, [pc, #28]	; (800ee44 <tcp_sent+0x38>)
 800ee26:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ee2a:	4907      	ldr	r1, [pc, #28]	; (800ee48 <tcp_sent+0x3c>)
 800ee2c:	4807      	ldr	r0, [pc, #28]	; (800ee4c <tcp_sent+0x40>)
 800ee2e:	f008 f98f 	bl	8017150 <iprintf>
    pcb->sent = sent;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	683a      	ldr	r2, [r7, #0]
 800ee36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ee3a:	bf00      	nop
 800ee3c:	3708      	adds	r7, #8
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	080195c4 	.word	0x080195c4
 800ee48:	08019b88 	.word	0x08019b88
 800ee4c:	08019608 	.word	0x08019608

0800ee50 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d00e      	beq.n	800ee7e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	7d1b      	ldrb	r3, [r3, #20]
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d106      	bne.n	800ee76 <tcp_err+0x26>
 800ee68:	4b07      	ldr	r3, [pc, #28]	; (800ee88 <tcp_err+0x38>)
 800ee6a:	f640 020d 	movw	r2, #2061	; 0x80d
 800ee6e:	4907      	ldr	r1, [pc, #28]	; (800ee8c <tcp_err+0x3c>)
 800ee70:	4807      	ldr	r0, [pc, #28]	; (800ee90 <tcp_err+0x40>)
 800ee72:	f008 f96d 	bl	8017150 <iprintf>
    pcb->errf = err;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	683a      	ldr	r2, [r7, #0]
 800ee7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ee7e:	bf00      	nop
 800ee80:	3708      	adds	r7, #8
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	080195c4 	.word	0x080195c4
 800ee8c:	08019bb0 	.word	0x08019bb0
 800ee90:	08019608 	.word	0x08019608

0800ee94 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b085      	sub	sp, #20
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d008      	beq.n	800eeb6 <tcp_accept+0x22>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	7d1b      	ldrb	r3, [r3, #20]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d104      	bne.n	800eeb6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	683a      	ldr	r2, [r7, #0]
 800eeb4:	619a      	str	r2, [r3, #24]
  }
}
 800eeb6:	bf00      	nop
 800eeb8:	3714      	adds	r7, #20
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr
	...

0800eec4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	4613      	mov	r3, r2
 800eed0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d107      	bne.n	800eee8 <tcp_poll+0x24>
 800eed8:	4b0e      	ldr	r3, [pc, #56]	; (800ef14 <tcp_poll+0x50>)
 800eeda:	f640 023d 	movw	r2, #2109	; 0x83d
 800eede:	490e      	ldr	r1, [pc, #56]	; (800ef18 <tcp_poll+0x54>)
 800eee0:	480e      	ldr	r0, [pc, #56]	; (800ef1c <tcp_poll+0x58>)
 800eee2:	f008 f935 	bl	8017150 <iprintf>
 800eee6:	e011      	b.n	800ef0c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	7d1b      	ldrb	r3, [r3, #20]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d106      	bne.n	800eefe <tcp_poll+0x3a>
 800eef0:	4b08      	ldr	r3, [pc, #32]	; (800ef14 <tcp_poll+0x50>)
 800eef2:	f640 023e 	movw	r2, #2110	; 0x83e
 800eef6:	490a      	ldr	r1, [pc, #40]	; (800ef20 <tcp_poll+0x5c>)
 800eef8:	4808      	ldr	r0, [pc, #32]	; (800ef1c <tcp_poll+0x58>)
 800eefa:	f008 f929 	bl	8017150 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	68ba      	ldr	r2, [r7, #8]
 800ef02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	79fa      	ldrb	r2, [r7, #7]
 800ef0a:	775a      	strb	r2, [r3, #29]
}
 800ef0c:	3710      	adds	r7, #16
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	080195c4 	.word	0x080195c4
 800ef18:	08019bd8 	.word	0x08019bd8
 800ef1c:	08019608 	.word	0x08019608
 800ef20:	08019bf0 	.word	0x08019bf0

0800ef24 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d107      	bne.n	800ef42 <tcp_pcb_purge+0x1e>
 800ef32:	4b21      	ldr	r3, [pc, #132]	; (800efb8 <tcp_pcb_purge+0x94>)
 800ef34:	f640 0251 	movw	r2, #2129	; 0x851
 800ef38:	4920      	ldr	r1, [pc, #128]	; (800efbc <tcp_pcb_purge+0x98>)
 800ef3a:	4821      	ldr	r0, [pc, #132]	; (800efc0 <tcp_pcb_purge+0x9c>)
 800ef3c:	f008 f908 	bl	8017150 <iprintf>
 800ef40:	e037      	b.n	800efb2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	7d1b      	ldrb	r3, [r3, #20]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d033      	beq.n	800efb2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ef4e:	2b0a      	cmp	r3, #10
 800ef50:	d02f      	beq.n	800efb2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d02b      	beq.n	800efb2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d007      	beq.n	800ef72 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fe f958 	bl	800d21c <pbuf_free>
      pcb->refused_data = NULL;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d002      	beq.n	800ef80 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 f986 	bl	800f28c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef86:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7ff fcf9 	bl	800e984 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7ff fcf4 	bl	800e984 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	66da      	str	r2, [r3, #108]	; 0x6c
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800efb2:	3708      	adds	r7, #8
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	080195c4 	.word	0x080195c4
 800efbc:	08019c10 	.word	0x08019c10
 800efc0:	08019608 	.word	0x08019608

0800efc4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b084      	sub	sp, #16
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d106      	bne.n	800efe2 <tcp_pcb_remove+0x1e>
 800efd4:	4b3e      	ldr	r3, [pc, #248]	; (800f0d0 <tcp_pcb_remove+0x10c>)
 800efd6:	f640 0283 	movw	r2, #2179	; 0x883
 800efda:	493e      	ldr	r1, [pc, #248]	; (800f0d4 <tcp_pcb_remove+0x110>)
 800efdc:	483e      	ldr	r0, [pc, #248]	; (800f0d8 <tcp_pcb_remove+0x114>)
 800efde:	f008 f8b7 	bl	8017150 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d106      	bne.n	800eff6 <tcp_pcb_remove+0x32>
 800efe8:	4b39      	ldr	r3, [pc, #228]	; (800f0d0 <tcp_pcb_remove+0x10c>)
 800efea:	f640 0284 	movw	r2, #2180	; 0x884
 800efee:	493b      	ldr	r1, [pc, #236]	; (800f0dc <tcp_pcb_remove+0x118>)
 800eff0:	4839      	ldr	r0, [pc, #228]	; (800f0d8 <tcp_pcb_remove+0x114>)
 800eff2:	f008 f8ad 	bl	8017150 <iprintf>

  TCP_RMV(pcblist, pcb);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	683a      	ldr	r2, [r7, #0]
 800effc:	429a      	cmp	r2, r3
 800effe:	d105      	bne.n	800f00c <tcp_pcb_remove+0x48>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	68da      	ldr	r2, [r3, #12]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	601a      	str	r2, [r3, #0]
 800f00a:	e013      	b.n	800f034 <tcp_pcb_remove+0x70>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	60fb      	str	r3, [r7, #12]
 800f012:	e00c      	b.n	800f02e <tcp_pcb_remove+0x6a>
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	683a      	ldr	r2, [r7, #0]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d104      	bne.n	800f028 <tcp_pcb_remove+0x64>
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	68da      	ldr	r2, [r3, #12]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	60da      	str	r2, [r3, #12]
 800f026:	e005      	b.n	800f034 <tcp_pcb_remove+0x70>
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	68db      	ldr	r3, [r3, #12]
 800f02c:	60fb      	str	r3, [r7, #12]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d1ef      	bne.n	800f014 <tcp_pcb_remove+0x50>
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	2200      	movs	r2, #0
 800f038:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f03a:	6838      	ldr	r0, [r7, #0]
 800f03c:	f7ff ff72 	bl	800ef24 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	7d1b      	ldrb	r3, [r3, #20]
 800f044:	2b0a      	cmp	r3, #10
 800f046:	d013      	beq.n	800f070 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d00f      	beq.n	800f070 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	8b5b      	ldrh	r3, [r3, #26]
 800f054:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d009      	beq.n	800f070 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	8b5b      	ldrh	r3, [r3, #26]
 800f060:	f043 0302 	orr.w	r3, r3, #2
 800f064:	b29a      	uxth	r2, r3
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f06a:	6838      	ldr	r0, [r7, #0]
 800f06c:	f003 fbc6 	bl	80127fc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	7d1b      	ldrb	r3, [r3, #20]
 800f074:	2b01      	cmp	r3, #1
 800f076:	d020      	beq.n	800f0ba <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d006      	beq.n	800f08e <tcp_pcb_remove+0xca>
 800f080:	4b13      	ldr	r3, [pc, #76]	; (800f0d0 <tcp_pcb_remove+0x10c>)
 800f082:	f640 0293 	movw	r2, #2195	; 0x893
 800f086:	4916      	ldr	r1, [pc, #88]	; (800f0e0 <tcp_pcb_remove+0x11c>)
 800f088:	4813      	ldr	r0, [pc, #76]	; (800f0d8 <tcp_pcb_remove+0x114>)
 800f08a:	f008 f861 	bl	8017150 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f092:	2b00      	cmp	r3, #0
 800f094:	d006      	beq.n	800f0a4 <tcp_pcb_remove+0xe0>
 800f096:	4b0e      	ldr	r3, [pc, #56]	; (800f0d0 <tcp_pcb_remove+0x10c>)
 800f098:	f640 0294 	movw	r2, #2196	; 0x894
 800f09c:	4911      	ldr	r1, [pc, #68]	; (800f0e4 <tcp_pcb_remove+0x120>)
 800f09e:	480e      	ldr	r0, [pc, #56]	; (800f0d8 <tcp_pcb_remove+0x114>)
 800f0a0:	f008 f856 	bl	8017150 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d006      	beq.n	800f0ba <tcp_pcb_remove+0xf6>
 800f0ac:	4b08      	ldr	r3, [pc, #32]	; (800f0d0 <tcp_pcb_remove+0x10c>)
 800f0ae:	f640 0296 	movw	r2, #2198	; 0x896
 800f0b2:	490d      	ldr	r1, [pc, #52]	; (800f0e8 <tcp_pcb_remove+0x124>)
 800f0b4:	4808      	ldr	r0, [pc, #32]	; (800f0d8 <tcp_pcb_remove+0x114>)
 800f0b6:	f008 f84b 	bl	8017150 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f0c6:	bf00      	nop
 800f0c8:	3710      	adds	r7, #16
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	080195c4 	.word	0x080195c4
 800f0d4:	08019c2c 	.word	0x08019c2c
 800f0d8:	08019608 	.word	0x08019608
 800f0dc:	08019c48 	.word	0x08019c48
 800f0e0:	08019c68 	.word	0x08019c68
 800f0e4:	08019c80 	.word	0x08019c80
 800f0e8:	08019c9c 	.word	0x08019c9c

0800f0ec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d106      	bne.n	800f108 <tcp_next_iss+0x1c>
 800f0fa:	4b0a      	ldr	r3, [pc, #40]	; (800f124 <tcp_next_iss+0x38>)
 800f0fc:	f640 02af 	movw	r2, #2223	; 0x8af
 800f100:	4909      	ldr	r1, [pc, #36]	; (800f128 <tcp_next_iss+0x3c>)
 800f102:	480a      	ldr	r0, [pc, #40]	; (800f12c <tcp_next_iss+0x40>)
 800f104:	f008 f824 	bl	8017150 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f108:	4b09      	ldr	r3, [pc, #36]	; (800f130 <tcp_next_iss+0x44>)
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	4b09      	ldr	r3, [pc, #36]	; (800f134 <tcp_next_iss+0x48>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4413      	add	r3, r2
 800f112:	4a07      	ldr	r2, [pc, #28]	; (800f130 <tcp_next_iss+0x44>)
 800f114:	6013      	str	r3, [r2, #0]
  return iss;
 800f116:	4b06      	ldr	r3, [pc, #24]	; (800f130 <tcp_next_iss+0x44>)
 800f118:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3708      	adds	r7, #8
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}
 800f122:	bf00      	nop
 800f124:	080195c4 	.word	0x080195c4
 800f128:	08019cb4 	.word	0x08019cb4
 800f12c:	08019608 	.word	0x08019608
 800f130:	20000018 	.word	0x20000018
 800f134:	2000d308 	.word	0x2000d308

0800f138 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b086      	sub	sp, #24
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	4603      	mov	r3, r0
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
 800f144:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d106      	bne.n	800f15a <tcp_eff_send_mss_netif+0x22>
 800f14c:	4b14      	ldr	r3, [pc, #80]	; (800f1a0 <tcp_eff_send_mss_netif+0x68>)
 800f14e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f152:	4914      	ldr	r1, [pc, #80]	; (800f1a4 <tcp_eff_send_mss_netif+0x6c>)
 800f154:	4814      	ldr	r0, [pc, #80]	; (800f1a8 <tcp_eff_send_mss_netif+0x70>)
 800f156:	f007 fffb 	bl	8017150 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d101      	bne.n	800f164 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f160:	89fb      	ldrh	r3, [r7, #14]
 800f162:	e019      	b.n	800f198 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f168:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f16a:	8afb      	ldrh	r3, [r7, #22]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d012      	beq.n	800f196 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f170:	2328      	movs	r3, #40	; 0x28
 800f172:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f174:	8afa      	ldrh	r2, [r7, #22]
 800f176:	8abb      	ldrh	r3, [r7, #20]
 800f178:	429a      	cmp	r2, r3
 800f17a:	d904      	bls.n	800f186 <tcp_eff_send_mss_netif+0x4e>
 800f17c:	8afa      	ldrh	r2, [r7, #22]
 800f17e:	8abb      	ldrh	r3, [r7, #20]
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	b29b      	uxth	r3, r3
 800f184:	e000      	b.n	800f188 <tcp_eff_send_mss_netif+0x50>
 800f186:	2300      	movs	r3, #0
 800f188:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f18a:	8a7a      	ldrh	r2, [r7, #18]
 800f18c:	89fb      	ldrh	r3, [r7, #14]
 800f18e:	4293      	cmp	r3, r2
 800f190:	bf28      	it	cs
 800f192:	4613      	movcs	r3, r2
 800f194:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f196:	89fb      	ldrh	r3, [r7, #14]
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3718      	adds	r7, #24
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	080195c4 	.word	0x080195c4
 800f1a4:	08019cd0 	.word	0x08019cd0
 800f1a8:	08019608 	.word	0x08019608

0800f1ac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d119      	bne.n	800f1f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f1c0:	4b10      	ldr	r3, [pc, #64]	; (800f204 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f1c2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f1c6:	4910      	ldr	r1, [pc, #64]	; (800f208 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f1c8:	4810      	ldr	r0, [pc, #64]	; (800f20c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f1ca:	f007 ffc1 	bl	8017150 <iprintf>

  while (pcb != NULL) {
 800f1ce:	e011      	b.n	800f1f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681a      	ldr	r2, [r3, #0]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d108      	bne.n	800f1ee <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f1e2:	68f8      	ldr	r0, [r7, #12]
 800f1e4:	f7fe fe1a 	bl	800de1c <tcp_abort>
      pcb = next;
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	60fb      	str	r3, [r7, #12]
 800f1ec:	e002      	b.n	800f1f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d1ea      	bne.n	800f1d0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f1fa:	bf00      	nop
 800f1fc:	bf00      	nop
 800f1fe:	3710      	adds	r7, #16
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}
 800f204:	080195c4 	.word	0x080195c4
 800f208:	08019cf8 	.word	0x08019cf8
 800f20c:	08019608 	.word	0x08019608

0800f210 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d02a      	beq.n	800f276 <tcp_netif_ip_addr_changed+0x66>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d026      	beq.n	800f276 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f228:	4b15      	ldr	r3, [pc, #84]	; (800f280 <tcp_netif_ip_addr_changed+0x70>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4619      	mov	r1, r3
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f7ff ffbc 	bl	800f1ac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f234:	4b13      	ldr	r3, [pc, #76]	; (800f284 <tcp_netif_ip_addr_changed+0x74>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4619      	mov	r1, r3
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f7ff ffb6 	bl	800f1ac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d017      	beq.n	800f276 <tcp_netif_ip_addr_changed+0x66>
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d013      	beq.n	800f276 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f24e:	4b0e      	ldr	r3, [pc, #56]	; (800f288 <tcp_netif_ip_addr_changed+0x78>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	60fb      	str	r3, [r7, #12]
 800f254:	e00c      	b.n	800f270 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	429a      	cmp	r2, r3
 800f260:	d103      	bne.n	800f26a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	68db      	ldr	r3, [r3, #12]
 800f26e:	60fb      	str	r3, [r7, #12]
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d1ef      	bne.n	800f256 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f276:	bf00      	nop
 800f278:	3710      	adds	r7, #16
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	2000d314 	.word	0x2000d314
 800f284:	2000d30c 	.word	0x2000d30c
 800f288:	2000d310 	.word	0x2000d310

0800f28c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d007      	beq.n	800f2ac <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7ff fb6f 	bl	800e984 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f2ac:	bf00      	nop
 800f2ae:	3708      	adds	r7, #8
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f2b4:	b590      	push	{r4, r7, lr}
 800f2b6:	b08d      	sub	sp, #52	; 0x34
 800f2b8:	af04      	add	r7, sp, #16
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d105      	bne.n	800f2d0 <tcp_input+0x1c>
 800f2c4:	4b9b      	ldr	r3, [pc, #620]	; (800f534 <tcp_input+0x280>)
 800f2c6:	2283      	movs	r2, #131	; 0x83
 800f2c8:	499b      	ldr	r1, [pc, #620]	; (800f538 <tcp_input+0x284>)
 800f2ca:	489c      	ldr	r0, [pc, #624]	; (800f53c <tcp_input+0x288>)
 800f2cc:	f007 ff40 	bl	8017150 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	4a9a      	ldr	r2, [pc, #616]	; (800f540 <tcp_input+0x28c>)
 800f2d6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	895b      	ldrh	r3, [r3, #10]
 800f2dc:	2b13      	cmp	r3, #19
 800f2de:	f240 83d1 	bls.w	800fa84 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f2e2:	4b98      	ldr	r3, [pc, #608]	; (800f544 <tcp_input+0x290>)
 800f2e4:	695b      	ldr	r3, [r3, #20]
 800f2e6:	4a97      	ldr	r2, [pc, #604]	; (800f544 <tcp_input+0x290>)
 800f2e8:	6812      	ldr	r2, [r2, #0]
 800f2ea:	4611      	mov	r1, r2
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f006 fbcf 	bl	8015a90 <ip4_addr_isbroadcast_u32>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	f040 83c7 	bne.w	800fa88 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f2fa:	4b92      	ldr	r3, [pc, #584]	; (800f544 <tcp_input+0x290>)
 800f2fc:	695b      	ldr	r3, [r3, #20]
 800f2fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f302:	2be0      	cmp	r3, #224	; 0xe0
 800f304:	f000 83c0 	beq.w	800fa88 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f308:	4b8d      	ldr	r3, [pc, #564]	; (800f540 <tcp_input+0x28c>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	899b      	ldrh	r3, [r3, #12]
 800f30e:	b29b      	uxth	r3, r3
 800f310:	4618      	mov	r0, r3
 800f312:	f7fc fc3b 	bl	800bb8c <lwip_htons>
 800f316:	4603      	mov	r3, r0
 800f318:	0b1b      	lsrs	r3, r3, #12
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	009b      	lsls	r3, r3, #2
 800f320:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f322:	7cbb      	ldrb	r3, [r7, #18]
 800f324:	2b13      	cmp	r3, #19
 800f326:	f240 83b1 	bls.w	800fa8c <tcp_input+0x7d8>
 800f32a:	7cbb      	ldrb	r3, [r7, #18]
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	891b      	ldrh	r3, [r3, #8]
 800f332:	429a      	cmp	r2, r3
 800f334:	f200 83aa 	bhi.w	800fa8c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f338:	7cbb      	ldrb	r3, [r7, #18]
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	3b14      	subs	r3, #20
 800f33e:	b29a      	uxth	r2, r3
 800f340:	4b81      	ldr	r3, [pc, #516]	; (800f548 <tcp_input+0x294>)
 800f342:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f344:	4b81      	ldr	r3, [pc, #516]	; (800f54c <tcp_input+0x298>)
 800f346:	2200      	movs	r2, #0
 800f348:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	895a      	ldrh	r2, [r3, #10]
 800f34e:	7cbb      	ldrb	r3, [r7, #18]
 800f350:	b29b      	uxth	r3, r3
 800f352:	429a      	cmp	r2, r3
 800f354:	d309      	bcc.n	800f36a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f356:	4b7c      	ldr	r3, [pc, #496]	; (800f548 <tcp_input+0x294>)
 800f358:	881a      	ldrh	r2, [r3, #0]
 800f35a:	4b7d      	ldr	r3, [pc, #500]	; (800f550 <tcp_input+0x29c>)
 800f35c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f35e:	7cbb      	ldrb	r3, [r7, #18]
 800f360:	4619      	mov	r1, r3
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f7fd fed4 	bl	800d110 <pbuf_remove_header>
 800f368:	e04e      	b.n	800f408 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d105      	bne.n	800f37e <tcp_input+0xca>
 800f372:	4b70      	ldr	r3, [pc, #448]	; (800f534 <tcp_input+0x280>)
 800f374:	22c2      	movs	r2, #194	; 0xc2
 800f376:	4977      	ldr	r1, [pc, #476]	; (800f554 <tcp_input+0x2a0>)
 800f378:	4870      	ldr	r0, [pc, #448]	; (800f53c <tcp_input+0x288>)
 800f37a:	f007 fee9 	bl	8017150 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f37e:	2114      	movs	r1, #20
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f7fd fec5 	bl	800d110 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	895a      	ldrh	r2, [r3, #10]
 800f38a:	4b71      	ldr	r3, [pc, #452]	; (800f550 <tcp_input+0x29c>)
 800f38c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f38e:	4b6e      	ldr	r3, [pc, #440]	; (800f548 <tcp_input+0x294>)
 800f390:	881a      	ldrh	r2, [r3, #0]
 800f392:	4b6f      	ldr	r3, [pc, #444]	; (800f550 <tcp_input+0x29c>)
 800f394:	881b      	ldrh	r3, [r3, #0]
 800f396:	1ad3      	subs	r3, r2, r3
 800f398:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f39a:	4b6d      	ldr	r3, [pc, #436]	; (800f550 <tcp_input+0x29c>)
 800f39c:	881b      	ldrh	r3, [r3, #0]
 800f39e:	4619      	mov	r1, r3
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f7fd feb5 	bl	800d110 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	895b      	ldrh	r3, [r3, #10]
 800f3ac:	8a3a      	ldrh	r2, [r7, #16]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	f200 836e 	bhi.w	800fa90 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	4a64      	ldr	r2, [pc, #400]	; (800f54c <tcp_input+0x298>)
 800f3bc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	8a3a      	ldrh	r2, [r7, #16]
 800f3c4:	4611      	mov	r1, r2
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fd fea2 	bl	800d110 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	891a      	ldrh	r2, [r3, #8]
 800f3d0:	8a3b      	ldrh	r3, [r7, #16]
 800f3d2:	1ad3      	subs	r3, r2, r3
 800f3d4:	b29a      	uxth	r2, r3
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	895b      	ldrh	r3, [r3, #10]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d005      	beq.n	800f3ee <tcp_input+0x13a>
 800f3e2:	4b54      	ldr	r3, [pc, #336]	; (800f534 <tcp_input+0x280>)
 800f3e4:	22df      	movs	r2, #223	; 0xdf
 800f3e6:	495c      	ldr	r1, [pc, #368]	; (800f558 <tcp_input+0x2a4>)
 800f3e8:	4854      	ldr	r0, [pc, #336]	; (800f53c <tcp_input+0x288>)
 800f3ea:	f007 feb1 	bl	8017150 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	891a      	ldrh	r2, [r3, #8]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	891b      	ldrh	r3, [r3, #8]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d005      	beq.n	800f408 <tcp_input+0x154>
 800f3fc:	4b4d      	ldr	r3, [pc, #308]	; (800f534 <tcp_input+0x280>)
 800f3fe:	22e0      	movs	r2, #224	; 0xe0
 800f400:	4956      	ldr	r1, [pc, #344]	; (800f55c <tcp_input+0x2a8>)
 800f402:	484e      	ldr	r0, [pc, #312]	; (800f53c <tcp_input+0x288>)
 800f404:	f007 fea4 	bl	8017150 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f408:	4b4d      	ldr	r3, [pc, #308]	; (800f540 <tcp_input+0x28c>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	881b      	ldrh	r3, [r3, #0]
 800f40e:	b29b      	uxth	r3, r3
 800f410:	4a4b      	ldr	r2, [pc, #300]	; (800f540 <tcp_input+0x28c>)
 800f412:	6814      	ldr	r4, [r2, #0]
 800f414:	4618      	mov	r0, r3
 800f416:	f7fc fbb9 	bl	800bb8c <lwip_htons>
 800f41a:	4603      	mov	r3, r0
 800f41c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f41e:	4b48      	ldr	r3, [pc, #288]	; (800f540 <tcp_input+0x28c>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	885b      	ldrh	r3, [r3, #2]
 800f424:	b29b      	uxth	r3, r3
 800f426:	4a46      	ldr	r2, [pc, #280]	; (800f540 <tcp_input+0x28c>)
 800f428:	6814      	ldr	r4, [r2, #0]
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7fc fbae 	bl	800bb8c <lwip_htons>
 800f430:	4603      	mov	r3, r0
 800f432:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f434:	4b42      	ldr	r3, [pc, #264]	; (800f540 <tcp_input+0x28c>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	4a41      	ldr	r2, [pc, #260]	; (800f540 <tcp_input+0x28c>)
 800f43c:	6814      	ldr	r4, [r2, #0]
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fc fbb9 	bl	800bbb6 <lwip_htonl>
 800f444:	4603      	mov	r3, r0
 800f446:	6063      	str	r3, [r4, #4]
 800f448:	6863      	ldr	r3, [r4, #4]
 800f44a:	4a45      	ldr	r2, [pc, #276]	; (800f560 <tcp_input+0x2ac>)
 800f44c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f44e:	4b3c      	ldr	r3, [pc, #240]	; (800f540 <tcp_input+0x28c>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	4a3a      	ldr	r2, [pc, #232]	; (800f540 <tcp_input+0x28c>)
 800f456:	6814      	ldr	r4, [r2, #0]
 800f458:	4618      	mov	r0, r3
 800f45a:	f7fc fbac 	bl	800bbb6 <lwip_htonl>
 800f45e:	4603      	mov	r3, r0
 800f460:	60a3      	str	r3, [r4, #8]
 800f462:	68a3      	ldr	r3, [r4, #8]
 800f464:	4a3f      	ldr	r2, [pc, #252]	; (800f564 <tcp_input+0x2b0>)
 800f466:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f468:	4b35      	ldr	r3, [pc, #212]	; (800f540 <tcp_input+0x28c>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	89db      	ldrh	r3, [r3, #14]
 800f46e:	b29b      	uxth	r3, r3
 800f470:	4a33      	ldr	r2, [pc, #204]	; (800f540 <tcp_input+0x28c>)
 800f472:	6814      	ldr	r4, [r2, #0]
 800f474:	4618      	mov	r0, r3
 800f476:	f7fc fb89 	bl	800bb8c <lwip_htons>
 800f47a:	4603      	mov	r3, r0
 800f47c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f47e:	4b30      	ldr	r3, [pc, #192]	; (800f540 <tcp_input+0x28c>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	899b      	ldrh	r3, [r3, #12]
 800f484:	b29b      	uxth	r3, r3
 800f486:	4618      	mov	r0, r3
 800f488:	f7fc fb80 	bl	800bb8c <lwip_htons>
 800f48c:	4603      	mov	r3, r0
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f494:	b2da      	uxtb	r2, r3
 800f496:	4b34      	ldr	r3, [pc, #208]	; (800f568 <tcp_input+0x2b4>)
 800f498:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	891a      	ldrh	r2, [r3, #8]
 800f49e:	4b33      	ldr	r3, [pc, #204]	; (800f56c <tcp_input+0x2b8>)
 800f4a0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f4a2:	4b31      	ldr	r3, [pc, #196]	; (800f568 <tcp_input+0x2b4>)
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	f003 0303 	and.w	r3, r3, #3
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00c      	beq.n	800f4c8 <tcp_input+0x214>
    tcplen++;
 800f4ae:	4b2f      	ldr	r3, [pc, #188]	; (800f56c <tcp_input+0x2b8>)
 800f4b0:	881b      	ldrh	r3, [r3, #0]
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	b29a      	uxth	r2, r3
 800f4b6:	4b2d      	ldr	r3, [pc, #180]	; (800f56c <tcp_input+0x2b8>)
 800f4b8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	891a      	ldrh	r2, [r3, #8]
 800f4be:	4b2b      	ldr	r3, [pc, #172]	; (800f56c <tcp_input+0x2b8>)
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	f200 82e6 	bhi.w	800fa94 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4cc:	4b28      	ldr	r3, [pc, #160]	; (800f570 <tcp_input+0x2bc>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	61fb      	str	r3, [r7, #28]
 800f4d2:	e09d      	b.n	800f610 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	7d1b      	ldrb	r3, [r3, #20]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d105      	bne.n	800f4e8 <tcp_input+0x234>
 800f4dc:	4b15      	ldr	r3, [pc, #84]	; (800f534 <tcp_input+0x280>)
 800f4de:	22fb      	movs	r2, #251	; 0xfb
 800f4e0:	4924      	ldr	r1, [pc, #144]	; (800f574 <tcp_input+0x2c0>)
 800f4e2:	4816      	ldr	r0, [pc, #88]	; (800f53c <tcp_input+0x288>)
 800f4e4:	f007 fe34 	bl	8017150 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f4e8:	69fb      	ldr	r3, [r7, #28]
 800f4ea:	7d1b      	ldrb	r3, [r3, #20]
 800f4ec:	2b0a      	cmp	r3, #10
 800f4ee:	d105      	bne.n	800f4fc <tcp_input+0x248>
 800f4f0:	4b10      	ldr	r3, [pc, #64]	; (800f534 <tcp_input+0x280>)
 800f4f2:	22fc      	movs	r2, #252	; 0xfc
 800f4f4:	4920      	ldr	r1, [pc, #128]	; (800f578 <tcp_input+0x2c4>)
 800f4f6:	4811      	ldr	r0, [pc, #68]	; (800f53c <tcp_input+0x288>)
 800f4f8:	f007 fe2a 	bl	8017150 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	7d1b      	ldrb	r3, [r3, #20]
 800f500:	2b01      	cmp	r3, #1
 800f502:	d105      	bne.n	800f510 <tcp_input+0x25c>
 800f504:	4b0b      	ldr	r3, [pc, #44]	; (800f534 <tcp_input+0x280>)
 800f506:	22fd      	movs	r2, #253	; 0xfd
 800f508:	491c      	ldr	r1, [pc, #112]	; (800f57c <tcp_input+0x2c8>)
 800f50a:	480c      	ldr	r0, [pc, #48]	; (800f53c <tcp_input+0x288>)
 800f50c:	f007 fe20 	bl	8017150 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	7a1b      	ldrb	r3, [r3, #8]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d033      	beq.n	800f580 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f518:	69fb      	ldr	r3, [r7, #28]
 800f51a:	7a1a      	ldrb	r2, [r3, #8]
 800f51c:	4b09      	ldr	r3, [pc, #36]	; (800f544 <tcp_input+0x290>)
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f524:	3301      	adds	r3, #1
 800f526:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f528:	429a      	cmp	r2, r3
 800f52a:	d029      	beq.n	800f580 <tcp_input+0x2cc>
      prev = pcb;
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	61bb      	str	r3, [r7, #24]
      continue;
 800f530:	e06b      	b.n	800f60a <tcp_input+0x356>
 800f532:	bf00      	nop
 800f534:	08019d2c 	.word	0x08019d2c
 800f538:	08019d60 	.word	0x08019d60
 800f53c:	08019d78 	.word	0x08019d78
 800f540:	2000d330 	.word	0x2000d330
 800f544:	20009bb4 	.word	0x20009bb4
 800f548:	2000d334 	.word	0x2000d334
 800f54c:	2000d338 	.word	0x2000d338
 800f550:	2000d336 	.word	0x2000d336
 800f554:	08019da0 	.word	0x08019da0
 800f558:	08019db0 	.word	0x08019db0
 800f55c:	08019dbc 	.word	0x08019dbc
 800f560:	2000d340 	.word	0x2000d340
 800f564:	2000d344 	.word	0x2000d344
 800f568:	2000d34c 	.word	0x2000d34c
 800f56c:	2000d34a 	.word	0x2000d34a
 800f570:	2000d314 	.word	0x2000d314
 800f574:	08019ddc 	.word	0x08019ddc
 800f578:	08019e04 	.word	0x08019e04
 800f57c:	08019e30 	.word	0x08019e30
    }

    if (pcb->remote_port == tcphdr->src &&
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	8b1a      	ldrh	r2, [r3, #24]
 800f584:	4b72      	ldr	r3, [pc, #456]	; (800f750 <tcp_input+0x49c>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	881b      	ldrh	r3, [r3, #0]
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d13a      	bne.n	800f606 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f590:	69fb      	ldr	r3, [r7, #28]
 800f592:	8ada      	ldrh	r2, [r3, #22]
 800f594:	4b6e      	ldr	r3, [pc, #440]	; (800f750 <tcp_input+0x49c>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	885b      	ldrh	r3, [r3, #2]
 800f59a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d132      	bne.n	800f606 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	685a      	ldr	r2, [r3, #4]
 800f5a4:	4b6b      	ldr	r3, [pc, #428]	; (800f754 <tcp_input+0x4a0>)
 800f5a6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d12c      	bne.n	800f606 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	681a      	ldr	r2, [r3, #0]
 800f5b0:	4b68      	ldr	r3, [pc, #416]	; (800f754 <tcp_input+0x4a0>)
 800f5b2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d126      	bne.n	800f606 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	69fa      	ldr	r2, [r7, #28]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d106      	bne.n	800f5d0 <tcp_input+0x31c>
 800f5c2:	4b65      	ldr	r3, [pc, #404]	; (800f758 <tcp_input+0x4a4>)
 800f5c4:	f240 120d 	movw	r2, #269	; 0x10d
 800f5c8:	4964      	ldr	r1, [pc, #400]	; (800f75c <tcp_input+0x4a8>)
 800f5ca:	4865      	ldr	r0, [pc, #404]	; (800f760 <tcp_input+0x4ac>)
 800f5cc:	f007 fdc0 	bl	8017150 <iprintf>
      if (prev != NULL) {
 800f5d0:	69bb      	ldr	r3, [r7, #24]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00a      	beq.n	800f5ec <tcp_input+0x338>
        prev->next = pcb->next;
 800f5d6:	69fb      	ldr	r3, [r7, #28]
 800f5d8:	68da      	ldr	r2, [r3, #12]
 800f5da:	69bb      	ldr	r3, [r7, #24]
 800f5dc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f5de:	4b61      	ldr	r3, [pc, #388]	; (800f764 <tcp_input+0x4b0>)
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f5e6:	4a5f      	ldr	r2, [pc, #380]	; (800f764 <tcp_input+0x4b0>)
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	69fa      	ldr	r2, [r7, #28]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d111      	bne.n	800f61a <tcp_input+0x366>
 800f5f6:	4b58      	ldr	r3, [pc, #352]	; (800f758 <tcp_input+0x4a4>)
 800f5f8:	f240 1215 	movw	r2, #277	; 0x115
 800f5fc:	495a      	ldr	r1, [pc, #360]	; (800f768 <tcp_input+0x4b4>)
 800f5fe:	4858      	ldr	r0, [pc, #352]	; (800f760 <tcp_input+0x4ac>)
 800f600:	f007 fda6 	bl	8017150 <iprintf>
      break;
 800f604:	e009      	b.n	800f61a <tcp_input+0x366>
    }
    prev = pcb;
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f60a:	69fb      	ldr	r3, [r7, #28]
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	61fb      	str	r3, [r7, #28]
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	2b00      	cmp	r3, #0
 800f614:	f47f af5e 	bne.w	800f4d4 <tcp_input+0x220>
 800f618:	e000      	b.n	800f61c <tcp_input+0x368>
      break;
 800f61a:	bf00      	nop
  }

  if (pcb == NULL) {
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	f040 80aa 	bne.w	800f778 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f624:	4b51      	ldr	r3, [pc, #324]	; (800f76c <tcp_input+0x4b8>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	61fb      	str	r3, [r7, #28]
 800f62a:	e03f      	b.n	800f6ac <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	7d1b      	ldrb	r3, [r3, #20]
 800f630:	2b0a      	cmp	r3, #10
 800f632:	d006      	beq.n	800f642 <tcp_input+0x38e>
 800f634:	4b48      	ldr	r3, [pc, #288]	; (800f758 <tcp_input+0x4a4>)
 800f636:	f240 121f 	movw	r2, #287	; 0x11f
 800f63a:	494d      	ldr	r1, [pc, #308]	; (800f770 <tcp_input+0x4bc>)
 800f63c:	4848      	ldr	r0, [pc, #288]	; (800f760 <tcp_input+0x4ac>)
 800f63e:	f007 fd87 	bl	8017150 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	7a1b      	ldrb	r3, [r3, #8]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d009      	beq.n	800f65e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	7a1a      	ldrb	r2, [r3, #8]
 800f64e:	4b41      	ldr	r3, [pc, #260]	; (800f754 <tcp_input+0x4a0>)
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f656:	3301      	adds	r3, #1
 800f658:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d122      	bne.n	800f6a4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f65e:	69fb      	ldr	r3, [r7, #28]
 800f660:	8b1a      	ldrh	r2, [r3, #24]
 800f662:	4b3b      	ldr	r3, [pc, #236]	; (800f750 <tcp_input+0x49c>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	881b      	ldrh	r3, [r3, #0]
 800f668:	b29b      	uxth	r3, r3
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d11b      	bne.n	800f6a6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	8ada      	ldrh	r2, [r3, #22]
 800f672:	4b37      	ldr	r3, [pc, #220]	; (800f750 <tcp_input+0x49c>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	885b      	ldrh	r3, [r3, #2]
 800f678:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d113      	bne.n	800f6a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f67e:	69fb      	ldr	r3, [r7, #28]
 800f680:	685a      	ldr	r2, [r3, #4]
 800f682:	4b34      	ldr	r3, [pc, #208]	; (800f754 <tcp_input+0x4a0>)
 800f684:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f686:	429a      	cmp	r2, r3
 800f688:	d10d      	bne.n	800f6a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	4b31      	ldr	r3, [pc, #196]	; (800f754 <tcp_input+0x4a0>)
 800f690:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f692:	429a      	cmp	r2, r3
 800f694:	d107      	bne.n	800f6a6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f696:	69f8      	ldr	r0, [r7, #28]
 800f698:	f000 fb56 	bl	800fd48 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f7fd fdbd 	bl	800d21c <pbuf_free>
        return;
 800f6a2:	e1fd      	b.n	800faa0 <tcp_input+0x7ec>
        continue;
 800f6a4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6a6:	69fb      	ldr	r3, [r7, #28]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	61fb      	str	r3, [r7, #28]
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d1bc      	bne.n	800f62c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6b6:	4b2f      	ldr	r3, [pc, #188]	; (800f774 <tcp_input+0x4c0>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	617b      	str	r3, [r7, #20]
 800f6bc:	e02a      	b.n	800f714 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	7a1b      	ldrb	r3, [r3, #8]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d00c      	beq.n	800f6e0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	7a1a      	ldrb	r2, [r3, #8]
 800f6ca:	4b22      	ldr	r3, [pc, #136]	; (800f754 <tcp_input+0x4a0>)
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d002      	beq.n	800f6e0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	61bb      	str	r3, [r7, #24]
        continue;
 800f6de:	e016      	b.n	800f70e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	8ada      	ldrh	r2, [r3, #22]
 800f6e4:	4b1a      	ldr	r3, [pc, #104]	; (800f750 <tcp_input+0x49c>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	885b      	ldrh	r3, [r3, #2]
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d10c      	bne.n	800f70a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	4b17      	ldr	r3, [pc, #92]	; (800f754 <tcp_input+0x4a0>)
 800f6f6:	695b      	ldr	r3, [r3, #20]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d00f      	beq.n	800f71c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d00d      	beq.n	800f71e <tcp_input+0x46a>
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d009      	beq.n	800f71e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	617b      	str	r3, [r7, #20]
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d1d1      	bne.n	800f6be <tcp_input+0x40a>
 800f71a:	e000      	b.n	800f71e <tcp_input+0x46a>
            break;
 800f71c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d029      	beq.n	800f778 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f724:	69bb      	ldr	r3, [r7, #24]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00a      	beq.n	800f740 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	68da      	ldr	r2, [r3, #12]
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f732:	4b10      	ldr	r3, [pc, #64]	; (800f774 <tcp_input+0x4c0>)
 800f734:	681a      	ldr	r2, [r3, #0]
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f73a:	4a0e      	ldr	r2, [pc, #56]	; (800f774 <tcp_input+0x4c0>)
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f740:	6978      	ldr	r0, [r7, #20]
 800f742:	f000 fa03 	bl	800fb4c <tcp_listen_input>
      }
      pbuf_free(p);
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f7fd fd68 	bl	800d21c <pbuf_free>
      return;
 800f74c:	e1a8      	b.n	800faa0 <tcp_input+0x7ec>
 800f74e:	bf00      	nop
 800f750:	2000d330 	.word	0x2000d330
 800f754:	20009bb4 	.word	0x20009bb4
 800f758:	08019d2c 	.word	0x08019d2c
 800f75c:	08019e58 	.word	0x08019e58
 800f760:	08019d78 	.word	0x08019d78
 800f764:	2000d314 	.word	0x2000d314
 800f768:	08019e84 	.word	0x08019e84
 800f76c:	2000d318 	.word	0x2000d318
 800f770:	08019eb0 	.word	0x08019eb0
 800f774:	2000d310 	.word	0x2000d310
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	f000 8158 	beq.w	800fa30 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f780:	4b95      	ldr	r3, [pc, #596]	; (800f9d8 <tcp_input+0x724>)
 800f782:	2200      	movs	r2, #0
 800f784:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	891a      	ldrh	r2, [r3, #8]
 800f78a:	4b93      	ldr	r3, [pc, #588]	; (800f9d8 <tcp_input+0x724>)
 800f78c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f78e:	4a92      	ldr	r2, [pc, #584]	; (800f9d8 <tcp_input+0x724>)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f794:	4b91      	ldr	r3, [pc, #580]	; (800f9dc <tcp_input+0x728>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	4a8f      	ldr	r2, [pc, #572]	; (800f9d8 <tcp_input+0x724>)
 800f79a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f79c:	4b90      	ldr	r3, [pc, #576]	; (800f9e0 <tcp_input+0x72c>)
 800f79e:	2200      	movs	r2, #0
 800f7a0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f7a2:	4b90      	ldr	r3, [pc, #576]	; (800f9e4 <tcp_input+0x730>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f7a8:	4b8f      	ldr	r3, [pc, #572]	; (800f9e8 <tcp_input+0x734>)
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f7ae:	4b8f      	ldr	r3, [pc, #572]	; (800f9ec <tcp_input+0x738>)
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	f003 0308 	and.w	r3, r3, #8
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d006      	beq.n	800f7c8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	7b5b      	ldrb	r3, [r3, #13]
 800f7be:	f043 0301 	orr.w	r3, r3, #1
 800f7c2:	b2da      	uxtb	r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d017      	beq.n	800f800 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f7d0:	69f8      	ldr	r0, [r7, #28]
 800f7d2:	f7ff f85b 	bl	800e88c <tcp_process_refused_data>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	f113 0f0d 	cmn.w	r3, #13
 800f7dc:	d007      	beq.n	800f7ee <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d00c      	beq.n	800f800 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f7e6:	4b82      	ldr	r3, [pc, #520]	; (800f9f0 <tcp_input+0x73c>)
 800f7e8:	881b      	ldrh	r3, [r3, #0]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d008      	beq.n	800f800 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f7ee:	69fb      	ldr	r3, [r7, #28]
 800f7f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	f040 80e3 	bne.w	800f9be <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f7f8:	69f8      	ldr	r0, [r7, #28]
 800f7fa:	f003 fe05 	bl	8013408 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f7fe:	e0de      	b.n	800f9be <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f800:	4a7c      	ldr	r2, [pc, #496]	; (800f9f4 <tcp_input+0x740>)
 800f802:	69fb      	ldr	r3, [r7, #28]
 800f804:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f806:	69f8      	ldr	r0, [r7, #28]
 800f808:	f000 fb18 	bl	800fe3c <tcp_process>
 800f80c:	4603      	mov	r3, r0
 800f80e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f810:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f814:	f113 0f0d 	cmn.w	r3, #13
 800f818:	f000 80d3 	beq.w	800f9c2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f81c:	4b71      	ldr	r3, [pc, #452]	; (800f9e4 <tcp_input+0x730>)
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	f003 0308 	and.w	r3, r3, #8
 800f824:	2b00      	cmp	r3, #0
 800f826:	d015      	beq.n	800f854 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d008      	beq.n	800f844 <tcp_input+0x590>
 800f832:	69fb      	ldr	r3, [r7, #28]
 800f834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f838:	69fa      	ldr	r2, [r7, #28]
 800f83a:	6912      	ldr	r2, [r2, #16]
 800f83c:	f06f 010d 	mvn.w	r1, #13
 800f840:	4610      	mov	r0, r2
 800f842:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f844:	69f9      	ldr	r1, [r7, #28]
 800f846:	486c      	ldr	r0, [pc, #432]	; (800f9f8 <tcp_input+0x744>)
 800f848:	f7ff fbbc 	bl	800efc4 <tcp_pcb_remove>
        tcp_free(pcb);
 800f84c:	69f8      	ldr	r0, [r7, #28]
 800f84e:	f7fd ffa1 	bl	800d794 <tcp_free>
 800f852:	e0da      	b.n	800fa0a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f854:	2300      	movs	r3, #0
 800f856:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f858:	4b63      	ldr	r3, [pc, #396]	; (800f9e8 <tcp_input+0x734>)
 800f85a:	881b      	ldrh	r3, [r3, #0]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d01d      	beq.n	800f89c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f860:	4b61      	ldr	r3, [pc, #388]	; (800f9e8 <tcp_input+0x734>)
 800f862:	881b      	ldrh	r3, [r3, #0]
 800f864:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00a      	beq.n	800f886 <tcp_input+0x5d2>
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f876:	69fa      	ldr	r2, [r7, #28]
 800f878:	6910      	ldr	r0, [r2, #16]
 800f87a:	89fa      	ldrh	r2, [r7, #14]
 800f87c:	69f9      	ldr	r1, [r7, #28]
 800f87e:	4798      	blx	r3
 800f880:	4603      	mov	r3, r0
 800f882:	74fb      	strb	r3, [r7, #19]
 800f884:	e001      	b.n	800f88a <tcp_input+0x5d6>
 800f886:	2300      	movs	r3, #0
 800f888:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f88a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f88e:	f113 0f0d 	cmn.w	r3, #13
 800f892:	f000 8098 	beq.w	800f9c6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f896:	4b54      	ldr	r3, [pc, #336]	; (800f9e8 <tcp_input+0x734>)
 800f898:	2200      	movs	r2, #0
 800f89a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f89c:	69f8      	ldr	r0, [r7, #28]
 800f89e:	f000 f915 	bl	800facc <tcp_input_delayed_close>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	f040 8090 	bne.w	800f9ca <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f8aa:	4b4d      	ldr	r3, [pc, #308]	; (800f9e0 <tcp_input+0x72c>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d041      	beq.n	800f936 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d006      	beq.n	800f8c8 <tcp_input+0x614>
 800f8ba:	4b50      	ldr	r3, [pc, #320]	; (800f9fc <tcp_input+0x748>)
 800f8bc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f8c0:	494f      	ldr	r1, [pc, #316]	; (800fa00 <tcp_input+0x74c>)
 800f8c2:	4850      	ldr	r0, [pc, #320]	; (800fa04 <tcp_input+0x750>)
 800f8c4:	f007 fc44 	bl	8017150 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	8b5b      	ldrh	r3, [r3, #26]
 800f8cc:	f003 0310 	and.w	r3, r3, #16
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d008      	beq.n	800f8e6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f8d4:	4b42      	ldr	r3, [pc, #264]	; (800f9e0 <tcp_input+0x72c>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7fd fc9f 	bl	800d21c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f8de:	69f8      	ldr	r0, [r7, #28]
 800f8e0:	f7fe fa9c 	bl	800de1c <tcp_abort>
            goto aborted;
 800f8e4:	e091      	b.n	800fa0a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f8e6:	69fb      	ldr	r3, [r7, #28]
 800f8e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d00c      	beq.n	800f90a <tcp_input+0x656>
 800f8f0:	69fb      	ldr	r3, [r7, #28]
 800f8f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	6918      	ldr	r0, [r3, #16]
 800f8fa:	4b39      	ldr	r3, [pc, #228]	; (800f9e0 <tcp_input+0x72c>)
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	2300      	movs	r3, #0
 800f900:	69f9      	ldr	r1, [r7, #28]
 800f902:	47a0      	blx	r4
 800f904:	4603      	mov	r3, r0
 800f906:	74fb      	strb	r3, [r7, #19]
 800f908:	e008      	b.n	800f91c <tcp_input+0x668>
 800f90a:	4b35      	ldr	r3, [pc, #212]	; (800f9e0 <tcp_input+0x72c>)
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	2300      	movs	r3, #0
 800f910:	69f9      	ldr	r1, [r7, #28]
 800f912:	2000      	movs	r0, #0
 800f914:	f7ff f890 	bl	800ea38 <tcp_recv_null>
 800f918:	4603      	mov	r3, r0
 800f91a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f91c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f920:	f113 0f0d 	cmn.w	r3, #13
 800f924:	d053      	beq.n	800f9ce <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f926:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d003      	beq.n	800f936 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f92e:	4b2c      	ldr	r3, [pc, #176]	; (800f9e0 <tcp_input+0x72c>)
 800f930:	681a      	ldr	r2, [r3, #0]
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f936:	4b2b      	ldr	r3, [pc, #172]	; (800f9e4 <tcp_input+0x730>)
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	f003 0320 	and.w	r3, r3, #32
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d030      	beq.n	800f9a4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f946:	2b00      	cmp	r3, #0
 800f948:	d009      	beq.n	800f95e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f94a:	69fb      	ldr	r3, [r7, #28]
 800f94c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f94e:	7b5a      	ldrb	r2, [r3, #13]
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f954:	f042 0220 	orr.w	r2, r2, #32
 800f958:	b2d2      	uxtb	r2, r2
 800f95a:	735a      	strb	r2, [r3, #13]
 800f95c:	e022      	b.n	800f9a4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f962:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f966:	d005      	beq.n	800f974 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f96c:	3301      	adds	r3, #1
 800f96e:	b29a      	uxth	r2, r3
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00b      	beq.n	800f996 <tcp_input+0x6e2>
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	6918      	ldr	r0, [r3, #16]
 800f988:	2300      	movs	r3, #0
 800f98a:	2200      	movs	r2, #0
 800f98c:	69f9      	ldr	r1, [r7, #28]
 800f98e:	47a0      	blx	r4
 800f990:	4603      	mov	r3, r0
 800f992:	74fb      	strb	r3, [r7, #19]
 800f994:	e001      	b.n	800f99a <tcp_input+0x6e6>
 800f996:	2300      	movs	r3, #0
 800f998:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f99a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f99e:	f113 0f0d 	cmn.w	r3, #13
 800f9a2:	d016      	beq.n	800f9d2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f9a4:	4b13      	ldr	r3, [pc, #76]	; (800f9f4 <tcp_input+0x740>)
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f9aa:	69f8      	ldr	r0, [r7, #28]
 800f9ac:	f000 f88e 	bl	800facc <tcp_input_delayed_close>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d128      	bne.n	800fa08 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f9b6:	69f8      	ldr	r0, [r7, #28]
 800f9b8:	f002 ff20 	bl	80127fc <tcp_output>
 800f9bc:	e025      	b.n	800fa0a <tcp_input+0x756>
        goto aborted;
 800f9be:	bf00      	nop
 800f9c0:	e023      	b.n	800fa0a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f9c2:	bf00      	nop
 800f9c4:	e021      	b.n	800fa0a <tcp_input+0x756>
              goto aborted;
 800f9c6:	bf00      	nop
 800f9c8:	e01f      	b.n	800fa0a <tcp_input+0x756>
          goto aborted;
 800f9ca:	bf00      	nop
 800f9cc:	e01d      	b.n	800fa0a <tcp_input+0x756>
            goto aborted;
 800f9ce:	bf00      	nop
 800f9d0:	e01b      	b.n	800fa0a <tcp_input+0x756>
              goto aborted;
 800f9d2:	bf00      	nop
 800f9d4:	e019      	b.n	800fa0a <tcp_input+0x756>
 800f9d6:	bf00      	nop
 800f9d8:	2000d320 	.word	0x2000d320
 800f9dc:	2000d330 	.word	0x2000d330
 800f9e0:	2000d350 	.word	0x2000d350
 800f9e4:	2000d34d 	.word	0x2000d34d
 800f9e8:	2000d348 	.word	0x2000d348
 800f9ec:	2000d34c 	.word	0x2000d34c
 800f9f0:	2000d34a 	.word	0x2000d34a
 800f9f4:	2000d354 	.word	0x2000d354
 800f9f8:	2000d314 	.word	0x2000d314
 800f9fc:	08019d2c 	.word	0x08019d2c
 800fa00:	08019ee0 	.word	0x08019ee0
 800fa04:	08019d78 	.word	0x08019d78
          goto aborted;
 800fa08:	bf00      	nop
    tcp_input_pcb = NULL;
 800fa0a:	4b27      	ldr	r3, [pc, #156]	; (800faa8 <tcp_input+0x7f4>)
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fa10:	4b26      	ldr	r3, [pc, #152]	; (800faac <tcp_input+0x7f8>)
 800fa12:	2200      	movs	r2, #0
 800fa14:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fa16:	4b26      	ldr	r3, [pc, #152]	; (800fab0 <tcp_input+0x7fc>)
 800fa18:	685b      	ldr	r3, [r3, #4]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d03f      	beq.n	800fa9e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fa1e:	4b24      	ldr	r3, [pc, #144]	; (800fab0 <tcp_input+0x7fc>)
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fd fbfa 	bl	800d21c <pbuf_free>
      inseg.p = NULL;
 800fa28:	4b21      	ldr	r3, [pc, #132]	; (800fab0 <tcp_input+0x7fc>)
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fa2e:	e036      	b.n	800fa9e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fa30:	4b20      	ldr	r3, [pc, #128]	; (800fab4 <tcp_input+0x800>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	899b      	ldrh	r3, [r3, #12]
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fc f8a7 	bl	800bb8c <lwip_htons>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	f003 0304 	and.w	r3, r3, #4
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d118      	bne.n	800fa7c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa4a:	4b1b      	ldr	r3, [pc, #108]	; (800fab8 <tcp_input+0x804>)
 800fa4c:	6819      	ldr	r1, [r3, #0]
 800fa4e:	4b1b      	ldr	r3, [pc, #108]	; (800fabc <tcp_input+0x808>)
 800fa50:	881b      	ldrh	r3, [r3, #0]
 800fa52:	461a      	mov	r2, r3
 800fa54:	4b1a      	ldr	r3, [pc, #104]	; (800fac0 <tcp_input+0x80c>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa5a:	4b16      	ldr	r3, [pc, #88]	; (800fab4 <tcp_input+0x800>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa5e:	885b      	ldrh	r3, [r3, #2]
 800fa60:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa62:	4a14      	ldr	r2, [pc, #80]	; (800fab4 <tcp_input+0x800>)
 800fa64:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa66:	8812      	ldrh	r2, [r2, #0]
 800fa68:	b292      	uxth	r2, r2
 800fa6a:	9202      	str	r2, [sp, #8]
 800fa6c:	9301      	str	r3, [sp, #4]
 800fa6e:	4b15      	ldr	r3, [pc, #84]	; (800fac4 <tcp_input+0x810>)
 800fa70:	9300      	str	r3, [sp, #0]
 800fa72:	4b15      	ldr	r3, [pc, #84]	; (800fac8 <tcp_input+0x814>)
 800fa74:	4602      	mov	r2, r0
 800fa76:	2000      	movs	r0, #0
 800fa78:	f003 fc74 	bl	8013364 <tcp_rst>
    pbuf_free(p);
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f7fd fbcd 	bl	800d21c <pbuf_free>
  return;
 800fa82:	e00c      	b.n	800fa9e <tcp_input+0x7ea>
    goto dropped;
 800fa84:	bf00      	nop
 800fa86:	e006      	b.n	800fa96 <tcp_input+0x7e2>
    goto dropped;
 800fa88:	bf00      	nop
 800fa8a:	e004      	b.n	800fa96 <tcp_input+0x7e2>
    goto dropped;
 800fa8c:	bf00      	nop
 800fa8e:	e002      	b.n	800fa96 <tcp_input+0x7e2>
      goto dropped;
 800fa90:	bf00      	nop
 800fa92:	e000      	b.n	800fa96 <tcp_input+0x7e2>
      goto dropped;
 800fa94:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7fd fbc0 	bl	800d21c <pbuf_free>
 800fa9c:	e000      	b.n	800faa0 <tcp_input+0x7ec>
  return;
 800fa9e:	bf00      	nop
}
 800faa0:	3724      	adds	r7, #36	; 0x24
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd90      	pop	{r4, r7, pc}
 800faa6:	bf00      	nop
 800faa8:	2000d354 	.word	0x2000d354
 800faac:	2000d350 	.word	0x2000d350
 800fab0:	2000d320 	.word	0x2000d320
 800fab4:	2000d330 	.word	0x2000d330
 800fab8:	2000d344 	.word	0x2000d344
 800fabc:	2000d34a 	.word	0x2000d34a
 800fac0:	2000d340 	.word	0x2000d340
 800fac4:	20009bc4 	.word	0x20009bc4
 800fac8:	20009bc8 	.word	0x20009bc8

0800facc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d106      	bne.n	800fae8 <tcp_input_delayed_close+0x1c>
 800fada:	4b17      	ldr	r3, [pc, #92]	; (800fb38 <tcp_input_delayed_close+0x6c>)
 800fadc:	f240 225a 	movw	r2, #602	; 0x25a
 800fae0:	4916      	ldr	r1, [pc, #88]	; (800fb3c <tcp_input_delayed_close+0x70>)
 800fae2:	4817      	ldr	r0, [pc, #92]	; (800fb40 <tcp_input_delayed_close+0x74>)
 800fae4:	f007 fb34 	bl	8017150 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fae8:	4b16      	ldr	r3, [pc, #88]	; (800fb44 <tcp_input_delayed_close+0x78>)
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	f003 0310 	and.w	r3, r3, #16
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d01c      	beq.n	800fb2e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	8b5b      	ldrh	r3, [r3, #26]
 800faf8:	f003 0310 	and.w	r3, r3, #16
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d10d      	bne.n	800fb1c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d008      	beq.n	800fb1c <tcp_input_delayed_close+0x50>
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	6912      	ldr	r2, [r2, #16]
 800fb14:	f06f 010e 	mvn.w	r1, #14
 800fb18:	4610      	mov	r0, r2
 800fb1a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fb1c:	6879      	ldr	r1, [r7, #4]
 800fb1e:	480a      	ldr	r0, [pc, #40]	; (800fb48 <tcp_input_delayed_close+0x7c>)
 800fb20:	f7ff fa50 	bl	800efc4 <tcp_pcb_remove>
    tcp_free(pcb);
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f7fd fe35 	bl	800d794 <tcp_free>
    return 1;
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	e000      	b.n	800fb30 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fb2e:	2300      	movs	r3, #0
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	08019d2c 	.word	0x08019d2c
 800fb3c:	08019efc 	.word	0x08019efc
 800fb40:	08019d78 	.word	0x08019d78
 800fb44:	2000d34d 	.word	0x2000d34d
 800fb48:	2000d314 	.word	0x2000d314

0800fb4c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fb4c:	b590      	push	{r4, r7, lr}
 800fb4e:	b08b      	sub	sp, #44	; 0x2c
 800fb50:	af04      	add	r7, sp, #16
 800fb52:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fb54:	4b6f      	ldr	r3, [pc, #444]	; (800fd14 <tcp_listen_input+0x1c8>)
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	f003 0304 	and.w	r3, r3, #4
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	f040 80d2 	bne.w	800fd06 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d106      	bne.n	800fb76 <tcp_listen_input+0x2a>
 800fb68:	4b6b      	ldr	r3, [pc, #428]	; (800fd18 <tcp_listen_input+0x1cc>)
 800fb6a:	f240 2281 	movw	r2, #641	; 0x281
 800fb6e:	496b      	ldr	r1, [pc, #428]	; (800fd1c <tcp_listen_input+0x1d0>)
 800fb70:	486b      	ldr	r0, [pc, #428]	; (800fd20 <tcp_listen_input+0x1d4>)
 800fb72:	f007 faed 	bl	8017150 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fb76:	4b67      	ldr	r3, [pc, #412]	; (800fd14 <tcp_listen_input+0x1c8>)
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	f003 0310 	and.w	r3, r3, #16
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d019      	beq.n	800fbb6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb82:	4b68      	ldr	r3, [pc, #416]	; (800fd24 <tcp_listen_input+0x1d8>)
 800fb84:	6819      	ldr	r1, [r3, #0]
 800fb86:	4b68      	ldr	r3, [pc, #416]	; (800fd28 <tcp_listen_input+0x1dc>)
 800fb88:	881b      	ldrh	r3, [r3, #0]
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	4b67      	ldr	r3, [pc, #412]	; (800fd2c <tcp_listen_input+0x1e0>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb92:	4b67      	ldr	r3, [pc, #412]	; (800fd30 <tcp_listen_input+0x1e4>)
 800fb94:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb96:	885b      	ldrh	r3, [r3, #2]
 800fb98:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb9a:	4a65      	ldr	r2, [pc, #404]	; (800fd30 <tcp_listen_input+0x1e4>)
 800fb9c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb9e:	8812      	ldrh	r2, [r2, #0]
 800fba0:	b292      	uxth	r2, r2
 800fba2:	9202      	str	r2, [sp, #8]
 800fba4:	9301      	str	r3, [sp, #4]
 800fba6:	4b63      	ldr	r3, [pc, #396]	; (800fd34 <tcp_listen_input+0x1e8>)
 800fba8:	9300      	str	r3, [sp, #0]
 800fbaa:	4b63      	ldr	r3, [pc, #396]	; (800fd38 <tcp_listen_input+0x1ec>)
 800fbac:	4602      	mov	r2, r0
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f003 fbd8 	bl	8013364 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fbb4:	e0a9      	b.n	800fd0a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fbb6:	4b57      	ldr	r3, [pc, #348]	; (800fd14 <tcp_listen_input+0x1c8>)
 800fbb8:	781b      	ldrb	r3, [r3, #0]
 800fbba:	f003 0302 	and.w	r3, r3, #2
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	f000 80a3 	beq.w	800fd0a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	7d5b      	ldrb	r3, [r3, #21]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7ff f859 	bl	800ec80 <tcp_alloc>
 800fbce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d111      	bne.n	800fbfa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	699b      	ldr	r3, [r3, #24]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d00a      	beq.n	800fbf4 <tcp_listen_input+0xa8>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	699b      	ldr	r3, [r3, #24]
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	6910      	ldr	r0, [r2, #16]
 800fbe6:	f04f 32ff 	mov.w	r2, #4294967295
 800fbea:	2100      	movs	r1, #0
 800fbec:	4798      	blx	r3
 800fbee:	4603      	mov	r3, r0
 800fbf0:	73bb      	strb	r3, [r7, #14]
      return;
 800fbf2:	e08b      	b.n	800fd0c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fbf4:	23f0      	movs	r3, #240	; 0xf0
 800fbf6:	73bb      	strb	r3, [r7, #14]
      return;
 800fbf8:	e088      	b.n	800fd0c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fbfa:	4b50      	ldr	r3, [pc, #320]	; (800fd3c <tcp_listen_input+0x1f0>)
 800fbfc:	695a      	ldr	r2, [r3, #20]
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fc02:	4b4e      	ldr	r3, [pc, #312]	; (800fd3c <tcp_listen_input+0x1f0>)
 800fc04:	691a      	ldr	r2, [r3, #16]
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	8ada      	ldrh	r2, [r3, #22]
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fc12:	4b47      	ldr	r3, [pc, #284]	; (800fd30 <tcp_listen_input+0x1e4>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	881b      	ldrh	r3, [r3, #0]
 800fc18:	b29a      	uxth	r2, r3
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	2203      	movs	r2, #3
 800fc22:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fc24:	4b41      	ldr	r3, [pc, #260]	; (800fd2c <tcp_listen_input+0x1e0>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	1c5a      	adds	r2, r3, #1
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fc36:	6978      	ldr	r0, [r7, #20]
 800fc38:	f7ff fa58 	bl	800f0ec <tcp_next_iss>
 800fc3c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	693a      	ldr	r2, [r7, #16]
 800fc42:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	693a      	ldr	r2, [r7, #16]
 800fc48:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	693a      	ldr	r2, [r7, #16]
 800fc54:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fc56:	4b35      	ldr	r3, [pc, #212]	; (800fd2c <tcp_listen_input+0x1e0>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	1e5a      	subs	r2, r3, #1
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	691a      	ldr	r2, [r3, #16]
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	7a5b      	ldrb	r3, [r3, #9]
 800fc72:	f003 030c 	and.w	r3, r3, #12
 800fc76:	b2da      	uxtb	r2, r3
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	7a1a      	ldrb	r2, [r3, #8]
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fc84:	4b2e      	ldr	r3, [pc, #184]	; (800fd40 <tcp_listen_input+0x1f4>)
 800fc86:	681a      	ldr	r2, [r3, #0]
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	60da      	str	r2, [r3, #12]
 800fc8c:	4a2c      	ldr	r2, [pc, #176]	; (800fd40 <tcp_listen_input+0x1f4>)
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	6013      	str	r3, [r2, #0]
 800fc92:	f003 fd29 	bl	80136e8 <tcp_timer_needed>
 800fc96:	4b2b      	ldr	r3, [pc, #172]	; (800fd44 <tcp_listen_input+0x1f8>)
 800fc98:	2201      	movs	r2, #1
 800fc9a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fc9c:	6978      	ldr	r0, [r7, #20]
 800fc9e:	f001 fd8f 	bl	80117c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fca2:	4b23      	ldr	r3, [pc, #140]	; (800fd30 <tcp_listen_input+0x1e4>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	89db      	ldrh	r3, [r3, #14]
 800fca8:	b29a      	uxth	r2, r3
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	3304      	adds	r3, #4
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f005 fc4d 	bl	8015564 <ip4_route>
 800fcca:	4601      	mov	r1, r0
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	3304      	adds	r3, #4
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f7ff fa30 	bl	800f138 <tcp_eff_send_mss_netif>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	461a      	mov	r2, r3
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fce0:	2112      	movs	r1, #18
 800fce2:	6978      	ldr	r0, [r7, #20]
 800fce4:	f002 fc9c 	bl	8012620 <tcp_enqueue_flags>
 800fce8:	4603      	mov	r3, r0
 800fcea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fcec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d004      	beq.n	800fcfe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fcf4:	2100      	movs	r1, #0
 800fcf6:	6978      	ldr	r0, [r7, #20]
 800fcf8:	f7fd ffd2 	bl	800dca0 <tcp_abandon>
      return;
 800fcfc:	e006      	b.n	800fd0c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fcfe:	6978      	ldr	r0, [r7, #20]
 800fd00:	f002 fd7c 	bl	80127fc <tcp_output>
  return;
 800fd04:	e001      	b.n	800fd0a <tcp_listen_input+0x1be>
    return;
 800fd06:	bf00      	nop
 800fd08:	e000      	b.n	800fd0c <tcp_listen_input+0x1c0>
  return;
 800fd0a:	bf00      	nop
}
 800fd0c:	371c      	adds	r7, #28
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd90      	pop	{r4, r7, pc}
 800fd12:	bf00      	nop
 800fd14:	2000d34c 	.word	0x2000d34c
 800fd18:	08019d2c 	.word	0x08019d2c
 800fd1c:	08019f24 	.word	0x08019f24
 800fd20:	08019d78 	.word	0x08019d78
 800fd24:	2000d344 	.word	0x2000d344
 800fd28:	2000d34a 	.word	0x2000d34a
 800fd2c:	2000d340 	.word	0x2000d340
 800fd30:	2000d330 	.word	0x2000d330
 800fd34:	20009bc4 	.word	0x20009bc4
 800fd38:	20009bc8 	.word	0x20009bc8
 800fd3c:	20009bb4 	.word	0x20009bb4
 800fd40:	2000d314 	.word	0x2000d314
 800fd44:	2000d31c 	.word	0x2000d31c

0800fd48 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b086      	sub	sp, #24
 800fd4c:	af04      	add	r7, sp, #16
 800fd4e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fd50:	4b2f      	ldr	r3, [pc, #188]	; (800fe10 <tcp_timewait_input+0xc8>)
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	f003 0304 	and.w	r3, r3, #4
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d153      	bne.n	800fe04 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d106      	bne.n	800fd70 <tcp_timewait_input+0x28>
 800fd62:	4b2c      	ldr	r3, [pc, #176]	; (800fe14 <tcp_timewait_input+0xcc>)
 800fd64:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fd68:	492b      	ldr	r1, [pc, #172]	; (800fe18 <tcp_timewait_input+0xd0>)
 800fd6a:	482c      	ldr	r0, [pc, #176]	; (800fe1c <tcp_timewait_input+0xd4>)
 800fd6c:	f007 f9f0 	bl	8017150 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fd70:	4b27      	ldr	r3, [pc, #156]	; (800fe10 <tcp_timewait_input+0xc8>)
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	f003 0302 	and.w	r3, r3, #2
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d02a      	beq.n	800fdd2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fd7c:	4b28      	ldr	r3, [pc, #160]	; (800fe20 <tcp_timewait_input+0xd8>)
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd84:	1ad3      	subs	r3, r2, r3
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	db2d      	blt.n	800fde6 <tcp_timewait_input+0x9e>
 800fd8a:	4b25      	ldr	r3, [pc, #148]	; (800fe20 <tcp_timewait_input+0xd8>)
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd92:	6879      	ldr	r1, [r7, #4]
 800fd94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd96:	440b      	add	r3, r1
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	dc23      	bgt.n	800fde6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd9e:	4b21      	ldr	r3, [pc, #132]	; (800fe24 <tcp_timewait_input+0xdc>)
 800fda0:	6819      	ldr	r1, [r3, #0]
 800fda2:	4b21      	ldr	r3, [pc, #132]	; (800fe28 <tcp_timewait_input+0xe0>)
 800fda4:	881b      	ldrh	r3, [r3, #0]
 800fda6:	461a      	mov	r2, r3
 800fda8:	4b1d      	ldr	r3, [pc, #116]	; (800fe20 <tcp_timewait_input+0xd8>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdae:	4b1f      	ldr	r3, [pc, #124]	; (800fe2c <tcp_timewait_input+0xe4>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdb2:	885b      	ldrh	r3, [r3, #2]
 800fdb4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdb6:	4a1d      	ldr	r2, [pc, #116]	; (800fe2c <tcp_timewait_input+0xe4>)
 800fdb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdba:	8812      	ldrh	r2, [r2, #0]
 800fdbc:	b292      	uxth	r2, r2
 800fdbe:	9202      	str	r2, [sp, #8]
 800fdc0:	9301      	str	r3, [sp, #4]
 800fdc2:	4b1b      	ldr	r3, [pc, #108]	; (800fe30 <tcp_timewait_input+0xe8>)
 800fdc4:	9300      	str	r3, [sp, #0]
 800fdc6:	4b1b      	ldr	r3, [pc, #108]	; (800fe34 <tcp_timewait_input+0xec>)
 800fdc8:	4602      	mov	r2, r0
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f003 faca 	bl	8013364 <tcp_rst>
      return;
 800fdd0:	e01b      	b.n	800fe0a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fdd2:	4b0f      	ldr	r3, [pc, #60]	; (800fe10 <tcp_timewait_input+0xc8>)
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	f003 0301 	and.w	r3, r3, #1
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d003      	beq.n	800fde6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fdde:	4b16      	ldr	r3, [pc, #88]	; (800fe38 <tcp_timewait_input+0xf0>)
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fde6:	4b10      	ldr	r3, [pc, #64]	; (800fe28 <tcp_timewait_input+0xe0>)
 800fde8:	881b      	ldrh	r3, [r3, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d00c      	beq.n	800fe08 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	8b5b      	ldrh	r3, [r3, #26]
 800fdf2:	f043 0302 	orr.w	r3, r3, #2
 800fdf6:	b29a      	uxth	r2, r3
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f002 fcfd 	bl	80127fc <tcp_output>
  }
  return;
 800fe02:	e001      	b.n	800fe08 <tcp_timewait_input+0xc0>
    return;
 800fe04:	bf00      	nop
 800fe06:	e000      	b.n	800fe0a <tcp_timewait_input+0xc2>
  return;
 800fe08:	bf00      	nop
}
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	2000d34c 	.word	0x2000d34c
 800fe14:	08019d2c 	.word	0x08019d2c
 800fe18:	08019f44 	.word	0x08019f44
 800fe1c:	08019d78 	.word	0x08019d78
 800fe20:	2000d340 	.word	0x2000d340
 800fe24:	2000d344 	.word	0x2000d344
 800fe28:	2000d34a 	.word	0x2000d34a
 800fe2c:	2000d330 	.word	0x2000d330
 800fe30:	20009bc4 	.word	0x20009bc4
 800fe34:	20009bc8 	.word	0x20009bc8
 800fe38:	2000d308 	.word	0x2000d308

0800fe3c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fe3c:	b590      	push	{r4, r7, lr}
 800fe3e:	b08d      	sub	sp, #52	; 0x34
 800fe40:	af04      	add	r7, sp, #16
 800fe42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fe44:	2300      	movs	r3, #0
 800fe46:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d106      	bne.n	800fe60 <tcp_process+0x24>
 800fe52:	4b9d      	ldr	r3, [pc, #628]	; (80100c8 <tcp_process+0x28c>)
 800fe54:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fe58:	499c      	ldr	r1, [pc, #624]	; (80100cc <tcp_process+0x290>)
 800fe5a:	489d      	ldr	r0, [pc, #628]	; (80100d0 <tcp_process+0x294>)
 800fe5c:	f007 f978 	bl	8017150 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fe60:	4b9c      	ldr	r3, [pc, #624]	; (80100d4 <tcp_process+0x298>)
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	f003 0304 	and.w	r3, r3, #4
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d04e      	beq.n	800ff0a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	7d1b      	ldrb	r3, [r3, #20]
 800fe70:	2b02      	cmp	r3, #2
 800fe72:	d108      	bne.n	800fe86 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe78:	4b97      	ldr	r3, [pc, #604]	; (80100d8 <tcp_process+0x29c>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d123      	bne.n	800fec8 <tcp_process+0x8c>
        acceptable = 1;
 800fe80:	2301      	movs	r3, #1
 800fe82:	76fb      	strb	r3, [r7, #27]
 800fe84:	e020      	b.n	800fec8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe8a:	4b94      	ldr	r3, [pc, #592]	; (80100dc <tcp_process+0x2a0>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d102      	bne.n	800fe98 <tcp_process+0x5c>
        acceptable = 1;
 800fe92:	2301      	movs	r3, #1
 800fe94:	76fb      	strb	r3, [r7, #27]
 800fe96:	e017      	b.n	800fec8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe98:	4b90      	ldr	r3, [pc, #576]	; (80100dc <tcp_process+0x2a0>)
 800fe9a:	681a      	ldr	r2, [r3, #0]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	db10      	blt.n	800fec8 <tcp_process+0x8c>
 800fea6:	4b8d      	ldr	r3, [pc, #564]	; (80100dc <tcp_process+0x2a0>)
 800fea8:	681a      	ldr	r2, [r3, #0]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feae:	6879      	ldr	r1, [r7, #4]
 800feb0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800feb2:	440b      	add	r3, r1
 800feb4:	1ad3      	subs	r3, r2, r3
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	dc06      	bgt.n	800fec8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	8b5b      	ldrh	r3, [r3, #26]
 800febe:	f043 0302 	orr.w	r3, r3, #2
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fec8:	7efb      	ldrb	r3, [r7, #27]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d01b      	beq.n	800ff06 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	7d1b      	ldrb	r3, [r3, #20]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d106      	bne.n	800fee4 <tcp_process+0xa8>
 800fed6:	4b7c      	ldr	r3, [pc, #496]	; (80100c8 <tcp_process+0x28c>)
 800fed8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fedc:	4980      	ldr	r1, [pc, #512]	; (80100e0 <tcp_process+0x2a4>)
 800fede:	487c      	ldr	r0, [pc, #496]	; (80100d0 <tcp_process+0x294>)
 800fee0:	f007 f936 	bl	8017150 <iprintf>
      recv_flags |= TF_RESET;
 800fee4:	4b7f      	ldr	r3, [pc, #508]	; (80100e4 <tcp_process+0x2a8>)
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	f043 0308 	orr.w	r3, r3, #8
 800feec:	b2da      	uxtb	r2, r3
 800feee:	4b7d      	ldr	r3, [pc, #500]	; (80100e4 <tcp_process+0x2a8>)
 800fef0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	8b5b      	ldrh	r3, [r3, #26]
 800fef6:	f023 0301 	bic.w	r3, r3, #1
 800fefa:	b29a      	uxth	r2, r3
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ff00:	f06f 030d 	mvn.w	r3, #13
 800ff04:	e37a      	b.n	80105fc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ff06:	2300      	movs	r3, #0
 800ff08:	e378      	b.n	80105fc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ff0a:	4b72      	ldr	r3, [pc, #456]	; (80100d4 <tcp_process+0x298>)
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	f003 0302 	and.w	r3, r3, #2
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d010      	beq.n	800ff38 <tcp_process+0xfc>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	7d1b      	ldrb	r3, [r3, #20]
 800ff1a:	2b02      	cmp	r3, #2
 800ff1c:	d00c      	beq.n	800ff38 <tcp_process+0xfc>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	7d1b      	ldrb	r3, [r3, #20]
 800ff22:	2b03      	cmp	r3, #3
 800ff24:	d008      	beq.n	800ff38 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	8b5b      	ldrh	r3, [r3, #26]
 800ff2a:	f043 0302 	orr.w	r3, r3, #2
 800ff2e:	b29a      	uxth	r2, r3
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ff34:	2300      	movs	r3, #0
 800ff36:	e361      	b.n	80105fc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	8b5b      	ldrh	r3, [r3, #26]
 800ff3c:	f003 0310 	and.w	r3, r3, #16
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d103      	bne.n	800ff4c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ff44:	4b68      	ldr	r3, [pc, #416]	; (80100e8 <tcp_process+0x2ac>)
 800ff46:	681a      	ldr	r2, [r3, #0]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2200      	movs	r2, #0
 800ff58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f001 fc2f 	bl	80117c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	7d1b      	ldrb	r3, [r3, #20]
 800ff66:	3b02      	subs	r3, #2
 800ff68:	2b07      	cmp	r3, #7
 800ff6a:	f200 8337 	bhi.w	80105dc <tcp_process+0x7a0>
 800ff6e:	a201      	add	r2, pc, #4	; (adr r2, 800ff74 <tcp_process+0x138>)
 800ff70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff74:	0800ff95 	.word	0x0800ff95
 800ff78:	080101c5 	.word	0x080101c5
 800ff7c:	0801033d 	.word	0x0801033d
 800ff80:	08010367 	.word	0x08010367
 800ff84:	0801048b 	.word	0x0801048b
 800ff88:	0801033d 	.word	0x0801033d
 800ff8c:	08010517 	.word	0x08010517
 800ff90:	080105a7 	.word	0x080105a7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ff94:	4b4f      	ldr	r3, [pc, #316]	; (80100d4 <tcp_process+0x298>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	f003 0310 	and.w	r3, r3, #16
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	f000 80e4 	beq.w	801016a <tcp_process+0x32e>
 800ffa2:	4b4c      	ldr	r3, [pc, #304]	; (80100d4 <tcp_process+0x298>)
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	f003 0302 	and.w	r3, r3, #2
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f000 80dd 	beq.w	801016a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffb4:	1c5a      	adds	r2, r3, #1
 800ffb6:	4b48      	ldr	r3, [pc, #288]	; (80100d8 <tcp_process+0x29c>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	f040 80d5 	bne.w	801016a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ffc0:	4b46      	ldr	r3, [pc, #280]	; (80100dc <tcp_process+0x2a0>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	1c5a      	adds	r2, r3, #1
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ffd2:	4b41      	ldr	r3, [pc, #260]	; (80100d8 <tcp_process+0x29c>)
 800ffd4:	681a      	ldr	r2, [r3, #0]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ffda:	4b44      	ldr	r3, [pc, #272]	; (80100ec <tcp_process+0x2b0>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	89db      	ldrh	r3, [r3, #14]
 800ffe0:	b29a      	uxth	r2, r3
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fff4:	4b39      	ldr	r3, [pc, #228]	; (80100dc <tcp_process+0x2a0>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	1e5a      	subs	r2, r3, #1
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2204      	movs	r2, #4
 8010002:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	3304      	adds	r3, #4
 801000c:	4618      	mov	r0, r3
 801000e:	f005 faa9 	bl	8015564 <ip4_route>
 8010012:	4601      	mov	r1, r0
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	3304      	adds	r3, #4
 8010018:	461a      	mov	r2, r3
 801001a:	4620      	mov	r0, r4
 801001c:	f7ff f88c 	bl	800f138 <tcp_eff_send_mss_netif>
 8010020:	4603      	mov	r3, r0
 8010022:	461a      	mov	r2, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801002c:	009a      	lsls	r2, r3, #2
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010032:	005b      	lsls	r3, r3, #1
 8010034:	f241 111c 	movw	r1, #4380	; 0x111c
 8010038:	428b      	cmp	r3, r1
 801003a:	bf38      	it	cc
 801003c:	460b      	movcc	r3, r1
 801003e:	429a      	cmp	r2, r3
 8010040:	d204      	bcs.n	801004c <tcp_process+0x210>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	b29b      	uxth	r3, r3
 801004a:	e00d      	b.n	8010068 <tcp_process+0x22c>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010050:	005b      	lsls	r3, r3, #1
 8010052:	f241 121c 	movw	r2, #4380	; 0x111c
 8010056:	4293      	cmp	r3, r2
 8010058:	d904      	bls.n	8010064 <tcp_process+0x228>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801005e:	005b      	lsls	r3, r3, #1
 8010060:	b29b      	uxth	r3, r3
 8010062:	e001      	b.n	8010068 <tcp_process+0x22c>
 8010064:	f241 131c 	movw	r3, #4380	; 0x111c
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010074:	2b00      	cmp	r3, #0
 8010076:	d106      	bne.n	8010086 <tcp_process+0x24a>
 8010078:	4b13      	ldr	r3, [pc, #76]	; (80100c8 <tcp_process+0x28c>)
 801007a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801007e:	491c      	ldr	r1, [pc, #112]	; (80100f0 <tcp_process+0x2b4>)
 8010080:	4813      	ldr	r0, [pc, #76]	; (80100d0 <tcp_process+0x294>)
 8010082:	f007 f865 	bl	8017150 <iprintf>
        --pcb->snd_queuelen;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801008c:	3b01      	subs	r3, #1
 801008e:	b29a      	uxth	r2, r3
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801009a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d12a      	bne.n	80100f8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100a6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d106      	bne.n	80100bc <tcp_process+0x280>
 80100ae:	4b06      	ldr	r3, [pc, #24]	; (80100c8 <tcp_process+0x28c>)
 80100b0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80100b4:	490f      	ldr	r1, [pc, #60]	; (80100f4 <tcp_process+0x2b8>)
 80100b6:	4806      	ldr	r0, [pc, #24]	; (80100d0 <tcp_process+0x294>)
 80100b8:	f007 f84a 	bl	8017150 <iprintf>
          pcb->unsent = rseg->next;
 80100bc:	69fb      	ldr	r3, [r7, #28]
 80100be:	681a      	ldr	r2, [r3, #0]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	66da      	str	r2, [r3, #108]	; 0x6c
 80100c4:	e01c      	b.n	8010100 <tcp_process+0x2c4>
 80100c6:	bf00      	nop
 80100c8:	08019d2c 	.word	0x08019d2c
 80100cc:	08019f64 	.word	0x08019f64
 80100d0:	08019d78 	.word	0x08019d78
 80100d4:	2000d34c 	.word	0x2000d34c
 80100d8:	2000d344 	.word	0x2000d344
 80100dc:	2000d340 	.word	0x2000d340
 80100e0:	08019f80 	.word	0x08019f80
 80100e4:	2000d34d 	.word	0x2000d34d
 80100e8:	2000d308 	.word	0x2000d308
 80100ec:	2000d330 	.word	0x2000d330
 80100f0:	08019fa0 	.word	0x08019fa0
 80100f4:	08019fb8 	.word	0x08019fb8
        } else {
          pcb->unacked = rseg->next;
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	681a      	ldr	r2, [r3, #0]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010100:	69f8      	ldr	r0, [r7, #28]
 8010102:	f7fe fc54 	bl	800e9ae <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801010a:	2b00      	cmp	r3, #0
 801010c:	d104      	bne.n	8010118 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010114:	861a      	strh	r2, [r3, #48]	; 0x30
 8010116:	e006      	b.n	8010126 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2200      	movs	r2, #0
 801011c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801012c:	2b00      	cmp	r3, #0
 801012e:	d00a      	beq.n	8010146 <tcp_process+0x30a>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	6910      	ldr	r0, [r2, #16]
 801013a:	2200      	movs	r2, #0
 801013c:	6879      	ldr	r1, [r7, #4]
 801013e:	4798      	blx	r3
 8010140:	4603      	mov	r3, r0
 8010142:	76bb      	strb	r3, [r7, #26]
 8010144:	e001      	b.n	801014a <tcp_process+0x30e>
 8010146:	2300      	movs	r3, #0
 8010148:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801014a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801014e:	f113 0f0d 	cmn.w	r3, #13
 8010152:	d102      	bne.n	801015a <tcp_process+0x31e>
          return ERR_ABRT;
 8010154:	f06f 030c 	mvn.w	r3, #12
 8010158:	e250      	b.n	80105fc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	8b5b      	ldrh	r3, [r3, #26]
 801015e:	f043 0302 	orr.w	r3, r3, #2
 8010162:	b29a      	uxth	r2, r3
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010168:	e23a      	b.n	80105e0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801016a:	4b98      	ldr	r3, [pc, #608]	; (80103cc <tcp_process+0x590>)
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	f003 0310 	and.w	r3, r3, #16
 8010172:	2b00      	cmp	r3, #0
 8010174:	f000 8234 	beq.w	80105e0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010178:	4b95      	ldr	r3, [pc, #596]	; (80103d0 <tcp_process+0x594>)
 801017a:	6819      	ldr	r1, [r3, #0]
 801017c:	4b95      	ldr	r3, [pc, #596]	; (80103d4 <tcp_process+0x598>)
 801017e:	881b      	ldrh	r3, [r3, #0]
 8010180:	461a      	mov	r2, r3
 8010182:	4b95      	ldr	r3, [pc, #596]	; (80103d8 <tcp_process+0x59c>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010188:	4b94      	ldr	r3, [pc, #592]	; (80103dc <tcp_process+0x5a0>)
 801018a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801018c:	885b      	ldrh	r3, [r3, #2]
 801018e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010190:	4a92      	ldr	r2, [pc, #584]	; (80103dc <tcp_process+0x5a0>)
 8010192:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010194:	8812      	ldrh	r2, [r2, #0]
 8010196:	b292      	uxth	r2, r2
 8010198:	9202      	str	r2, [sp, #8]
 801019a:	9301      	str	r3, [sp, #4]
 801019c:	4b90      	ldr	r3, [pc, #576]	; (80103e0 <tcp_process+0x5a4>)
 801019e:	9300      	str	r3, [sp, #0]
 80101a0:	4b90      	ldr	r3, [pc, #576]	; (80103e4 <tcp_process+0x5a8>)
 80101a2:	4602      	mov	r2, r0
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f003 f8dd 	bl	8013364 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101b0:	2b05      	cmp	r3, #5
 80101b2:	f200 8215 	bhi.w	80105e0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2200      	movs	r2, #0
 80101ba:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f002 fea7 	bl	8012f10 <tcp_rexmit_rto>
      break;
 80101c2:	e20d      	b.n	80105e0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80101c4:	4b81      	ldr	r3, [pc, #516]	; (80103cc <tcp_process+0x590>)
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	f003 0310 	and.w	r3, r3, #16
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	f000 80a1 	beq.w	8010314 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80101d2:	4b7f      	ldr	r3, [pc, #508]	; (80103d0 <tcp_process+0x594>)
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101da:	1ad3      	subs	r3, r2, r3
 80101dc:	3b01      	subs	r3, #1
 80101de:	2b00      	cmp	r3, #0
 80101e0:	db7e      	blt.n	80102e0 <tcp_process+0x4a4>
 80101e2:	4b7b      	ldr	r3, [pc, #492]	; (80103d0 <tcp_process+0x594>)
 80101e4:	681a      	ldr	r2, [r3, #0]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101ea:	1ad3      	subs	r3, r2, r3
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	dc77      	bgt.n	80102e0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2204      	movs	r2, #4
 80101f4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d102      	bne.n	8010204 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80101fe:	23fa      	movs	r3, #250	; 0xfa
 8010200:	76bb      	strb	r3, [r7, #26]
 8010202:	e01d      	b.n	8010240 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010208:	699b      	ldr	r3, [r3, #24]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d106      	bne.n	801021c <tcp_process+0x3e0>
 801020e:	4b76      	ldr	r3, [pc, #472]	; (80103e8 <tcp_process+0x5ac>)
 8010210:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010214:	4975      	ldr	r1, [pc, #468]	; (80103ec <tcp_process+0x5b0>)
 8010216:	4876      	ldr	r0, [pc, #472]	; (80103f0 <tcp_process+0x5b4>)
 8010218:	f006 ff9a 	bl	8017150 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010220:	699b      	ldr	r3, [r3, #24]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d00a      	beq.n	801023c <tcp_process+0x400>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801022a:	699b      	ldr	r3, [r3, #24]
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	6910      	ldr	r0, [r2, #16]
 8010230:	2200      	movs	r2, #0
 8010232:	6879      	ldr	r1, [r7, #4]
 8010234:	4798      	blx	r3
 8010236:	4603      	mov	r3, r0
 8010238:	76bb      	strb	r3, [r7, #26]
 801023a:	e001      	b.n	8010240 <tcp_process+0x404>
 801023c:	23f0      	movs	r3, #240	; 0xf0
 801023e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010240:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d00a      	beq.n	801025e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010248:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801024c:	f113 0f0d 	cmn.w	r3, #13
 8010250:	d002      	beq.n	8010258 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f7fd fde2 	bl	800de1c <tcp_abort>
            }
            return ERR_ABRT;
 8010258:	f06f 030c 	mvn.w	r3, #12
 801025c:	e1ce      	b.n	80105fc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 fae0 	bl	8010824 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010264:	4b63      	ldr	r3, [pc, #396]	; (80103f4 <tcp_process+0x5b8>)
 8010266:	881b      	ldrh	r3, [r3, #0]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d005      	beq.n	8010278 <tcp_process+0x43c>
            recv_acked--;
 801026c:	4b61      	ldr	r3, [pc, #388]	; (80103f4 <tcp_process+0x5b8>)
 801026e:	881b      	ldrh	r3, [r3, #0]
 8010270:	3b01      	subs	r3, #1
 8010272:	b29a      	uxth	r2, r3
 8010274:	4b5f      	ldr	r3, [pc, #380]	; (80103f4 <tcp_process+0x5b8>)
 8010276:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801027c:	009a      	lsls	r2, r3, #2
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010282:	005b      	lsls	r3, r3, #1
 8010284:	f241 111c 	movw	r1, #4380	; 0x111c
 8010288:	428b      	cmp	r3, r1
 801028a:	bf38      	it	cc
 801028c:	460b      	movcc	r3, r1
 801028e:	429a      	cmp	r2, r3
 8010290:	d204      	bcs.n	801029c <tcp_process+0x460>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010296:	009b      	lsls	r3, r3, #2
 8010298:	b29b      	uxth	r3, r3
 801029a:	e00d      	b.n	80102b8 <tcp_process+0x47c>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102a0:	005b      	lsls	r3, r3, #1
 80102a2:	f241 121c 	movw	r2, #4380	; 0x111c
 80102a6:	4293      	cmp	r3, r2
 80102a8:	d904      	bls.n	80102b4 <tcp_process+0x478>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102ae:	005b      	lsls	r3, r3, #1
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	e001      	b.n	80102b8 <tcp_process+0x47c>
 80102b4:	f241 131c 	movw	r3, #4380	; 0x111c
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80102be:	4b4e      	ldr	r3, [pc, #312]	; (80103f8 <tcp_process+0x5bc>)
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	f003 0320 	and.w	r3, r3, #32
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d037      	beq.n	801033a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	8b5b      	ldrh	r3, [r3, #26]
 80102ce:	f043 0302 	orr.w	r3, r3, #2
 80102d2:	b29a      	uxth	r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2207      	movs	r2, #7
 80102dc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80102de:	e02c      	b.n	801033a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102e0:	4b3b      	ldr	r3, [pc, #236]	; (80103d0 <tcp_process+0x594>)
 80102e2:	6819      	ldr	r1, [r3, #0]
 80102e4:	4b3b      	ldr	r3, [pc, #236]	; (80103d4 <tcp_process+0x598>)
 80102e6:	881b      	ldrh	r3, [r3, #0]
 80102e8:	461a      	mov	r2, r3
 80102ea:	4b3b      	ldr	r3, [pc, #236]	; (80103d8 <tcp_process+0x59c>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102f0:	4b3a      	ldr	r3, [pc, #232]	; (80103dc <tcp_process+0x5a0>)
 80102f2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102f4:	885b      	ldrh	r3, [r3, #2]
 80102f6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102f8:	4a38      	ldr	r2, [pc, #224]	; (80103dc <tcp_process+0x5a0>)
 80102fa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102fc:	8812      	ldrh	r2, [r2, #0]
 80102fe:	b292      	uxth	r2, r2
 8010300:	9202      	str	r2, [sp, #8]
 8010302:	9301      	str	r3, [sp, #4]
 8010304:	4b36      	ldr	r3, [pc, #216]	; (80103e0 <tcp_process+0x5a4>)
 8010306:	9300      	str	r3, [sp, #0]
 8010308:	4b36      	ldr	r3, [pc, #216]	; (80103e4 <tcp_process+0x5a8>)
 801030a:	4602      	mov	r2, r0
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f003 f829 	bl	8013364 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010312:	e167      	b.n	80105e4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010314:	4b2d      	ldr	r3, [pc, #180]	; (80103cc <tcp_process+0x590>)
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	f003 0302 	and.w	r3, r3, #2
 801031c:	2b00      	cmp	r3, #0
 801031e:	f000 8161 	beq.w	80105e4 <tcp_process+0x7a8>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010326:	1e5a      	subs	r2, r3, #1
 8010328:	4b2b      	ldr	r3, [pc, #172]	; (80103d8 <tcp_process+0x59c>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	429a      	cmp	r2, r3
 801032e:	f040 8159 	bne.w	80105e4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f002 fe0e 	bl	8012f54 <tcp_rexmit>
      break;
 8010338:	e154      	b.n	80105e4 <tcp_process+0x7a8>
 801033a:	e153      	b.n	80105e4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f000 fa71 	bl	8010824 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010342:	4b2d      	ldr	r3, [pc, #180]	; (80103f8 <tcp_process+0x5bc>)
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	f003 0320 	and.w	r3, r3, #32
 801034a:	2b00      	cmp	r3, #0
 801034c:	f000 814c 	beq.w	80105e8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	8b5b      	ldrh	r3, [r3, #26]
 8010354:	f043 0302 	orr.w	r3, r3, #2
 8010358:	b29a      	uxth	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2207      	movs	r2, #7
 8010362:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010364:	e140      	b.n	80105e8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f000 fa5c 	bl	8010824 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801036c:	4b22      	ldr	r3, [pc, #136]	; (80103f8 <tcp_process+0x5bc>)
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	f003 0320 	and.w	r3, r3, #32
 8010374:	2b00      	cmp	r3, #0
 8010376:	d071      	beq.n	801045c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010378:	4b14      	ldr	r3, [pc, #80]	; (80103cc <tcp_process+0x590>)
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	f003 0310 	and.w	r3, r3, #16
 8010380:	2b00      	cmp	r3, #0
 8010382:	d060      	beq.n	8010446 <tcp_process+0x60a>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010388:	4b11      	ldr	r3, [pc, #68]	; (80103d0 <tcp_process+0x594>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	429a      	cmp	r2, r3
 801038e:	d15a      	bne.n	8010446 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010394:	2b00      	cmp	r3, #0
 8010396:	d156      	bne.n	8010446 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	8b5b      	ldrh	r3, [r3, #26]
 801039c:	f043 0302 	orr.w	r3, r3, #2
 80103a0:	b29a      	uxth	r2, r3
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f7fe fdbc 	bl	800ef24 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80103ac:	4b13      	ldr	r3, [pc, #76]	; (80103fc <tcp_process+0x5c0>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	687a      	ldr	r2, [r7, #4]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d105      	bne.n	80103c2 <tcp_process+0x586>
 80103b6:	4b11      	ldr	r3, [pc, #68]	; (80103fc <tcp_process+0x5c0>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	68db      	ldr	r3, [r3, #12]
 80103bc:	4a0f      	ldr	r2, [pc, #60]	; (80103fc <tcp_process+0x5c0>)
 80103be:	6013      	str	r3, [r2, #0]
 80103c0:	e02e      	b.n	8010420 <tcp_process+0x5e4>
 80103c2:	4b0e      	ldr	r3, [pc, #56]	; (80103fc <tcp_process+0x5c0>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	617b      	str	r3, [r7, #20]
 80103c8:	e027      	b.n	801041a <tcp_process+0x5de>
 80103ca:	bf00      	nop
 80103cc:	2000d34c 	.word	0x2000d34c
 80103d0:	2000d344 	.word	0x2000d344
 80103d4:	2000d34a 	.word	0x2000d34a
 80103d8:	2000d340 	.word	0x2000d340
 80103dc:	2000d330 	.word	0x2000d330
 80103e0:	20009bc4 	.word	0x20009bc4
 80103e4:	20009bc8 	.word	0x20009bc8
 80103e8:	08019d2c 	.word	0x08019d2c
 80103ec:	08019fcc 	.word	0x08019fcc
 80103f0:	08019d78 	.word	0x08019d78
 80103f4:	2000d348 	.word	0x2000d348
 80103f8:	2000d34d 	.word	0x2000d34d
 80103fc:	2000d314 	.word	0x2000d314
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	68db      	ldr	r3, [r3, #12]
 8010404:	687a      	ldr	r2, [r7, #4]
 8010406:	429a      	cmp	r2, r3
 8010408:	d104      	bne.n	8010414 <tcp_process+0x5d8>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	68da      	ldr	r2, [r3, #12]
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	60da      	str	r2, [r3, #12]
 8010412:	e005      	b.n	8010420 <tcp_process+0x5e4>
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	68db      	ldr	r3, [r3, #12]
 8010418:	617b      	str	r3, [r7, #20]
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d1ef      	bne.n	8010400 <tcp_process+0x5c4>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	60da      	str	r2, [r3, #12]
 8010426:	4b77      	ldr	r3, [pc, #476]	; (8010604 <tcp_process+0x7c8>)
 8010428:	2201      	movs	r2, #1
 801042a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	220a      	movs	r2, #10
 8010430:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010432:	4b75      	ldr	r3, [pc, #468]	; (8010608 <tcp_process+0x7cc>)
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	60da      	str	r2, [r3, #12]
 801043a:	4a73      	ldr	r2, [pc, #460]	; (8010608 <tcp_process+0x7cc>)
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6013      	str	r3, [r2, #0]
 8010440:	f003 f952 	bl	80136e8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010444:	e0d2      	b.n	80105ec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	8b5b      	ldrh	r3, [r3, #26]
 801044a:	f043 0302 	orr.w	r3, r3, #2
 801044e:	b29a      	uxth	r2, r3
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2208      	movs	r2, #8
 8010458:	751a      	strb	r2, [r3, #20]
      break;
 801045a:	e0c7      	b.n	80105ec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801045c:	4b6b      	ldr	r3, [pc, #428]	; (801060c <tcp_process+0x7d0>)
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	f003 0310 	and.w	r3, r3, #16
 8010464:	2b00      	cmp	r3, #0
 8010466:	f000 80c1 	beq.w	80105ec <tcp_process+0x7b0>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801046e:	4b68      	ldr	r3, [pc, #416]	; (8010610 <tcp_process+0x7d4>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	429a      	cmp	r2, r3
 8010474:	f040 80ba 	bne.w	80105ec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801047c:	2b00      	cmp	r3, #0
 801047e:	f040 80b5 	bne.w	80105ec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2206      	movs	r2, #6
 8010486:	751a      	strb	r2, [r3, #20]
      break;
 8010488:	e0b0      	b.n	80105ec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f000 f9ca 	bl	8010824 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010490:	4b60      	ldr	r3, [pc, #384]	; (8010614 <tcp_process+0x7d8>)
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	f003 0320 	and.w	r3, r3, #32
 8010498:	2b00      	cmp	r3, #0
 801049a:	f000 80a9 	beq.w	80105f0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	8b5b      	ldrh	r3, [r3, #26]
 80104a2:	f043 0302 	orr.w	r3, r3, #2
 80104a6:	b29a      	uxth	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f7fe fd39 	bl	800ef24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80104b2:	4b59      	ldr	r3, [pc, #356]	; (8010618 <tcp_process+0x7dc>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d105      	bne.n	80104c8 <tcp_process+0x68c>
 80104bc:	4b56      	ldr	r3, [pc, #344]	; (8010618 <tcp_process+0x7dc>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	68db      	ldr	r3, [r3, #12]
 80104c2:	4a55      	ldr	r2, [pc, #340]	; (8010618 <tcp_process+0x7dc>)
 80104c4:	6013      	str	r3, [r2, #0]
 80104c6:	e013      	b.n	80104f0 <tcp_process+0x6b4>
 80104c8:	4b53      	ldr	r3, [pc, #332]	; (8010618 <tcp_process+0x7dc>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	613b      	str	r3, [r7, #16]
 80104ce:	e00c      	b.n	80104ea <tcp_process+0x6ae>
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d104      	bne.n	80104e4 <tcp_process+0x6a8>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	68da      	ldr	r2, [r3, #12]
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	60da      	str	r2, [r3, #12]
 80104e2:	e005      	b.n	80104f0 <tcp_process+0x6b4>
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	613b      	str	r3, [r7, #16]
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d1ef      	bne.n	80104d0 <tcp_process+0x694>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2200      	movs	r2, #0
 80104f4:	60da      	str	r2, [r3, #12]
 80104f6:	4b43      	ldr	r3, [pc, #268]	; (8010604 <tcp_process+0x7c8>)
 80104f8:	2201      	movs	r2, #1
 80104fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	220a      	movs	r2, #10
 8010500:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010502:	4b41      	ldr	r3, [pc, #260]	; (8010608 <tcp_process+0x7cc>)
 8010504:	681a      	ldr	r2, [r3, #0]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	60da      	str	r2, [r3, #12]
 801050a:	4a3f      	ldr	r2, [pc, #252]	; (8010608 <tcp_process+0x7cc>)
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6013      	str	r3, [r2, #0]
 8010510:	f003 f8ea 	bl	80136e8 <tcp_timer_needed>
      }
      break;
 8010514:	e06c      	b.n	80105f0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f000 f984 	bl	8010824 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801051c:	4b3b      	ldr	r3, [pc, #236]	; (801060c <tcp_process+0x7d0>)
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	f003 0310 	and.w	r3, r3, #16
 8010524:	2b00      	cmp	r3, #0
 8010526:	d065      	beq.n	80105f4 <tcp_process+0x7b8>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801052c:	4b38      	ldr	r3, [pc, #224]	; (8010610 <tcp_process+0x7d4>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	429a      	cmp	r2, r3
 8010532:	d15f      	bne.n	80105f4 <tcp_process+0x7b8>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010538:	2b00      	cmp	r3, #0
 801053a:	d15b      	bne.n	80105f4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f7fe fcf1 	bl	800ef24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010542:	4b35      	ldr	r3, [pc, #212]	; (8010618 <tcp_process+0x7dc>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	429a      	cmp	r2, r3
 801054a:	d105      	bne.n	8010558 <tcp_process+0x71c>
 801054c:	4b32      	ldr	r3, [pc, #200]	; (8010618 <tcp_process+0x7dc>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	4a31      	ldr	r2, [pc, #196]	; (8010618 <tcp_process+0x7dc>)
 8010554:	6013      	str	r3, [r2, #0]
 8010556:	e013      	b.n	8010580 <tcp_process+0x744>
 8010558:	4b2f      	ldr	r3, [pc, #188]	; (8010618 <tcp_process+0x7dc>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	60fb      	str	r3, [r7, #12]
 801055e:	e00c      	b.n	801057a <tcp_process+0x73e>
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	429a      	cmp	r2, r3
 8010568:	d104      	bne.n	8010574 <tcp_process+0x738>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	68da      	ldr	r2, [r3, #12]
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	60da      	str	r2, [r3, #12]
 8010572:	e005      	b.n	8010580 <tcp_process+0x744>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	68db      	ldr	r3, [r3, #12]
 8010578:	60fb      	str	r3, [r7, #12]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d1ef      	bne.n	8010560 <tcp_process+0x724>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	60da      	str	r2, [r3, #12]
 8010586:	4b1f      	ldr	r3, [pc, #124]	; (8010604 <tcp_process+0x7c8>)
 8010588:	2201      	movs	r2, #1
 801058a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	220a      	movs	r2, #10
 8010590:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010592:	4b1d      	ldr	r3, [pc, #116]	; (8010608 <tcp_process+0x7cc>)
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	60da      	str	r2, [r3, #12]
 801059a:	4a1b      	ldr	r2, [pc, #108]	; (8010608 <tcp_process+0x7cc>)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6013      	str	r3, [r2, #0]
 80105a0:	f003 f8a2 	bl	80136e8 <tcp_timer_needed>
      }
      break;
 80105a4:	e026      	b.n	80105f4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f000 f93c 	bl	8010824 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80105ac:	4b17      	ldr	r3, [pc, #92]	; (801060c <tcp_process+0x7d0>)
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	f003 0310 	and.w	r3, r3, #16
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d01f      	beq.n	80105f8 <tcp_process+0x7bc>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105bc:	4b14      	ldr	r3, [pc, #80]	; (8010610 <tcp_process+0x7d4>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d119      	bne.n	80105f8 <tcp_process+0x7bc>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d115      	bne.n	80105f8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80105cc:	4b11      	ldr	r3, [pc, #68]	; (8010614 <tcp_process+0x7d8>)
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	f043 0310 	orr.w	r3, r3, #16
 80105d4:	b2da      	uxtb	r2, r3
 80105d6:	4b0f      	ldr	r3, [pc, #60]	; (8010614 <tcp_process+0x7d8>)
 80105d8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80105da:	e00d      	b.n	80105f8 <tcp_process+0x7bc>
    default:
      break;
 80105dc:	bf00      	nop
 80105de:	e00c      	b.n	80105fa <tcp_process+0x7be>
      break;
 80105e0:	bf00      	nop
 80105e2:	e00a      	b.n	80105fa <tcp_process+0x7be>
      break;
 80105e4:	bf00      	nop
 80105e6:	e008      	b.n	80105fa <tcp_process+0x7be>
      break;
 80105e8:	bf00      	nop
 80105ea:	e006      	b.n	80105fa <tcp_process+0x7be>
      break;
 80105ec:	bf00      	nop
 80105ee:	e004      	b.n	80105fa <tcp_process+0x7be>
      break;
 80105f0:	bf00      	nop
 80105f2:	e002      	b.n	80105fa <tcp_process+0x7be>
      break;
 80105f4:	bf00      	nop
 80105f6:	e000      	b.n	80105fa <tcp_process+0x7be>
      break;
 80105f8:	bf00      	nop
  }
  return ERR_OK;
 80105fa:	2300      	movs	r3, #0
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3724      	adds	r7, #36	; 0x24
 8010600:	46bd      	mov	sp, r7
 8010602:	bd90      	pop	{r4, r7, pc}
 8010604:	2000d31c 	.word	0x2000d31c
 8010608:	2000d318 	.word	0x2000d318
 801060c:	2000d34c 	.word	0x2000d34c
 8010610:	2000d344 	.word	0x2000d344
 8010614:	2000d34d 	.word	0x2000d34d
 8010618:	2000d314 	.word	0x2000d314

0801061c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801061c:	b590      	push	{r4, r7, lr}
 801061e:	b085      	sub	sp, #20
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d106      	bne.n	801063a <tcp_oos_insert_segment+0x1e>
 801062c:	4b3b      	ldr	r3, [pc, #236]	; (801071c <tcp_oos_insert_segment+0x100>)
 801062e:	f240 421f 	movw	r2, #1055	; 0x41f
 8010632:	493b      	ldr	r1, [pc, #236]	; (8010720 <tcp_oos_insert_segment+0x104>)
 8010634:	483b      	ldr	r0, [pc, #236]	; (8010724 <tcp_oos_insert_segment+0x108>)
 8010636:	f006 fd8b 	bl	8017150 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	899b      	ldrh	r3, [r3, #12]
 8010640:	b29b      	uxth	r3, r3
 8010642:	4618      	mov	r0, r3
 8010644:	f7fb faa2 	bl	800bb8c <lwip_htons>
 8010648:	4603      	mov	r3, r0
 801064a:	b2db      	uxtb	r3, r3
 801064c:	f003 0301 	and.w	r3, r3, #1
 8010650:	2b00      	cmp	r3, #0
 8010652:	d028      	beq.n	80106a6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010654:	6838      	ldr	r0, [r7, #0]
 8010656:	f7fe f995 	bl	800e984 <tcp_segs_free>
    next = NULL;
 801065a:	2300      	movs	r3, #0
 801065c:	603b      	str	r3, [r7, #0]
 801065e:	e056      	b.n	801070e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	899b      	ldrh	r3, [r3, #12]
 8010666:	b29b      	uxth	r3, r3
 8010668:	4618      	mov	r0, r3
 801066a:	f7fb fa8f 	bl	800bb8c <lwip_htons>
 801066e:	4603      	mov	r3, r0
 8010670:	b2db      	uxtb	r3, r3
 8010672:	f003 0301 	and.w	r3, r3, #1
 8010676:	2b00      	cmp	r3, #0
 8010678:	d00d      	beq.n	8010696 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	899b      	ldrh	r3, [r3, #12]
 8010680:	b29c      	uxth	r4, r3
 8010682:	2001      	movs	r0, #1
 8010684:	f7fb fa82 	bl	800bb8c <lwip_htons>
 8010688:	4603      	mov	r3, r0
 801068a:	461a      	mov	r2, r3
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	4322      	orrs	r2, r4
 8010692:	b292      	uxth	r2, r2
 8010694:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80106a0:	68f8      	ldr	r0, [r7, #12]
 80106a2:	f7fe f984 	bl	800e9ae <tcp_seg_free>
    while (next &&
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d00e      	beq.n	80106ca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	891b      	ldrh	r3, [r3, #8]
 80106b0:	461a      	mov	r2, r3
 80106b2:	4b1d      	ldr	r3, [pc, #116]	; (8010728 <tcp_oos_insert_segment+0x10c>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	441a      	add	r2, r3
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	68db      	ldr	r3, [r3, #12]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	6839      	ldr	r1, [r7, #0]
 80106c0:	8909      	ldrh	r1, [r1, #8]
 80106c2:	440b      	add	r3, r1
 80106c4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	daca      	bge.n	8010660 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d01e      	beq.n	801070e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	891b      	ldrh	r3, [r3, #8]
 80106d4:	461a      	mov	r2, r3
 80106d6:	4b14      	ldr	r3, [pc, #80]	; (8010728 <tcp_oos_insert_segment+0x10c>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	441a      	add	r2, r3
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	68db      	ldr	r3, [r3, #12]
 80106e0:	685b      	ldr	r3, [r3, #4]
 80106e2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	dd12      	ble.n	801070e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	68db      	ldr	r3, [r3, #12]
 80106ec:	685b      	ldr	r3, [r3, #4]
 80106ee:	b29a      	uxth	r2, r3
 80106f0:	4b0d      	ldr	r3, [pc, #52]	; (8010728 <tcp_oos_insert_segment+0x10c>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	1ad3      	subs	r3, r2, r3
 80106f8:	b29a      	uxth	r2, r3
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	685a      	ldr	r2, [r3, #4]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	891b      	ldrh	r3, [r3, #8]
 8010706:	4619      	mov	r1, r3
 8010708:	4610      	mov	r0, r2
 801070a:	f7fc fc01 	bl	800cf10 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	683a      	ldr	r2, [r7, #0]
 8010712:	601a      	str	r2, [r3, #0]
}
 8010714:	bf00      	nop
 8010716:	3714      	adds	r7, #20
 8010718:	46bd      	mov	sp, r7
 801071a:	bd90      	pop	{r4, r7, pc}
 801071c:	08019d2c 	.word	0x08019d2c
 8010720:	08019fec 	.word	0x08019fec
 8010724:	08019d78 	.word	0x08019d78
 8010728:	2000d340 	.word	0x2000d340

0801072c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801072c:	b5b0      	push	{r4, r5, r7, lr}
 801072e:	b086      	sub	sp, #24
 8010730:	af00      	add	r7, sp, #0
 8010732:	60f8      	str	r0, [r7, #12]
 8010734:	60b9      	str	r1, [r7, #8]
 8010736:	607a      	str	r2, [r7, #4]
 8010738:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801073a:	e03e      	b.n	80107ba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	685b      	ldr	r3, [r3, #4]
 801074a:	4618      	mov	r0, r3
 801074c:	f7fc fdf4 	bl	800d338 <pbuf_clen>
 8010750:	4603      	mov	r3, r0
 8010752:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801075a:	8a7a      	ldrh	r2, [r7, #18]
 801075c:	429a      	cmp	r2, r3
 801075e:	d906      	bls.n	801076e <tcp_free_acked_segments+0x42>
 8010760:	4b2a      	ldr	r3, [pc, #168]	; (801080c <tcp_free_acked_segments+0xe0>)
 8010762:	f240 4257 	movw	r2, #1111	; 0x457
 8010766:	492a      	ldr	r1, [pc, #168]	; (8010810 <tcp_free_acked_segments+0xe4>)
 8010768:	482a      	ldr	r0, [pc, #168]	; (8010814 <tcp_free_acked_segments+0xe8>)
 801076a:	f006 fcf1 	bl	8017150 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010774:	8a7b      	ldrh	r3, [r7, #18]
 8010776:	1ad3      	subs	r3, r2, r3
 8010778:	b29a      	uxth	r2, r3
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	891a      	ldrh	r2, [r3, #8]
 8010784:	4b24      	ldr	r3, [pc, #144]	; (8010818 <tcp_free_acked_segments+0xec>)
 8010786:	881b      	ldrh	r3, [r3, #0]
 8010788:	4413      	add	r3, r2
 801078a:	b29a      	uxth	r2, r3
 801078c:	4b22      	ldr	r3, [pc, #136]	; (8010818 <tcp_free_acked_segments+0xec>)
 801078e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010790:	6978      	ldr	r0, [r7, #20]
 8010792:	f7fe f90c 	bl	800e9ae <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801079c:	2b00      	cmp	r3, #0
 801079e:	d00c      	beq.n	80107ba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d109      	bne.n	80107ba <tcp_free_acked_segments+0x8e>
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d106      	bne.n	80107ba <tcp_free_acked_segments+0x8e>
 80107ac:	4b17      	ldr	r3, [pc, #92]	; (801080c <tcp_free_acked_segments+0xe0>)
 80107ae:	f240 4261 	movw	r2, #1121	; 0x461
 80107b2:	491a      	ldr	r1, [pc, #104]	; (801081c <tcp_free_acked_segments+0xf0>)
 80107b4:	4817      	ldr	r0, [pc, #92]	; (8010814 <tcp_free_acked_segments+0xe8>)
 80107b6:	f006 fccb 	bl	8017150 <iprintf>
  while (seg_list != NULL &&
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d020      	beq.n	8010802 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7fb f9f5 	bl	800bbb6 <lwip_htonl>
 80107cc:	4604      	mov	r4, r0
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	891b      	ldrh	r3, [r3, #8]
 80107d2:	461d      	mov	r5, r3
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	68db      	ldr	r3, [r3, #12]
 80107d8:	899b      	ldrh	r3, [r3, #12]
 80107da:	b29b      	uxth	r3, r3
 80107dc:	4618      	mov	r0, r3
 80107de:	f7fb f9d5 	bl	800bb8c <lwip_htons>
 80107e2:	4603      	mov	r3, r0
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	f003 0303 	and.w	r3, r3, #3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d001      	beq.n	80107f2 <tcp_free_acked_segments+0xc6>
 80107ee:	2301      	movs	r3, #1
 80107f0:	e000      	b.n	80107f4 <tcp_free_acked_segments+0xc8>
 80107f2:	2300      	movs	r3, #0
 80107f4:	442b      	add	r3, r5
 80107f6:	18e2      	adds	r2, r4, r3
 80107f8:	4b09      	ldr	r3, [pc, #36]	; (8010820 <tcp_free_acked_segments+0xf4>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80107fe:	2b00      	cmp	r3, #0
 8010800:	dd9c      	ble.n	801073c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010802:	68bb      	ldr	r3, [r7, #8]
}
 8010804:	4618      	mov	r0, r3
 8010806:	3718      	adds	r7, #24
 8010808:	46bd      	mov	sp, r7
 801080a:	bdb0      	pop	{r4, r5, r7, pc}
 801080c:	08019d2c 	.word	0x08019d2c
 8010810:	0801a014 	.word	0x0801a014
 8010814:	08019d78 	.word	0x08019d78
 8010818:	2000d348 	.word	0x2000d348
 801081c:	0801a03c 	.word	0x0801a03c
 8010820:	2000d344 	.word	0x2000d344

08010824 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010824:	b5b0      	push	{r4, r5, r7, lr}
 8010826:	b094      	sub	sp, #80	; 0x50
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801082c:	2300      	movs	r3, #0
 801082e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d106      	bne.n	8010844 <tcp_receive+0x20>
 8010836:	4b91      	ldr	r3, [pc, #580]	; (8010a7c <tcp_receive+0x258>)
 8010838:	f240 427b 	movw	r2, #1147	; 0x47b
 801083c:	4990      	ldr	r1, [pc, #576]	; (8010a80 <tcp_receive+0x25c>)
 801083e:	4891      	ldr	r0, [pc, #580]	; (8010a84 <tcp_receive+0x260>)
 8010840:	f006 fc86 	bl	8017150 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	7d1b      	ldrb	r3, [r3, #20]
 8010848:	2b03      	cmp	r3, #3
 801084a:	d806      	bhi.n	801085a <tcp_receive+0x36>
 801084c:	4b8b      	ldr	r3, [pc, #556]	; (8010a7c <tcp_receive+0x258>)
 801084e:	f240 427c 	movw	r2, #1148	; 0x47c
 8010852:	498d      	ldr	r1, [pc, #564]	; (8010a88 <tcp_receive+0x264>)
 8010854:	488b      	ldr	r0, [pc, #556]	; (8010a84 <tcp_receive+0x260>)
 8010856:	f006 fc7b 	bl	8017150 <iprintf>

  if (flags & TCP_ACK) {
 801085a:	4b8c      	ldr	r3, [pc, #560]	; (8010a8c <tcp_receive+0x268>)
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	f003 0310 	and.w	r3, r3, #16
 8010862:	2b00      	cmp	r3, #0
 8010864:	f000 8264 	beq.w	8010d30 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801086e:	461a      	mov	r2, r3
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010874:	4413      	add	r3, r2
 8010876:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801087c:	4b84      	ldr	r3, [pc, #528]	; (8010a90 <tcp_receive+0x26c>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	1ad3      	subs	r3, r2, r3
 8010882:	2b00      	cmp	r3, #0
 8010884:	db1b      	blt.n	80108be <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801088a:	4b81      	ldr	r3, [pc, #516]	; (8010a90 <tcp_receive+0x26c>)
 801088c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801088e:	429a      	cmp	r2, r3
 8010890:	d106      	bne.n	80108a0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010896:	4b7f      	ldr	r3, [pc, #508]	; (8010a94 <tcp_receive+0x270>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	1ad3      	subs	r3, r2, r3
 801089c:	2b00      	cmp	r3, #0
 801089e:	db0e      	blt.n	80108be <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80108a4:	4b7b      	ldr	r3, [pc, #492]	; (8010a94 <tcp_receive+0x270>)
 80108a6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d125      	bne.n	80108f8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80108ac:	4b7a      	ldr	r3, [pc, #488]	; (8010a98 <tcp_receive+0x274>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	89db      	ldrh	r3, [r3, #14]
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d91c      	bls.n	80108f8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80108be:	4b76      	ldr	r3, [pc, #472]	; (8010a98 <tcp_receive+0x274>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	89db      	ldrh	r3, [r3, #14]
 80108c4:	b29a      	uxth	r2, r3
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80108d8:	429a      	cmp	r2, r3
 80108da:	d205      	bcs.n	80108e8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80108e8:	4b69      	ldr	r3, [pc, #420]	; (8010a90 <tcp_receive+0x26c>)
 80108ea:	681a      	ldr	r2, [r3, #0]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80108f0:	4b68      	ldr	r3, [pc, #416]	; (8010a94 <tcp_receive+0x270>)
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80108f8:	4b66      	ldr	r3, [pc, #408]	; (8010a94 <tcp_receive+0x270>)
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010900:	1ad3      	subs	r3, r2, r3
 8010902:	2b00      	cmp	r3, #0
 8010904:	dc58      	bgt.n	80109b8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010906:	4b65      	ldr	r3, [pc, #404]	; (8010a9c <tcp_receive+0x278>)
 8010908:	881b      	ldrh	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d14b      	bne.n	80109a6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010912:	687a      	ldr	r2, [r7, #4]
 8010914:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010918:	4413      	add	r3, r2
 801091a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801091c:	429a      	cmp	r2, r3
 801091e:	d142      	bne.n	80109a6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010926:	2b00      	cmp	r3, #0
 8010928:	db3d      	blt.n	80109a6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801092e:	4b59      	ldr	r3, [pc, #356]	; (8010a94 <tcp_receive+0x270>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	429a      	cmp	r2, r3
 8010934:	d137      	bne.n	80109a6 <tcp_receive+0x182>
              found_dupack = 1;
 8010936:	2301      	movs	r3, #1
 8010938:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010940:	2bff      	cmp	r3, #255	; 0xff
 8010942:	d007      	beq.n	8010954 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801094a:	3301      	adds	r3, #1
 801094c:	b2da      	uxtb	r2, r3
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801095a:	2b03      	cmp	r3, #3
 801095c:	d91b      	bls.n	8010996 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010968:	4413      	add	r3, r2
 801096a:	b29a      	uxth	r2, r3
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010972:	429a      	cmp	r2, r3
 8010974:	d30a      	bcc.n	801098c <tcp_receive+0x168>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010980:	4413      	add	r3, r2
 8010982:	b29a      	uxth	r2, r3
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801098a:	e004      	b.n	8010996 <tcp_receive+0x172>
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010992:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801099c:	2b02      	cmp	r3, #2
 801099e:	d902      	bls.n	80109a6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f002 fb43 	bl	801302c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80109a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	f040 8161 	bne.w	8010c70 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2200      	movs	r2, #0
 80109b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80109b6:	e15b      	b.n	8010c70 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80109b8:	4b36      	ldr	r3, [pc, #216]	; (8010a94 <tcp_receive+0x270>)
 80109ba:	681a      	ldr	r2, [r3, #0]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109c0:	1ad3      	subs	r3, r2, r3
 80109c2:	3b01      	subs	r3, #1
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	f2c0 814e 	blt.w	8010c66 <tcp_receive+0x442>
 80109ca:	4b32      	ldr	r3, [pc, #200]	; (8010a94 <tcp_receive+0x270>)
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109d2:	1ad3      	subs	r3, r2, r3
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f300 8146 	bgt.w	8010c66 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	8b5b      	ldrh	r3, [r3, #26]
 80109de:	f003 0304 	and.w	r3, r3, #4
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d010      	beq.n	8010a08 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	8b5b      	ldrh	r3, [r3, #26]
 80109ea:	f023 0304 	bic.w	r3, r3, #4
 80109ee:	b29a      	uxth	r2, r3
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2200      	movs	r2, #0
 8010a04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010a16:	10db      	asrs	r3, r3, #3
 8010a18:	b21b      	sxth	r3, r3
 8010a1a:	b29a      	uxth	r2, r3
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	4413      	add	r3, r2
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	b21a      	sxth	r2, r3
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010a30:	4b18      	ldr	r3, [pc, #96]	; (8010a94 <tcp_receive+0x270>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	1ad3      	subs	r3, r2, r3
 8010a3e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2200      	movs	r2, #0
 8010a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010a48:	4b12      	ldr	r3, [pc, #72]	; (8010a94 <tcp_receive+0x270>)
 8010a4a:	681a      	ldr	r2, [r3, #0]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	7d1b      	ldrb	r3, [r3, #20]
 8010a54:	2b03      	cmp	r3, #3
 8010a56:	f240 8097 	bls.w	8010b88 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d245      	bcs.n	8010af6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	8b5b      	ldrh	r3, [r3, #26]
 8010a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d014      	beq.n	8010aa0 <tcp_receive+0x27c>
 8010a76:	2301      	movs	r3, #1
 8010a78:	e013      	b.n	8010aa2 <tcp_receive+0x27e>
 8010a7a:	bf00      	nop
 8010a7c:	08019d2c 	.word	0x08019d2c
 8010a80:	0801a05c 	.word	0x0801a05c
 8010a84:	08019d78 	.word	0x08019d78
 8010a88:	0801a078 	.word	0x0801a078
 8010a8c:	2000d34c 	.word	0x2000d34c
 8010a90:	2000d340 	.word	0x2000d340
 8010a94:	2000d344 	.word	0x2000d344
 8010a98:	2000d330 	.word	0x2000d330
 8010a9c:	2000d34a 	.word	0x2000d34a
 8010aa0:	2302      	movs	r3, #2
 8010aa2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010aa6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ab0:	fb12 f303 	smulbb	r3, r2, r3
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	bf28      	it	cs
 8010abc:	4613      	movcs	r3, r2
 8010abe:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ac6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ac8:	4413      	add	r3, r2
 8010aca:	b29a      	uxth	r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d309      	bcc.n	8010aea <tcp_receive+0x2c6>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010adc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ade:	4413      	add	r3, r2
 8010ae0:	b29a      	uxth	r2, r3
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ae8:	e04e      	b.n	8010b88 <tcp_receive+0x364>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010af0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010af4:	e048      	b.n	8010b88 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010afc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010afe:	4413      	add	r3, r2
 8010b00:	b29a      	uxth	r2, r3
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d309      	bcc.n	8010b20 <tcp_receive+0x2fc>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010b12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010b14:	4413      	add	r3, r2
 8010b16:	b29a      	uxth	r2, r3
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010b1e:	e004      	b.n	8010b2a <tcp_receive+0x306>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d326      	bcc.n	8010b88 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b46:	1ad3      	subs	r3, r2, r3
 8010b48:	b29a      	uxth	r2, r3
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b5a:	4413      	add	r3, r2
 8010b5c:	b29a      	uxth	r2, r3
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d30a      	bcc.n	8010b7e <tcp_receive+0x35a>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b72:	4413      	add	r3, r2
 8010b74:	b29a      	uxth	r2, r3
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010b7c:	e004      	b.n	8010b88 <tcp_receive+0x364>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b90:	4a98      	ldr	r2, [pc, #608]	; (8010df4 <tcp_receive+0x5d0>)
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f7ff fdca 	bl	801072c <tcp_free_acked_segments>
 8010b98:	4602      	mov	r2, r0
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ba6:	4a94      	ldr	r2, [pc, #592]	; (8010df8 <tcp_receive+0x5d4>)
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f7ff fdbf 	bl	801072c <tcp_free_acked_segments>
 8010bae:	4602      	mov	r2, r0
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d104      	bne.n	8010bc6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bc2:	861a      	strh	r2, [r3, #48]	; 0x30
 8010bc4:	e002      	b.n	8010bcc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d103      	bne.n	8010be2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010be8:	4b84      	ldr	r3, [pc, #528]	; (8010dfc <tcp_receive+0x5d8>)
 8010bea:	881b      	ldrh	r3, [r3, #0]
 8010bec:	4413      	add	r3, r2
 8010bee:	b29a      	uxth	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	8b5b      	ldrh	r3, [r3, #26]
 8010bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d035      	beq.n	8010c6e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d118      	bne.n	8010c3c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d00c      	beq.n	8010c2c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fa ffc9 	bl	800bbb6 <lwip_htonl>
 8010c24:	4603      	mov	r3, r0
 8010c26:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	dc20      	bgt.n	8010c6e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	8b5b      	ldrh	r3, [r3, #26]
 8010c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c34:	b29a      	uxth	r2, r3
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c3a:	e018      	b.n	8010c6e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c44:	68db      	ldr	r3, [r3, #12]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7fa ffb4 	bl	800bbb6 <lwip_htonl>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	1ae3      	subs	r3, r4, r3
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	dc0b      	bgt.n	8010c6e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	8b5b      	ldrh	r3, [r3, #26]
 8010c5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c5e:	b29a      	uxth	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c64:	e003      	b.n	8010c6e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f002 fbce 	bl	8013408 <tcp_send_empty_ack>
 8010c6c:	e000      	b.n	8010c70 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c6e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d05b      	beq.n	8010d30 <tcp_receive+0x50c>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c7c:	4b60      	ldr	r3, [pc, #384]	; (8010e00 <tcp_receive+0x5dc>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	1ad3      	subs	r3, r2, r3
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	da54      	bge.n	8010d30 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010c86:	4b5f      	ldr	r3, [pc, #380]	; (8010e04 <tcp_receive+0x5e0>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	b29a      	uxth	r2, r3
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	1ad3      	subs	r3, r2, r3
 8010c94:	b29b      	uxth	r3, r3
 8010c96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010c9a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ca4:	10db      	asrs	r3, r3, #3
 8010ca6:	b21b      	sxth	r3, r3
 8010ca8:	b29b      	uxth	r3, r3
 8010caa:	1ad3      	subs	r3, r2, r3
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010cb8:	b29a      	uxth	r2, r3
 8010cba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010cbe:	4413      	add	r3, r2
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	b21a      	sxth	r2, r3
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010cc8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	da05      	bge.n	8010cdc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010cd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010cd4:	425b      	negs	r3, r3
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010cdc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010ce6:	109b      	asrs	r3, r3, #2
 8010ce8:	b21b      	sxth	r3, r3
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	1ad3      	subs	r3, r2, r3
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010cfa:	b29a      	uxth	r2, r3
 8010cfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010d00:	4413      	add	r3, r2
 8010d02:	b29b      	uxth	r3, r3
 8010d04:	b21a      	sxth	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010d10:	10db      	asrs	r3, r3, #3
 8010d12:	b21b      	sxth	r3, r3
 8010d14:	b29a      	uxth	r2, r3
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	4413      	add	r3, r2
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	b21a      	sxth	r2, r3
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010d30:	4b35      	ldr	r3, [pc, #212]	; (8010e08 <tcp_receive+0x5e4>)
 8010d32:	881b      	ldrh	r3, [r3, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f000 84e2 	beq.w	80116fe <tcp_receive+0xeda>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	7d1b      	ldrb	r3, [r3, #20]
 8010d3e:	2b06      	cmp	r3, #6
 8010d40:	f200 84dd 	bhi.w	80116fe <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d48:	4b30      	ldr	r3, [pc, #192]	; (8010e0c <tcp_receive+0x5e8>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	1ad3      	subs	r3, r2, r3
 8010d4e:	3b01      	subs	r3, #1
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	f2c0 808f 	blt.w	8010e74 <tcp_receive+0x650>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d5a:	4b2b      	ldr	r3, [pc, #172]	; (8010e08 <tcp_receive+0x5e4>)
 8010d5c:	881b      	ldrh	r3, [r3, #0]
 8010d5e:	4619      	mov	r1, r3
 8010d60:	4b2a      	ldr	r3, [pc, #168]	; (8010e0c <tcp_receive+0x5e8>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	440b      	add	r3, r1
 8010d66:	1ad3      	subs	r3, r2, r3
 8010d68:	3301      	adds	r3, #1
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	f300 8082 	bgt.w	8010e74 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010d70:	4b27      	ldr	r3, [pc, #156]	; (8010e10 <tcp_receive+0x5ec>)
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d7a:	4b24      	ldr	r3, [pc, #144]	; (8010e0c <tcp_receive+0x5e8>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	1ad3      	subs	r3, r2, r3
 8010d80:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010d82:	4b23      	ldr	r3, [pc, #140]	; (8010e10 <tcp_receive+0x5ec>)
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d106      	bne.n	8010d98 <tcp_receive+0x574>
 8010d8a:	4b22      	ldr	r3, [pc, #136]	; (8010e14 <tcp_receive+0x5f0>)
 8010d8c:	f240 5294 	movw	r2, #1428	; 0x594
 8010d90:	4921      	ldr	r1, [pc, #132]	; (8010e18 <tcp_receive+0x5f4>)
 8010d92:	4822      	ldr	r0, [pc, #136]	; (8010e1c <tcp_receive+0x5f8>)
 8010d94:	f006 f9dc 	bl	8017150 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d906      	bls.n	8010db0 <tcp_receive+0x58c>
 8010da2:	4b1c      	ldr	r3, [pc, #112]	; (8010e14 <tcp_receive+0x5f0>)
 8010da4:	f240 5295 	movw	r2, #1429	; 0x595
 8010da8:	491d      	ldr	r1, [pc, #116]	; (8010e20 <tcp_receive+0x5fc>)
 8010daa:	481c      	ldr	r0, [pc, #112]	; (8010e1c <tcp_receive+0x5f8>)
 8010dac:	f006 f9d0 	bl	8017150 <iprintf>
      off = (u16_t)off32;
 8010db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010db6:	4b16      	ldr	r3, [pc, #88]	; (8010e10 <tcp_receive+0x5ec>)
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	891b      	ldrh	r3, [r3, #8]
 8010dbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d906      	bls.n	8010dd2 <tcp_receive+0x5ae>
 8010dc4:	4b13      	ldr	r3, [pc, #76]	; (8010e14 <tcp_receive+0x5f0>)
 8010dc6:	f240 5297 	movw	r2, #1431	; 0x597
 8010dca:	4916      	ldr	r1, [pc, #88]	; (8010e24 <tcp_receive+0x600>)
 8010dcc:	4813      	ldr	r0, [pc, #76]	; (8010e1c <tcp_receive+0x5f8>)
 8010dce:	f006 f9bf 	bl	8017150 <iprintf>
      inseg.len -= off;
 8010dd2:	4b0f      	ldr	r3, [pc, #60]	; (8010e10 <tcp_receive+0x5ec>)
 8010dd4:	891a      	ldrh	r2, [r3, #8]
 8010dd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010dda:	1ad3      	subs	r3, r2, r3
 8010ddc:	b29a      	uxth	r2, r3
 8010dde:	4b0c      	ldr	r3, [pc, #48]	; (8010e10 <tcp_receive+0x5ec>)
 8010de0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010de2:	4b0b      	ldr	r3, [pc, #44]	; (8010e10 <tcp_receive+0x5ec>)
 8010de4:	685b      	ldr	r3, [r3, #4]
 8010de6:	891a      	ldrh	r2, [r3, #8]
 8010de8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010dec:	1ad3      	subs	r3, r2, r3
 8010dee:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010df0:	e02a      	b.n	8010e48 <tcp_receive+0x624>
 8010df2:	bf00      	nop
 8010df4:	0801a094 	.word	0x0801a094
 8010df8:	0801a09c 	.word	0x0801a09c
 8010dfc:	2000d348 	.word	0x2000d348
 8010e00:	2000d344 	.word	0x2000d344
 8010e04:	2000d308 	.word	0x2000d308
 8010e08:	2000d34a 	.word	0x2000d34a
 8010e0c:	2000d340 	.word	0x2000d340
 8010e10:	2000d320 	.word	0x2000d320
 8010e14:	08019d2c 	.word	0x08019d2c
 8010e18:	0801a0a4 	.word	0x0801a0a4
 8010e1c:	08019d78 	.word	0x08019d78
 8010e20:	0801a0b4 	.word	0x0801a0b4
 8010e24:	0801a0c4 	.word	0x0801a0c4
        off -= p->len;
 8010e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e2a:	895b      	ldrh	r3, [r3, #10]
 8010e2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e30:	1ad3      	subs	r3, r2, r3
 8010e32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e38:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010e3a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e3e:	2200      	movs	r2, #0
 8010e40:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e4a:	895b      	ldrh	r3, [r3, #10]
 8010e4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d8e9      	bhi.n	8010e28 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010e54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e58:	4619      	mov	r1, r3
 8010e5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010e5c:	f7fc f958 	bl	800d110 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e64:	4a91      	ldr	r2, [pc, #580]	; (80110ac <tcp_receive+0x888>)
 8010e66:	6013      	str	r3, [r2, #0]
 8010e68:	4b91      	ldr	r3, [pc, #580]	; (80110b0 <tcp_receive+0x88c>)
 8010e6a:	68db      	ldr	r3, [r3, #12]
 8010e6c:	4a8f      	ldr	r2, [pc, #572]	; (80110ac <tcp_receive+0x888>)
 8010e6e:	6812      	ldr	r2, [r2, #0]
 8010e70:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e72:	e00d      	b.n	8010e90 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010e74:	4b8d      	ldr	r3, [pc, #564]	; (80110ac <tcp_receive+0x888>)
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e7c:	1ad3      	subs	r3, r2, r3
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	da06      	bge.n	8010e90 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	8b5b      	ldrh	r3, [r3, #26]
 8010e86:	f043 0302 	orr.w	r3, r3, #2
 8010e8a:	b29a      	uxth	r2, r3
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010e90:	4b86      	ldr	r3, [pc, #536]	; (80110ac <tcp_receive+0x888>)
 8010e92:	681a      	ldr	r2, [r3, #0]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e98:	1ad3      	subs	r3, r2, r3
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f2c0 842a 	blt.w	80116f4 <tcp_receive+0xed0>
 8010ea0:	4b82      	ldr	r3, [pc, #520]	; (80110ac <tcp_receive+0x888>)
 8010ea2:	681a      	ldr	r2, [r3, #0]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ea8:	6879      	ldr	r1, [r7, #4]
 8010eaa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010eac:	440b      	add	r3, r1
 8010eae:	1ad3      	subs	r3, r2, r3
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	f300 841e 	bgt.w	80116f4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ebc:	4b7b      	ldr	r3, [pc, #492]	; (80110ac <tcp_receive+0x888>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	f040 829a 	bne.w	80113fa <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010ec6:	4b7a      	ldr	r3, [pc, #488]	; (80110b0 <tcp_receive+0x88c>)
 8010ec8:	891c      	ldrh	r4, [r3, #8]
 8010eca:	4b79      	ldr	r3, [pc, #484]	; (80110b0 <tcp_receive+0x88c>)
 8010ecc:	68db      	ldr	r3, [r3, #12]
 8010ece:	899b      	ldrh	r3, [r3, #12]
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7fa fe5a 	bl	800bb8c <lwip_htons>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	b2db      	uxtb	r3, r3
 8010edc:	f003 0303 	and.w	r3, r3, #3
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d001      	beq.n	8010ee8 <tcp_receive+0x6c4>
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e000      	b.n	8010eea <tcp_receive+0x6c6>
 8010ee8:	2300      	movs	r3, #0
 8010eea:	4423      	add	r3, r4
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	4b71      	ldr	r3, [pc, #452]	; (80110b4 <tcp_receive+0x890>)
 8010ef0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ef6:	4b6f      	ldr	r3, [pc, #444]	; (80110b4 <tcp_receive+0x890>)
 8010ef8:	881b      	ldrh	r3, [r3, #0]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d275      	bcs.n	8010fea <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010efe:	4b6c      	ldr	r3, [pc, #432]	; (80110b0 <tcp_receive+0x88c>)
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	899b      	ldrh	r3, [r3, #12]
 8010f04:	b29b      	uxth	r3, r3
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7fa fe40 	bl	800bb8c <lwip_htons>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	b2db      	uxtb	r3, r3
 8010f10:	f003 0301 	and.w	r3, r3, #1
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d01f      	beq.n	8010f58 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010f18:	4b65      	ldr	r3, [pc, #404]	; (80110b0 <tcp_receive+0x88c>)
 8010f1a:	68db      	ldr	r3, [r3, #12]
 8010f1c:	899b      	ldrh	r3, [r3, #12]
 8010f1e:	b29b      	uxth	r3, r3
 8010f20:	b21b      	sxth	r3, r3
 8010f22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010f26:	b21c      	sxth	r4, r3
 8010f28:	4b61      	ldr	r3, [pc, #388]	; (80110b0 <tcp_receive+0x88c>)
 8010f2a:	68db      	ldr	r3, [r3, #12]
 8010f2c:	899b      	ldrh	r3, [r3, #12]
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7fa fe2b 	bl	800bb8c <lwip_htons>
 8010f36:	4603      	mov	r3, r0
 8010f38:	b2db      	uxtb	r3, r3
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7fa fe22 	bl	800bb8c <lwip_htons>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	b21b      	sxth	r3, r3
 8010f4c:	4323      	orrs	r3, r4
 8010f4e:	b21a      	sxth	r2, r3
 8010f50:	4b57      	ldr	r3, [pc, #348]	; (80110b0 <tcp_receive+0x88c>)
 8010f52:	68db      	ldr	r3, [r3, #12]
 8010f54:	b292      	uxth	r2, r2
 8010f56:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f5c:	4b54      	ldr	r3, [pc, #336]	; (80110b0 <tcp_receive+0x88c>)
 8010f5e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010f60:	4b53      	ldr	r3, [pc, #332]	; (80110b0 <tcp_receive+0x88c>)
 8010f62:	68db      	ldr	r3, [r3, #12]
 8010f64:	899b      	ldrh	r3, [r3, #12]
 8010f66:	b29b      	uxth	r3, r3
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7fa fe0f 	bl	800bb8c <lwip_htons>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	b2db      	uxtb	r3, r3
 8010f72:	f003 0302 	and.w	r3, r3, #2
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d005      	beq.n	8010f86 <tcp_receive+0x762>
            inseg.len -= 1;
 8010f7a:	4b4d      	ldr	r3, [pc, #308]	; (80110b0 <tcp_receive+0x88c>)
 8010f7c:	891b      	ldrh	r3, [r3, #8]
 8010f7e:	3b01      	subs	r3, #1
 8010f80:	b29a      	uxth	r2, r3
 8010f82:	4b4b      	ldr	r3, [pc, #300]	; (80110b0 <tcp_receive+0x88c>)
 8010f84:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010f86:	4b4a      	ldr	r3, [pc, #296]	; (80110b0 <tcp_receive+0x88c>)
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	4a49      	ldr	r2, [pc, #292]	; (80110b0 <tcp_receive+0x88c>)
 8010f8c:	8912      	ldrh	r2, [r2, #8]
 8010f8e:	4611      	mov	r1, r2
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7fb ffbd 	bl	800cf10 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010f96:	4b46      	ldr	r3, [pc, #280]	; (80110b0 <tcp_receive+0x88c>)
 8010f98:	891c      	ldrh	r4, [r3, #8]
 8010f9a:	4b45      	ldr	r3, [pc, #276]	; (80110b0 <tcp_receive+0x88c>)
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	899b      	ldrh	r3, [r3, #12]
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fa fdf2 	bl	800bb8c <lwip_htons>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	b2db      	uxtb	r3, r3
 8010fac:	f003 0303 	and.w	r3, r3, #3
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d001      	beq.n	8010fb8 <tcp_receive+0x794>
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	e000      	b.n	8010fba <tcp_receive+0x796>
 8010fb8:	2300      	movs	r3, #0
 8010fba:	4423      	add	r3, r4
 8010fbc:	b29a      	uxth	r2, r3
 8010fbe:	4b3d      	ldr	r3, [pc, #244]	; (80110b4 <tcp_receive+0x890>)
 8010fc0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010fc2:	4b3c      	ldr	r3, [pc, #240]	; (80110b4 <tcp_receive+0x890>)
 8010fc4:	881b      	ldrh	r3, [r3, #0]
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	4b38      	ldr	r3, [pc, #224]	; (80110ac <tcp_receive+0x888>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	441a      	add	r2, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fd2:	6879      	ldr	r1, [r7, #4]
 8010fd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010fd6:	440b      	add	r3, r1
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d006      	beq.n	8010fea <tcp_receive+0x7c6>
 8010fdc:	4b36      	ldr	r3, [pc, #216]	; (80110b8 <tcp_receive+0x894>)
 8010fde:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010fe2:	4936      	ldr	r1, [pc, #216]	; (80110bc <tcp_receive+0x898>)
 8010fe4:	4836      	ldr	r0, [pc, #216]	; (80110c0 <tcp_receive+0x89c>)
 8010fe6:	f006 f8b3 	bl	8017150 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	f000 80e7 	beq.w	80111c2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010ff4:	4b2e      	ldr	r3, [pc, #184]	; (80110b0 <tcp_receive+0x88c>)
 8010ff6:	68db      	ldr	r3, [r3, #12]
 8010ff8:	899b      	ldrh	r3, [r3, #12]
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7fa fdc5 	bl	800bb8c <lwip_htons>
 8011002:	4603      	mov	r3, r0
 8011004:	b2db      	uxtb	r3, r3
 8011006:	f003 0301 	and.w	r3, r3, #1
 801100a:	2b00      	cmp	r3, #0
 801100c:	d010      	beq.n	8011030 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801100e:	e00a      	b.n	8011026 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011014:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801101a:	681a      	ldr	r2, [r3, #0]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011020:	68f8      	ldr	r0, [r7, #12]
 8011022:	f7fd fcc4 	bl	800e9ae <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801102a:	2b00      	cmp	r3, #0
 801102c:	d1f0      	bne.n	8011010 <tcp_receive+0x7ec>
 801102e:	e0c8      	b.n	80111c2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011034:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011036:	e052      	b.n	80110de <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	899b      	ldrh	r3, [r3, #12]
 801103e:	b29b      	uxth	r3, r3
 8011040:	4618      	mov	r0, r3
 8011042:	f7fa fda3 	bl	800bb8c <lwip_htons>
 8011046:	4603      	mov	r3, r0
 8011048:	b2db      	uxtb	r3, r3
 801104a:	f003 0301 	and.w	r3, r3, #1
 801104e:	2b00      	cmp	r3, #0
 8011050:	d03d      	beq.n	80110ce <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011052:	4b17      	ldr	r3, [pc, #92]	; (80110b0 <tcp_receive+0x88c>)
 8011054:	68db      	ldr	r3, [r3, #12]
 8011056:	899b      	ldrh	r3, [r3, #12]
 8011058:	b29b      	uxth	r3, r3
 801105a:	4618      	mov	r0, r3
 801105c:	f7fa fd96 	bl	800bb8c <lwip_htons>
 8011060:	4603      	mov	r3, r0
 8011062:	b2db      	uxtb	r3, r3
 8011064:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011068:	2b00      	cmp	r3, #0
 801106a:	d130      	bne.n	80110ce <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801106c:	4b10      	ldr	r3, [pc, #64]	; (80110b0 <tcp_receive+0x88c>)
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	899b      	ldrh	r3, [r3, #12]
 8011072:	b29c      	uxth	r4, r3
 8011074:	2001      	movs	r0, #1
 8011076:	f7fa fd89 	bl	800bb8c <lwip_htons>
 801107a:	4603      	mov	r3, r0
 801107c:	461a      	mov	r2, r3
 801107e:	4b0c      	ldr	r3, [pc, #48]	; (80110b0 <tcp_receive+0x88c>)
 8011080:	68db      	ldr	r3, [r3, #12]
 8011082:	4322      	orrs	r2, r4
 8011084:	b292      	uxth	r2, r2
 8011086:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011088:	4b09      	ldr	r3, [pc, #36]	; (80110b0 <tcp_receive+0x88c>)
 801108a:	891c      	ldrh	r4, [r3, #8]
 801108c:	4b08      	ldr	r3, [pc, #32]	; (80110b0 <tcp_receive+0x88c>)
 801108e:	68db      	ldr	r3, [r3, #12]
 8011090:	899b      	ldrh	r3, [r3, #12]
 8011092:	b29b      	uxth	r3, r3
 8011094:	4618      	mov	r0, r3
 8011096:	f7fa fd79 	bl	800bb8c <lwip_htons>
 801109a:	4603      	mov	r3, r0
 801109c:	b2db      	uxtb	r3, r3
 801109e:	f003 0303 	and.w	r3, r3, #3
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d00e      	beq.n	80110c4 <tcp_receive+0x8a0>
 80110a6:	2301      	movs	r3, #1
 80110a8:	e00d      	b.n	80110c6 <tcp_receive+0x8a2>
 80110aa:	bf00      	nop
 80110ac:	2000d340 	.word	0x2000d340
 80110b0:	2000d320 	.word	0x2000d320
 80110b4:	2000d34a 	.word	0x2000d34a
 80110b8:	08019d2c 	.word	0x08019d2c
 80110bc:	0801a0d4 	.word	0x0801a0d4
 80110c0:	08019d78 	.word	0x08019d78
 80110c4:	2300      	movs	r3, #0
 80110c6:	4423      	add	r3, r4
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	4b98      	ldr	r3, [pc, #608]	; (801132c <tcp_receive+0xb08>)
 80110cc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80110ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110d0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80110d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80110d8:	6938      	ldr	r0, [r7, #16]
 80110da:	f7fd fc68 	bl	800e9ae <tcp_seg_free>
            while (next &&
 80110de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d00e      	beq.n	8011102 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80110e4:	4b91      	ldr	r3, [pc, #580]	; (801132c <tcp_receive+0xb08>)
 80110e6:	881b      	ldrh	r3, [r3, #0]
 80110e8:	461a      	mov	r2, r3
 80110ea:	4b91      	ldr	r3, [pc, #580]	; (8011330 <tcp_receive+0xb0c>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	441a      	add	r2, r3
 80110f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	685b      	ldr	r3, [r3, #4]
 80110f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80110f8:	8909      	ldrh	r1, [r1, #8]
 80110fa:	440b      	add	r3, r1
 80110fc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80110fe:	2b00      	cmp	r3, #0
 8011100:	da9a      	bge.n	8011038 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011104:	2b00      	cmp	r3, #0
 8011106:	d059      	beq.n	80111bc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011108:	4b88      	ldr	r3, [pc, #544]	; (801132c <tcp_receive+0xb08>)
 801110a:	881b      	ldrh	r3, [r3, #0]
 801110c:	461a      	mov	r2, r3
 801110e:	4b88      	ldr	r3, [pc, #544]	; (8011330 <tcp_receive+0xb0c>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	441a      	add	r2, r3
 8011114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011116:	68db      	ldr	r3, [r3, #12]
 8011118:	685b      	ldr	r3, [r3, #4]
 801111a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801111c:	2b00      	cmp	r3, #0
 801111e:	dd4d      	ble.n	80111bc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	b29a      	uxth	r2, r3
 8011128:	4b81      	ldr	r3, [pc, #516]	; (8011330 <tcp_receive+0xb0c>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	b29b      	uxth	r3, r3
 801112e:	1ad3      	subs	r3, r2, r3
 8011130:	b29a      	uxth	r2, r3
 8011132:	4b80      	ldr	r3, [pc, #512]	; (8011334 <tcp_receive+0xb10>)
 8011134:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011136:	4b7f      	ldr	r3, [pc, #508]	; (8011334 <tcp_receive+0xb10>)
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	899b      	ldrh	r3, [r3, #12]
 801113c:	b29b      	uxth	r3, r3
 801113e:	4618      	mov	r0, r3
 8011140:	f7fa fd24 	bl	800bb8c <lwip_htons>
 8011144:	4603      	mov	r3, r0
 8011146:	b2db      	uxtb	r3, r3
 8011148:	f003 0302 	and.w	r3, r3, #2
 801114c:	2b00      	cmp	r3, #0
 801114e:	d005      	beq.n	801115c <tcp_receive+0x938>
                inseg.len -= 1;
 8011150:	4b78      	ldr	r3, [pc, #480]	; (8011334 <tcp_receive+0xb10>)
 8011152:	891b      	ldrh	r3, [r3, #8]
 8011154:	3b01      	subs	r3, #1
 8011156:	b29a      	uxth	r2, r3
 8011158:	4b76      	ldr	r3, [pc, #472]	; (8011334 <tcp_receive+0xb10>)
 801115a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801115c:	4b75      	ldr	r3, [pc, #468]	; (8011334 <tcp_receive+0xb10>)
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	4a74      	ldr	r2, [pc, #464]	; (8011334 <tcp_receive+0xb10>)
 8011162:	8912      	ldrh	r2, [r2, #8]
 8011164:	4611      	mov	r1, r2
 8011166:	4618      	mov	r0, r3
 8011168:	f7fb fed2 	bl	800cf10 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801116c:	4b71      	ldr	r3, [pc, #452]	; (8011334 <tcp_receive+0xb10>)
 801116e:	891c      	ldrh	r4, [r3, #8]
 8011170:	4b70      	ldr	r3, [pc, #448]	; (8011334 <tcp_receive+0xb10>)
 8011172:	68db      	ldr	r3, [r3, #12]
 8011174:	899b      	ldrh	r3, [r3, #12]
 8011176:	b29b      	uxth	r3, r3
 8011178:	4618      	mov	r0, r3
 801117a:	f7fa fd07 	bl	800bb8c <lwip_htons>
 801117e:	4603      	mov	r3, r0
 8011180:	b2db      	uxtb	r3, r3
 8011182:	f003 0303 	and.w	r3, r3, #3
 8011186:	2b00      	cmp	r3, #0
 8011188:	d001      	beq.n	801118e <tcp_receive+0x96a>
 801118a:	2301      	movs	r3, #1
 801118c:	e000      	b.n	8011190 <tcp_receive+0x96c>
 801118e:	2300      	movs	r3, #0
 8011190:	4423      	add	r3, r4
 8011192:	b29a      	uxth	r2, r3
 8011194:	4b65      	ldr	r3, [pc, #404]	; (801132c <tcp_receive+0xb08>)
 8011196:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011198:	4b64      	ldr	r3, [pc, #400]	; (801132c <tcp_receive+0xb08>)
 801119a:	881b      	ldrh	r3, [r3, #0]
 801119c:	461a      	mov	r2, r3
 801119e:	4b64      	ldr	r3, [pc, #400]	; (8011330 <tcp_receive+0xb0c>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	441a      	add	r2, r3
 80111a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111a6:	68db      	ldr	r3, [r3, #12]
 80111a8:	685b      	ldr	r3, [r3, #4]
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d006      	beq.n	80111bc <tcp_receive+0x998>
 80111ae:	4b62      	ldr	r3, [pc, #392]	; (8011338 <tcp_receive+0xb14>)
 80111b0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80111b4:	4961      	ldr	r1, [pc, #388]	; (801133c <tcp_receive+0xb18>)
 80111b6:	4862      	ldr	r0, [pc, #392]	; (8011340 <tcp_receive+0xb1c>)
 80111b8:	f005 ffca 	bl	8017150 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80111c0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80111c2:	4b5a      	ldr	r3, [pc, #360]	; (801132c <tcp_receive+0xb08>)
 80111c4:	881b      	ldrh	r3, [r3, #0]
 80111c6:	461a      	mov	r2, r3
 80111c8:	4b59      	ldr	r3, [pc, #356]	; (8011330 <tcp_receive+0xb0c>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	441a      	add	r2, r3
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111d6:	4b55      	ldr	r3, [pc, #340]	; (801132c <tcp_receive+0xb08>)
 80111d8:	881b      	ldrh	r3, [r3, #0]
 80111da:	429a      	cmp	r2, r3
 80111dc:	d206      	bcs.n	80111ec <tcp_receive+0x9c8>
 80111de:	4b56      	ldr	r3, [pc, #344]	; (8011338 <tcp_receive+0xb14>)
 80111e0:	f240 6207 	movw	r2, #1543	; 0x607
 80111e4:	4957      	ldr	r1, [pc, #348]	; (8011344 <tcp_receive+0xb20>)
 80111e6:	4856      	ldr	r0, [pc, #344]	; (8011340 <tcp_receive+0xb1c>)
 80111e8:	f005 ffb2 	bl	8017150 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111f0:	4b4e      	ldr	r3, [pc, #312]	; (801132c <tcp_receive+0xb08>)
 80111f2:	881b      	ldrh	r3, [r3, #0]
 80111f4:	1ad3      	subs	r3, r2, r3
 80111f6:	b29a      	uxth	r2, r3
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f7fc feb1 	bl	800df64 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011202:	4b4c      	ldr	r3, [pc, #304]	; (8011334 <tcp_receive+0xb10>)
 8011204:	685b      	ldr	r3, [r3, #4]
 8011206:	891b      	ldrh	r3, [r3, #8]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d006      	beq.n	801121a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801120c:	4b49      	ldr	r3, [pc, #292]	; (8011334 <tcp_receive+0xb10>)
 801120e:	685b      	ldr	r3, [r3, #4]
 8011210:	4a4d      	ldr	r2, [pc, #308]	; (8011348 <tcp_receive+0xb24>)
 8011212:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011214:	4b47      	ldr	r3, [pc, #284]	; (8011334 <tcp_receive+0xb10>)
 8011216:	2200      	movs	r2, #0
 8011218:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801121a:	4b46      	ldr	r3, [pc, #280]	; (8011334 <tcp_receive+0xb10>)
 801121c:	68db      	ldr	r3, [r3, #12]
 801121e:	899b      	ldrh	r3, [r3, #12]
 8011220:	b29b      	uxth	r3, r3
 8011222:	4618      	mov	r0, r3
 8011224:	f7fa fcb2 	bl	800bb8c <lwip_htons>
 8011228:	4603      	mov	r3, r0
 801122a:	b2db      	uxtb	r3, r3
 801122c:	f003 0301 	and.w	r3, r3, #1
 8011230:	2b00      	cmp	r3, #0
 8011232:	f000 80b8 	beq.w	80113a6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011236:	4b45      	ldr	r3, [pc, #276]	; (801134c <tcp_receive+0xb28>)
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	f043 0320 	orr.w	r3, r3, #32
 801123e:	b2da      	uxtb	r2, r3
 8011240:	4b42      	ldr	r3, [pc, #264]	; (801134c <tcp_receive+0xb28>)
 8011242:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011244:	e0af      	b.n	80113a6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801124a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	4a36      	ldr	r2, [pc, #216]	; (8011330 <tcp_receive+0xb0c>)
 8011256:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	891b      	ldrh	r3, [r3, #8]
 801125c:	461c      	mov	r4, r3
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	68db      	ldr	r3, [r3, #12]
 8011262:	899b      	ldrh	r3, [r3, #12]
 8011264:	b29b      	uxth	r3, r3
 8011266:	4618      	mov	r0, r3
 8011268:	f7fa fc90 	bl	800bb8c <lwip_htons>
 801126c:	4603      	mov	r3, r0
 801126e:	b2db      	uxtb	r3, r3
 8011270:	f003 0303 	and.w	r3, r3, #3
 8011274:	2b00      	cmp	r3, #0
 8011276:	d001      	beq.n	801127c <tcp_receive+0xa58>
 8011278:	2301      	movs	r3, #1
 801127a:	e000      	b.n	801127e <tcp_receive+0xa5a>
 801127c:	2300      	movs	r3, #0
 801127e:	191a      	adds	r2, r3, r4
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011284:	441a      	add	r2, r3
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801128e:	461c      	mov	r4, r3
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	891b      	ldrh	r3, [r3, #8]
 8011294:	461d      	mov	r5, r3
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	68db      	ldr	r3, [r3, #12]
 801129a:	899b      	ldrh	r3, [r3, #12]
 801129c:	b29b      	uxth	r3, r3
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fa fc74 	bl	800bb8c <lwip_htons>
 80112a4:	4603      	mov	r3, r0
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	f003 0303 	and.w	r3, r3, #3
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d001      	beq.n	80112b4 <tcp_receive+0xa90>
 80112b0:	2301      	movs	r3, #1
 80112b2:	e000      	b.n	80112b6 <tcp_receive+0xa92>
 80112b4:	2300      	movs	r3, #0
 80112b6:	442b      	add	r3, r5
 80112b8:	429c      	cmp	r4, r3
 80112ba:	d206      	bcs.n	80112ca <tcp_receive+0xaa6>
 80112bc:	4b1e      	ldr	r3, [pc, #120]	; (8011338 <tcp_receive+0xb14>)
 80112be:	f240 622b 	movw	r2, #1579	; 0x62b
 80112c2:	4923      	ldr	r1, [pc, #140]	; (8011350 <tcp_receive+0xb2c>)
 80112c4:	481e      	ldr	r0, [pc, #120]	; (8011340 <tcp_receive+0xb1c>)
 80112c6:	f005 ff43 	bl	8017150 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	891b      	ldrh	r3, [r3, #8]
 80112ce:	461c      	mov	r4, r3
 80112d0:	68bb      	ldr	r3, [r7, #8]
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	899b      	ldrh	r3, [r3, #12]
 80112d6:	b29b      	uxth	r3, r3
 80112d8:	4618      	mov	r0, r3
 80112da:	f7fa fc57 	bl	800bb8c <lwip_htons>
 80112de:	4603      	mov	r3, r0
 80112e0:	b2db      	uxtb	r3, r3
 80112e2:	f003 0303 	and.w	r3, r3, #3
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d001      	beq.n	80112ee <tcp_receive+0xaca>
 80112ea:	2301      	movs	r3, #1
 80112ec:	e000      	b.n	80112f0 <tcp_receive+0xacc>
 80112ee:	2300      	movs	r3, #0
 80112f0:	1919      	adds	r1, r3, r4
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80112f6:	b28b      	uxth	r3, r1
 80112f8:	1ad3      	subs	r3, r2, r3
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f7fc fe2f 	bl	800df64 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	891b      	ldrh	r3, [r3, #8]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d028      	beq.n	8011362 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011310:	4b0d      	ldr	r3, [pc, #52]	; (8011348 <tcp_receive+0xb24>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d01d      	beq.n	8011354 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011318:	4b0b      	ldr	r3, [pc, #44]	; (8011348 <tcp_receive+0xb24>)
 801131a:	681a      	ldr	r2, [r3, #0]
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	685b      	ldr	r3, [r3, #4]
 8011320:	4619      	mov	r1, r3
 8011322:	4610      	mov	r0, r2
 8011324:	f7fc f848 	bl	800d3b8 <pbuf_cat>
 8011328:	e018      	b.n	801135c <tcp_receive+0xb38>
 801132a:	bf00      	nop
 801132c:	2000d34a 	.word	0x2000d34a
 8011330:	2000d340 	.word	0x2000d340
 8011334:	2000d320 	.word	0x2000d320
 8011338:	08019d2c 	.word	0x08019d2c
 801133c:	0801a10c 	.word	0x0801a10c
 8011340:	08019d78 	.word	0x08019d78
 8011344:	0801a148 	.word	0x0801a148
 8011348:	2000d350 	.word	0x2000d350
 801134c:	2000d34d 	.word	0x2000d34d
 8011350:	0801a168 	.word	0x0801a168
            } else {
              recv_data = cseg->p;
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	4a70      	ldr	r2, [pc, #448]	; (801151c <tcp_receive+0xcf8>)
 801135a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	2200      	movs	r2, #0
 8011360:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	68db      	ldr	r3, [r3, #12]
 8011366:	899b      	ldrh	r3, [r3, #12]
 8011368:	b29b      	uxth	r3, r3
 801136a:	4618      	mov	r0, r3
 801136c:	f7fa fc0e 	bl	800bb8c <lwip_htons>
 8011370:	4603      	mov	r3, r0
 8011372:	b2db      	uxtb	r3, r3
 8011374:	f003 0301 	and.w	r3, r3, #1
 8011378:	2b00      	cmp	r3, #0
 801137a:	d00d      	beq.n	8011398 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801137c:	4b68      	ldr	r3, [pc, #416]	; (8011520 <tcp_receive+0xcfc>)
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	f043 0320 	orr.w	r3, r3, #32
 8011384:	b2da      	uxtb	r2, r3
 8011386:	4b66      	ldr	r3, [pc, #408]	; (8011520 <tcp_receive+0xcfc>)
 8011388:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	7d1b      	ldrb	r3, [r3, #20]
 801138e:	2b04      	cmp	r3, #4
 8011390:	d102      	bne.n	8011398 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2207      	movs	r2, #7
 8011396:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80113a0:	68b8      	ldr	r0, [r7, #8]
 80113a2:	f7fd fb04 	bl	800e9ae <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d008      	beq.n	80113c0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	685a      	ldr	r2, [r3, #4]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80113ba:	429a      	cmp	r2, r3
 80113bc:	f43f af43 	beq.w	8011246 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	8b5b      	ldrh	r3, [r3, #26]
 80113c4:	f003 0301 	and.w	r3, r3, #1
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d00e      	beq.n	80113ea <tcp_receive+0xbc6>
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	8b5b      	ldrh	r3, [r3, #26]
 80113d0:	f023 0301 	bic.w	r3, r3, #1
 80113d4:	b29a      	uxth	r2, r3
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	835a      	strh	r2, [r3, #26]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	8b5b      	ldrh	r3, [r3, #26]
 80113de:	f043 0302 	orr.w	r3, r3, #2
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80113e8:	e188      	b.n	80116fc <tcp_receive+0xed8>
        tcp_ack(pcb);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	8b5b      	ldrh	r3, [r3, #26]
 80113ee:	f043 0301 	orr.w	r3, r3, #1
 80113f2:	b29a      	uxth	r2, r3
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80113f8:	e180      	b.n	80116fc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d106      	bne.n	8011410 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011402:	4848      	ldr	r0, [pc, #288]	; (8011524 <tcp_receive+0xd00>)
 8011404:	f7fd faec 	bl	800e9e0 <tcp_seg_copy>
 8011408:	4602      	mov	r2, r0
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	675a      	str	r2, [r3, #116]	; 0x74
 801140e:	e16d      	b.n	80116ec <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011410:	2300      	movs	r3, #0
 8011412:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011418:	63bb      	str	r3, [r7, #56]	; 0x38
 801141a:	e157      	b.n	80116cc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801141c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141e:	68db      	ldr	r3, [r3, #12]
 8011420:	685a      	ldr	r2, [r3, #4]
 8011422:	4b41      	ldr	r3, [pc, #260]	; (8011528 <tcp_receive+0xd04>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	429a      	cmp	r2, r3
 8011428:	d11d      	bne.n	8011466 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801142a:	4b3e      	ldr	r3, [pc, #248]	; (8011524 <tcp_receive+0xd00>)
 801142c:	891a      	ldrh	r2, [r3, #8]
 801142e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011430:	891b      	ldrh	r3, [r3, #8]
 8011432:	429a      	cmp	r2, r3
 8011434:	f240 814f 	bls.w	80116d6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011438:	483a      	ldr	r0, [pc, #232]	; (8011524 <tcp_receive+0xd00>)
 801143a:	f7fd fad1 	bl	800e9e0 <tcp_seg_copy>
 801143e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	2b00      	cmp	r3, #0
 8011444:	f000 8149 	beq.w	80116da <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801144a:	2b00      	cmp	r3, #0
 801144c:	d003      	beq.n	8011456 <tcp_receive+0xc32>
                    prev->next = cseg;
 801144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011450:	697a      	ldr	r2, [r7, #20]
 8011452:	601a      	str	r2, [r3, #0]
 8011454:	e002      	b.n	801145c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	697a      	ldr	r2, [r7, #20]
 801145a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801145c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801145e:	6978      	ldr	r0, [r7, #20]
 8011460:	f7ff f8dc 	bl	801061c <tcp_oos_insert_segment>
                }
                break;
 8011464:	e139      	b.n	80116da <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011468:	2b00      	cmp	r3, #0
 801146a:	d117      	bne.n	801149c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801146c:	4b2e      	ldr	r3, [pc, #184]	; (8011528 <tcp_receive+0xd04>)
 801146e:	681a      	ldr	r2, [r3, #0]
 8011470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	1ad3      	subs	r3, r2, r3
 8011478:	2b00      	cmp	r3, #0
 801147a:	da57      	bge.n	801152c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801147c:	4829      	ldr	r0, [pc, #164]	; (8011524 <tcp_receive+0xd00>)
 801147e:	f7fd faaf 	bl	800e9e0 <tcp_seg_copy>
 8011482:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011484:	69bb      	ldr	r3, [r7, #24]
 8011486:	2b00      	cmp	r3, #0
 8011488:	f000 8129 	beq.w	80116de <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	69ba      	ldr	r2, [r7, #24]
 8011490:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011492:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011494:	69b8      	ldr	r0, [r7, #24]
 8011496:	f7ff f8c1 	bl	801061c <tcp_oos_insert_segment>
                  }
                  break;
 801149a:	e120      	b.n	80116de <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801149c:	4b22      	ldr	r3, [pc, #136]	; (8011528 <tcp_receive+0xd04>)
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114a2:	68db      	ldr	r3, [r3, #12]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	1ad3      	subs	r3, r2, r3
 80114a8:	3b01      	subs	r3, #1
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	db3e      	blt.n	801152c <tcp_receive+0xd08>
 80114ae:	4b1e      	ldr	r3, [pc, #120]	; (8011528 <tcp_receive+0xd04>)
 80114b0:	681a      	ldr	r2, [r3, #0]
 80114b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b4:	68db      	ldr	r3, [r3, #12]
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	1ad3      	subs	r3, r2, r3
 80114ba:	3301      	adds	r3, #1
 80114bc:	2b00      	cmp	r3, #0
 80114be:	dc35      	bgt.n	801152c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80114c0:	4818      	ldr	r0, [pc, #96]	; (8011524 <tcp_receive+0xd00>)
 80114c2:	f7fd fa8d 	bl	800e9e0 <tcp_seg_copy>
 80114c6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	f000 8109 	beq.w	80116e2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80114d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114d2:	68db      	ldr	r3, [r3, #12]
 80114d4:	685b      	ldr	r3, [r3, #4]
 80114d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114d8:	8912      	ldrh	r2, [r2, #8]
 80114da:	441a      	add	r2, r3
 80114dc:	4b12      	ldr	r3, [pc, #72]	; (8011528 <tcp_receive+0xd04>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	1ad3      	subs	r3, r2, r3
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	dd12      	ble.n	801150c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80114e6:	4b10      	ldr	r3, [pc, #64]	; (8011528 <tcp_receive+0xd04>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	b29a      	uxth	r2, r3
 80114ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ee:	68db      	ldr	r3, [r3, #12]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	1ad3      	subs	r3, r2, r3
 80114f6:	b29a      	uxth	r2, r3
 80114f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80114fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114fe:	685a      	ldr	r2, [r3, #4]
 8011500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011502:	891b      	ldrh	r3, [r3, #8]
 8011504:	4619      	mov	r1, r3
 8011506:	4610      	mov	r0, r2
 8011508:	f7fb fd02 	bl	800cf10 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801150c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801150e:	69fa      	ldr	r2, [r7, #28]
 8011510:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011514:	69f8      	ldr	r0, [r7, #28]
 8011516:	f7ff f881 	bl	801061c <tcp_oos_insert_segment>
                  }
                  break;
 801151a:	e0e2      	b.n	80116e2 <tcp_receive+0xebe>
 801151c:	2000d350 	.word	0x2000d350
 8011520:	2000d34d 	.word	0x2000d34d
 8011524:	2000d320 	.word	0x2000d320
 8011528:	2000d340 	.word	0x2000d340
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	f040 80c6 	bne.w	80116c6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801153a:	4b80      	ldr	r3, [pc, #512]	; (801173c <tcp_receive+0xf18>)
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011540:	68db      	ldr	r3, [r3, #12]
 8011542:	685b      	ldr	r3, [r3, #4]
 8011544:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011546:	2b00      	cmp	r3, #0
 8011548:	f340 80bd 	ble.w	80116c6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801154c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	899b      	ldrh	r3, [r3, #12]
 8011552:	b29b      	uxth	r3, r3
 8011554:	4618      	mov	r0, r3
 8011556:	f7fa fb19 	bl	800bb8c <lwip_htons>
 801155a:	4603      	mov	r3, r0
 801155c:	b2db      	uxtb	r3, r3
 801155e:	f003 0301 	and.w	r3, r3, #1
 8011562:	2b00      	cmp	r3, #0
 8011564:	f040 80bf 	bne.w	80116e6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011568:	4875      	ldr	r0, [pc, #468]	; (8011740 <tcp_receive+0xf1c>)
 801156a:	f7fd fa39 	bl	800e9e0 <tcp_seg_copy>
 801156e:	4602      	mov	r2, r0
 8011570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011572:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	f000 80b6 	beq.w	80116ea <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801157e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011580:	68db      	ldr	r3, [r3, #12]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011586:	8912      	ldrh	r2, [r2, #8]
 8011588:	441a      	add	r2, r3
 801158a:	4b6c      	ldr	r3, [pc, #432]	; (801173c <tcp_receive+0xf18>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	1ad3      	subs	r3, r2, r3
 8011590:	2b00      	cmp	r3, #0
 8011592:	dd12      	ble.n	80115ba <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011594:	4b69      	ldr	r3, [pc, #420]	; (801173c <tcp_receive+0xf18>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	b29a      	uxth	r2, r3
 801159a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159c:	68db      	ldr	r3, [r3, #12]
 801159e:	685b      	ldr	r3, [r3, #4]
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	b29a      	uxth	r2, r3
 80115a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80115aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ac:	685a      	ldr	r2, [r3, #4]
 80115ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b0:	891b      	ldrh	r3, [r3, #8]
 80115b2:	4619      	mov	r1, r3
 80115b4:	4610      	mov	r0, r2
 80115b6:	f7fb fcab 	bl	800cf10 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80115ba:	4b62      	ldr	r3, [pc, #392]	; (8011744 <tcp_receive+0xf20>)
 80115bc:	881b      	ldrh	r3, [r3, #0]
 80115be:	461a      	mov	r2, r3
 80115c0:	4b5e      	ldr	r3, [pc, #376]	; (801173c <tcp_receive+0xf18>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	441a      	add	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ca:	6879      	ldr	r1, [r7, #4]
 80115cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115ce:	440b      	add	r3, r1
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	f340 8089 	ble.w	80116ea <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80115d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	899b      	ldrh	r3, [r3, #12]
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7fa fad2 	bl	800bb8c <lwip_htons>
 80115e8:	4603      	mov	r3, r0
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	f003 0301 	and.w	r3, r3, #1
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d022      	beq.n	801163a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80115f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	68db      	ldr	r3, [r3, #12]
 80115fa:	899b      	ldrh	r3, [r3, #12]
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	b21b      	sxth	r3, r3
 8011600:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011604:	b21c      	sxth	r4, r3
 8011606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	68db      	ldr	r3, [r3, #12]
 801160c:	899b      	ldrh	r3, [r3, #12]
 801160e:	b29b      	uxth	r3, r3
 8011610:	4618      	mov	r0, r3
 8011612:	f7fa fabb 	bl	800bb8c <lwip_htons>
 8011616:	4603      	mov	r3, r0
 8011618:	b2db      	uxtb	r3, r3
 801161a:	b29b      	uxth	r3, r3
 801161c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011620:	b29b      	uxth	r3, r3
 8011622:	4618      	mov	r0, r3
 8011624:	f7fa fab2 	bl	800bb8c <lwip_htons>
 8011628:	4603      	mov	r3, r0
 801162a:	b21b      	sxth	r3, r3
 801162c:	4323      	orrs	r3, r4
 801162e:	b21a      	sxth	r2, r3
 8011630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	68db      	ldr	r3, [r3, #12]
 8011636:	b292      	uxth	r2, r2
 8011638:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801163e:	b29a      	uxth	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011644:	4413      	add	r3, r2
 8011646:	b299      	uxth	r1, r3
 8011648:	4b3c      	ldr	r3, [pc, #240]	; (801173c <tcp_receive+0xf18>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	b29a      	uxth	r2, r3
 801164e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	1a8a      	subs	r2, r1, r2
 8011654:	b292      	uxth	r2, r2
 8011656:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	685a      	ldr	r2, [r3, #4]
 801165e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	891b      	ldrh	r3, [r3, #8]
 8011664:	4619      	mov	r1, r3
 8011666:	4610      	mov	r0, r2
 8011668:	f7fb fc52 	bl	800cf10 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801166c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	891c      	ldrh	r4, [r3, #8]
 8011672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	68db      	ldr	r3, [r3, #12]
 8011678:	899b      	ldrh	r3, [r3, #12]
 801167a:	b29b      	uxth	r3, r3
 801167c:	4618      	mov	r0, r3
 801167e:	f7fa fa85 	bl	800bb8c <lwip_htons>
 8011682:	4603      	mov	r3, r0
 8011684:	b2db      	uxtb	r3, r3
 8011686:	f003 0303 	and.w	r3, r3, #3
 801168a:	2b00      	cmp	r3, #0
 801168c:	d001      	beq.n	8011692 <tcp_receive+0xe6e>
 801168e:	2301      	movs	r3, #1
 8011690:	e000      	b.n	8011694 <tcp_receive+0xe70>
 8011692:	2300      	movs	r3, #0
 8011694:	4423      	add	r3, r4
 8011696:	b29a      	uxth	r2, r3
 8011698:	4b2a      	ldr	r3, [pc, #168]	; (8011744 <tcp_receive+0xf20>)
 801169a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801169c:	4b29      	ldr	r3, [pc, #164]	; (8011744 <tcp_receive+0xf20>)
 801169e:	881b      	ldrh	r3, [r3, #0]
 80116a0:	461a      	mov	r2, r3
 80116a2:	4b26      	ldr	r3, [pc, #152]	; (801173c <tcp_receive+0xf18>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	441a      	add	r2, r3
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ac:	6879      	ldr	r1, [r7, #4]
 80116ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116b0:	440b      	add	r3, r1
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d019      	beq.n	80116ea <tcp_receive+0xec6>
 80116b6:	4b24      	ldr	r3, [pc, #144]	; (8011748 <tcp_receive+0xf24>)
 80116b8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80116bc:	4923      	ldr	r1, [pc, #140]	; (801174c <tcp_receive+0xf28>)
 80116be:	4824      	ldr	r0, [pc, #144]	; (8011750 <tcp_receive+0xf2c>)
 80116c0:	f005 fd46 	bl	8017150 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80116c4:	e011      	b.n	80116ea <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80116c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80116cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	f47f aea4 	bne.w	801141c <tcp_receive+0xbf8>
 80116d4:	e00a      	b.n	80116ec <tcp_receive+0xec8>
                break;
 80116d6:	bf00      	nop
 80116d8:	e008      	b.n	80116ec <tcp_receive+0xec8>
                break;
 80116da:	bf00      	nop
 80116dc:	e006      	b.n	80116ec <tcp_receive+0xec8>
                  break;
 80116de:	bf00      	nop
 80116e0:	e004      	b.n	80116ec <tcp_receive+0xec8>
                  break;
 80116e2:	bf00      	nop
 80116e4:	e002      	b.n	80116ec <tcp_receive+0xec8>
                  break;
 80116e6:	bf00      	nop
 80116e8:	e000      	b.n	80116ec <tcp_receive+0xec8>
                break;
 80116ea:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f001 fe8b 	bl	8013408 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80116f2:	e003      	b.n	80116fc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f001 fe87 	bl	8013408 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80116fa:	e01a      	b.n	8011732 <tcp_receive+0xf0e>
 80116fc:	e019      	b.n	8011732 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80116fe:	4b0f      	ldr	r3, [pc, #60]	; (801173c <tcp_receive+0xf18>)
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011706:	1ad3      	subs	r3, r2, r3
 8011708:	2b00      	cmp	r3, #0
 801170a:	db0a      	blt.n	8011722 <tcp_receive+0xefe>
 801170c:	4b0b      	ldr	r3, [pc, #44]	; (801173c <tcp_receive+0xf18>)
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011714:	6879      	ldr	r1, [r7, #4]
 8011716:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011718:	440b      	add	r3, r1
 801171a:	1ad3      	subs	r3, r2, r3
 801171c:	3301      	adds	r3, #1
 801171e:	2b00      	cmp	r3, #0
 8011720:	dd07      	ble.n	8011732 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	8b5b      	ldrh	r3, [r3, #26]
 8011726:	f043 0302 	orr.w	r3, r3, #2
 801172a:	b29a      	uxth	r2, r3
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011730:	e7ff      	b.n	8011732 <tcp_receive+0xf0e>
 8011732:	bf00      	nop
 8011734:	3750      	adds	r7, #80	; 0x50
 8011736:	46bd      	mov	sp, r7
 8011738:	bdb0      	pop	{r4, r5, r7, pc}
 801173a:	bf00      	nop
 801173c:	2000d340 	.word	0x2000d340
 8011740:	2000d320 	.word	0x2000d320
 8011744:	2000d34a 	.word	0x2000d34a
 8011748:	08019d2c 	.word	0x08019d2c
 801174c:	0801a0d4 	.word	0x0801a0d4
 8011750:	08019d78 	.word	0x08019d78

08011754 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011754:	b480      	push	{r7}
 8011756:	b083      	sub	sp, #12
 8011758:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801175a:	4b15      	ldr	r3, [pc, #84]	; (80117b0 <tcp_get_next_optbyte+0x5c>)
 801175c:	881b      	ldrh	r3, [r3, #0]
 801175e:	1c5a      	adds	r2, r3, #1
 8011760:	b291      	uxth	r1, r2
 8011762:	4a13      	ldr	r2, [pc, #76]	; (80117b0 <tcp_get_next_optbyte+0x5c>)
 8011764:	8011      	strh	r1, [r2, #0]
 8011766:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011768:	4b12      	ldr	r3, [pc, #72]	; (80117b4 <tcp_get_next_optbyte+0x60>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d004      	beq.n	801177a <tcp_get_next_optbyte+0x26>
 8011770:	4b11      	ldr	r3, [pc, #68]	; (80117b8 <tcp_get_next_optbyte+0x64>)
 8011772:	881b      	ldrh	r3, [r3, #0]
 8011774:	88fa      	ldrh	r2, [r7, #6]
 8011776:	429a      	cmp	r2, r3
 8011778:	d208      	bcs.n	801178c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801177a:	4b10      	ldr	r3, [pc, #64]	; (80117bc <tcp_get_next_optbyte+0x68>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	3314      	adds	r3, #20
 8011780:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011782:	88fb      	ldrh	r3, [r7, #6]
 8011784:	683a      	ldr	r2, [r7, #0]
 8011786:	4413      	add	r3, r2
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	e00b      	b.n	80117a4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801178c:	88fb      	ldrh	r3, [r7, #6]
 801178e:	b2da      	uxtb	r2, r3
 8011790:	4b09      	ldr	r3, [pc, #36]	; (80117b8 <tcp_get_next_optbyte+0x64>)
 8011792:	881b      	ldrh	r3, [r3, #0]
 8011794:	b2db      	uxtb	r3, r3
 8011796:	1ad3      	subs	r3, r2, r3
 8011798:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801179a:	4b06      	ldr	r3, [pc, #24]	; (80117b4 <tcp_get_next_optbyte+0x60>)
 801179c:	681a      	ldr	r2, [r3, #0]
 801179e:	797b      	ldrb	r3, [r7, #5]
 80117a0:	4413      	add	r3, r2
 80117a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	370c      	adds	r7, #12
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr
 80117b0:	2000d33c 	.word	0x2000d33c
 80117b4:	2000d338 	.word	0x2000d338
 80117b8:	2000d336 	.word	0x2000d336
 80117bc:	2000d330 	.word	0x2000d330

080117c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b084      	sub	sp, #16
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d106      	bne.n	80117dc <tcp_parseopt+0x1c>
 80117ce:	4b32      	ldr	r3, [pc, #200]	; (8011898 <tcp_parseopt+0xd8>)
 80117d0:	f240 727d 	movw	r2, #1917	; 0x77d
 80117d4:	4931      	ldr	r1, [pc, #196]	; (801189c <tcp_parseopt+0xdc>)
 80117d6:	4832      	ldr	r0, [pc, #200]	; (80118a0 <tcp_parseopt+0xe0>)
 80117d8:	f005 fcba 	bl	8017150 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80117dc:	4b31      	ldr	r3, [pc, #196]	; (80118a4 <tcp_parseopt+0xe4>)
 80117de:	881b      	ldrh	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d055      	beq.n	8011890 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80117e4:	4b30      	ldr	r3, [pc, #192]	; (80118a8 <tcp_parseopt+0xe8>)
 80117e6:	2200      	movs	r2, #0
 80117e8:	801a      	strh	r2, [r3, #0]
 80117ea:	e045      	b.n	8011878 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80117ec:	f7ff ffb2 	bl	8011754 <tcp_get_next_optbyte>
 80117f0:	4603      	mov	r3, r0
 80117f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80117f4:	7bfb      	ldrb	r3, [r7, #15]
 80117f6:	2b02      	cmp	r3, #2
 80117f8:	d006      	beq.n	8011808 <tcp_parseopt+0x48>
 80117fa:	2b02      	cmp	r3, #2
 80117fc:	dc2b      	bgt.n	8011856 <tcp_parseopt+0x96>
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d041      	beq.n	8011886 <tcp_parseopt+0xc6>
 8011802:	2b01      	cmp	r3, #1
 8011804:	d127      	bne.n	8011856 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011806:	e037      	b.n	8011878 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011808:	f7ff ffa4 	bl	8011754 <tcp_get_next_optbyte>
 801180c:	4603      	mov	r3, r0
 801180e:	2b04      	cmp	r3, #4
 8011810:	d13b      	bne.n	801188a <tcp_parseopt+0xca>
 8011812:	4b25      	ldr	r3, [pc, #148]	; (80118a8 <tcp_parseopt+0xe8>)
 8011814:	881b      	ldrh	r3, [r3, #0]
 8011816:	3301      	adds	r3, #1
 8011818:	4a22      	ldr	r2, [pc, #136]	; (80118a4 <tcp_parseopt+0xe4>)
 801181a:	8812      	ldrh	r2, [r2, #0]
 801181c:	4293      	cmp	r3, r2
 801181e:	da34      	bge.n	801188a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011820:	f7ff ff98 	bl	8011754 <tcp_get_next_optbyte>
 8011824:	4603      	mov	r3, r0
 8011826:	b29b      	uxth	r3, r3
 8011828:	021b      	lsls	r3, r3, #8
 801182a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801182c:	f7ff ff92 	bl	8011754 <tcp_get_next_optbyte>
 8011830:	4603      	mov	r3, r0
 8011832:	b29a      	uxth	r2, r3
 8011834:	89bb      	ldrh	r3, [r7, #12]
 8011836:	4313      	orrs	r3, r2
 8011838:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801183a:	89bb      	ldrh	r3, [r7, #12]
 801183c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011840:	d804      	bhi.n	801184c <tcp_parseopt+0x8c>
 8011842:	89bb      	ldrh	r3, [r7, #12]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d001      	beq.n	801184c <tcp_parseopt+0x8c>
 8011848:	89ba      	ldrh	r2, [r7, #12]
 801184a:	e001      	b.n	8011850 <tcp_parseopt+0x90>
 801184c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011854:	e010      	b.n	8011878 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011856:	f7ff ff7d 	bl	8011754 <tcp_get_next_optbyte>
 801185a:	4603      	mov	r3, r0
 801185c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801185e:	7afb      	ldrb	r3, [r7, #11]
 8011860:	2b01      	cmp	r3, #1
 8011862:	d914      	bls.n	801188e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011864:	7afb      	ldrb	r3, [r7, #11]
 8011866:	b29a      	uxth	r2, r3
 8011868:	4b0f      	ldr	r3, [pc, #60]	; (80118a8 <tcp_parseopt+0xe8>)
 801186a:	881b      	ldrh	r3, [r3, #0]
 801186c:	4413      	add	r3, r2
 801186e:	b29b      	uxth	r3, r3
 8011870:	3b02      	subs	r3, #2
 8011872:	b29a      	uxth	r2, r3
 8011874:	4b0c      	ldr	r3, [pc, #48]	; (80118a8 <tcp_parseopt+0xe8>)
 8011876:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011878:	4b0b      	ldr	r3, [pc, #44]	; (80118a8 <tcp_parseopt+0xe8>)
 801187a:	881a      	ldrh	r2, [r3, #0]
 801187c:	4b09      	ldr	r3, [pc, #36]	; (80118a4 <tcp_parseopt+0xe4>)
 801187e:	881b      	ldrh	r3, [r3, #0]
 8011880:	429a      	cmp	r2, r3
 8011882:	d3b3      	bcc.n	80117ec <tcp_parseopt+0x2c>
 8011884:	e004      	b.n	8011890 <tcp_parseopt+0xd0>
          return;
 8011886:	bf00      	nop
 8011888:	e002      	b.n	8011890 <tcp_parseopt+0xd0>
            return;
 801188a:	bf00      	nop
 801188c:	e000      	b.n	8011890 <tcp_parseopt+0xd0>
            return;
 801188e:	bf00      	nop
      }
    }
  }
}
 8011890:	3710      	adds	r7, #16
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	08019d2c 	.word	0x08019d2c
 801189c:	0801a190 	.word	0x0801a190
 80118a0:	08019d78 	.word	0x08019d78
 80118a4:	2000d334 	.word	0x2000d334
 80118a8:	2000d33c 	.word	0x2000d33c

080118ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80118ac:	b480      	push	{r7}
 80118ae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80118b0:	4b05      	ldr	r3, [pc, #20]	; (80118c8 <tcp_trigger_input_pcb_close+0x1c>)
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	f043 0310 	orr.w	r3, r3, #16
 80118b8:	b2da      	uxtb	r2, r3
 80118ba:	4b03      	ldr	r3, [pc, #12]	; (80118c8 <tcp_trigger_input_pcb_close+0x1c>)
 80118bc:	701a      	strb	r2, [r3, #0]
}
 80118be:	bf00      	nop
 80118c0:	46bd      	mov	sp, r7
 80118c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c6:	4770      	bx	lr
 80118c8:	2000d34d 	.word	0x2000d34d

080118cc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b084      	sub	sp, #16
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	60b9      	str	r1, [r7, #8]
 80118d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d00a      	beq.n	80118f4 <tcp_route+0x28>
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	7a1b      	ldrb	r3, [r3, #8]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d006      	beq.n	80118f4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	7a1b      	ldrb	r3, [r3, #8]
 80118ea:	4618      	mov	r0, r3
 80118ec:	f7fb f908 	bl	800cb00 <netif_get_by_index>
 80118f0:	4603      	mov	r3, r0
 80118f2:	e003      	b.n	80118fc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f003 fe35 	bl	8015564 <ip4_route>
 80118fa:	4603      	mov	r3, r0
  }
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3710      	adds	r7, #16
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}

08011904 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011904:	b590      	push	{r4, r7, lr}
 8011906:	b087      	sub	sp, #28
 8011908:	af00      	add	r7, sp, #0
 801190a:	60f8      	str	r0, [r7, #12]
 801190c:	60b9      	str	r1, [r7, #8]
 801190e:	603b      	str	r3, [r7, #0]
 8011910:	4613      	mov	r3, r2
 8011912:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d105      	bne.n	8011926 <tcp_create_segment+0x22>
 801191a:	4b44      	ldr	r3, [pc, #272]	; (8011a2c <tcp_create_segment+0x128>)
 801191c:	22a3      	movs	r2, #163	; 0xa3
 801191e:	4944      	ldr	r1, [pc, #272]	; (8011a30 <tcp_create_segment+0x12c>)
 8011920:	4844      	ldr	r0, [pc, #272]	; (8011a34 <tcp_create_segment+0x130>)
 8011922:	f005 fc15 	bl	8017150 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d105      	bne.n	8011938 <tcp_create_segment+0x34>
 801192c:	4b3f      	ldr	r3, [pc, #252]	; (8011a2c <tcp_create_segment+0x128>)
 801192e:	22a4      	movs	r2, #164	; 0xa4
 8011930:	4941      	ldr	r1, [pc, #260]	; (8011a38 <tcp_create_segment+0x134>)
 8011932:	4840      	ldr	r0, [pc, #256]	; (8011a34 <tcp_create_segment+0x130>)
 8011934:	f005 fc0c 	bl	8017150 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011938:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	b2db      	uxtb	r3, r3
 8011940:	f003 0304 	and.w	r3, r3, #4
 8011944:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011946:	2003      	movs	r0, #3
 8011948:	f7fa fdd6 	bl	800c4f8 <memp_malloc>
 801194c:	6138      	str	r0, [r7, #16]
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d104      	bne.n	801195e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011954:	68b8      	ldr	r0, [r7, #8]
 8011956:	f7fb fc61 	bl	800d21c <pbuf_free>
    return NULL;
 801195a:	2300      	movs	r3, #0
 801195c:	e061      	b.n	8011a22 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011964:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	2200      	movs	r2, #0
 801196a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	68ba      	ldr	r2, [r7, #8]
 8011970:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	891a      	ldrh	r2, [r3, #8]
 8011976:	7dfb      	ldrb	r3, [r7, #23]
 8011978:	b29b      	uxth	r3, r3
 801197a:	429a      	cmp	r2, r3
 801197c:	d205      	bcs.n	801198a <tcp_create_segment+0x86>
 801197e:	4b2b      	ldr	r3, [pc, #172]	; (8011a2c <tcp_create_segment+0x128>)
 8011980:	22b0      	movs	r2, #176	; 0xb0
 8011982:	492e      	ldr	r1, [pc, #184]	; (8011a3c <tcp_create_segment+0x138>)
 8011984:	482b      	ldr	r0, [pc, #172]	; (8011a34 <tcp_create_segment+0x130>)
 8011986:	f005 fbe3 	bl	8017150 <iprintf>
  seg->len = p->tot_len - optlen;
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	891a      	ldrh	r2, [r3, #8]
 801198e:	7dfb      	ldrb	r3, [r7, #23]
 8011990:	b29b      	uxth	r3, r3
 8011992:	1ad3      	subs	r3, r2, r3
 8011994:	b29a      	uxth	r2, r3
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801199a:	2114      	movs	r1, #20
 801199c:	68b8      	ldr	r0, [r7, #8]
 801199e:	f7fb fba7 	bl	800d0f0 <pbuf_add_header>
 80119a2:	4603      	mov	r3, r0
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d004      	beq.n	80119b2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80119a8:	6938      	ldr	r0, [r7, #16]
 80119aa:	f7fd f800 	bl	800e9ae <tcp_seg_free>
    return NULL;
 80119ae:	2300      	movs	r3, #0
 80119b0:	e037      	b.n	8011a22 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	685b      	ldr	r3, [r3, #4]
 80119b6:	685a      	ldr	r2, [r3, #4]
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	8ada      	ldrh	r2, [r3, #22]
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	68dc      	ldr	r4, [r3, #12]
 80119c4:	4610      	mov	r0, r2
 80119c6:	f7fa f8e1 	bl	800bb8c <lwip_htons>
 80119ca:	4603      	mov	r3, r0
 80119cc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	8b1a      	ldrh	r2, [r3, #24]
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	68dc      	ldr	r4, [r3, #12]
 80119d6:	4610      	mov	r0, r2
 80119d8:	f7fa f8d8 	bl	800bb8c <lwip_htons>
 80119dc:	4603      	mov	r3, r0
 80119de:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	68dc      	ldr	r4, [r3, #12]
 80119e4:	6838      	ldr	r0, [r7, #0]
 80119e6:	f7fa f8e6 	bl	800bbb6 <lwip_htonl>
 80119ea:	4603      	mov	r3, r0
 80119ec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80119ee:	7dfb      	ldrb	r3, [r7, #23]
 80119f0:	089b      	lsrs	r3, r3, #2
 80119f2:	b2db      	uxtb	r3, r3
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	3305      	adds	r3, #5
 80119f8:	b29b      	uxth	r3, r3
 80119fa:	031b      	lsls	r3, r3, #12
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	79fb      	ldrb	r3, [r7, #7]
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	4313      	orrs	r3, r2
 8011a04:	b29a      	uxth	r2, r3
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	68dc      	ldr	r4, [r3, #12]
 8011a0a:	4610      	mov	r0, r2
 8011a0c:	f7fa f8be 	bl	800bb8c <lwip_htons>
 8011a10:	4603      	mov	r3, r0
 8011a12:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	749a      	strb	r2, [r3, #18]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011a20:	693b      	ldr	r3, [r7, #16]
}
 8011a22:	4618      	mov	r0, r3
 8011a24:	371c      	adds	r7, #28
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd90      	pop	{r4, r7, pc}
 8011a2a:	bf00      	nop
 8011a2c:	0801a1ac 	.word	0x0801a1ac
 8011a30:	0801a1e0 	.word	0x0801a1e0
 8011a34:	0801a200 	.word	0x0801a200
 8011a38:	0801a228 	.word	0x0801a228
 8011a3c:	0801a24c 	.word	0x0801a24c

08011a40 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b086      	sub	sp, #24
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	607b      	str	r3, [r7, #4]
 8011a48:	4603      	mov	r3, r0
 8011a4a:	73fb      	strb	r3, [r7, #15]
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	81bb      	strh	r3, [r7, #12]
 8011a50:	4613      	mov	r3, r2
 8011a52:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011a54:	89bb      	ldrh	r3, [r7, #12]
 8011a56:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d105      	bne.n	8011a6a <tcp_pbuf_prealloc+0x2a>
 8011a5e:	4b30      	ldr	r3, [pc, #192]	; (8011b20 <tcp_pbuf_prealloc+0xe0>)
 8011a60:	22e8      	movs	r2, #232	; 0xe8
 8011a62:	4930      	ldr	r1, [pc, #192]	; (8011b24 <tcp_pbuf_prealloc+0xe4>)
 8011a64:	4830      	ldr	r0, [pc, #192]	; (8011b28 <tcp_pbuf_prealloc+0xe8>)
 8011a66:	f005 fb73 	bl	8017150 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011a6a:	6a3b      	ldr	r3, [r7, #32]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d105      	bne.n	8011a7c <tcp_pbuf_prealloc+0x3c>
 8011a70:	4b2b      	ldr	r3, [pc, #172]	; (8011b20 <tcp_pbuf_prealloc+0xe0>)
 8011a72:	22e9      	movs	r2, #233	; 0xe9
 8011a74:	492d      	ldr	r1, [pc, #180]	; (8011b2c <tcp_pbuf_prealloc+0xec>)
 8011a76:	482c      	ldr	r0, [pc, #176]	; (8011b28 <tcp_pbuf_prealloc+0xe8>)
 8011a78:	f005 fb6a 	bl	8017150 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011a7c:	89ba      	ldrh	r2, [r7, #12]
 8011a7e:	897b      	ldrh	r3, [r7, #10]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d221      	bcs.n	8011ac8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011a84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011a88:	f003 0302 	and.w	r3, r3, #2
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d111      	bne.n	8011ab4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011a90:	6a3b      	ldr	r3, [r7, #32]
 8011a92:	8b5b      	ldrh	r3, [r3, #26]
 8011a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d115      	bne.n	8011ac8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011a9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d007      	beq.n	8011ab4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011aa4:	6a3b      	ldr	r3, [r7, #32]
 8011aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d103      	bne.n	8011ab4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011aac:	6a3b      	ldr	r3, [r7, #32]
 8011aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d009      	beq.n	8011ac8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011ab4:	89bb      	ldrh	r3, [r7, #12]
 8011ab6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011aba:	f023 0203 	bic.w	r2, r3, #3
 8011abe:	897b      	ldrh	r3, [r7, #10]
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	bf28      	it	cs
 8011ac4:	4613      	movcs	r3, r2
 8011ac6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011ac8:	8af9      	ldrh	r1, [r7, #22]
 8011aca:	7bfb      	ldrb	r3, [r7, #15]
 8011acc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7fb f8bf 	bl	800cc54 <pbuf_alloc>
 8011ad6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d101      	bne.n	8011ae2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	e019      	b.n	8011b16 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d006      	beq.n	8011af8 <tcp_pbuf_prealloc+0xb8>
 8011aea:	4b0d      	ldr	r3, [pc, #52]	; (8011b20 <tcp_pbuf_prealloc+0xe0>)
 8011aec:	f240 120b 	movw	r2, #267	; 0x10b
 8011af0:	490f      	ldr	r1, [pc, #60]	; (8011b30 <tcp_pbuf_prealloc+0xf0>)
 8011af2:	480d      	ldr	r0, [pc, #52]	; (8011b28 <tcp_pbuf_prealloc+0xe8>)
 8011af4:	f005 fb2c 	bl	8017150 <iprintf>
  *oversize = p->len - length;
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	895a      	ldrh	r2, [r3, #10]
 8011afc:	89bb      	ldrh	r3, [r7, #12]
 8011afe:	1ad3      	subs	r3, r2, r3
 8011b00:	b29a      	uxth	r2, r3
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	89ba      	ldrh	r2, [r7, #12]
 8011b0a:	811a      	strh	r2, [r3, #8]
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	891a      	ldrh	r2, [r3, #8]
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	815a      	strh	r2, [r3, #10]
  return p;
 8011b14:	693b      	ldr	r3, [r7, #16]
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3718      	adds	r7, #24
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	0801a1ac 	.word	0x0801a1ac
 8011b24:	0801a264 	.word	0x0801a264
 8011b28:	0801a200 	.word	0x0801a200
 8011b2c:	0801a288 	.word	0x0801a288
 8011b30:	0801a2a8 	.word	0x0801a2a8

08011b34 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d106      	bne.n	8011b54 <tcp_write_checks+0x20>
 8011b46:	4b33      	ldr	r3, [pc, #204]	; (8011c14 <tcp_write_checks+0xe0>)
 8011b48:	f240 1233 	movw	r2, #307	; 0x133
 8011b4c:	4932      	ldr	r1, [pc, #200]	; (8011c18 <tcp_write_checks+0xe4>)
 8011b4e:	4833      	ldr	r0, [pc, #204]	; (8011c1c <tcp_write_checks+0xe8>)
 8011b50:	f005 fafe 	bl	8017150 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	7d1b      	ldrb	r3, [r3, #20]
 8011b58:	2b04      	cmp	r3, #4
 8011b5a:	d00e      	beq.n	8011b7a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011b60:	2b07      	cmp	r3, #7
 8011b62:	d00a      	beq.n	8011b7a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011b68:	2b02      	cmp	r3, #2
 8011b6a:	d006      	beq.n	8011b7a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011b70:	2b03      	cmp	r3, #3
 8011b72:	d002      	beq.n	8011b7a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011b74:	f06f 030a 	mvn.w	r3, #10
 8011b78:	e048      	b.n	8011c0c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011b7a:	887b      	ldrh	r3, [r7, #2]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d101      	bne.n	8011b84 <tcp_write_checks+0x50>
    return ERR_OK;
 8011b80:	2300      	movs	r3, #0
 8011b82:	e043      	b.n	8011c0c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011b8a:	887a      	ldrh	r2, [r7, #2]
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	d909      	bls.n	8011ba4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	8b5b      	ldrh	r3, [r3, #26]
 8011b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8011ba2:	e033      	b.n	8011c0c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011baa:	2b08      	cmp	r3, #8
 8011bac:	d909      	bls.n	8011bc2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	8b5b      	ldrh	r3, [r3, #26]
 8011bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bb6:	b29a      	uxth	r2, r3
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8011bc0:	e024      	b.n	8011c0c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d00f      	beq.n	8011bec <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d11a      	bne.n	8011c0a <tcp_write_checks+0xd6>
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d116      	bne.n	8011c0a <tcp_write_checks+0xd6>
 8011bdc:	4b0d      	ldr	r3, [pc, #52]	; (8011c14 <tcp_write_checks+0xe0>)
 8011bde:	f240 1255 	movw	r2, #341	; 0x155
 8011be2:	490f      	ldr	r1, [pc, #60]	; (8011c20 <tcp_write_checks+0xec>)
 8011be4:	480d      	ldr	r0, [pc, #52]	; (8011c1c <tcp_write_checks+0xe8>)
 8011be6:	f005 fab3 	bl	8017150 <iprintf>
 8011bea:	e00e      	b.n	8011c0a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d103      	bne.n	8011bfc <tcp_write_checks+0xc8>
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d006      	beq.n	8011c0a <tcp_write_checks+0xd6>
 8011bfc:	4b05      	ldr	r3, [pc, #20]	; (8011c14 <tcp_write_checks+0xe0>)
 8011bfe:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011c02:	4908      	ldr	r1, [pc, #32]	; (8011c24 <tcp_write_checks+0xf0>)
 8011c04:	4805      	ldr	r0, [pc, #20]	; (8011c1c <tcp_write_checks+0xe8>)
 8011c06:	f005 faa3 	bl	8017150 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011c0a:	2300      	movs	r3, #0
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3708      	adds	r7, #8
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}
 8011c14:	0801a1ac 	.word	0x0801a1ac
 8011c18:	0801a2bc 	.word	0x0801a2bc
 8011c1c:	0801a200 	.word	0x0801a200
 8011c20:	0801a2dc 	.word	0x0801a2dc
 8011c24:	0801a318 	.word	0x0801a318

08011c28 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011c28:	b590      	push	{r4, r7, lr}
 8011c2a:	b09b      	sub	sp, #108	; 0x6c
 8011c2c:	af04      	add	r7, sp, #16
 8011c2e:	60f8      	str	r0, [r7, #12]
 8011c30:	60b9      	str	r1, [r7, #8]
 8011c32:	4611      	mov	r1, r2
 8011c34:	461a      	mov	r2, r3
 8011c36:	460b      	mov	r3, r1
 8011c38:	80fb      	strh	r3, [r7, #6]
 8011c3a:	4613      	mov	r3, r2
 8011c3c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011c42:	2300      	movs	r3, #0
 8011c44:	653b      	str	r3, [r7, #80]	; 0x50
 8011c46:	2300      	movs	r3, #0
 8011c48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c4e:	2300      	movs	r3, #0
 8011c50:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011c52:	2300      	movs	r3, #0
 8011c54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011c62:	2300      	movs	r3, #0
 8011c64:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011c66:	2300      	movs	r3, #0
 8011c68:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d109      	bne.n	8011c84 <tcp_write+0x5c>
 8011c70:	4ba4      	ldr	r3, [pc, #656]	; (8011f04 <tcp_write+0x2dc>)
 8011c72:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011c76:	49a4      	ldr	r1, [pc, #656]	; (8011f08 <tcp_write+0x2e0>)
 8011c78:	48a4      	ldr	r0, [pc, #656]	; (8011f0c <tcp_write+0x2e4>)
 8011c7a:	f005 fa69 	bl	8017150 <iprintf>
 8011c7e:	f06f 030f 	mvn.w	r3, #15
 8011c82:	e32a      	b.n	80122da <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011c8a:	085b      	lsrs	r3, r3, #1
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c92:	4293      	cmp	r3, r2
 8011c94:	bf28      	it	cs
 8011c96:	4613      	movcs	r3, r2
 8011c98:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011c9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d102      	bne.n	8011ca6 <tcp_write+0x7e>
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ca4:	e000      	b.n	8011ca8 <tcp_write+0x80>
 8011ca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ca8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d109      	bne.n	8011cc4 <tcp_write+0x9c>
 8011cb0:	4b94      	ldr	r3, [pc, #592]	; (8011f04 <tcp_write+0x2dc>)
 8011cb2:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011cb6:	4996      	ldr	r1, [pc, #600]	; (8011f10 <tcp_write+0x2e8>)
 8011cb8:	4894      	ldr	r0, [pc, #592]	; (8011f0c <tcp_write+0x2e4>)
 8011cba:	f005 fa49 	bl	8017150 <iprintf>
 8011cbe:	f06f 030f 	mvn.w	r3, #15
 8011cc2:	e30a      	b.n	80122da <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011cc4:	88fb      	ldrh	r3, [r7, #6]
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	68f8      	ldr	r0, [r7, #12]
 8011cca:	f7ff ff33 	bl	8011b34 <tcp_write_checks>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011cd4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d002      	beq.n	8011ce2 <tcp_write+0xba>
    return err;
 8011cdc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011ce0:	e2fb      	b.n	80122da <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ce8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011cec:	2300      	movs	r3, #0
 8011cee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	f000 80f6 	beq.w	8011ee8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d00:	653b      	str	r3, [r7, #80]	; 0x50
 8011d02:	e002      	b.n	8011d0a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d1f8      	bne.n	8011d04 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d14:	7a9b      	ldrb	r3, [r3, #10]
 8011d16:	009b      	lsls	r3, r3, #2
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	f003 0304 	and.w	r3, r3, #4
 8011d1e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011d20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d24:	891b      	ldrh	r3, [r3, #8]
 8011d26:	4619      	mov	r1, r3
 8011d28:	8c3b      	ldrh	r3, [r7, #32]
 8011d2a:	440b      	add	r3, r1
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	da06      	bge.n	8011d3e <tcp_write+0x116>
 8011d30:	4b74      	ldr	r3, [pc, #464]	; (8011f04 <tcp_write+0x2dc>)
 8011d32:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011d36:	4977      	ldr	r1, [pc, #476]	; (8011f14 <tcp_write+0x2ec>)
 8011d38:	4874      	ldr	r0, [pc, #464]	; (8011f0c <tcp_write+0x2e4>)
 8011d3a:	f005 fa09 	bl	8017150 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d40:	891a      	ldrh	r2, [r3, #8]
 8011d42:	8c3b      	ldrh	r3, [r7, #32]
 8011d44:	4413      	add	r3, r2
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d4a:	1ad3      	subs	r3, r2, r3
 8011d4c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011d54:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011d56:	8a7b      	ldrh	r3, [r7, #18]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d026      	beq.n	8011daa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011d5c:	8a7b      	ldrh	r3, [r7, #18]
 8011d5e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d206      	bcs.n	8011d72 <tcp_write+0x14a>
 8011d64:	4b67      	ldr	r3, [pc, #412]	; (8011f04 <tcp_write+0x2dc>)
 8011d66:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011d6a:	496b      	ldr	r1, [pc, #428]	; (8011f18 <tcp_write+0x2f0>)
 8011d6c:	4867      	ldr	r0, [pc, #412]	; (8011f0c <tcp_write+0x2e4>)
 8011d6e:	f005 f9ef 	bl	8017150 <iprintf>
      seg = last_unsent;
 8011d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d74:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011d76:	8a7b      	ldrh	r3, [r7, #18]
 8011d78:	88fa      	ldrh	r2, [r7, #6]
 8011d7a:	4293      	cmp	r3, r2
 8011d7c:	bf28      	it	cs
 8011d7e:	4613      	movcs	r3, r2
 8011d80:	b29b      	uxth	r3, r3
 8011d82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d84:	4293      	cmp	r3, r2
 8011d86:	bf28      	it	cs
 8011d88:	4613      	movcs	r3, r2
 8011d8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011d8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d92:	4413      	add	r3, r2
 8011d94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011d98:	8a7a      	ldrh	r2, [r7, #18]
 8011d9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d9c:	1ad3      	subs	r3, r2, r3
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011da2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011da4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011da6:	1ad3      	subs	r3, r2, r3
 8011da8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011daa:	8a7b      	ldrh	r3, [r7, #18]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d00b      	beq.n	8011dc8 <tcp_write+0x1a0>
 8011db0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011db4:	88fb      	ldrh	r3, [r7, #6]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d006      	beq.n	8011dc8 <tcp_write+0x1a0>
 8011dba:	4b52      	ldr	r3, [pc, #328]	; (8011f04 <tcp_write+0x2dc>)
 8011dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011dc0:	4956      	ldr	r1, [pc, #344]	; (8011f1c <tcp_write+0x2f4>)
 8011dc2:	4852      	ldr	r0, [pc, #328]	; (8011f0c <tcp_write+0x2e4>)
 8011dc4:	f005 f9c4 	bl	8017150 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011dc8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011dcc:	88fb      	ldrh	r3, [r7, #6]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	f080 8167 	bcs.w	80120a2 <tcp_write+0x47a>
 8011dd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	f000 8163 	beq.w	80120a2 <tcp_write+0x47a>
 8011ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dde:	891b      	ldrh	r3, [r3, #8]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	f000 815e 	beq.w	80120a2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011de6:	88fa      	ldrh	r2, [r7, #6]
 8011de8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dec:	1ad2      	subs	r2, r2, r3
 8011dee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011df0:	4293      	cmp	r3, r2
 8011df2:	bfa8      	it	ge
 8011df4:	4613      	movge	r3, r2
 8011df6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dfa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011dfc:	797b      	ldrb	r3, [r7, #5]
 8011dfe:	f003 0301 	and.w	r3, r3, #1
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d027      	beq.n	8011e56 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011e06:	f107 0012 	add.w	r0, r7, #18
 8011e0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011e0c:	8bf9      	ldrh	r1, [r7, #30]
 8011e0e:	2301      	movs	r3, #1
 8011e10:	9302      	str	r3, [sp, #8]
 8011e12:	797b      	ldrb	r3, [r7, #5]
 8011e14:	9301      	str	r3, [sp, #4]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	9300      	str	r3, [sp, #0]
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	f7ff fe0f 	bl	8011a40 <tcp_pbuf_prealloc>
 8011e22:	6578      	str	r0, [r7, #84]	; 0x54
 8011e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	f000 8225 	beq.w	8012276 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e2e:	6858      	ldr	r0, [r3, #4]
 8011e30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e34:	68ba      	ldr	r2, [r7, #8]
 8011e36:	4413      	add	r3, r2
 8011e38:	8bfa      	ldrh	r2, [r7, #30]
 8011e3a:	4619      	mov	r1, r3
 8011e3c:	f005 f892 	bl	8016f64 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011e40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011e42:	f7fb fa79 	bl	800d338 <pbuf_clen>
 8011e46:	4603      	mov	r3, r0
 8011e48:	461a      	mov	r2, r3
 8011e4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011e4e:	4413      	add	r3, r2
 8011e50:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011e54:	e041      	b.n	8011eda <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8011e5c:	e002      	b.n	8011e64 <tcp_write+0x23c>
 8011e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	637b      	str	r3, [r7, #52]	; 0x34
 8011e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d1f8      	bne.n	8011e5e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e6e:	7b1b      	ldrb	r3, [r3, #12]
 8011e70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d115      	bne.n	8011ea4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e7a:	685b      	ldr	r3, [r3, #4]
 8011e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e7e:	8952      	ldrh	r2, [r2, #10]
 8011e80:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011e82:	68ba      	ldr	r2, [r7, #8]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d10d      	bne.n	8011ea4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011e88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d006      	beq.n	8011e9e <tcp_write+0x276>
 8011e90:	4b1c      	ldr	r3, [pc, #112]	; (8011f04 <tcp_write+0x2dc>)
 8011e92:	f240 2231 	movw	r2, #561	; 0x231
 8011e96:	4922      	ldr	r1, [pc, #136]	; (8011f20 <tcp_write+0x2f8>)
 8011e98:	481c      	ldr	r0, [pc, #112]	; (8011f0c <tcp_write+0x2e4>)
 8011e9a:	f005 f959 	bl	8017150 <iprintf>
          extendlen = seglen;
 8011e9e:	8bfb      	ldrh	r3, [r7, #30]
 8011ea0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011ea2:	e01a      	b.n	8011eda <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011ea4:	8bfb      	ldrh	r3, [r7, #30]
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	2000      	movs	r0, #0
 8011eac:	f7fa fed2 	bl	800cc54 <pbuf_alloc>
 8011eb0:	6578      	str	r0, [r7, #84]	; 0x54
 8011eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	f000 81e0 	beq.w	801227a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011eba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ebe:	68ba      	ldr	r2, [r7, #8]
 8011ec0:	441a      	add	r2, r3
 8011ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ec4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011ec6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011ec8:	f7fb fa36 	bl	800d338 <pbuf_clen>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	461a      	mov	r2, r3
 8011ed0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011ed4:	4413      	add	r3, r2
 8011ed6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011eda:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ede:	8bfb      	ldrh	r3, [r7, #30]
 8011ee0:	4413      	add	r3, r2
 8011ee2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011ee6:	e0dc      	b.n	80120a2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	f000 80d7 	beq.w	80120a2 <tcp_write+0x47a>
 8011ef4:	4b03      	ldr	r3, [pc, #12]	; (8011f04 <tcp_write+0x2dc>)
 8011ef6:	f240 224a 	movw	r2, #586	; 0x24a
 8011efa:	490a      	ldr	r1, [pc, #40]	; (8011f24 <tcp_write+0x2fc>)
 8011efc:	4803      	ldr	r0, [pc, #12]	; (8011f0c <tcp_write+0x2e4>)
 8011efe:	f005 f927 	bl	8017150 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011f02:	e0ce      	b.n	80120a2 <tcp_write+0x47a>
 8011f04:	0801a1ac 	.word	0x0801a1ac
 8011f08:	0801a34c 	.word	0x0801a34c
 8011f0c:	0801a200 	.word	0x0801a200
 8011f10:	0801a364 	.word	0x0801a364
 8011f14:	0801a398 	.word	0x0801a398
 8011f18:	0801a3b0 	.word	0x0801a3b0
 8011f1c:	0801a3d0 	.word	0x0801a3d0
 8011f20:	0801a3f0 	.word	0x0801a3f0
 8011f24:	0801a41c 	.word	0x0801a41c
    struct pbuf *p;
    u16_t left = len - pos;
 8011f28:	88fa      	ldrh	r2, [r7, #6]
 8011f2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f2e:	1ad3      	subs	r3, r2, r3
 8011f30:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011f32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f36:	b29b      	uxth	r3, r3
 8011f38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f3a:	1ad3      	subs	r3, r2, r3
 8011f3c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011f3e:	8b7a      	ldrh	r2, [r7, #26]
 8011f40:	8bbb      	ldrh	r3, [r7, #28]
 8011f42:	4293      	cmp	r3, r2
 8011f44:	bf28      	it	cs
 8011f46:	4613      	movcs	r3, r2
 8011f48:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011f4a:	797b      	ldrb	r3, [r7, #5]
 8011f4c:	f003 0301 	and.w	r3, r3, #1
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d036      	beq.n	8011fc2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011f54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f58:	b29a      	uxth	r2, r3
 8011f5a:	8b3b      	ldrh	r3, [r7, #24]
 8011f5c:	4413      	add	r3, r2
 8011f5e:	b299      	uxth	r1, r3
 8011f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	bf0c      	ite	eq
 8011f66:	2301      	moveq	r3, #1
 8011f68:	2300      	movne	r3, #0
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	f107 0012 	add.w	r0, r7, #18
 8011f70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f72:	9302      	str	r3, [sp, #8]
 8011f74:	797b      	ldrb	r3, [r7, #5]
 8011f76:	9301      	str	r3, [sp, #4]
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	9300      	str	r3, [sp, #0]
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	2036      	movs	r0, #54	; 0x36
 8011f80:	f7ff fd5e 	bl	8011a40 <tcp_pbuf_prealloc>
 8011f84:	6338      	str	r0, [r7, #48]	; 0x30
 8011f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	f000 8178 	beq.w	801227e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f90:	895b      	ldrh	r3, [r3, #10]
 8011f92:	8b3a      	ldrh	r2, [r7, #24]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d906      	bls.n	8011fa6 <tcp_write+0x37e>
 8011f98:	4b8c      	ldr	r3, [pc, #560]	; (80121cc <tcp_write+0x5a4>)
 8011f9a:	f240 2266 	movw	r2, #614	; 0x266
 8011f9e:	498c      	ldr	r1, [pc, #560]	; (80121d0 <tcp_write+0x5a8>)
 8011fa0:	488c      	ldr	r0, [pc, #560]	; (80121d4 <tcp_write+0x5ac>)
 8011fa2:	f005 f8d5 	bl	8017150 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa8:	685a      	ldr	r2, [r3, #4]
 8011faa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011fae:	18d0      	adds	r0, r2, r3
 8011fb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fb4:	68ba      	ldr	r2, [r7, #8]
 8011fb6:	4413      	add	r3, r2
 8011fb8:	8b3a      	ldrh	r2, [r7, #24]
 8011fba:	4619      	mov	r1, r3
 8011fbc:	f004 ffd2 	bl	8016f64 <memcpy>
 8011fc0:	e02f      	b.n	8012022 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011fc2:	8a7b      	ldrh	r3, [r7, #18]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d006      	beq.n	8011fd6 <tcp_write+0x3ae>
 8011fc8:	4b80      	ldr	r3, [pc, #512]	; (80121cc <tcp_write+0x5a4>)
 8011fca:	f240 2271 	movw	r2, #625	; 0x271
 8011fce:	4982      	ldr	r1, [pc, #520]	; (80121d8 <tcp_write+0x5b0>)
 8011fd0:	4880      	ldr	r0, [pc, #512]	; (80121d4 <tcp_write+0x5ac>)
 8011fd2:	f005 f8bd 	bl	8017150 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011fd6:	8b3b      	ldrh	r3, [r7, #24]
 8011fd8:	2201      	movs	r2, #1
 8011fda:	4619      	mov	r1, r3
 8011fdc:	2036      	movs	r0, #54	; 0x36
 8011fde:	f7fa fe39 	bl	800cc54 <pbuf_alloc>
 8011fe2:	6178      	str	r0, [r7, #20]
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	f000 814b 	beq.w	8012282 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011fec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ff0:	68ba      	ldr	r2, [r7, #8]
 8011ff2:	441a      	add	r2, r3
 8011ff4:	697b      	ldr	r3, [r7, #20]
 8011ff6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011ff8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011ffc:	b29b      	uxth	r3, r3
 8011ffe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012002:	4619      	mov	r1, r3
 8012004:	2036      	movs	r0, #54	; 0x36
 8012006:	f7fa fe25 	bl	800cc54 <pbuf_alloc>
 801200a:	6338      	str	r0, [r7, #48]	; 0x30
 801200c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801200e:	2b00      	cmp	r3, #0
 8012010:	d103      	bne.n	801201a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012012:	6978      	ldr	r0, [r7, #20]
 8012014:	f7fb f902 	bl	800d21c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012018:	e136      	b.n	8012288 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801201a:	6979      	ldr	r1, [r7, #20]
 801201c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801201e:	f7fb f9cb 	bl	800d3b8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012024:	f7fb f988 	bl	800d338 <pbuf_clen>
 8012028:	4603      	mov	r3, r0
 801202a:	461a      	mov	r2, r3
 801202c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012030:	4413      	add	r3, r2
 8012032:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801203a:	2b09      	cmp	r3, #9
 801203c:	d903      	bls.n	8012046 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801203e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012040:	f7fb f8ec 	bl	800d21c <pbuf_free>
      goto memerr;
 8012044:	e120      	b.n	8012288 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801204a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801204e:	441a      	add	r2, r3
 8012050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012054:	9300      	str	r3, [sp, #0]
 8012056:	4613      	mov	r3, r2
 8012058:	2200      	movs	r2, #0
 801205a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801205c:	68f8      	ldr	r0, [r7, #12]
 801205e:	f7ff fc51 	bl	8011904 <tcp_create_segment>
 8012062:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012066:	2b00      	cmp	r3, #0
 8012068:	f000 810d 	beq.w	8012286 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801206c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801206e:	2b00      	cmp	r3, #0
 8012070:	d102      	bne.n	8012078 <tcp_write+0x450>
      queue = seg;
 8012072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012074:	647b      	str	r3, [r7, #68]	; 0x44
 8012076:	e00c      	b.n	8012092 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801207a:	2b00      	cmp	r3, #0
 801207c:	d106      	bne.n	801208c <tcp_write+0x464>
 801207e:	4b53      	ldr	r3, [pc, #332]	; (80121cc <tcp_write+0x5a4>)
 8012080:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012084:	4955      	ldr	r1, [pc, #340]	; (80121dc <tcp_write+0x5b4>)
 8012086:	4853      	ldr	r0, [pc, #332]	; (80121d4 <tcp_write+0x5ac>)
 8012088:	f005 f862 	bl	8017150 <iprintf>
      prev_seg->next = seg;
 801208c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801208e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012090:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012094:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012096:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801209a:	8b3b      	ldrh	r3, [r7, #24]
 801209c:	4413      	add	r3, r2
 801209e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80120a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80120a6:	88fb      	ldrh	r3, [r7, #6]
 80120a8:	429a      	cmp	r2, r3
 80120aa:	f4ff af3d 	bcc.w	8011f28 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80120ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d02c      	beq.n	801210e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80120b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120ba:	e01e      	b.n	80120fa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80120bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120be:	891a      	ldrh	r2, [r3, #8]
 80120c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120c2:	4413      	add	r3, r2
 80120c4:	b29a      	uxth	r2, r3
 80120c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80120ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d110      	bne.n	80120f4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80120d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d4:	685b      	ldr	r3, [r3, #4]
 80120d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120d8:	8952      	ldrh	r2, [r2, #10]
 80120da:	4413      	add	r3, r2
 80120dc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80120de:	68b9      	ldr	r1, [r7, #8]
 80120e0:	4618      	mov	r0, r3
 80120e2:	f004 ff3f 	bl	8016f64 <memcpy>
        p->len += oversize_used;
 80120e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e8:	895a      	ldrh	r2, [r3, #10]
 80120ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120ec:	4413      	add	r3, r2
 80120ee:	b29a      	uxth	r2, r3
 80120f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80120f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d1dd      	bne.n	80120bc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012102:	891a      	ldrh	r2, [r3, #8]
 8012104:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012106:	4413      	add	r3, r2
 8012108:	b29a      	uxth	r2, r3
 801210a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801210c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801210e:	8a7a      	ldrh	r2, [r7, #18]
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012118:	2b00      	cmp	r3, #0
 801211a:	d018      	beq.n	801214e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801211c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801211e:	2b00      	cmp	r3, #0
 8012120:	d106      	bne.n	8012130 <tcp_write+0x508>
 8012122:	4b2a      	ldr	r3, [pc, #168]	; (80121cc <tcp_write+0x5a4>)
 8012124:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012128:	492d      	ldr	r1, [pc, #180]	; (80121e0 <tcp_write+0x5b8>)
 801212a:	482a      	ldr	r0, [pc, #168]	; (80121d4 <tcp_write+0x5ac>)
 801212c:	f005 f810 	bl	8017150 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012136:	4618      	mov	r0, r3
 8012138:	f7fb f93e 	bl	800d3b8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801213c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801213e:	891a      	ldrh	r2, [r3, #8]
 8012140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012142:	891b      	ldrh	r3, [r3, #8]
 8012144:	4413      	add	r3, r2
 8012146:	b29a      	uxth	r2, r3
 8012148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801214a:	811a      	strh	r2, [r3, #8]
 801214c:	e037      	b.n	80121be <tcp_write+0x596>
  } else if (extendlen > 0) {
 801214e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012150:	2b00      	cmp	r3, #0
 8012152:	d034      	beq.n	80121be <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012156:	2b00      	cmp	r3, #0
 8012158:	d003      	beq.n	8012162 <tcp_write+0x53a>
 801215a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d106      	bne.n	8012170 <tcp_write+0x548>
 8012162:	4b1a      	ldr	r3, [pc, #104]	; (80121cc <tcp_write+0x5a4>)
 8012164:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012168:	491e      	ldr	r1, [pc, #120]	; (80121e4 <tcp_write+0x5bc>)
 801216a:	481a      	ldr	r0, [pc, #104]	; (80121d4 <tcp_write+0x5ac>)
 801216c:	f004 fff0 	bl	8017150 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	62bb      	str	r3, [r7, #40]	; 0x28
 8012176:	e009      	b.n	801218c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801217a:	891a      	ldrh	r2, [r3, #8]
 801217c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801217e:	4413      	add	r3, r2
 8012180:	b29a      	uxth	r2, r3
 8012182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012184:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	62bb      	str	r3, [r7, #40]	; 0x28
 801218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d1f1      	bne.n	8012178 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012196:	891a      	ldrh	r2, [r3, #8]
 8012198:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801219a:	4413      	add	r3, r2
 801219c:	b29a      	uxth	r2, r3
 801219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80121a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a4:	895a      	ldrh	r2, [r3, #10]
 80121a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80121a8:	4413      	add	r3, r2
 80121aa:	b29a      	uxth	r2, r3
 80121ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ae:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80121b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121b2:	891a      	ldrh	r2, [r3, #8]
 80121b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80121b6:	4413      	add	r3, r2
 80121b8:	b29a      	uxth	r2, r3
 80121ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121bc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80121be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d111      	bne.n	80121e8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80121ca:	e010      	b.n	80121ee <tcp_write+0x5c6>
 80121cc:	0801a1ac 	.word	0x0801a1ac
 80121d0:	0801a44c 	.word	0x0801a44c
 80121d4:	0801a200 	.word	0x0801a200
 80121d8:	0801a48c 	.word	0x0801a48c
 80121dc:	0801a49c 	.word	0x0801a49c
 80121e0:	0801a4b0 	.word	0x0801a4b0
 80121e4:	0801a4e8 	.word	0x0801a4e8
  } else {
    last_unsent->next = queue;
 80121e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121ec:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80121f2:	88fb      	ldrh	r3, [r7, #6]
 80121f4:	441a      	add	r2, r3
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012200:	88fb      	ldrh	r3, [r7, #6]
 8012202:	1ad3      	subs	r3, r2, r3
 8012204:	b29a      	uxth	r2, r3
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012212:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801221c:	2b00      	cmp	r3, #0
 801221e:	d00e      	beq.n	801223e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012224:	2b00      	cmp	r3, #0
 8012226:	d10a      	bne.n	801223e <tcp_write+0x616>
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801222c:	2b00      	cmp	r3, #0
 801222e:	d106      	bne.n	801223e <tcp_write+0x616>
 8012230:	4b2c      	ldr	r3, [pc, #176]	; (80122e4 <tcp_write+0x6bc>)
 8012232:	f240 3212 	movw	r2, #786	; 0x312
 8012236:	492c      	ldr	r1, [pc, #176]	; (80122e8 <tcp_write+0x6c0>)
 8012238:	482c      	ldr	r0, [pc, #176]	; (80122ec <tcp_write+0x6c4>)
 801223a:	f004 ff89 	bl	8017150 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801223e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012240:	2b00      	cmp	r3, #0
 8012242:	d016      	beq.n	8012272 <tcp_write+0x64a>
 8012244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012246:	68db      	ldr	r3, [r3, #12]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d012      	beq.n	8012272 <tcp_write+0x64a>
 801224c:	797b      	ldrb	r3, [r7, #5]
 801224e:	f003 0302 	and.w	r3, r3, #2
 8012252:	2b00      	cmp	r3, #0
 8012254:	d10d      	bne.n	8012272 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012258:	68db      	ldr	r3, [r3, #12]
 801225a:	899b      	ldrh	r3, [r3, #12]
 801225c:	b29c      	uxth	r4, r3
 801225e:	2008      	movs	r0, #8
 8012260:	f7f9 fc94 	bl	800bb8c <lwip_htons>
 8012264:	4603      	mov	r3, r0
 8012266:	461a      	mov	r2, r3
 8012268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801226a:	68db      	ldr	r3, [r3, #12]
 801226c:	4322      	orrs	r2, r4
 801226e:	b292      	uxth	r2, r2
 8012270:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012272:	2300      	movs	r3, #0
 8012274:	e031      	b.n	80122da <tcp_write+0x6b2>
          goto memerr;
 8012276:	bf00      	nop
 8012278:	e006      	b.n	8012288 <tcp_write+0x660>
            goto memerr;
 801227a:	bf00      	nop
 801227c:	e004      	b.n	8012288 <tcp_write+0x660>
        goto memerr;
 801227e:	bf00      	nop
 8012280:	e002      	b.n	8012288 <tcp_write+0x660>
        goto memerr;
 8012282:	bf00      	nop
 8012284:	e000      	b.n	8012288 <tcp_write+0x660>
      goto memerr;
 8012286:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	8b5b      	ldrh	r3, [r3, #26]
 801228c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012290:	b29a      	uxth	r2, r3
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012298:	2b00      	cmp	r3, #0
 801229a:	d002      	beq.n	80122a2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801229c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801229e:	f7fa ffbd 	bl	800d21c <pbuf_free>
  }
  if (queue != NULL) {
 80122a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d002      	beq.n	80122ae <tcp_write+0x686>
    tcp_segs_free(queue);
 80122a8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80122aa:	f7fc fb6b 	bl	800e984 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d00e      	beq.n	80122d6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d10a      	bne.n	80122d6 <tcp_write+0x6ae>
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d106      	bne.n	80122d6 <tcp_write+0x6ae>
 80122c8:	4b06      	ldr	r3, [pc, #24]	; (80122e4 <tcp_write+0x6bc>)
 80122ca:	f240 3227 	movw	r2, #807	; 0x327
 80122ce:	4906      	ldr	r1, [pc, #24]	; (80122e8 <tcp_write+0x6c0>)
 80122d0:	4806      	ldr	r0, [pc, #24]	; (80122ec <tcp_write+0x6c4>)
 80122d2:	f004 ff3d 	bl	8017150 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80122d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80122da:	4618      	mov	r0, r3
 80122dc:	375c      	adds	r7, #92	; 0x5c
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd90      	pop	{r4, r7, pc}
 80122e2:	bf00      	nop
 80122e4:	0801a1ac 	.word	0x0801a1ac
 80122e8:	0801a520 	.word	0x0801a520
 80122ec:	0801a200 	.word	0x0801a200

080122f0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80122f0:	b590      	push	{r4, r7, lr}
 80122f2:	b08b      	sub	sp, #44	; 0x2c
 80122f4:	af02      	add	r7, sp, #8
 80122f6:	6078      	str	r0, [r7, #4]
 80122f8:	460b      	mov	r3, r1
 80122fa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80122fc:	2300      	movs	r3, #0
 80122fe:	61fb      	str	r3, [r7, #28]
 8012300:	2300      	movs	r3, #0
 8012302:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012304:	2300      	movs	r3, #0
 8012306:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d106      	bne.n	801231c <tcp_split_unsent_seg+0x2c>
 801230e:	4b95      	ldr	r3, [pc, #596]	; (8012564 <tcp_split_unsent_seg+0x274>)
 8012310:	f240 324b 	movw	r2, #843	; 0x34b
 8012314:	4994      	ldr	r1, [pc, #592]	; (8012568 <tcp_split_unsent_seg+0x278>)
 8012316:	4895      	ldr	r0, [pc, #596]	; (801256c <tcp_split_unsent_seg+0x27c>)
 8012318:	f004 ff1a 	bl	8017150 <iprintf>

  useg = pcb->unsent;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012320:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d102      	bne.n	801232e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012328:	f04f 33ff 	mov.w	r3, #4294967295
 801232c:	e116      	b.n	801255c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801232e:	887b      	ldrh	r3, [r7, #2]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d109      	bne.n	8012348 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012334:	4b8b      	ldr	r3, [pc, #556]	; (8012564 <tcp_split_unsent_seg+0x274>)
 8012336:	f240 3253 	movw	r2, #851	; 0x353
 801233a:	498d      	ldr	r1, [pc, #564]	; (8012570 <tcp_split_unsent_seg+0x280>)
 801233c:	488b      	ldr	r0, [pc, #556]	; (801256c <tcp_split_unsent_seg+0x27c>)
 801233e:	f004 ff07 	bl	8017150 <iprintf>
    return ERR_VAL;
 8012342:	f06f 0305 	mvn.w	r3, #5
 8012346:	e109      	b.n	801255c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	891b      	ldrh	r3, [r3, #8]
 801234c:	887a      	ldrh	r2, [r7, #2]
 801234e:	429a      	cmp	r2, r3
 8012350:	d301      	bcc.n	8012356 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012352:	2300      	movs	r3, #0
 8012354:	e102      	b.n	801255c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801235a:	887a      	ldrh	r2, [r7, #2]
 801235c:	429a      	cmp	r2, r3
 801235e:	d906      	bls.n	801236e <tcp_split_unsent_seg+0x7e>
 8012360:	4b80      	ldr	r3, [pc, #512]	; (8012564 <tcp_split_unsent_seg+0x274>)
 8012362:	f240 325b 	movw	r2, #859	; 0x35b
 8012366:	4983      	ldr	r1, [pc, #524]	; (8012574 <tcp_split_unsent_seg+0x284>)
 8012368:	4880      	ldr	r0, [pc, #512]	; (801256c <tcp_split_unsent_seg+0x27c>)
 801236a:	f004 fef1 	bl	8017150 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	891b      	ldrh	r3, [r3, #8]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d106      	bne.n	8012384 <tcp_split_unsent_seg+0x94>
 8012376:	4b7b      	ldr	r3, [pc, #492]	; (8012564 <tcp_split_unsent_seg+0x274>)
 8012378:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801237c:	497e      	ldr	r1, [pc, #504]	; (8012578 <tcp_split_unsent_seg+0x288>)
 801237e:	487b      	ldr	r0, [pc, #492]	; (801256c <tcp_split_unsent_seg+0x27c>)
 8012380:	f004 fee6 	bl	8017150 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	7a9b      	ldrb	r3, [r3, #10]
 8012388:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801238a:	7bfb      	ldrb	r3, [r7, #15]
 801238c:	009b      	lsls	r3, r3, #2
 801238e:	b2db      	uxtb	r3, r3
 8012390:	f003 0304 	and.w	r3, r3, #4
 8012394:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	891a      	ldrh	r2, [r3, #8]
 801239a:	887b      	ldrh	r3, [r7, #2]
 801239c:	1ad3      	subs	r3, r2, r3
 801239e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80123a0:	7bbb      	ldrb	r3, [r7, #14]
 80123a2:	b29a      	uxth	r2, r3
 80123a4:	89bb      	ldrh	r3, [r7, #12]
 80123a6:	4413      	add	r3, r2
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80123ae:	4619      	mov	r1, r3
 80123b0:	2036      	movs	r0, #54	; 0x36
 80123b2:	f7fa fc4f 	bl	800cc54 <pbuf_alloc>
 80123b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80123b8:	693b      	ldr	r3, [r7, #16]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	f000 80b7 	beq.w	801252e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	685b      	ldr	r3, [r3, #4]
 80123c4:	891a      	ldrh	r2, [r3, #8]
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	891b      	ldrh	r3, [r3, #8]
 80123ca:	1ad3      	subs	r3, r2, r3
 80123cc:	b29a      	uxth	r2, r3
 80123ce:	887b      	ldrh	r3, [r7, #2]
 80123d0:	4413      	add	r3, r2
 80123d2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	6858      	ldr	r0, [r3, #4]
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	685a      	ldr	r2, [r3, #4]
 80123dc:	7bbb      	ldrb	r3, [r7, #14]
 80123de:	18d1      	adds	r1, r2, r3
 80123e0:	897b      	ldrh	r3, [r7, #10]
 80123e2:	89ba      	ldrh	r2, [r7, #12]
 80123e4:	f7fb f920 	bl	800d628 <pbuf_copy_partial>
 80123e8:	4603      	mov	r3, r0
 80123ea:	461a      	mov	r2, r3
 80123ec:	89bb      	ldrh	r3, [r7, #12]
 80123ee:	4293      	cmp	r3, r2
 80123f0:	f040 809f 	bne.w	8012532 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	68db      	ldr	r3, [r3, #12]
 80123f8:	899b      	ldrh	r3, [r3, #12]
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7f9 fbc5 	bl	800bb8c <lwip_htons>
 8012402:	4603      	mov	r3, r0
 8012404:	b2db      	uxtb	r3, r3
 8012406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801240a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801240c:	2300      	movs	r3, #0
 801240e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012410:	7efb      	ldrb	r3, [r7, #27]
 8012412:	f003 0308 	and.w	r3, r3, #8
 8012416:	2b00      	cmp	r3, #0
 8012418:	d007      	beq.n	801242a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801241a:	7efb      	ldrb	r3, [r7, #27]
 801241c:	f023 0308 	bic.w	r3, r3, #8
 8012420:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012422:	7ebb      	ldrb	r3, [r7, #26]
 8012424:	f043 0308 	orr.w	r3, r3, #8
 8012428:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801242a:	7efb      	ldrb	r3, [r7, #27]
 801242c:	f003 0301 	and.w	r3, r3, #1
 8012430:	2b00      	cmp	r3, #0
 8012432:	d007      	beq.n	8012444 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012434:	7efb      	ldrb	r3, [r7, #27]
 8012436:	f023 0301 	bic.w	r3, r3, #1
 801243a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801243c:	7ebb      	ldrb	r3, [r7, #26]
 801243e:	f043 0301 	orr.w	r3, r3, #1
 8012442:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	68db      	ldr	r3, [r3, #12]
 8012448:	685b      	ldr	r3, [r3, #4]
 801244a:	4618      	mov	r0, r3
 801244c:	f7f9 fbb3 	bl	800bbb6 <lwip_htonl>
 8012450:	4602      	mov	r2, r0
 8012452:	887b      	ldrh	r3, [r7, #2]
 8012454:	18d1      	adds	r1, r2, r3
 8012456:	7eba      	ldrb	r2, [r7, #26]
 8012458:	7bfb      	ldrb	r3, [r7, #15]
 801245a:	9300      	str	r3, [sp, #0]
 801245c:	460b      	mov	r3, r1
 801245e:	6939      	ldr	r1, [r7, #16]
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f7ff fa4f 	bl	8011904 <tcp_create_segment>
 8012466:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012468:	69fb      	ldr	r3, [r7, #28]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d063      	beq.n	8012536 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	685b      	ldr	r3, [r3, #4]
 8012472:	4618      	mov	r0, r3
 8012474:	f7fa ff60 	bl	800d338 <pbuf_clen>
 8012478:	4603      	mov	r3, r0
 801247a:	461a      	mov	r2, r3
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012482:	1a9b      	subs	r3, r3, r2
 8012484:	b29a      	uxth	r2, r3
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	6858      	ldr	r0, [r3, #4]
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	891a      	ldrh	r2, [r3, #8]
 8012496:	89bb      	ldrh	r3, [r7, #12]
 8012498:	1ad3      	subs	r3, r2, r3
 801249a:	b29b      	uxth	r3, r3
 801249c:	4619      	mov	r1, r3
 801249e:	f7fa fd37 	bl	800cf10 <pbuf_realloc>
  useg->len -= remainder;
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	891a      	ldrh	r2, [r3, #8]
 80124a6:	89bb      	ldrh	r3, [r7, #12]
 80124a8:	1ad3      	subs	r3, r2, r3
 80124aa:	b29a      	uxth	r2, r3
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	68db      	ldr	r3, [r3, #12]
 80124b4:	899b      	ldrh	r3, [r3, #12]
 80124b6:	b29c      	uxth	r4, r3
 80124b8:	7efb      	ldrb	r3, [r7, #27]
 80124ba:	b29b      	uxth	r3, r3
 80124bc:	4618      	mov	r0, r3
 80124be:	f7f9 fb65 	bl	800bb8c <lwip_htons>
 80124c2:	4603      	mov	r3, r0
 80124c4:	461a      	mov	r2, r3
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	68db      	ldr	r3, [r3, #12]
 80124ca:	4322      	orrs	r2, r4
 80124cc:	b292      	uxth	r2, r2
 80124ce:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	685b      	ldr	r3, [r3, #4]
 80124d4:	4618      	mov	r0, r3
 80124d6:	f7fa ff2f 	bl	800d338 <pbuf_clen>
 80124da:	4603      	mov	r3, r0
 80124dc:	461a      	mov	r2, r3
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124e4:	4413      	add	r3, r2
 80124e6:	b29a      	uxth	r2, r3
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7fa ff20 	bl	800d338 <pbuf_clen>
 80124f8:	4603      	mov	r3, r0
 80124fa:	461a      	mov	r2, r3
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012502:	4413      	add	r3, r2
 8012504:	b29a      	uxth	r2, r3
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	681a      	ldr	r2, [r3, #0]
 8012510:	69fb      	ldr	r3, [r7, #28]
 8012512:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	69fa      	ldr	r2, [r7, #28]
 8012518:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801251a:	69fb      	ldr	r3, [r7, #28]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d103      	bne.n	801252a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2200      	movs	r2, #0
 8012526:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801252a:	2300      	movs	r3, #0
 801252c:	e016      	b.n	801255c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801252e:	bf00      	nop
 8012530:	e002      	b.n	8012538 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012532:	bf00      	nop
 8012534:	e000      	b.n	8012538 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012536:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012538:	69fb      	ldr	r3, [r7, #28]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d006      	beq.n	801254c <tcp_split_unsent_seg+0x25c>
 801253e:	4b09      	ldr	r3, [pc, #36]	; (8012564 <tcp_split_unsent_seg+0x274>)
 8012540:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012544:	490d      	ldr	r1, [pc, #52]	; (801257c <tcp_split_unsent_seg+0x28c>)
 8012546:	4809      	ldr	r0, [pc, #36]	; (801256c <tcp_split_unsent_seg+0x27c>)
 8012548:	f004 fe02 	bl	8017150 <iprintf>
  if (p != NULL) {
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d002      	beq.n	8012558 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012552:	6938      	ldr	r0, [r7, #16]
 8012554:	f7fa fe62 	bl	800d21c <pbuf_free>
  }

  return ERR_MEM;
 8012558:	f04f 33ff 	mov.w	r3, #4294967295
}
 801255c:	4618      	mov	r0, r3
 801255e:	3724      	adds	r7, #36	; 0x24
 8012560:	46bd      	mov	sp, r7
 8012562:	bd90      	pop	{r4, r7, pc}
 8012564:	0801a1ac 	.word	0x0801a1ac
 8012568:	0801a540 	.word	0x0801a540
 801256c:	0801a200 	.word	0x0801a200
 8012570:	0801a564 	.word	0x0801a564
 8012574:	0801a588 	.word	0x0801a588
 8012578:	0801a598 	.word	0x0801a598
 801257c:	0801a5a8 	.word	0x0801a5a8

08012580 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012580:	b590      	push	{r4, r7, lr}
 8012582:	b085      	sub	sp, #20
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d106      	bne.n	801259c <tcp_send_fin+0x1c>
 801258e:	4b21      	ldr	r3, [pc, #132]	; (8012614 <tcp_send_fin+0x94>)
 8012590:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012594:	4920      	ldr	r1, [pc, #128]	; (8012618 <tcp_send_fin+0x98>)
 8012596:	4821      	ldr	r0, [pc, #132]	; (801261c <tcp_send_fin+0x9c>)
 8012598:	f004 fdda 	bl	8017150 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d02e      	beq.n	8012602 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125a8:	60fb      	str	r3, [r7, #12]
 80125aa:	e002      	b.n	80125b2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d1f8      	bne.n	80125ac <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	68db      	ldr	r3, [r3, #12]
 80125be:	899b      	ldrh	r3, [r3, #12]
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7f9 fae2 	bl	800bb8c <lwip_htons>
 80125c8:	4603      	mov	r3, r0
 80125ca:	b2db      	uxtb	r3, r3
 80125cc:	f003 0307 	and.w	r3, r3, #7
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d116      	bne.n	8012602 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	68db      	ldr	r3, [r3, #12]
 80125d8:	899b      	ldrh	r3, [r3, #12]
 80125da:	b29c      	uxth	r4, r3
 80125dc:	2001      	movs	r0, #1
 80125de:	f7f9 fad5 	bl	800bb8c <lwip_htons>
 80125e2:	4603      	mov	r3, r0
 80125e4:	461a      	mov	r2, r3
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	4322      	orrs	r2, r4
 80125ec:	b292      	uxth	r2, r2
 80125ee:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	8b5b      	ldrh	r3, [r3, #26]
 80125f4:	f043 0320 	orr.w	r3, r3, #32
 80125f8:	b29a      	uxth	r2, r3
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80125fe:	2300      	movs	r3, #0
 8012600:	e004      	b.n	801260c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012602:	2101      	movs	r1, #1
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f000 f80b 	bl	8012620 <tcp_enqueue_flags>
 801260a:	4603      	mov	r3, r0
}
 801260c:	4618      	mov	r0, r3
 801260e:	3714      	adds	r7, #20
 8012610:	46bd      	mov	sp, r7
 8012612:	bd90      	pop	{r4, r7, pc}
 8012614:	0801a1ac 	.word	0x0801a1ac
 8012618:	0801a5b4 	.word	0x0801a5b4
 801261c:	0801a200 	.word	0x0801a200

08012620 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b08a      	sub	sp, #40	; 0x28
 8012624:	af02      	add	r7, sp, #8
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	460b      	mov	r3, r1
 801262a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801262c:	2300      	movs	r3, #0
 801262e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012630:	2300      	movs	r3, #0
 8012632:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012634:	78fb      	ldrb	r3, [r7, #3]
 8012636:	f003 0303 	and.w	r3, r3, #3
 801263a:	2b00      	cmp	r3, #0
 801263c:	d106      	bne.n	801264c <tcp_enqueue_flags+0x2c>
 801263e:	4b67      	ldr	r3, [pc, #412]	; (80127dc <tcp_enqueue_flags+0x1bc>)
 8012640:	f240 4211 	movw	r2, #1041	; 0x411
 8012644:	4966      	ldr	r1, [pc, #408]	; (80127e0 <tcp_enqueue_flags+0x1c0>)
 8012646:	4867      	ldr	r0, [pc, #412]	; (80127e4 <tcp_enqueue_flags+0x1c4>)
 8012648:	f004 fd82 	bl	8017150 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d106      	bne.n	8012660 <tcp_enqueue_flags+0x40>
 8012652:	4b62      	ldr	r3, [pc, #392]	; (80127dc <tcp_enqueue_flags+0x1bc>)
 8012654:	f240 4213 	movw	r2, #1043	; 0x413
 8012658:	4963      	ldr	r1, [pc, #396]	; (80127e8 <tcp_enqueue_flags+0x1c8>)
 801265a:	4862      	ldr	r0, [pc, #392]	; (80127e4 <tcp_enqueue_flags+0x1c4>)
 801265c:	f004 fd78 	bl	8017150 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012660:	78fb      	ldrb	r3, [r7, #3]
 8012662:	f003 0302 	and.w	r3, r3, #2
 8012666:	2b00      	cmp	r3, #0
 8012668:	d001      	beq.n	801266e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801266a:	2301      	movs	r3, #1
 801266c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801266e:	7ffb      	ldrb	r3, [r7, #31]
 8012670:	009b      	lsls	r3, r3, #2
 8012672:	b2db      	uxtb	r3, r3
 8012674:	f003 0304 	and.w	r3, r3, #4
 8012678:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801267a:	7dfb      	ldrb	r3, [r7, #23]
 801267c:	b29b      	uxth	r3, r3
 801267e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012682:	4619      	mov	r1, r3
 8012684:	2036      	movs	r0, #54	; 0x36
 8012686:	f7fa fae5 	bl	800cc54 <pbuf_alloc>
 801268a:	6138      	str	r0, [r7, #16]
 801268c:	693b      	ldr	r3, [r7, #16]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d109      	bne.n	80126a6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	8b5b      	ldrh	r3, [r3, #26]
 8012696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801269a:	b29a      	uxth	r2, r3
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80126a0:	f04f 33ff 	mov.w	r3, #4294967295
 80126a4:	e095      	b.n	80127d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	895a      	ldrh	r2, [r3, #10]
 80126aa:	7dfb      	ldrb	r3, [r7, #23]
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d206      	bcs.n	80126c0 <tcp_enqueue_flags+0xa0>
 80126b2:	4b4a      	ldr	r3, [pc, #296]	; (80127dc <tcp_enqueue_flags+0x1bc>)
 80126b4:	f240 4239 	movw	r2, #1081	; 0x439
 80126b8:	494c      	ldr	r1, [pc, #304]	; (80127ec <tcp_enqueue_flags+0x1cc>)
 80126ba:	484a      	ldr	r0, [pc, #296]	; (80127e4 <tcp_enqueue_flags+0x1c4>)
 80126bc:	f004 fd48 	bl	8017150 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80126c4:	78fa      	ldrb	r2, [r7, #3]
 80126c6:	7ffb      	ldrb	r3, [r7, #31]
 80126c8:	9300      	str	r3, [sp, #0]
 80126ca:	460b      	mov	r3, r1
 80126cc:	6939      	ldr	r1, [r7, #16]
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f7ff f918 	bl	8011904 <tcp_create_segment>
 80126d4:	60f8      	str	r0, [r7, #12]
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d109      	bne.n	80126f0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	8b5b      	ldrh	r3, [r3, #26]
 80126e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126e4:	b29a      	uxth	r2, r3
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80126ea:	f04f 33ff 	mov.w	r3, #4294967295
 80126ee:	e070      	b.n	80127d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	68db      	ldr	r3, [r3, #12]
 80126f4:	f003 0303 	and.w	r3, r3, #3
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d006      	beq.n	801270a <tcp_enqueue_flags+0xea>
 80126fc:	4b37      	ldr	r3, [pc, #220]	; (80127dc <tcp_enqueue_flags+0x1bc>)
 80126fe:	f240 4242 	movw	r2, #1090	; 0x442
 8012702:	493b      	ldr	r1, [pc, #236]	; (80127f0 <tcp_enqueue_flags+0x1d0>)
 8012704:	4837      	ldr	r0, [pc, #220]	; (80127e4 <tcp_enqueue_flags+0x1c4>)
 8012706:	f004 fd23 	bl	8017150 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	891b      	ldrh	r3, [r3, #8]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d006      	beq.n	8012720 <tcp_enqueue_flags+0x100>
 8012712:	4b32      	ldr	r3, [pc, #200]	; (80127dc <tcp_enqueue_flags+0x1bc>)
 8012714:	f240 4243 	movw	r2, #1091	; 0x443
 8012718:	4936      	ldr	r1, [pc, #216]	; (80127f4 <tcp_enqueue_flags+0x1d4>)
 801271a:	4832      	ldr	r0, [pc, #200]	; (80127e4 <tcp_enqueue_flags+0x1c4>)
 801271c:	f004 fd18 	bl	8017150 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012724:	2b00      	cmp	r3, #0
 8012726:	d103      	bne.n	8012730 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	68fa      	ldr	r2, [r7, #12]
 801272c:	66da      	str	r2, [r3, #108]	; 0x6c
 801272e:	e00d      	b.n	801274c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012734:	61bb      	str	r3, [r7, #24]
 8012736:	e002      	b.n	801273e <tcp_enqueue_flags+0x11e>
 8012738:	69bb      	ldr	r3, [r7, #24]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	61bb      	str	r3, [r7, #24]
 801273e:	69bb      	ldr	r3, [r7, #24]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d1f8      	bne.n	8012738 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012746:	69bb      	ldr	r3, [r7, #24]
 8012748:	68fa      	ldr	r2, [r7, #12]
 801274a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2200      	movs	r2, #0
 8012750:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012754:	78fb      	ldrb	r3, [r7, #3]
 8012756:	f003 0302 	and.w	r3, r3, #2
 801275a:	2b00      	cmp	r3, #0
 801275c:	d104      	bne.n	8012768 <tcp_enqueue_flags+0x148>
 801275e:	78fb      	ldrb	r3, [r7, #3]
 8012760:	f003 0301 	and.w	r3, r3, #1
 8012764:	2b00      	cmp	r3, #0
 8012766:	d004      	beq.n	8012772 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801276c:	1c5a      	adds	r2, r3, #1
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012772:	78fb      	ldrb	r3, [r7, #3]
 8012774:	f003 0301 	and.w	r3, r3, #1
 8012778:	2b00      	cmp	r3, #0
 801277a:	d006      	beq.n	801278a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	8b5b      	ldrh	r3, [r3, #26]
 8012780:	f043 0320 	orr.w	r3, r3, #32
 8012784:	b29a      	uxth	r2, r3
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	4618      	mov	r0, r3
 8012790:	f7fa fdd2 	bl	800d338 <pbuf_clen>
 8012794:	4603      	mov	r3, r0
 8012796:	461a      	mov	r2, r3
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801279e:	4413      	add	r3, r2
 80127a0:	b29a      	uxth	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d00e      	beq.n	80127d0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d10a      	bne.n	80127d0 <tcp_enqueue_flags+0x1b0>
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d106      	bne.n	80127d0 <tcp_enqueue_flags+0x1b0>
 80127c2:	4b06      	ldr	r3, [pc, #24]	; (80127dc <tcp_enqueue_flags+0x1bc>)
 80127c4:	f240 4265 	movw	r2, #1125	; 0x465
 80127c8:	490b      	ldr	r1, [pc, #44]	; (80127f8 <tcp_enqueue_flags+0x1d8>)
 80127ca:	4806      	ldr	r0, [pc, #24]	; (80127e4 <tcp_enqueue_flags+0x1c4>)
 80127cc:	f004 fcc0 	bl	8017150 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80127d0:	2300      	movs	r3, #0
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3720      	adds	r7, #32
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
 80127da:	bf00      	nop
 80127dc:	0801a1ac 	.word	0x0801a1ac
 80127e0:	0801a5d0 	.word	0x0801a5d0
 80127e4:	0801a200 	.word	0x0801a200
 80127e8:	0801a628 	.word	0x0801a628
 80127ec:	0801a648 	.word	0x0801a648
 80127f0:	0801a684 	.word	0x0801a684
 80127f4:	0801a69c 	.word	0x0801a69c
 80127f8:	0801a6c8 	.word	0x0801a6c8

080127fc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80127fc:	b5b0      	push	{r4, r5, r7, lr}
 80127fe:	b08a      	sub	sp, #40	; 0x28
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d106      	bne.n	8012818 <tcp_output+0x1c>
 801280a:	4b8a      	ldr	r3, [pc, #552]	; (8012a34 <tcp_output+0x238>)
 801280c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012810:	4989      	ldr	r1, [pc, #548]	; (8012a38 <tcp_output+0x23c>)
 8012812:	488a      	ldr	r0, [pc, #552]	; (8012a3c <tcp_output+0x240>)
 8012814:	f004 fc9c 	bl	8017150 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	7d1b      	ldrb	r3, [r3, #20]
 801281c:	2b01      	cmp	r3, #1
 801281e:	d106      	bne.n	801282e <tcp_output+0x32>
 8012820:	4b84      	ldr	r3, [pc, #528]	; (8012a34 <tcp_output+0x238>)
 8012822:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012826:	4986      	ldr	r1, [pc, #536]	; (8012a40 <tcp_output+0x244>)
 8012828:	4884      	ldr	r0, [pc, #528]	; (8012a3c <tcp_output+0x240>)
 801282a:	f004 fc91 	bl	8017150 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801282e:	4b85      	ldr	r3, [pc, #532]	; (8012a44 <tcp_output+0x248>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	687a      	ldr	r2, [r7, #4]
 8012834:	429a      	cmp	r2, r3
 8012836:	d101      	bne.n	801283c <tcp_output+0x40>
    return ERR_OK;
 8012838:	2300      	movs	r3, #0
 801283a:	e1ce      	b.n	8012bda <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012848:	4293      	cmp	r3, r2
 801284a:	bf28      	it	cs
 801284c:	4613      	movcs	r3, r2
 801284e:	b29b      	uxth	r3, r3
 8012850:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012856:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801285a:	2b00      	cmp	r3, #0
 801285c:	d10b      	bne.n	8012876 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	8b5b      	ldrh	r3, [r3, #26]
 8012862:	f003 0302 	and.w	r3, r3, #2
 8012866:	2b00      	cmp	r3, #0
 8012868:	f000 81aa 	beq.w	8012bc0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f000 fdcb 	bl	8013408 <tcp_send_empty_ack>
 8012872:	4603      	mov	r3, r0
 8012874:	e1b1      	b.n	8012bda <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012876:	6879      	ldr	r1, [r7, #4]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	3304      	adds	r3, #4
 801287c:	461a      	mov	r2, r3
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f7ff f824 	bl	80118cc <tcp_route>
 8012884:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012886:	697b      	ldr	r3, [r7, #20]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d102      	bne.n	8012892 <tcp_output+0x96>
    return ERR_RTE;
 801288c:	f06f 0303 	mvn.w	r3, #3
 8012890:	e1a3      	b.n	8012bda <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d003      	beq.n	80128a0 <tcp_output+0xa4>
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d111      	bne.n	80128c4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d002      	beq.n	80128ac <tcp_output+0xb0>
 80128a6:	697b      	ldr	r3, [r7, #20]
 80128a8:	3304      	adds	r3, #4
 80128aa:	e000      	b.n	80128ae <tcp_output+0xb2>
 80128ac:	2300      	movs	r3, #0
 80128ae:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d102      	bne.n	80128bc <tcp_output+0xc0>
      return ERR_RTE;
 80128b6:	f06f 0303 	mvn.w	r3, #3
 80128ba:	e18e      	b.n	8012bda <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	681a      	ldr	r2, [r3, #0]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80128c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c6:	68db      	ldr	r3, [r3, #12]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	4618      	mov	r0, r3
 80128cc:	f7f9 f973 	bl	800bbb6 <lwip_htonl>
 80128d0:	4602      	mov	r2, r0
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128d6:	1ad3      	subs	r3, r2, r3
 80128d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128da:	8912      	ldrh	r2, [r2, #8]
 80128dc:	4413      	add	r3, r2
 80128de:	69ba      	ldr	r2, [r7, #24]
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d227      	bcs.n	8012934 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80128ea:	461a      	mov	r2, r3
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	4293      	cmp	r3, r2
 80128f0:	d114      	bne.n	801291c <tcp_output+0x120>
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d110      	bne.n	801291c <tcp_output+0x120>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012900:	2b00      	cmp	r3, #0
 8012902:	d10b      	bne.n	801291c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2200      	movs	r2, #0
 8012908:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2201      	movs	r2, #1
 8012910:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2200      	movs	r2, #0
 8012918:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	8b5b      	ldrh	r3, [r3, #26]
 8012920:	f003 0302 	and.w	r3, r3, #2
 8012924:	2b00      	cmp	r3, #0
 8012926:	f000 814d 	beq.w	8012bc4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f000 fd6c 	bl	8013408 <tcp_send_empty_ack>
 8012930:	4603      	mov	r3, r0
 8012932:	e152      	b.n	8012bda <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2200      	movs	r2, #0
 8012938:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012940:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012942:	6a3b      	ldr	r3, [r7, #32]
 8012944:	2b00      	cmp	r3, #0
 8012946:	f000 811c 	beq.w	8012b82 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801294a:	e002      	b.n	8012952 <tcp_output+0x156>
 801294c:	6a3b      	ldr	r3, [r7, #32]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	623b      	str	r3, [r7, #32]
 8012952:	6a3b      	ldr	r3, [r7, #32]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d1f8      	bne.n	801294c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801295a:	e112      	b.n	8012b82 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	899b      	ldrh	r3, [r3, #12]
 8012962:	b29b      	uxth	r3, r3
 8012964:	4618      	mov	r0, r3
 8012966:	f7f9 f911 	bl	800bb8c <lwip_htons>
 801296a:	4603      	mov	r3, r0
 801296c:	b2db      	uxtb	r3, r3
 801296e:	f003 0304 	and.w	r3, r3, #4
 8012972:	2b00      	cmp	r3, #0
 8012974:	d006      	beq.n	8012984 <tcp_output+0x188>
 8012976:	4b2f      	ldr	r3, [pc, #188]	; (8012a34 <tcp_output+0x238>)
 8012978:	f240 5236 	movw	r2, #1334	; 0x536
 801297c:	4932      	ldr	r1, [pc, #200]	; (8012a48 <tcp_output+0x24c>)
 801297e:	482f      	ldr	r0, [pc, #188]	; (8012a3c <tcp_output+0x240>)
 8012980:	f004 fbe6 	bl	8017150 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012988:	2b00      	cmp	r3, #0
 801298a:	d01f      	beq.n	80129cc <tcp_output+0x1d0>
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	8b5b      	ldrh	r3, [r3, #26]
 8012990:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012994:	2b00      	cmp	r3, #0
 8012996:	d119      	bne.n	80129cc <tcp_output+0x1d0>
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801299c:	2b00      	cmp	r3, #0
 801299e:	d00b      	beq.n	80129b8 <tcp_output+0x1bc>
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d110      	bne.n	80129cc <tcp_output+0x1d0>
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129ae:	891a      	ldrh	r2, [r3, #8]
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d209      	bcs.n	80129cc <tcp_output+0x1d0>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d004      	beq.n	80129cc <tcp_output+0x1d0>
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129c8:	2b08      	cmp	r3, #8
 80129ca:	d901      	bls.n	80129d0 <tcp_output+0x1d4>
 80129cc:	2301      	movs	r3, #1
 80129ce:	e000      	b.n	80129d2 <tcp_output+0x1d6>
 80129d0:	2300      	movs	r3, #0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d106      	bne.n	80129e4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	8b5b      	ldrh	r3, [r3, #26]
 80129da:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80129de:	2b00      	cmp	r3, #0
 80129e0:	f000 80e4 	beq.w	8012bac <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	7d1b      	ldrb	r3, [r3, #20]
 80129e8:	2b02      	cmp	r3, #2
 80129ea:	d00d      	beq.n	8012a08 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80129ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ee:	68db      	ldr	r3, [r3, #12]
 80129f0:	899b      	ldrh	r3, [r3, #12]
 80129f2:	b29c      	uxth	r4, r3
 80129f4:	2010      	movs	r0, #16
 80129f6:	f7f9 f8c9 	bl	800bb8c <lwip_htons>
 80129fa:	4603      	mov	r3, r0
 80129fc:	461a      	mov	r2, r3
 80129fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a00:	68db      	ldr	r3, [r3, #12]
 8012a02:	4322      	orrs	r2, r4
 8012a04:	b292      	uxth	r2, r2
 8012a06:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012a08:	697a      	ldr	r2, [r7, #20]
 8012a0a:	6879      	ldr	r1, [r7, #4]
 8012a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a0e:	f000 f909 	bl	8012c24 <tcp_output_segment>
 8012a12:	4603      	mov	r3, r0
 8012a14:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d016      	beq.n	8012a4c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	8b5b      	ldrh	r3, [r3, #26]
 8012a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a26:	b29a      	uxth	r2, r3
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	835a      	strh	r2, [r3, #26]
      return err;
 8012a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a30:	e0d3      	b.n	8012bda <tcp_output+0x3de>
 8012a32:	bf00      	nop
 8012a34:	0801a1ac 	.word	0x0801a1ac
 8012a38:	0801a6f0 	.word	0x0801a6f0
 8012a3c:	0801a200 	.word	0x0801a200
 8012a40:	0801a708 	.word	0x0801a708
 8012a44:	2000d354 	.word	0x2000d354
 8012a48:	0801a730 	.word	0x0801a730
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4e:	681a      	ldr	r2, [r3, #0]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	7d1b      	ldrb	r3, [r3, #20]
 8012a58:	2b02      	cmp	r3, #2
 8012a5a:	d006      	beq.n	8012a6a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	8b5b      	ldrh	r3, [r3, #26]
 8012a60:	f023 0303 	bic.w	r3, r3, #3
 8012a64:	b29a      	uxth	r2, r3
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a6c:	68db      	ldr	r3, [r3, #12]
 8012a6e:	685b      	ldr	r3, [r3, #4]
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7f9 f8a0 	bl	800bbb6 <lwip_htonl>
 8012a76:	4604      	mov	r4, r0
 8012a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7a:	891b      	ldrh	r3, [r3, #8]
 8012a7c:	461d      	mov	r5, r3
 8012a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a80:	68db      	ldr	r3, [r3, #12]
 8012a82:	899b      	ldrh	r3, [r3, #12]
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7f9 f880 	bl	800bb8c <lwip_htons>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	f003 0303 	and.w	r3, r3, #3
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d001      	beq.n	8012a9c <tcp_output+0x2a0>
 8012a98:	2301      	movs	r3, #1
 8012a9a:	e000      	b.n	8012a9e <tcp_output+0x2a2>
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	442b      	add	r3, r5
 8012aa0:	4423      	add	r3, r4
 8012aa2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	da02      	bge.n	8012ab6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	68ba      	ldr	r2, [r7, #8]
 8012ab4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab8:	891b      	ldrh	r3, [r3, #8]
 8012aba:	461c      	mov	r4, r3
 8012abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abe:	68db      	ldr	r3, [r3, #12]
 8012ac0:	899b      	ldrh	r3, [r3, #12]
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7f9 f861 	bl	800bb8c <lwip_htons>
 8012aca:	4603      	mov	r3, r0
 8012acc:	b2db      	uxtb	r3, r3
 8012ace:	f003 0303 	and.w	r3, r3, #3
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d001      	beq.n	8012ada <tcp_output+0x2de>
 8012ad6:	2301      	movs	r3, #1
 8012ad8:	e000      	b.n	8012adc <tcp_output+0x2e0>
 8012ada:	2300      	movs	r3, #0
 8012adc:	4423      	add	r3, r4
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d049      	beq.n	8012b76 <tcp_output+0x37a>
      seg->next = NULL;
 8012ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d105      	bne.n	8012afc <tcp_output+0x300>
        pcb->unacked = seg;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012af4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af8:	623b      	str	r3, [r7, #32]
 8012afa:	e03f      	b.n	8012b7c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afe:	68db      	ldr	r3, [r3, #12]
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7f9 f857 	bl	800bbb6 <lwip_htonl>
 8012b08:	4604      	mov	r4, r0
 8012b0a:	6a3b      	ldr	r3, [r7, #32]
 8012b0c:	68db      	ldr	r3, [r3, #12]
 8012b0e:	685b      	ldr	r3, [r3, #4]
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7f9 f850 	bl	800bbb6 <lwip_htonl>
 8012b16:	4603      	mov	r3, r0
 8012b18:	1ae3      	subs	r3, r4, r3
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	da24      	bge.n	8012b68 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	3370      	adds	r3, #112	; 0x70
 8012b22:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012b24:	e002      	b.n	8012b2c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012b26:	69fb      	ldr	r3, [r7, #28]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012b2c:	69fb      	ldr	r3, [r7, #28]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d011      	beq.n	8012b58 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012b34:	69fb      	ldr	r3, [r7, #28]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	68db      	ldr	r3, [r3, #12]
 8012b3a:	685b      	ldr	r3, [r3, #4]
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7f9 f83a 	bl	800bbb6 <lwip_htonl>
 8012b42:	4604      	mov	r4, r0
 8012b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b46:	68db      	ldr	r3, [r3, #12]
 8012b48:	685b      	ldr	r3, [r3, #4]
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7f9 f833 	bl	800bbb6 <lwip_htonl>
 8012b50:	4603      	mov	r3, r0
 8012b52:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	dbe6      	blt.n	8012b26 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012b58:	69fb      	ldr	r3, [r7, #28]
 8012b5a:	681a      	ldr	r2, [r3, #0]
 8012b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b5e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b64:	601a      	str	r2, [r3, #0]
 8012b66:	e009      	b.n	8012b7c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012b68:	6a3b      	ldr	r3, [r7, #32]
 8012b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b6c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012b6e:	6a3b      	ldr	r3, [r7, #32]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	623b      	str	r3, [r7, #32]
 8012b74:	e002      	b.n	8012b7c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012b76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b78:	f7fb ff19 	bl	800e9ae <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b80:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d012      	beq.n	8012bae <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8a:	68db      	ldr	r3, [r3, #12]
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7f9 f811 	bl	800bbb6 <lwip_htonl>
 8012b94:	4602      	mov	r2, r0
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b9a:	1ad3      	subs	r3, r2, r3
 8012b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b9e:	8912      	ldrh	r2, [r2, #8]
 8012ba0:	4413      	add	r3, r2
  while (seg != NULL &&
 8012ba2:	69ba      	ldr	r2, [r7, #24]
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	f4bf aed9 	bcs.w	801295c <tcp_output+0x160>
 8012baa:	e000      	b.n	8012bae <tcp_output+0x3b2>
      break;
 8012bac:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d108      	bne.n	8012bc8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012bbe:	e004      	b.n	8012bca <tcp_output+0x3ce>
    goto output_done;
 8012bc0:	bf00      	nop
 8012bc2:	e002      	b.n	8012bca <tcp_output+0x3ce>
    goto output_done;
 8012bc4:	bf00      	nop
 8012bc6:	e000      	b.n	8012bca <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012bc8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	8b5b      	ldrh	r3, [r3, #26]
 8012bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012bd2:	b29a      	uxth	r2, r3
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012bd8:	2300      	movs	r3, #0
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3728      	adds	r7, #40	; 0x28
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bdb0      	pop	{r4, r5, r7, pc}
 8012be2:	bf00      	nop

08012be4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d106      	bne.n	8012c00 <tcp_output_segment_busy+0x1c>
 8012bf2:	4b09      	ldr	r3, [pc, #36]	; (8012c18 <tcp_output_segment_busy+0x34>)
 8012bf4:	f240 529a 	movw	r2, #1434	; 0x59a
 8012bf8:	4908      	ldr	r1, [pc, #32]	; (8012c1c <tcp_output_segment_busy+0x38>)
 8012bfa:	4809      	ldr	r0, [pc, #36]	; (8012c20 <tcp_output_segment_busy+0x3c>)
 8012bfc:	f004 faa8 	bl	8017150 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	7b9b      	ldrb	r3, [r3, #14]
 8012c06:	2b01      	cmp	r3, #1
 8012c08:	d001      	beq.n	8012c0e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	e000      	b.n	8012c10 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012c0e:	2300      	movs	r3, #0
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	3708      	adds	r7, #8
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}
 8012c18:	0801a1ac 	.word	0x0801a1ac
 8012c1c:	0801a748 	.word	0x0801a748
 8012c20:	0801a200 	.word	0x0801a200

08012c24 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012c24:	b5b0      	push	{r4, r5, r7, lr}
 8012c26:	b08c      	sub	sp, #48	; 0x30
 8012c28:	af04      	add	r7, sp, #16
 8012c2a:	60f8      	str	r0, [r7, #12]
 8012c2c:	60b9      	str	r1, [r7, #8]
 8012c2e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d106      	bne.n	8012c44 <tcp_output_segment+0x20>
 8012c36:	4b63      	ldr	r3, [pc, #396]	; (8012dc4 <tcp_output_segment+0x1a0>)
 8012c38:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012c3c:	4962      	ldr	r1, [pc, #392]	; (8012dc8 <tcp_output_segment+0x1a4>)
 8012c3e:	4863      	ldr	r0, [pc, #396]	; (8012dcc <tcp_output_segment+0x1a8>)
 8012c40:	f004 fa86 	bl	8017150 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d106      	bne.n	8012c58 <tcp_output_segment+0x34>
 8012c4a:	4b5e      	ldr	r3, [pc, #376]	; (8012dc4 <tcp_output_segment+0x1a0>)
 8012c4c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012c50:	495f      	ldr	r1, [pc, #380]	; (8012dd0 <tcp_output_segment+0x1ac>)
 8012c52:	485e      	ldr	r0, [pc, #376]	; (8012dcc <tcp_output_segment+0x1a8>)
 8012c54:	f004 fa7c 	bl	8017150 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d106      	bne.n	8012c6c <tcp_output_segment+0x48>
 8012c5e:	4b59      	ldr	r3, [pc, #356]	; (8012dc4 <tcp_output_segment+0x1a0>)
 8012c60:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012c64:	495b      	ldr	r1, [pc, #364]	; (8012dd4 <tcp_output_segment+0x1b0>)
 8012c66:	4859      	ldr	r0, [pc, #356]	; (8012dcc <tcp_output_segment+0x1a8>)
 8012c68:	f004 fa72 	bl	8017150 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012c6c:	68f8      	ldr	r0, [r7, #12]
 8012c6e:	f7ff ffb9 	bl	8012be4 <tcp_output_segment_busy>
 8012c72:	4603      	mov	r3, r0
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d001      	beq.n	8012c7c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	e09f      	b.n	8012dbc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	68dc      	ldr	r4, [r3, #12]
 8012c84:	4610      	mov	r0, r2
 8012c86:	f7f8 ff96 	bl	800bbb6 <lwip_htonl>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	68dc      	ldr	r4, [r3, #12]
 8012c96:	4610      	mov	r0, r2
 8012c98:	f7f8 ff78 	bl	800bb8c <lwip_htons>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ca4:	68ba      	ldr	r2, [r7, #8]
 8012ca6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012ca8:	441a      	add	r2, r3
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	3314      	adds	r3, #20
 8012cb4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	7a9b      	ldrb	r3, [r3, #10]
 8012cba:	f003 0301 	and.w	r3, r3, #1
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d015      	beq.n	8012cee <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	3304      	adds	r3, #4
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	6879      	ldr	r1, [r7, #4]
 8012cca:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012cce:	f7fc fa33 	bl	800f138 <tcp_eff_send_mss_netif>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012cd6:	8b7b      	ldrh	r3, [r7, #26]
 8012cd8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f7f8 ff6a 	bl	800bbb6 <lwip_htonl>
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	69fb      	ldr	r3, [r7, #28]
 8012ce6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012ce8:	69fb      	ldr	r3, [r7, #28]
 8012cea:	3304      	adds	r3, #4
 8012cec:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	da02      	bge.n	8012cfe <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d10c      	bne.n	8012d20 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012d06:	4b34      	ldr	r3, [pc, #208]	; (8012dd8 <tcp_output_segment+0x1b4>)
 8012d08:	681a      	ldr	r2, [r3, #0]
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	68db      	ldr	r3, [r3, #12]
 8012d12:	685b      	ldr	r3, [r3, #4]
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7f8 ff4e 	bl	800bbb6 <lwip_htonl>
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	68da      	ldr	r2, [r3, #12]
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	685b      	ldr	r3, [r3, #4]
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	1ad3      	subs	r3, r2, r3
 8012d2c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	8959      	ldrh	r1, [r3, #10]
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	8b3a      	ldrh	r2, [r7, #24]
 8012d3a:	1a8a      	subs	r2, r1, r2
 8012d3c:	b292      	uxth	r2, r2
 8012d3e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	8919      	ldrh	r1, [r3, #8]
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	8b3a      	ldrh	r2, [r7, #24]
 8012d4c:	1a8a      	subs	r2, r1, r2
 8012d4e:	b292      	uxth	r2, r2
 8012d50:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	685b      	ldr	r3, [r3, #4]
 8012d56:	68fa      	ldr	r2, [r7, #12]
 8012d58:	68d2      	ldr	r2, [r2, #12]
 8012d5a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	2200      	movs	r2, #0
 8012d62:	741a      	strb	r2, [r3, #16]
 8012d64:	2200      	movs	r2, #0
 8012d66:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	68db      	ldr	r3, [r3, #12]
 8012d6c:	f103 0214 	add.w	r2, r3, #20
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	7a9b      	ldrb	r3, [r3, #10]
 8012d74:	009b      	lsls	r3, r3, #2
 8012d76:	f003 0304 	and.w	r3, r3, #4
 8012d7a:	4413      	add	r3, r2
 8012d7c:	69fa      	ldr	r2, [r7, #28]
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d006      	beq.n	8012d90 <tcp_output_segment+0x16c>
 8012d82:	4b10      	ldr	r3, [pc, #64]	; (8012dc4 <tcp_output_segment+0x1a0>)
 8012d84:	f240 621c 	movw	r2, #1564	; 0x61c
 8012d88:	4914      	ldr	r1, [pc, #80]	; (8012ddc <tcp_output_segment+0x1b8>)
 8012d8a:	4810      	ldr	r0, [pc, #64]	; (8012dcc <tcp_output_segment+0x1a8>)
 8012d8c:	f004 f9e0 	bl	8017150 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	6858      	ldr	r0, [r3, #4]
 8012d94:	68b9      	ldr	r1, [r7, #8]
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	1d1c      	adds	r4, r3, #4
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	7add      	ldrb	r5, [r3, #11]
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	7a9b      	ldrb	r3, [r3, #10]
 8012da2:	687a      	ldr	r2, [r7, #4]
 8012da4:	9202      	str	r2, [sp, #8]
 8012da6:	2206      	movs	r2, #6
 8012da8:	9201      	str	r2, [sp, #4]
 8012daa:	9300      	str	r3, [sp, #0]
 8012dac:	462b      	mov	r3, r5
 8012dae:	4622      	mov	r2, r4
 8012db0:	f002 fd96 	bl	80158e0 <ip4_output_if>
 8012db4:	4603      	mov	r3, r0
 8012db6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012db8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3720      	adds	r7, #32
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8012dc4:	0801a1ac 	.word	0x0801a1ac
 8012dc8:	0801a770 	.word	0x0801a770
 8012dcc:	0801a200 	.word	0x0801a200
 8012dd0:	0801a790 	.word	0x0801a790
 8012dd4:	0801a7b0 	.word	0x0801a7b0
 8012dd8:	2000d308 	.word	0x2000d308
 8012ddc:	0801a7d4 	.word	0x0801a7d4

08012de0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012de0:	b5b0      	push	{r4, r5, r7, lr}
 8012de2:	b084      	sub	sp, #16
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d106      	bne.n	8012dfc <tcp_rexmit_rto_prepare+0x1c>
 8012dee:	4b31      	ldr	r3, [pc, #196]	; (8012eb4 <tcp_rexmit_rto_prepare+0xd4>)
 8012df0:	f240 6263 	movw	r2, #1635	; 0x663
 8012df4:	4930      	ldr	r1, [pc, #192]	; (8012eb8 <tcp_rexmit_rto_prepare+0xd8>)
 8012df6:	4831      	ldr	r0, [pc, #196]	; (8012ebc <tcp_rexmit_rto_prepare+0xdc>)
 8012df8:	f004 f9aa 	bl	8017150 <iprintf>

  if (pcb->unacked == NULL) {
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d102      	bne.n	8012e0a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012e04:	f06f 0305 	mvn.w	r3, #5
 8012e08:	e050      	b.n	8012eac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e0e:	60fb      	str	r3, [r7, #12]
 8012e10:	e00b      	b.n	8012e2a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012e12:	68f8      	ldr	r0, [r7, #12]
 8012e14:	f7ff fee6 	bl	8012be4 <tcp_output_segment_busy>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d002      	beq.n	8012e24 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012e1e:	f06f 0305 	mvn.w	r3, #5
 8012e22:	e043      	b.n	8012eac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	60fb      	str	r3, [r7, #12]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d1ef      	bne.n	8012e12 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012e32:	68f8      	ldr	r0, [r7, #12]
 8012e34:	f7ff fed6 	bl	8012be4 <tcp_output_segment_busy>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d002      	beq.n	8012e44 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012e3e:	f06f 0305 	mvn.w	r3, #5
 8012e42:	e033      	b.n	8012eac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2200      	movs	r2, #0
 8012e58:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	8b5b      	ldrh	r3, [r3, #26]
 8012e5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012e62:	b29a      	uxth	r2, r3
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	68db      	ldr	r3, [r3, #12]
 8012e6c:	685b      	ldr	r3, [r3, #4]
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7f8 fea1 	bl	800bbb6 <lwip_htonl>
 8012e74:	4604      	mov	r4, r0
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	891b      	ldrh	r3, [r3, #8]
 8012e7a:	461d      	mov	r5, r3
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	68db      	ldr	r3, [r3, #12]
 8012e80:	899b      	ldrh	r3, [r3, #12]
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7f8 fe81 	bl	800bb8c <lwip_htons>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	b2db      	uxtb	r3, r3
 8012e8e:	f003 0303 	and.w	r3, r3, #3
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d001      	beq.n	8012e9a <tcp_rexmit_rto_prepare+0xba>
 8012e96:	2301      	movs	r3, #1
 8012e98:	e000      	b.n	8012e9c <tcp_rexmit_rto_prepare+0xbc>
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	442b      	add	r3, r5
 8012e9e:	18e2      	adds	r2, r4, r3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012eaa:	2300      	movs	r3, #0
}
 8012eac:	4618      	mov	r0, r3
 8012eae:	3710      	adds	r7, #16
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8012eb4:	0801a1ac 	.word	0x0801a1ac
 8012eb8:	0801a7e8 	.word	0x0801a7e8
 8012ebc:	0801a200 	.word	0x0801a200

08012ec0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b082      	sub	sp, #8
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d106      	bne.n	8012edc <tcp_rexmit_rto_commit+0x1c>
 8012ece:	4b0d      	ldr	r3, [pc, #52]	; (8012f04 <tcp_rexmit_rto_commit+0x44>)
 8012ed0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012ed4:	490c      	ldr	r1, [pc, #48]	; (8012f08 <tcp_rexmit_rto_commit+0x48>)
 8012ed6:	480d      	ldr	r0, [pc, #52]	; (8012f0c <tcp_rexmit_rto_commit+0x4c>)
 8012ed8:	f004 f93a 	bl	8017150 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ee2:	2bff      	cmp	r3, #255	; 0xff
 8012ee4:	d007      	beq.n	8012ef6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012eec:	3301      	adds	r3, #1
 8012eee:	b2da      	uxtb	r2, r3
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f7ff fc80 	bl	80127fc <tcp_output>
}
 8012efc:	bf00      	nop
 8012efe:	3708      	adds	r7, #8
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}
 8012f04:	0801a1ac 	.word	0x0801a1ac
 8012f08:	0801a80c 	.word	0x0801a80c
 8012f0c:	0801a200 	.word	0x0801a200

08012f10 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b082      	sub	sp, #8
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d106      	bne.n	8012f2c <tcp_rexmit_rto+0x1c>
 8012f1e:	4b0a      	ldr	r3, [pc, #40]	; (8012f48 <tcp_rexmit_rto+0x38>)
 8012f20:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012f24:	4909      	ldr	r1, [pc, #36]	; (8012f4c <tcp_rexmit_rto+0x3c>)
 8012f26:	480a      	ldr	r0, [pc, #40]	; (8012f50 <tcp_rexmit_rto+0x40>)
 8012f28:	f004 f912 	bl	8017150 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f7ff ff57 	bl	8012de0 <tcp_rexmit_rto_prepare>
 8012f32:	4603      	mov	r3, r0
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d102      	bne.n	8012f3e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f7ff ffc1 	bl	8012ec0 <tcp_rexmit_rto_commit>
  }
}
 8012f3e:	bf00      	nop
 8012f40:	3708      	adds	r7, #8
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	0801a1ac 	.word	0x0801a1ac
 8012f4c:	0801a830 	.word	0x0801a830
 8012f50:	0801a200 	.word	0x0801a200

08012f54 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012f54:	b590      	push	{r4, r7, lr}
 8012f56:	b085      	sub	sp, #20
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d106      	bne.n	8012f70 <tcp_rexmit+0x1c>
 8012f62:	4b2f      	ldr	r3, [pc, #188]	; (8013020 <tcp_rexmit+0xcc>)
 8012f64:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012f68:	492e      	ldr	r1, [pc, #184]	; (8013024 <tcp_rexmit+0xd0>)
 8012f6a:	482f      	ldr	r0, [pc, #188]	; (8013028 <tcp_rexmit+0xd4>)
 8012f6c:	f004 f8f0 	bl	8017150 <iprintf>

  if (pcb->unacked == NULL) {
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d102      	bne.n	8012f7e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012f78:	f06f 0305 	mvn.w	r3, #5
 8012f7c:	e04c      	b.n	8013018 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f82:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012f84:	68b8      	ldr	r0, [r7, #8]
 8012f86:	f7ff fe2d 	bl	8012be4 <tcp_output_segment_busy>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d002      	beq.n	8012f96 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012f90:	f06f 0305 	mvn.w	r3, #5
 8012f94:	e040      	b.n	8013018 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	681a      	ldr	r2, [r3, #0]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	336c      	adds	r3, #108	; 0x6c
 8012fa2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012fa4:	e002      	b.n	8012fac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d011      	beq.n	8012fd8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	68db      	ldr	r3, [r3, #12]
 8012fba:	685b      	ldr	r3, [r3, #4]
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7f8 fdfa 	bl	800bbb6 <lwip_htonl>
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	68db      	ldr	r3, [r3, #12]
 8012fc8:	685b      	ldr	r3, [r3, #4]
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7f8 fdf3 	bl	800bbb6 <lwip_htonl>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	dbe6      	blt.n	8012fa6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	681a      	ldr	r2, [r3, #0]
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	68ba      	ldr	r2, [r7, #8]
 8012fe4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d103      	bne.n	8012ff6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ffc:	2bff      	cmp	r3, #255	; 0xff
 8012ffe:	d007      	beq.n	8013010 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013006:	3301      	adds	r3, #1
 8013008:	b2da      	uxtb	r2, r3
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2200      	movs	r2, #0
 8013014:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013016:	2300      	movs	r3, #0
}
 8013018:	4618      	mov	r0, r3
 801301a:	3714      	adds	r7, #20
 801301c:	46bd      	mov	sp, r7
 801301e:	bd90      	pop	{r4, r7, pc}
 8013020:	0801a1ac 	.word	0x0801a1ac
 8013024:	0801a84c 	.word	0x0801a84c
 8013028:	0801a200 	.word	0x0801a200

0801302c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b082      	sub	sp, #8
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d106      	bne.n	8013048 <tcp_rexmit_fast+0x1c>
 801303a:	4b2a      	ldr	r3, [pc, #168]	; (80130e4 <tcp_rexmit_fast+0xb8>)
 801303c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013040:	4929      	ldr	r1, [pc, #164]	; (80130e8 <tcp_rexmit_fast+0xbc>)
 8013042:	482a      	ldr	r0, [pc, #168]	; (80130ec <tcp_rexmit_fast+0xc0>)
 8013044:	f004 f884 	bl	8017150 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801304c:	2b00      	cmp	r3, #0
 801304e:	d044      	beq.n	80130da <tcp_rexmit_fast+0xae>
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	8b5b      	ldrh	r3, [r3, #26]
 8013054:	f003 0304 	and.w	r3, r3, #4
 8013058:	2b00      	cmp	r3, #0
 801305a:	d13e      	bne.n	80130da <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f7ff ff79 	bl	8012f54 <tcp_rexmit>
 8013062:	4603      	mov	r3, r0
 8013064:	2b00      	cmp	r3, #0
 8013066:	d138      	bne.n	80130da <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013074:	4293      	cmp	r3, r2
 8013076:	bf28      	it	cs
 8013078:	4613      	movcs	r3, r2
 801307a:	b29b      	uxth	r3, r3
 801307c:	0fda      	lsrs	r2, r3, #31
 801307e:	4413      	add	r3, r2
 8013080:	105b      	asrs	r3, r3, #1
 8013082:	b29a      	uxth	r2, r3
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013090:	461a      	mov	r2, r3
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013096:	005b      	lsls	r3, r3, #1
 8013098:	429a      	cmp	r2, r3
 801309a:	d206      	bcs.n	80130aa <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130a0:	005b      	lsls	r3, r3, #1
 80130a2:	b29a      	uxth	r2, r3
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130b4:	4619      	mov	r1, r3
 80130b6:	0049      	lsls	r1, r1, #1
 80130b8:	440b      	add	r3, r1
 80130ba:	b29b      	uxth	r3, r3
 80130bc:	4413      	add	r3, r2
 80130be:	b29a      	uxth	r2, r3
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	8b5b      	ldrh	r3, [r3, #26]
 80130ca:	f043 0304 	orr.w	r3, r3, #4
 80130ce:	b29a      	uxth	r2, r3
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2200      	movs	r2, #0
 80130d8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80130da:	bf00      	nop
 80130dc:	3708      	adds	r7, #8
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
 80130e2:	bf00      	nop
 80130e4:	0801a1ac 	.word	0x0801a1ac
 80130e8:	0801a864 	.word	0x0801a864
 80130ec:	0801a200 	.word	0x0801a200

080130f0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b086      	sub	sp, #24
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	60f8      	str	r0, [r7, #12]
 80130f8:	607b      	str	r3, [r7, #4]
 80130fa:	460b      	mov	r3, r1
 80130fc:	817b      	strh	r3, [r7, #10]
 80130fe:	4613      	mov	r3, r2
 8013100:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013102:	897a      	ldrh	r2, [r7, #10]
 8013104:	893b      	ldrh	r3, [r7, #8]
 8013106:	4413      	add	r3, r2
 8013108:	b29b      	uxth	r3, r3
 801310a:	3314      	adds	r3, #20
 801310c:	b29b      	uxth	r3, r3
 801310e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013112:	4619      	mov	r1, r3
 8013114:	2022      	movs	r0, #34	; 0x22
 8013116:	f7f9 fd9d 	bl	800cc54 <pbuf_alloc>
 801311a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d04d      	beq.n	80131be <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013122:	897b      	ldrh	r3, [r7, #10]
 8013124:	3313      	adds	r3, #19
 8013126:	697a      	ldr	r2, [r7, #20]
 8013128:	8952      	ldrh	r2, [r2, #10]
 801312a:	4293      	cmp	r3, r2
 801312c:	db06      	blt.n	801313c <tcp_output_alloc_header_common+0x4c>
 801312e:	4b26      	ldr	r3, [pc, #152]	; (80131c8 <tcp_output_alloc_header_common+0xd8>)
 8013130:	f240 7223 	movw	r2, #1827	; 0x723
 8013134:	4925      	ldr	r1, [pc, #148]	; (80131cc <tcp_output_alloc_header_common+0xdc>)
 8013136:	4826      	ldr	r0, [pc, #152]	; (80131d0 <tcp_output_alloc_header_common+0xe0>)
 8013138:	f004 f80a 	bl	8017150 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013142:	8c3b      	ldrh	r3, [r7, #32]
 8013144:	4618      	mov	r0, r3
 8013146:	f7f8 fd21 	bl	800bb8c <lwip_htons>
 801314a:	4603      	mov	r3, r0
 801314c:	461a      	mov	r2, r3
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013154:	4618      	mov	r0, r3
 8013156:	f7f8 fd19 	bl	800bb8c <lwip_htons>
 801315a:	4603      	mov	r3, r0
 801315c:	461a      	mov	r2, r3
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	687a      	ldr	r2, [r7, #4]
 8013166:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013168:	68f8      	ldr	r0, [r7, #12]
 801316a:	f7f8 fd24 	bl	800bbb6 <lwip_htonl>
 801316e:	4602      	mov	r2, r0
 8013170:	693b      	ldr	r3, [r7, #16]
 8013172:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013174:	897b      	ldrh	r3, [r7, #10]
 8013176:	089b      	lsrs	r3, r3, #2
 8013178:	b29b      	uxth	r3, r3
 801317a:	3305      	adds	r3, #5
 801317c:	b29b      	uxth	r3, r3
 801317e:	031b      	lsls	r3, r3, #12
 8013180:	b29a      	uxth	r2, r3
 8013182:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013186:	b29b      	uxth	r3, r3
 8013188:	4313      	orrs	r3, r2
 801318a:	b29b      	uxth	r3, r3
 801318c:	4618      	mov	r0, r3
 801318e:	f7f8 fcfd 	bl	800bb8c <lwip_htons>
 8013192:	4603      	mov	r3, r0
 8013194:	461a      	mov	r2, r3
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801319a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801319c:	4618      	mov	r0, r3
 801319e:	f7f8 fcf5 	bl	800bb8c <lwip_htons>
 80131a2:	4603      	mov	r3, r0
 80131a4:	461a      	mov	r2, r3
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80131aa:	693b      	ldr	r3, [r7, #16]
 80131ac:	2200      	movs	r2, #0
 80131ae:	741a      	strb	r2, [r3, #16]
 80131b0:	2200      	movs	r2, #0
 80131b2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80131b4:	693b      	ldr	r3, [r7, #16]
 80131b6:	2200      	movs	r2, #0
 80131b8:	749a      	strb	r2, [r3, #18]
 80131ba:	2200      	movs	r2, #0
 80131bc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80131be:	697b      	ldr	r3, [r7, #20]
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3718      	adds	r7, #24
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	0801a1ac 	.word	0x0801a1ac
 80131cc:	0801a884 	.word	0x0801a884
 80131d0:	0801a200 	.word	0x0801a200

080131d4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80131d4:	b5b0      	push	{r4, r5, r7, lr}
 80131d6:	b08a      	sub	sp, #40	; 0x28
 80131d8:	af04      	add	r7, sp, #16
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	607b      	str	r3, [r7, #4]
 80131de:	460b      	mov	r3, r1
 80131e0:	817b      	strh	r3, [r7, #10]
 80131e2:	4613      	mov	r3, r2
 80131e4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d106      	bne.n	80131fa <tcp_output_alloc_header+0x26>
 80131ec:	4b15      	ldr	r3, [pc, #84]	; (8013244 <tcp_output_alloc_header+0x70>)
 80131ee:	f240 7242 	movw	r2, #1858	; 0x742
 80131f2:	4915      	ldr	r1, [pc, #84]	; (8013248 <tcp_output_alloc_header+0x74>)
 80131f4:	4815      	ldr	r0, [pc, #84]	; (801324c <tcp_output_alloc_header+0x78>)
 80131f6:	f003 ffab 	bl	8017150 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	8adb      	ldrh	r3, [r3, #22]
 8013202:	68fa      	ldr	r2, [r7, #12]
 8013204:	8b12      	ldrh	r2, [r2, #24]
 8013206:	68f9      	ldr	r1, [r7, #12]
 8013208:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801320a:	893d      	ldrh	r5, [r7, #8]
 801320c:	897c      	ldrh	r4, [r7, #10]
 801320e:	9103      	str	r1, [sp, #12]
 8013210:	2110      	movs	r1, #16
 8013212:	9102      	str	r1, [sp, #8]
 8013214:	9201      	str	r2, [sp, #4]
 8013216:	9300      	str	r3, [sp, #0]
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	462a      	mov	r2, r5
 801321c:	4621      	mov	r1, r4
 801321e:	f7ff ff67 	bl	80130f0 <tcp_output_alloc_header_common>
 8013222:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013224:	697b      	ldr	r3, [r7, #20]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d006      	beq.n	8013238 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801322e:	68fa      	ldr	r2, [r7, #12]
 8013230:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013232:	441a      	add	r2, r3
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013238:	697b      	ldr	r3, [r7, #20]
}
 801323a:	4618      	mov	r0, r3
 801323c:	3718      	adds	r7, #24
 801323e:	46bd      	mov	sp, r7
 8013240:	bdb0      	pop	{r4, r5, r7, pc}
 8013242:	bf00      	nop
 8013244:	0801a1ac 	.word	0x0801a1ac
 8013248:	0801a8b4 	.word	0x0801a8b4
 801324c:	0801a200 	.word	0x0801a200

08013250 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b088      	sub	sp, #32
 8013254:	af00      	add	r7, sp, #0
 8013256:	60f8      	str	r0, [r7, #12]
 8013258:	60b9      	str	r1, [r7, #8]
 801325a:	4611      	mov	r1, r2
 801325c:	461a      	mov	r2, r3
 801325e:	460b      	mov	r3, r1
 8013260:	71fb      	strb	r3, [r7, #7]
 8013262:	4613      	mov	r3, r2
 8013264:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013266:	2300      	movs	r3, #0
 8013268:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d106      	bne.n	801327e <tcp_output_fill_options+0x2e>
 8013270:	4b13      	ldr	r3, [pc, #76]	; (80132c0 <tcp_output_fill_options+0x70>)
 8013272:	f240 7256 	movw	r2, #1878	; 0x756
 8013276:	4913      	ldr	r1, [pc, #76]	; (80132c4 <tcp_output_fill_options+0x74>)
 8013278:	4813      	ldr	r0, [pc, #76]	; (80132c8 <tcp_output_fill_options+0x78>)
 801327a:	f003 ff69 	bl	8017150 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	685b      	ldr	r3, [r3, #4]
 8013282:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013284:	69bb      	ldr	r3, [r7, #24]
 8013286:	3314      	adds	r3, #20
 8013288:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801328a:	69bb      	ldr	r3, [r7, #24]
 801328c:	f103 0214 	add.w	r2, r3, #20
 8013290:	8bfb      	ldrh	r3, [r7, #30]
 8013292:	009b      	lsls	r3, r3, #2
 8013294:	4619      	mov	r1, r3
 8013296:	79fb      	ldrb	r3, [r7, #7]
 8013298:	009b      	lsls	r3, r3, #2
 801329a:	f003 0304 	and.w	r3, r3, #4
 801329e:	440b      	add	r3, r1
 80132a0:	4413      	add	r3, r2
 80132a2:	697a      	ldr	r2, [r7, #20]
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d006      	beq.n	80132b6 <tcp_output_fill_options+0x66>
 80132a8:	4b05      	ldr	r3, [pc, #20]	; (80132c0 <tcp_output_fill_options+0x70>)
 80132aa:	f240 7275 	movw	r2, #1909	; 0x775
 80132ae:	4907      	ldr	r1, [pc, #28]	; (80132cc <tcp_output_fill_options+0x7c>)
 80132b0:	4805      	ldr	r0, [pc, #20]	; (80132c8 <tcp_output_fill_options+0x78>)
 80132b2:	f003 ff4d 	bl	8017150 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80132b6:	bf00      	nop
 80132b8:	3720      	adds	r7, #32
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
 80132be:	bf00      	nop
 80132c0:	0801a1ac 	.word	0x0801a1ac
 80132c4:	0801a8dc 	.word	0x0801a8dc
 80132c8:	0801a200 	.word	0x0801a200
 80132cc:	0801a7d4 	.word	0x0801a7d4

080132d0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b08a      	sub	sp, #40	; 0x28
 80132d4:	af04      	add	r7, sp, #16
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	607a      	str	r2, [r7, #4]
 80132dc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d106      	bne.n	80132f2 <tcp_output_control_segment+0x22>
 80132e4:	4b1c      	ldr	r3, [pc, #112]	; (8013358 <tcp_output_control_segment+0x88>)
 80132e6:	f240 7287 	movw	r2, #1927	; 0x787
 80132ea:	491c      	ldr	r1, [pc, #112]	; (801335c <tcp_output_control_segment+0x8c>)
 80132ec:	481c      	ldr	r0, [pc, #112]	; (8013360 <tcp_output_control_segment+0x90>)
 80132ee:	f003 ff2f 	bl	8017150 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80132f2:	683a      	ldr	r2, [r7, #0]
 80132f4:	6879      	ldr	r1, [r7, #4]
 80132f6:	68f8      	ldr	r0, [r7, #12]
 80132f8:	f7fe fae8 	bl	80118cc <tcp_route>
 80132fc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d102      	bne.n	801330a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013304:	23fc      	movs	r3, #252	; 0xfc
 8013306:	75fb      	strb	r3, [r7, #23]
 8013308:	e01c      	b.n	8013344 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d006      	beq.n	801331e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	7adb      	ldrb	r3, [r3, #11]
 8013314:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	7a9b      	ldrb	r3, [r3, #10]
 801331a:	757b      	strb	r3, [r7, #21]
 801331c:	e003      	b.n	8013326 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801331e:	23ff      	movs	r3, #255	; 0xff
 8013320:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013322:	2300      	movs	r3, #0
 8013324:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013326:	7dba      	ldrb	r2, [r7, #22]
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	9302      	str	r3, [sp, #8]
 801332c:	2306      	movs	r3, #6
 801332e:	9301      	str	r3, [sp, #4]
 8013330:	7d7b      	ldrb	r3, [r7, #21]
 8013332:	9300      	str	r3, [sp, #0]
 8013334:	4613      	mov	r3, r2
 8013336:	683a      	ldr	r2, [r7, #0]
 8013338:	6879      	ldr	r1, [r7, #4]
 801333a:	68b8      	ldr	r0, [r7, #8]
 801333c:	f002 fad0 	bl	80158e0 <ip4_output_if>
 8013340:	4603      	mov	r3, r0
 8013342:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013344:	68b8      	ldr	r0, [r7, #8]
 8013346:	f7f9 ff69 	bl	800d21c <pbuf_free>
  return err;
 801334a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801334e:	4618      	mov	r0, r3
 8013350:	3718      	adds	r7, #24
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
 8013356:	bf00      	nop
 8013358:	0801a1ac 	.word	0x0801a1ac
 801335c:	0801a904 	.word	0x0801a904
 8013360:	0801a200 	.word	0x0801a200

08013364 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013364:	b590      	push	{r4, r7, lr}
 8013366:	b08b      	sub	sp, #44	; 0x2c
 8013368:	af04      	add	r7, sp, #16
 801336a:	60f8      	str	r0, [r7, #12]
 801336c:	60b9      	str	r1, [r7, #8]
 801336e:	607a      	str	r2, [r7, #4]
 8013370:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d106      	bne.n	8013386 <tcp_rst+0x22>
 8013378:	4b1f      	ldr	r3, [pc, #124]	; (80133f8 <tcp_rst+0x94>)
 801337a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801337e:	491f      	ldr	r1, [pc, #124]	; (80133fc <tcp_rst+0x98>)
 8013380:	481f      	ldr	r0, [pc, #124]	; (8013400 <tcp_rst+0x9c>)
 8013382:	f003 fee5 	bl	8017150 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013388:	2b00      	cmp	r3, #0
 801338a:	d106      	bne.n	801339a <tcp_rst+0x36>
 801338c:	4b1a      	ldr	r3, [pc, #104]	; (80133f8 <tcp_rst+0x94>)
 801338e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013392:	491c      	ldr	r1, [pc, #112]	; (8013404 <tcp_rst+0xa0>)
 8013394:	481a      	ldr	r0, [pc, #104]	; (8013400 <tcp_rst+0x9c>)
 8013396:	f003 fedb 	bl	8017150 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801339a:	2300      	movs	r3, #0
 801339c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801339e:	f246 0308 	movw	r3, #24584	; 0x6008
 80133a2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80133a4:	7dfb      	ldrb	r3, [r7, #23]
 80133a6:	b29c      	uxth	r4, r3
 80133a8:	68b8      	ldr	r0, [r7, #8]
 80133aa:	f7f8 fc04 	bl	800bbb6 <lwip_htonl>
 80133ae:	4602      	mov	r2, r0
 80133b0:	8abb      	ldrh	r3, [r7, #20]
 80133b2:	9303      	str	r3, [sp, #12]
 80133b4:	2314      	movs	r3, #20
 80133b6:	9302      	str	r3, [sp, #8]
 80133b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80133ba:	9301      	str	r3, [sp, #4]
 80133bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80133be:	9300      	str	r3, [sp, #0]
 80133c0:	4613      	mov	r3, r2
 80133c2:	2200      	movs	r2, #0
 80133c4:	4621      	mov	r1, r4
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f7ff fe92 	bl	80130f0 <tcp_output_alloc_header_common>
 80133cc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d00c      	beq.n	80133ee <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80133d4:	7dfb      	ldrb	r3, [r7, #23]
 80133d6:	2200      	movs	r2, #0
 80133d8:	6939      	ldr	r1, [r7, #16]
 80133da:	68f8      	ldr	r0, [r7, #12]
 80133dc:	f7ff ff38 	bl	8013250 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80133e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e2:	683a      	ldr	r2, [r7, #0]
 80133e4:	6939      	ldr	r1, [r7, #16]
 80133e6:	68f8      	ldr	r0, [r7, #12]
 80133e8:	f7ff ff72 	bl	80132d0 <tcp_output_control_segment>
 80133ec:	e000      	b.n	80133f0 <tcp_rst+0x8c>
    return;
 80133ee:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80133f0:	371c      	adds	r7, #28
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd90      	pop	{r4, r7, pc}
 80133f6:	bf00      	nop
 80133f8:	0801a1ac 	.word	0x0801a1ac
 80133fc:	0801a930 	.word	0x0801a930
 8013400:	0801a200 	.word	0x0801a200
 8013404:	0801a94c 	.word	0x0801a94c

08013408 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013408:	b590      	push	{r4, r7, lr}
 801340a:	b087      	sub	sp, #28
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013410:	2300      	movs	r3, #0
 8013412:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013414:	2300      	movs	r3, #0
 8013416:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d106      	bne.n	801342c <tcp_send_empty_ack+0x24>
 801341e:	4b28      	ldr	r3, [pc, #160]	; (80134c0 <tcp_send_empty_ack+0xb8>)
 8013420:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013424:	4927      	ldr	r1, [pc, #156]	; (80134c4 <tcp_send_empty_ack+0xbc>)
 8013426:	4828      	ldr	r0, [pc, #160]	; (80134c8 <tcp_send_empty_ack+0xc0>)
 8013428:	f003 fe92 	bl	8017150 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801342c:	7dfb      	ldrb	r3, [r7, #23]
 801342e:	009b      	lsls	r3, r3, #2
 8013430:	b2db      	uxtb	r3, r3
 8013432:	f003 0304 	and.w	r3, r3, #4
 8013436:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013438:	7d7b      	ldrb	r3, [r7, #21]
 801343a:	b29c      	uxth	r4, r3
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013440:	4618      	mov	r0, r3
 8013442:	f7f8 fbb8 	bl	800bbb6 <lwip_htonl>
 8013446:	4603      	mov	r3, r0
 8013448:	2200      	movs	r2, #0
 801344a:	4621      	mov	r1, r4
 801344c:	6878      	ldr	r0, [r7, #4]
 801344e:	f7ff fec1 	bl	80131d4 <tcp_output_alloc_header>
 8013452:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d109      	bne.n	801346e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	8b5b      	ldrh	r3, [r3, #26]
 801345e:	f043 0303 	orr.w	r3, r3, #3
 8013462:	b29a      	uxth	r2, r3
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013468:	f06f 0301 	mvn.w	r3, #1
 801346c:	e023      	b.n	80134b6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801346e:	7dbb      	ldrb	r3, [r7, #22]
 8013470:	7dfa      	ldrb	r2, [r7, #23]
 8013472:	6939      	ldr	r1, [r7, #16]
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f7ff feeb 	bl	8013250 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801347a:	687a      	ldr	r2, [r7, #4]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	3304      	adds	r3, #4
 8013480:	6939      	ldr	r1, [r7, #16]
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f7ff ff24 	bl	80132d0 <tcp_output_control_segment>
 8013488:	4603      	mov	r3, r0
 801348a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801348c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d007      	beq.n	80134a4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	8b5b      	ldrh	r3, [r3, #26]
 8013498:	f043 0303 	orr.w	r3, r3, #3
 801349c:	b29a      	uxth	r2, r3
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	835a      	strh	r2, [r3, #26]
 80134a2:	e006      	b.n	80134b2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	8b5b      	ldrh	r3, [r3, #26]
 80134a8:	f023 0303 	bic.w	r3, r3, #3
 80134ac:	b29a      	uxth	r2, r3
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80134b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	371c      	adds	r7, #28
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd90      	pop	{r4, r7, pc}
 80134be:	bf00      	nop
 80134c0:	0801a1ac 	.word	0x0801a1ac
 80134c4:	0801a968 	.word	0x0801a968
 80134c8:	0801a200 	.word	0x0801a200

080134cc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80134cc:	b590      	push	{r4, r7, lr}
 80134ce:	b087      	sub	sp, #28
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80134d4:	2300      	movs	r3, #0
 80134d6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d106      	bne.n	80134ec <tcp_keepalive+0x20>
 80134de:	4b18      	ldr	r3, [pc, #96]	; (8013540 <tcp_keepalive+0x74>)
 80134e0:	f640 0224 	movw	r2, #2084	; 0x824
 80134e4:	4917      	ldr	r1, [pc, #92]	; (8013544 <tcp_keepalive+0x78>)
 80134e6:	4818      	ldr	r0, [pc, #96]	; (8013548 <tcp_keepalive+0x7c>)
 80134e8:	f003 fe32 	bl	8017150 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80134ec:	7dfb      	ldrb	r3, [r7, #23]
 80134ee:	b29c      	uxth	r4, r3
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134f4:	3b01      	subs	r3, #1
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7f8 fb5d 	bl	800bbb6 <lwip_htonl>
 80134fc:	4603      	mov	r3, r0
 80134fe:	2200      	movs	r2, #0
 8013500:	4621      	mov	r1, r4
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f7ff fe66 	bl	80131d4 <tcp_output_alloc_header>
 8013508:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d102      	bne.n	8013516 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013510:	f04f 33ff 	mov.w	r3, #4294967295
 8013514:	e010      	b.n	8013538 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013516:	7dfb      	ldrb	r3, [r7, #23]
 8013518:	2200      	movs	r2, #0
 801351a:	6939      	ldr	r1, [r7, #16]
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f7ff fe97 	bl	8013250 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013522:	687a      	ldr	r2, [r7, #4]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	3304      	adds	r3, #4
 8013528:	6939      	ldr	r1, [r7, #16]
 801352a:	6878      	ldr	r0, [r7, #4]
 801352c:	f7ff fed0 	bl	80132d0 <tcp_output_control_segment>
 8013530:	4603      	mov	r3, r0
 8013532:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013534:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013538:	4618      	mov	r0, r3
 801353a:	371c      	adds	r7, #28
 801353c:	46bd      	mov	sp, r7
 801353e:	bd90      	pop	{r4, r7, pc}
 8013540:	0801a1ac 	.word	0x0801a1ac
 8013544:	0801a988 	.word	0x0801a988
 8013548:	0801a200 	.word	0x0801a200

0801354c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801354c:	b590      	push	{r4, r7, lr}
 801354e:	b08b      	sub	sp, #44	; 0x2c
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013554:	2300      	movs	r3, #0
 8013556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d106      	bne.n	801356e <tcp_zero_window_probe+0x22>
 8013560:	4b4c      	ldr	r3, [pc, #304]	; (8013694 <tcp_zero_window_probe+0x148>)
 8013562:	f640 024f 	movw	r2, #2127	; 0x84f
 8013566:	494c      	ldr	r1, [pc, #304]	; (8013698 <tcp_zero_window_probe+0x14c>)
 8013568:	484c      	ldr	r0, [pc, #304]	; (801369c <tcp_zero_window_probe+0x150>)
 801356a:	f003 fdf1 	bl	8017150 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013572:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013574:	6a3b      	ldr	r3, [r7, #32]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d101      	bne.n	801357e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801357a:	2300      	movs	r3, #0
 801357c:	e086      	b.n	801368c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013584:	2bff      	cmp	r3, #255	; 0xff
 8013586:	d007      	beq.n	8013598 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801358e:	3301      	adds	r3, #1
 8013590:	b2da      	uxtb	r2, r3
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013598:	6a3b      	ldr	r3, [r7, #32]
 801359a:	68db      	ldr	r3, [r3, #12]
 801359c:	899b      	ldrh	r3, [r3, #12]
 801359e:	b29b      	uxth	r3, r3
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7f8 faf3 	bl	800bb8c <lwip_htons>
 80135a6:	4603      	mov	r3, r0
 80135a8:	b2db      	uxtb	r3, r3
 80135aa:	f003 0301 	and.w	r3, r3, #1
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d005      	beq.n	80135be <tcp_zero_window_probe+0x72>
 80135b2:	6a3b      	ldr	r3, [r7, #32]
 80135b4:	891b      	ldrh	r3, [r3, #8]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d101      	bne.n	80135be <tcp_zero_window_probe+0x72>
 80135ba:	2301      	movs	r3, #1
 80135bc:	e000      	b.n	80135c0 <tcp_zero_window_probe+0x74>
 80135be:	2300      	movs	r3, #0
 80135c0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80135c2:	7ffb      	ldrb	r3, [r7, #31]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	bf0c      	ite	eq
 80135c8:	2301      	moveq	r3, #1
 80135ca:	2300      	movne	r3, #0
 80135cc:	b2db      	uxtb	r3, r3
 80135ce:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80135d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135d4:	b299      	uxth	r1, r3
 80135d6:	6a3b      	ldr	r3, [r7, #32]
 80135d8:	68db      	ldr	r3, [r3, #12]
 80135da:	685b      	ldr	r3, [r3, #4]
 80135dc:	8bba      	ldrh	r2, [r7, #28]
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f7ff fdf8 	bl	80131d4 <tcp_output_alloc_header>
 80135e4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80135e6:	69bb      	ldr	r3, [r7, #24]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d102      	bne.n	80135f2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80135ec:	f04f 33ff 	mov.w	r3, #4294967295
 80135f0:	e04c      	b.n	801368c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80135f2:	69bb      	ldr	r3, [r7, #24]
 80135f4:	685b      	ldr	r3, [r3, #4]
 80135f6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80135f8:	7ffb      	ldrb	r3, [r7, #31]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d011      	beq.n	8013622 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	899b      	ldrh	r3, [r3, #12]
 8013602:	b29b      	uxth	r3, r3
 8013604:	b21b      	sxth	r3, r3
 8013606:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801360a:	b21c      	sxth	r4, r3
 801360c:	2011      	movs	r0, #17
 801360e:	f7f8 fabd 	bl	800bb8c <lwip_htons>
 8013612:	4603      	mov	r3, r0
 8013614:	b21b      	sxth	r3, r3
 8013616:	4323      	orrs	r3, r4
 8013618:	b21b      	sxth	r3, r3
 801361a:	b29a      	uxth	r2, r3
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	819a      	strh	r2, [r3, #12]
 8013620:	e010      	b.n	8013644 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013622:	69bb      	ldr	r3, [r7, #24]
 8013624:	685b      	ldr	r3, [r3, #4]
 8013626:	3314      	adds	r3, #20
 8013628:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801362a:	6a3b      	ldr	r3, [r7, #32]
 801362c:	6858      	ldr	r0, [r3, #4]
 801362e:	6a3b      	ldr	r3, [r7, #32]
 8013630:	685b      	ldr	r3, [r3, #4]
 8013632:	891a      	ldrh	r2, [r3, #8]
 8013634:	6a3b      	ldr	r3, [r7, #32]
 8013636:	891b      	ldrh	r3, [r3, #8]
 8013638:	1ad3      	subs	r3, r2, r3
 801363a:	b29b      	uxth	r3, r3
 801363c:	2201      	movs	r2, #1
 801363e:	6939      	ldr	r1, [r7, #16]
 8013640:	f7f9 fff2 	bl	800d628 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013644:	6a3b      	ldr	r3, [r7, #32]
 8013646:	68db      	ldr	r3, [r3, #12]
 8013648:	685b      	ldr	r3, [r3, #4]
 801364a:	4618      	mov	r0, r3
 801364c:	f7f8 fab3 	bl	800bbb6 <lwip_htonl>
 8013650:	4603      	mov	r3, r0
 8013652:	3301      	adds	r3, #1
 8013654:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	1ad3      	subs	r3, r2, r3
 801365e:	2b00      	cmp	r3, #0
 8013660:	da02      	bge.n	8013668 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	68fa      	ldr	r2, [r7, #12]
 8013666:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801366c:	2200      	movs	r2, #0
 801366e:	69b9      	ldr	r1, [r7, #24]
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f7ff fded 	bl	8013250 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013676:	687a      	ldr	r2, [r7, #4]
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	3304      	adds	r3, #4
 801367c:	69b9      	ldr	r1, [r7, #24]
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f7ff fe26 	bl	80132d0 <tcp_output_control_segment>
 8013684:	4603      	mov	r3, r0
 8013686:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013688:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801368c:	4618      	mov	r0, r3
 801368e:	372c      	adds	r7, #44	; 0x2c
 8013690:	46bd      	mov	sp, r7
 8013692:	bd90      	pop	{r4, r7, pc}
 8013694:	0801a1ac 	.word	0x0801a1ac
 8013698:	0801a9a4 	.word	0x0801a9a4
 801369c:	0801a200 	.word	0x0801a200

080136a0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b082      	sub	sp, #8
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80136a8:	f7fa f8ac 	bl	800d804 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80136ac:	4b0a      	ldr	r3, [pc, #40]	; (80136d8 <tcpip_tcp_timer+0x38>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d103      	bne.n	80136bc <tcpip_tcp_timer+0x1c>
 80136b4:	4b09      	ldr	r3, [pc, #36]	; (80136dc <tcpip_tcp_timer+0x3c>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d005      	beq.n	80136c8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80136bc:	2200      	movs	r2, #0
 80136be:	4908      	ldr	r1, [pc, #32]	; (80136e0 <tcpip_tcp_timer+0x40>)
 80136c0:	20fa      	movs	r0, #250	; 0xfa
 80136c2:	f000 f8f3 	bl	80138ac <sys_timeout>
 80136c6:	e003      	b.n	80136d0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80136c8:	4b06      	ldr	r3, [pc, #24]	; (80136e4 <tcpip_tcp_timer+0x44>)
 80136ca:	2200      	movs	r2, #0
 80136cc:	601a      	str	r2, [r3, #0]
  }
}
 80136ce:	bf00      	nop
 80136d0:	bf00      	nop
 80136d2:	3708      	adds	r7, #8
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}
 80136d8:	2000d314 	.word	0x2000d314
 80136dc:	2000d318 	.word	0x2000d318
 80136e0:	080136a1 	.word	0x080136a1
 80136e4:	2000d360 	.word	0x2000d360

080136e8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80136ec:	4b0a      	ldr	r3, [pc, #40]	; (8013718 <tcp_timer_needed+0x30>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d10f      	bne.n	8013714 <tcp_timer_needed+0x2c>
 80136f4:	4b09      	ldr	r3, [pc, #36]	; (801371c <tcp_timer_needed+0x34>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d103      	bne.n	8013704 <tcp_timer_needed+0x1c>
 80136fc:	4b08      	ldr	r3, [pc, #32]	; (8013720 <tcp_timer_needed+0x38>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d007      	beq.n	8013714 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013704:	4b04      	ldr	r3, [pc, #16]	; (8013718 <tcp_timer_needed+0x30>)
 8013706:	2201      	movs	r2, #1
 8013708:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801370a:	2200      	movs	r2, #0
 801370c:	4905      	ldr	r1, [pc, #20]	; (8013724 <tcp_timer_needed+0x3c>)
 801370e:	20fa      	movs	r0, #250	; 0xfa
 8013710:	f000 f8cc 	bl	80138ac <sys_timeout>
  }
}
 8013714:	bf00      	nop
 8013716:	bd80      	pop	{r7, pc}
 8013718:	2000d360 	.word	0x2000d360
 801371c:	2000d314 	.word	0x2000d314
 8013720:	2000d318 	.word	0x2000d318
 8013724:	080136a1 	.word	0x080136a1

08013728 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b086      	sub	sp, #24
 801372c:	af00      	add	r7, sp, #0
 801372e:	60f8      	str	r0, [r7, #12]
 8013730:	60b9      	str	r1, [r7, #8]
 8013732:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013734:	200a      	movs	r0, #10
 8013736:	f7f8 fedf 	bl	800c4f8 <memp_malloc>
 801373a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d109      	bne.n	8013756 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013742:	693b      	ldr	r3, [r7, #16]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d151      	bne.n	80137ec <sys_timeout_abs+0xc4>
 8013748:	4b2a      	ldr	r3, [pc, #168]	; (80137f4 <sys_timeout_abs+0xcc>)
 801374a:	22be      	movs	r2, #190	; 0xbe
 801374c:	492a      	ldr	r1, [pc, #168]	; (80137f8 <sys_timeout_abs+0xd0>)
 801374e:	482b      	ldr	r0, [pc, #172]	; (80137fc <sys_timeout_abs+0xd4>)
 8013750:	f003 fcfe 	bl	8017150 <iprintf>
    return;
 8013754:	e04a      	b.n	80137ec <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	2200      	movs	r2, #0
 801375a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	68ba      	ldr	r2, [r7, #8]
 8013760:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013768:	693b      	ldr	r3, [r7, #16]
 801376a:	68fa      	ldr	r2, [r7, #12]
 801376c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801376e:	4b24      	ldr	r3, [pc, #144]	; (8013800 <sys_timeout_abs+0xd8>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d103      	bne.n	801377e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013776:	4a22      	ldr	r2, [pc, #136]	; (8013800 <sys_timeout_abs+0xd8>)
 8013778:	693b      	ldr	r3, [r7, #16]
 801377a:	6013      	str	r3, [r2, #0]
    return;
 801377c:	e037      	b.n	80137ee <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801377e:	693b      	ldr	r3, [r7, #16]
 8013780:	685a      	ldr	r2, [r3, #4]
 8013782:	4b1f      	ldr	r3, [pc, #124]	; (8013800 <sys_timeout_abs+0xd8>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	685b      	ldr	r3, [r3, #4]
 8013788:	1ad3      	subs	r3, r2, r3
 801378a:	0fdb      	lsrs	r3, r3, #31
 801378c:	f003 0301 	and.w	r3, r3, #1
 8013790:	b2db      	uxtb	r3, r3
 8013792:	2b00      	cmp	r3, #0
 8013794:	d007      	beq.n	80137a6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013796:	4b1a      	ldr	r3, [pc, #104]	; (8013800 <sys_timeout_abs+0xd8>)
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801379e:	4a18      	ldr	r2, [pc, #96]	; (8013800 <sys_timeout_abs+0xd8>)
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	6013      	str	r3, [r2, #0]
 80137a4:	e023      	b.n	80137ee <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80137a6:	4b16      	ldr	r3, [pc, #88]	; (8013800 <sys_timeout_abs+0xd8>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	617b      	str	r3, [r7, #20]
 80137ac:	e01a      	b.n	80137e4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00b      	beq.n	80137ce <sys_timeout_abs+0xa6>
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	685a      	ldr	r2, [r3, #4]
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	685b      	ldr	r3, [r3, #4]
 80137c0:	1ad3      	subs	r3, r2, r3
 80137c2:	0fdb      	lsrs	r3, r3, #31
 80137c4:	f003 0301 	and.w	r3, r3, #1
 80137c8:	b2db      	uxtb	r3, r3
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d007      	beq.n	80137de <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	681a      	ldr	r2, [r3, #0]
 80137d2:	693b      	ldr	r3, [r7, #16]
 80137d4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80137d6:	697b      	ldr	r3, [r7, #20]
 80137d8:	693a      	ldr	r2, [r7, #16]
 80137da:	601a      	str	r2, [r3, #0]
        break;
 80137dc:	e007      	b.n	80137ee <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	617b      	str	r3, [r7, #20]
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d1e1      	bne.n	80137ae <sys_timeout_abs+0x86>
 80137ea:	e000      	b.n	80137ee <sys_timeout_abs+0xc6>
    return;
 80137ec:	bf00      	nop
      }
    }
  }
}
 80137ee:	3718      	adds	r7, #24
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}
 80137f4:	0801a9c8 	.word	0x0801a9c8
 80137f8:	0801a9fc 	.word	0x0801a9fc
 80137fc:	0801aa3c 	.word	0x0801aa3c
 8013800:	2000d358 	.word	0x2000d358

08013804 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b086      	sub	sp, #24
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013810:	697b      	ldr	r3, [r7, #20]
 8013812:	685b      	ldr	r3, [r3, #4]
 8013814:	4798      	blx	r3

  now = sys_now();
 8013816:	f7f3 f8c1 	bl	800699c <sys_now>
 801381a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	681a      	ldr	r2, [r3, #0]
 8013820:	4b0f      	ldr	r3, [pc, #60]	; (8013860 <lwip_cyclic_timer+0x5c>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	4413      	add	r3, r2
 8013826:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013828:	68fa      	ldr	r2, [r7, #12]
 801382a:	693b      	ldr	r3, [r7, #16]
 801382c:	1ad3      	subs	r3, r2, r3
 801382e:	0fdb      	lsrs	r3, r3, #31
 8013830:	f003 0301 	and.w	r3, r3, #1
 8013834:	b2db      	uxtb	r3, r3
 8013836:	2b00      	cmp	r3, #0
 8013838:	d009      	beq.n	801384e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	681a      	ldr	r2, [r3, #0]
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	4413      	add	r3, r2
 8013842:	687a      	ldr	r2, [r7, #4]
 8013844:	4907      	ldr	r1, [pc, #28]	; (8013864 <lwip_cyclic_timer+0x60>)
 8013846:	4618      	mov	r0, r3
 8013848:	f7ff ff6e 	bl	8013728 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801384c:	e004      	b.n	8013858 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	4904      	ldr	r1, [pc, #16]	; (8013864 <lwip_cyclic_timer+0x60>)
 8013852:	68f8      	ldr	r0, [r7, #12]
 8013854:	f7ff ff68 	bl	8013728 <sys_timeout_abs>
}
 8013858:	bf00      	nop
 801385a:	3718      	adds	r7, #24
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}
 8013860:	2000d35c 	.word	0x2000d35c
 8013864:	08013805 	.word	0x08013805

08013868 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801386e:	2301      	movs	r3, #1
 8013870:	607b      	str	r3, [r7, #4]
 8013872:	e00e      	b.n	8013892 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013874:	4a0b      	ldr	r2, [pc, #44]	; (80138a4 <sys_timeouts_init+0x3c>)
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	00db      	lsls	r3, r3, #3
 8013880:	4a08      	ldr	r2, [pc, #32]	; (80138a4 <sys_timeouts_init+0x3c>)
 8013882:	4413      	add	r3, r2
 8013884:	461a      	mov	r2, r3
 8013886:	4908      	ldr	r1, [pc, #32]	; (80138a8 <sys_timeouts_init+0x40>)
 8013888:	f000 f810 	bl	80138ac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	3301      	adds	r3, #1
 8013890:	607b      	str	r3, [r7, #4]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2b02      	cmp	r3, #2
 8013896:	d9ed      	bls.n	8013874 <sys_timeouts_init+0xc>
  }
}
 8013898:	bf00      	nop
 801389a:	bf00      	nop
 801389c:	3708      	adds	r7, #8
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}
 80138a2:	bf00      	nop
 80138a4:	0801b5f4 	.word	0x0801b5f4
 80138a8:	08013805 	.word	0x08013805

080138ac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b086      	sub	sp, #24
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	60f8      	str	r0, [r7, #12]
 80138b4:	60b9      	str	r1, [r7, #8]
 80138b6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80138be:	d306      	bcc.n	80138ce <sys_timeout+0x22>
 80138c0:	4b0a      	ldr	r3, [pc, #40]	; (80138ec <sys_timeout+0x40>)
 80138c2:	f240 1229 	movw	r2, #297	; 0x129
 80138c6:	490a      	ldr	r1, [pc, #40]	; (80138f0 <sys_timeout+0x44>)
 80138c8:	480a      	ldr	r0, [pc, #40]	; (80138f4 <sys_timeout+0x48>)
 80138ca:	f003 fc41 	bl	8017150 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80138ce:	f7f3 f865 	bl	800699c <sys_now>
 80138d2:	4602      	mov	r2, r0
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	4413      	add	r3, r2
 80138d8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80138da:	687a      	ldr	r2, [r7, #4]
 80138dc:	68b9      	ldr	r1, [r7, #8]
 80138de:	6978      	ldr	r0, [r7, #20]
 80138e0:	f7ff ff22 	bl	8013728 <sys_timeout_abs>
#endif
}
 80138e4:	bf00      	nop
 80138e6:	3718      	adds	r7, #24
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	0801a9c8 	.word	0x0801a9c8
 80138f0:	0801aa64 	.word	0x0801aa64
 80138f4:	0801aa3c 	.word	0x0801aa3c

080138f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b084      	sub	sp, #16
 80138fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80138fe:	f7f3 f84d 	bl	800699c <sys_now>
 8013902:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013904:	4b17      	ldr	r3, [pc, #92]	; (8013964 <sys_check_timeouts+0x6c>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d022      	beq.n	8013956 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	685b      	ldr	r3, [r3, #4]
 8013914:	68fa      	ldr	r2, [r7, #12]
 8013916:	1ad3      	subs	r3, r2, r3
 8013918:	0fdb      	lsrs	r3, r3, #31
 801391a:	f003 0301 	and.w	r3, r3, #1
 801391e:	b2db      	uxtb	r3, r3
 8013920:	2b00      	cmp	r3, #0
 8013922:	d11a      	bne.n	801395a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013924:	68bb      	ldr	r3, [r7, #8]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	4a0e      	ldr	r2, [pc, #56]	; (8013964 <sys_check_timeouts+0x6c>)
 801392a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	689b      	ldr	r3, [r3, #8]
 8013930:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	68db      	ldr	r3, [r3, #12]
 8013936:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	685b      	ldr	r3, [r3, #4]
 801393c:	4a0a      	ldr	r2, [pc, #40]	; (8013968 <sys_check_timeouts+0x70>)
 801393e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013940:	68b9      	ldr	r1, [r7, #8]
 8013942:	200a      	movs	r0, #10
 8013944:	f7f8 fe2a 	bl	800c59c <memp_free>
    if (handler != NULL) {
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d0da      	beq.n	8013904 <sys_check_timeouts+0xc>
      handler(arg);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6838      	ldr	r0, [r7, #0]
 8013952:	4798      	blx	r3
  do {
 8013954:	e7d6      	b.n	8013904 <sys_check_timeouts+0xc>
      return;
 8013956:	bf00      	nop
 8013958:	e000      	b.n	801395c <sys_check_timeouts+0x64>
      return;
 801395a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801395c:	3710      	adds	r7, #16
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
 8013962:	bf00      	nop
 8013964:	2000d358 	.word	0x2000d358
 8013968:	2000d35c 	.word	0x2000d35c

0801396c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013972:	4b16      	ldr	r3, [pc, #88]	; (80139cc <sys_timeouts_sleeptime+0x60>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d102      	bne.n	8013980 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801397a:	f04f 33ff 	mov.w	r3, #4294967295
 801397e:	e020      	b.n	80139c2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013980:	f7f3 f80c 	bl	800699c <sys_now>
 8013984:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013986:	4b11      	ldr	r3, [pc, #68]	; (80139cc <sys_timeouts_sleeptime+0x60>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	685a      	ldr	r2, [r3, #4]
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	1ad3      	subs	r3, r2, r3
 8013990:	0fdb      	lsrs	r3, r3, #31
 8013992:	f003 0301 	and.w	r3, r3, #1
 8013996:	b2db      	uxtb	r3, r3
 8013998:	2b00      	cmp	r3, #0
 801399a:	d001      	beq.n	80139a0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801399c:	2300      	movs	r3, #0
 801399e:	e010      	b.n	80139c2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80139a0:	4b0a      	ldr	r3, [pc, #40]	; (80139cc <sys_timeouts_sleeptime+0x60>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	685a      	ldr	r2, [r3, #4]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	1ad3      	subs	r3, r2, r3
 80139aa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80139ac:	683b      	ldr	r3, [r7, #0]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	da06      	bge.n	80139c0 <sys_timeouts_sleeptime+0x54>
 80139b2:	4b07      	ldr	r3, [pc, #28]	; (80139d0 <sys_timeouts_sleeptime+0x64>)
 80139b4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80139b8:	4906      	ldr	r1, [pc, #24]	; (80139d4 <sys_timeouts_sleeptime+0x68>)
 80139ba:	4807      	ldr	r0, [pc, #28]	; (80139d8 <sys_timeouts_sleeptime+0x6c>)
 80139bc:	f003 fbc8 	bl	8017150 <iprintf>
    return ret;
 80139c0:	683b      	ldr	r3, [r7, #0]
  }
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	3708      	adds	r7, #8
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd80      	pop	{r7, pc}
 80139ca:	bf00      	nop
 80139cc:	2000d358 	.word	0x2000d358
 80139d0:	0801a9c8 	.word	0x0801a9c8
 80139d4:	0801aa9c 	.word	0x0801aa9c
 80139d8:	0801aa3c 	.word	0x0801aa3c

080139dc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80139e0:	f003 fbce 	bl	8017180 <rand>
 80139e4:	4603      	mov	r3, r0
 80139e6:	b29b      	uxth	r3, r3
 80139e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80139f2:	b29a      	uxth	r2, r3
 80139f4:	4b01      	ldr	r3, [pc, #4]	; (80139fc <udp_init+0x20>)
 80139f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80139f8:	bf00      	nop
 80139fa:	bd80      	pop	{r7, pc}
 80139fc:	2000001c 	.word	0x2000001c

08013a00 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013a00:	b480      	push	{r7}
 8013a02:	b083      	sub	sp, #12
 8013a04:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013a06:	2300      	movs	r3, #0
 8013a08:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013a0a:	4b17      	ldr	r3, [pc, #92]	; (8013a68 <udp_new_port+0x68>)
 8013a0c:	881b      	ldrh	r3, [r3, #0]
 8013a0e:	1c5a      	adds	r2, r3, #1
 8013a10:	b291      	uxth	r1, r2
 8013a12:	4a15      	ldr	r2, [pc, #84]	; (8013a68 <udp_new_port+0x68>)
 8013a14:	8011      	strh	r1, [r2, #0]
 8013a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a1a:	4293      	cmp	r3, r2
 8013a1c:	d103      	bne.n	8013a26 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013a1e:	4b12      	ldr	r3, [pc, #72]	; (8013a68 <udp_new_port+0x68>)
 8013a20:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013a24:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a26:	4b11      	ldr	r3, [pc, #68]	; (8013a6c <udp_new_port+0x6c>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	603b      	str	r3, [r7, #0]
 8013a2c:	e011      	b.n	8013a52 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	8a5a      	ldrh	r2, [r3, #18]
 8013a32:	4b0d      	ldr	r3, [pc, #52]	; (8013a68 <udp_new_port+0x68>)
 8013a34:	881b      	ldrh	r3, [r3, #0]
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d108      	bne.n	8013a4c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013a3a:	88fb      	ldrh	r3, [r7, #6]
 8013a3c:	3301      	adds	r3, #1
 8013a3e:	80fb      	strh	r3, [r7, #6]
 8013a40:	88fb      	ldrh	r3, [r7, #6]
 8013a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013a46:	d3e0      	bcc.n	8013a0a <udp_new_port+0xa>
        return 0;
 8013a48:	2300      	movs	r3, #0
 8013a4a:	e007      	b.n	8013a5c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	68db      	ldr	r3, [r3, #12]
 8013a50:	603b      	str	r3, [r7, #0]
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d1ea      	bne.n	8013a2e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013a58:	4b03      	ldr	r3, [pc, #12]	; (8013a68 <udp_new_port+0x68>)
 8013a5a:	881b      	ldrh	r3, [r3, #0]
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	370c      	adds	r7, #12
 8013a60:	46bd      	mov	sp, r7
 8013a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a66:	4770      	bx	lr
 8013a68:	2000001c 	.word	0x2000001c
 8013a6c:	2000d364 	.word	0x2000d364

08013a70 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b084      	sub	sp, #16
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	60f8      	str	r0, [r7, #12]
 8013a78:	60b9      	str	r1, [r7, #8]
 8013a7a:	4613      	mov	r3, r2
 8013a7c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d105      	bne.n	8013a90 <udp_input_local_match+0x20>
 8013a84:	4b27      	ldr	r3, [pc, #156]	; (8013b24 <udp_input_local_match+0xb4>)
 8013a86:	2287      	movs	r2, #135	; 0x87
 8013a88:	4927      	ldr	r1, [pc, #156]	; (8013b28 <udp_input_local_match+0xb8>)
 8013a8a:	4828      	ldr	r0, [pc, #160]	; (8013b2c <udp_input_local_match+0xbc>)
 8013a8c:	f003 fb60 	bl	8017150 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d105      	bne.n	8013aa2 <udp_input_local_match+0x32>
 8013a96:	4b23      	ldr	r3, [pc, #140]	; (8013b24 <udp_input_local_match+0xb4>)
 8013a98:	2288      	movs	r2, #136	; 0x88
 8013a9a:	4925      	ldr	r1, [pc, #148]	; (8013b30 <udp_input_local_match+0xc0>)
 8013a9c:	4823      	ldr	r0, [pc, #140]	; (8013b2c <udp_input_local_match+0xbc>)
 8013a9e:	f003 fb57 	bl	8017150 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	7a1b      	ldrb	r3, [r3, #8]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d00b      	beq.n	8013ac2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	7a1a      	ldrb	r2, [r3, #8]
 8013aae:	4b21      	ldr	r3, [pc, #132]	; (8013b34 <udp_input_local_match+0xc4>)
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ab6:	3301      	adds	r3, #1
 8013ab8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d001      	beq.n	8013ac2 <udp_input_local_match+0x52>
    return 0;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	e02b      	b.n	8013b1a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013ac2:	79fb      	ldrb	r3, [r7, #7]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d018      	beq.n	8013afa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d013      	beq.n	8013af6 <udp_input_local_match+0x86>
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d00f      	beq.n	8013af6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013ad6:	4b17      	ldr	r3, [pc, #92]	; (8013b34 <udp_input_local_match+0xc4>)
 8013ad8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ade:	d00a      	beq.n	8013af6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	681a      	ldr	r2, [r3, #0]
 8013ae4:	4b13      	ldr	r3, [pc, #76]	; (8013b34 <udp_input_local_match+0xc4>)
 8013ae6:	695b      	ldr	r3, [r3, #20]
 8013ae8:	405a      	eors	r2, r3
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	3308      	adds	r3, #8
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d110      	bne.n	8013b18 <udp_input_local_match+0xa8>
          return 1;
 8013af6:	2301      	movs	r3, #1
 8013af8:	e00f      	b.n	8013b1a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d009      	beq.n	8013b14 <udp_input_local_match+0xa4>
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d005      	beq.n	8013b14 <udp_input_local_match+0xa4>
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	4b09      	ldr	r3, [pc, #36]	; (8013b34 <udp_input_local_match+0xc4>)
 8013b0e:	695b      	ldr	r3, [r3, #20]
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d101      	bne.n	8013b18 <udp_input_local_match+0xa8>
        return 1;
 8013b14:	2301      	movs	r3, #1
 8013b16:	e000      	b.n	8013b1a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013b18:	2300      	movs	r3, #0
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	3710      	adds	r7, #16
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}
 8013b22:	bf00      	nop
 8013b24:	0801aab0 	.word	0x0801aab0
 8013b28:	0801aae0 	.word	0x0801aae0
 8013b2c:	0801ab04 	.word	0x0801ab04
 8013b30:	0801ab2c 	.word	0x0801ab2c
 8013b34:	20009bb4 	.word	0x20009bb4

08013b38 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013b38:	b590      	push	{r4, r7, lr}
 8013b3a:	b08d      	sub	sp, #52	; 0x34
 8013b3c:	af02      	add	r7, sp, #8
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013b42:	2300      	movs	r3, #0
 8013b44:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d105      	bne.n	8013b58 <udp_input+0x20>
 8013b4c:	4b7c      	ldr	r3, [pc, #496]	; (8013d40 <udp_input+0x208>)
 8013b4e:	22cf      	movs	r2, #207	; 0xcf
 8013b50:	497c      	ldr	r1, [pc, #496]	; (8013d44 <udp_input+0x20c>)
 8013b52:	487d      	ldr	r0, [pc, #500]	; (8013d48 <udp_input+0x210>)
 8013b54:	f003 fafc 	bl	8017150 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d105      	bne.n	8013b6a <udp_input+0x32>
 8013b5e:	4b78      	ldr	r3, [pc, #480]	; (8013d40 <udp_input+0x208>)
 8013b60:	22d0      	movs	r2, #208	; 0xd0
 8013b62:	497a      	ldr	r1, [pc, #488]	; (8013d4c <udp_input+0x214>)
 8013b64:	4878      	ldr	r0, [pc, #480]	; (8013d48 <udp_input+0x210>)
 8013b66:	f003 faf3 	bl	8017150 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	895b      	ldrh	r3, [r3, #10]
 8013b6e:	2b07      	cmp	r3, #7
 8013b70:	d803      	bhi.n	8013b7a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f7f9 fb52 	bl	800d21c <pbuf_free>
    goto end;
 8013b78:	e0de      	b.n	8013d38 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	685b      	ldr	r3, [r3, #4]
 8013b7e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013b80:	4b73      	ldr	r3, [pc, #460]	; (8013d50 <udp_input+0x218>)
 8013b82:	695b      	ldr	r3, [r3, #20]
 8013b84:	4a72      	ldr	r2, [pc, #456]	; (8013d50 <udp_input+0x218>)
 8013b86:	6812      	ldr	r2, [r2, #0]
 8013b88:	4611      	mov	r1, r2
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f001 ff80 	bl	8015a90 <ip4_addr_isbroadcast_u32>
 8013b90:	4603      	mov	r3, r0
 8013b92:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	881b      	ldrh	r3, [r3, #0]
 8013b98:	b29b      	uxth	r3, r3
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7f7 fff6 	bl	800bb8c <lwip_htons>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	885b      	ldrh	r3, [r3, #2]
 8013ba8:	b29b      	uxth	r3, r3
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7f7 ffee 	bl	800bb8c <lwip_htons>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bc0:	4b64      	ldr	r3, [pc, #400]	; (8013d54 <udp_input+0x21c>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8013bc6:	e054      	b.n	8013c72 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bca:	8a5b      	ldrh	r3, [r3, #18]
 8013bcc:	89fa      	ldrh	r2, [r7, #14]
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	d14a      	bne.n	8013c68 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013bd2:	7cfb      	ldrb	r3, [r7, #19]
 8013bd4:	461a      	mov	r2, r3
 8013bd6:	6839      	ldr	r1, [r7, #0]
 8013bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013bda:	f7ff ff49 	bl	8013a70 <udp_input_local_match>
 8013bde:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d041      	beq.n	8013c68 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be6:	7c1b      	ldrb	r3, [r3, #16]
 8013be8:	f003 0304 	and.w	r3, r3, #4
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d11d      	bne.n	8013c2c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013bf0:	69fb      	ldr	r3, [r7, #28]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d102      	bne.n	8013bfc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bf8:	61fb      	str	r3, [r7, #28]
 8013bfa:	e017      	b.n	8013c2c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013bfc:	7cfb      	ldrb	r3, [r7, #19]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d014      	beq.n	8013c2c <udp_input+0xf4>
 8013c02:	4b53      	ldr	r3, [pc, #332]	; (8013d50 <udp_input+0x218>)
 8013c04:	695b      	ldr	r3, [r3, #20]
 8013c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c0a:	d10f      	bne.n	8013c2c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013c0c:	69fb      	ldr	r3, [r7, #28]
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	3304      	adds	r3, #4
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d008      	beq.n	8013c2c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1c:	681a      	ldr	r2, [r3, #0]
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	3304      	adds	r3, #4
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	429a      	cmp	r2, r3
 8013c26:	d101      	bne.n	8013c2c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2e:	8a9b      	ldrh	r3, [r3, #20]
 8013c30:	8a3a      	ldrh	r2, [r7, #16]
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d118      	bne.n	8013c68 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c38:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d005      	beq.n	8013c4a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c40:	685a      	ldr	r2, [r3, #4]
 8013c42:	4b43      	ldr	r3, [pc, #268]	; (8013d50 <udp_input+0x218>)
 8013c44:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013c46:	429a      	cmp	r2, r3
 8013c48:	d10e      	bne.n	8013c68 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013c4a:	6a3b      	ldr	r3, [r7, #32]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d014      	beq.n	8013c7a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c52:	68da      	ldr	r2, [r3, #12]
 8013c54:	6a3b      	ldr	r3, [r7, #32]
 8013c56:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013c58:	4b3e      	ldr	r3, [pc, #248]	; (8013d54 <udp_input+0x21c>)
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013c60:	4a3c      	ldr	r2, [pc, #240]	; (8013d54 <udp_input+0x21c>)
 8013c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c64:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013c66:	e008      	b.n	8013c7a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6e:	68db      	ldr	r3, [r3, #12]
 8013c70:	627b      	str	r3, [r7, #36]	; 0x24
 8013c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d1a7      	bne.n	8013bc8 <udp_input+0x90>
 8013c78:	e000      	b.n	8013c7c <udp_input+0x144>
        break;
 8013c7a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d101      	bne.n	8013c86 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013c82:	69fb      	ldr	r3, [r7, #28]
 8013c84:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d002      	beq.n	8013c92 <udp_input+0x15a>
    for_us = 1;
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	76fb      	strb	r3, [r7, #27]
 8013c90:	e00a      	b.n	8013ca8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	3304      	adds	r3, #4
 8013c96:	681a      	ldr	r2, [r3, #0]
 8013c98:	4b2d      	ldr	r3, [pc, #180]	; (8013d50 <udp_input+0x218>)
 8013c9a:	695b      	ldr	r3, [r3, #20]
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	bf0c      	ite	eq
 8013ca0:	2301      	moveq	r3, #1
 8013ca2:	2300      	movne	r3, #0
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013ca8:	7efb      	ldrb	r3, [r7, #27]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d041      	beq.n	8013d32 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013cae:	2108      	movs	r1, #8
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f7f9 fa2d 	bl	800d110 <pbuf_remove_header>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d00a      	beq.n	8013cd2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013cbc:	4b20      	ldr	r3, [pc, #128]	; (8013d40 <udp_input+0x208>)
 8013cbe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013cc2:	4925      	ldr	r1, [pc, #148]	; (8013d58 <udp_input+0x220>)
 8013cc4:	4820      	ldr	r0, [pc, #128]	; (8013d48 <udp_input+0x210>)
 8013cc6:	f003 fa43 	bl	8017150 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013cca:	6878      	ldr	r0, [r7, #4]
 8013ccc:	f7f9 faa6 	bl	800d21c <pbuf_free>
      goto end;
 8013cd0:	e032      	b.n	8013d38 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d012      	beq.n	8013cfe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cda:	699b      	ldr	r3, [r3, #24]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d00a      	beq.n	8013cf6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce2:	699c      	ldr	r4, [r3, #24]
 8013ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce6:	69d8      	ldr	r0, [r3, #28]
 8013ce8:	8a3b      	ldrh	r3, [r7, #16]
 8013cea:	9300      	str	r3, [sp, #0]
 8013cec:	4b1b      	ldr	r3, [pc, #108]	; (8013d5c <udp_input+0x224>)
 8013cee:	687a      	ldr	r2, [r7, #4]
 8013cf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013cf2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013cf4:	e021      	b.n	8013d3a <udp_input+0x202>
        pbuf_free(p);
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f7f9 fa90 	bl	800d21c <pbuf_free>
        goto end;
 8013cfc:	e01c      	b.n	8013d38 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013cfe:	7cfb      	ldrb	r3, [r7, #19]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d112      	bne.n	8013d2a <udp_input+0x1f2>
 8013d04:	4b12      	ldr	r3, [pc, #72]	; (8013d50 <udp_input+0x218>)
 8013d06:	695b      	ldr	r3, [r3, #20]
 8013d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013d0c:	2be0      	cmp	r3, #224	; 0xe0
 8013d0e:	d00c      	beq.n	8013d2a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013d10:	4b0f      	ldr	r3, [pc, #60]	; (8013d50 <udp_input+0x218>)
 8013d12:	899b      	ldrh	r3, [r3, #12]
 8013d14:	3308      	adds	r3, #8
 8013d16:	b29b      	uxth	r3, r3
 8013d18:	b21b      	sxth	r3, r3
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f7f9 fa6a 	bl	800d1f6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013d22:	2103      	movs	r1, #3
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f001 fb93 	bl	8015450 <icmp_dest_unreach>
      pbuf_free(p);
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f7f9 fa76 	bl	800d21c <pbuf_free>
  return;
 8013d30:	e003      	b.n	8013d3a <udp_input+0x202>
    pbuf_free(p);
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f7f9 fa72 	bl	800d21c <pbuf_free>
  return;
 8013d38:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013d3a:	372c      	adds	r7, #44	; 0x2c
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd90      	pop	{r4, r7, pc}
 8013d40:	0801aab0 	.word	0x0801aab0
 8013d44:	0801ab54 	.word	0x0801ab54
 8013d48:	0801ab04 	.word	0x0801ab04
 8013d4c:	0801ab6c 	.word	0x0801ab6c
 8013d50:	20009bb4 	.word	0x20009bb4
 8013d54:	2000d364 	.word	0x2000d364
 8013d58:	0801ab88 	.word	0x0801ab88
 8013d5c:	20009bc4 	.word	0x20009bc4

08013d60 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b082      	sub	sp, #8
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d109      	bne.n	8013d84 <udp_send+0x24>
 8013d70:	4b11      	ldr	r3, [pc, #68]	; (8013db8 <udp_send+0x58>)
 8013d72:	f240 12d5 	movw	r2, #469	; 0x1d5
 8013d76:	4911      	ldr	r1, [pc, #68]	; (8013dbc <udp_send+0x5c>)
 8013d78:	4811      	ldr	r0, [pc, #68]	; (8013dc0 <udp_send+0x60>)
 8013d7a:	f003 f9e9 	bl	8017150 <iprintf>
 8013d7e:	f06f 030f 	mvn.w	r3, #15
 8013d82:	e015      	b.n	8013db0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d109      	bne.n	8013d9e <udp_send+0x3e>
 8013d8a:	4b0b      	ldr	r3, [pc, #44]	; (8013db8 <udp_send+0x58>)
 8013d8c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8013d90:	490c      	ldr	r1, [pc, #48]	; (8013dc4 <udp_send+0x64>)
 8013d92:	480b      	ldr	r0, [pc, #44]	; (8013dc0 <udp_send+0x60>)
 8013d94:	f003 f9dc 	bl	8017150 <iprintf>
 8013d98:	f06f 030f 	mvn.w	r3, #15
 8013d9c:	e008      	b.n	8013db0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	1d1a      	adds	r2, r3, #4
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	8a9b      	ldrh	r3, [r3, #20]
 8013da6:	6839      	ldr	r1, [r7, #0]
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f000 f80d 	bl	8013dc8 <udp_sendto>
 8013dae:	4603      	mov	r3, r0
}
 8013db0:	4618      	mov	r0, r3
 8013db2:	3708      	adds	r7, #8
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}
 8013db8:	0801aab0 	.word	0x0801aab0
 8013dbc:	0801aba4 	.word	0x0801aba4
 8013dc0:	0801ab04 	.word	0x0801ab04
 8013dc4:	0801abbc 	.word	0x0801abbc

08013dc8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b088      	sub	sp, #32
 8013dcc:	af02      	add	r7, sp, #8
 8013dce:	60f8      	str	r0, [r7, #12]
 8013dd0:	60b9      	str	r1, [r7, #8]
 8013dd2:	607a      	str	r2, [r7, #4]
 8013dd4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d109      	bne.n	8013df0 <udp_sendto+0x28>
 8013ddc:	4b23      	ldr	r3, [pc, #140]	; (8013e6c <udp_sendto+0xa4>)
 8013dde:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013de2:	4923      	ldr	r1, [pc, #140]	; (8013e70 <udp_sendto+0xa8>)
 8013de4:	4823      	ldr	r0, [pc, #140]	; (8013e74 <udp_sendto+0xac>)
 8013de6:	f003 f9b3 	bl	8017150 <iprintf>
 8013dea:	f06f 030f 	mvn.w	r3, #15
 8013dee:	e038      	b.n	8013e62 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d109      	bne.n	8013e0a <udp_sendto+0x42>
 8013df6:	4b1d      	ldr	r3, [pc, #116]	; (8013e6c <udp_sendto+0xa4>)
 8013df8:	f240 2219 	movw	r2, #537	; 0x219
 8013dfc:	491e      	ldr	r1, [pc, #120]	; (8013e78 <udp_sendto+0xb0>)
 8013dfe:	481d      	ldr	r0, [pc, #116]	; (8013e74 <udp_sendto+0xac>)
 8013e00:	f003 f9a6 	bl	8017150 <iprintf>
 8013e04:	f06f 030f 	mvn.w	r3, #15
 8013e08:	e02b      	b.n	8013e62 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d109      	bne.n	8013e24 <udp_sendto+0x5c>
 8013e10:	4b16      	ldr	r3, [pc, #88]	; (8013e6c <udp_sendto+0xa4>)
 8013e12:	f240 221a 	movw	r2, #538	; 0x21a
 8013e16:	4919      	ldr	r1, [pc, #100]	; (8013e7c <udp_sendto+0xb4>)
 8013e18:	4816      	ldr	r0, [pc, #88]	; (8013e74 <udp_sendto+0xac>)
 8013e1a:	f003 f999 	bl	8017150 <iprintf>
 8013e1e:	f06f 030f 	mvn.w	r3, #15
 8013e22:	e01e      	b.n	8013e62 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	7a1b      	ldrb	r3, [r3, #8]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d006      	beq.n	8013e3a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	7a1b      	ldrb	r3, [r3, #8]
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7f8 fe65 	bl	800cb00 <netif_get_by_index>
 8013e36:	6178      	str	r0, [r7, #20]
 8013e38:	e003      	b.n	8013e42 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f001 fb92 	bl	8015564 <ip4_route>
 8013e40:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013e42:	697b      	ldr	r3, [r7, #20]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d102      	bne.n	8013e4e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013e48:	f06f 0303 	mvn.w	r3, #3
 8013e4c:	e009      	b.n	8013e62 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8013e4e:	887a      	ldrh	r2, [r7, #2]
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	9300      	str	r3, [sp, #0]
 8013e54:	4613      	mov	r3, r2
 8013e56:	687a      	ldr	r2, [r7, #4]
 8013e58:	68b9      	ldr	r1, [r7, #8]
 8013e5a:	68f8      	ldr	r0, [r7, #12]
 8013e5c:	f000 f810 	bl	8013e80 <udp_sendto_if>
 8013e60:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013e62:	4618      	mov	r0, r3
 8013e64:	3718      	adds	r7, #24
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}
 8013e6a:	bf00      	nop
 8013e6c:	0801aab0 	.word	0x0801aab0
 8013e70:	0801abd4 	.word	0x0801abd4
 8013e74:	0801ab04 	.word	0x0801ab04
 8013e78:	0801abec 	.word	0x0801abec
 8013e7c:	0801ac08 	.word	0x0801ac08

08013e80 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b088      	sub	sp, #32
 8013e84:	af02      	add	r7, sp, #8
 8013e86:	60f8      	str	r0, [r7, #12]
 8013e88:	60b9      	str	r1, [r7, #8]
 8013e8a:	607a      	str	r2, [r7, #4]
 8013e8c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d109      	bne.n	8013ea8 <udp_sendto_if+0x28>
 8013e94:	4b2e      	ldr	r3, [pc, #184]	; (8013f50 <udp_sendto_if+0xd0>)
 8013e96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e9a:	492e      	ldr	r1, [pc, #184]	; (8013f54 <udp_sendto_if+0xd4>)
 8013e9c:	482e      	ldr	r0, [pc, #184]	; (8013f58 <udp_sendto_if+0xd8>)
 8013e9e:	f003 f957 	bl	8017150 <iprintf>
 8013ea2:	f06f 030f 	mvn.w	r3, #15
 8013ea6:	e04f      	b.n	8013f48 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d109      	bne.n	8013ec2 <udp_sendto_if+0x42>
 8013eae:	4b28      	ldr	r3, [pc, #160]	; (8013f50 <udp_sendto_if+0xd0>)
 8013eb0:	f240 2281 	movw	r2, #641	; 0x281
 8013eb4:	4929      	ldr	r1, [pc, #164]	; (8013f5c <udp_sendto_if+0xdc>)
 8013eb6:	4828      	ldr	r0, [pc, #160]	; (8013f58 <udp_sendto_if+0xd8>)
 8013eb8:	f003 f94a 	bl	8017150 <iprintf>
 8013ebc:	f06f 030f 	mvn.w	r3, #15
 8013ec0:	e042      	b.n	8013f48 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d109      	bne.n	8013edc <udp_sendto_if+0x5c>
 8013ec8:	4b21      	ldr	r3, [pc, #132]	; (8013f50 <udp_sendto_if+0xd0>)
 8013eca:	f240 2282 	movw	r2, #642	; 0x282
 8013ece:	4924      	ldr	r1, [pc, #144]	; (8013f60 <udp_sendto_if+0xe0>)
 8013ed0:	4821      	ldr	r0, [pc, #132]	; (8013f58 <udp_sendto_if+0xd8>)
 8013ed2:	f003 f93d 	bl	8017150 <iprintf>
 8013ed6:	f06f 030f 	mvn.w	r3, #15
 8013eda:	e035      	b.n	8013f48 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013edc:	6a3b      	ldr	r3, [r7, #32]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d109      	bne.n	8013ef6 <udp_sendto_if+0x76>
 8013ee2:	4b1b      	ldr	r3, [pc, #108]	; (8013f50 <udp_sendto_if+0xd0>)
 8013ee4:	f240 2283 	movw	r2, #643	; 0x283
 8013ee8:	491e      	ldr	r1, [pc, #120]	; (8013f64 <udp_sendto_if+0xe4>)
 8013eea:	481b      	ldr	r0, [pc, #108]	; (8013f58 <udp_sendto_if+0xd8>)
 8013eec:	f003 f930 	bl	8017150 <iprintf>
 8013ef0:	f06f 030f 	mvn.w	r3, #15
 8013ef4:	e028      	b.n	8013f48 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d009      	beq.n	8013f10 <udp_sendto_if+0x90>
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d005      	beq.n	8013f10 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013f0c:	2be0      	cmp	r3, #224	; 0xe0
 8013f0e:	d103      	bne.n	8013f18 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013f10:	6a3b      	ldr	r3, [r7, #32]
 8013f12:	3304      	adds	r3, #4
 8013f14:	617b      	str	r3, [r7, #20]
 8013f16:	e00b      	b.n	8013f30 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	681a      	ldr	r2, [r3, #0]
 8013f1c:	6a3b      	ldr	r3, [r7, #32]
 8013f1e:	3304      	adds	r3, #4
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	429a      	cmp	r2, r3
 8013f24:	d002      	beq.n	8013f2c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013f26:	f06f 0303 	mvn.w	r3, #3
 8013f2a:	e00d      	b.n	8013f48 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013f30:	887a      	ldrh	r2, [r7, #2]
 8013f32:	697b      	ldr	r3, [r7, #20]
 8013f34:	9301      	str	r3, [sp, #4]
 8013f36:	6a3b      	ldr	r3, [r7, #32]
 8013f38:	9300      	str	r3, [sp, #0]
 8013f3a:	4613      	mov	r3, r2
 8013f3c:	687a      	ldr	r2, [r7, #4]
 8013f3e:	68b9      	ldr	r1, [r7, #8]
 8013f40:	68f8      	ldr	r0, [r7, #12]
 8013f42:	f000 f811 	bl	8013f68 <udp_sendto_if_src>
 8013f46:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	3718      	adds	r7, #24
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}
 8013f50:	0801aab0 	.word	0x0801aab0
 8013f54:	0801ac24 	.word	0x0801ac24
 8013f58:	0801ab04 	.word	0x0801ab04
 8013f5c:	0801ac40 	.word	0x0801ac40
 8013f60:	0801ac5c 	.word	0x0801ac5c
 8013f64:	0801ac7c 	.word	0x0801ac7c

08013f68 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b08c      	sub	sp, #48	; 0x30
 8013f6c:	af04      	add	r7, sp, #16
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	60b9      	str	r1, [r7, #8]
 8013f72:	607a      	str	r2, [r7, #4]
 8013f74:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d109      	bne.n	8013f90 <udp_sendto_if_src+0x28>
 8013f7c:	4b65      	ldr	r3, [pc, #404]	; (8014114 <udp_sendto_if_src+0x1ac>)
 8013f7e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013f82:	4965      	ldr	r1, [pc, #404]	; (8014118 <udp_sendto_if_src+0x1b0>)
 8013f84:	4865      	ldr	r0, [pc, #404]	; (801411c <udp_sendto_if_src+0x1b4>)
 8013f86:	f003 f8e3 	bl	8017150 <iprintf>
 8013f8a:	f06f 030f 	mvn.w	r3, #15
 8013f8e:	e0bc      	b.n	801410a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d109      	bne.n	8013faa <udp_sendto_if_src+0x42>
 8013f96:	4b5f      	ldr	r3, [pc, #380]	; (8014114 <udp_sendto_if_src+0x1ac>)
 8013f98:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013f9c:	4960      	ldr	r1, [pc, #384]	; (8014120 <udp_sendto_if_src+0x1b8>)
 8013f9e:	485f      	ldr	r0, [pc, #380]	; (801411c <udp_sendto_if_src+0x1b4>)
 8013fa0:	f003 f8d6 	bl	8017150 <iprintf>
 8013fa4:	f06f 030f 	mvn.w	r3, #15
 8013fa8:	e0af      	b.n	801410a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d109      	bne.n	8013fc4 <udp_sendto_if_src+0x5c>
 8013fb0:	4b58      	ldr	r3, [pc, #352]	; (8014114 <udp_sendto_if_src+0x1ac>)
 8013fb2:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013fb6:	495b      	ldr	r1, [pc, #364]	; (8014124 <udp_sendto_if_src+0x1bc>)
 8013fb8:	4858      	ldr	r0, [pc, #352]	; (801411c <udp_sendto_if_src+0x1b4>)
 8013fba:	f003 f8c9 	bl	8017150 <iprintf>
 8013fbe:	f06f 030f 	mvn.w	r3, #15
 8013fc2:	e0a2      	b.n	801410a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d109      	bne.n	8013fde <udp_sendto_if_src+0x76>
 8013fca:	4b52      	ldr	r3, [pc, #328]	; (8014114 <udp_sendto_if_src+0x1ac>)
 8013fcc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013fd0:	4955      	ldr	r1, [pc, #340]	; (8014128 <udp_sendto_if_src+0x1c0>)
 8013fd2:	4852      	ldr	r0, [pc, #328]	; (801411c <udp_sendto_if_src+0x1b4>)
 8013fd4:	f003 f8bc 	bl	8017150 <iprintf>
 8013fd8:	f06f 030f 	mvn.w	r3, #15
 8013fdc:	e095      	b.n	801410a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d109      	bne.n	8013ff8 <udp_sendto_if_src+0x90>
 8013fe4:	4b4b      	ldr	r3, [pc, #300]	; (8014114 <udp_sendto_if_src+0x1ac>)
 8013fe6:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013fea:	4950      	ldr	r1, [pc, #320]	; (801412c <udp_sendto_if_src+0x1c4>)
 8013fec:	484b      	ldr	r0, [pc, #300]	; (801411c <udp_sendto_if_src+0x1b4>)
 8013fee:	f003 f8af 	bl	8017150 <iprintf>
 8013ff2:	f06f 030f 	mvn.w	r3, #15
 8013ff6:	e088      	b.n	801410a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	8a5b      	ldrh	r3, [r3, #18]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d10f      	bne.n	8014020 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014000:	68f9      	ldr	r1, [r7, #12]
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	8a5b      	ldrh	r3, [r3, #18]
 8014006:	461a      	mov	r2, r3
 8014008:	68f8      	ldr	r0, [r7, #12]
 801400a:	f000 f893 	bl	8014134 <udp_bind>
 801400e:	4603      	mov	r3, r0
 8014010:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014012:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d002      	beq.n	8014020 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801401a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801401e:	e074      	b.n	801410a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014020:	68bb      	ldr	r3, [r7, #8]
 8014022:	891b      	ldrh	r3, [r3, #8]
 8014024:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014028:	4293      	cmp	r3, r2
 801402a:	d902      	bls.n	8014032 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801402c:	f04f 33ff 	mov.w	r3, #4294967295
 8014030:	e06b      	b.n	801410a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014032:	2108      	movs	r1, #8
 8014034:	68b8      	ldr	r0, [r7, #8]
 8014036:	f7f9 f85b 	bl	800d0f0 <pbuf_add_header>
 801403a:	4603      	mov	r3, r0
 801403c:	2b00      	cmp	r3, #0
 801403e:	d015      	beq.n	801406c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014040:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014044:	2108      	movs	r1, #8
 8014046:	2022      	movs	r0, #34	; 0x22
 8014048:	f7f8 fe04 	bl	800cc54 <pbuf_alloc>
 801404c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801404e:	69fb      	ldr	r3, [r7, #28]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d102      	bne.n	801405a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014054:	f04f 33ff 	mov.w	r3, #4294967295
 8014058:	e057      	b.n	801410a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	891b      	ldrh	r3, [r3, #8]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d006      	beq.n	8014070 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014062:	68b9      	ldr	r1, [r7, #8]
 8014064:	69f8      	ldr	r0, [r7, #28]
 8014066:	f7f9 f9fd 	bl	800d464 <pbuf_chain>
 801406a:	e001      	b.n	8014070 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014070:	69fb      	ldr	r3, [r7, #28]
 8014072:	895b      	ldrh	r3, [r3, #10]
 8014074:	2b07      	cmp	r3, #7
 8014076:	d806      	bhi.n	8014086 <udp_sendto_if_src+0x11e>
 8014078:	4b26      	ldr	r3, [pc, #152]	; (8014114 <udp_sendto_if_src+0x1ac>)
 801407a:	f240 320d 	movw	r2, #781	; 0x30d
 801407e:	492c      	ldr	r1, [pc, #176]	; (8014130 <udp_sendto_if_src+0x1c8>)
 8014080:	4826      	ldr	r0, [pc, #152]	; (801411c <udp_sendto_if_src+0x1b4>)
 8014082:	f003 f865 	bl	8017150 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014086:	69fb      	ldr	r3, [r7, #28]
 8014088:	685b      	ldr	r3, [r3, #4]
 801408a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	8a5b      	ldrh	r3, [r3, #18]
 8014090:	4618      	mov	r0, r3
 8014092:	f7f7 fd7b 	bl	800bb8c <lwip_htons>
 8014096:	4603      	mov	r3, r0
 8014098:	461a      	mov	r2, r3
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801409e:	887b      	ldrh	r3, [r7, #2]
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7f7 fd73 	bl	800bb8c <lwip_htons>
 80140a6:	4603      	mov	r3, r0
 80140a8:	461a      	mov	r2, r3
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	2200      	movs	r2, #0
 80140b2:	719a      	strb	r2, [r3, #6]
 80140b4:	2200      	movs	r2, #0
 80140b6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80140b8:	69fb      	ldr	r3, [r7, #28]
 80140ba:	891b      	ldrh	r3, [r3, #8]
 80140bc:	4618      	mov	r0, r3
 80140be:	f7f7 fd65 	bl	800bb8c <lwip_htons>
 80140c2:	4603      	mov	r3, r0
 80140c4:	461a      	mov	r2, r3
 80140c6:	697b      	ldr	r3, [r7, #20]
 80140c8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80140ca:	2311      	movs	r3, #17
 80140cc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	7adb      	ldrb	r3, [r3, #11]
 80140d2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	7a9b      	ldrb	r3, [r3, #10]
 80140d8:	7cb9      	ldrb	r1, [r7, #18]
 80140da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140dc:	9202      	str	r2, [sp, #8]
 80140de:	7cfa      	ldrb	r2, [r7, #19]
 80140e0:	9201      	str	r2, [sp, #4]
 80140e2:	9300      	str	r3, [sp, #0]
 80140e4:	460b      	mov	r3, r1
 80140e6:	687a      	ldr	r2, [r7, #4]
 80140e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80140ea:	69f8      	ldr	r0, [r7, #28]
 80140ec:	f001 fc22 	bl	8015934 <ip4_output_if_src>
 80140f0:	4603      	mov	r3, r0
 80140f2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80140f4:	69fa      	ldr	r2, [r7, #28]
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	429a      	cmp	r2, r3
 80140fa:	d004      	beq.n	8014106 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80140fc:	69f8      	ldr	r0, [r7, #28]
 80140fe:	f7f9 f88d 	bl	800d21c <pbuf_free>
    q = NULL;
 8014102:	2300      	movs	r3, #0
 8014104:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014106:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801410a:	4618      	mov	r0, r3
 801410c:	3720      	adds	r7, #32
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}
 8014112:	bf00      	nop
 8014114:	0801aab0 	.word	0x0801aab0
 8014118:	0801ac9c 	.word	0x0801ac9c
 801411c:	0801ab04 	.word	0x0801ab04
 8014120:	0801acbc 	.word	0x0801acbc
 8014124:	0801acdc 	.word	0x0801acdc
 8014128:	0801ad00 	.word	0x0801ad00
 801412c:	0801ad24 	.word	0x0801ad24
 8014130:	0801ad48 	.word	0x0801ad48

08014134 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b086      	sub	sp, #24
 8014138:	af00      	add	r7, sp, #0
 801413a:	60f8      	str	r0, [r7, #12]
 801413c:	60b9      	str	r1, [r7, #8]
 801413e:	4613      	mov	r3, r2
 8014140:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014142:	68bb      	ldr	r3, [r7, #8]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d101      	bne.n	801414c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014148:	4b39      	ldr	r3, [pc, #228]	; (8014230 <udp_bind+0xfc>)
 801414a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d109      	bne.n	8014166 <udp_bind+0x32>
 8014152:	4b38      	ldr	r3, [pc, #224]	; (8014234 <udp_bind+0x100>)
 8014154:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014158:	4937      	ldr	r1, [pc, #220]	; (8014238 <udp_bind+0x104>)
 801415a:	4838      	ldr	r0, [pc, #224]	; (801423c <udp_bind+0x108>)
 801415c:	f002 fff8 	bl	8017150 <iprintf>
 8014160:	f06f 030f 	mvn.w	r3, #15
 8014164:	e060      	b.n	8014228 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014166:	2300      	movs	r3, #0
 8014168:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801416a:	4b35      	ldr	r3, [pc, #212]	; (8014240 <udp_bind+0x10c>)
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	617b      	str	r3, [r7, #20]
 8014170:	e009      	b.n	8014186 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014172:	68fa      	ldr	r2, [r7, #12]
 8014174:	697b      	ldr	r3, [r7, #20]
 8014176:	429a      	cmp	r2, r3
 8014178:	d102      	bne.n	8014180 <udp_bind+0x4c>
      rebind = 1;
 801417a:	2301      	movs	r3, #1
 801417c:	74fb      	strb	r3, [r7, #19]
      break;
 801417e:	e005      	b.n	801418c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014180:	697b      	ldr	r3, [r7, #20]
 8014182:	68db      	ldr	r3, [r3, #12]
 8014184:	617b      	str	r3, [r7, #20]
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d1f2      	bne.n	8014172 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801418c:	88fb      	ldrh	r3, [r7, #6]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d109      	bne.n	80141a6 <udp_bind+0x72>
    port = udp_new_port();
 8014192:	f7ff fc35 	bl	8013a00 <udp_new_port>
 8014196:	4603      	mov	r3, r0
 8014198:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801419a:	88fb      	ldrh	r3, [r7, #6]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d12c      	bne.n	80141fa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80141a0:	f06f 0307 	mvn.w	r3, #7
 80141a4:	e040      	b.n	8014228 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141a6:	4b26      	ldr	r3, [pc, #152]	; (8014240 <udp_bind+0x10c>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	617b      	str	r3, [r7, #20]
 80141ac:	e022      	b.n	80141f4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80141ae:	68fa      	ldr	r2, [r7, #12]
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d01b      	beq.n	80141ee <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	8a5b      	ldrh	r3, [r3, #18]
 80141ba:	88fa      	ldrh	r2, [r7, #6]
 80141bc:	429a      	cmp	r2, r3
 80141be:	d116      	bne.n	80141ee <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	681a      	ldr	r2, [r3, #0]
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80141c8:	429a      	cmp	r2, r3
 80141ca:	d00d      	beq.n	80141e8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d00a      	beq.n	80141e8 <udp_bind+0xb4>
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d006      	beq.n	80141e8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80141da:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d003      	beq.n	80141e8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80141e0:	697b      	ldr	r3, [r7, #20]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d102      	bne.n	80141ee <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80141e8:	f06f 0307 	mvn.w	r3, #7
 80141ec:	e01c      	b.n	8014228 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	68db      	ldr	r3, [r3, #12]
 80141f2:	617b      	str	r3, [r7, #20]
 80141f4:	697b      	ldr	r3, [r7, #20]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d1d9      	bne.n	80141ae <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d002      	beq.n	8014206 <udp_bind+0xd2>
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	e000      	b.n	8014208 <udp_bind+0xd4>
 8014206:	2300      	movs	r3, #0
 8014208:	68fa      	ldr	r2, [r7, #12]
 801420a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	88fa      	ldrh	r2, [r7, #6]
 8014210:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014212:	7cfb      	ldrb	r3, [r7, #19]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d106      	bne.n	8014226 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014218:	4b09      	ldr	r3, [pc, #36]	; (8014240 <udp_bind+0x10c>)
 801421a:	681a      	ldr	r2, [r3, #0]
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014220:	4a07      	ldr	r2, [pc, #28]	; (8014240 <udp_bind+0x10c>)
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014226:	2300      	movs	r3, #0
}
 8014228:	4618      	mov	r0, r3
 801422a:	3718      	adds	r7, #24
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}
 8014230:	0801b60c 	.word	0x0801b60c
 8014234:	0801aab0 	.word	0x0801aab0
 8014238:	0801ad78 	.word	0x0801ad78
 801423c:	0801ab04 	.word	0x0801ab04
 8014240:	2000d364 	.word	0x2000d364

08014244 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b084      	sub	sp, #16
 8014248:	af00      	add	r7, sp, #0
 801424a:	60f8      	str	r0, [r7, #12]
 801424c:	60b9      	str	r1, [r7, #8]
 801424e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d107      	bne.n	8014266 <udp_recv+0x22>
 8014256:	4b08      	ldr	r3, [pc, #32]	; (8014278 <udp_recv+0x34>)
 8014258:	f240 428a 	movw	r2, #1162	; 0x48a
 801425c:	4907      	ldr	r1, [pc, #28]	; (801427c <udp_recv+0x38>)
 801425e:	4808      	ldr	r0, [pc, #32]	; (8014280 <udp_recv+0x3c>)
 8014260:	f002 ff76 	bl	8017150 <iprintf>
 8014264:	e005      	b.n	8014272 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	68ba      	ldr	r2, [r7, #8]
 801426a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	687a      	ldr	r2, [r7, #4]
 8014270:	61da      	str	r2, [r3, #28]
}
 8014272:	3710      	adds	r7, #16
 8014274:	46bd      	mov	sp, r7
 8014276:	bd80      	pop	{r7, pc}
 8014278:	0801aab0 	.word	0x0801aab0
 801427c:	0801ade4 	.word	0x0801ade4
 8014280:	0801ab04 	.word	0x0801ab04

08014284 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b084      	sub	sp, #16
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d107      	bne.n	80142a2 <udp_remove+0x1e>
 8014292:	4b19      	ldr	r3, [pc, #100]	; (80142f8 <udp_remove+0x74>)
 8014294:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014298:	4918      	ldr	r1, [pc, #96]	; (80142fc <udp_remove+0x78>)
 801429a:	4819      	ldr	r0, [pc, #100]	; (8014300 <udp_remove+0x7c>)
 801429c:	f002 ff58 	bl	8017150 <iprintf>
 80142a0:	e026      	b.n	80142f0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80142a2:	4b18      	ldr	r3, [pc, #96]	; (8014304 <udp_remove+0x80>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	687a      	ldr	r2, [r7, #4]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d105      	bne.n	80142b8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80142ac:	4b15      	ldr	r3, [pc, #84]	; (8014304 <udp_remove+0x80>)
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	68db      	ldr	r3, [r3, #12]
 80142b2:	4a14      	ldr	r2, [pc, #80]	; (8014304 <udp_remove+0x80>)
 80142b4:	6013      	str	r3, [r2, #0]
 80142b6:	e017      	b.n	80142e8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80142b8:	4b12      	ldr	r3, [pc, #72]	; (8014304 <udp_remove+0x80>)
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	60fb      	str	r3, [r7, #12]
 80142be:	e010      	b.n	80142e2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	68db      	ldr	r3, [r3, #12]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d009      	beq.n	80142dc <udp_remove+0x58>
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	687a      	ldr	r2, [r7, #4]
 80142ce:	429a      	cmp	r2, r3
 80142d0:	d104      	bne.n	80142dc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	68da      	ldr	r2, [r3, #12]
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	60da      	str	r2, [r3, #12]
        break;
 80142da:	e005      	b.n	80142e8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	68db      	ldr	r3, [r3, #12]
 80142e0:	60fb      	str	r3, [r7, #12]
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d1eb      	bne.n	80142c0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80142e8:	6879      	ldr	r1, [r7, #4]
 80142ea:	2000      	movs	r0, #0
 80142ec:	f7f8 f956 	bl	800c59c <memp_free>
}
 80142f0:	3710      	adds	r7, #16
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}
 80142f6:	bf00      	nop
 80142f8:	0801aab0 	.word	0x0801aab0
 80142fc:	0801adfc 	.word	0x0801adfc
 8014300:	0801ab04 	.word	0x0801ab04
 8014304:	2000d364 	.word	0x2000d364

08014308 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b082      	sub	sp, #8
 801430c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801430e:	2000      	movs	r0, #0
 8014310:	f7f8 f8f2 	bl	800c4f8 <memp_malloc>
 8014314:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d007      	beq.n	801432c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801431c:	2220      	movs	r2, #32
 801431e:	2100      	movs	r1, #0
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f002 fe2d 	bl	8016f80 <memset>
    pcb->ttl = UDP_TTL;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	22ff      	movs	r2, #255	; 0xff
 801432a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801432c:	687b      	ldr	r3, [r7, #4]
}
 801432e:	4618      	mov	r0, r3
 8014330:	3708      	adds	r7, #8
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}

08014336 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014336:	b580      	push	{r7, lr}
 8014338:	b084      	sub	sp, #16
 801433a:	af00      	add	r7, sp, #0
 801433c:	4603      	mov	r3, r0
 801433e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014340:	f7ff ffe2 	bl	8014308 <udp_new>
 8014344:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014346:	68fb      	ldr	r3, [r7, #12]
}
 8014348:	4618      	mov	r0, r3
 801434a:	3710      	adds	r7, #16
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}

08014350 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014350:	b480      	push	{r7}
 8014352:	b085      	sub	sp, #20
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
 8014358:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d01e      	beq.n	801439e <udp_netif_ip_addr_changed+0x4e>
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d01a      	beq.n	801439e <udp_netif_ip_addr_changed+0x4e>
 8014368:	683b      	ldr	r3, [r7, #0]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d017      	beq.n	801439e <udp_netif_ip_addr_changed+0x4e>
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d013      	beq.n	801439e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014376:	4b0d      	ldr	r3, [pc, #52]	; (80143ac <udp_netif_ip_addr_changed+0x5c>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	60fb      	str	r3, [r7, #12]
 801437c:	e00c      	b.n	8014398 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	681a      	ldr	r2, [r3, #0]
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	429a      	cmp	r2, r3
 8014388:	d103      	bne.n	8014392 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801438a:	683b      	ldr	r3, [r7, #0]
 801438c:	681a      	ldr	r2, [r3, #0]
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	68db      	ldr	r3, [r3, #12]
 8014396:	60fb      	str	r3, [r7, #12]
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d1ef      	bne.n	801437e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801439e:	bf00      	nop
 80143a0:	3714      	adds	r7, #20
 80143a2:	46bd      	mov	sp, r7
 80143a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a8:	4770      	bx	lr
 80143aa:	bf00      	nop
 80143ac:	2000d364 	.word	0x2000d364

080143b0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b082      	sub	sp, #8
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80143b8:	4915      	ldr	r1, [pc, #84]	; (8014410 <etharp_free_entry+0x60>)
 80143ba:	687a      	ldr	r2, [r7, #4]
 80143bc:	4613      	mov	r3, r2
 80143be:	005b      	lsls	r3, r3, #1
 80143c0:	4413      	add	r3, r2
 80143c2:	00db      	lsls	r3, r3, #3
 80143c4:	440b      	add	r3, r1
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d013      	beq.n	80143f4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80143cc:	4910      	ldr	r1, [pc, #64]	; (8014410 <etharp_free_entry+0x60>)
 80143ce:	687a      	ldr	r2, [r7, #4]
 80143d0:	4613      	mov	r3, r2
 80143d2:	005b      	lsls	r3, r3, #1
 80143d4:	4413      	add	r3, r2
 80143d6:	00db      	lsls	r3, r3, #3
 80143d8:	440b      	add	r3, r1
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	4618      	mov	r0, r3
 80143de:	f7f8 ff1d 	bl	800d21c <pbuf_free>
    arp_table[i].q = NULL;
 80143e2:	490b      	ldr	r1, [pc, #44]	; (8014410 <etharp_free_entry+0x60>)
 80143e4:	687a      	ldr	r2, [r7, #4]
 80143e6:	4613      	mov	r3, r2
 80143e8:	005b      	lsls	r3, r3, #1
 80143ea:	4413      	add	r3, r2
 80143ec:	00db      	lsls	r3, r3, #3
 80143ee:	440b      	add	r3, r1
 80143f0:	2200      	movs	r2, #0
 80143f2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80143f4:	4906      	ldr	r1, [pc, #24]	; (8014410 <etharp_free_entry+0x60>)
 80143f6:	687a      	ldr	r2, [r7, #4]
 80143f8:	4613      	mov	r3, r2
 80143fa:	005b      	lsls	r3, r3, #1
 80143fc:	4413      	add	r3, r2
 80143fe:	00db      	lsls	r3, r3, #3
 8014400:	440b      	add	r3, r1
 8014402:	3314      	adds	r3, #20
 8014404:	2200      	movs	r2, #0
 8014406:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014408:	bf00      	nop
 801440a:	3708      	adds	r7, #8
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}
 8014410:	2000d368 	.word	0x2000d368

08014414 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b082      	sub	sp, #8
 8014418:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801441a:	2300      	movs	r3, #0
 801441c:	607b      	str	r3, [r7, #4]
 801441e:	e096      	b.n	801454e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014420:	494f      	ldr	r1, [pc, #316]	; (8014560 <etharp_tmr+0x14c>)
 8014422:	687a      	ldr	r2, [r7, #4]
 8014424:	4613      	mov	r3, r2
 8014426:	005b      	lsls	r3, r3, #1
 8014428:	4413      	add	r3, r2
 801442a:	00db      	lsls	r3, r3, #3
 801442c:	440b      	add	r3, r1
 801442e:	3314      	adds	r3, #20
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014434:	78fb      	ldrb	r3, [r7, #3]
 8014436:	2b00      	cmp	r3, #0
 8014438:	f000 8086 	beq.w	8014548 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801443c:	4948      	ldr	r1, [pc, #288]	; (8014560 <etharp_tmr+0x14c>)
 801443e:	687a      	ldr	r2, [r7, #4]
 8014440:	4613      	mov	r3, r2
 8014442:	005b      	lsls	r3, r3, #1
 8014444:	4413      	add	r3, r2
 8014446:	00db      	lsls	r3, r3, #3
 8014448:	440b      	add	r3, r1
 801444a:	3312      	adds	r3, #18
 801444c:	881b      	ldrh	r3, [r3, #0]
 801444e:	3301      	adds	r3, #1
 8014450:	b298      	uxth	r0, r3
 8014452:	4943      	ldr	r1, [pc, #268]	; (8014560 <etharp_tmr+0x14c>)
 8014454:	687a      	ldr	r2, [r7, #4]
 8014456:	4613      	mov	r3, r2
 8014458:	005b      	lsls	r3, r3, #1
 801445a:	4413      	add	r3, r2
 801445c:	00db      	lsls	r3, r3, #3
 801445e:	440b      	add	r3, r1
 8014460:	3312      	adds	r3, #18
 8014462:	4602      	mov	r2, r0
 8014464:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014466:	493e      	ldr	r1, [pc, #248]	; (8014560 <etharp_tmr+0x14c>)
 8014468:	687a      	ldr	r2, [r7, #4]
 801446a:	4613      	mov	r3, r2
 801446c:	005b      	lsls	r3, r3, #1
 801446e:	4413      	add	r3, r2
 8014470:	00db      	lsls	r3, r3, #3
 8014472:	440b      	add	r3, r1
 8014474:	3312      	adds	r3, #18
 8014476:	881b      	ldrh	r3, [r3, #0]
 8014478:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801447c:	d215      	bcs.n	80144aa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801447e:	4938      	ldr	r1, [pc, #224]	; (8014560 <etharp_tmr+0x14c>)
 8014480:	687a      	ldr	r2, [r7, #4]
 8014482:	4613      	mov	r3, r2
 8014484:	005b      	lsls	r3, r3, #1
 8014486:	4413      	add	r3, r2
 8014488:	00db      	lsls	r3, r3, #3
 801448a:	440b      	add	r3, r1
 801448c:	3314      	adds	r3, #20
 801448e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014490:	2b01      	cmp	r3, #1
 8014492:	d10e      	bne.n	80144b2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014494:	4932      	ldr	r1, [pc, #200]	; (8014560 <etharp_tmr+0x14c>)
 8014496:	687a      	ldr	r2, [r7, #4]
 8014498:	4613      	mov	r3, r2
 801449a:	005b      	lsls	r3, r3, #1
 801449c:	4413      	add	r3, r2
 801449e:	00db      	lsls	r3, r3, #3
 80144a0:	440b      	add	r3, r1
 80144a2:	3312      	adds	r3, #18
 80144a4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80144a6:	2b04      	cmp	r3, #4
 80144a8:	d903      	bls.n	80144b2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f7ff ff80 	bl	80143b0 <etharp_free_entry>
 80144b0:	e04a      	b.n	8014548 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80144b2:	492b      	ldr	r1, [pc, #172]	; (8014560 <etharp_tmr+0x14c>)
 80144b4:	687a      	ldr	r2, [r7, #4]
 80144b6:	4613      	mov	r3, r2
 80144b8:	005b      	lsls	r3, r3, #1
 80144ba:	4413      	add	r3, r2
 80144bc:	00db      	lsls	r3, r3, #3
 80144be:	440b      	add	r3, r1
 80144c0:	3314      	adds	r3, #20
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	2b03      	cmp	r3, #3
 80144c6:	d10a      	bne.n	80144de <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80144c8:	4925      	ldr	r1, [pc, #148]	; (8014560 <etharp_tmr+0x14c>)
 80144ca:	687a      	ldr	r2, [r7, #4]
 80144cc:	4613      	mov	r3, r2
 80144ce:	005b      	lsls	r3, r3, #1
 80144d0:	4413      	add	r3, r2
 80144d2:	00db      	lsls	r3, r3, #3
 80144d4:	440b      	add	r3, r1
 80144d6:	3314      	adds	r3, #20
 80144d8:	2204      	movs	r2, #4
 80144da:	701a      	strb	r2, [r3, #0]
 80144dc:	e034      	b.n	8014548 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80144de:	4920      	ldr	r1, [pc, #128]	; (8014560 <etharp_tmr+0x14c>)
 80144e0:	687a      	ldr	r2, [r7, #4]
 80144e2:	4613      	mov	r3, r2
 80144e4:	005b      	lsls	r3, r3, #1
 80144e6:	4413      	add	r3, r2
 80144e8:	00db      	lsls	r3, r3, #3
 80144ea:	440b      	add	r3, r1
 80144ec:	3314      	adds	r3, #20
 80144ee:	781b      	ldrb	r3, [r3, #0]
 80144f0:	2b04      	cmp	r3, #4
 80144f2:	d10a      	bne.n	801450a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80144f4:	491a      	ldr	r1, [pc, #104]	; (8014560 <etharp_tmr+0x14c>)
 80144f6:	687a      	ldr	r2, [r7, #4]
 80144f8:	4613      	mov	r3, r2
 80144fa:	005b      	lsls	r3, r3, #1
 80144fc:	4413      	add	r3, r2
 80144fe:	00db      	lsls	r3, r3, #3
 8014500:	440b      	add	r3, r1
 8014502:	3314      	adds	r3, #20
 8014504:	2202      	movs	r2, #2
 8014506:	701a      	strb	r2, [r3, #0]
 8014508:	e01e      	b.n	8014548 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801450a:	4915      	ldr	r1, [pc, #84]	; (8014560 <etharp_tmr+0x14c>)
 801450c:	687a      	ldr	r2, [r7, #4]
 801450e:	4613      	mov	r3, r2
 8014510:	005b      	lsls	r3, r3, #1
 8014512:	4413      	add	r3, r2
 8014514:	00db      	lsls	r3, r3, #3
 8014516:	440b      	add	r3, r1
 8014518:	3314      	adds	r3, #20
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	2b01      	cmp	r3, #1
 801451e:	d113      	bne.n	8014548 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014520:	490f      	ldr	r1, [pc, #60]	; (8014560 <etharp_tmr+0x14c>)
 8014522:	687a      	ldr	r2, [r7, #4]
 8014524:	4613      	mov	r3, r2
 8014526:	005b      	lsls	r3, r3, #1
 8014528:	4413      	add	r3, r2
 801452a:	00db      	lsls	r3, r3, #3
 801452c:	440b      	add	r3, r1
 801452e:	3308      	adds	r3, #8
 8014530:	6818      	ldr	r0, [r3, #0]
 8014532:	687a      	ldr	r2, [r7, #4]
 8014534:	4613      	mov	r3, r2
 8014536:	005b      	lsls	r3, r3, #1
 8014538:	4413      	add	r3, r2
 801453a:	00db      	lsls	r3, r3, #3
 801453c:	4a08      	ldr	r2, [pc, #32]	; (8014560 <etharp_tmr+0x14c>)
 801453e:	4413      	add	r3, r2
 8014540:	3304      	adds	r3, #4
 8014542:	4619      	mov	r1, r3
 8014544:	f000 fe6e 	bl	8015224 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	3301      	adds	r3, #1
 801454c:	607b      	str	r3, [r7, #4]
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	2b09      	cmp	r3, #9
 8014552:	f77f af65 	ble.w	8014420 <etharp_tmr+0xc>
      }
    }
  }
}
 8014556:	bf00      	nop
 8014558:	bf00      	nop
 801455a:	3708      	adds	r7, #8
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}
 8014560:	2000d368 	.word	0x2000d368

08014564 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b08a      	sub	sp, #40	; 0x28
 8014568:	af00      	add	r7, sp, #0
 801456a:	60f8      	str	r0, [r7, #12]
 801456c:	460b      	mov	r3, r1
 801456e:	607a      	str	r2, [r7, #4]
 8014570:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014572:	230a      	movs	r3, #10
 8014574:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014576:	230a      	movs	r3, #10
 8014578:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801457a:	230a      	movs	r3, #10
 801457c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801457e:	2300      	movs	r3, #0
 8014580:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014582:	230a      	movs	r3, #10
 8014584:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014586:	2300      	movs	r3, #0
 8014588:	83bb      	strh	r3, [r7, #28]
 801458a:	2300      	movs	r3, #0
 801458c:	837b      	strh	r3, [r7, #26]
 801458e:	2300      	movs	r3, #0
 8014590:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014592:	2300      	movs	r3, #0
 8014594:	843b      	strh	r3, [r7, #32]
 8014596:	e0ae      	b.n	80146f6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014598:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801459c:	49a6      	ldr	r1, [pc, #664]	; (8014838 <etharp_find_entry+0x2d4>)
 801459e:	4613      	mov	r3, r2
 80145a0:	005b      	lsls	r3, r3, #1
 80145a2:	4413      	add	r3, r2
 80145a4:	00db      	lsls	r3, r3, #3
 80145a6:	440b      	add	r3, r1
 80145a8:	3314      	adds	r3, #20
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80145ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80145b2:	2b0a      	cmp	r3, #10
 80145b4:	d105      	bne.n	80145c2 <etharp_find_entry+0x5e>
 80145b6:	7dfb      	ldrb	r3, [r7, #23]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d102      	bne.n	80145c2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80145bc:	8c3b      	ldrh	r3, [r7, #32]
 80145be:	847b      	strh	r3, [r7, #34]	; 0x22
 80145c0:	e095      	b.n	80146ee <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80145c2:	7dfb      	ldrb	r3, [r7, #23]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	f000 8092 	beq.w	80146ee <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80145ca:	7dfb      	ldrb	r3, [r7, #23]
 80145cc:	2b01      	cmp	r3, #1
 80145ce:	d009      	beq.n	80145e4 <etharp_find_entry+0x80>
 80145d0:	7dfb      	ldrb	r3, [r7, #23]
 80145d2:	2b01      	cmp	r3, #1
 80145d4:	d806      	bhi.n	80145e4 <etharp_find_entry+0x80>
 80145d6:	4b99      	ldr	r3, [pc, #612]	; (801483c <etharp_find_entry+0x2d8>)
 80145d8:	f240 1223 	movw	r2, #291	; 0x123
 80145dc:	4998      	ldr	r1, [pc, #608]	; (8014840 <etharp_find_entry+0x2dc>)
 80145de:	4899      	ldr	r0, [pc, #612]	; (8014844 <etharp_find_entry+0x2e0>)
 80145e0:	f002 fdb6 	bl	8017150 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d020      	beq.n	801462c <etharp_find_entry+0xc8>
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	6819      	ldr	r1, [r3, #0]
 80145ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145f2:	4891      	ldr	r0, [pc, #580]	; (8014838 <etharp_find_entry+0x2d4>)
 80145f4:	4613      	mov	r3, r2
 80145f6:	005b      	lsls	r3, r3, #1
 80145f8:	4413      	add	r3, r2
 80145fa:	00db      	lsls	r3, r3, #3
 80145fc:	4403      	add	r3, r0
 80145fe:	3304      	adds	r3, #4
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	4299      	cmp	r1, r3
 8014604:	d112      	bne.n	801462c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d00c      	beq.n	8014626 <etharp_find_entry+0xc2>
 801460c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014610:	4989      	ldr	r1, [pc, #548]	; (8014838 <etharp_find_entry+0x2d4>)
 8014612:	4613      	mov	r3, r2
 8014614:	005b      	lsls	r3, r3, #1
 8014616:	4413      	add	r3, r2
 8014618:	00db      	lsls	r3, r3, #3
 801461a:	440b      	add	r3, r1
 801461c:	3308      	adds	r3, #8
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	687a      	ldr	r2, [r7, #4]
 8014622:	429a      	cmp	r2, r3
 8014624:	d102      	bne.n	801462c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014626:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801462a:	e100      	b.n	801482e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801462c:	7dfb      	ldrb	r3, [r7, #23]
 801462e:	2b01      	cmp	r3, #1
 8014630:	d140      	bne.n	80146b4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014632:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014636:	4980      	ldr	r1, [pc, #512]	; (8014838 <etharp_find_entry+0x2d4>)
 8014638:	4613      	mov	r3, r2
 801463a:	005b      	lsls	r3, r3, #1
 801463c:	4413      	add	r3, r2
 801463e:	00db      	lsls	r3, r3, #3
 8014640:	440b      	add	r3, r1
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d01a      	beq.n	801467e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014648:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801464c:	497a      	ldr	r1, [pc, #488]	; (8014838 <etharp_find_entry+0x2d4>)
 801464e:	4613      	mov	r3, r2
 8014650:	005b      	lsls	r3, r3, #1
 8014652:	4413      	add	r3, r2
 8014654:	00db      	lsls	r3, r3, #3
 8014656:	440b      	add	r3, r1
 8014658:	3312      	adds	r3, #18
 801465a:	881b      	ldrh	r3, [r3, #0]
 801465c:	8bba      	ldrh	r2, [r7, #28]
 801465e:	429a      	cmp	r2, r3
 8014660:	d845      	bhi.n	80146ee <etharp_find_entry+0x18a>
            old_queue = i;
 8014662:	8c3b      	ldrh	r3, [r7, #32]
 8014664:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014666:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801466a:	4973      	ldr	r1, [pc, #460]	; (8014838 <etharp_find_entry+0x2d4>)
 801466c:	4613      	mov	r3, r2
 801466e:	005b      	lsls	r3, r3, #1
 8014670:	4413      	add	r3, r2
 8014672:	00db      	lsls	r3, r3, #3
 8014674:	440b      	add	r3, r1
 8014676:	3312      	adds	r3, #18
 8014678:	881b      	ldrh	r3, [r3, #0]
 801467a:	83bb      	strh	r3, [r7, #28]
 801467c:	e037      	b.n	80146ee <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801467e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014682:	496d      	ldr	r1, [pc, #436]	; (8014838 <etharp_find_entry+0x2d4>)
 8014684:	4613      	mov	r3, r2
 8014686:	005b      	lsls	r3, r3, #1
 8014688:	4413      	add	r3, r2
 801468a:	00db      	lsls	r3, r3, #3
 801468c:	440b      	add	r3, r1
 801468e:	3312      	adds	r3, #18
 8014690:	881b      	ldrh	r3, [r3, #0]
 8014692:	8b7a      	ldrh	r2, [r7, #26]
 8014694:	429a      	cmp	r2, r3
 8014696:	d82a      	bhi.n	80146ee <etharp_find_entry+0x18a>
            old_pending = i;
 8014698:	8c3b      	ldrh	r3, [r7, #32]
 801469a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801469c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146a0:	4965      	ldr	r1, [pc, #404]	; (8014838 <etharp_find_entry+0x2d4>)
 80146a2:	4613      	mov	r3, r2
 80146a4:	005b      	lsls	r3, r3, #1
 80146a6:	4413      	add	r3, r2
 80146a8:	00db      	lsls	r3, r3, #3
 80146aa:	440b      	add	r3, r1
 80146ac:	3312      	adds	r3, #18
 80146ae:	881b      	ldrh	r3, [r3, #0]
 80146b0:	837b      	strh	r3, [r7, #26]
 80146b2:	e01c      	b.n	80146ee <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80146b4:	7dfb      	ldrb	r3, [r7, #23]
 80146b6:	2b01      	cmp	r3, #1
 80146b8:	d919      	bls.n	80146ee <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80146ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146be:	495e      	ldr	r1, [pc, #376]	; (8014838 <etharp_find_entry+0x2d4>)
 80146c0:	4613      	mov	r3, r2
 80146c2:	005b      	lsls	r3, r3, #1
 80146c4:	4413      	add	r3, r2
 80146c6:	00db      	lsls	r3, r3, #3
 80146c8:	440b      	add	r3, r1
 80146ca:	3312      	adds	r3, #18
 80146cc:	881b      	ldrh	r3, [r3, #0]
 80146ce:	8b3a      	ldrh	r2, [r7, #24]
 80146d0:	429a      	cmp	r2, r3
 80146d2:	d80c      	bhi.n	80146ee <etharp_find_entry+0x18a>
            old_stable = i;
 80146d4:	8c3b      	ldrh	r3, [r7, #32]
 80146d6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80146d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146dc:	4956      	ldr	r1, [pc, #344]	; (8014838 <etharp_find_entry+0x2d4>)
 80146de:	4613      	mov	r3, r2
 80146e0:	005b      	lsls	r3, r3, #1
 80146e2:	4413      	add	r3, r2
 80146e4:	00db      	lsls	r3, r3, #3
 80146e6:	440b      	add	r3, r1
 80146e8:	3312      	adds	r3, #18
 80146ea:	881b      	ldrh	r3, [r3, #0]
 80146ec:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80146ee:	8c3b      	ldrh	r3, [r7, #32]
 80146f0:	3301      	adds	r3, #1
 80146f2:	b29b      	uxth	r3, r3
 80146f4:	843b      	strh	r3, [r7, #32]
 80146f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80146fa:	2b09      	cmp	r3, #9
 80146fc:	f77f af4c 	ble.w	8014598 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014700:	7afb      	ldrb	r3, [r7, #11]
 8014702:	f003 0302 	and.w	r3, r3, #2
 8014706:	2b00      	cmp	r3, #0
 8014708:	d108      	bne.n	801471c <etharp_find_entry+0x1b8>
 801470a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801470e:	2b0a      	cmp	r3, #10
 8014710:	d107      	bne.n	8014722 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014712:	7afb      	ldrb	r3, [r7, #11]
 8014714:	f003 0301 	and.w	r3, r3, #1
 8014718:	2b00      	cmp	r3, #0
 801471a:	d102      	bne.n	8014722 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801471c:	f04f 33ff 	mov.w	r3, #4294967295
 8014720:	e085      	b.n	801482e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014722:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014726:	2b09      	cmp	r3, #9
 8014728:	dc02      	bgt.n	8014730 <etharp_find_entry+0x1cc>
    i = empty;
 801472a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801472c:	843b      	strh	r3, [r7, #32]
 801472e:	e039      	b.n	80147a4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014730:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014734:	2b09      	cmp	r3, #9
 8014736:	dc14      	bgt.n	8014762 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801473a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801473c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014740:	493d      	ldr	r1, [pc, #244]	; (8014838 <etharp_find_entry+0x2d4>)
 8014742:	4613      	mov	r3, r2
 8014744:	005b      	lsls	r3, r3, #1
 8014746:	4413      	add	r3, r2
 8014748:	00db      	lsls	r3, r3, #3
 801474a:	440b      	add	r3, r1
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d018      	beq.n	8014784 <etharp_find_entry+0x220>
 8014752:	4b3a      	ldr	r3, [pc, #232]	; (801483c <etharp_find_entry+0x2d8>)
 8014754:	f240 126d 	movw	r2, #365	; 0x16d
 8014758:	493b      	ldr	r1, [pc, #236]	; (8014848 <etharp_find_entry+0x2e4>)
 801475a:	483a      	ldr	r0, [pc, #232]	; (8014844 <etharp_find_entry+0x2e0>)
 801475c:	f002 fcf8 	bl	8017150 <iprintf>
 8014760:	e010      	b.n	8014784 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014762:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014766:	2b09      	cmp	r3, #9
 8014768:	dc02      	bgt.n	8014770 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801476a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801476c:	843b      	strh	r3, [r7, #32]
 801476e:	e009      	b.n	8014784 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014770:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014774:	2b09      	cmp	r3, #9
 8014776:	dc02      	bgt.n	801477e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014778:	8bfb      	ldrh	r3, [r7, #30]
 801477a:	843b      	strh	r3, [r7, #32]
 801477c:	e002      	b.n	8014784 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801477e:	f04f 33ff 	mov.w	r3, #4294967295
 8014782:	e054      	b.n	801482e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014784:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014788:	2b09      	cmp	r3, #9
 801478a:	dd06      	ble.n	801479a <etharp_find_entry+0x236>
 801478c:	4b2b      	ldr	r3, [pc, #172]	; (801483c <etharp_find_entry+0x2d8>)
 801478e:	f240 127f 	movw	r2, #383	; 0x17f
 8014792:	492e      	ldr	r1, [pc, #184]	; (801484c <etharp_find_entry+0x2e8>)
 8014794:	482b      	ldr	r0, [pc, #172]	; (8014844 <etharp_find_entry+0x2e0>)
 8014796:	f002 fcdb 	bl	8017150 <iprintf>
    etharp_free_entry(i);
 801479a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801479e:	4618      	mov	r0, r3
 80147a0:	f7ff fe06 	bl	80143b0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80147a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80147a8:	2b09      	cmp	r3, #9
 80147aa:	dd06      	ble.n	80147ba <etharp_find_entry+0x256>
 80147ac:	4b23      	ldr	r3, [pc, #140]	; (801483c <etharp_find_entry+0x2d8>)
 80147ae:	f240 1283 	movw	r2, #387	; 0x183
 80147b2:	4926      	ldr	r1, [pc, #152]	; (801484c <etharp_find_entry+0x2e8>)
 80147b4:	4823      	ldr	r0, [pc, #140]	; (8014844 <etharp_find_entry+0x2e0>)
 80147b6:	f002 fccb 	bl	8017150 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80147ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147be:	491e      	ldr	r1, [pc, #120]	; (8014838 <etharp_find_entry+0x2d4>)
 80147c0:	4613      	mov	r3, r2
 80147c2:	005b      	lsls	r3, r3, #1
 80147c4:	4413      	add	r3, r2
 80147c6:	00db      	lsls	r3, r3, #3
 80147c8:	440b      	add	r3, r1
 80147ca:	3314      	adds	r3, #20
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d006      	beq.n	80147e0 <etharp_find_entry+0x27c>
 80147d2:	4b1a      	ldr	r3, [pc, #104]	; (801483c <etharp_find_entry+0x2d8>)
 80147d4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80147d8:	491d      	ldr	r1, [pc, #116]	; (8014850 <etharp_find_entry+0x2ec>)
 80147da:	481a      	ldr	r0, [pc, #104]	; (8014844 <etharp_find_entry+0x2e0>)
 80147dc:	f002 fcb8 	bl	8017150 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d00b      	beq.n	80147fe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80147e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	6819      	ldr	r1, [r3, #0]
 80147ee:	4812      	ldr	r0, [pc, #72]	; (8014838 <etharp_find_entry+0x2d4>)
 80147f0:	4613      	mov	r3, r2
 80147f2:	005b      	lsls	r3, r3, #1
 80147f4:	4413      	add	r3, r2
 80147f6:	00db      	lsls	r3, r3, #3
 80147f8:	4403      	add	r3, r0
 80147fa:	3304      	adds	r3, #4
 80147fc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80147fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014802:	490d      	ldr	r1, [pc, #52]	; (8014838 <etharp_find_entry+0x2d4>)
 8014804:	4613      	mov	r3, r2
 8014806:	005b      	lsls	r3, r3, #1
 8014808:	4413      	add	r3, r2
 801480a:	00db      	lsls	r3, r3, #3
 801480c:	440b      	add	r3, r1
 801480e:	3312      	adds	r3, #18
 8014810:	2200      	movs	r2, #0
 8014812:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014814:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014818:	4907      	ldr	r1, [pc, #28]	; (8014838 <etharp_find_entry+0x2d4>)
 801481a:	4613      	mov	r3, r2
 801481c:	005b      	lsls	r3, r3, #1
 801481e:	4413      	add	r3, r2
 8014820:	00db      	lsls	r3, r3, #3
 8014822:	440b      	add	r3, r1
 8014824:	3308      	adds	r3, #8
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801482a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801482e:	4618      	mov	r0, r3
 8014830:	3728      	adds	r7, #40	; 0x28
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
 8014836:	bf00      	nop
 8014838:	2000d368 	.word	0x2000d368
 801483c:	0801ae14 	.word	0x0801ae14
 8014840:	0801ae4c 	.word	0x0801ae4c
 8014844:	0801ae8c 	.word	0x0801ae8c
 8014848:	0801aeb4 	.word	0x0801aeb4
 801484c:	0801aecc 	.word	0x0801aecc
 8014850:	0801aee0 	.word	0x0801aee0

08014854 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b088      	sub	sp, #32
 8014858:	af02      	add	r7, sp, #8
 801485a:	60f8      	str	r0, [r7, #12]
 801485c:	60b9      	str	r1, [r7, #8]
 801485e:	607a      	str	r2, [r7, #4]
 8014860:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014868:	2b06      	cmp	r3, #6
 801486a:	d006      	beq.n	801487a <etharp_update_arp_entry+0x26>
 801486c:	4b48      	ldr	r3, [pc, #288]	; (8014990 <etharp_update_arp_entry+0x13c>)
 801486e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014872:	4948      	ldr	r1, [pc, #288]	; (8014994 <etharp_update_arp_entry+0x140>)
 8014874:	4848      	ldr	r0, [pc, #288]	; (8014998 <etharp_update_arp_entry+0x144>)
 8014876:	f002 fc6b 	bl	8017150 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d012      	beq.n	80148a6 <etharp_update_arp_entry+0x52>
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d00e      	beq.n	80148a6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	68f9      	ldr	r1, [r7, #12]
 801488e:	4618      	mov	r0, r3
 8014890:	f001 f8fe 	bl	8015a90 <ip4_addr_isbroadcast_u32>
 8014894:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014896:	2b00      	cmp	r3, #0
 8014898:	d105      	bne.n	80148a6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801489a:	68bb      	ldr	r3, [r7, #8]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80148a2:	2be0      	cmp	r3, #224	; 0xe0
 80148a4:	d102      	bne.n	80148ac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80148a6:	f06f 030f 	mvn.w	r3, #15
 80148aa:	e06c      	b.n	8014986 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80148ac:	78fb      	ldrb	r3, [r7, #3]
 80148ae:	68fa      	ldr	r2, [r7, #12]
 80148b0:	4619      	mov	r1, r3
 80148b2:	68b8      	ldr	r0, [r7, #8]
 80148b4:	f7ff fe56 	bl	8014564 <etharp_find_entry>
 80148b8:	4603      	mov	r3, r0
 80148ba:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80148bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	da02      	bge.n	80148ca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80148c4:	8afb      	ldrh	r3, [r7, #22]
 80148c6:	b25b      	sxtb	r3, r3
 80148c8:	e05d      	b.n	8014986 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80148ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148ce:	4933      	ldr	r1, [pc, #204]	; (801499c <etharp_update_arp_entry+0x148>)
 80148d0:	4613      	mov	r3, r2
 80148d2:	005b      	lsls	r3, r3, #1
 80148d4:	4413      	add	r3, r2
 80148d6:	00db      	lsls	r3, r3, #3
 80148d8:	440b      	add	r3, r1
 80148da:	3314      	adds	r3, #20
 80148dc:	2202      	movs	r2, #2
 80148de:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80148e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148e4:	492d      	ldr	r1, [pc, #180]	; (801499c <etharp_update_arp_entry+0x148>)
 80148e6:	4613      	mov	r3, r2
 80148e8:	005b      	lsls	r3, r3, #1
 80148ea:	4413      	add	r3, r2
 80148ec:	00db      	lsls	r3, r3, #3
 80148ee:	440b      	add	r3, r1
 80148f0:	3308      	adds	r3, #8
 80148f2:	68fa      	ldr	r2, [r7, #12]
 80148f4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80148f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148fa:	4613      	mov	r3, r2
 80148fc:	005b      	lsls	r3, r3, #1
 80148fe:	4413      	add	r3, r2
 8014900:	00db      	lsls	r3, r3, #3
 8014902:	3308      	adds	r3, #8
 8014904:	4a25      	ldr	r2, [pc, #148]	; (801499c <etharp_update_arp_entry+0x148>)
 8014906:	4413      	add	r3, r2
 8014908:	3304      	adds	r3, #4
 801490a:	2206      	movs	r2, #6
 801490c:	6879      	ldr	r1, [r7, #4]
 801490e:	4618      	mov	r0, r3
 8014910:	f002 fb28 	bl	8016f64 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014914:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014918:	4920      	ldr	r1, [pc, #128]	; (801499c <etharp_update_arp_entry+0x148>)
 801491a:	4613      	mov	r3, r2
 801491c:	005b      	lsls	r3, r3, #1
 801491e:	4413      	add	r3, r2
 8014920:	00db      	lsls	r3, r3, #3
 8014922:	440b      	add	r3, r1
 8014924:	3312      	adds	r3, #18
 8014926:	2200      	movs	r2, #0
 8014928:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801492a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801492e:	491b      	ldr	r1, [pc, #108]	; (801499c <etharp_update_arp_entry+0x148>)
 8014930:	4613      	mov	r3, r2
 8014932:	005b      	lsls	r3, r3, #1
 8014934:	4413      	add	r3, r2
 8014936:	00db      	lsls	r3, r3, #3
 8014938:	440b      	add	r3, r1
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d021      	beq.n	8014984 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014940:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014944:	4915      	ldr	r1, [pc, #84]	; (801499c <etharp_update_arp_entry+0x148>)
 8014946:	4613      	mov	r3, r2
 8014948:	005b      	lsls	r3, r3, #1
 801494a:	4413      	add	r3, r2
 801494c:	00db      	lsls	r3, r3, #3
 801494e:	440b      	add	r3, r1
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014954:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014958:	4910      	ldr	r1, [pc, #64]	; (801499c <etharp_update_arp_entry+0x148>)
 801495a:	4613      	mov	r3, r2
 801495c:	005b      	lsls	r3, r3, #1
 801495e:	4413      	add	r3, r2
 8014960:	00db      	lsls	r3, r3, #3
 8014962:	440b      	add	r3, r1
 8014964:	2200      	movs	r2, #0
 8014966:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801496e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014972:	9300      	str	r3, [sp, #0]
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	6939      	ldr	r1, [r7, #16]
 8014978:	68f8      	ldr	r0, [r7, #12]
 801497a:	f001 ff97 	bl	80168ac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801497e:	6938      	ldr	r0, [r7, #16]
 8014980:	f7f8 fc4c 	bl	800d21c <pbuf_free>
  }
  return ERR_OK;
 8014984:	2300      	movs	r3, #0
}
 8014986:	4618      	mov	r0, r3
 8014988:	3718      	adds	r7, #24
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}
 801498e:	bf00      	nop
 8014990:	0801ae14 	.word	0x0801ae14
 8014994:	0801af0c 	.word	0x0801af0c
 8014998:	0801ae8c 	.word	0x0801ae8c
 801499c:	2000d368 	.word	0x2000d368

080149a0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80149a8:	2300      	movs	r3, #0
 80149aa:	60fb      	str	r3, [r7, #12]
 80149ac:	e01e      	b.n	80149ec <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80149ae:	4913      	ldr	r1, [pc, #76]	; (80149fc <etharp_cleanup_netif+0x5c>)
 80149b0:	68fa      	ldr	r2, [r7, #12]
 80149b2:	4613      	mov	r3, r2
 80149b4:	005b      	lsls	r3, r3, #1
 80149b6:	4413      	add	r3, r2
 80149b8:	00db      	lsls	r3, r3, #3
 80149ba:	440b      	add	r3, r1
 80149bc:	3314      	adds	r3, #20
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80149c2:	7afb      	ldrb	r3, [r7, #11]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d00e      	beq.n	80149e6 <etharp_cleanup_netif+0x46>
 80149c8:	490c      	ldr	r1, [pc, #48]	; (80149fc <etharp_cleanup_netif+0x5c>)
 80149ca:	68fa      	ldr	r2, [r7, #12]
 80149cc:	4613      	mov	r3, r2
 80149ce:	005b      	lsls	r3, r3, #1
 80149d0:	4413      	add	r3, r2
 80149d2:	00db      	lsls	r3, r3, #3
 80149d4:	440b      	add	r3, r1
 80149d6:	3308      	adds	r3, #8
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	687a      	ldr	r2, [r7, #4]
 80149dc:	429a      	cmp	r2, r3
 80149de:	d102      	bne.n	80149e6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80149e0:	68f8      	ldr	r0, [r7, #12]
 80149e2:	f7ff fce5 	bl	80143b0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	3301      	adds	r3, #1
 80149ea:	60fb      	str	r3, [r7, #12]
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	2b09      	cmp	r3, #9
 80149f0:	dddd      	ble.n	80149ae <etharp_cleanup_netif+0xe>
    }
  }
}
 80149f2:	bf00      	nop
 80149f4:	bf00      	nop
 80149f6:	3710      	adds	r7, #16
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}
 80149fc:	2000d368 	.word	0x2000d368

08014a00 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014a00:	b5b0      	push	{r4, r5, r7, lr}
 8014a02:	b08a      	sub	sp, #40	; 0x28
 8014a04:	af04      	add	r7, sp, #16
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014a0a:	683b      	ldr	r3, [r7, #0]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d107      	bne.n	8014a20 <etharp_input+0x20>
 8014a10:	4b3d      	ldr	r3, [pc, #244]	; (8014b08 <etharp_input+0x108>)
 8014a12:	f240 228a 	movw	r2, #650	; 0x28a
 8014a16:	493d      	ldr	r1, [pc, #244]	; (8014b0c <etharp_input+0x10c>)
 8014a18:	483d      	ldr	r0, [pc, #244]	; (8014b10 <etharp_input+0x110>)
 8014a1a:	f002 fb99 	bl	8017150 <iprintf>
 8014a1e:	e06f      	b.n	8014b00 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	685b      	ldr	r3, [r3, #4]
 8014a24:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014a26:	693b      	ldr	r3, [r7, #16]
 8014a28:	881b      	ldrh	r3, [r3, #0]
 8014a2a:	b29b      	uxth	r3, r3
 8014a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a30:	d10c      	bne.n	8014a4c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014a32:	693b      	ldr	r3, [r7, #16]
 8014a34:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014a36:	2b06      	cmp	r3, #6
 8014a38:	d108      	bne.n	8014a4c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014a3a:	693b      	ldr	r3, [r7, #16]
 8014a3c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014a3e:	2b04      	cmp	r3, #4
 8014a40:	d104      	bne.n	8014a4c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	885b      	ldrh	r3, [r3, #2]
 8014a46:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014a48:	2b08      	cmp	r3, #8
 8014a4a:	d003      	beq.n	8014a54 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f7f8 fbe5 	bl	800d21c <pbuf_free>
    return;
 8014a52:	e055      	b.n	8014b00 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014a54:	693b      	ldr	r3, [r7, #16]
 8014a56:	330e      	adds	r3, #14
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014a5c:	693b      	ldr	r3, [r7, #16]
 8014a5e:	3318      	adds	r3, #24
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014a64:	683b      	ldr	r3, [r7, #0]
 8014a66:	3304      	adds	r3, #4
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d102      	bne.n	8014a74 <etharp_input+0x74>
    for_us = 0;
 8014a6e:	2300      	movs	r3, #0
 8014a70:	75fb      	strb	r3, [r7, #23]
 8014a72:	e009      	b.n	8014a88 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014a74:	68ba      	ldr	r2, [r7, #8]
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	3304      	adds	r3, #4
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	bf0c      	ite	eq
 8014a80:	2301      	moveq	r3, #1
 8014a82:	2300      	movne	r3, #0
 8014a84:	b2db      	uxtb	r3, r3
 8014a86:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014a88:	693b      	ldr	r3, [r7, #16]
 8014a8a:	f103 0208 	add.w	r2, r3, #8
 8014a8e:	7dfb      	ldrb	r3, [r7, #23]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d001      	beq.n	8014a98 <etharp_input+0x98>
 8014a94:	2301      	movs	r3, #1
 8014a96:	e000      	b.n	8014a9a <etharp_input+0x9a>
 8014a98:	2302      	movs	r3, #2
 8014a9a:	f107 010c 	add.w	r1, r7, #12
 8014a9e:	6838      	ldr	r0, [r7, #0]
 8014aa0:	f7ff fed8 	bl	8014854 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014aa4:	693b      	ldr	r3, [r7, #16]
 8014aa6:	88db      	ldrh	r3, [r3, #6]
 8014aa8:	b29b      	uxth	r3, r3
 8014aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014aae:	d003      	beq.n	8014ab8 <etharp_input+0xb8>
 8014ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ab4:	d01e      	beq.n	8014af4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014ab6:	e020      	b.n	8014afa <etharp_input+0xfa>
      if (for_us) {
 8014ab8:	7dfb      	ldrb	r3, [r7, #23]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d01c      	beq.n	8014af8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014ac4:	693b      	ldr	r3, [r7, #16]
 8014ac6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014ad4:	693a      	ldr	r2, [r7, #16]
 8014ad6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014ad8:	2102      	movs	r1, #2
 8014ada:	9103      	str	r1, [sp, #12]
 8014adc:	f107 010c 	add.w	r1, r7, #12
 8014ae0:	9102      	str	r1, [sp, #8]
 8014ae2:	9201      	str	r2, [sp, #4]
 8014ae4:	9300      	str	r3, [sp, #0]
 8014ae6:	462b      	mov	r3, r5
 8014ae8:	4622      	mov	r2, r4
 8014aea:	4601      	mov	r1, r0
 8014aec:	6838      	ldr	r0, [r7, #0]
 8014aee:	f000 faeb 	bl	80150c8 <etharp_raw>
      break;
 8014af2:	e001      	b.n	8014af8 <etharp_input+0xf8>
      break;
 8014af4:	bf00      	nop
 8014af6:	e000      	b.n	8014afa <etharp_input+0xfa>
      break;
 8014af8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014afa:	6878      	ldr	r0, [r7, #4]
 8014afc:	f7f8 fb8e 	bl	800d21c <pbuf_free>
}
 8014b00:	3718      	adds	r7, #24
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bdb0      	pop	{r4, r5, r7, pc}
 8014b06:	bf00      	nop
 8014b08:	0801ae14 	.word	0x0801ae14
 8014b0c:	0801af64 	.word	0x0801af64
 8014b10:	0801ae8c 	.word	0x0801ae8c

08014b14 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b086      	sub	sp, #24
 8014b18:	af02      	add	r7, sp, #8
 8014b1a:	60f8      	str	r0, [r7, #12]
 8014b1c:	60b9      	str	r1, [r7, #8]
 8014b1e:	4613      	mov	r3, r2
 8014b20:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014b22:	79fa      	ldrb	r2, [r7, #7]
 8014b24:	4944      	ldr	r1, [pc, #272]	; (8014c38 <etharp_output_to_arp_index+0x124>)
 8014b26:	4613      	mov	r3, r2
 8014b28:	005b      	lsls	r3, r3, #1
 8014b2a:	4413      	add	r3, r2
 8014b2c:	00db      	lsls	r3, r3, #3
 8014b2e:	440b      	add	r3, r1
 8014b30:	3314      	adds	r3, #20
 8014b32:	781b      	ldrb	r3, [r3, #0]
 8014b34:	2b01      	cmp	r3, #1
 8014b36:	d806      	bhi.n	8014b46 <etharp_output_to_arp_index+0x32>
 8014b38:	4b40      	ldr	r3, [pc, #256]	; (8014c3c <etharp_output_to_arp_index+0x128>)
 8014b3a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014b3e:	4940      	ldr	r1, [pc, #256]	; (8014c40 <etharp_output_to_arp_index+0x12c>)
 8014b40:	4840      	ldr	r0, [pc, #256]	; (8014c44 <etharp_output_to_arp_index+0x130>)
 8014b42:	f002 fb05 	bl	8017150 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014b46:	79fa      	ldrb	r2, [r7, #7]
 8014b48:	493b      	ldr	r1, [pc, #236]	; (8014c38 <etharp_output_to_arp_index+0x124>)
 8014b4a:	4613      	mov	r3, r2
 8014b4c:	005b      	lsls	r3, r3, #1
 8014b4e:	4413      	add	r3, r2
 8014b50:	00db      	lsls	r3, r3, #3
 8014b52:	440b      	add	r3, r1
 8014b54:	3314      	adds	r3, #20
 8014b56:	781b      	ldrb	r3, [r3, #0]
 8014b58:	2b02      	cmp	r3, #2
 8014b5a:	d153      	bne.n	8014c04 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014b5c:	79fa      	ldrb	r2, [r7, #7]
 8014b5e:	4936      	ldr	r1, [pc, #216]	; (8014c38 <etharp_output_to_arp_index+0x124>)
 8014b60:	4613      	mov	r3, r2
 8014b62:	005b      	lsls	r3, r3, #1
 8014b64:	4413      	add	r3, r2
 8014b66:	00db      	lsls	r3, r3, #3
 8014b68:	440b      	add	r3, r1
 8014b6a:	3312      	adds	r3, #18
 8014b6c:	881b      	ldrh	r3, [r3, #0]
 8014b6e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014b72:	d919      	bls.n	8014ba8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014b74:	79fa      	ldrb	r2, [r7, #7]
 8014b76:	4613      	mov	r3, r2
 8014b78:	005b      	lsls	r3, r3, #1
 8014b7a:	4413      	add	r3, r2
 8014b7c:	00db      	lsls	r3, r3, #3
 8014b7e:	4a2e      	ldr	r2, [pc, #184]	; (8014c38 <etharp_output_to_arp_index+0x124>)
 8014b80:	4413      	add	r3, r2
 8014b82:	3304      	adds	r3, #4
 8014b84:	4619      	mov	r1, r3
 8014b86:	68f8      	ldr	r0, [r7, #12]
 8014b88:	f000 fb4c 	bl	8015224 <etharp_request>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d138      	bne.n	8014c04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014b92:	79fa      	ldrb	r2, [r7, #7]
 8014b94:	4928      	ldr	r1, [pc, #160]	; (8014c38 <etharp_output_to_arp_index+0x124>)
 8014b96:	4613      	mov	r3, r2
 8014b98:	005b      	lsls	r3, r3, #1
 8014b9a:	4413      	add	r3, r2
 8014b9c:	00db      	lsls	r3, r3, #3
 8014b9e:	440b      	add	r3, r1
 8014ba0:	3314      	adds	r3, #20
 8014ba2:	2203      	movs	r2, #3
 8014ba4:	701a      	strb	r2, [r3, #0]
 8014ba6:	e02d      	b.n	8014c04 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014ba8:	79fa      	ldrb	r2, [r7, #7]
 8014baa:	4923      	ldr	r1, [pc, #140]	; (8014c38 <etharp_output_to_arp_index+0x124>)
 8014bac:	4613      	mov	r3, r2
 8014bae:	005b      	lsls	r3, r3, #1
 8014bb0:	4413      	add	r3, r2
 8014bb2:	00db      	lsls	r3, r3, #3
 8014bb4:	440b      	add	r3, r1
 8014bb6:	3312      	adds	r3, #18
 8014bb8:	881b      	ldrh	r3, [r3, #0]
 8014bba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014bbe:	d321      	bcc.n	8014c04 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014bc0:	79fa      	ldrb	r2, [r7, #7]
 8014bc2:	4613      	mov	r3, r2
 8014bc4:	005b      	lsls	r3, r3, #1
 8014bc6:	4413      	add	r3, r2
 8014bc8:	00db      	lsls	r3, r3, #3
 8014bca:	4a1b      	ldr	r2, [pc, #108]	; (8014c38 <etharp_output_to_arp_index+0x124>)
 8014bcc:	4413      	add	r3, r2
 8014bce:	1d19      	adds	r1, r3, #4
 8014bd0:	79fa      	ldrb	r2, [r7, #7]
 8014bd2:	4613      	mov	r3, r2
 8014bd4:	005b      	lsls	r3, r3, #1
 8014bd6:	4413      	add	r3, r2
 8014bd8:	00db      	lsls	r3, r3, #3
 8014bda:	3308      	adds	r3, #8
 8014bdc:	4a16      	ldr	r2, [pc, #88]	; (8014c38 <etharp_output_to_arp_index+0x124>)
 8014bde:	4413      	add	r3, r2
 8014be0:	3304      	adds	r3, #4
 8014be2:	461a      	mov	r2, r3
 8014be4:	68f8      	ldr	r0, [r7, #12]
 8014be6:	f000 fafb 	bl	80151e0 <etharp_request_dst>
 8014bea:	4603      	mov	r3, r0
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d109      	bne.n	8014c04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014bf0:	79fa      	ldrb	r2, [r7, #7]
 8014bf2:	4911      	ldr	r1, [pc, #68]	; (8014c38 <etharp_output_to_arp_index+0x124>)
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	005b      	lsls	r3, r3, #1
 8014bf8:	4413      	add	r3, r2
 8014bfa:	00db      	lsls	r3, r3, #3
 8014bfc:	440b      	add	r3, r1
 8014bfe:	3314      	adds	r3, #20
 8014c00:	2203      	movs	r2, #3
 8014c02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014c0a:	79fa      	ldrb	r2, [r7, #7]
 8014c0c:	4613      	mov	r3, r2
 8014c0e:	005b      	lsls	r3, r3, #1
 8014c10:	4413      	add	r3, r2
 8014c12:	00db      	lsls	r3, r3, #3
 8014c14:	3308      	adds	r3, #8
 8014c16:	4a08      	ldr	r2, [pc, #32]	; (8014c38 <etharp_output_to_arp_index+0x124>)
 8014c18:	4413      	add	r3, r2
 8014c1a:	3304      	adds	r3, #4
 8014c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c20:	9200      	str	r2, [sp, #0]
 8014c22:	460a      	mov	r2, r1
 8014c24:	68b9      	ldr	r1, [r7, #8]
 8014c26:	68f8      	ldr	r0, [r7, #12]
 8014c28:	f001 fe40 	bl	80168ac <ethernet_output>
 8014c2c:	4603      	mov	r3, r0
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3710      	adds	r7, #16
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}
 8014c36:	bf00      	nop
 8014c38:	2000d368 	.word	0x2000d368
 8014c3c:	0801ae14 	.word	0x0801ae14
 8014c40:	0801af84 	.word	0x0801af84
 8014c44:	0801ae8c 	.word	0x0801ae8c

08014c48 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b08a      	sub	sp, #40	; 0x28
 8014c4c:	af02      	add	r7, sp, #8
 8014c4e:	60f8      	str	r0, [r7, #12]
 8014c50:	60b9      	str	r1, [r7, #8]
 8014c52:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d106      	bne.n	8014c6c <etharp_output+0x24>
 8014c5e:	4b73      	ldr	r3, [pc, #460]	; (8014e2c <etharp_output+0x1e4>)
 8014c60:	f240 321e 	movw	r2, #798	; 0x31e
 8014c64:	4972      	ldr	r1, [pc, #456]	; (8014e30 <etharp_output+0x1e8>)
 8014c66:	4873      	ldr	r0, [pc, #460]	; (8014e34 <etharp_output+0x1ec>)
 8014c68:	f002 fa72 	bl	8017150 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d106      	bne.n	8014c80 <etharp_output+0x38>
 8014c72:	4b6e      	ldr	r3, [pc, #440]	; (8014e2c <etharp_output+0x1e4>)
 8014c74:	f240 321f 	movw	r2, #799	; 0x31f
 8014c78:	496f      	ldr	r1, [pc, #444]	; (8014e38 <etharp_output+0x1f0>)
 8014c7a:	486e      	ldr	r0, [pc, #440]	; (8014e34 <etharp_output+0x1ec>)
 8014c7c:	f002 fa68 	bl	8017150 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d106      	bne.n	8014c94 <etharp_output+0x4c>
 8014c86:	4b69      	ldr	r3, [pc, #420]	; (8014e2c <etharp_output+0x1e4>)
 8014c88:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014c8c:	496b      	ldr	r1, [pc, #428]	; (8014e3c <etharp_output+0x1f4>)
 8014c8e:	4869      	ldr	r0, [pc, #420]	; (8014e34 <etharp_output+0x1ec>)
 8014c90:	f002 fa5e 	bl	8017150 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	68f9      	ldr	r1, [r7, #12]
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f000 fef8 	bl	8015a90 <ip4_addr_isbroadcast_u32>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d002      	beq.n	8014cac <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014ca6:	4b66      	ldr	r3, [pc, #408]	; (8014e40 <etharp_output+0x1f8>)
 8014ca8:	61fb      	str	r3, [r7, #28]
 8014caa:	e0af      	b.n	8014e0c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014cb4:	2be0      	cmp	r3, #224	; 0xe0
 8014cb6:	d118      	bne.n	8014cea <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014cb8:	2301      	movs	r3, #1
 8014cba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014cc0:	235e      	movs	r3, #94	; 0x5e
 8014cc2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	3301      	adds	r3, #1
 8014cc8:	781b      	ldrb	r3, [r3, #0]
 8014cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cce:	b2db      	uxtb	r3, r3
 8014cd0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	3302      	adds	r3, #2
 8014cd6:	781b      	ldrb	r3, [r3, #0]
 8014cd8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	3303      	adds	r3, #3
 8014cde:	781b      	ldrb	r3, [r3, #0]
 8014ce0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014ce2:	f107 0310 	add.w	r3, r7, #16
 8014ce6:	61fb      	str	r3, [r7, #28]
 8014ce8:	e090      	b.n	8014e0c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	681a      	ldr	r2, [r3, #0]
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	3304      	adds	r3, #4
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	405a      	eors	r2, r3
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	3308      	adds	r3, #8
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	4013      	ands	r3, r2
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d012      	beq.n	8014d28 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014d08:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014d0c:	4293      	cmp	r3, r2
 8014d0e:	d00b      	beq.n	8014d28 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	330c      	adds	r3, #12
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d003      	beq.n	8014d22 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	330c      	adds	r3, #12
 8014d1e:	61bb      	str	r3, [r7, #24]
 8014d20:	e002      	b.n	8014d28 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014d22:	f06f 0303 	mvn.w	r3, #3
 8014d26:	e07d      	b.n	8014e24 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014d28:	4b46      	ldr	r3, [pc, #280]	; (8014e44 <etharp_output+0x1fc>)
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	4619      	mov	r1, r3
 8014d2e:	4a46      	ldr	r2, [pc, #280]	; (8014e48 <etharp_output+0x200>)
 8014d30:	460b      	mov	r3, r1
 8014d32:	005b      	lsls	r3, r3, #1
 8014d34:	440b      	add	r3, r1
 8014d36:	00db      	lsls	r3, r3, #3
 8014d38:	4413      	add	r3, r2
 8014d3a:	3314      	adds	r3, #20
 8014d3c:	781b      	ldrb	r3, [r3, #0]
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	d925      	bls.n	8014d8e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014d42:	4b40      	ldr	r3, [pc, #256]	; (8014e44 <etharp_output+0x1fc>)
 8014d44:	781b      	ldrb	r3, [r3, #0]
 8014d46:	4619      	mov	r1, r3
 8014d48:	4a3f      	ldr	r2, [pc, #252]	; (8014e48 <etharp_output+0x200>)
 8014d4a:	460b      	mov	r3, r1
 8014d4c:	005b      	lsls	r3, r3, #1
 8014d4e:	440b      	add	r3, r1
 8014d50:	00db      	lsls	r3, r3, #3
 8014d52:	4413      	add	r3, r2
 8014d54:	3308      	adds	r3, #8
 8014d56:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014d58:	68fa      	ldr	r2, [r7, #12]
 8014d5a:	429a      	cmp	r2, r3
 8014d5c:	d117      	bne.n	8014d8e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014d5e:	69bb      	ldr	r3, [r7, #24]
 8014d60:	681a      	ldr	r2, [r3, #0]
 8014d62:	4b38      	ldr	r3, [pc, #224]	; (8014e44 <etharp_output+0x1fc>)
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	4618      	mov	r0, r3
 8014d68:	4937      	ldr	r1, [pc, #220]	; (8014e48 <etharp_output+0x200>)
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	005b      	lsls	r3, r3, #1
 8014d6e:	4403      	add	r3, r0
 8014d70:	00db      	lsls	r3, r3, #3
 8014d72:	440b      	add	r3, r1
 8014d74:	3304      	adds	r3, #4
 8014d76:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014d78:	429a      	cmp	r2, r3
 8014d7a:	d108      	bne.n	8014d8e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014d7c:	4b31      	ldr	r3, [pc, #196]	; (8014e44 <etharp_output+0x1fc>)
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	461a      	mov	r2, r3
 8014d82:	68b9      	ldr	r1, [r7, #8]
 8014d84:	68f8      	ldr	r0, [r7, #12]
 8014d86:	f7ff fec5 	bl	8014b14 <etharp_output_to_arp_index>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	e04a      	b.n	8014e24 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014d8e:	2300      	movs	r3, #0
 8014d90:	75fb      	strb	r3, [r7, #23]
 8014d92:	e031      	b.n	8014df8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014d94:	7dfa      	ldrb	r2, [r7, #23]
 8014d96:	492c      	ldr	r1, [pc, #176]	; (8014e48 <etharp_output+0x200>)
 8014d98:	4613      	mov	r3, r2
 8014d9a:	005b      	lsls	r3, r3, #1
 8014d9c:	4413      	add	r3, r2
 8014d9e:	00db      	lsls	r3, r3, #3
 8014da0:	440b      	add	r3, r1
 8014da2:	3314      	adds	r3, #20
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	2b01      	cmp	r3, #1
 8014da8:	d923      	bls.n	8014df2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014daa:	7dfa      	ldrb	r2, [r7, #23]
 8014dac:	4926      	ldr	r1, [pc, #152]	; (8014e48 <etharp_output+0x200>)
 8014dae:	4613      	mov	r3, r2
 8014db0:	005b      	lsls	r3, r3, #1
 8014db2:	4413      	add	r3, r2
 8014db4:	00db      	lsls	r3, r3, #3
 8014db6:	440b      	add	r3, r1
 8014db8:	3308      	adds	r3, #8
 8014dba:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014dbc:	68fa      	ldr	r2, [r7, #12]
 8014dbe:	429a      	cmp	r2, r3
 8014dc0:	d117      	bne.n	8014df2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014dc2:	69bb      	ldr	r3, [r7, #24]
 8014dc4:	6819      	ldr	r1, [r3, #0]
 8014dc6:	7dfa      	ldrb	r2, [r7, #23]
 8014dc8:	481f      	ldr	r0, [pc, #124]	; (8014e48 <etharp_output+0x200>)
 8014dca:	4613      	mov	r3, r2
 8014dcc:	005b      	lsls	r3, r3, #1
 8014dce:	4413      	add	r3, r2
 8014dd0:	00db      	lsls	r3, r3, #3
 8014dd2:	4403      	add	r3, r0
 8014dd4:	3304      	adds	r3, #4
 8014dd6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014dd8:	4299      	cmp	r1, r3
 8014dda:	d10a      	bne.n	8014df2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014ddc:	4a19      	ldr	r2, [pc, #100]	; (8014e44 <etharp_output+0x1fc>)
 8014dde:	7dfb      	ldrb	r3, [r7, #23]
 8014de0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014de2:	7dfb      	ldrb	r3, [r7, #23]
 8014de4:	461a      	mov	r2, r3
 8014de6:	68b9      	ldr	r1, [r7, #8]
 8014de8:	68f8      	ldr	r0, [r7, #12]
 8014dea:	f7ff fe93 	bl	8014b14 <etharp_output_to_arp_index>
 8014dee:	4603      	mov	r3, r0
 8014df0:	e018      	b.n	8014e24 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014df2:	7dfb      	ldrb	r3, [r7, #23]
 8014df4:	3301      	adds	r3, #1
 8014df6:	75fb      	strb	r3, [r7, #23]
 8014df8:	7dfb      	ldrb	r3, [r7, #23]
 8014dfa:	2b09      	cmp	r3, #9
 8014dfc:	d9ca      	bls.n	8014d94 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014dfe:	68ba      	ldr	r2, [r7, #8]
 8014e00:	69b9      	ldr	r1, [r7, #24]
 8014e02:	68f8      	ldr	r0, [r7, #12]
 8014e04:	f000 f822 	bl	8014e4c <etharp_query>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	e00b      	b.n	8014e24 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014e12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014e16:	9300      	str	r3, [sp, #0]
 8014e18:	69fb      	ldr	r3, [r7, #28]
 8014e1a:	68b9      	ldr	r1, [r7, #8]
 8014e1c:	68f8      	ldr	r0, [r7, #12]
 8014e1e:	f001 fd45 	bl	80168ac <ethernet_output>
 8014e22:	4603      	mov	r3, r0
}
 8014e24:	4618      	mov	r0, r3
 8014e26:	3720      	adds	r7, #32
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}
 8014e2c:	0801ae14 	.word	0x0801ae14
 8014e30:	0801af64 	.word	0x0801af64
 8014e34:	0801ae8c 	.word	0x0801ae8c
 8014e38:	0801afb4 	.word	0x0801afb4
 8014e3c:	0801af54 	.word	0x0801af54
 8014e40:	0801b610 	.word	0x0801b610
 8014e44:	2000d458 	.word	0x2000d458
 8014e48:	2000d368 	.word	0x2000d368

08014e4c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b08c      	sub	sp, #48	; 0x30
 8014e50:	af02      	add	r7, sp, #8
 8014e52:	60f8      	str	r0, [r7, #12]
 8014e54:	60b9      	str	r1, [r7, #8]
 8014e56:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	3326      	adds	r3, #38	; 0x26
 8014e5c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014e5e:	23ff      	movs	r3, #255	; 0xff
 8014e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014e64:	2300      	movs	r3, #0
 8014e66:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e68:	68bb      	ldr	r3, [r7, #8]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	68f9      	ldr	r1, [r7, #12]
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f000 fe0e 	bl	8015a90 <ip4_addr_isbroadcast_u32>
 8014e74:	4603      	mov	r3, r0
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d10c      	bne.n	8014e94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014e7a:	68bb      	ldr	r3, [r7, #8]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e82:	2be0      	cmp	r3, #224	; 0xe0
 8014e84:	d006      	beq.n	8014e94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014e86:	68bb      	ldr	r3, [r7, #8]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d003      	beq.n	8014e94 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014e8c:	68bb      	ldr	r3, [r7, #8]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d102      	bne.n	8014e9a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014e94:	f06f 030f 	mvn.w	r3, #15
 8014e98:	e101      	b.n	801509e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014e9a:	68fa      	ldr	r2, [r7, #12]
 8014e9c:	2101      	movs	r1, #1
 8014e9e:	68b8      	ldr	r0, [r7, #8]
 8014ea0:	f7ff fb60 	bl	8014564 <etharp_find_entry>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014ea8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	da02      	bge.n	8014eb6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014eb0:	8a7b      	ldrh	r3, [r7, #18]
 8014eb2:	b25b      	sxtb	r3, r3
 8014eb4:	e0f3      	b.n	801509e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014eb6:	8a7b      	ldrh	r3, [r7, #18]
 8014eb8:	2b7e      	cmp	r3, #126	; 0x7e
 8014eba:	d906      	bls.n	8014eca <etharp_query+0x7e>
 8014ebc:	4b7a      	ldr	r3, [pc, #488]	; (80150a8 <etharp_query+0x25c>)
 8014ebe:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014ec2:	497a      	ldr	r1, [pc, #488]	; (80150ac <etharp_query+0x260>)
 8014ec4:	487a      	ldr	r0, [pc, #488]	; (80150b0 <etharp_query+0x264>)
 8014ec6:	f002 f943 	bl	8017150 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014eca:	8a7b      	ldrh	r3, [r7, #18]
 8014ecc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014ece:	7c7a      	ldrb	r2, [r7, #17]
 8014ed0:	4978      	ldr	r1, [pc, #480]	; (80150b4 <etharp_query+0x268>)
 8014ed2:	4613      	mov	r3, r2
 8014ed4:	005b      	lsls	r3, r3, #1
 8014ed6:	4413      	add	r3, r2
 8014ed8:	00db      	lsls	r3, r3, #3
 8014eda:	440b      	add	r3, r1
 8014edc:	3314      	adds	r3, #20
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d115      	bne.n	8014f10 <etharp_query+0xc4>
    is_new_entry = 1;
 8014ee4:	2301      	movs	r3, #1
 8014ee6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014ee8:	7c7a      	ldrb	r2, [r7, #17]
 8014eea:	4972      	ldr	r1, [pc, #456]	; (80150b4 <etharp_query+0x268>)
 8014eec:	4613      	mov	r3, r2
 8014eee:	005b      	lsls	r3, r3, #1
 8014ef0:	4413      	add	r3, r2
 8014ef2:	00db      	lsls	r3, r3, #3
 8014ef4:	440b      	add	r3, r1
 8014ef6:	3314      	adds	r3, #20
 8014ef8:	2201      	movs	r2, #1
 8014efa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014efc:	7c7a      	ldrb	r2, [r7, #17]
 8014efe:	496d      	ldr	r1, [pc, #436]	; (80150b4 <etharp_query+0x268>)
 8014f00:	4613      	mov	r3, r2
 8014f02:	005b      	lsls	r3, r3, #1
 8014f04:	4413      	add	r3, r2
 8014f06:	00db      	lsls	r3, r3, #3
 8014f08:	440b      	add	r3, r1
 8014f0a:	3308      	adds	r3, #8
 8014f0c:	68fa      	ldr	r2, [r7, #12]
 8014f0e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014f10:	7c7a      	ldrb	r2, [r7, #17]
 8014f12:	4968      	ldr	r1, [pc, #416]	; (80150b4 <etharp_query+0x268>)
 8014f14:	4613      	mov	r3, r2
 8014f16:	005b      	lsls	r3, r3, #1
 8014f18:	4413      	add	r3, r2
 8014f1a:	00db      	lsls	r3, r3, #3
 8014f1c:	440b      	add	r3, r1
 8014f1e:	3314      	adds	r3, #20
 8014f20:	781b      	ldrb	r3, [r3, #0]
 8014f22:	2b01      	cmp	r3, #1
 8014f24:	d011      	beq.n	8014f4a <etharp_query+0xfe>
 8014f26:	7c7a      	ldrb	r2, [r7, #17]
 8014f28:	4962      	ldr	r1, [pc, #392]	; (80150b4 <etharp_query+0x268>)
 8014f2a:	4613      	mov	r3, r2
 8014f2c:	005b      	lsls	r3, r3, #1
 8014f2e:	4413      	add	r3, r2
 8014f30:	00db      	lsls	r3, r3, #3
 8014f32:	440b      	add	r3, r1
 8014f34:	3314      	adds	r3, #20
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	2b01      	cmp	r3, #1
 8014f3a:	d806      	bhi.n	8014f4a <etharp_query+0xfe>
 8014f3c:	4b5a      	ldr	r3, [pc, #360]	; (80150a8 <etharp_query+0x25c>)
 8014f3e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014f42:	495d      	ldr	r1, [pc, #372]	; (80150b8 <etharp_query+0x26c>)
 8014f44:	485a      	ldr	r0, [pc, #360]	; (80150b0 <etharp_query+0x264>)
 8014f46:	f002 f903 	bl	8017150 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014f4a:	6a3b      	ldr	r3, [r7, #32]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d102      	bne.n	8014f56 <etharp_query+0x10a>
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d10c      	bne.n	8014f70 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014f56:	68b9      	ldr	r1, [r7, #8]
 8014f58:	68f8      	ldr	r0, [r7, #12]
 8014f5a:	f000 f963 	bl	8015224 <etharp_request>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d102      	bne.n	8014f70 <etharp_query+0x124>
      return result;
 8014f6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014f6e:	e096      	b.n	801509e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d106      	bne.n	8014f84 <etharp_query+0x138>
 8014f76:	4b4c      	ldr	r3, [pc, #304]	; (80150a8 <etharp_query+0x25c>)
 8014f78:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014f7c:	494f      	ldr	r1, [pc, #316]	; (80150bc <etharp_query+0x270>)
 8014f7e:	484c      	ldr	r0, [pc, #304]	; (80150b0 <etharp_query+0x264>)
 8014f80:	f002 f8e6 	bl	8017150 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014f84:	7c7a      	ldrb	r2, [r7, #17]
 8014f86:	494b      	ldr	r1, [pc, #300]	; (80150b4 <etharp_query+0x268>)
 8014f88:	4613      	mov	r3, r2
 8014f8a:	005b      	lsls	r3, r3, #1
 8014f8c:	4413      	add	r3, r2
 8014f8e:	00db      	lsls	r3, r3, #3
 8014f90:	440b      	add	r3, r1
 8014f92:	3314      	adds	r3, #20
 8014f94:	781b      	ldrb	r3, [r3, #0]
 8014f96:	2b01      	cmp	r3, #1
 8014f98:	d917      	bls.n	8014fca <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014f9a:	4a49      	ldr	r2, [pc, #292]	; (80150c0 <etharp_query+0x274>)
 8014f9c:	7c7b      	ldrb	r3, [r7, #17]
 8014f9e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014fa0:	7c7a      	ldrb	r2, [r7, #17]
 8014fa2:	4613      	mov	r3, r2
 8014fa4:	005b      	lsls	r3, r3, #1
 8014fa6:	4413      	add	r3, r2
 8014fa8:	00db      	lsls	r3, r3, #3
 8014faa:	3308      	adds	r3, #8
 8014fac:	4a41      	ldr	r2, [pc, #260]	; (80150b4 <etharp_query+0x268>)
 8014fae:	4413      	add	r3, r2
 8014fb0:	3304      	adds	r3, #4
 8014fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014fb6:	9200      	str	r2, [sp, #0]
 8014fb8:	697a      	ldr	r2, [r7, #20]
 8014fba:	6879      	ldr	r1, [r7, #4]
 8014fbc:	68f8      	ldr	r0, [r7, #12]
 8014fbe:	f001 fc75 	bl	80168ac <ethernet_output>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014fc8:	e067      	b.n	801509a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014fca:	7c7a      	ldrb	r2, [r7, #17]
 8014fcc:	4939      	ldr	r1, [pc, #228]	; (80150b4 <etharp_query+0x268>)
 8014fce:	4613      	mov	r3, r2
 8014fd0:	005b      	lsls	r3, r3, #1
 8014fd2:	4413      	add	r3, r2
 8014fd4:	00db      	lsls	r3, r3, #3
 8014fd6:	440b      	add	r3, r1
 8014fd8:	3314      	adds	r3, #20
 8014fda:	781b      	ldrb	r3, [r3, #0]
 8014fdc:	2b01      	cmp	r3, #1
 8014fde:	d15c      	bne.n	801509a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014fe8:	e01c      	b.n	8015024 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014fea:	69fb      	ldr	r3, [r7, #28]
 8014fec:	895a      	ldrh	r2, [r3, #10]
 8014fee:	69fb      	ldr	r3, [r7, #28]
 8014ff0:	891b      	ldrh	r3, [r3, #8]
 8014ff2:	429a      	cmp	r2, r3
 8014ff4:	d10a      	bne.n	801500c <etharp_query+0x1c0>
 8014ff6:	69fb      	ldr	r3, [r7, #28]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d006      	beq.n	801500c <etharp_query+0x1c0>
 8014ffe:	4b2a      	ldr	r3, [pc, #168]	; (80150a8 <etharp_query+0x25c>)
 8015000:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015004:	492f      	ldr	r1, [pc, #188]	; (80150c4 <etharp_query+0x278>)
 8015006:	482a      	ldr	r0, [pc, #168]	; (80150b0 <etharp_query+0x264>)
 8015008:	f002 f8a2 	bl	8017150 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801500c:	69fb      	ldr	r3, [r7, #28]
 801500e:	7b1b      	ldrb	r3, [r3, #12]
 8015010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015014:	2b00      	cmp	r3, #0
 8015016:	d002      	beq.n	801501e <etharp_query+0x1d2>
        copy_needed = 1;
 8015018:	2301      	movs	r3, #1
 801501a:	61bb      	str	r3, [r7, #24]
        break;
 801501c:	e005      	b.n	801502a <etharp_query+0x1de>
      }
      p = p->next;
 801501e:	69fb      	ldr	r3, [r7, #28]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015024:	69fb      	ldr	r3, [r7, #28]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d1df      	bne.n	8014fea <etharp_query+0x19e>
    }
    if (copy_needed) {
 801502a:	69bb      	ldr	r3, [r7, #24]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d007      	beq.n	8015040 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015030:	687a      	ldr	r2, [r7, #4]
 8015032:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015036:	200e      	movs	r0, #14
 8015038:	f7f8 fb68 	bl	800d70c <pbuf_clone>
 801503c:	61f8      	str	r0, [r7, #28]
 801503e:	e004      	b.n	801504a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015044:	69f8      	ldr	r0, [r7, #28]
 8015046:	f7f8 f98f 	bl	800d368 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801504a:	69fb      	ldr	r3, [r7, #28]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d021      	beq.n	8015094 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015050:	7c7a      	ldrb	r2, [r7, #17]
 8015052:	4918      	ldr	r1, [pc, #96]	; (80150b4 <etharp_query+0x268>)
 8015054:	4613      	mov	r3, r2
 8015056:	005b      	lsls	r3, r3, #1
 8015058:	4413      	add	r3, r2
 801505a:	00db      	lsls	r3, r3, #3
 801505c:	440b      	add	r3, r1
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d00a      	beq.n	801507a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015064:	7c7a      	ldrb	r2, [r7, #17]
 8015066:	4913      	ldr	r1, [pc, #76]	; (80150b4 <etharp_query+0x268>)
 8015068:	4613      	mov	r3, r2
 801506a:	005b      	lsls	r3, r3, #1
 801506c:	4413      	add	r3, r2
 801506e:	00db      	lsls	r3, r3, #3
 8015070:	440b      	add	r3, r1
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	4618      	mov	r0, r3
 8015076:	f7f8 f8d1 	bl	800d21c <pbuf_free>
      }
      arp_table[i].q = p;
 801507a:	7c7a      	ldrb	r2, [r7, #17]
 801507c:	490d      	ldr	r1, [pc, #52]	; (80150b4 <etharp_query+0x268>)
 801507e:	4613      	mov	r3, r2
 8015080:	005b      	lsls	r3, r3, #1
 8015082:	4413      	add	r3, r2
 8015084:	00db      	lsls	r3, r3, #3
 8015086:	440b      	add	r3, r1
 8015088:	69fa      	ldr	r2, [r7, #28]
 801508a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801508c:	2300      	movs	r3, #0
 801508e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015092:	e002      	b.n	801509a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015094:	23ff      	movs	r3, #255	; 0xff
 8015096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801509a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3728      	adds	r7, #40	; 0x28
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}
 80150a6:	bf00      	nop
 80150a8:	0801ae14 	.word	0x0801ae14
 80150ac:	0801afc0 	.word	0x0801afc0
 80150b0:	0801ae8c 	.word	0x0801ae8c
 80150b4:	2000d368 	.word	0x2000d368
 80150b8:	0801afd0 	.word	0x0801afd0
 80150bc:	0801afb4 	.word	0x0801afb4
 80150c0:	2000d458 	.word	0x2000d458
 80150c4:	0801aff8 	.word	0x0801aff8

080150c8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b08a      	sub	sp, #40	; 0x28
 80150cc:	af02      	add	r7, sp, #8
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	607a      	str	r2, [r7, #4]
 80150d4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80150d6:	2300      	movs	r3, #0
 80150d8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d106      	bne.n	80150ee <etharp_raw+0x26>
 80150e0:	4b3a      	ldr	r3, [pc, #232]	; (80151cc <etharp_raw+0x104>)
 80150e2:	f240 4257 	movw	r2, #1111	; 0x457
 80150e6:	493a      	ldr	r1, [pc, #232]	; (80151d0 <etharp_raw+0x108>)
 80150e8:	483a      	ldr	r0, [pc, #232]	; (80151d4 <etharp_raw+0x10c>)
 80150ea:	f002 f831 	bl	8017150 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80150ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80150f2:	211c      	movs	r1, #28
 80150f4:	200e      	movs	r0, #14
 80150f6:	f7f7 fdad 	bl	800cc54 <pbuf_alloc>
 80150fa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80150fc:	69bb      	ldr	r3, [r7, #24]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d102      	bne.n	8015108 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015102:	f04f 33ff 	mov.w	r3, #4294967295
 8015106:	e05d      	b.n	80151c4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015108:	69bb      	ldr	r3, [r7, #24]
 801510a:	895b      	ldrh	r3, [r3, #10]
 801510c:	2b1b      	cmp	r3, #27
 801510e:	d806      	bhi.n	801511e <etharp_raw+0x56>
 8015110:	4b2e      	ldr	r3, [pc, #184]	; (80151cc <etharp_raw+0x104>)
 8015112:	f240 4262 	movw	r2, #1122	; 0x462
 8015116:	4930      	ldr	r1, [pc, #192]	; (80151d8 <etharp_raw+0x110>)
 8015118:	482e      	ldr	r0, [pc, #184]	; (80151d4 <etharp_raw+0x10c>)
 801511a:	f002 f819 	bl	8017150 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801511e:	69bb      	ldr	r3, [r7, #24]
 8015120:	685b      	ldr	r3, [r3, #4]
 8015122:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015124:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015126:	4618      	mov	r0, r3
 8015128:	f7f6 fd30 	bl	800bb8c <lwip_htons>
 801512c:	4603      	mov	r3, r0
 801512e:	461a      	mov	r2, r3
 8015130:	697b      	ldr	r3, [r7, #20]
 8015132:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801513a:	2b06      	cmp	r3, #6
 801513c:	d006      	beq.n	801514c <etharp_raw+0x84>
 801513e:	4b23      	ldr	r3, [pc, #140]	; (80151cc <etharp_raw+0x104>)
 8015140:	f240 4269 	movw	r2, #1129	; 0x469
 8015144:	4925      	ldr	r1, [pc, #148]	; (80151dc <etharp_raw+0x114>)
 8015146:	4823      	ldr	r0, [pc, #140]	; (80151d4 <etharp_raw+0x10c>)
 8015148:	f002 f802 	bl	8017150 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801514c:	697b      	ldr	r3, [r7, #20]
 801514e:	3308      	adds	r3, #8
 8015150:	2206      	movs	r2, #6
 8015152:	6839      	ldr	r1, [r7, #0]
 8015154:	4618      	mov	r0, r3
 8015156:	f001 ff05 	bl	8016f64 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801515a:	697b      	ldr	r3, [r7, #20]
 801515c:	3312      	adds	r3, #18
 801515e:	2206      	movs	r2, #6
 8015160:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015162:	4618      	mov	r0, r3
 8015164:	f001 fefe 	bl	8016f64 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015168:	697b      	ldr	r3, [r7, #20]
 801516a:	330e      	adds	r3, #14
 801516c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801516e:	6812      	ldr	r2, [r2, #0]
 8015170:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015172:	697b      	ldr	r3, [r7, #20]
 8015174:	3318      	adds	r3, #24
 8015176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015178:	6812      	ldr	r2, [r2, #0]
 801517a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801517c:	697b      	ldr	r3, [r7, #20]
 801517e:	2200      	movs	r2, #0
 8015180:	701a      	strb	r2, [r3, #0]
 8015182:	2200      	movs	r2, #0
 8015184:	f042 0201 	orr.w	r2, r2, #1
 8015188:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801518a:	697b      	ldr	r3, [r7, #20]
 801518c:	2200      	movs	r2, #0
 801518e:	f042 0208 	orr.w	r2, r2, #8
 8015192:	709a      	strb	r2, [r3, #2]
 8015194:	2200      	movs	r2, #0
 8015196:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015198:	697b      	ldr	r3, [r7, #20]
 801519a:	2206      	movs	r2, #6
 801519c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801519e:	697b      	ldr	r3, [r7, #20]
 80151a0:	2204      	movs	r2, #4
 80151a2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80151a4:	f640 0306 	movw	r3, #2054	; 0x806
 80151a8:	9300      	str	r3, [sp, #0]
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	68ba      	ldr	r2, [r7, #8]
 80151ae:	69b9      	ldr	r1, [r7, #24]
 80151b0:	68f8      	ldr	r0, [r7, #12]
 80151b2:	f001 fb7b 	bl	80168ac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80151b6:	69b8      	ldr	r0, [r7, #24]
 80151b8:	f7f8 f830 	bl	800d21c <pbuf_free>
  p = NULL;
 80151bc:	2300      	movs	r3, #0
 80151be:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80151c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	3720      	adds	r7, #32
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}
 80151cc:	0801ae14 	.word	0x0801ae14
 80151d0:	0801af64 	.word	0x0801af64
 80151d4:	0801ae8c 	.word	0x0801ae8c
 80151d8:	0801b014 	.word	0x0801b014
 80151dc:	0801b048 	.word	0x0801b048

080151e0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b088      	sub	sp, #32
 80151e4:	af04      	add	r7, sp, #16
 80151e6:	60f8      	str	r0, [r7, #12]
 80151e8:	60b9      	str	r1, [r7, #8]
 80151ea:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80151fc:	2201      	movs	r2, #1
 80151fe:	9203      	str	r2, [sp, #12]
 8015200:	68ba      	ldr	r2, [r7, #8]
 8015202:	9202      	str	r2, [sp, #8]
 8015204:	4a06      	ldr	r2, [pc, #24]	; (8015220 <etharp_request_dst+0x40>)
 8015206:	9201      	str	r2, [sp, #4]
 8015208:	9300      	str	r3, [sp, #0]
 801520a:	4603      	mov	r3, r0
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	68f8      	ldr	r0, [r7, #12]
 8015210:	f7ff ff5a 	bl	80150c8 <etharp_raw>
 8015214:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015216:	4618      	mov	r0, r3
 8015218:	3710      	adds	r7, #16
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}
 801521e:	bf00      	nop
 8015220:	0801b618 	.word	0x0801b618

08015224 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b082      	sub	sp, #8
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
 801522c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801522e:	4a05      	ldr	r2, [pc, #20]	; (8015244 <etharp_request+0x20>)
 8015230:	6839      	ldr	r1, [r7, #0]
 8015232:	6878      	ldr	r0, [r7, #4]
 8015234:	f7ff ffd4 	bl	80151e0 <etharp_request_dst>
 8015238:	4603      	mov	r3, r0
}
 801523a:	4618      	mov	r0, r3
 801523c:	3708      	adds	r7, #8
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}
 8015242:	bf00      	nop
 8015244:	0801b610 	.word	0x0801b610

08015248 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b08e      	sub	sp, #56	; 0x38
 801524c:	af04      	add	r7, sp, #16
 801524e:	6078      	str	r0, [r7, #4]
 8015250:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015252:	4b79      	ldr	r3, [pc, #484]	; (8015438 <icmp_input+0x1f0>)
 8015254:	689b      	ldr	r3, [r3, #8]
 8015256:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525a:	781b      	ldrb	r3, [r3, #0]
 801525c:	f003 030f 	and.w	r3, r3, #15
 8015260:	b2db      	uxtb	r3, r3
 8015262:	009b      	lsls	r3, r3, #2
 8015264:	b2db      	uxtb	r3, r3
 8015266:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015268:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801526a:	2b13      	cmp	r3, #19
 801526c:	f240 80cd 	bls.w	801540a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	895b      	ldrh	r3, [r3, #10]
 8015274:	2b03      	cmp	r3, #3
 8015276:	f240 80ca 	bls.w	801540e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	685b      	ldr	r3, [r3, #4]
 801527e:	781b      	ldrb	r3, [r3, #0]
 8015280:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015284:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015288:	2b00      	cmp	r3, #0
 801528a:	f000 80b7 	beq.w	80153fc <icmp_input+0x1b4>
 801528e:	2b08      	cmp	r3, #8
 8015290:	f040 80b7 	bne.w	8015402 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015294:	4b69      	ldr	r3, [pc, #420]	; (801543c <icmp_input+0x1f4>)
 8015296:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015298:	4b67      	ldr	r3, [pc, #412]	; (8015438 <icmp_input+0x1f0>)
 801529a:	695b      	ldr	r3, [r3, #20]
 801529c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152a0:	2be0      	cmp	r3, #224	; 0xe0
 80152a2:	f000 80bb 	beq.w	801541c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80152a6:	4b64      	ldr	r3, [pc, #400]	; (8015438 <icmp_input+0x1f0>)
 80152a8:	695b      	ldr	r3, [r3, #20]
 80152aa:	4a63      	ldr	r2, [pc, #396]	; (8015438 <icmp_input+0x1f0>)
 80152ac:	6812      	ldr	r2, [r2, #0]
 80152ae:	4611      	mov	r1, r2
 80152b0:	4618      	mov	r0, r3
 80152b2:	f000 fbed 	bl	8015a90 <ip4_addr_isbroadcast_u32>
 80152b6:	4603      	mov	r3, r0
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	f040 80b1 	bne.w	8015420 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	891b      	ldrh	r3, [r3, #8]
 80152c2:	2b07      	cmp	r3, #7
 80152c4:	f240 80a5 	bls.w	8015412 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80152c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80152ca:	330e      	adds	r3, #14
 80152cc:	4619      	mov	r1, r3
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f7f7 ff0e 	bl	800d0f0 <pbuf_add_header>
 80152d4:	4603      	mov	r3, r0
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d04b      	beq.n	8015372 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	891a      	ldrh	r2, [r3, #8]
 80152de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80152e0:	4413      	add	r3, r2
 80152e2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	891b      	ldrh	r3, [r3, #8]
 80152e8:	8b7a      	ldrh	r2, [r7, #26]
 80152ea:	429a      	cmp	r2, r3
 80152ec:	f0c0 809a 	bcc.w	8015424 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80152f0:	8b7b      	ldrh	r3, [r7, #26]
 80152f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80152f6:	4619      	mov	r1, r3
 80152f8:	200e      	movs	r0, #14
 80152fa:	f7f7 fcab 	bl	800cc54 <pbuf_alloc>
 80152fe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015300:	697b      	ldr	r3, [r7, #20]
 8015302:	2b00      	cmp	r3, #0
 8015304:	f000 8090 	beq.w	8015428 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015308:	697b      	ldr	r3, [r7, #20]
 801530a:	895b      	ldrh	r3, [r3, #10]
 801530c:	461a      	mov	r2, r3
 801530e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015310:	3308      	adds	r3, #8
 8015312:	429a      	cmp	r2, r3
 8015314:	d203      	bcs.n	801531e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015316:	6978      	ldr	r0, [r7, #20]
 8015318:	f7f7 ff80 	bl	800d21c <pbuf_free>
          goto icmperr;
 801531c:	e085      	b.n	801542a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801531e:	697b      	ldr	r3, [r7, #20]
 8015320:	685b      	ldr	r3, [r3, #4]
 8015322:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015326:	4618      	mov	r0, r3
 8015328:	f001 fe1c 	bl	8016f64 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801532c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801532e:	4619      	mov	r1, r3
 8015330:	6978      	ldr	r0, [r7, #20]
 8015332:	f7f7 feed 	bl	800d110 <pbuf_remove_header>
 8015336:	4603      	mov	r3, r0
 8015338:	2b00      	cmp	r3, #0
 801533a:	d009      	beq.n	8015350 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801533c:	4b40      	ldr	r3, [pc, #256]	; (8015440 <icmp_input+0x1f8>)
 801533e:	22b6      	movs	r2, #182	; 0xb6
 8015340:	4940      	ldr	r1, [pc, #256]	; (8015444 <icmp_input+0x1fc>)
 8015342:	4841      	ldr	r0, [pc, #260]	; (8015448 <icmp_input+0x200>)
 8015344:	f001 ff04 	bl	8017150 <iprintf>
          pbuf_free(r);
 8015348:	6978      	ldr	r0, [r7, #20]
 801534a:	f7f7 ff67 	bl	800d21c <pbuf_free>
          goto icmperr;
 801534e:	e06c      	b.n	801542a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015350:	6879      	ldr	r1, [r7, #4]
 8015352:	6978      	ldr	r0, [r7, #20]
 8015354:	f7f8 f896 	bl	800d484 <pbuf_copy>
 8015358:	4603      	mov	r3, r0
 801535a:	2b00      	cmp	r3, #0
 801535c:	d003      	beq.n	8015366 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801535e:	6978      	ldr	r0, [r7, #20]
 8015360:	f7f7 ff5c 	bl	800d21c <pbuf_free>
          goto icmperr;
 8015364:	e061      	b.n	801542a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f7f7 ff58 	bl	800d21c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801536c:	697b      	ldr	r3, [r7, #20]
 801536e:	607b      	str	r3, [r7, #4]
 8015370:	e00f      	b.n	8015392 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015372:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015374:	330e      	adds	r3, #14
 8015376:	4619      	mov	r1, r3
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	f7f7 fec9 	bl	800d110 <pbuf_remove_header>
 801537e:	4603      	mov	r3, r0
 8015380:	2b00      	cmp	r3, #0
 8015382:	d006      	beq.n	8015392 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015384:	4b2e      	ldr	r3, [pc, #184]	; (8015440 <icmp_input+0x1f8>)
 8015386:	22c7      	movs	r2, #199	; 0xc7
 8015388:	4930      	ldr	r1, [pc, #192]	; (801544c <icmp_input+0x204>)
 801538a:	482f      	ldr	r0, [pc, #188]	; (8015448 <icmp_input+0x200>)
 801538c:	f001 fee0 	bl	8017150 <iprintf>
          goto icmperr;
 8015390:	e04b      	b.n	801542a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	685b      	ldr	r3, [r3, #4]
 8015396:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801539a:	4619      	mov	r1, r3
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f7f7 fea7 	bl	800d0f0 <pbuf_add_header>
 80153a2:	4603      	mov	r3, r0
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d12b      	bne.n	8015400 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80153ae:	69fb      	ldr	r3, [r7, #28]
 80153b0:	681a      	ldr	r2, [r3, #0]
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80153b6:	4b20      	ldr	r3, [pc, #128]	; (8015438 <icmp_input+0x1f0>)
 80153b8:	691a      	ldr	r2, [r3, #16]
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80153be:	693b      	ldr	r3, [r7, #16]
 80153c0:	2200      	movs	r2, #0
 80153c2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80153c4:	693b      	ldr	r3, [r7, #16]
 80153c6:	2200      	movs	r2, #0
 80153c8:	709a      	strb	r2, [r3, #2]
 80153ca:	2200      	movs	r2, #0
 80153cc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	22ff      	movs	r2, #255	; 0xff
 80153d2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	2200      	movs	r2, #0
 80153d8:	729a      	strb	r2, [r3, #10]
 80153da:	2200      	movs	r2, #0
 80153dc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80153de:	683b      	ldr	r3, [r7, #0]
 80153e0:	9302      	str	r3, [sp, #8]
 80153e2:	2301      	movs	r3, #1
 80153e4:	9301      	str	r3, [sp, #4]
 80153e6:	2300      	movs	r3, #0
 80153e8:	9300      	str	r3, [sp, #0]
 80153ea:	23ff      	movs	r3, #255	; 0xff
 80153ec:	2200      	movs	r2, #0
 80153ee:	69f9      	ldr	r1, [r7, #28]
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f000 fa75 	bl	80158e0 <ip4_output_if>
 80153f6:	4603      	mov	r3, r0
 80153f8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80153fa:	e001      	b.n	8015400 <icmp_input+0x1b8>
      break;
 80153fc:	bf00      	nop
 80153fe:	e000      	b.n	8015402 <icmp_input+0x1ba>
      break;
 8015400:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015402:	6878      	ldr	r0, [r7, #4]
 8015404:	f7f7 ff0a 	bl	800d21c <pbuf_free>
  return;
 8015408:	e013      	b.n	8015432 <icmp_input+0x1ea>
    goto lenerr;
 801540a:	bf00      	nop
 801540c:	e002      	b.n	8015414 <icmp_input+0x1cc>
    goto lenerr;
 801540e:	bf00      	nop
 8015410:	e000      	b.n	8015414 <icmp_input+0x1cc>
        goto lenerr;
 8015412:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015414:	6878      	ldr	r0, [r7, #4]
 8015416:	f7f7 ff01 	bl	800d21c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801541a:	e00a      	b.n	8015432 <icmp_input+0x1ea>
        goto icmperr;
 801541c:	bf00      	nop
 801541e:	e004      	b.n	801542a <icmp_input+0x1e2>
        goto icmperr;
 8015420:	bf00      	nop
 8015422:	e002      	b.n	801542a <icmp_input+0x1e2>
          goto icmperr;
 8015424:	bf00      	nop
 8015426:	e000      	b.n	801542a <icmp_input+0x1e2>
          goto icmperr;
 8015428:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801542a:	6878      	ldr	r0, [r7, #4]
 801542c:	f7f7 fef6 	bl	800d21c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015430:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015432:	3728      	adds	r7, #40	; 0x28
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}
 8015438:	20009bb4 	.word	0x20009bb4
 801543c:	20009bc8 	.word	0x20009bc8
 8015440:	0801b08c 	.word	0x0801b08c
 8015444:	0801b0c4 	.word	0x0801b0c4
 8015448:	0801b0fc 	.word	0x0801b0fc
 801544c:	0801b124 	.word	0x0801b124

08015450 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b082      	sub	sp, #8
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
 8015458:	460b      	mov	r3, r1
 801545a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801545c:	78fb      	ldrb	r3, [r7, #3]
 801545e:	461a      	mov	r2, r3
 8015460:	2103      	movs	r1, #3
 8015462:	6878      	ldr	r0, [r7, #4]
 8015464:	f000 f814 	bl	8015490 <icmp_send_response>
}
 8015468:	bf00      	nop
 801546a:	3708      	adds	r7, #8
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}

08015470 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	460b      	mov	r3, r1
 801547a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801547c:	78fb      	ldrb	r3, [r7, #3]
 801547e:	461a      	mov	r2, r3
 8015480:	210b      	movs	r1, #11
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f000 f804 	bl	8015490 <icmp_send_response>
}
 8015488:	bf00      	nop
 801548a:	3708      	adds	r7, #8
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}

08015490 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b08c      	sub	sp, #48	; 0x30
 8015494:	af04      	add	r7, sp, #16
 8015496:	6078      	str	r0, [r7, #4]
 8015498:	460b      	mov	r3, r1
 801549a:	70fb      	strb	r3, [r7, #3]
 801549c:	4613      	mov	r3, r2
 801549e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80154a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154a4:	2124      	movs	r1, #36	; 0x24
 80154a6:	2022      	movs	r0, #34	; 0x22
 80154a8:	f7f7 fbd4 	bl	800cc54 <pbuf_alloc>
 80154ac:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80154ae:	69fb      	ldr	r3, [r7, #28]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d04c      	beq.n	801554e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80154b4:	69fb      	ldr	r3, [r7, #28]
 80154b6:	895b      	ldrh	r3, [r3, #10]
 80154b8:	2b23      	cmp	r3, #35	; 0x23
 80154ba:	d806      	bhi.n	80154ca <icmp_send_response+0x3a>
 80154bc:	4b26      	ldr	r3, [pc, #152]	; (8015558 <icmp_send_response+0xc8>)
 80154be:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80154c2:	4926      	ldr	r1, [pc, #152]	; (801555c <icmp_send_response+0xcc>)
 80154c4:	4826      	ldr	r0, [pc, #152]	; (8015560 <icmp_send_response+0xd0>)
 80154c6:	f001 fe43 	bl	8017150 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	685b      	ldr	r3, [r3, #4]
 80154ce:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80154d0:	69fb      	ldr	r3, [r7, #28]
 80154d2:	685b      	ldr	r3, [r3, #4]
 80154d4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	78fa      	ldrb	r2, [r7, #3]
 80154da:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80154dc:	697b      	ldr	r3, [r7, #20]
 80154de:	78ba      	ldrb	r2, [r7, #2]
 80154e0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	2200      	movs	r2, #0
 80154e6:	711a      	strb	r2, [r3, #4]
 80154e8:	2200      	movs	r2, #0
 80154ea:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	2200      	movs	r2, #0
 80154f0:	719a      	strb	r2, [r3, #6]
 80154f2:	2200      	movs	r2, #0
 80154f4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80154f6:	69fb      	ldr	r3, [r7, #28]
 80154f8:	685b      	ldr	r3, [r3, #4]
 80154fa:	f103 0008 	add.w	r0, r3, #8
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	685b      	ldr	r3, [r3, #4]
 8015502:	221c      	movs	r2, #28
 8015504:	4619      	mov	r1, r3
 8015506:	f001 fd2d 	bl	8016f64 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801550a:	69bb      	ldr	r3, [r7, #24]
 801550c:	68db      	ldr	r3, [r3, #12]
 801550e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015510:	f107 030c 	add.w	r3, r7, #12
 8015514:	4618      	mov	r0, r3
 8015516:	f000 f825 	bl	8015564 <ip4_route>
 801551a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801551c:	693b      	ldr	r3, [r7, #16]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d011      	beq.n	8015546 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	2200      	movs	r2, #0
 8015526:	709a      	strb	r2, [r3, #2]
 8015528:	2200      	movs	r2, #0
 801552a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801552c:	f107 020c 	add.w	r2, r7, #12
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	9302      	str	r3, [sp, #8]
 8015534:	2301      	movs	r3, #1
 8015536:	9301      	str	r3, [sp, #4]
 8015538:	2300      	movs	r3, #0
 801553a:	9300      	str	r3, [sp, #0]
 801553c:	23ff      	movs	r3, #255	; 0xff
 801553e:	2100      	movs	r1, #0
 8015540:	69f8      	ldr	r0, [r7, #28]
 8015542:	f000 f9cd 	bl	80158e0 <ip4_output_if>
  }
  pbuf_free(q);
 8015546:	69f8      	ldr	r0, [r7, #28]
 8015548:	f7f7 fe68 	bl	800d21c <pbuf_free>
 801554c:	e000      	b.n	8015550 <icmp_send_response+0xc0>
    return;
 801554e:	bf00      	nop
}
 8015550:	3720      	adds	r7, #32
 8015552:	46bd      	mov	sp, r7
 8015554:	bd80      	pop	{r7, pc}
 8015556:	bf00      	nop
 8015558:	0801b08c 	.word	0x0801b08c
 801555c:	0801b158 	.word	0x0801b158
 8015560:	0801b0fc 	.word	0x0801b0fc

08015564 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015564:	b480      	push	{r7}
 8015566:	b085      	sub	sp, #20
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801556c:	4b33      	ldr	r3, [pc, #204]	; (801563c <ip4_route+0xd8>)
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	60fb      	str	r3, [r7, #12]
 8015572:	e036      	b.n	80155e2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801557a:	f003 0301 	and.w	r3, r3, #1
 801557e:	b2db      	uxtb	r3, r3
 8015580:	2b00      	cmp	r3, #0
 8015582:	d02b      	beq.n	80155dc <ip4_route+0x78>
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801558a:	089b      	lsrs	r3, r3, #2
 801558c:	f003 0301 	and.w	r3, r3, #1
 8015590:	b2db      	uxtb	r3, r3
 8015592:	2b00      	cmp	r3, #0
 8015594:	d022      	beq.n	80155dc <ip4_route+0x78>
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	3304      	adds	r3, #4
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d01d      	beq.n	80155dc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	681a      	ldr	r2, [r3, #0]
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	3304      	adds	r3, #4
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	405a      	eors	r2, r3
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	3308      	adds	r3, #8
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	4013      	ands	r3, r2
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d101      	bne.n	80155bc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	e038      	b.n	801562e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155c2:	f003 0302 	and.w	r3, r3, #2
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d108      	bne.n	80155dc <ip4_route+0x78>
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681a      	ldr	r2, [r3, #0]
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	330c      	adds	r3, #12
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	429a      	cmp	r2, r3
 80155d6:	d101      	bne.n	80155dc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	e028      	b.n	801562e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	60fb      	str	r3, [r7, #12]
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d1c5      	bne.n	8015574 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80155e8:	4b15      	ldr	r3, [pc, #84]	; (8015640 <ip4_route+0xdc>)
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d01a      	beq.n	8015626 <ip4_route+0xc2>
 80155f0:	4b13      	ldr	r3, [pc, #76]	; (8015640 <ip4_route+0xdc>)
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155f8:	f003 0301 	and.w	r3, r3, #1
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d012      	beq.n	8015626 <ip4_route+0xc2>
 8015600:	4b0f      	ldr	r3, [pc, #60]	; (8015640 <ip4_route+0xdc>)
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015608:	f003 0304 	and.w	r3, r3, #4
 801560c:	2b00      	cmp	r3, #0
 801560e:	d00a      	beq.n	8015626 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015610:	4b0b      	ldr	r3, [pc, #44]	; (8015640 <ip4_route+0xdc>)
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	3304      	adds	r3, #4
 8015616:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015618:	2b00      	cmp	r3, #0
 801561a:	d004      	beq.n	8015626 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	b2db      	uxtb	r3, r3
 8015622:	2b7f      	cmp	r3, #127	; 0x7f
 8015624:	d101      	bne.n	801562a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015626:	2300      	movs	r3, #0
 8015628:	e001      	b.n	801562e <ip4_route+0xca>
  }

  return netif_default;
 801562a:	4b05      	ldr	r3, [pc, #20]	; (8015640 <ip4_route+0xdc>)
 801562c:	681b      	ldr	r3, [r3, #0]
}
 801562e:	4618      	mov	r0, r3
 8015630:	3714      	adds	r7, #20
 8015632:	46bd      	mov	sp, r7
 8015634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015638:	4770      	bx	lr
 801563a:	bf00      	nop
 801563c:	2000d2fc 	.word	0x2000d2fc
 8015640:	2000d300 	.word	0x2000d300

08015644 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b082      	sub	sp, #8
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015652:	f003 0301 	and.w	r3, r3, #1
 8015656:	b2db      	uxtb	r3, r3
 8015658:	2b00      	cmp	r3, #0
 801565a:	d016      	beq.n	801568a <ip4_input_accept+0x46>
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	3304      	adds	r3, #4
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d011      	beq.n	801568a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015666:	4b0b      	ldr	r3, [pc, #44]	; (8015694 <ip4_input_accept+0x50>)
 8015668:	695a      	ldr	r2, [r3, #20]
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	3304      	adds	r3, #4
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	429a      	cmp	r2, r3
 8015672:	d008      	beq.n	8015686 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015674:	4b07      	ldr	r3, [pc, #28]	; (8015694 <ip4_input_accept+0x50>)
 8015676:	695b      	ldr	r3, [r3, #20]
 8015678:	6879      	ldr	r1, [r7, #4]
 801567a:	4618      	mov	r0, r3
 801567c:	f000 fa08 	bl	8015a90 <ip4_addr_isbroadcast_u32>
 8015680:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015682:	2b00      	cmp	r3, #0
 8015684:	d001      	beq.n	801568a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015686:	2301      	movs	r3, #1
 8015688:	e000      	b.n	801568c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801568a:	2300      	movs	r3, #0
}
 801568c:	4618      	mov	r0, r3
 801568e:	3708      	adds	r7, #8
 8015690:	46bd      	mov	sp, r7
 8015692:	bd80      	pop	{r7, pc}
 8015694:	20009bb4 	.word	0x20009bb4

08015698 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b086      	sub	sp, #24
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
 80156a0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	685b      	ldr	r3, [r3, #4]
 80156a6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80156a8:	697b      	ldr	r3, [r7, #20]
 80156aa:	781b      	ldrb	r3, [r3, #0]
 80156ac:	091b      	lsrs	r3, r3, #4
 80156ae:	b2db      	uxtb	r3, r3
 80156b0:	2b04      	cmp	r3, #4
 80156b2:	d004      	beq.n	80156be <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f7f7 fdb1 	bl	800d21c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80156ba:	2300      	movs	r3, #0
 80156bc:	e107      	b.n	80158ce <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	f003 030f 	and.w	r3, r3, #15
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	009b      	lsls	r3, r3, #2
 80156ca:	b2db      	uxtb	r3, r3
 80156cc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	885b      	ldrh	r3, [r3, #2]
 80156d2:	b29b      	uxth	r3, r3
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7f6 fa59 	bl	800bb8c <lwip_htons>
 80156da:	4603      	mov	r3, r0
 80156dc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	891b      	ldrh	r3, [r3, #8]
 80156e2:	89ba      	ldrh	r2, [r7, #12]
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d204      	bcs.n	80156f2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80156e8:	89bb      	ldrh	r3, [r7, #12]
 80156ea:	4619      	mov	r1, r3
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f7f7 fc0f 	bl	800cf10 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	895b      	ldrh	r3, [r3, #10]
 80156f6:	89fa      	ldrh	r2, [r7, #14]
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d807      	bhi.n	801570c <ip4_input+0x74>
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	891b      	ldrh	r3, [r3, #8]
 8015700:	89ba      	ldrh	r2, [r7, #12]
 8015702:	429a      	cmp	r2, r3
 8015704:	d802      	bhi.n	801570c <ip4_input+0x74>
 8015706:	89fb      	ldrh	r3, [r7, #14]
 8015708:	2b13      	cmp	r3, #19
 801570a:	d804      	bhi.n	8015716 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801570c:	6878      	ldr	r0, [r7, #4]
 801570e:	f7f7 fd85 	bl	800d21c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015712:	2300      	movs	r3, #0
 8015714:	e0db      	b.n	80158ce <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015716:	697b      	ldr	r3, [r7, #20]
 8015718:	691b      	ldr	r3, [r3, #16]
 801571a:	4a6f      	ldr	r2, [pc, #444]	; (80158d8 <ip4_input+0x240>)
 801571c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	68db      	ldr	r3, [r3, #12]
 8015722:	4a6d      	ldr	r2, [pc, #436]	; (80158d8 <ip4_input+0x240>)
 8015724:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015726:	4b6c      	ldr	r3, [pc, #432]	; (80158d8 <ip4_input+0x240>)
 8015728:	695b      	ldr	r3, [r3, #20]
 801572a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801572e:	2be0      	cmp	r3, #224	; 0xe0
 8015730:	d112      	bne.n	8015758 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015738:	f003 0301 	and.w	r3, r3, #1
 801573c:	b2db      	uxtb	r3, r3
 801573e:	2b00      	cmp	r3, #0
 8015740:	d007      	beq.n	8015752 <ip4_input+0xba>
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	3304      	adds	r3, #4
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d002      	beq.n	8015752 <ip4_input+0xba>
      netif = inp;
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	613b      	str	r3, [r7, #16]
 8015750:	e02a      	b.n	80157a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015752:	2300      	movs	r3, #0
 8015754:	613b      	str	r3, [r7, #16]
 8015756:	e027      	b.n	80157a8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015758:	6838      	ldr	r0, [r7, #0]
 801575a:	f7ff ff73 	bl	8015644 <ip4_input_accept>
 801575e:	4603      	mov	r3, r0
 8015760:	2b00      	cmp	r3, #0
 8015762:	d002      	beq.n	801576a <ip4_input+0xd2>
      netif = inp;
 8015764:	683b      	ldr	r3, [r7, #0]
 8015766:	613b      	str	r3, [r7, #16]
 8015768:	e01e      	b.n	80157a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801576a:	2300      	movs	r3, #0
 801576c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801576e:	4b5a      	ldr	r3, [pc, #360]	; (80158d8 <ip4_input+0x240>)
 8015770:	695b      	ldr	r3, [r3, #20]
 8015772:	b2db      	uxtb	r3, r3
 8015774:	2b7f      	cmp	r3, #127	; 0x7f
 8015776:	d017      	beq.n	80157a8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015778:	4b58      	ldr	r3, [pc, #352]	; (80158dc <ip4_input+0x244>)
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	613b      	str	r3, [r7, #16]
 801577e:	e00e      	b.n	801579e <ip4_input+0x106>
          if (netif == inp) {
 8015780:	693a      	ldr	r2, [r7, #16]
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	429a      	cmp	r2, r3
 8015786:	d006      	beq.n	8015796 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015788:	6938      	ldr	r0, [r7, #16]
 801578a:	f7ff ff5b 	bl	8015644 <ip4_input_accept>
 801578e:	4603      	mov	r3, r0
 8015790:	2b00      	cmp	r3, #0
 8015792:	d108      	bne.n	80157a6 <ip4_input+0x10e>
 8015794:	e000      	b.n	8015798 <ip4_input+0x100>
            continue;
 8015796:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015798:	693b      	ldr	r3, [r7, #16]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	613b      	str	r3, [r7, #16]
 801579e:	693b      	ldr	r3, [r7, #16]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d1ed      	bne.n	8015780 <ip4_input+0xe8>
 80157a4:	e000      	b.n	80157a8 <ip4_input+0x110>
            break;
 80157a6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80157a8:	4b4b      	ldr	r3, [pc, #300]	; (80158d8 <ip4_input+0x240>)
 80157aa:	691b      	ldr	r3, [r3, #16]
 80157ac:	6839      	ldr	r1, [r7, #0]
 80157ae:	4618      	mov	r0, r3
 80157b0:	f000 f96e 	bl	8015a90 <ip4_addr_isbroadcast_u32>
 80157b4:	4603      	mov	r3, r0
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d105      	bne.n	80157c6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80157ba:	4b47      	ldr	r3, [pc, #284]	; (80158d8 <ip4_input+0x240>)
 80157bc:	691b      	ldr	r3, [r3, #16]
 80157be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80157c2:	2be0      	cmp	r3, #224	; 0xe0
 80157c4:	d104      	bne.n	80157d0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f7f7 fd28 	bl	800d21c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80157cc:	2300      	movs	r3, #0
 80157ce:	e07e      	b.n	80158ce <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80157d0:	693b      	ldr	r3, [r7, #16]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d104      	bne.n	80157e0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80157d6:	6878      	ldr	r0, [r7, #4]
 80157d8:	f7f7 fd20 	bl	800d21c <pbuf_free>
    return ERR_OK;
 80157dc:	2300      	movs	r3, #0
 80157de:	e076      	b.n	80158ce <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	88db      	ldrh	r3, [r3, #6]
 80157e4:	b29b      	uxth	r3, r3
 80157e6:	461a      	mov	r2, r3
 80157e8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80157ec:	4013      	ands	r3, r2
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d00b      	beq.n	801580a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80157f2:	6878      	ldr	r0, [r7, #4]
 80157f4:	f000 fc92 	bl	801611c <ip4_reass>
 80157f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d101      	bne.n	8015804 <ip4_input+0x16c>
      return ERR_OK;
 8015800:	2300      	movs	r3, #0
 8015802:	e064      	b.n	80158ce <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	685b      	ldr	r3, [r3, #4]
 8015808:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801580a:	4a33      	ldr	r2, [pc, #204]	; (80158d8 <ip4_input+0x240>)
 801580c:	693b      	ldr	r3, [r7, #16]
 801580e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015810:	4a31      	ldr	r2, [pc, #196]	; (80158d8 <ip4_input+0x240>)
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015816:	4a30      	ldr	r2, [pc, #192]	; (80158d8 <ip4_input+0x240>)
 8015818:	697b      	ldr	r3, [r7, #20]
 801581a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801581c:	697b      	ldr	r3, [r7, #20]
 801581e:	781b      	ldrb	r3, [r3, #0]
 8015820:	f003 030f 	and.w	r3, r3, #15
 8015824:	b2db      	uxtb	r3, r3
 8015826:	009b      	lsls	r3, r3, #2
 8015828:	b2db      	uxtb	r3, r3
 801582a:	b29a      	uxth	r2, r3
 801582c:	4b2a      	ldr	r3, [pc, #168]	; (80158d8 <ip4_input+0x240>)
 801582e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015830:	89fb      	ldrh	r3, [r7, #14]
 8015832:	4619      	mov	r1, r3
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	f7f7 fc6b 	bl	800d110 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	7a5b      	ldrb	r3, [r3, #9]
 801583e:	2b11      	cmp	r3, #17
 8015840:	d006      	beq.n	8015850 <ip4_input+0x1b8>
 8015842:	2b11      	cmp	r3, #17
 8015844:	dc13      	bgt.n	801586e <ip4_input+0x1d6>
 8015846:	2b01      	cmp	r3, #1
 8015848:	d00c      	beq.n	8015864 <ip4_input+0x1cc>
 801584a:	2b06      	cmp	r3, #6
 801584c:	d005      	beq.n	801585a <ip4_input+0x1c2>
 801584e:	e00e      	b.n	801586e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015850:	6839      	ldr	r1, [r7, #0]
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f7fe f970 	bl	8013b38 <udp_input>
        break;
 8015858:	e026      	b.n	80158a8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801585a:	6839      	ldr	r1, [r7, #0]
 801585c:	6878      	ldr	r0, [r7, #4]
 801585e:	f7f9 fd29 	bl	800f2b4 <tcp_input>
        break;
 8015862:	e021      	b.n	80158a8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015864:	6839      	ldr	r1, [r7, #0]
 8015866:	6878      	ldr	r0, [r7, #4]
 8015868:	f7ff fcee 	bl	8015248 <icmp_input>
        break;
 801586c:	e01c      	b.n	80158a8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801586e:	4b1a      	ldr	r3, [pc, #104]	; (80158d8 <ip4_input+0x240>)
 8015870:	695b      	ldr	r3, [r3, #20]
 8015872:	6939      	ldr	r1, [r7, #16]
 8015874:	4618      	mov	r0, r3
 8015876:	f000 f90b 	bl	8015a90 <ip4_addr_isbroadcast_u32>
 801587a:	4603      	mov	r3, r0
 801587c:	2b00      	cmp	r3, #0
 801587e:	d10f      	bne.n	80158a0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015880:	4b15      	ldr	r3, [pc, #84]	; (80158d8 <ip4_input+0x240>)
 8015882:	695b      	ldr	r3, [r3, #20]
 8015884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015888:	2be0      	cmp	r3, #224	; 0xe0
 801588a:	d009      	beq.n	80158a0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801588c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015890:	4619      	mov	r1, r3
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f7f7 fcaf 	bl	800d1f6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015898:	2102      	movs	r1, #2
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f7ff fdd8 	bl	8015450 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f7f7 fcbb 	bl	800d21c <pbuf_free>
        break;
 80158a6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80158a8:	4b0b      	ldr	r3, [pc, #44]	; (80158d8 <ip4_input+0x240>)
 80158aa:	2200      	movs	r2, #0
 80158ac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80158ae:	4b0a      	ldr	r3, [pc, #40]	; (80158d8 <ip4_input+0x240>)
 80158b0:	2200      	movs	r2, #0
 80158b2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80158b4:	4b08      	ldr	r3, [pc, #32]	; (80158d8 <ip4_input+0x240>)
 80158b6:	2200      	movs	r2, #0
 80158b8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80158ba:	4b07      	ldr	r3, [pc, #28]	; (80158d8 <ip4_input+0x240>)
 80158bc:	2200      	movs	r2, #0
 80158be:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80158c0:	4b05      	ldr	r3, [pc, #20]	; (80158d8 <ip4_input+0x240>)
 80158c2:	2200      	movs	r2, #0
 80158c4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80158c6:	4b04      	ldr	r3, [pc, #16]	; (80158d8 <ip4_input+0x240>)
 80158c8:	2200      	movs	r2, #0
 80158ca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80158cc:	2300      	movs	r3, #0
}
 80158ce:	4618      	mov	r0, r3
 80158d0:	3718      	adds	r7, #24
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd80      	pop	{r7, pc}
 80158d6:	bf00      	nop
 80158d8:	20009bb4 	.word	0x20009bb4
 80158dc:	2000d2fc 	.word	0x2000d2fc

080158e0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b08a      	sub	sp, #40	; 0x28
 80158e4:	af04      	add	r7, sp, #16
 80158e6:	60f8      	str	r0, [r7, #12]
 80158e8:	60b9      	str	r1, [r7, #8]
 80158ea:	607a      	str	r2, [r7, #4]
 80158ec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80158ee:	68bb      	ldr	r3, [r7, #8]
 80158f0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d009      	beq.n	801590c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d003      	beq.n	8015906 <ip4_output_if+0x26>
 80158fe:	68bb      	ldr	r3, [r7, #8]
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d102      	bne.n	801590c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015908:	3304      	adds	r3, #4
 801590a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801590c:	78fa      	ldrb	r2, [r7, #3]
 801590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015910:	9302      	str	r3, [sp, #8]
 8015912:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015916:	9301      	str	r3, [sp, #4]
 8015918:	f897 3020 	ldrb.w	r3, [r7, #32]
 801591c:	9300      	str	r3, [sp, #0]
 801591e:	4613      	mov	r3, r2
 8015920:	687a      	ldr	r2, [r7, #4]
 8015922:	6979      	ldr	r1, [r7, #20]
 8015924:	68f8      	ldr	r0, [r7, #12]
 8015926:	f000 f805 	bl	8015934 <ip4_output_if_src>
 801592a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801592c:	4618      	mov	r0, r3
 801592e:	3718      	adds	r7, #24
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}

08015934 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b088      	sub	sp, #32
 8015938:	af00      	add	r7, sp, #0
 801593a:	60f8      	str	r0, [r7, #12]
 801593c:	60b9      	str	r1, [r7, #8]
 801593e:	607a      	str	r2, [r7, #4]
 8015940:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	7b9b      	ldrb	r3, [r3, #14]
 8015946:	2b01      	cmp	r3, #1
 8015948:	d006      	beq.n	8015958 <ip4_output_if_src+0x24>
 801594a:	4b4b      	ldr	r3, [pc, #300]	; (8015a78 <ip4_output_if_src+0x144>)
 801594c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015950:	494a      	ldr	r1, [pc, #296]	; (8015a7c <ip4_output_if_src+0x148>)
 8015952:	484b      	ldr	r0, [pc, #300]	; (8015a80 <ip4_output_if_src+0x14c>)
 8015954:	f001 fbfc 	bl	8017150 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d060      	beq.n	8015a20 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801595e:	2314      	movs	r3, #20
 8015960:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015962:	2114      	movs	r1, #20
 8015964:	68f8      	ldr	r0, [r7, #12]
 8015966:	f7f7 fbc3 	bl	800d0f0 <pbuf_add_header>
 801596a:	4603      	mov	r3, r0
 801596c:	2b00      	cmp	r3, #0
 801596e:	d002      	beq.n	8015976 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015970:	f06f 0301 	mvn.w	r3, #1
 8015974:	e07c      	b.n	8015a70 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	895b      	ldrh	r3, [r3, #10]
 8015980:	2b13      	cmp	r3, #19
 8015982:	d806      	bhi.n	8015992 <ip4_output_if_src+0x5e>
 8015984:	4b3c      	ldr	r3, [pc, #240]	; (8015a78 <ip4_output_if_src+0x144>)
 8015986:	f44f 7262 	mov.w	r2, #904	; 0x388
 801598a:	493e      	ldr	r1, [pc, #248]	; (8015a84 <ip4_output_if_src+0x150>)
 801598c:	483c      	ldr	r0, [pc, #240]	; (8015a80 <ip4_output_if_src+0x14c>)
 801598e:	f001 fbdf 	bl	8017150 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015992:	69fb      	ldr	r3, [r7, #28]
 8015994:	78fa      	ldrb	r2, [r7, #3]
 8015996:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015998:	69fb      	ldr	r3, [r7, #28]
 801599a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801599e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	681a      	ldr	r2, [r3, #0]
 80159a4:	69fb      	ldr	r3, [r7, #28]
 80159a6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80159a8:	8b7b      	ldrh	r3, [r7, #26]
 80159aa:	089b      	lsrs	r3, r3, #2
 80159ac:	b29b      	uxth	r3, r3
 80159ae:	b2db      	uxtb	r3, r3
 80159b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159b4:	b2da      	uxtb	r2, r3
 80159b6:	69fb      	ldr	r3, [r7, #28]
 80159b8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80159ba:	69fb      	ldr	r3, [r7, #28]
 80159bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80159c0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	891b      	ldrh	r3, [r3, #8]
 80159c6:	4618      	mov	r0, r3
 80159c8:	f7f6 f8e0 	bl	800bb8c <lwip_htons>
 80159cc:	4603      	mov	r3, r0
 80159ce:	461a      	mov	r2, r3
 80159d0:	69fb      	ldr	r3, [r7, #28]
 80159d2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80159d4:	69fb      	ldr	r3, [r7, #28]
 80159d6:	2200      	movs	r2, #0
 80159d8:	719a      	strb	r2, [r3, #6]
 80159da:	2200      	movs	r2, #0
 80159dc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80159de:	4b2a      	ldr	r3, [pc, #168]	; (8015a88 <ip4_output_if_src+0x154>)
 80159e0:	881b      	ldrh	r3, [r3, #0]
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7f6 f8d2 	bl	800bb8c <lwip_htons>
 80159e8:	4603      	mov	r3, r0
 80159ea:	461a      	mov	r2, r3
 80159ec:	69fb      	ldr	r3, [r7, #28]
 80159ee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80159f0:	4b25      	ldr	r3, [pc, #148]	; (8015a88 <ip4_output_if_src+0x154>)
 80159f2:	881b      	ldrh	r3, [r3, #0]
 80159f4:	3301      	adds	r3, #1
 80159f6:	b29a      	uxth	r2, r3
 80159f8:	4b23      	ldr	r3, [pc, #140]	; (8015a88 <ip4_output_if_src+0x154>)
 80159fa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d104      	bne.n	8015a0c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015a02:	4b22      	ldr	r3, [pc, #136]	; (8015a8c <ip4_output_if_src+0x158>)
 8015a04:	681a      	ldr	r2, [r3, #0]
 8015a06:	69fb      	ldr	r3, [r7, #28]
 8015a08:	60da      	str	r2, [r3, #12]
 8015a0a:	e003      	b.n	8015a14 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015a0c:	68bb      	ldr	r3, [r7, #8]
 8015a0e:	681a      	ldr	r2, [r3, #0]
 8015a10:	69fb      	ldr	r3, [r7, #28]
 8015a12:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015a14:	69fb      	ldr	r3, [r7, #28]
 8015a16:	2200      	movs	r2, #0
 8015a18:	729a      	strb	r2, [r3, #10]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	72da      	strb	r2, [r3, #11]
 8015a1e:	e00f      	b.n	8015a40 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	895b      	ldrh	r3, [r3, #10]
 8015a24:	2b13      	cmp	r3, #19
 8015a26:	d802      	bhi.n	8015a2e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015a28:	f06f 0301 	mvn.w	r3, #1
 8015a2c:	e020      	b.n	8015a70 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	685b      	ldr	r3, [r3, #4]
 8015a32:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015a34:	69fb      	ldr	r3, [r7, #28]
 8015a36:	691b      	ldr	r3, [r3, #16]
 8015a38:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015a3a:	f107 0314 	add.w	r3, r7, #20
 8015a3e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d00c      	beq.n	8015a62 <ip4_output_if_src+0x12e>
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	891a      	ldrh	r2, [r3, #8]
 8015a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015a50:	429a      	cmp	r2, r3
 8015a52:	d906      	bls.n	8015a62 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015a54:	687a      	ldr	r2, [r7, #4]
 8015a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015a58:	68f8      	ldr	r0, [r7, #12]
 8015a5a:	f000 fd53 	bl	8016504 <ip4_frag>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	e006      	b.n	8015a70 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a64:	695b      	ldr	r3, [r3, #20]
 8015a66:	687a      	ldr	r2, [r7, #4]
 8015a68:	68f9      	ldr	r1, [r7, #12]
 8015a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a6c:	4798      	blx	r3
 8015a6e:	4603      	mov	r3, r0
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3720      	adds	r7, #32
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}
 8015a78:	0801b184 	.word	0x0801b184
 8015a7c:	0801b1b8 	.word	0x0801b1b8
 8015a80:	0801b1c4 	.word	0x0801b1c4
 8015a84:	0801b1ec 	.word	0x0801b1ec
 8015a88:	2000d45a 	.word	0x2000d45a
 8015a8c:	0801b60c 	.word	0x0801b60c

08015a90 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015a90:	b480      	push	{r7}
 8015a92:	b085      	sub	sp, #20
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
 8015a98:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015aa4:	d002      	beq.n	8015aac <ip4_addr_isbroadcast_u32+0x1c>
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d101      	bne.n	8015ab0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015aac:	2301      	movs	r3, #1
 8015aae:	e02a      	b.n	8015b06 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015ab0:	683b      	ldr	r3, [r7, #0]
 8015ab2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ab6:	f003 0302 	and.w	r3, r3, #2
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d101      	bne.n	8015ac2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	e021      	b.n	8015b06 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	3304      	adds	r3, #4
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	687a      	ldr	r2, [r7, #4]
 8015aca:	429a      	cmp	r2, r3
 8015acc:	d101      	bne.n	8015ad2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015ace:	2300      	movs	r3, #0
 8015ad0:	e019      	b.n	8015b06 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015ad2:	68fa      	ldr	r2, [r7, #12]
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	3304      	adds	r3, #4
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	405a      	eors	r2, r3
 8015adc:	683b      	ldr	r3, [r7, #0]
 8015ade:	3308      	adds	r3, #8
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	4013      	ands	r3, r2
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d10d      	bne.n	8015b04 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015ae8:	683b      	ldr	r3, [r7, #0]
 8015aea:	3308      	adds	r3, #8
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	43da      	mvns	r2, r3
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	3308      	adds	r3, #8
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015afc:	429a      	cmp	r2, r3
 8015afe:	d101      	bne.n	8015b04 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015b00:	2301      	movs	r3, #1
 8015b02:	e000      	b.n	8015b06 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015b04:	2300      	movs	r3, #0
  }
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3714      	adds	r7, #20
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b10:	4770      	bx	lr
	...

08015b14 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b084      	sub	sp, #16
 8015b18:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015b1e:	4b12      	ldr	r3, [pc, #72]	; (8015b68 <ip_reass_tmr+0x54>)
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015b24:	e018      	b.n	8015b58 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	7fdb      	ldrb	r3, [r3, #31]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d00b      	beq.n	8015b46 <ip_reass_tmr+0x32>
      r->timer--;
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	7fdb      	ldrb	r3, [r3, #31]
 8015b32:	3b01      	subs	r3, #1
 8015b34:	b2da      	uxtb	r2, r3
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	60fb      	str	r3, [r7, #12]
 8015b44:	e008      	b.n	8015b58 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015b50:	68b9      	ldr	r1, [r7, #8]
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	f000 f80a 	bl	8015b6c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d1e3      	bne.n	8015b26 <ip_reass_tmr+0x12>
    }
  }
}
 8015b5e:	bf00      	nop
 8015b60:	bf00      	nop
 8015b62:	3710      	adds	r7, #16
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}
 8015b68:	2000d45c 	.word	0x2000d45c

08015b6c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b088      	sub	sp, #32
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015b76:	2300      	movs	r3, #0
 8015b78:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015b7a:	683a      	ldr	r2, [r7, #0]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	d105      	bne.n	8015b8e <ip_reass_free_complete_datagram+0x22>
 8015b82:	4b45      	ldr	r3, [pc, #276]	; (8015c98 <ip_reass_free_complete_datagram+0x12c>)
 8015b84:	22ab      	movs	r2, #171	; 0xab
 8015b86:	4945      	ldr	r1, [pc, #276]	; (8015c9c <ip_reass_free_complete_datagram+0x130>)
 8015b88:	4845      	ldr	r0, [pc, #276]	; (8015ca0 <ip_reass_free_complete_datagram+0x134>)
 8015b8a:	f001 fae1 	bl	8017150 <iprintf>
  if (prev != NULL) {
 8015b8e:	683b      	ldr	r3, [r7, #0]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d00a      	beq.n	8015baa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015b94:	683b      	ldr	r3, [r7, #0]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	687a      	ldr	r2, [r7, #4]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	d005      	beq.n	8015baa <ip_reass_free_complete_datagram+0x3e>
 8015b9e:	4b3e      	ldr	r3, [pc, #248]	; (8015c98 <ip_reass_free_complete_datagram+0x12c>)
 8015ba0:	22ad      	movs	r2, #173	; 0xad
 8015ba2:	4940      	ldr	r1, [pc, #256]	; (8015ca4 <ip_reass_free_complete_datagram+0x138>)
 8015ba4:	483e      	ldr	r0, [pc, #248]	; (8015ca0 <ip_reass_free_complete_datagram+0x134>)
 8015ba6:	f001 fad3 	bl	8017150 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	685b      	ldr	r3, [r3, #4]
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015bb2:	697b      	ldr	r3, [r7, #20]
 8015bb4:	889b      	ldrh	r3, [r3, #4]
 8015bb6:	b29b      	uxth	r3, r3
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d12a      	bne.n	8015c12 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	685b      	ldr	r3, [r3, #4]
 8015bc0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	681a      	ldr	r2, [r3, #0]
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015bca:	69bb      	ldr	r3, [r7, #24]
 8015bcc:	6858      	ldr	r0, [r3, #4]
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	3308      	adds	r3, #8
 8015bd2:	2214      	movs	r2, #20
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	f001 f9c5 	bl	8016f64 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015bda:	2101      	movs	r1, #1
 8015bdc:	69b8      	ldr	r0, [r7, #24]
 8015bde:	f7ff fc47 	bl	8015470 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015be2:	69b8      	ldr	r0, [r7, #24]
 8015be4:	f7f7 fba8 	bl	800d338 <pbuf_clen>
 8015be8:	4603      	mov	r3, r0
 8015bea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015bec:	8bfa      	ldrh	r2, [r7, #30]
 8015bee:	8a7b      	ldrh	r3, [r7, #18]
 8015bf0:	4413      	add	r3, r2
 8015bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015bf6:	db05      	blt.n	8015c04 <ip_reass_free_complete_datagram+0x98>
 8015bf8:	4b27      	ldr	r3, [pc, #156]	; (8015c98 <ip_reass_free_complete_datagram+0x12c>)
 8015bfa:	22bc      	movs	r2, #188	; 0xbc
 8015bfc:	492a      	ldr	r1, [pc, #168]	; (8015ca8 <ip_reass_free_complete_datagram+0x13c>)
 8015bfe:	4828      	ldr	r0, [pc, #160]	; (8015ca0 <ip_reass_free_complete_datagram+0x134>)
 8015c00:	f001 faa6 	bl	8017150 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015c04:	8bfa      	ldrh	r2, [r7, #30]
 8015c06:	8a7b      	ldrh	r3, [r7, #18]
 8015c08:	4413      	add	r3, r2
 8015c0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015c0c:	69b8      	ldr	r0, [r7, #24]
 8015c0e:	f7f7 fb05 	bl	800d21c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	685b      	ldr	r3, [r3, #4]
 8015c16:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015c18:	e01f      	b.n	8015c5a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015c1a:	69bb      	ldr	r3, [r7, #24]
 8015c1c:	685b      	ldr	r3, [r3, #4]
 8015c1e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015c20:	69bb      	ldr	r3, [r7, #24]
 8015c22:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015c24:	697b      	ldr	r3, [r7, #20]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015c2a:	68f8      	ldr	r0, [r7, #12]
 8015c2c:	f7f7 fb84 	bl	800d338 <pbuf_clen>
 8015c30:	4603      	mov	r3, r0
 8015c32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015c34:	8bfa      	ldrh	r2, [r7, #30]
 8015c36:	8a7b      	ldrh	r3, [r7, #18]
 8015c38:	4413      	add	r3, r2
 8015c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015c3e:	db05      	blt.n	8015c4c <ip_reass_free_complete_datagram+0xe0>
 8015c40:	4b15      	ldr	r3, [pc, #84]	; (8015c98 <ip_reass_free_complete_datagram+0x12c>)
 8015c42:	22cc      	movs	r2, #204	; 0xcc
 8015c44:	4918      	ldr	r1, [pc, #96]	; (8015ca8 <ip_reass_free_complete_datagram+0x13c>)
 8015c46:	4816      	ldr	r0, [pc, #88]	; (8015ca0 <ip_reass_free_complete_datagram+0x134>)
 8015c48:	f001 fa82 	bl	8017150 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015c4c:	8bfa      	ldrh	r2, [r7, #30]
 8015c4e:	8a7b      	ldrh	r3, [r7, #18]
 8015c50:	4413      	add	r3, r2
 8015c52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015c54:	68f8      	ldr	r0, [r7, #12]
 8015c56:	f7f7 fae1 	bl	800d21c <pbuf_free>
  while (p != NULL) {
 8015c5a:	69bb      	ldr	r3, [r7, #24]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d1dc      	bne.n	8015c1a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015c60:	6839      	ldr	r1, [r7, #0]
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f000 f8c2 	bl	8015dec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015c68:	4b10      	ldr	r3, [pc, #64]	; (8015cac <ip_reass_free_complete_datagram+0x140>)
 8015c6a:	881b      	ldrh	r3, [r3, #0]
 8015c6c:	8bfa      	ldrh	r2, [r7, #30]
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d905      	bls.n	8015c7e <ip_reass_free_complete_datagram+0x112>
 8015c72:	4b09      	ldr	r3, [pc, #36]	; (8015c98 <ip_reass_free_complete_datagram+0x12c>)
 8015c74:	22d2      	movs	r2, #210	; 0xd2
 8015c76:	490e      	ldr	r1, [pc, #56]	; (8015cb0 <ip_reass_free_complete_datagram+0x144>)
 8015c78:	4809      	ldr	r0, [pc, #36]	; (8015ca0 <ip_reass_free_complete_datagram+0x134>)
 8015c7a:	f001 fa69 	bl	8017150 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015c7e:	4b0b      	ldr	r3, [pc, #44]	; (8015cac <ip_reass_free_complete_datagram+0x140>)
 8015c80:	881a      	ldrh	r2, [r3, #0]
 8015c82:	8bfb      	ldrh	r3, [r7, #30]
 8015c84:	1ad3      	subs	r3, r2, r3
 8015c86:	b29a      	uxth	r2, r3
 8015c88:	4b08      	ldr	r3, [pc, #32]	; (8015cac <ip_reass_free_complete_datagram+0x140>)
 8015c8a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015c8c:	8bfb      	ldrh	r3, [r7, #30]
}
 8015c8e:	4618      	mov	r0, r3
 8015c90:	3720      	adds	r7, #32
 8015c92:	46bd      	mov	sp, r7
 8015c94:	bd80      	pop	{r7, pc}
 8015c96:	bf00      	nop
 8015c98:	0801b21c 	.word	0x0801b21c
 8015c9c:	0801b258 	.word	0x0801b258
 8015ca0:	0801b264 	.word	0x0801b264
 8015ca4:	0801b28c 	.word	0x0801b28c
 8015ca8:	0801b2a0 	.word	0x0801b2a0
 8015cac:	2000d460 	.word	0x2000d460
 8015cb0:	0801b2c0 	.word	0x0801b2c0

08015cb4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b08a      	sub	sp, #40	; 0x28
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
 8015cbc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015cca:	2300      	movs	r3, #0
 8015ccc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015cce:	2300      	movs	r3, #0
 8015cd0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015cd2:	4b28      	ldr	r3, [pc, #160]	; (8015d74 <ip_reass_remove_oldest_datagram+0xc0>)
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015cd8:	e030      	b.n	8015d3c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cdc:	695a      	ldr	r2, [r3, #20]
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	68db      	ldr	r3, [r3, #12]
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	d10c      	bne.n	8015d00 <ip_reass_remove_oldest_datagram+0x4c>
 8015ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ce8:	699a      	ldr	r2, [r3, #24]
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	691b      	ldr	r3, [r3, #16]
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	d106      	bne.n	8015d00 <ip_reass_remove_oldest_datagram+0x4c>
 8015cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf4:	899a      	ldrh	r2, [r3, #12]
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	889b      	ldrh	r3, [r3, #4]
 8015cfa:	b29b      	uxth	r3, r3
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d014      	beq.n	8015d2a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015d00:	693b      	ldr	r3, [r7, #16]
 8015d02:	3301      	adds	r3, #1
 8015d04:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015d06:	6a3b      	ldr	r3, [r7, #32]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d104      	bne.n	8015d16 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d0e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015d10:	69fb      	ldr	r3, [r7, #28]
 8015d12:	61bb      	str	r3, [r7, #24]
 8015d14:	e009      	b.n	8015d2a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d18:	7fda      	ldrb	r2, [r3, #31]
 8015d1a:	6a3b      	ldr	r3, [r7, #32]
 8015d1c:	7fdb      	ldrb	r3, [r3, #31]
 8015d1e:	429a      	cmp	r2, r3
 8015d20:	d803      	bhi.n	8015d2a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d24:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015d26:	69fb      	ldr	r3, [r7, #28]
 8015d28:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d001      	beq.n	8015d36 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d34:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d1cb      	bne.n	8015cda <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015d42:	6a3b      	ldr	r3, [r7, #32]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d008      	beq.n	8015d5a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015d48:	69b9      	ldr	r1, [r7, #24]
 8015d4a:	6a38      	ldr	r0, [r7, #32]
 8015d4c:	f7ff ff0e 	bl	8015b6c <ip_reass_free_complete_datagram>
 8015d50:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015d52:	697a      	ldr	r2, [r7, #20]
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	4413      	add	r3, r2
 8015d58:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015d5a:	697a      	ldr	r2, [r7, #20]
 8015d5c:	683b      	ldr	r3, [r7, #0]
 8015d5e:	429a      	cmp	r2, r3
 8015d60:	da02      	bge.n	8015d68 <ip_reass_remove_oldest_datagram+0xb4>
 8015d62:	693b      	ldr	r3, [r7, #16]
 8015d64:	2b01      	cmp	r3, #1
 8015d66:	dcac      	bgt.n	8015cc2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015d68:	697b      	ldr	r3, [r7, #20]
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	3728      	adds	r7, #40	; 0x28
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
 8015d72:	bf00      	nop
 8015d74:	2000d45c 	.word	0x2000d45c

08015d78 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b084      	sub	sp, #16
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
 8015d80:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015d82:	2004      	movs	r0, #4
 8015d84:	f7f6 fbb8 	bl	800c4f8 <memp_malloc>
 8015d88:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d110      	bne.n	8015db2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015d90:	6839      	ldr	r1, [r7, #0]
 8015d92:	6878      	ldr	r0, [r7, #4]
 8015d94:	f7ff ff8e 	bl	8015cb4 <ip_reass_remove_oldest_datagram>
 8015d98:	4602      	mov	r2, r0
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	4293      	cmp	r3, r2
 8015d9e:	dc03      	bgt.n	8015da8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015da0:	2004      	movs	r0, #4
 8015da2:	f7f6 fba9 	bl	800c4f8 <memp_malloc>
 8015da6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d101      	bne.n	8015db2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015dae:	2300      	movs	r3, #0
 8015db0:	e016      	b.n	8015de0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015db2:	2220      	movs	r2, #32
 8015db4:	2100      	movs	r1, #0
 8015db6:	68f8      	ldr	r0, [r7, #12]
 8015db8:	f001 f8e2 	bl	8016f80 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	220f      	movs	r2, #15
 8015dc0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015dc2:	4b09      	ldr	r3, [pc, #36]	; (8015de8 <ip_reass_enqueue_new_datagram+0x70>)
 8015dc4:	681a      	ldr	r2, [r3, #0]
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015dca:	4a07      	ldr	r2, [pc, #28]	; (8015de8 <ip_reass_enqueue_new_datagram+0x70>)
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	3308      	adds	r3, #8
 8015dd4:	2214      	movs	r2, #20
 8015dd6:	6879      	ldr	r1, [r7, #4]
 8015dd8:	4618      	mov	r0, r3
 8015dda:	f001 f8c3 	bl	8016f64 <memcpy>
  return ipr;
 8015dde:	68fb      	ldr	r3, [r7, #12]
}
 8015de0:	4618      	mov	r0, r3
 8015de2:	3710      	adds	r7, #16
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}
 8015de8:	2000d45c 	.word	0x2000d45c

08015dec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b082      	sub	sp, #8
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
 8015df4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015df6:	4b10      	ldr	r3, [pc, #64]	; (8015e38 <ip_reass_dequeue_datagram+0x4c>)
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	687a      	ldr	r2, [r7, #4]
 8015dfc:	429a      	cmp	r2, r3
 8015dfe:	d104      	bne.n	8015e0a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	4a0c      	ldr	r2, [pc, #48]	; (8015e38 <ip_reass_dequeue_datagram+0x4c>)
 8015e06:	6013      	str	r3, [r2, #0]
 8015e08:	e00d      	b.n	8015e26 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d106      	bne.n	8015e1e <ip_reass_dequeue_datagram+0x32>
 8015e10:	4b0a      	ldr	r3, [pc, #40]	; (8015e3c <ip_reass_dequeue_datagram+0x50>)
 8015e12:	f240 1245 	movw	r2, #325	; 0x145
 8015e16:	490a      	ldr	r1, [pc, #40]	; (8015e40 <ip_reass_dequeue_datagram+0x54>)
 8015e18:	480a      	ldr	r0, [pc, #40]	; (8015e44 <ip_reass_dequeue_datagram+0x58>)
 8015e1a:	f001 f999 	bl	8017150 <iprintf>
    prev->next = ipr->next;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681a      	ldr	r2, [r3, #0]
 8015e22:	683b      	ldr	r3, [r7, #0]
 8015e24:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015e26:	6879      	ldr	r1, [r7, #4]
 8015e28:	2004      	movs	r0, #4
 8015e2a:	f7f6 fbb7 	bl	800c59c <memp_free>
}
 8015e2e:	bf00      	nop
 8015e30:	3708      	adds	r7, #8
 8015e32:	46bd      	mov	sp, r7
 8015e34:	bd80      	pop	{r7, pc}
 8015e36:	bf00      	nop
 8015e38:	2000d45c 	.word	0x2000d45c
 8015e3c:	0801b21c 	.word	0x0801b21c
 8015e40:	0801b2e4 	.word	0x0801b2e4
 8015e44:	0801b264 	.word	0x0801b264

08015e48 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b08c      	sub	sp, #48	; 0x30
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	60f8      	str	r0, [r7, #12]
 8015e50:	60b9      	str	r1, [r7, #8]
 8015e52:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015e54:	2300      	movs	r3, #0
 8015e56:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015e58:	2301      	movs	r3, #1
 8015e5a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015e5c:	68bb      	ldr	r3, [r7, #8]
 8015e5e:	685b      	ldr	r3, [r3, #4]
 8015e60:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015e62:	69fb      	ldr	r3, [r7, #28]
 8015e64:	885b      	ldrh	r3, [r3, #2]
 8015e66:	b29b      	uxth	r3, r3
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f7f5 fe8f 	bl	800bb8c <lwip_htons>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015e72:	69fb      	ldr	r3, [r7, #28]
 8015e74:	781b      	ldrb	r3, [r3, #0]
 8015e76:	f003 030f 	and.w	r3, r3, #15
 8015e7a:	b2db      	uxtb	r3, r3
 8015e7c:	009b      	lsls	r3, r3, #2
 8015e7e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015e80:	7e7b      	ldrb	r3, [r7, #25]
 8015e82:	b29b      	uxth	r3, r3
 8015e84:	8b7a      	ldrh	r2, [r7, #26]
 8015e86:	429a      	cmp	r2, r3
 8015e88:	d202      	bcs.n	8015e90 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e8e:	e135      	b.n	80160fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015e90:	7e7b      	ldrb	r3, [r7, #25]
 8015e92:	b29b      	uxth	r3, r3
 8015e94:	8b7a      	ldrh	r2, [r7, #26]
 8015e96:	1ad3      	subs	r3, r2, r3
 8015e98:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015e9a:	69fb      	ldr	r3, [r7, #28]
 8015e9c:	88db      	ldrh	r3, [r3, #6]
 8015e9e:	b29b      	uxth	r3, r3
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f7f5 fe73 	bl	800bb8c <lwip_htons>
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015eac:	b29b      	uxth	r3, r3
 8015eae:	00db      	lsls	r3, r3, #3
 8015eb0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015eb2:	68bb      	ldr	r3, [r7, #8]
 8015eb4:	685b      	ldr	r3, [r3, #4]
 8015eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eba:	2200      	movs	r2, #0
 8015ebc:	701a      	strb	r2, [r3, #0]
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	705a      	strb	r2, [r3, #1]
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	709a      	strb	r2, [r3, #2]
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ecc:	8afa      	ldrh	r2, [r7, #22]
 8015ece:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015ed0:	8afa      	ldrh	r2, [r7, #22]
 8015ed2:	8b7b      	ldrh	r3, [r7, #26]
 8015ed4:	4413      	add	r3, r2
 8015ed6:	b29a      	uxth	r2, r3
 8015ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eda:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ede:	88db      	ldrh	r3, [r3, #6]
 8015ee0:	b29b      	uxth	r3, r3
 8015ee2:	8afa      	ldrh	r2, [r7, #22]
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d902      	bls.n	8015eee <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8015eec:	e106      	b.n	80160fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	685b      	ldr	r3, [r3, #4]
 8015ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8015ef4:	e068      	b.n	8015fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef8:	685b      	ldr	r3, [r3, #4]
 8015efa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015efe:	889b      	ldrh	r3, [r3, #4]
 8015f00:	b29a      	uxth	r2, r3
 8015f02:	693b      	ldr	r3, [r7, #16]
 8015f04:	889b      	ldrh	r3, [r3, #4]
 8015f06:	b29b      	uxth	r3, r3
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	d235      	bcs.n	8015f78 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f10:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d020      	beq.n	8015f5a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f1a:	889b      	ldrh	r3, [r3, #4]
 8015f1c:	b29a      	uxth	r2, r3
 8015f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f20:	88db      	ldrh	r3, [r3, #6]
 8015f22:	b29b      	uxth	r3, r3
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d307      	bcc.n	8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f2a:	88db      	ldrh	r3, [r3, #6]
 8015f2c:	b29a      	uxth	r2, r3
 8015f2e:	693b      	ldr	r3, [r7, #16]
 8015f30:	889b      	ldrh	r3, [r3, #4]
 8015f32:	b29b      	uxth	r3, r3
 8015f34:	429a      	cmp	r2, r3
 8015f36:	d902      	bls.n	8015f3e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f38:	f04f 33ff 	mov.w	r3, #4294967295
 8015f3c:	e0de      	b.n	80160fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f40:	68ba      	ldr	r2, [r7, #8]
 8015f42:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f46:	88db      	ldrh	r3, [r3, #6]
 8015f48:	b29a      	uxth	r2, r3
 8015f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f4c:	889b      	ldrh	r3, [r3, #4]
 8015f4e:	b29b      	uxth	r3, r3
 8015f50:	429a      	cmp	r2, r3
 8015f52:	d03d      	beq.n	8015fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015f54:	2300      	movs	r3, #0
 8015f56:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015f58:	e03a      	b.n	8015fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f5c:	88db      	ldrh	r3, [r3, #6]
 8015f5e:	b29a      	uxth	r2, r3
 8015f60:	693b      	ldr	r3, [r7, #16]
 8015f62:	889b      	ldrh	r3, [r3, #4]
 8015f64:	b29b      	uxth	r3, r3
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d902      	bls.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8015f6e:	e0c5      	b.n	80160fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	68ba      	ldr	r2, [r7, #8]
 8015f74:	605a      	str	r2, [r3, #4]
      break;
 8015f76:	e02b      	b.n	8015fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f7a:	889b      	ldrh	r3, [r3, #4]
 8015f7c:	b29a      	uxth	r2, r3
 8015f7e:	693b      	ldr	r3, [r7, #16]
 8015f80:	889b      	ldrh	r3, [r3, #4]
 8015f82:	b29b      	uxth	r3, r3
 8015f84:	429a      	cmp	r2, r3
 8015f86:	d102      	bne.n	8015f8e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f88:	f04f 33ff 	mov.w	r3, #4294967295
 8015f8c:	e0b6      	b.n	80160fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f90:	889b      	ldrh	r3, [r3, #4]
 8015f92:	b29a      	uxth	r2, r3
 8015f94:	693b      	ldr	r3, [r7, #16]
 8015f96:	88db      	ldrh	r3, [r3, #6]
 8015f98:	b29b      	uxth	r3, r3
 8015f9a:	429a      	cmp	r2, r3
 8015f9c:	d202      	bcs.n	8015fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8015fa2:	e0ab      	b.n	80160fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d009      	beq.n	8015fbe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fac:	88db      	ldrh	r3, [r3, #6]
 8015fae:	b29a      	uxth	r2, r3
 8015fb0:	693b      	ldr	r3, [r7, #16]
 8015fb2:	889b      	ldrh	r3, [r3, #4]
 8015fb4:	b29b      	uxth	r3, r3
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d001      	beq.n	8015fbe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015fbe:	693b      	ldr	r3, [r7, #16]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015fc4:	693b      	ldr	r3, [r7, #16]
 8015fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d193      	bne.n	8015ef6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015fce:	e000      	b.n	8015fd2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015fd0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d12d      	bne.n	8016034 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d01c      	beq.n	8016018 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe0:	88db      	ldrh	r3, [r3, #6]
 8015fe2:	b29a      	uxth	r2, r3
 8015fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fe6:	889b      	ldrh	r3, [r3, #4]
 8015fe8:	b29b      	uxth	r3, r3
 8015fea:	429a      	cmp	r2, r3
 8015fec:	d906      	bls.n	8015ffc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015fee:	4b45      	ldr	r3, [pc, #276]	; (8016104 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ff0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015ff4:	4944      	ldr	r1, [pc, #272]	; (8016108 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015ff6:	4845      	ldr	r0, [pc, #276]	; (801610c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ff8:	f001 f8aa 	bl	8017150 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ffe:	68ba      	ldr	r2, [r7, #8]
 8016000:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016004:	88db      	ldrh	r3, [r3, #6]
 8016006:	b29a      	uxth	r2, r3
 8016008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801600a:	889b      	ldrh	r3, [r3, #4]
 801600c:	b29b      	uxth	r3, r3
 801600e:	429a      	cmp	r2, r3
 8016010:	d010      	beq.n	8016034 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016012:	2300      	movs	r3, #0
 8016014:	623b      	str	r3, [r7, #32]
 8016016:	e00d      	b.n	8016034 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	685b      	ldr	r3, [r3, #4]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d006      	beq.n	801602e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016020:	4b38      	ldr	r3, [pc, #224]	; (8016104 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016022:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016026:	493a      	ldr	r1, [pc, #232]	; (8016110 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016028:	4838      	ldr	r0, [pc, #224]	; (801610c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801602a:	f001 f891 	bl	8017150 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	68ba      	ldr	r2, [r7, #8]
 8016032:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d105      	bne.n	8016046 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	7f9b      	ldrb	r3, [r3, #30]
 801603e:	f003 0301 	and.w	r3, r3, #1
 8016042:	2b00      	cmp	r3, #0
 8016044:	d059      	beq.n	80160fa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016046:	6a3b      	ldr	r3, [r7, #32]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d04f      	beq.n	80160ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	685b      	ldr	r3, [r3, #4]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d006      	beq.n	8016062 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	685b      	ldr	r3, [r3, #4]
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	889b      	ldrh	r3, [r3, #4]
 801605c:	b29b      	uxth	r3, r3
 801605e:	2b00      	cmp	r3, #0
 8016060:	d002      	beq.n	8016068 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016062:	2300      	movs	r3, #0
 8016064:	623b      	str	r3, [r7, #32]
 8016066:	e041      	b.n	80160ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801606a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016072:	e012      	b.n	801609a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016076:	685b      	ldr	r3, [r3, #4]
 8016078:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801607c:	88db      	ldrh	r3, [r3, #6]
 801607e:	b29a      	uxth	r2, r3
 8016080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016082:	889b      	ldrh	r3, [r3, #4]
 8016084:	b29b      	uxth	r3, r3
 8016086:	429a      	cmp	r2, r3
 8016088:	d002      	beq.n	8016090 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801608a:	2300      	movs	r3, #0
 801608c:	623b      	str	r3, [r7, #32]
            break;
 801608e:	e007      	b.n	80160a0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016092:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801609c:	2b00      	cmp	r3, #0
 801609e:	d1e9      	bne.n	8016074 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80160a0:	6a3b      	ldr	r3, [r7, #32]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d022      	beq.n	80160ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	685b      	ldr	r3, [r3, #4]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d106      	bne.n	80160bc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80160ae:	4b15      	ldr	r3, [pc, #84]	; (8016104 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80160b0:	f240 12df 	movw	r2, #479	; 0x1df
 80160b4:	4917      	ldr	r1, [pc, #92]	; (8016114 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80160b6:	4815      	ldr	r0, [pc, #84]	; (801610c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80160b8:	f001 f84a 	bl	8017150 <iprintf>
          LWIP_ASSERT("sanity check",
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	685b      	ldr	r3, [r3, #4]
 80160c0:	685b      	ldr	r3, [r3, #4]
 80160c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80160c4:	429a      	cmp	r2, r3
 80160c6:	d106      	bne.n	80160d6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80160c8:	4b0e      	ldr	r3, [pc, #56]	; (8016104 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80160ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80160ce:	4911      	ldr	r1, [pc, #68]	; (8016114 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80160d0:	480e      	ldr	r0, [pc, #56]	; (801610c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80160d2:	f001 f83d 	bl	8017150 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80160d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d006      	beq.n	80160ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80160de:	4b09      	ldr	r3, [pc, #36]	; (8016104 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80160e0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80160e4:	490c      	ldr	r1, [pc, #48]	; (8016118 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80160e6:	4809      	ldr	r0, [pc, #36]	; (801610c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80160e8:	f001 f832 	bl	8017150 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80160ec:	6a3b      	ldr	r3, [r7, #32]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	bf14      	ite	ne
 80160f2:	2301      	movne	r3, #1
 80160f4:	2300      	moveq	r3, #0
 80160f6:	b2db      	uxtb	r3, r3
 80160f8:	e000      	b.n	80160fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80160fa:	2300      	movs	r3, #0
}
 80160fc:	4618      	mov	r0, r3
 80160fe:	3730      	adds	r7, #48	; 0x30
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}
 8016104:	0801b21c 	.word	0x0801b21c
 8016108:	0801b300 	.word	0x0801b300
 801610c:	0801b264 	.word	0x0801b264
 8016110:	0801b320 	.word	0x0801b320
 8016114:	0801b358 	.word	0x0801b358
 8016118:	0801b368 	.word	0x0801b368

0801611c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b08e      	sub	sp, #56	; 0x38
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	685b      	ldr	r3, [r3, #4]
 8016128:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801612c:	781b      	ldrb	r3, [r3, #0]
 801612e:	f003 030f 	and.w	r3, r3, #15
 8016132:	b2db      	uxtb	r3, r3
 8016134:	009b      	lsls	r3, r3, #2
 8016136:	b2db      	uxtb	r3, r3
 8016138:	2b14      	cmp	r3, #20
 801613a:	f040 8171 	bne.w	8016420 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016140:	88db      	ldrh	r3, [r3, #6]
 8016142:	b29b      	uxth	r3, r3
 8016144:	4618      	mov	r0, r3
 8016146:	f7f5 fd21 	bl	800bb8c <lwip_htons>
 801614a:	4603      	mov	r3, r0
 801614c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016150:	b29b      	uxth	r3, r3
 8016152:	00db      	lsls	r3, r3, #3
 8016154:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016158:	885b      	ldrh	r3, [r3, #2]
 801615a:	b29b      	uxth	r3, r3
 801615c:	4618      	mov	r0, r3
 801615e:	f7f5 fd15 	bl	800bb8c <lwip_htons>
 8016162:	4603      	mov	r3, r0
 8016164:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016168:	781b      	ldrb	r3, [r3, #0]
 801616a:	f003 030f 	and.w	r3, r3, #15
 801616e:	b2db      	uxtb	r3, r3
 8016170:	009b      	lsls	r3, r3, #2
 8016172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016176:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801617a:	b29b      	uxth	r3, r3
 801617c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801617e:	429a      	cmp	r2, r3
 8016180:	f0c0 8150 	bcc.w	8016424 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016188:	b29b      	uxth	r3, r3
 801618a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801618c:	1ad3      	subs	r3, r2, r3
 801618e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016190:	6878      	ldr	r0, [r7, #4]
 8016192:	f7f7 f8d1 	bl	800d338 <pbuf_clen>
 8016196:	4603      	mov	r3, r0
 8016198:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801619a:	4b8c      	ldr	r3, [pc, #560]	; (80163cc <ip4_reass+0x2b0>)
 801619c:	881b      	ldrh	r3, [r3, #0]
 801619e:	461a      	mov	r2, r3
 80161a0:	8c3b      	ldrh	r3, [r7, #32]
 80161a2:	4413      	add	r3, r2
 80161a4:	2b0a      	cmp	r3, #10
 80161a6:	dd10      	ble.n	80161ca <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80161a8:	8c3b      	ldrh	r3, [r7, #32]
 80161aa:	4619      	mov	r1, r3
 80161ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161ae:	f7ff fd81 	bl	8015cb4 <ip_reass_remove_oldest_datagram>
 80161b2:	4603      	mov	r3, r0
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	f000 8137 	beq.w	8016428 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80161ba:	4b84      	ldr	r3, [pc, #528]	; (80163cc <ip4_reass+0x2b0>)
 80161bc:	881b      	ldrh	r3, [r3, #0]
 80161be:	461a      	mov	r2, r3
 80161c0:	8c3b      	ldrh	r3, [r7, #32]
 80161c2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80161c4:	2b0a      	cmp	r3, #10
 80161c6:	f300 812f 	bgt.w	8016428 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80161ca:	4b81      	ldr	r3, [pc, #516]	; (80163d0 <ip4_reass+0x2b4>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	633b      	str	r3, [r7, #48]	; 0x30
 80161d0:	e015      	b.n	80161fe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80161d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d4:	695a      	ldr	r2, [r3, #20]
 80161d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161d8:	68db      	ldr	r3, [r3, #12]
 80161da:	429a      	cmp	r2, r3
 80161dc:	d10c      	bne.n	80161f8 <ip4_reass+0xdc>
 80161de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161e0:	699a      	ldr	r2, [r3, #24]
 80161e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e4:	691b      	ldr	r3, [r3, #16]
 80161e6:	429a      	cmp	r2, r3
 80161e8:	d106      	bne.n	80161f8 <ip4_reass+0xdc>
 80161ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ec:	899a      	ldrh	r2, [r3, #12]
 80161ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f0:	889b      	ldrh	r3, [r3, #4]
 80161f2:	b29b      	uxth	r3, r3
 80161f4:	429a      	cmp	r2, r3
 80161f6:	d006      	beq.n	8016206 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80161f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	633b      	str	r3, [r7, #48]	; 0x30
 80161fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016200:	2b00      	cmp	r3, #0
 8016202:	d1e6      	bne.n	80161d2 <ip4_reass+0xb6>
 8016204:	e000      	b.n	8016208 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016206:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801620a:	2b00      	cmp	r3, #0
 801620c:	d109      	bne.n	8016222 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801620e:	8c3b      	ldrh	r3, [r7, #32]
 8016210:	4619      	mov	r1, r3
 8016212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016214:	f7ff fdb0 	bl	8015d78 <ip_reass_enqueue_new_datagram>
 8016218:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801621c:	2b00      	cmp	r3, #0
 801621e:	d11c      	bne.n	801625a <ip4_reass+0x13e>
      goto nullreturn;
 8016220:	e105      	b.n	801642e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016224:	88db      	ldrh	r3, [r3, #6]
 8016226:	b29b      	uxth	r3, r3
 8016228:	4618      	mov	r0, r3
 801622a:	f7f5 fcaf 	bl	800bb8c <lwip_htons>
 801622e:	4603      	mov	r3, r0
 8016230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016234:	2b00      	cmp	r3, #0
 8016236:	d110      	bne.n	801625a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801623a:	89db      	ldrh	r3, [r3, #14]
 801623c:	4618      	mov	r0, r3
 801623e:	f7f5 fca5 	bl	800bb8c <lwip_htons>
 8016242:	4603      	mov	r3, r0
 8016244:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016248:	2b00      	cmp	r3, #0
 801624a:	d006      	beq.n	801625a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801624e:	3308      	adds	r3, #8
 8016250:	2214      	movs	r2, #20
 8016252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016254:	4618      	mov	r0, r3
 8016256:	f000 fe85 	bl	8016f64 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801625c:	88db      	ldrh	r3, [r3, #6]
 801625e:	b29b      	uxth	r3, r3
 8016260:	f003 0320 	and.w	r3, r3, #32
 8016264:	2b00      	cmp	r3, #0
 8016266:	bf0c      	ite	eq
 8016268:	2301      	moveq	r3, #1
 801626a:	2300      	movne	r3, #0
 801626c:	b2db      	uxtb	r3, r3
 801626e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016270:	69fb      	ldr	r3, [r7, #28]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d00e      	beq.n	8016294 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016276:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801627a:	4413      	add	r3, r2
 801627c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801627e:	8b7a      	ldrh	r2, [r7, #26]
 8016280:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016282:	429a      	cmp	r2, r3
 8016284:	f0c0 80a0 	bcc.w	80163c8 <ip4_reass+0x2ac>
 8016288:	8b7b      	ldrh	r3, [r7, #26]
 801628a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801628e:	4293      	cmp	r3, r2
 8016290:	f200 809a 	bhi.w	80163c8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016294:	69fa      	ldr	r2, [r7, #28]
 8016296:	6879      	ldr	r1, [r7, #4]
 8016298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801629a:	f7ff fdd5 	bl	8015e48 <ip_reass_chain_frag_into_datagram_and_validate>
 801629e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80162a0:	697b      	ldr	r3, [r7, #20]
 80162a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162a6:	f000 809b 	beq.w	80163e0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80162aa:	4b48      	ldr	r3, [pc, #288]	; (80163cc <ip4_reass+0x2b0>)
 80162ac:	881a      	ldrh	r2, [r3, #0]
 80162ae:	8c3b      	ldrh	r3, [r7, #32]
 80162b0:	4413      	add	r3, r2
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	4b45      	ldr	r3, [pc, #276]	; (80163cc <ip4_reass+0x2b0>)
 80162b6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80162b8:	69fb      	ldr	r3, [r7, #28]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d00d      	beq.n	80162da <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80162be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80162c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80162c2:	4413      	add	r3, r2
 80162c4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80162c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162c8:	8a7a      	ldrh	r2, [r7, #18]
 80162ca:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80162cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ce:	7f9b      	ldrb	r3, [r3, #30]
 80162d0:	f043 0301 	orr.w	r3, r3, #1
 80162d4:	b2da      	uxtb	r2, r3
 80162d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	2b01      	cmp	r3, #1
 80162de:	d171      	bne.n	80163c4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80162e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e2:	8b9b      	ldrh	r3, [r3, #28]
 80162e4:	3314      	adds	r3, #20
 80162e6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80162e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ea:	685b      	ldr	r3, [r3, #4]
 80162ec:	685b      	ldr	r3, [r3, #4]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80162f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162f4:	685b      	ldr	r3, [r3, #4]
 80162f6:	685b      	ldr	r3, [r3, #4]
 80162f8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80162fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162fc:	3308      	adds	r3, #8
 80162fe:	2214      	movs	r2, #20
 8016300:	4619      	mov	r1, r3
 8016302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016304:	f000 fe2e 	bl	8016f64 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016308:	8a3b      	ldrh	r3, [r7, #16]
 801630a:	4618      	mov	r0, r3
 801630c:	f7f5 fc3e 	bl	800bb8c <lwip_htons>
 8016310:	4603      	mov	r3, r0
 8016312:	461a      	mov	r2, r3
 8016314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016316:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801631a:	2200      	movs	r2, #0
 801631c:	719a      	strb	r2, [r3, #6]
 801631e:	2200      	movs	r2, #0
 8016320:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016324:	2200      	movs	r2, #0
 8016326:	729a      	strb	r2, [r3, #10]
 8016328:	2200      	movs	r2, #0
 801632a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801632e:	685b      	ldr	r3, [r3, #4]
 8016330:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016332:	e00d      	b.n	8016350 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801633a:	2114      	movs	r1, #20
 801633c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801633e:	f7f6 fee7 	bl	800d110 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016342:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	f7f7 f837 	bl	800d3b8 <pbuf_cat>
      r = iprh->next_pbuf;
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016352:	2b00      	cmp	r3, #0
 8016354:	d1ee      	bne.n	8016334 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016356:	4b1e      	ldr	r3, [pc, #120]	; (80163d0 <ip4_reass+0x2b4>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801635c:	429a      	cmp	r2, r3
 801635e:	d102      	bne.n	8016366 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016360:	2300      	movs	r3, #0
 8016362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016364:	e010      	b.n	8016388 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016366:	4b1a      	ldr	r3, [pc, #104]	; (80163d0 <ip4_reass+0x2b4>)
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801636c:	e007      	b.n	801637e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016374:	429a      	cmp	r2, r3
 8016376:	d006      	beq.n	8016386 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016380:	2b00      	cmp	r3, #0
 8016382:	d1f4      	bne.n	801636e <ip4_reass+0x252>
 8016384:	e000      	b.n	8016388 <ip4_reass+0x26c>
          break;
 8016386:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801638a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801638c:	f7ff fd2e 	bl	8015dec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016390:	6878      	ldr	r0, [r7, #4]
 8016392:	f7f6 ffd1 	bl	800d338 <pbuf_clen>
 8016396:	4603      	mov	r3, r0
 8016398:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801639a:	4b0c      	ldr	r3, [pc, #48]	; (80163cc <ip4_reass+0x2b0>)
 801639c:	881b      	ldrh	r3, [r3, #0]
 801639e:	8c3a      	ldrh	r2, [r7, #32]
 80163a0:	429a      	cmp	r2, r3
 80163a2:	d906      	bls.n	80163b2 <ip4_reass+0x296>
 80163a4:	4b0b      	ldr	r3, [pc, #44]	; (80163d4 <ip4_reass+0x2b8>)
 80163a6:	f240 229b 	movw	r2, #667	; 0x29b
 80163aa:	490b      	ldr	r1, [pc, #44]	; (80163d8 <ip4_reass+0x2bc>)
 80163ac:	480b      	ldr	r0, [pc, #44]	; (80163dc <ip4_reass+0x2c0>)
 80163ae:	f000 fecf 	bl	8017150 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80163b2:	4b06      	ldr	r3, [pc, #24]	; (80163cc <ip4_reass+0x2b0>)
 80163b4:	881a      	ldrh	r2, [r3, #0]
 80163b6:	8c3b      	ldrh	r3, [r7, #32]
 80163b8:	1ad3      	subs	r3, r2, r3
 80163ba:	b29a      	uxth	r2, r3
 80163bc:	4b03      	ldr	r3, [pc, #12]	; (80163cc <ip4_reass+0x2b0>)
 80163be:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	e038      	b.n	8016436 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80163c4:	2300      	movs	r3, #0
 80163c6:	e036      	b.n	8016436 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80163c8:	bf00      	nop
 80163ca:	e00a      	b.n	80163e2 <ip4_reass+0x2c6>
 80163cc:	2000d460 	.word	0x2000d460
 80163d0:	2000d45c 	.word	0x2000d45c
 80163d4:	0801b21c 	.word	0x0801b21c
 80163d8:	0801b38c 	.word	0x0801b38c
 80163dc:	0801b264 	.word	0x0801b264
    goto nullreturn_ipr;
 80163e0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80163e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d106      	bne.n	80163f6 <ip4_reass+0x2da>
 80163e8:	4b15      	ldr	r3, [pc, #84]	; (8016440 <ip4_reass+0x324>)
 80163ea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80163ee:	4915      	ldr	r1, [pc, #84]	; (8016444 <ip4_reass+0x328>)
 80163f0:	4815      	ldr	r0, [pc, #84]	; (8016448 <ip4_reass+0x32c>)
 80163f2:	f000 fead 	bl	8017150 <iprintf>
  if (ipr->p == NULL) {
 80163f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f8:	685b      	ldr	r3, [r3, #4]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d116      	bne.n	801642c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80163fe:	4b13      	ldr	r3, [pc, #76]	; (801644c <ip4_reass+0x330>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016404:	429a      	cmp	r2, r3
 8016406:	d006      	beq.n	8016416 <ip4_reass+0x2fa>
 8016408:	4b0d      	ldr	r3, [pc, #52]	; (8016440 <ip4_reass+0x324>)
 801640a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801640e:	4910      	ldr	r1, [pc, #64]	; (8016450 <ip4_reass+0x334>)
 8016410:	480d      	ldr	r0, [pc, #52]	; (8016448 <ip4_reass+0x32c>)
 8016412:	f000 fe9d 	bl	8017150 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016416:	2100      	movs	r1, #0
 8016418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801641a:	f7ff fce7 	bl	8015dec <ip_reass_dequeue_datagram>
 801641e:	e006      	b.n	801642e <ip4_reass+0x312>
    goto nullreturn;
 8016420:	bf00      	nop
 8016422:	e004      	b.n	801642e <ip4_reass+0x312>
    goto nullreturn;
 8016424:	bf00      	nop
 8016426:	e002      	b.n	801642e <ip4_reass+0x312>
      goto nullreturn;
 8016428:	bf00      	nop
 801642a:	e000      	b.n	801642e <ip4_reass+0x312>
  }

nullreturn:
 801642c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801642e:	6878      	ldr	r0, [r7, #4]
 8016430:	f7f6 fef4 	bl	800d21c <pbuf_free>
  return NULL;
 8016434:	2300      	movs	r3, #0
}
 8016436:	4618      	mov	r0, r3
 8016438:	3738      	adds	r7, #56	; 0x38
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}
 801643e:	bf00      	nop
 8016440:	0801b21c 	.word	0x0801b21c
 8016444:	0801b3a8 	.word	0x0801b3a8
 8016448:	0801b264 	.word	0x0801b264
 801644c:	2000d45c 	.word	0x2000d45c
 8016450:	0801b3b4 	.word	0x0801b3b4

08016454 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016458:	2005      	movs	r0, #5
 801645a:	f7f6 f84d 	bl	800c4f8 <memp_malloc>
 801645e:	4603      	mov	r3, r0
}
 8016460:	4618      	mov	r0, r3
 8016462:	bd80      	pop	{r7, pc}

08016464 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b082      	sub	sp, #8
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d106      	bne.n	8016480 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016472:	4b07      	ldr	r3, [pc, #28]	; (8016490 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016474:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016478:	4906      	ldr	r1, [pc, #24]	; (8016494 <ip_frag_free_pbuf_custom_ref+0x30>)
 801647a:	4807      	ldr	r0, [pc, #28]	; (8016498 <ip_frag_free_pbuf_custom_ref+0x34>)
 801647c:	f000 fe68 	bl	8017150 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016480:	6879      	ldr	r1, [r7, #4]
 8016482:	2005      	movs	r0, #5
 8016484:	f7f6 f88a 	bl	800c59c <memp_free>
}
 8016488:	bf00      	nop
 801648a:	3708      	adds	r7, #8
 801648c:	46bd      	mov	sp, r7
 801648e:	bd80      	pop	{r7, pc}
 8016490:	0801b21c 	.word	0x0801b21c
 8016494:	0801b3d4 	.word	0x0801b3d4
 8016498:	0801b264 	.word	0x0801b264

0801649c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b084      	sub	sp, #16
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d106      	bne.n	80164bc <ipfrag_free_pbuf_custom+0x20>
 80164ae:	4b11      	ldr	r3, [pc, #68]	; (80164f4 <ipfrag_free_pbuf_custom+0x58>)
 80164b0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80164b4:	4910      	ldr	r1, [pc, #64]	; (80164f8 <ipfrag_free_pbuf_custom+0x5c>)
 80164b6:	4811      	ldr	r0, [pc, #68]	; (80164fc <ipfrag_free_pbuf_custom+0x60>)
 80164b8:	f000 fe4a 	bl	8017150 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80164bc:	68fa      	ldr	r2, [r7, #12]
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d006      	beq.n	80164d2 <ipfrag_free_pbuf_custom+0x36>
 80164c4:	4b0b      	ldr	r3, [pc, #44]	; (80164f4 <ipfrag_free_pbuf_custom+0x58>)
 80164c6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80164ca:	490d      	ldr	r1, [pc, #52]	; (8016500 <ipfrag_free_pbuf_custom+0x64>)
 80164cc:	480b      	ldr	r0, [pc, #44]	; (80164fc <ipfrag_free_pbuf_custom+0x60>)
 80164ce:	f000 fe3f 	bl	8017150 <iprintf>
  if (pcr->original != NULL) {
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	695b      	ldr	r3, [r3, #20]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d004      	beq.n	80164e4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	695b      	ldr	r3, [r3, #20]
 80164de:	4618      	mov	r0, r3
 80164e0:	f7f6 fe9c 	bl	800d21c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80164e4:	68f8      	ldr	r0, [r7, #12]
 80164e6:	f7ff ffbd 	bl	8016464 <ip_frag_free_pbuf_custom_ref>
}
 80164ea:	bf00      	nop
 80164ec:	3710      	adds	r7, #16
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
 80164f2:	bf00      	nop
 80164f4:	0801b21c 	.word	0x0801b21c
 80164f8:	0801b3e0 	.word	0x0801b3e0
 80164fc:	0801b264 	.word	0x0801b264
 8016500:	0801b3ec 	.word	0x0801b3ec

08016504 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b094      	sub	sp, #80	; 0x50
 8016508:	af02      	add	r7, sp, #8
 801650a:	60f8      	str	r0, [r7, #12]
 801650c:	60b9      	str	r1, [r7, #8]
 801650e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016510:	2300      	movs	r3, #0
 8016512:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801651a:	3b14      	subs	r3, #20
 801651c:	2b00      	cmp	r3, #0
 801651e:	da00      	bge.n	8016522 <ip4_frag+0x1e>
 8016520:	3307      	adds	r3, #7
 8016522:	10db      	asrs	r3, r3, #3
 8016524:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016526:	2314      	movs	r3, #20
 8016528:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	685b      	ldr	r3, [r3, #4]
 801652e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016532:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	f003 030f 	and.w	r3, r3, #15
 801653c:	b2db      	uxtb	r3, r3
 801653e:	009b      	lsls	r3, r3, #2
 8016540:	b2db      	uxtb	r3, r3
 8016542:	2b14      	cmp	r3, #20
 8016544:	d002      	beq.n	801654c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016546:	f06f 0305 	mvn.w	r3, #5
 801654a:	e110      	b.n	801676e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	895b      	ldrh	r3, [r3, #10]
 8016550:	2b13      	cmp	r3, #19
 8016552:	d809      	bhi.n	8016568 <ip4_frag+0x64>
 8016554:	4b88      	ldr	r3, [pc, #544]	; (8016778 <ip4_frag+0x274>)
 8016556:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801655a:	4988      	ldr	r1, [pc, #544]	; (801677c <ip4_frag+0x278>)
 801655c:	4888      	ldr	r0, [pc, #544]	; (8016780 <ip4_frag+0x27c>)
 801655e:	f000 fdf7 	bl	8017150 <iprintf>
 8016562:	f06f 0305 	mvn.w	r3, #5
 8016566:	e102      	b.n	801676e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801656a:	88db      	ldrh	r3, [r3, #6]
 801656c:	b29b      	uxth	r3, r3
 801656e:	4618      	mov	r0, r3
 8016570:	f7f5 fb0c 	bl	800bb8c <lwip_htons>
 8016574:	4603      	mov	r3, r0
 8016576:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016578:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801657a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801657e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016582:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016588:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	891b      	ldrh	r3, [r3, #8]
 801658e:	3b14      	subs	r3, #20
 8016590:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016594:	e0e1      	b.n	801675a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016596:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016598:	00db      	lsls	r3, r3, #3
 801659a:	b29b      	uxth	r3, r3
 801659c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80165a0:	4293      	cmp	r3, r2
 80165a2:	bf28      	it	cs
 80165a4:	4613      	movcs	r3, r2
 80165a6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80165a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80165ac:	2114      	movs	r1, #20
 80165ae:	200e      	movs	r0, #14
 80165b0:	f7f6 fb50 	bl	800cc54 <pbuf_alloc>
 80165b4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80165b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	f000 80d5 	beq.w	8016768 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80165be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c0:	895b      	ldrh	r3, [r3, #10]
 80165c2:	2b13      	cmp	r3, #19
 80165c4:	d806      	bhi.n	80165d4 <ip4_frag+0xd0>
 80165c6:	4b6c      	ldr	r3, [pc, #432]	; (8016778 <ip4_frag+0x274>)
 80165c8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80165cc:	496d      	ldr	r1, [pc, #436]	; (8016784 <ip4_frag+0x280>)
 80165ce:	486c      	ldr	r0, [pc, #432]	; (8016780 <ip4_frag+0x27c>)
 80165d0:	f000 fdbe 	bl	8017150 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80165d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165d6:	685b      	ldr	r3, [r3, #4]
 80165d8:	2214      	movs	r2, #20
 80165da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80165dc:	4618      	mov	r0, r3
 80165de:	f000 fcc1 	bl	8016f64 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80165e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165e4:	685b      	ldr	r3, [r3, #4]
 80165e6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80165e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80165ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80165ee:	e064      	b.n	80166ba <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	895a      	ldrh	r2, [r3, #10]
 80165f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80165f6:	1ad3      	subs	r3, r2, r3
 80165f8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	895b      	ldrh	r3, [r3, #10]
 80165fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016600:	429a      	cmp	r2, r3
 8016602:	d906      	bls.n	8016612 <ip4_frag+0x10e>
 8016604:	4b5c      	ldr	r3, [pc, #368]	; (8016778 <ip4_frag+0x274>)
 8016606:	f240 322d 	movw	r2, #813	; 0x32d
 801660a:	495f      	ldr	r1, [pc, #380]	; (8016788 <ip4_frag+0x284>)
 801660c:	485c      	ldr	r0, [pc, #368]	; (8016780 <ip4_frag+0x27c>)
 801660e:	f000 fd9f 	bl	8017150 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016612:	8bfa      	ldrh	r2, [r7, #30]
 8016614:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016618:	4293      	cmp	r3, r2
 801661a:	bf28      	it	cs
 801661c:	4613      	movcs	r3, r2
 801661e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016622:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016626:	2b00      	cmp	r3, #0
 8016628:	d105      	bne.n	8016636 <ip4_frag+0x132>
        poff = 0;
 801662a:	2300      	movs	r3, #0
 801662c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	60fb      	str	r3, [r7, #12]
        continue;
 8016634:	e041      	b.n	80166ba <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016636:	f7ff ff0d 	bl	8016454 <ip_frag_alloc_pbuf_custom_ref>
 801663a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801663c:	69bb      	ldr	r3, [r7, #24]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d103      	bne.n	801664a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016644:	f7f6 fdea 	bl	800d21c <pbuf_free>
        goto memerr;
 8016648:	e08f      	b.n	801676a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801664a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016650:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016652:	4413      	add	r3, r2
 8016654:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016658:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801665c:	9201      	str	r2, [sp, #4]
 801665e:	9300      	str	r3, [sp, #0]
 8016660:	4603      	mov	r3, r0
 8016662:	2241      	movs	r2, #65	; 0x41
 8016664:	2000      	movs	r0, #0
 8016666:	f7f6 fc1f 	bl	800cea8 <pbuf_alloced_custom>
 801666a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801666c:	697b      	ldr	r3, [r7, #20]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d106      	bne.n	8016680 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016672:	69b8      	ldr	r0, [r7, #24]
 8016674:	f7ff fef6 	bl	8016464 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801667a:	f7f6 fdcf 	bl	800d21c <pbuf_free>
        goto memerr;
 801667e:	e074      	b.n	801676a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016680:	68f8      	ldr	r0, [r7, #12]
 8016682:	f7f6 fe71 	bl	800d368 <pbuf_ref>
      pcr->original = p;
 8016686:	69bb      	ldr	r3, [r7, #24]
 8016688:	68fa      	ldr	r2, [r7, #12]
 801668a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801668c:	69bb      	ldr	r3, [r7, #24]
 801668e:	4a3f      	ldr	r2, [pc, #252]	; (801678c <ip4_frag+0x288>)
 8016690:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016692:	6979      	ldr	r1, [r7, #20]
 8016694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016696:	f7f6 fe8f 	bl	800d3b8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801669a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801669e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80166a2:	1ad3      	subs	r3, r2, r3
 80166a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80166a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d004      	beq.n	80166ba <ip4_frag+0x1b6>
        poff = 0;
 80166b0:	2300      	movs	r3, #0
 80166b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80166ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d196      	bne.n	80165f0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80166c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80166c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80166c8:	4413      	add	r3, r2
 80166ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80166cc:	68bb      	ldr	r3, [r7, #8]
 80166ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80166d0:	f1a3 0213 	sub.w	r2, r3, #19
 80166d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80166d8:	429a      	cmp	r2, r3
 80166da:	bfcc      	ite	gt
 80166dc:	2301      	movgt	r3, #1
 80166de:	2300      	movle	r3, #0
 80166e0:	b2db      	uxtb	r3, r3
 80166e2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80166e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80166e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80166ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80166ee:	6a3b      	ldr	r3, [r7, #32]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d002      	beq.n	80166fa <ip4_frag+0x1f6>
 80166f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d003      	beq.n	8016702 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80166fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80166fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016700:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016702:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016704:	4618      	mov	r0, r3
 8016706:	f7f5 fa41 	bl	800bb8c <lwip_htons>
 801670a:	4603      	mov	r3, r0
 801670c:	461a      	mov	r2, r3
 801670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016710:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016712:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016714:	3314      	adds	r3, #20
 8016716:	b29b      	uxth	r3, r3
 8016718:	4618      	mov	r0, r3
 801671a:	f7f5 fa37 	bl	800bb8c <lwip_htons>
 801671e:	4603      	mov	r3, r0
 8016720:	461a      	mov	r2, r3
 8016722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016724:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016728:	2200      	movs	r2, #0
 801672a:	729a      	strb	r2, [r3, #10]
 801672c:	2200      	movs	r2, #0
 801672e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016730:	68bb      	ldr	r3, [r7, #8]
 8016732:	695b      	ldr	r3, [r3, #20]
 8016734:	687a      	ldr	r2, [r7, #4]
 8016736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016738:	68b8      	ldr	r0, [r7, #8]
 801673a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801673c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801673e:	f7f6 fd6d 	bl	800d21c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016742:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016746:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016748:	1ad3      	subs	r3, r2, r3
 801674a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801674e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016752:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016754:	4413      	add	r3, r2
 8016756:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801675a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801675e:	2b00      	cmp	r3, #0
 8016760:	f47f af19 	bne.w	8016596 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016764:	2300      	movs	r3, #0
 8016766:	e002      	b.n	801676e <ip4_frag+0x26a>
      goto memerr;
 8016768:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801676a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801676e:	4618      	mov	r0, r3
 8016770:	3748      	adds	r7, #72	; 0x48
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}
 8016776:	bf00      	nop
 8016778:	0801b21c 	.word	0x0801b21c
 801677c:	0801b3f8 	.word	0x0801b3f8
 8016780:	0801b264 	.word	0x0801b264
 8016784:	0801b414 	.word	0x0801b414
 8016788:	0801b434 	.word	0x0801b434
 801678c:	0801649d 	.word	0x0801649d

08016790 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b086      	sub	sp, #24
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
 8016798:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801679a:	230e      	movs	r3, #14
 801679c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	895b      	ldrh	r3, [r3, #10]
 80167a2:	2b0e      	cmp	r3, #14
 80167a4:	d96e      	bls.n	8016884 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	7bdb      	ldrb	r3, [r3, #15]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d106      	bne.n	80167bc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80167ae:	683b      	ldr	r3, [r7, #0]
 80167b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80167b4:	3301      	adds	r3, #1
 80167b6:	b2da      	uxtb	r2, r3
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	685b      	ldr	r3, [r3, #4]
 80167c0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80167c2:	693b      	ldr	r3, [r7, #16]
 80167c4:	7b1a      	ldrb	r2, [r3, #12]
 80167c6:	7b5b      	ldrb	r3, [r3, #13]
 80167c8:	021b      	lsls	r3, r3, #8
 80167ca:	4313      	orrs	r3, r2
 80167cc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80167ce:	693b      	ldr	r3, [r7, #16]
 80167d0:	781b      	ldrb	r3, [r3, #0]
 80167d2:	f003 0301 	and.w	r3, r3, #1
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d023      	beq.n	8016822 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80167da:	693b      	ldr	r3, [r7, #16]
 80167dc:	781b      	ldrb	r3, [r3, #0]
 80167de:	2b01      	cmp	r3, #1
 80167e0:	d10f      	bne.n	8016802 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80167e2:	693b      	ldr	r3, [r7, #16]
 80167e4:	785b      	ldrb	r3, [r3, #1]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d11b      	bne.n	8016822 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80167ea:	693b      	ldr	r3, [r7, #16]
 80167ec:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80167ee:	2b5e      	cmp	r3, #94	; 0x5e
 80167f0:	d117      	bne.n	8016822 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	7b5b      	ldrb	r3, [r3, #13]
 80167f6:	f043 0310 	orr.w	r3, r3, #16
 80167fa:	b2da      	uxtb	r2, r3
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	735a      	strb	r2, [r3, #13]
 8016800:	e00f      	b.n	8016822 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016802:	693b      	ldr	r3, [r7, #16]
 8016804:	2206      	movs	r2, #6
 8016806:	4928      	ldr	r1, [pc, #160]	; (80168a8 <ethernet_input+0x118>)
 8016808:	4618      	mov	r0, r3
 801680a:	f000 fb9b 	bl	8016f44 <memcmp>
 801680e:	4603      	mov	r3, r0
 8016810:	2b00      	cmp	r3, #0
 8016812:	d106      	bne.n	8016822 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	7b5b      	ldrb	r3, [r3, #13]
 8016818:	f043 0308 	orr.w	r3, r3, #8
 801681c:	b2da      	uxtb	r2, r3
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016822:	89fb      	ldrh	r3, [r7, #14]
 8016824:	2b08      	cmp	r3, #8
 8016826:	d003      	beq.n	8016830 <ethernet_input+0xa0>
 8016828:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801682c:	d014      	beq.n	8016858 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801682e:	e032      	b.n	8016896 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016830:	683b      	ldr	r3, [r7, #0]
 8016832:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016836:	f003 0308 	and.w	r3, r3, #8
 801683a:	2b00      	cmp	r3, #0
 801683c:	d024      	beq.n	8016888 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801683e:	8afb      	ldrh	r3, [r7, #22]
 8016840:	4619      	mov	r1, r3
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f7f6 fc64 	bl	800d110 <pbuf_remove_header>
 8016848:	4603      	mov	r3, r0
 801684a:	2b00      	cmp	r3, #0
 801684c:	d11e      	bne.n	801688c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801684e:	6839      	ldr	r1, [r7, #0]
 8016850:	6878      	ldr	r0, [r7, #4]
 8016852:	f7fe ff21 	bl	8015698 <ip4_input>
      break;
 8016856:	e013      	b.n	8016880 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016858:	683b      	ldr	r3, [r7, #0]
 801685a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801685e:	f003 0308 	and.w	r3, r3, #8
 8016862:	2b00      	cmp	r3, #0
 8016864:	d014      	beq.n	8016890 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016866:	8afb      	ldrh	r3, [r7, #22]
 8016868:	4619      	mov	r1, r3
 801686a:	6878      	ldr	r0, [r7, #4]
 801686c:	f7f6 fc50 	bl	800d110 <pbuf_remove_header>
 8016870:	4603      	mov	r3, r0
 8016872:	2b00      	cmp	r3, #0
 8016874:	d10e      	bne.n	8016894 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016876:	6839      	ldr	r1, [r7, #0]
 8016878:	6878      	ldr	r0, [r7, #4]
 801687a:	f7fe f8c1 	bl	8014a00 <etharp_input>
      break;
 801687e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016880:	2300      	movs	r3, #0
 8016882:	e00c      	b.n	801689e <ethernet_input+0x10e>
    goto free_and_return;
 8016884:	bf00      	nop
 8016886:	e006      	b.n	8016896 <ethernet_input+0x106>
        goto free_and_return;
 8016888:	bf00      	nop
 801688a:	e004      	b.n	8016896 <ethernet_input+0x106>
        goto free_and_return;
 801688c:	bf00      	nop
 801688e:	e002      	b.n	8016896 <ethernet_input+0x106>
        goto free_and_return;
 8016890:	bf00      	nop
 8016892:	e000      	b.n	8016896 <ethernet_input+0x106>
        goto free_and_return;
 8016894:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016896:	6878      	ldr	r0, [r7, #4]
 8016898:	f7f6 fcc0 	bl	800d21c <pbuf_free>
  return ERR_OK;
 801689c:	2300      	movs	r3, #0
}
 801689e:	4618      	mov	r0, r3
 80168a0:	3718      	adds	r7, #24
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	0801b610 	.word	0x0801b610

080168ac <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b086      	sub	sp, #24
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	60f8      	str	r0, [r7, #12]
 80168b4:	60b9      	str	r1, [r7, #8]
 80168b6:	607a      	str	r2, [r7, #4]
 80168b8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80168ba:	8c3b      	ldrh	r3, [r7, #32]
 80168bc:	4618      	mov	r0, r3
 80168be:	f7f5 f965 	bl	800bb8c <lwip_htons>
 80168c2:	4603      	mov	r3, r0
 80168c4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80168c6:	210e      	movs	r1, #14
 80168c8:	68b8      	ldr	r0, [r7, #8]
 80168ca:	f7f6 fc11 	bl	800d0f0 <pbuf_add_header>
 80168ce:	4603      	mov	r3, r0
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d125      	bne.n	8016920 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80168d4:	68bb      	ldr	r3, [r7, #8]
 80168d6:	685b      	ldr	r3, [r3, #4]
 80168d8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80168da:	693b      	ldr	r3, [r7, #16]
 80168dc:	8afa      	ldrh	r2, [r7, #22]
 80168de:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80168e0:	693b      	ldr	r3, [r7, #16]
 80168e2:	2206      	movs	r2, #6
 80168e4:	6839      	ldr	r1, [r7, #0]
 80168e6:	4618      	mov	r0, r3
 80168e8:	f000 fb3c 	bl	8016f64 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80168ec:	693b      	ldr	r3, [r7, #16]
 80168ee:	3306      	adds	r3, #6
 80168f0:	2206      	movs	r2, #6
 80168f2:	6879      	ldr	r1, [r7, #4]
 80168f4:	4618      	mov	r0, r3
 80168f6:	f000 fb35 	bl	8016f64 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016900:	2b06      	cmp	r3, #6
 8016902:	d006      	beq.n	8016912 <ethernet_output+0x66>
 8016904:	4b0a      	ldr	r3, [pc, #40]	; (8016930 <ethernet_output+0x84>)
 8016906:	f44f 7299 	mov.w	r2, #306	; 0x132
 801690a:	490a      	ldr	r1, [pc, #40]	; (8016934 <ethernet_output+0x88>)
 801690c:	480a      	ldr	r0, [pc, #40]	; (8016938 <ethernet_output+0x8c>)
 801690e:	f000 fc1f 	bl	8017150 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	699b      	ldr	r3, [r3, #24]
 8016916:	68b9      	ldr	r1, [r7, #8]
 8016918:	68f8      	ldr	r0, [r7, #12]
 801691a:	4798      	blx	r3
 801691c:	4603      	mov	r3, r0
 801691e:	e002      	b.n	8016926 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016920:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016922:	f06f 0301 	mvn.w	r3, #1
}
 8016926:	4618      	mov	r0, r3
 8016928:	3718      	adds	r7, #24
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}
 801692e:	bf00      	nop
 8016930:	0801b444 	.word	0x0801b444
 8016934:	0801b47c 	.word	0x0801b47c
 8016938:	0801b4b0 	.word	0x0801b4b0

0801693c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b086      	sub	sp, #24
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
 8016944:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016946:	683b      	ldr	r3, [r7, #0]
 8016948:	60bb      	str	r3, [r7, #8]
 801694a:	2304      	movs	r3, #4
 801694c:	60fb      	str	r3, [r7, #12]
 801694e:	2300      	movs	r3, #0
 8016950:	613b      	str	r3, [r7, #16]
 8016952:	2300      	movs	r3, #0
 8016954:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016956:	f107 0308 	add.w	r3, r7, #8
 801695a:	2100      	movs	r1, #0
 801695c:	4618      	mov	r0, r3
 801695e:	f7f0 fab2 	bl	8006ec6 <osMessageCreate>
 8016962:	4602      	mov	r2, r0
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d102      	bne.n	8016976 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016970:	f04f 33ff 	mov.w	r3, #4294967295
 8016974:	e000      	b.n	8016978 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016976:	2300      	movs	r3, #0
}
 8016978:	4618      	mov	r0, r3
 801697a:	3718      	adds	r7, #24
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}

08016980 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	4618      	mov	r0, r3
 801698e:	f7f0 fb77 	bl	8007080 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	4618      	mov	r0, r3
 8016998:	f7f0 fb88 	bl	80070ac <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801699c:	bf00      	nop
 801699e:	3708      	adds	r7, #8
 80169a0:	46bd      	mov	sp, r7
 80169a2:	bd80      	pop	{r7, pc}

080169a4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b084      	sub	sp, #16
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
 80169ac:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	6839      	ldr	r1, [r7, #0]
 80169b4:	2200      	movs	r2, #0
 80169b6:	4618      	mov	r0, r3
 80169b8:	f7f0 faae 	bl	8006f18 <osMessagePut>
 80169bc:	4603      	mov	r3, r0
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d102      	bne.n	80169c8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80169c2:	2300      	movs	r3, #0
 80169c4:	73fb      	strb	r3, [r7, #15]
 80169c6:	e001      	b.n	80169cc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80169c8:	23ff      	movs	r3, #255	; 0xff
 80169ca:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80169cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80169d0:	4618      	mov	r0, r3
 80169d2:	3710      	adds	r7, #16
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd80      	pop	{r7, pc}

080169d8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b08c      	sub	sp, #48	; 0x30
 80169dc:	af00      	add	r7, sp, #0
 80169de:	61f8      	str	r0, [r7, #28]
 80169e0:	61b9      	str	r1, [r7, #24]
 80169e2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80169e4:	f7f0 f899 	bl	8006b1a <osKernelSysTick>
 80169e8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80169ea:	697b      	ldr	r3, [r7, #20]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d017      	beq.n	8016a20 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80169f0:	69fb      	ldr	r3, [r7, #28]
 80169f2:	6819      	ldr	r1, [r3, #0]
 80169f4:	f107 0320 	add.w	r3, r7, #32
 80169f8:	697a      	ldr	r2, [r7, #20]
 80169fa:	4618      	mov	r0, r3
 80169fc:	f7f0 facc 	bl	8006f98 <osMessageGet>

    if(event.status == osEventMessage)
 8016a00:	6a3b      	ldr	r3, [r7, #32]
 8016a02:	2b10      	cmp	r3, #16
 8016a04:	d109      	bne.n	8016a1a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a08:	461a      	mov	r2, r3
 8016a0a:	69bb      	ldr	r3, [r7, #24]
 8016a0c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016a0e:	f7f0 f884 	bl	8006b1a <osKernelSysTick>
 8016a12:	4602      	mov	r2, r0
 8016a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a16:	1ad3      	subs	r3, r2, r3
 8016a18:	e019      	b.n	8016a4e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8016a1e:	e016      	b.n	8016a4e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016a20:	69fb      	ldr	r3, [r7, #28]
 8016a22:	6819      	ldr	r1, [r3, #0]
 8016a24:	463b      	mov	r3, r7
 8016a26:	f04f 32ff 	mov.w	r2, #4294967295
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f7f0 fab4 	bl	8006f98 <osMessageGet>
 8016a30:	f107 0320 	add.w	r3, r7, #32
 8016a34:	463a      	mov	r2, r7
 8016a36:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a3e:	461a      	mov	r2, r3
 8016a40:	69bb      	ldr	r3, [r7, #24]
 8016a42:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016a44:	f7f0 f869 	bl	8006b1a <osKernelSysTick>
 8016a48:	4602      	mov	r2, r0
 8016a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a4c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016a4e:	4618      	mov	r0, r3
 8016a50:	3730      	adds	r7, #48	; 0x30
 8016a52:	46bd      	mov	sp, r7
 8016a54:	bd80      	pop	{r7, pc}

08016a56 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016a56:	b580      	push	{r7, lr}
 8016a58:	b086      	sub	sp, #24
 8016a5a:	af00      	add	r7, sp, #0
 8016a5c:	6078      	str	r0, [r7, #4]
 8016a5e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	6819      	ldr	r1, [r3, #0]
 8016a64:	f107 030c 	add.w	r3, r7, #12
 8016a68:	2200      	movs	r2, #0
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f7f0 fa94 	bl	8006f98 <osMessageGet>

  if(event.status == osEventMessage)
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	2b10      	cmp	r3, #16
 8016a74:	d105      	bne.n	8016a82 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016a76:	693b      	ldr	r3, [r7, #16]
 8016a78:	461a      	mov	r2, r3
 8016a7a:	683b      	ldr	r3, [r7, #0]
 8016a7c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8016a7e:	2300      	movs	r3, #0
 8016a80:	e001      	b.n	8016a86 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016a82:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8016a86:	4618      	mov	r0, r3
 8016a88:	3718      	adds	r7, #24
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}

08016a8e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016a8e:	b480      	push	{r7}
 8016a90:	b083      	sub	sp, #12
 8016a92:	af00      	add	r7, sp, #0
 8016a94:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d101      	bne.n	8016aa2 <sys_mbox_valid+0x14>
    return 0;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	e000      	b.n	8016aa4 <sys_mbox_valid+0x16>
  else
    return 1;
 8016aa2:	2301      	movs	r3, #1
}
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	370c      	adds	r7, #12
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aae:	4770      	bx	lr

08016ab0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016ab0:	b480      	push	{r7}
 8016ab2:	b083      	sub	sp, #12
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	2200      	movs	r2, #0
 8016abc:	601a      	str	r2, [r3, #0]
}
 8016abe:	bf00      	nop
 8016ac0:	370c      	adds	r7, #12
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac8:	4770      	bx	lr

08016aca <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016aca:	b580      	push	{r7, lr}
 8016acc:	b084      	sub	sp, #16
 8016ace:	af00      	add	r7, sp, #0
 8016ad0:	6078      	str	r0, [r7, #4]
 8016ad2:	460b      	mov	r3, r1
 8016ad4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	60bb      	str	r3, [r7, #8]
 8016ada:	2300      	movs	r3, #0
 8016adc:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8016ade:	f107 0308 	add.w	r3, r7, #8
 8016ae2:	2101      	movs	r1, #1
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f7f0 f925 	bl	8006d34 <osSemaphoreCreate>
 8016aea:	4602      	mov	r2, r0
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d102      	bne.n	8016afe <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016af8:	f04f 33ff 	mov.w	r3, #4294967295
 8016afc:	e009      	b.n	8016b12 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8016afe:	78fb      	ldrb	r3, [r7, #3]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d105      	bne.n	8016b10 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	2100      	movs	r1, #0
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7f0 f944 	bl	8006d98 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016b10:	2300      	movs	r3, #0
}
 8016b12:	4618      	mov	r0, r3
 8016b14:	3710      	adds	r7, #16
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}

08016b1a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016b1a:	b580      	push	{r7, lr}
 8016b1c:	b084      	sub	sp, #16
 8016b1e:	af00      	add	r7, sp, #0
 8016b20:	6078      	str	r0, [r7, #4]
 8016b22:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016b24:	f7ef fff9 	bl	8006b1a <osKernelSysTick>
 8016b28:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016b2a:	683b      	ldr	r3, [r7, #0]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d011      	beq.n	8016b54 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	6839      	ldr	r1, [r7, #0]
 8016b36:	4618      	mov	r0, r3
 8016b38:	f7f0 f92e 	bl	8006d98 <osSemaphoreWait>
 8016b3c:	4603      	mov	r3, r0
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d105      	bne.n	8016b4e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8016b42:	f7ef ffea 	bl	8006b1a <osKernelSysTick>
 8016b46:	4602      	mov	r2, r0
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	1ad3      	subs	r3, r2, r3
 8016b4c:	e012      	b.n	8016b74 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8016b52:	e00f      	b.n	8016b74 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016b54:	bf00      	nop
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	f04f 31ff 	mov.w	r1, #4294967295
 8016b5e:	4618      	mov	r0, r3
 8016b60:	f7f0 f91a 	bl	8006d98 <osSemaphoreWait>
 8016b64:	4603      	mov	r3, r0
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d1f5      	bne.n	8016b56 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016b6a:	f7ef ffd6 	bl	8006b1a <osKernelSysTick>
 8016b6e:	4602      	mov	r2, r0
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016b74:	4618      	mov	r0, r3
 8016b76:	3710      	adds	r7, #16
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}

08016b7c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b082      	sub	sp, #8
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	4618      	mov	r0, r3
 8016b8a:	f7f0 f953 	bl	8006e34 <osSemaphoreRelease>
}
 8016b8e:	bf00      	nop
 8016b90:	3708      	adds	r7, #8
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}

08016b96 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016b96:	b580      	push	{r7, lr}
 8016b98:	b082      	sub	sp, #8
 8016b9a:	af00      	add	r7, sp, #0
 8016b9c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	f7f0 f97c 	bl	8006ea0 <osSemaphoreDelete>
}
 8016ba8:	bf00      	nop
 8016baa:	3708      	adds	r7, #8
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}

08016bb0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016bb0:	b480      	push	{r7}
 8016bb2:	b083      	sub	sp, #12
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d101      	bne.n	8016bc4 <sys_sem_valid+0x14>
    return 0;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	e000      	b.n	8016bc6 <sys_sem_valid+0x16>
  else
    return 1;
 8016bc4:	2301      	movs	r3, #1
}
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	370c      	adds	r7, #12
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd0:	4770      	bx	lr

08016bd2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016bd2:	b480      	push	{r7}
 8016bd4:	b083      	sub	sp, #12
 8016bd6:	af00      	add	r7, sp, #0
 8016bd8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	2200      	movs	r2, #0
 8016bde:	601a      	str	r2, [r3, #0]
}
 8016be0:	bf00      	nop
 8016be2:	370c      	adds	r7, #12
 8016be4:	46bd      	mov	sp, r7
 8016be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bea:	4770      	bx	lr

08016bec <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016bf0:	4803      	ldr	r0, [pc, #12]	; (8016c00 <sys_init+0x14>)
 8016bf2:	f7f0 f802 	bl	8006bfa <osMutexCreate>
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	4a02      	ldr	r2, [pc, #8]	; (8016c04 <sys_init+0x18>)
 8016bfa:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016bfc:	bf00      	nop
 8016bfe:	bd80      	pop	{r7, pc}
 8016c00:	0801b620 	.word	0x0801b620
 8016c04:	2000d464 	.word	0x2000d464

08016c08 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b084      	sub	sp, #16
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016c10:	2300      	movs	r3, #0
 8016c12:	60bb      	str	r3, [r7, #8]
 8016c14:	2300      	movs	r3, #0
 8016c16:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016c18:	f107 0308 	add.w	r3, r7, #8
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7ef ffec 	bl	8006bfa <osMutexCreate>
 8016c22:	4602      	mov	r2, r0
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d102      	bne.n	8016c36 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016c30:	f04f 33ff 	mov.w	r3, #4294967295
 8016c34:	e000      	b.n	8016c38 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016c36:	2300      	movs	r3, #0
}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3710      	adds	r7, #16
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}

08016c40 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b082      	sub	sp, #8
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8016c50:	4618      	mov	r0, r3
 8016c52:	f7ef ffeb 	bl	8006c2c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016c56:	bf00      	nop
 8016c58:	3708      	adds	r7, #8
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd80      	pop	{r7, pc}

08016c5e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016c5e:	b580      	push	{r7, lr}
 8016c60:	b082      	sub	sp, #8
 8016c62:	af00      	add	r7, sp, #0
 8016c64:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f7f0 f82c 	bl	8006cc8 <osMutexRelease>
}
 8016c70:	bf00      	nop
 8016c72:	3708      	adds	r7, #8
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd80      	pop	{r7, pc}

08016c78 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b08c      	sub	sp, #48	; 0x30
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	60f8      	str	r0, [r7, #12]
 8016c80:	60b9      	str	r1, [r7, #8]
 8016c82:	607a      	str	r2, [r7, #4]
 8016c84:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016c86:	f107 0314 	add.w	r3, r7, #20
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	601a      	str	r2, [r3, #0]
 8016c8e:	605a      	str	r2, [r3, #4]
 8016c90:	609a      	str	r2, [r3, #8]
 8016c92:	60da      	str	r2, [r3, #12]
 8016c94:	611a      	str	r2, [r3, #16]
 8016c96:	615a      	str	r2, [r3, #20]
 8016c98:	619a      	str	r2, [r3, #24]
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	617b      	str	r3, [r7, #20]
 8016c9e:	68bb      	ldr	r3, [r7, #8]
 8016ca0:	61bb      	str	r3, [r7, #24]
 8016ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ca4:	b21b      	sxth	r3, r3
 8016ca6:	83bb      	strh	r3, [r7, #28]
 8016ca8:	683b      	ldr	r3, [r7, #0]
 8016caa:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016cac:	f107 0314 	add.w	r3, r7, #20
 8016cb0:	6879      	ldr	r1, [r7, #4]
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	f7ef ff41 	bl	8006b3a <osThreadCreate>
 8016cb8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016cba:	4618      	mov	r0, r3
 8016cbc:	3730      	adds	r7, #48	; 0x30
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	bd80      	pop	{r7, pc}
	...

08016cc4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016cc8:	4b04      	ldr	r3, [pc, #16]	; (8016cdc <sys_arch_protect+0x18>)
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7ef ffab 	bl	8006c2c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016cd6:	2301      	movs	r3, #1
}
 8016cd8:	4618      	mov	r0, r3
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	2000d464 	.word	0x2000d464

08016ce0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b082      	sub	sp, #8
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016ce8:	4b04      	ldr	r3, [pc, #16]	; (8016cfc <sys_arch_unprotect+0x1c>)
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	4618      	mov	r0, r3
 8016cee:	f7ef ffeb 	bl	8006cc8 <osMutexRelease>
}
 8016cf2:	bf00      	nop
 8016cf4:	3708      	adds	r7, #8
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	bd80      	pop	{r7, pc}
 8016cfa:	bf00      	nop
 8016cfc:	2000d464 	.word	0x2000d464

08016d00 <std>:
 8016d00:	2300      	movs	r3, #0
 8016d02:	b510      	push	{r4, lr}
 8016d04:	4604      	mov	r4, r0
 8016d06:	e9c0 3300 	strd	r3, r3, [r0]
 8016d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d0e:	6083      	str	r3, [r0, #8]
 8016d10:	8181      	strh	r1, [r0, #12]
 8016d12:	6643      	str	r3, [r0, #100]	; 0x64
 8016d14:	81c2      	strh	r2, [r0, #14]
 8016d16:	6183      	str	r3, [r0, #24]
 8016d18:	4619      	mov	r1, r3
 8016d1a:	2208      	movs	r2, #8
 8016d1c:	305c      	adds	r0, #92	; 0x5c
 8016d1e:	f000 f92f 	bl	8016f80 <memset>
 8016d22:	4b05      	ldr	r3, [pc, #20]	; (8016d38 <std+0x38>)
 8016d24:	6263      	str	r3, [r4, #36]	; 0x24
 8016d26:	4b05      	ldr	r3, [pc, #20]	; (8016d3c <std+0x3c>)
 8016d28:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d2a:	4b05      	ldr	r3, [pc, #20]	; (8016d40 <std+0x40>)
 8016d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d2e:	4b05      	ldr	r3, [pc, #20]	; (8016d44 <std+0x44>)
 8016d30:	6224      	str	r4, [r4, #32]
 8016d32:	6323      	str	r3, [r4, #48]	; 0x30
 8016d34:	bd10      	pop	{r4, pc}
 8016d36:	bf00      	nop
 8016d38:	080172f1 	.word	0x080172f1
 8016d3c:	08017313 	.word	0x08017313
 8016d40:	0801734b 	.word	0x0801734b
 8016d44:	0801736f 	.word	0x0801736f

08016d48 <_cleanup_r>:
 8016d48:	4901      	ldr	r1, [pc, #4]	; (8016d50 <_cleanup_r+0x8>)
 8016d4a:	f000 b8af 	b.w	8016eac <_fwalk_reent>
 8016d4e:	bf00      	nop
 8016d50:	08017505 	.word	0x08017505

08016d54 <__sfmoreglue>:
 8016d54:	b570      	push	{r4, r5, r6, lr}
 8016d56:	2268      	movs	r2, #104	; 0x68
 8016d58:	1e4d      	subs	r5, r1, #1
 8016d5a:	4355      	muls	r5, r2
 8016d5c:	460e      	mov	r6, r1
 8016d5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016d62:	f000 f981 	bl	8017068 <_malloc_r>
 8016d66:	4604      	mov	r4, r0
 8016d68:	b140      	cbz	r0, 8016d7c <__sfmoreglue+0x28>
 8016d6a:	2100      	movs	r1, #0
 8016d6c:	e9c0 1600 	strd	r1, r6, [r0]
 8016d70:	300c      	adds	r0, #12
 8016d72:	60a0      	str	r0, [r4, #8]
 8016d74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016d78:	f000 f902 	bl	8016f80 <memset>
 8016d7c:	4620      	mov	r0, r4
 8016d7e:	bd70      	pop	{r4, r5, r6, pc}

08016d80 <__sfp_lock_acquire>:
 8016d80:	4801      	ldr	r0, [pc, #4]	; (8016d88 <__sfp_lock_acquire+0x8>)
 8016d82:	f7eb ba89 	b.w	8002298 <__retarget_lock_acquire_recursive>
 8016d86:	bf00      	nop
 8016d88:	200005a0 	.word	0x200005a0

08016d8c <__sfp_lock_release>:
 8016d8c:	4801      	ldr	r0, [pc, #4]	; (8016d94 <__sfp_lock_release+0x8>)
 8016d8e:	f7eb ba97 	b.w	80022c0 <__retarget_lock_release_recursive>
 8016d92:	bf00      	nop
 8016d94:	200005a0 	.word	0x200005a0

08016d98 <__sinit_lock_acquire>:
 8016d98:	4801      	ldr	r0, [pc, #4]	; (8016da0 <__sinit_lock_acquire+0x8>)
 8016d9a:	f7eb ba7d 	b.w	8002298 <__retarget_lock_acquire_recursive>
 8016d9e:	bf00      	nop
 8016da0:	20000594 	.word	0x20000594

08016da4 <__sinit_lock_release>:
 8016da4:	4801      	ldr	r0, [pc, #4]	; (8016dac <__sinit_lock_release+0x8>)
 8016da6:	f7eb ba8b 	b.w	80022c0 <__retarget_lock_release_recursive>
 8016daa:	bf00      	nop
 8016dac:	20000594 	.word	0x20000594

08016db0 <__sinit>:
 8016db0:	b510      	push	{r4, lr}
 8016db2:	4604      	mov	r4, r0
 8016db4:	f7ff fff0 	bl	8016d98 <__sinit_lock_acquire>
 8016db8:	69a3      	ldr	r3, [r4, #24]
 8016dba:	b11b      	cbz	r3, 8016dc4 <__sinit+0x14>
 8016dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dc0:	f7ff bff0 	b.w	8016da4 <__sinit_lock_release>
 8016dc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016dc8:	6523      	str	r3, [r4, #80]	; 0x50
 8016dca:	4b13      	ldr	r3, [pc, #76]	; (8016e18 <__sinit+0x68>)
 8016dcc:	4a13      	ldr	r2, [pc, #76]	; (8016e1c <__sinit+0x6c>)
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8016dd2:	42a3      	cmp	r3, r4
 8016dd4:	bf04      	itt	eq
 8016dd6:	2301      	moveq	r3, #1
 8016dd8:	61a3      	streq	r3, [r4, #24]
 8016dda:	4620      	mov	r0, r4
 8016ddc:	f000 f820 	bl	8016e20 <__sfp>
 8016de0:	6060      	str	r0, [r4, #4]
 8016de2:	4620      	mov	r0, r4
 8016de4:	f000 f81c 	bl	8016e20 <__sfp>
 8016de8:	60a0      	str	r0, [r4, #8]
 8016dea:	4620      	mov	r0, r4
 8016dec:	f000 f818 	bl	8016e20 <__sfp>
 8016df0:	2200      	movs	r2, #0
 8016df2:	60e0      	str	r0, [r4, #12]
 8016df4:	2104      	movs	r1, #4
 8016df6:	6860      	ldr	r0, [r4, #4]
 8016df8:	f7ff ff82 	bl	8016d00 <std>
 8016dfc:	68a0      	ldr	r0, [r4, #8]
 8016dfe:	2201      	movs	r2, #1
 8016e00:	2109      	movs	r1, #9
 8016e02:	f7ff ff7d 	bl	8016d00 <std>
 8016e06:	68e0      	ldr	r0, [r4, #12]
 8016e08:	2202      	movs	r2, #2
 8016e0a:	2112      	movs	r1, #18
 8016e0c:	f7ff ff78 	bl	8016d00 <std>
 8016e10:	2301      	movs	r3, #1
 8016e12:	61a3      	str	r3, [r4, #24]
 8016e14:	e7d2      	b.n	8016dbc <__sinit+0xc>
 8016e16:	bf00      	nop
 8016e18:	0801b688 	.word	0x0801b688
 8016e1c:	08016d49 	.word	0x08016d49

08016e20 <__sfp>:
 8016e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e22:	4607      	mov	r7, r0
 8016e24:	f7ff ffac 	bl	8016d80 <__sfp_lock_acquire>
 8016e28:	4b1e      	ldr	r3, [pc, #120]	; (8016ea4 <__sfp+0x84>)
 8016e2a:	681e      	ldr	r6, [r3, #0]
 8016e2c:	69b3      	ldr	r3, [r6, #24]
 8016e2e:	b913      	cbnz	r3, 8016e36 <__sfp+0x16>
 8016e30:	4630      	mov	r0, r6
 8016e32:	f7ff ffbd 	bl	8016db0 <__sinit>
 8016e36:	3648      	adds	r6, #72	; 0x48
 8016e38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016e3c:	3b01      	subs	r3, #1
 8016e3e:	d503      	bpl.n	8016e48 <__sfp+0x28>
 8016e40:	6833      	ldr	r3, [r6, #0]
 8016e42:	b30b      	cbz	r3, 8016e88 <__sfp+0x68>
 8016e44:	6836      	ldr	r6, [r6, #0]
 8016e46:	e7f7      	b.n	8016e38 <__sfp+0x18>
 8016e48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016e4c:	b9d5      	cbnz	r5, 8016e84 <__sfp+0x64>
 8016e4e:	4b16      	ldr	r3, [pc, #88]	; (8016ea8 <__sfp+0x88>)
 8016e50:	60e3      	str	r3, [r4, #12]
 8016e52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016e56:	6665      	str	r5, [r4, #100]	; 0x64
 8016e58:	f7eb f9f8 	bl	800224c <__retarget_lock_init_recursive>
 8016e5c:	f7ff ff96 	bl	8016d8c <__sfp_lock_release>
 8016e60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016e64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016e68:	6025      	str	r5, [r4, #0]
 8016e6a:	61a5      	str	r5, [r4, #24]
 8016e6c:	2208      	movs	r2, #8
 8016e6e:	4629      	mov	r1, r5
 8016e70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016e74:	f000 f884 	bl	8016f80 <memset>
 8016e78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016e7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016e80:	4620      	mov	r0, r4
 8016e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e84:	3468      	adds	r4, #104	; 0x68
 8016e86:	e7d9      	b.n	8016e3c <__sfp+0x1c>
 8016e88:	2104      	movs	r1, #4
 8016e8a:	4638      	mov	r0, r7
 8016e8c:	f7ff ff62 	bl	8016d54 <__sfmoreglue>
 8016e90:	4604      	mov	r4, r0
 8016e92:	6030      	str	r0, [r6, #0]
 8016e94:	2800      	cmp	r0, #0
 8016e96:	d1d5      	bne.n	8016e44 <__sfp+0x24>
 8016e98:	f7ff ff78 	bl	8016d8c <__sfp_lock_release>
 8016e9c:	230c      	movs	r3, #12
 8016e9e:	603b      	str	r3, [r7, #0]
 8016ea0:	e7ee      	b.n	8016e80 <__sfp+0x60>
 8016ea2:	bf00      	nop
 8016ea4:	0801b688 	.word	0x0801b688
 8016ea8:	ffff0001 	.word	0xffff0001

08016eac <_fwalk_reent>:
 8016eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016eb0:	4606      	mov	r6, r0
 8016eb2:	4688      	mov	r8, r1
 8016eb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016eb8:	2700      	movs	r7, #0
 8016eba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016ebe:	f1b9 0901 	subs.w	r9, r9, #1
 8016ec2:	d505      	bpl.n	8016ed0 <_fwalk_reent+0x24>
 8016ec4:	6824      	ldr	r4, [r4, #0]
 8016ec6:	2c00      	cmp	r4, #0
 8016ec8:	d1f7      	bne.n	8016eba <_fwalk_reent+0xe>
 8016eca:	4638      	mov	r0, r7
 8016ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ed0:	89ab      	ldrh	r3, [r5, #12]
 8016ed2:	2b01      	cmp	r3, #1
 8016ed4:	d907      	bls.n	8016ee6 <_fwalk_reent+0x3a>
 8016ed6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016eda:	3301      	adds	r3, #1
 8016edc:	d003      	beq.n	8016ee6 <_fwalk_reent+0x3a>
 8016ede:	4629      	mov	r1, r5
 8016ee0:	4630      	mov	r0, r6
 8016ee2:	47c0      	blx	r8
 8016ee4:	4307      	orrs	r7, r0
 8016ee6:	3568      	adds	r5, #104	; 0x68
 8016ee8:	e7e9      	b.n	8016ebe <_fwalk_reent+0x12>
	...

08016eec <__libc_init_array>:
 8016eec:	b570      	push	{r4, r5, r6, lr}
 8016eee:	4d0d      	ldr	r5, [pc, #52]	; (8016f24 <__libc_init_array+0x38>)
 8016ef0:	4c0d      	ldr	r4, [pc, #52]	; (8016f28 <__libc_init_array+0x3c>)
 8016ef2:	1b64      	subs	r4, r4, r5
 8016ef4:	10a4      	asrs	r4, r4, #2
 8016ef6:	2600      	movs	r6, #0
 8016ef8:	42a6      	cmp	r6, r4
 8016efa:	d109      	bne.n	8016f10 <__libc_init_array+0x24>
 8016efc:	4d0b      	ldr	r5, [pc, #44]	; (8016f2c <__libc_init_array+0x40>)
 8016efe:	4c0c      	ldr	r4, [pc, #48]	; (8016f30 <__libc_init_array+0x44>)
 8016f00:	f000 fffe 	bl	8017f00 <_init>
 8016f04:	1b64      	subs	r4, r4, r5
 8016f06:	10a4      	asrs	r4, r4, #2
 8016f08:	2600      	movs	r6, #0
 8016f0a:	42a6      	cmp	r6, r4
 8016f0c:	d105      	bne.n	8016f1a <__libc_init_array+0x2e>
 8016f0e:	bd70      	pop	{r4, r5, r6, pc}
 8016f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f14:	4798      	blx	r3
 8016f16:	3601      	adds	r6, #1
 8016f18:	e7ee      	b.n	8016ef8 <__libc_init_array+0xc>
 8016f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f1e:	4798      	blx	r3
 8016f20:	3601      	adds	r6, #1
 8016f22:	e7f2      	b.n	8016f0a <__libc_init_array+0x1e>
 8016f24:	0801b778 	.word	0x0801b778
 8016f28:	0801b778 	.word	0x0801b778
 8016f2c:	0801b778 	.word	0x0801b778
 8016f30:	0801b77c 	.word	0x0801b77c

08016f34 <malloc>:
 8016f34:	4b02      	ldr	r3, [pc, #8]	; (8016f40 <malloc+0xc>)
 8016f36:	4601      	mov	r1, r0
 8016f38:	6818      	ldr	r0, [r3, #0]
 8016f3a:	f000 b895 	b.w	8017068 <_malloc_r>
 8016f3e:	bf00      	nop
 8016f40:	20000020 	.word	0x20000020

08016f44 <memcmp>:
 8016f44:	b510      	push	{r4, lr}
 8016f46:	3901      	subs	r1, #1
 8016f48:	4402      	add	r2, r0
 8016f4a:	4290      	cmp	r0, r2
 8016f4c:	d101      	bne.n	8016f52 <memcmp+0xe>
 8016f4e:	2000      	movs	r0, #0
 8016f50:	e005      	b.n	8016f5e <memcmp+0x1a>
 8016f52:	7803      	ldrb	r3, [r0, #0]
 8016f54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016f58:	42a3      	cmp	r3, r4
 8016f5a:	d001      	beq.n	8016f60 <memcmp+0x1c>
 8016f5c:	1b18      	subs	r0, r3, r4
 8016f5e:	bd10      	pop	{r4, pc}
 8016f60:	3001      	adds	r0, #1
 8016f62:	e7f2      	b.n	8016f4a <memcmp+0x6>

08016f64 <memcpy>:
 8016f64:	440a      	add	r2, r1
 8016f66:	4291      	cmp	r1, r2
 8016f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8016f6c:	d100      	bne.n	8016f70 <memcpy+0xc>
 8016f6e:	4770      	bx	lr
 8016f70:	b510      	push	{r4, lr}
 8016f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016f7a:	4291      	cmp	r1, r2
 8016f7c:	d1f9      	bne.n	8016f72 <memcpy+0xe>
 8016f7e:	bd10      	pop	{r4, pc}

08016f80 <memset>:
 8016f80:	4402      	add	r2, r0
 8016f82:	4603      	mov	r3, r0
 8016f84:	4293      	cmp	r3, r2
 8016f86:	d100      	bne.n	8016f8a <memset+0xa>
 8016f88:	4770      	bx	lr
 8016f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8016f8e:	e7f9      	b.n	8016f84 <memset+0x4>

08016f90 <_free_r>:
 8016f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f92:	2900      	cmp	r1, #0
 8016f94:	d044      	beq.n	8017020 <_free_r+0x90>
 8016f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f9a:	9001      	str	r0, [sp, #4]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	f1a1 0404 	sub.w	r4, r1, #4
 8016fa2:	bfb8      	it	lt
 8016fa4:	18e4      	addlt	r4, r4, r3
 8016fa6:	f000 fb0d 	bl	80175c4 <__malloc_lock>
 8016faa:	4a1e      	ldr	r2, [pc, #120]	; (8017024 <_free_r+0x94>)
 8016fac:	9801      	ldr	r0, [sp, #4]
 8016fae:	6813      	ldr	r3, [r2, #0]
 8016fb0:	b933      	cbnz	r3, 8016fc0 <_free_r+0x30>
 8016fb2:	6063      	str	r3, [r4, #4]
 8016fb4:	6014      	str	r4, [r2, #0]
 8016fb6:	b003      	add	sp, #12
 8016fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016fbc:	f000 bb08 	b.w	80175d0 <__malloc_unlock>
 8016fc0:	42a3      	cmp	r3, r4
 8016fc2:	d908      	bls.n	8016fd6 <_free_r+0x46>
 8016fc4:	6825      	ldr	r5, [r4, #0]
 8016fc6:	1961      	adds	r1, r4, r5
 8016fc8:	428b      	cmp	r3, r1
 8016fca:	bf01      	itttt	eq
 8016fcc:	6819      	ldreq	r1, [r3, #0]
 8016fce:	685b      	ldreq	r3, [r3, #4]
 8016fd0:	1949      	addeq	r1, r1, r5
 8016fd2:	6021      	streq	r1, [r4, #0]
 8016fd4:	e7ed      	b.n	8016fb2 <_free_r+0x22>
 8016fd6:	461a      	mov	r2, r3
 8016fd8:	685b      	ldr	r3, [r3, #4]
 8016fda:	b10b      	cbz	r3, 8016fe0 <_free_r+0x50>
 8016fdc:	42a3      	cmp	r3, r4
 8016fde:	d9fa      	bls.n	8016fd6 <_free_r+0x46>
 8016fe0:	6811      	ldr	r1, [r2, #0]
 8016fe2:	1855      	adds	r5, r2, r1
 8016fe4:	42a5      	cmp	r5, r4
 8016fe6:	d10b      	bne.n	8017000 <_free_r+0x70>
 8016fe8:	6824      	ldr	r4, [r4, #0]
 8016fea:	4421      	add	r1, r4
 8016fec:	1854      	adds	r4, r2, r1
 8016fee:	42a3      	cmp	r3, r4
 8016ff0:	6011      	str	r1, [r2, #0]
 8016ff2:	d1e0      	bne.n	8016fb6 <_free_r+0x26>
 8016ff4:	681c      	ldr	r4, [r3, #0]
 8016ff6:	685b      	ldr	r3, [r3, #4]
 8016ff8:	6053      	str	r3, [r2, #4]
 8016ffa:	4421      	add	r1, r4
 8016ffc:	6011      	str	r1, [r2, #0]
 8016ffe:	e7da      	b.n	8016fb6 <_free_r+0x26>
 8017000:	d902      	bls.n	8017008 <_free_r+0x78>
 8017002:	230c      	movs	r3, #12
 8017004:	6003      	str	r3, [r0, #0]
 8017006:	e7d6      	b.n	8016fb6 <_free_r+0x26>
 8017008:	6825      	ldr	r5, [r4, #0]
 801700a:	1961      	adds	r1, r4, r5
 801700c:	428b      	cmp	r3, r1
 801700e:	bf04      	itt	eq
 8017010:	6819      	ldreq	r1, [r3, #0]
 8017012:	685b      	ldreq	r3, [r3, #4]
 8017014:	6063      	str	r3, [r4, #4]
 8017016:	bf04      	itt	eq
 8017018:	1949      	addeq	r1, r1, r5
 801701a:	6021      	streq	r1, [r4, #0]
 801701c:	6054      	str	r4, [r2, #4]
 801701e:	e7ca      	b.n	8016fb6 <_free_r+0x26>
 8017020:	b003      	add	sp, #12
 8017022:	bd30      	pop	{r4, r5, pc}
 8017024:	2000d468 	.word	0x2000d468

08017028 <sbrk_aligned>:
 8017028:	b570      	push	{r4, r5, r6, lr}
 801702a:	4e0e      	ldr	r6, [pc, #56]	; (8017064 <sbrk_aligned+0x3c>)
 801702c:	460c      	mov	r4, r1
 801702e:	6831      	ldr	r1, [r6, #0]
 8017030:	4605      	mov	r5, r0
 8017032:	b911      	cbnz	r1, 801703a <sbrk_aligned+0x12>
 8017034:	f000 f94c 	bl	80172d0 <_sbrk_r>
 8017038:	6030      	str	r0, [r6, #0]
 801703a:	4621      	mov	r1, r4
 801703c:	4628      	mov	r0, r5
 801703e:	f000 f947 	bl	80172d0 <_sbrk_r>
 8017042:	1c43      	adds	r3, r0, #1
 8017044:	d00a      	beq.n	801705c <sbrk_aligned+0x34>
 8017046:	1cc4      	adds	r4, r0, #3
 8017048:	f024 0403 	bic.w	r4, r4, #3
 801704c:	42a0      	cmp	r0, r4
 801704e:	d007      	beq.n	8017060 <sbrk_aligned+0x38>
 8017050:	1a21      	subs	r1, r4, r0
 8017052:	4628      	mov	r0, r5
 8017054:	f000 f93c 	bl	80172d0 <_sbrk_r>
 8017058:	3001      	adds	r0, #1
 801705a:	d101      	bne.n	8017060 <sbrk_aligned+0x38>
 801705c:	f04f 34ff 	mov.w	r4, #4294967295
 8017060:	4620      	mov	r0, r4
 8017062:	bd70      	pop	{r4, r5, r6, pc}
 8017064:	2000d46c 	.word	0x2000d46c

08017068 <_malloc_r>:
 8017068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801706c:	1ccd      	adds	r5, r1, #3
 801706e:	f025 0503 	bic.w	r5, r5, #3
 8017072:	3508      	adds	r5, #8
 8017074:	2d0c      	cmp	r5, #12
 8017076:	bf38      	it	cc
 8017078:	250c      	movcc	r5, #12
 801707a:	2d00      	cmp	r5, #0
 801707c:	4607      	mov	r7, r0
 801707e:	db01      	blt.n	8017084 <_malloc_r+0x1c>
 8017080:	42a9      	cmp	r1, r5
 8017082:	d905      	bls.n	8017090 <_malloc_r+0x28>
 8017084:	230c      	movs	r3, #12
 8017086:	603b      	str	r3, [r7, #0]
 8017088:	2600      	movs	r6, #0
 801708a:	4630      	mov	r0, r6
 801708c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017090:	4e2e      	ldr	r6, [pc, #184]	; (801714c <_malloc_r+0xe4>)
 8017092:	f000 fa97 	bl	80175c4 <__malloc_lock>
 8017096:	6833      	ldr	r3, [r6, #0]
 8017098:	461c      	mov	r4, r3
 801709a:	bb34      	cbnz	r4, 80170ea <_malloc_r+0x82>
 801709c:	4629      	mov	r1, r5
 801709e:	4638      	mov	r0, r7
 80170a0:	f7ff ffc2 	bl	8017028 <sbrk_aligned>
 80170a4:	1c43      	adds	r3, r0, #1
 80170a6:	4604      	mov	r4, r0
 80170a8:	d14d      	bne.n	8017146 <_malloc_r+0xde>
 80170aa:	6834      	ldr	r4, [r6, #0]
 80170ac:	4626      	mov	r6, r4
 80170ae:	2e00      	cmp	r6, #0
 80170b0:	d140      	bne.n	8017134 <_malloc_r+0xcc>
 80170b2:	6823      	ldr	r3, [r4, #0]
 80170b4:	4631      	mov	r1, r6
 80170b6:	4638      	mov	r0, r7
 80170b8:	eb04 0803 	add.w	r8, r4, r3
 80170bc:	f000 f908 	bl	80172d0 <_sbrk_r>
 80170c0:	4580      	cmp	r8, r0
 80170c2:	d13a      	bne.n	801713a <_malloc_r+0xd2>
 80170c4:	6821      	ldr	r1, [r4, #0]
 80170c6:	3503      	adds	r5, #3
 80170c8:	1a6d      	subs	r5, r5, r1
 80170ca:	f025 0503 	bic.w	r5, r5, #3
 80170ce:	3508      	adds	r5, #8
 80170d0:	2d0c      	cmp	r5, #12
 80170d2:	bf38      	it	cc
 80170d4:	250c      	movcc	r5, #12
 80170d6:	4629      	mov	r1, r5
 80170d8:	4638      	mov	r0, r7
 80170da:	f7ff ffa5 	bl	8017028 <sbrk_aligned>
 80170de:	3001      	adds	r0, #1
 80170e0:	d02b      	beq.n	801713a <_malloc_r+0xd2>
 80170e2:	6823      	ldr	r3, [r4, #0]
 80170e4:	442b      	add	r3, r5
 80170e6:	6023      	str	r3, [r4, #0]
 80170e8:	e00e      	b.n	8017108 <_malloc_r+0xa0>
 80170ea:	6822      	ldr	r2, [r4, #0]
 80170ec:	1b52      	subs	r2, r2, r5
 80170ee:	d41e      	bmi.n	801712e <_malloc_r+0xc6>
 80170f0:	2a0b      	cmp	r2, #11
 80170f2:	d916      	bls.n	8017122 <_malloc_r+0xba>
 80170f4:	1961      	adds	r1, r4, r5
 80170f6:	42a3      	cmp	r3, r4
 80170f8:	6025      	str	r5, [r4, #0]
 80170fa:	bf18      	it	ne
 80170fc:	6059      	strne	r1, [r3, #4]
 80170fe:	6863      	ldr	r3, [r4, #4]
 8017100:	bf08      	it	eq
 8017102:	6031      	streq	r1, [r6, #0]
 8017104:	5162      	str	r2, [r4, r5]
 8017106:	604b      	str	r3, [r1, #4]
 8017108:	4638      	mov	r0, r7
 801710a:	f104 060b 	add.w	r6, r4, #11
 801710e:	f000 fa5f 	bl	80175d0 <__malloc_unlock>
 8017112:	f026 0607 	bic.w	r6, r6, #7
 8017116:	1d23      	adds	r3, r4, #4
 8017118:	1af2      	subs	r2, r6, r3
 801711a:	d0b6      	beq.n	801708a <_malloc_r+0x22>
 801711c:	1b9b      	subs	r3, r3, r6
 801711e:	50a3      	str	r3, [r4, r2]
 8017120:	e7b3      	b.n	801708a <_malloc_r+0x22>
 8017122:	6862      	ldr	r2, [r4, #4]
 8017124:	42a3      	cmp	r3, r4
 8017126:	bf0c      	ite	eq
 8017128:	6032      	streq	r2, [r6, #0]
 801712a:	605a      	strne	r2, [r3, #4]
 801712c:	e7ec      	b.n	8017108 <_malloc_r+0xa0>
 801712e:	4623      	mov	r3, r4
 8017130:	6864      	ldr	r4, [r4, #4]
 8017132:	e7b2      	b.n	801709a <_malloc_r+0x32>
 8017134:	4634      	mov	r4, r6
 8017136:	6876      	ldr	r6, [r6, #4]
 8017138:	e7b9      	b.n	80170ae <_malloc_r+0x46>
 801713a:	230c      	movs	r3, #12
 801713c:	603b      	str	r3, [r7, #0]
 801713e:	4638      	mov	r0, r7
 8017140:	f000 fa46 	bl	80175d0 <__malloc_unlock>
 8017144:	e7a1      	b.n	801708a <_malloc_r+0x22>
 8017146:	6025      	str	r5, [r4, #0]
 8017148:	e7de      	b.n	8017108 <_malloc_r+0xa0>
 801714a:	bf00      	nop
 801714c:	2000d468 	.word	0x2000d468

08017150 <iprintf>:
 8017150:	b40f      	push	{r0, r1, r2, r3}
 8017152:	4b0a      	ldr	r3, [pc, #40]	; (801717c <iprintf+0x2c>)
 8017154:	b513      	push	{r0, r1, r4, lr}
 8017156:	681c      	ldr	r4, [r3, #0]
 8017158:	b124      	cbz	r4, 8017164 <iprintf+0x14>
 801715a:	69a3      	ldr	r3, [r4, #24]
 801715c:	b913      	cbnz	r3, 8017164 <iprintf+0x14>
 801715e:	4620      	mov	r0, r4
 8017160:	f7ff fe26 	bl	8016db0 <__sinit>
 8017164:	ab05      	add	r3, sp, #20
 8017166:	9a04      	ldr	r2, [sp, #16]
 8017168:	68a1      	ldr	r1, [r4, #8]
 801716a:	9301      	str	r3, [sp, #4]
 801716c:	4620      	mov	r0, r4
 801716e:	f000 fa5f 	bl	8017630 <_vfiprintf_r>
 8017172:	b002      	add	sp, #8
 8017174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017178:	b004      	add	sp, #16
 801717a:	4770      	bx	lr
 801717c:	20000020 	.word	0x20000020

08017180 <rand>:
 8017180:	4b16      	ldr	r3, [pc, #88]	; (80171dc <rand+0x5c>)
 8017182:	b510      	push	{r4, lr}
 8017184:	681c      	ldr	r4, [r3, #0]
 8017186:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017188:	b9b3      	cbnz	r3, 80171b8 <rand+0x38>
 801718a:	2018      	movs	r0, #24
 801718c:	f7ff fed2 	bl	8016f34 <malloc>
 8017190:	63a0      	str	r0, [r4, #56]	; 0x38
 8017192:	b928      	cbnz	r0, 80171a0 <rand+0x20>
 8017194:	4602      	mov	r2, r0
 8017196:	4b12      	ldr	r3, [pc, #72]	; (80171e0 <rand+0x60>)
 8017198:	4812      	ldr	r0, [pc, #72]	; (80171e4 <rand+0x64>)
 801719a:	214e      	movs	r1, #78	; 0x4e
 801719c:	f000 f8fe 	bl	801739c <__assert_func>
 80171a0:	4a11      	ldr	r2, [pc, #68]	; (80171e8 <rand+0x68>)
 80171a2:	4b12      	ldr	r3, [pc, #72]	; (80171ec <rand+0x6c>)
 80171a4:	e9c0 2300 	strd	r2, r3, [r0]
 80171a8:	4b11      	ldr	r3, [pc, #68]	; (80171f0 <rand+0x70>)
 80171aa:	6083      	str	r3, [r0, #8]
 80171ac:	230b      	movs	r3, #11
 80171ae:	8183      	strh	r3, [r0, #12]
 80171b0:	2201      	movs	r2, #1
 80171b2:	2300      	movs	r3, #0
 80171b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80171b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80171ba:	4a0e      	ldr	r2, [pc, #56]	; (80171f4 <rand+0x74>)
 80171bc:	6920      	ldr	r0, [r4, #16]
 80171be:	6963      	ldr	r3, [r4, #20]
 80171c0:	490d      	ldr	r1, [pc, #52]	; (80171f8 <rand+0x78>)
 80171c2:	4342      	muls	r2, r0
 80171c4:	fb01 2203 	mla	r2, r1, r3, r2
 80171c8:	fba0 0101 	umull	r0, r1, r0, r1
 80171cc:	1c43      	adds	r3, r0, #1
 80171ce:	eb42 0001 	adc.w	r0, r2, r1
 80171d2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80171d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80171da:	bd10      	pop	{r4, pc}
 80171dc:	20000020 	.word	0x20000020
 80171e0:	0801b68c 	.word	0x0801b68c
 80171e4:	0801b6a3 	.word	0x0801b6a3
 80171e8:	abcd330e 	.word	0xabcd330e
 80171ec:	e66d1234 	.word	0xe66d1234
 80171f0:	0005deec 	.word	0x0005deec
 80171f4:	5851f42d 	.word	0x5851f42d
 80171f8:	4c957f2d 	.word	0x4c957f2d

080171fc <cleanup_glue>:
 80171fc:	b538      	push	{r3, r4, r5, lr}
 80171fe:	460c      	mov	r4, r1
 8017200:	6809      	ldr	r1, [r1, #0]
 8017202:	4605      	mov	r5, r0
 8017204:	b109      	cbz	r1, 801720a <cleanup_glue+0xe>
 8017206:	f7ff fff9 	bl	80171fc <cleanup_glue>
 801720a:	4621      	mov	r1, r4
 801720c:	4628      	mov	r0, r5
 801720e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017212:	f7ff bebd 	b.w	8016f90 <_free_r>
	...

08017218 <_reclaim_reent>:
 8017218:	4b2c      	ldr	r3, [pc, #176]	; (80172cc <_reclaim_reent+0xb4>)
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	4283      	cmp	r3, r0
 801721e:	b570      	push	{r4, r5, r6, lr}
 8017220:	4604      	mov	r4, r0
 8017222:	d051      	beq.n	80172c8 <_reclaim_reent+0xb0>
 8017224:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017226:	b143      	cbz	r3, 801723a <_reclaim_reent+0x22>
 8017228:	68db      	ldr	r3, [r3, #12]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d14a      	bne.n	80172c4 <_reclaim_reent+0xac>
 801722e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017230:	6819      	ldr	r1, [r3, #0]
 8017232:	b111      	cbz	r1, 801723a <_reclaim_reent+0x22>
 8017234:	4620      	mov	r0, r4
 8017236:	f7ff feab 	bl	8016f90 <_free_r>
 801723a:	6961      	ldr	r1, [r4, #20]
 801723c:	b111      	cbz	r1, 8017244 <_reclaim_reent+0x2c>
 801723e:	4620      	mov	r0, r4
 8017240:	f7ff fea6 	bl	8016f90 <_free_r>
 8017244:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017246:	b111      	cbz	r1, 801724e <_reclaim_reent+0x36>
 8017248:	4620      	mov	r0, r4
 801724a:	f7ff fea1 	bl	8016f90 <_free_r>
 801724e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017250:	b111      	cbz	r1, 8017258 <_reclaim_reent+0x40>
 8017252:	4620      	mov	r0, r4
 8017254:	f7ff fe9c 	bl	8016f90 <_free_r>
 8017258:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801725a:	b111      	cbz	r1, 8017262 <_reclaim_reent+0x4a>
 801725c:	4620      	mov	r0, r4
 801725e:	f7ff fe97 	bl	8016f90 <_free_r>
 8017262:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017264:	b111      	cbz	r1, 801726c <_reclaim_reent+0x54>
 8017266:	4620      	mov	r0, r4
 8017268:	f7ff fe92 	bl	8016f90 <_free_r>
 801726c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801726e:	b111      	cbz	r1, 8017276 <_reclaim_reent+0x5e>
 8017270:	4620      	mov	r0, r4
 8017272:	f7ff fe8d 	bl	8016f90 <_free_r>
 8017276:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017278:	b111      	cbz	r1, 8017280 <_reclaim_reent+0x68>
 801727a:	4620      	mov	r0, r4
 801727c:	f7ff fe88 	bl	8016f90 <_free_r>
 8017280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017282:	b111      	cbz	r1, 801728a <_reclaim_reent+0x72>
 8017284:	4620      	mov	r0, r4
 8017286:	f7ff fe83 	bl	8016f90 <_free_r>
 801728a:	69a3      	ldr	r3, [r4, #24]
 801728c:	b1e3      	cbz	r3, 80172c8 <_reclaim_reent+0xb0>
 801728e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017290:	4620      	mov	r0, r4
 8017292:	4798      	blx	r3
 8017294:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017296:	b1b9      	cbz	r1, 80172c8 <_reclaim_reent+0xb0>
 8017298:	4620      	mov	r0, r4
 801729a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801729e:	f7ff bfad 	b.w	80171fc <cleanup_glue>
 80172a2:	5949      	ldr	r1, [r1, r5]
 80172a4:	b941      	cbnz	r1, 80172b8 <_reclaim_reent+0xa0>
 80172a6:	3504      	adds	r5, #4
 80172a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172aa:	2d80      	cmp	r5, #128	; 0x80
 80172ac:	68d9      	ldr	r1, [r3, #12]
 80172ae:	d1f8      	bne.n	80172a2 <_reclaim_reent+0x8a>
 80172b0:	4620      	mov	r0, r4
 80172b2:	f7ff fe6d 	bl	8016f90 <_free_r>
 80172b6:	e7ba      	b.n	801722e <_reclaim_reent+0x16>
 80172b8:	680e      	ldr	r6, [r1, #0]
 80172ba:	4620      	mov	r0, r4
 80172bc:	f7ff fe68 	bl	8016f90 <_free_r>
 80172c0:	4631      	mov	r1, r6
 80172c2:	e7ef      	b.n	80172a4 <_reclaim_reent+0x8c>
 80172c4:	2500      	movs	r5, #0
 80172c6:	e7ef      	b.n	80172a8 <_reclaim_reent+0x90>
 80172c8:	bd70      	pop	{r4, r5, r6, pc}
 80172ca:	bf00      	nop
 80172cc:	20000020 	.word	0x20000020

080172d0 <_sbrk_r>:
 80172d0:	b538      	push	{r3, r4, r5, lr}
 80172d2:	4d06      	ldr	r5, [pc, #24]	; (80172ec <_sbrk_r+0x1c>)
 80172d4:	2300      	movs	r3, #0
 80172d6:	4604      	mov	r4, r0
 80172d8:	4608      	mov	r0, r1
 80172da:	602b      	str	r3, [r5, #0]
 80172dc:	f7ea fe8c 	bl	8001ff8 <_sbrk>
 80172e0:	1c43      	adds	r3, r0, #1
 80172e2:	d102      	bne.n	80172ea <_sbrk_r+0x1a>
 80172e4:	682b      	ldr	r3, [r5, #0]
 80172e6:	b103      	cbz	r3, 80172ea <_sbrk_r+0x1a>
 80172e8:	6023      	str	r3, [r4, #0]
 80172ea:	bd38      	pop	{r3, r4, r5, pc}
 80172ec:	2000d470 	.word	0x2000d470

080172f0 <__sread>:
 80172f0:	b510      	push	{r4, lr}
 80172f2:	460c      	mov	r4, r1
 80172f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172f8:	f000 fc5e 	bl	8017bb8 <_read_r>
 80172fc:	2800      	cmp	r0, #0
 80172fe:	bfab      	itete	ge
 8017300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017302:	89a3      	ldrhlt	r3, [r4, #12]
 8017304:	181b      	addge	r3, r3, r0
 8017306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801730a:	bfac      	ite	ge
 801730c:	6563      	strge	r3, [r4, #84]	; 0x54
 801730e:	81a3      	strhlt	r3, [r4, #12]
 8017310:	bd10      	pop	{r4, pc}

08017312 <__swrite>:
 8017312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017316:	461f      	mov	r7, r3
 8017318:	898b      	ldrh	r3, [r1, #12]
 801731a:	05db      	lsls	r3, r3, #23
 801731c:	4605      	mov	r5, r0
 801731e:	460c      	mov	r4, r1
 8017320:	4616      	mov	r6, r2
 8017322:	d505      	bpl.n	8017330 <__swrite+0x1e>
 8017324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017328:	2302      	movs	r3, #2
 801732a:	2200      	movs	r2, #0
 801732c:	f000 f938 	bl	80175a0 <_lseek_r>
 8017330:	89a3      	ldrh	r3, [r4, #12]
 8017332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801733a:	81a3      	strh	r3, [r4, #12]
 801733c:	4632      	mov	r2, r6
 801733e:	463b      	mov	r3, r7
 8017340:	4628      	mov	r0, r5
 8017342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017346:	f000 b817 	b.w	8017378 <_write_r>

0801734a <__sseek>:
 801734a:	b510      	push	{r4, lr}
 801734c:	460c      	mov	r4, r1
 801734e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017352:	f000 f925 	bl	80175a0 <_lseek_r>
 8017356:	1c43      	adds	r3, r0, #1
 8017358:	89a3      	ldrh	r3, [r4, #12]
 801735a:	bf15      	itete	ne
 801735c:	6560      	strne	r0, [r4, #84]	; 0x54
 801735e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017366:	81a3      	strheq	r3, [r4, #12]
 8017368:	bf18      	it	ne
 801736a:	81a3      	strhne	r3, [r4, #12]
 801736c:	bd10      	pop	{r4, pc}

0801736e <__sclose>:
 801736e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017372:	f000 b831 	b.w	80173d8 <_close_r>
	...

08017378 <_write_r>:
 8017378:	b538      	push	{r3, r4, r5, lr}
 801737a:	4d07      	ldr	r5, [pc, #28]	; (8017398 <_write_r+0x20>)
 801737c:	4604      	mov	r4, r0
 801737e:	4608      	mov	r0, r1
 8017380:	4611      	mov	r1, r2
 8017382:	2200      	movs	r2, #0
 8017384:	602a      	str	r2, [r5, #0]
 8017386:	461a      	mov	r2, r3
 8017388:	f7ea fde5 	bl	8001f56 <_write>
 801738c:	1c43      	adds	r3, r0, #1
 801738e:	d102      	bne.n	8017396 <_write_r+0x1e>
 8017390:	682b      	ldr	r3, [r5, #0]
 8017392:	b103      	cbz	r3, 8017396 <_write_r+0x1e>
 8017394:	6023      	str	r3, [r4, #0]
 8017396:	bd38      	pop	{r3, r4, r5, pc}
 8017398:	2000d470 	.word	0x2000d470

0801739c <__assert_func>:
 801739c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801739e:	4614      	mov	r4, r2
 80173a0:	461a      	mov	r2, r3
 80173a2:	4b09      	ldr	r3, [pc, #36]	; (80173c8 <__assert_func+0x2c>)
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	4605      	mov	r5, r0
 80173a8:	68d8      	ldr	r0, [r3, #12]
 80173aa:	b14c      	cbz	r4, 80173c0 <__assert_func+0x24>
 80173ac:	4b07      	ldr	r3, [pc, #28]	; (80173cc <__assert_func+0x30>)
 80173ae:	9100      	str	r1, [sp, #0]
 80173b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80173b4:	4906      	ldr	r1, [pc, #24]	; (80173d0 <__assert_func+0x34>)
 80173b6:	462b      	mov	r3, r5
 80173b8:	f000 f8e0 	bl	801757c <fiprintf>
 80173bc:	f000 fcce 	bl	8017d5c <abort>
 80173c0:	4b04      	ldr	r3, [pc, #16]	; (80173d4 <__assert_func+0x38>)
 80173c2:	461c      	mov	r4, r3
 80173c4:	e7f3      	b.n	80173ae <__assert_func+0x12>
 80173c6:	bf00      	nop
 80173c8:	20000020 	.word	0x20000020
 80173cc:	0801b6fe 	.word	0x0801b6fe
 80173d0:	0801b70b 	.word	0x0801b70b
 80173d4:	0801b739 	.word	0x0801b739

080173d8 <_close_r>:
 80173d8:	b538      	push	{r3, r4, r5, lr}
 80173da:	4d06      	ldr	r5, [pc, #24]	; (80173f4 <_close_r+0x1c>)
 80173dc:	2300      	movs	r3, #0
 80173de:	4604      	mov	r4, r0
 80173e0:	4608      	mov	r0, r1
 80173e2:	602b      	str	r3, [r5, #0]
 80173e4:	f7ea fdd3 	bl	8001f8e <_close>
 80173e8:	1c43      	adds	r3, r0, #1
 80173ea:	d102      	bne.n	80173f2 <_close_r+0x1a>
 80173ec:	682b      	ldr	r3, [r5, #0]
 80173ee:	b103      	cbz	r3, 80173f2 <_close_r+0x1a>
 80173f0:	6023      	str	r3, [r4, #0]
 80173f2:	bd38      	pop	{r3, r4, r5, pc}
 80173f4:	2000d470 	.word	0x2000d470

080173f8 <__sflush_r>:
 80173f8:	898a      	ldrh	r2, [r1, #12]
 80173fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173fe:	4605      	mov	r5, r0
 8017400:	0710      	lsls	r0, r2, #28
 8017402:	460c      	mov	r4, r1
 8017404:	d458      	bmi.n	80174b8 <__sflush_r+0xc0>
 8017406:	684b      	ldr	r3, [r1, #4]
 8017408:	2b00      	cmp	r3, #0
 801740a:	dc05      	bgt.n	8017418 <__sflush_r+0x20>
 801740c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801740e:	2b00      	cmp	r3, #0
 8017410:	dc02      	bgt.n	8017418 <__sflush_r+0x20>
 8017412:	2000      	movs	r0, #0
 8017414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801741a:	2e00      	cmp	r6, #0
 801741c:	d0f9      	beq.n	8017412 <__sflush_r+0x1a>
 801741e:	2300      	movs	r3, #0
 8017420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017424:	682f      	ldr	r7, [r5, #0]
 8017426:	602b      	str	r3, [r5, #0]
 8017428:	d032      	beq.n	8017490 <__sflush_r+0x98>
 801742a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801742c:	89a3      	ldrh	r3, [r4, #12]
 801742e:	075a      	lsls	r2, r3, #29
 8017430:	d505      	bpl.n	801743e <__sflush_r+0x46>
 8017432:	6863      	ldr	r3, [r4, #4]
 8017434:	1ac0      	subs	r0, r0, r3
 8017436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017438:	b10b      	cbz	r3, 801743e <__sflush_r+0x46>
 801743a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801743c:	1ac0      	subs	r0, r0, r3
 801743e:	2300      	movs	r3, #0
 8017440:	4602      	mov	r2, r0
 8017442:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017444:	6a21      	ldr	r1, [r4, #32]
 8017446:	4628      	mov	r0, r5
 8017448:	47b0      	blx	r6
 801744a:	1c43      	adds	r3, r0, #1
 801744c:	89a3      	ldrh	r3, [r4, #12]
 801744e:	d106      	bne.n	801745e <__sflush_r+0x66>
 8017450:	6829      	ldr	r1, [r5, #0]
 8017452:	291d      	cmp	r1, #29
 8017454:	d82c      	bhi.n	80174b0 <__sflush_r+0xb8>
 8017456:	4a2a      	ldr	r2, [pc, #168]	; (8017500 <__sflush_r+0x108>)
 8017458:	40ca      	lsrs	r2, r1
 801745a:	07d6      	lsls	r6, r2, #31
 801745c:	d528      	bpl.n	80174b0 <__sflush_r+0xb8>
 801745e:	2200      	movs	r2, #0
 8017460:	6062      	str	r2, [r4, #4]
 8017462:	04d9      	lsls	r1, r3, #19
 8017464:	6922      	ldr	r2, [r4, #16]
 8017466:	6022      	str	r2, [r4, #0]
 8017468:	d504      	bpl.n	8017474 <__sflush_r+0x7c>
 801746a:	1c42      	adds	r2, r0, #1
 801746c:	d101      	bne.n	8017472 <__sflush_r+0x7a>
 801746e:	682b      	ldr	r3, [r5, #0]
 8017470:	b903      	cbnz	r3, 8017474 <__sflush_r+0x7c>
 8017472:	6560      	str	r0, [r4, #84]	; 0x54
 8017474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017476:	602f      	str	r7, [r5, #0]
 8017478:	2900      	cmp	r1, #0
 801747a:	d0ca      	beq.n	8017412 <__sflush_r+0x1a>
 801747c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017480:	4299      	cmp	r1, r3
 8017482:	d002      	beq.n	801748a <__sflush_r+0x92>
 8017484:	4628      	mov	r0, r5
 8017486:	f7ff fd83 	bl	8016f90 <_free_r>
 801748a:	2000      	movs	r0, #0
 801748c:	6360      	str	r0, [r4, #52]	; 0x34
 801748e:	e7c1      	b.n	8017414 <__sflush_r+0x1c>
 8017490:	6a21      	ldr	r1, [r4, #32]
 8017492:	2301      	movs	r3, #1
 8017494:	4628      	mov	r0, r5
 8017496:	47b0      	blx	r6
 8017498:	1c41      	adds	r1, r0, #1
 801749a:	d1c7      	bne.n	801742c <__sflush_r+0x34>
 801749c:	682b      	ldr	r3, [r5, #0]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d0c4      	beq.n	801742c <__sflush_r+0x34>
 80174a2:	2b1d      	cmp	r3, #29
 80174a4:	d001      	beq.n	80174aa <__sflush_r+0xb2>
 80174a6:	2b16      	cmp	r3, #22
 80174a8:	d101      	bne.n	80174ae <__sflush_r+0xb6>
 80174aa:	602f      	str	r7, [r5, #0]
 80174ac:	e7b1      	b.n	8017412 <__sflush_r+0x1a>
 80174ae:	89a3      	ldrh	r3, [r4, #12]
 80174b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174b4:	81a3      	strh	r3, [r4, #12]
 80174b6:	e7ad      	b.n	8017414 <__sflush_r+0x1c>
 80174b8:	690f      	ldr	r7, [r1, #16]
 80174ba:	2f00      	cmp	r7, #0
 80174bc:	d0a9      	beq.n	8017412 <__sflush_r+0x1a>
 80174be:	0793      	lsls	r3, r2, #30
 80174c0:	680e      	ldr	r6, [r1, #0]
 80174c2:	bf08      	it	eq
 80174c4:	694b      	ldreq	r3, [r1, #20]
 80174c6:	600f      	str	r7, [r1, #0]
 80174c8:	bf18      	it	ne
 80174ca:	2300      	movne	r3, #0
 80174cc:	eba6 0807 	sub.w	r8, r6, r7
 80174d0:	608b      	str	r3, [r1, #8]
 80174d2:	f1b8 0f00 	cmp.w	r8, #0
 80174d6:	dd9c      	ble.n	8017412 <__sflush_r+0x1a>
 80174d8:	6a21      	ldr	r1, [r4, #32]
 80174da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80174dc:	4643      	mov	r3, r8
 80174de:	463a      	mov	r2, r7
 80174e0:	4628      	mov	r0, r5
 80174e2:	47b0      	blx	r6
 80174e4:	2800      	cmp	r0, #0
 80174e6:	dc06      	bgt.n	80174f6 <__sflush_r+0xfe>
 80174e8:	89a3      	ldrh	r3, [r4, #12]
 80174ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174ee:	81a3      	strh	r3, [r4, #12]
 80174f0:	f04f 30ff 	mov.w	r0, #4294967295
 80174f4:	e78e      	b.n	8017414 <__sflush_r+0x1c>
 80174f6:	4407      	add	r7, r0
 80174f8:	eba8 0800 	sub.w	r8, r8, r0
 80174fc:	e7e9      	b.n	80174d2 <__sflush_r+0xda>
 80174fe:	bf00      	nop
 8017500:	20400001 	.word	0x20400001

08017504 <_fflush_r>:
 8017504:	b538      	push	{r3, r4, r5, lr}
 8017506:	690b      	ldr	r3, [r1, #16]
 8017508:	4605      	mov	r5, r0
 801750a:	460c      	mov	r4, r1
 801750c:	b913      	cbnz	r3, 8017514 <_fflush_r+0x10>
 801750e:	2500      	movs	r5, #0
 8017510:	4628      	mov	r0, r5
 8017512:	bd38      	pop	{r3, r4, r5, pc}
 8017514:	b118      	cbz	r0, 801751e <_fflush_r+0x1a>
 8017516:	6983      	ldr	r3, [r0, #24]
 8017518:	b90b      	cbnz	r3, 801751e <_fflush_r+0x1a>
 801751a:	f7ff fc49 	bl	8016db0 <__sinit>
 801751e:	4b14      	ldr	r3, [pc, #80]	; (8017570 <_fflush_r+0x6c>)
 8017520:	429c      	cmp	r4, r3
 8017522:	d11b      	bne.n	801755c <_fflush_r+0x58>
 8017524:	686c      	ldr	r4, [r5, #4]
 8017526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d0ef      	beq.n	801750e <_fflush_r+0xa>
 801752e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017530:	07d0      	lsls	r0, r2, #31
 8017532:	d404      	bmi.n	801753e <_fflush_r+0x3a>
 8017534:	0599      	lsls	r1, r3, #22
 8017536:	d402      	bmi.n	801753e <_fflush_r+0x3a>
 8017538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801753a:	f7ea fead 	bl	8002298 <__retarget_lock_acquire_recursive>
 801753e:	4628      	mov	r0, r5
 8017540:	4621      	mov	r1, r4
 8017542:	f7ff ff59 	bl	80173f8 <__sflush_r>
 8017546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017548:	07da      	lsls	r2, r3, #31
 801754a:	4605      	mov	r5, r0
 801754c:	d4e0      	bmi.n	8017510 <_fflush_r+0xc>
 801754e:	89a3      	ldrh	r3, [r4, #12]
 8017550:	059b      	lsls	r3, r3, #22
 8017552:	d4dd      	bmi.n	8017510 <_fflush_r+0xc>
 8017554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017556:	f7ea feb3 	bl	80022c0 <__retarget_lock_release_recursive>
 801755a:	e7d9      	b.n	8017510 <_fflush_r+0xc>
 801755c:	4b05      	ldr	r3, [pc, #20]	; (8017574 <_fflush_r+0x70>)
 801755e:	429c      	cmp	r4, r3
 8017560:	d101      	bne.n	8017566 <_fflush_r+0x62>
 8017562:	68ac      	ldr	r4, [r5, #8]
 8017564:	e7df      	b.n	8017526 <_fflush_r+0x22>
 8017566:	4b04      	ldr	r3, [pc, #16]	; (8017578 <_fflush_r+0x74>)
 8017568:	429c      	cmp	r4, r3
 801756a:	bf08      	it	eq
 801756c:	68ec      	ldreq	r4, [r5, #12]
 801756e:	e7da      	b.n	8017526 <_fflush_r+0x22>
 8017570:	0801b648 	.word	0x0801b648
 8017574:	0801b668 	.word	0x0801b668
 8017578:	0801b628 	.word	0x0801b628

0801757c <fiprintf>:
 801757c:	b40e      	push	{r1, r2, r3}
 801757e:	b503      	push	{r0, r1, lr}
 8017580:	4601      	mov	r1, r0
 8017582:	ab03      	add	r3, sp, #12
 8017584:	4805      	ldr	r0, [pc, #20]	; (801759c <fiprintf+0x20>)
 8017586:	f853 2b04 	ldr.w	r2, [r3], #4
 801758a:	6800      	ldr	r0, [r0, #0]
 801758c:	9301      	str	r3, [sp, #4]
 801758e:	f000 f84f 	bl	8017630 <_vfiprintf_r>
 8017592:	b002      	add	sp, #8
 8017594:	f85d eb04 	ldr.w	lr, [sp], #4
 8017598:	b003      	add	sp, #12
 801759a:	4770      	bx	lr
 801759c:	20000020 	.word	0x20000020

080175a0 <_lseek_r>:
 80175a0:	b538      	push	{r3, r4, r5, lr}
 80175a2:	4d07      	ldr	r5, [pc, #28]	; (80175c0 <_lseek_r+0x20>)
 80175a4:	4604      	mov	r4, r0
 80175a6:	4608      	mov	r0, r1
 80175a8:	4611      	mov	r1, r2
 80175aa:	2200      	movs	r2, #0
 80175ac:	602a      	str	r2, [r5, #0]
 80175ae:	461a      	mov	r2, r3
 80175b0:	f7ea fd14 	bl	8001fdc <_lseek>
 80175b4:	1c43      	adds	r3, r0, #1
 80175b6:	d102      	bne.n	80175be <_lseek_r+0x1e>
 80175b8:	682b      	ldr	r3, [r5, #0]
 80175ba:	b103      	cbz	r3, 80175be <_lseek_r+0x1e>
 80175bc:	6023      	str	r3, [r4, #0]
 80175be:	bd38      	pop	{r3, r4, r5, pc}
 80175c0:	2000d470 	.word	0x2000d470

080175c4 <__malloc_lock>:
 80175c4:	4801      	ldr	r0, [pc, #4]	; (80175cc <__malloc_lock+0x8>)
 80175c6:	f7ea be67 	b.w	8002298 <__retarget_lock_acquire_recursive>
 80175ca:	bf00      	nop
 80175cc:	200005ac 	.word	0x200005ac

080175d0 <__malloc_unlock>:
 80175d0:	4801      	ldr	r0, [pc, #4]	; (80175d8 <__malloc_unlock+0x8>)
 80175d2:	f7ea be75 	b.w	80022c0 <__retarget_lock_release_recursive>
 80175d6:	bf00      	nop
 80175d8:	200005ac 	.word	0x200005ac

080175dc <__sfputc_r>:
 80175dc:	6893      	ldr	r3, [r2, #8]
 80175de:	3b01      	subs	r3, #1
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	b410      	push	{r4}
 80175e4:	6093      	str	r3, [r2, #8]
 80175e6:	da08      	bge.n	80175fa <__sfputc_r+0x1e>
 80175e8:	6994      	ldr	r4, [r2, #24]
 80175ea:	42a3      	cmp	r3, r4
 80175ec:	db01      	blt.n	80175f2 <__sfputc_r+0x16>
 80175ee:	290a      	cmp	r1, #10
 80175f0:	d103      	bne.n	80175fa <__sfputc_r+0x1e>
 80175f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175f6:	f000 baf1 	b.w	8017bdc <__swbuf_r>
 80175fa:	6813      	ldr	r3, [r2, #0]
 80175fc:	1c58      	adds	r0, r3, #1
 80175fe:	6010      	str	r0, [r2, #0]
 8017600:	7019      	strb	r1, [r3, #0]
 8017602:	4608      	mov	r0, r1
 8017604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017608:	4770      	bx	lr

0801760a <__sfputs_r>:
 801760a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801760c:	4606      	mov	r6, r0
 801760e:	460f      	mov	r7, r1
 8017610:	4614      	mov	r4, r2
 8017612:	18d5      	adds	r5, r2, r3
 8017614:	42ac      	cmp	r4, r5
 8017616:	d101      	bne.n	801761c <__sfputs_r+0x12>
 8017618:	2000      	movs	r0, #0
 801761a:	e007      	b.n	801762c <__sfputs_r+0x22>
 801761c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017620:	463a      	mov	r2, r7
 8017622:	4630      	mov	r0, r6
 8017624:	f7ff ffda 	bl	80175dc <__sfputc_r>
 8017628:	1c43      	adds	r3, r0, #1
 801762a:	d1f3      	bne.n	8017614 <__sfputs_r+0xa>
 801762c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017630 <_vfiprintf_r>:
 8017630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017634:	460d      	mov	r5, r1
 8017636:	b09d      	sub	sp, #116	; 0x74
 8017638:	4614      	mov	r4, r2
 801763a:	4698      	mov	r8, r3
 801763c:	4606      	mov	r6, r0
 801763e:	b118      	cbz	r0, 8017648 <_vfiprintf_r+0x18>
 8017640:	6983      	ldr	r3, [r0, #24]
 8017642:	b90b      	cbnz	r3, 8017648 <_vfiprintf_r+0x18>
 8017644:	f7ff fbb4 	bl	8016db0 <__sinit>
 8017648:	4b89      	ldr	r3, [pc, #548]	; (8017870 <_vfiprintf_r+0x240>)
 801764a:	429d      	cmp	r5, r3
 801764c:	d11b      	bne.n	8017686 <_vfiprintf_r+0x56>
 801764e:	6875      	ldr	r5, [r6, #4]
 8017650:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017652:	07d9      	lsls	r1, r3, #31
 8017654:	d405      	bmi.n	8017662 <_vfiprintf_r+0x32>
 8017656:	89ab      	ldrh	r3, [r5, #12]
 8017658:	059a      	lsls	r2, r3, #22
 801765a:	d402      	bmi.n	8017662 <_vfiprintf_r+0x32>
 801765c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801765e:	f7ea fe1b 	bl	8002298 <__retarget_lock_acquire_recursive>
 8017662:	89ab      	ldrh	r3, [r5, #12]
 8017664:	071b      	lsls	r3, r3, #28
 8017666:	d501      	bpl.n	801766c <_vfiprintf_r+0x3c>
 8017668:	692b      	ldr	r3, [r5, #16]
 801766a:	b9eb      	cbnz	r3, 80176a8 <_vfiprintf_r+0x78>
 801766c:	4629      	mov	r1, r5
 801766e:	4630      	mov	r0, r6
 8017670:	f000 fb06 	bl	8017c80 <__swsetup_r>
 8017674:	b1c0      	cbz	r0, 80176a8 <_vfiprintf_r+0x78>
 8017676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017678:	07dc      	lsls	r4, r3, #31
 801767a:	d50e      	bpl.n	801769a <_vfiprintf_r+0x6a>
 801767c:	f04f 30ff 	mov.w	r0, #4294967295
 8017680:	b01d      	add	sp, #116	; 0x74
 8017682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017686:	4b7b      	ldr	r3, [pc, #492]	; (8017874 <_vfiprintf_r+0x244>)
 8017688:	429d      	cmp	r5, r3
 801768a:	d101      	bne.n	8017690 <_vfiprintf_r+0x60>
 801768c:	68b5      	ldr	r5, [r6, #8]
 801768e:	e7df      	b.n	8017650 <_vfiprintf_r+0x20>
 8017690:	4b79      	ldr	r3, [pc, #484]	; (8017878 <_vfiprintf_r+0x248>)
 8017692:	429d      	cmp	r5, r3
 8017694:	bf08      	it	eq
 8017696:	68f5      	ldreq	r5, [r6, #12]
 8017698:	e7da      	b.n	8017650 <_vfiprintf_r+0x20>
 801769a:	89ab      	ldrh	r3, [r5, #12]
 801769c:	0598      	lsls	r0, r3, #22
 801769e:	d4ed      	bmi.n	801767c <_vfiprintf_r+0x4c>
 80176a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176a2:	f7ea fe0d 	bl	80022c0 <__retarget_lock_release_recursive>
 80176a6:	e7e9      	b.n	801767c <_vfiprintf_r+0x4c>
 80176a8:	2300      	movs	r3, #0
 80176aa:	9309      	str	r3, [sp, #36]	; 0x24
 80176ac:	2320      	movs	r3, #32
 80176ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80176b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80176b6:	2330      	movs	r3, #48	; 0x30
 80176b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801787c <_vfiprintf_r+0x24c>
 80176bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80176c0:	f04f 0901 	mov.w	r9, #1
 80176c4:	4623      	mov	r3, r4
 80176c6:	469a      	mov	sl, r3
 80176c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176cc:	b10a      	cbz	r2, 80176d2 <_vfiprintf_r+0xa2>
 80176ce:	2a25      	cmp	r2, #37	; 0x25
 80176d0:	d1f9      	bne.n	80176c6 <_vfiprintf_r+0x96>
 80176d2:	ebba 0b04 	subs.w	fp, sl, r4
 80176d6:	d00b      	beq.n	80176f0 <_vfiprintf_r+0xc0>
 80176d8:	465b      	mov	r3, fp
 80176da:	4622      	mov	r2, r4
 80176dc:	4629      	mov	r1, r5
 80176de:	4630      	mov	r0, r6
 80176e0:	f7ff ff93 	bl	801760a <__sfputs_r>
 80176e4:	3001      	adds	r0, #1
 80176e6:	f000 80aa 	beq.w	801783e <_vfiprintf_r+0x20e>
 80176ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176ec:	445a      	add	r2, fp
 80176ee:	9209      	str	r2, [sp, #36]	; 0x24
 80176f0:	f89a 3000 	ldrb.w	r3, [sl]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	f000 80a2 	beq.w	801783e <_vfiprintf_r+0x20e>
 80176fa:	2300      	movs	r3, #0
 80176fc:	f04f 32ff 	mov.w	r2, #4294967295
 8017700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017704:	f10a 0a01 	add.w	sl, sl, #1
 8017708:	9304      	str	r3, [sp, #16]
 801770a:	9307      	str	r3, [sp, #28]
 801770c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017710:	931a      	str	r3, [sp, #104]	; 0x68
 8017712:	4654      	mov	r4, sl
 8017714:	2205      	movs	r2, #5
 8017716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801771a:	4858      	ldr	r0, [pc, #352]	; (801787c <_vfiprintf_r+0x24c>)
 801771c:	f7e8 fd58 	bl	80001d0 <memchr>
 8017720:	9a04      	ldr	r2, [sp, #16]
 8017722:	b9d8      	cbnz	r0, 801775c <_vfiprintf_r+0x12c>
 8017724:	06d1      	lsls	r1, r2, #27
 8017726:	bf44      	itt	mi
 8017728:	2320      	movmi	r3, #32
 801772a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801772e:	0713      	lsls	r3, r2, #28
 8017730:	bf44      	itt	mi
 8017732:	232b      	movmi	r3, #43	; 0x2b
 8017734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017738:	f89a 3000 	ldrb.w	r3, [sl]
 801773c:	2b2a      	cmp	r3, #42	; 0x2a
 801773e:	d015      	beq.n	801776c <_vfiprintf_r+0x13c>
 8017740:	9a07      	ldr	r2, [sp, #28]
 8017742:	4654      	mov	r4, sl
 8017744:	2000      	movs	r0, #0
 8017746:	f04f 0c0a 	mov.w	ip, #10
 801774a:	4621      	mov	r1, r4
 801774c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017750:	3b30      	subs	r3, #48	; 0x30
 8017752:	2b09      	cmp	r3, #9
 8017754:	d94e      	bls.n	80177f4 <_vfiprintf_r+0x1c4>
 8017756:	b1b0      	cbz	r0, 8017786 <_vfiprintf_r+0x156>
 8017758:	9207      	str	r2, [sp, #28]
 801775a:	e014      	b.n	8017786 <_vfiprintf_r+0x156>
 801775c:	eba0 0308 	sub.w	r3, r0, r8
 8017760:	fa09 f303 	lsl.w	r3, r9, r3
 8017764:	4313      	orrs	r3, r2
 8017766:	9304      	str	r3, [sp, #16]
 8017768:	46a2      	mov	sl, r4
 801776a:	e7d2      	b.n	8017712 <_vfiprintf_r+0xe2>
 801776c:	9b03      	ldr	r3, [sp, #12]
 801776e:	1d19      	adds	r1, r3, #4
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	9103      	str	r1, [sp, #12]
 8017774:	2b00      	cmp	r3, #0
 8017776:	bfbb      	ittet	lt
 8017778:	425b      	neglt	r3, r3
 801777a:	f042 0202 	orrlt.w	r2, r2, #2
 801777e:	9307      	strge	r3, [sp, #28]
 8017780:	9307      	strlt	r3, [sp, #28]
 8017782:	bfb8      	it	lt
 8017784:	9204      	strlt	r2, [sp, #16]
 8017786:	7823      	ldrb	r3, [r4, #0]
 8017788:	2b2e      	cmp	r3, #46	; 0x2e
 801778a:	d10c      	bne.n	80177a6 <_vfiprintf_r+0x176>
 801778c:	7863      	ldrb	r3, [r4, #1]
 801778e:	2b2a      	cmp	r3, #42	; 0x2a
 8017790:	d135      	bne.n	80177fe <_vfiprintf_r+0x1ce>
 8017792:	9b03      	ldr	r3, [sp, #12]
 8017794:	1d1a      	adds	r2, r3, #4
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	9203      	str	r2, [sp, #12]
 801779a:	2b00      	cmp	r3, #0
 801779c:	bfb8      	it	lt
 801779e:	f04f 33ff 	movlt.w	r3, #4294967295
 80177a2:	3402      	adds	r4, #2
 80177a4:	9305      	str	r3, [sp, #20]
 80177a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801788c <_vfiprintf_r+0x25c>
 80177aa:	7821      	ldrb	r1, [r4, #0]
 80177ac:	2203      	movs	r2, #3
 80177ae:	4650      	mov	r0, sl
 80177b0:	f7e8 fd0e 	bl	80001d0 <memchr>
 80177b4:	b140      	cbz	r0, 80177c8 <_vfiprintf_r+0x198>
 80177b6:	2340      	movs	r3, #64	; 0x40
 80177b8:	eba0 000a 	sub.w	r0, r0, sl
 80177bc:	fa03 f000 	lsl.w	r0, r3, r0
 80177c0:	9b04      	ldr	r3, [sp, #16]
 80177c2:	4303      	orrs	r3, r0
 80177c4:	3401      	adds	r4, #1
 80177c6:	9304      	str	r3, [sp, #16]
 80177c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177cc:	482c      	ldr	r0, [pc, #176]	; (8017880 <_vfiprintf_r+0x250>)
 80177ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80177d2:	2206      	movs	r2, #6
 80177d4:	f7e8 fcfc 	bl	80001d0 <memchr>
 80177d8:	2800      	cmp	r0, #0
 80177da:	d03f      	beq.n	801785c <_vfiprintf_r+0x22c>
 80177dc:	4b29      	ldr	r3, [pc, #164]	; (8017884 <_vfiprintf_r+0x254>)
 80177de:	bb1b      	cbnz	r3, 8017828 <_vfiprintf_r+0x1f8>
 80177e0:	9b03      	ldr	r3, [sp, #12]
 80177e2:	3307      	adds	r3, #7
 80177e4:	f023 0307 	bic.w	r3, r3, #7
 80177e8:	3308      	adds	r3, #8
 80177ea:	9303      	str	r3, [sp, #12]
 80177ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177ee:	443b      	add	r3, r7
 80177f0:	9309      	str	r3, [sp, #36]	; 0x24
 80177f2:	e767      	b.n	80176c4 <_vfiprintf_r+0x94>
 80177f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80177f8:	460c      	mov	r4, r1
 80177fa:	2001      	movs	r0, #1
 80177fc:	e7a5      	b.n	801774a <_vfiprintf_r+0x11a>
 80177fe:	2300      	movs	r3, #0
 8017800:	3401      	adds	r4, #1
 8017802:	9305      	str	r3, [sp, #20]
 8017804:	4619      	mov	r1, r3
 8017806:	f04f 0c0a 	mov.w	ip, #10
 801780a:	4620      	mov	r0, r4
 801780c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017810:	3a30      	subs	r2, #48	; 0x30
 8017812:	2a09      	cmp	r2, #9
 8017814:	d903      	bls.n	801781e <_vfiprintf_r+0x1ee>
 8017816:	2b00      	cmp	r3, #0
 8017818:	d0c5      	beq.n	80177a6 <_vfiprintf_r+0x176>
 801781a:	9105      	str	r1, [sp, #20]
 801781c:	e7c3      	b.n	80177a6 <_vfiprintf_r+0x176>
 801781e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017822:	4604      	mov	r4, r0
 8017824:	2301      	movs	r3, #1
 8017826:	e7f0      	b.n	801780a <_vfiprintf_r+0x1da>
 8017828:	ab03      	add	r3, sp, #12
 801782a:	9300      	str	r3, [sp, #0]
 801782c:	462a      	mov	r2, r5
 801782e:	4b16      	ldr	r3, [pc, #88]	; (8017888 <_vfiprintf_r+0x258>)
 8017830:	a904      	add	r1, sp, #16
 8017832:	4630      	mov	r0, r6
 8017834:	f3af 8000 	nop.w
 8017838:	4607      	mov	r7, r0
 801783a:	1c78      	adds	r0, r7, #1
 801783c:	d1d6      	bne.n	80177ec <_vfiprintf_r+0x1bc>
 801783e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017840:	07d9      	lsls	r1, r3, #31
 8017842:	d405      	bmi.n	8017850 <_vfiprintf_r+0x220>
 8017844:	89ab      	ldrh	r3, [r5, #12]
 8017846:	059a      	lsls	r2, r3, #22
 8017848:	d402      	bmi.n	8017850 <_vfiprintf_r+0x220>
 801784a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801784c:	f7ea fd38 	bl	80022c0 <__retarget_lock_release_recursive>
 8017850:	89ab      	ldrh	r3, [r5, #12]
 8017852:	065b      	lsls	r3, r3, #25
 8017854:	f53f af12 	bmi.w	801767c <_vfiprintf_r+0x4c>
 8017858:	9809      	ldr	r0, [sp, #36]	; 0x24
 801785a:	e711      	b.n	8017680 <_vfiprintf_r+0x50>
 801785c:	ab03      	add	r3, sp, #12
 801785e:	9300      	str	r3, [sp, #0]
 8017860:	462a      	mov	r2, r5
 8017862:	4b09      	ldr	r3, [pc, #36]	; (8017888 <_vfiprintf_r+0x258>)
 8017864:	a904      	add	r1, sp, #16
 8017866:	4630      	mov	r0, r6
 8017868:	f000 f880 	bl	801796c <_printf_i>
 801786c:	e7e4      	b.n	8017838 <_vfiprintf_r+0x208>
 801786e:	bf00      	nop
 8017870:	0801b648 	.word	0x0801b648
 8017874:	0801b668 	.word	0x0801b668
 8017878:	0801b628 	.word	0x0801b628
 801787c:	0801b73a 	.word	0x0801b73a
 8017880:	0801b744 	.word	0x0801b744
 8017884:	00000000 	.word	0x00000000
 8017888:	0801760b 	.word	0x0801760b
 801788c:	0801b740 	.word	0x0801b740

08017890 <_printf_common>:
 8017890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017894:	4616      	mov	r6, r2
 8017896:	4699      	mov	r9, r3
 8017898:	688a      	ldr	r2, [r1, #8]
 801789a:	690b      	ldr	r3, [r1, #16]
 801789c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80178a0:	4293      	cmp	r3, r2
 80178a2:	bfb8      	it	lt
 80178a4:	4613      	movlt	r3, r2
 80178a6:	6033      	str	r3, [r6, #0]
 80178a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80178ac:	4607      	mov	r7, r0
 80178ae:	460c      	mov	r4, r1
 80178b0:	b10a      	cbz	r2, 80178b6 <_printf_common+0x26>
 80178b2:	3301      	adds	r3, #1
 80178b4:	6033      	str	r3, [r6, #0]
 80178b6:	6823      	ldr	r3, [r4, #0]
 80178b8:	0699      	lsls	r1, r3, #26
 80178ba:	bf42      	ittt	mi
 80178bc:	6833      	ldrmi	r3, [r6, #0]
 80178be:	3302      	addmi	r3, #2
 80178c0:	6033      	strmi	r3, [r6, #0]
 80178c2:	6825      	ldr	r5, [r4, #0]
 80178c4:	f015 0506 	ands.w	r5, r5, #6
 80178c8:	d106      	bne.n	80178d8 <_printf_common+0x48>
 80178ca:	f104 0a19 	add.w	sl, r4, #25
 80178ce:	68e3      	ldr	r3, [r4, #12]
 80178d0:	6832      	ldr	r2, [r6, #0]
 80178d2:	1a9b      	subs	r3, r3, r2
 80178d4:	42ab      	cmp	r3, r5
 80178d6:	dc26      	bgt.n	8017926 <_printf_common+0x96>
 80178d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80178dc:	1e13      	subs	r3, r2, #0
 80178de:	6822      	ldr	r2, [r4, #0]
 80178e0:	bf18      	it	ne
 80178e2:	2301      	movne	r3, #1
 80178e4:	0692      	lsls	r2, r2, #26
 80178e6:	d42b      	bmi.n	8017940 <_printf_common+0xb0>
 80178e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80178ec:	4649      	mov	r1, r9
 80178ee:	4638      	mov	r0, r7
 80178f0:	47c0      	blx	r8
 80178f2:	3001      	adds	r0, #1
 80178f4:	d01e      	beq.n	8017934 <_printf_common+0xa4>
 80178f6:	6823      	ldr	r3, [r4, #0]
 80178f8:	68e5      	ldr	r5, [r4, #12]
 80178fa:	6832      	ldr	r2, [r6, #0]
 80178fc:	f003 0306 	and.w	r3, r3, #6
 8017900:	2b04      	cmp	r3, #4
 8017902:	bf08      	it	eq
 8017904:	1aad      	subeq	r5, r5, r2
 8017906:	68a3      	ldr	r3, [r4, #8]
 8017908:	6922      	ldr	r2, [r4, #16]
 801790a:	bf0c      	ite	eq
 801790c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017910:	2500      	movne	r5, #0
 8017912:	4293      	cmp	r3, r2
 8017914:	bfc4      	itt	gt
 8017916:	1a9b      	subgt	r3, r3, r2
 8017918:	18ed      	addgt	r5, r5, r3
 801791a:	2600      	movs	r6, #0
 801791c:	341a      	adds	r4, #26
 801791e:	42b5      	cmp	r5, r6
 8017920:	d11a      	bne.n	8017958 <_printf_common+0xc8>
 8017922:	2000      	movs	r0, #0
 8017924:	e008      	b.n	8017938 <_printf_common+0xa8>
 8017926:	2301      	movs	r3, #1
 8017928:	4652      	mov	r2, sl
 801792a:	4649      	mov	r1, r9
 801792c:	4638      	mov	r0, r7
 801792e:	47c0      	blx	r8
 8017930:	3001      	adds	r0, #1
 8017932:	d103      	bne.n	801793c <_printf_common+0xac>
 8017934:	f04f 30ff 	mov.w	r0, #4294967295
 8017938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801793c:	3501      	adds	r5, #1
 801793e:	e7c6      	b.n	80178ce <_printf_common+0x3e>
 8017940:	18e1      	adds	r1, r4, r3
 8017942:	1c5a      	adds	r2, r3, #1
 8017944:	2030      	movs	r0, #48	; 0x30
 8017946:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801794a:	4422      	add	r2, r4
 801794c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017950:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017954:	3302      	adds	r3, #2
 8017956:	e7c7      	b.n	80178e8 <_printf_common+0x58>
 8017958:	2301      	movs	r3, #1
 801795a:	4622      	mov	r2, r4
 801795c:	4649      	mov	r1, r9
 801795e:	4638      	mov	r0, r7
 8017960:	47c0      	blx	r8
 8017962:	3001      	adds	r0, #1
 8017964:	d0e6      	beq.n	8017934 <_printf_common+0xa4>
 8017966:	3601      	adds	r6, #1
 8017968:	e7d9      	b.n	801791e <_printf_common+0x8e>
	...

0801796c <_printf_i>:
 801796c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017970:	7e0f      	ldrb	r7, [r1, #24]
 8017972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017974:	2f78      	cmp	r7, #120	; 0x78
 8017976:	4691      	mov	r9, r2
 8017978:	4680      	mov	r8, r0
 801797a:	460c      	mov	r4, r1
 801797c:	469a      	mov	sl, r3
 801797e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017982:	d807      	bhi.n	8017994 <_printf_i+0x28>
 8017984:	2f62      	cmp	r7, #98	; 0x62
 8017986:	d80a      	bhi.n	801799e <_printf_i+0x32>
 8017988:	2f00      	cmp	r7, #0
 801798a:	f000 80d8 	beq.w	8017b3e <_printf_i+0x1d2>
 801798e:	2f58      	cmp	r7, #88	; 0x58
 8017990:	f000 80a3 	beq.w	8017ada <_printf_i+0x16e>
 8017994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801799c:	e03a      	b.n	8017a14 <_printf_i+0xa8>
 801799e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80179a2:	2b15      	cmp	r3, #21
 80179a4:	d8f6      	bhi.n	8017994 <_printf_i+0x28>
 80179a6:	a101      	add	r1, pc, #4	; (adr r1, 80179ac <_printf_i+0x40>)
 80179a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80179ac:	08017a05 	.word	0x08017a05
 80179b0:	08017a19 	.word	0x08017a19
 80179b4:	08017995 	.word	0x08017995
 80179b8:	08017995 	.word	0x08017995
 80179bc:	08017995 	.word	0x08017995
 80179c0:	08017995 	.word	0x08017995
 80179c4:	08017a19 	.word	0x08017a19
 80179c8:	08017995 	.word	0x08017995
 80179cc:	08017995 	.word	0x08017995
 80179d0:	08017995 	.word	0x08017995
 80179d4:	08017995 	.word	0x08017995
 80179d8:	08017b25 	.word	0x08017b25
 80179dc:	08017a49 	.word	0x08017a49
 80179e0:	08017b07 	.word	0x08017b07
 80179e4:	08017995 	.word	0x08017995
 80179e8:	08017995 	.word	0x08017995
 80179ec:	08017b47 	.word	0x08017b47
 80179f0:	08017995 	.word	0x08017995
 80179f4:	08017a49 	.word	0x08017a49
 80179f8:	08017995 	.word	0x08017995
 80179fc:	08017995 	.word	0x08017995
 8017a00:	08017b0f 	.word	0x08017b0f
 8017a04:	682b      	ldr	r3, [r5, #0]
 8017a06:	1d1a      	adds	r2, r3, #4
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	602a      	str	r2, [r5, #0]
 8017a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a14:	2301      	movs	r3, #1
 8017a16:	e0a3      	b.n	8017b60 <_printf_i+0x1f4>
 8017a18:	6820      	ldr	r0, [r4, #0]
 8017a1a:	6829      	ldr	r1, [r5, #0]
 8017a1c:	0606      	lsls	r6, r0, #24
 8017a1e:	f101 0304 	add.w	r3, r1, #4
 8017a22:	d50a      	bpl.n	8017a3a <_printf_i+0xce>
 8017a24:	680e      	ldr	r6, [r1, #0]
 8017a26:	602b      	str	r3, [r5, #0]
 8017a28:	2e00      	cmp	r6, #0
 8017a2a:	da03      	bge.n	8017a34 <_printf_i+0xc8>
 8017a2c:	232d      	movs	r3, #45	; 0x2d
 8017a2e:	4276      	negs	r6, r6
 8017a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a34:	485e      	ldr	r0, [pc, #376]	; (8017bb0 <_printf_i+0x244>)
 8017a36:	230a      	movs	r3, #10
 8017a38:	e019      	b.n	8017a6e <_printf_i+0x102>
 8017a3a:	680e      	ldr	r6, [r1, #0]
 8017a3c:	602b      	str	r3, [r5, #0]
 8017a3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017a42:	bf18      	it	ne
 8017a44:	b236      	sxthne	r6, r6
 8017a46:	e7ef      	b.n	8017a28 <_printf_i+0xbc>
 8017a48:	682b      	ldr	r3, [r5, #0]
 8017a4a:	6820      	ldr	r0, [r4, #0]
 8017a4c:	1d19      	adds	r1, r3, #4
 8017a4e:	6029      	str	r1, [r5, #0]
 8017a50:	0601      	lsls	r1, r0, #24
 8017a52:	d501      	bpl.n	8017a58 <_printf_i+0xec>
 8017a54:	681e      	ldr	r6, [r3, #0]
 8017a56:	e002      	b.n	8017a5e <_printf_i+0xf2>
 8017a58:	0646      	lsls	r6, r0, #25
 8017a5a:	d5fb      	bpl.n	8017a54 <_printf_i+0xe8>
 8017a5c:	881e      	ldrh	r6, [r3, #0]
 8017a5e:	4854      	ldr	r0, [pc, #336]	; (8017bb0 <_printf_i+0x244>)
 8017a60:	2f6f      	cmp	r7, #111	; 0x6f
 8017a62:	bf0c      	ite	eq
 8017a64:	2308      	moveq	r3, #8
 8017a66:	230a      	movne	r3, #10
 8017a68:	2100      	movs	r1, #0
 8017a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017a6e:	6865      	ldr	r5, [r4, #4]
 8017a70:	60a5      	str	r5, [r4, #8]
 8017a72:	2d00      	cmp	r5, #0
 8017a74:	bfa2      	ittt	ge
 8017a76:	6821      	ldrge	r1, [r4, #0]
 8017a78:	f021 0104 	bicge.w	r1, r1, #4
 8017a7c:	6021      	strge	r1, [r4, #0]
 8017a7e:	b90e      	cbnz	r6, 8017a84 <_printf_i+0x118>
 8017a80:	2d00      	cmp	r5, #0
 8017a82:	d04d      	beq.n	8017b20 <_printf_i+0x1b4>
 8017a84:	4615      	mov	r5, r2
 8017a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8017a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8017a8e:	5dc7      	ldrb	r7, [r0, r7]
 8017a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017a94:	4637      	mov	r7, r6
 8017a96:	42bb      	cmp	r3, r7
 8017a98:	460e      	mov	r6, r1
 8017a9a:	d9f4      	bls.n	8017a86 <_printf_i+0x11a>
 8017a9c:	2b08      	cmp	r3, #8
 8017a9e:	d10b      	bne.n	8017ab8 <_printf_i+0x14c>
 8017aa0:	6823      	ldr	r3, [r4, #0]
 8017aa2:	07de      	lsls	r6, r3, #31
 8017aa4:	d508      	bpl.n	8017ab8 <_printf_i+0x14c>
 8017aa6:	6923      	ldr	r3, [r4, #16]
 8017aa8:	6861      	ldr	r1, [r4, #4]
 8017aaa:	4299      	cmp	r1, r3
 8017aac:	bfde      	ittt	le
 8017aae:	2330      	movle	r3, #48	; 0x30
 8017ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017ab4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017ab8:	1b52      	subs	r2, r2, r5
 8017aba:	6122      	str	r2, [r4, #16]
 8017abc:	f8cd a000 	str.w	sl, [sp]
 8017ac0:	464b      	mov	r3, r9
 8017ac2:	aa03      	add	r2, sp, #12
 8017ac4:	4621      	mov	r1, r4
 8017ac6:	4640      	mov	r0, r8
 8017ac8:	f7ff fee2 	bl	8017890 <_printf_common>
 8017acc:	3001      	adds	r0, #1
 8017ace:	d14c      	bne.n	8017b6a <_printf_i+0x1fe>
 8017ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ad4:	b004      	add	sp, #16
 8017ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ada:	4835      	ldr	r0, [pc, #212]	; (8017bb0 <_printf_i+0x244>)
 8017adc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017ae0:	6829      	ldr	r1, [r5, #0]
 8017ae2:	6823      	ldr	r3, [r4, #0]
 8017ae4:	f851 6b04 	ldr.w	r6, [r1], #4
 8017ae8:	6029      	str	r1, [r5, #0]
 8017aea:	061d      	lsls	r5, r3, #24
 8017aec:	d514      	bpl.n	8017b18 <_printf_i+0x1ac>
 8017aee:	07df      	lsls	r7, r3, #31
 8017af0:	bf44      	itt	mi
 8017af2:	f043 0320 	orrmi.w	r3, r3, #32
 8017af6:	6023      	strmi	r3, [r4, #0]
 8017af8:	b91e      	cbnz	r6, 8017b02 <_printf_i+0x196>
 8017afa:	6823      	ldr	r3, [r4, #0]
 8017afc:	f023 0320 	bic.w	r3, r3, #32
 8017b00:	6023      	str	r3, [r4, #0]
 8017b02:	2310      	movs	r3, #16
 8017b04:	e7b0      	b.n	8017a68 <_printf_i+0xfc>
 8017b06:	6823      	ldr	r3, [r4, #0]
 8017b08:	f043 0320 	orr.w	r3, r3, #32
 8017b0c:	6023      	str	r3, [r4, #0]
 8017b0e:	2378      	movs	r3, #120	; 0x78
 8017b10:	4828      	ldr	r0, [pc, #160]	; (8017bb4 <_printf_i+0x248>)
 8017b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017b16:	e7e3      	b.n	8017ae0 <_printf_i+0x174>
 8017b18:	0659      	lsls	r1, r3, #25
 8017b1a:	bf48      	it	mi
 8017b1c:	b2b6      	uxthmi	r6, r6
 8017b1e:	e7e6      	b.n	8017aee <_printf_i+0x182>
 8017b20:	4615      	mov	r5, r2
 8017b22:	e7bb      	b.n	8017a9c <_printf_i+0x130>
 8017b24:	682b      	ldr	r3, [r5, #0]
 8017b26:	6826      	ldr	r6, [r4, #0]
 8017b28:	6961      	ldr	r1, [r4, #20]
 8017b2a:	1d18      	adds	r0, r3, #4
 8017b2c:	6028      	str	r0, [r5, #0]
 8017b2e:	0635      	lsls	r5, r6, #24
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	d501      	bpl.n	8017b38 <_printf_i+0x1cc>
 8017b34:	6019      	str	r1, [r3, #0]
 8017b36:	e002      	b.n	8017b3e <_printf_i+0x1d2>
 8017b38:	0670      	lsls	r0, r6, #25
 8017b3a:	d5fb      	bpl.n	8017b34 <_printf_i+0x1c8>
 8017b3c:	8019      	strh	r1, [r3, #0]
 8017b3e:	2300      	movs	r3, #0
 8017b40:	6123      	str	r3, [r4, #16]
 8017b42:	4615      	mov	r5, r2
 8017b44:	e7ba      	b.n	8017abc <_printf_i+0x150>
 8017b46:	682b      	ldr	r3, [r5, #0]
 8017b48:	1d1a      	adds	r2, r3, #4
 8017b4a:	602a      	str	r2, [r5, #0]
 8017b4c:	681d      	ldr	r5, [r3, #0]
 8017b4e:	6862      	ldr	r2, [r4, #4]
 8017b50:	2100      	movs	r1, #0
 8017b52:	4628      	mov	r0, r5
 8017b54:	f7e8 fb3c 	bl	80001d0 <memchr>
 8017b58:	b108      	cbz	r0, 8017b5e <_printf_i+0x1f2>
 8017b5a:	1b40      	subs	r0, r0, r5
 8017b5c:	6060      	str	r0, [r4, #4]
 8017b5e:	6863      	ldr	r3, [r4, #4]
 8017b60:	6123      	str	r3, [r4, #16]
 8017b62:	2300      	movs	r3, #0
 8017b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b68:	e7a8      	b.n	8017abc <_printf_i+0x150>
 8017b6a:	6923      	ldr	r3, [r4, #16]
 8017b6c:	462a      	mov	r2, r5
 8017b6e:	4649      	mov	r1, r9
 8017b70:	4640      	mov	r0, r8
 8017b72:	47d0      	blx	sl
 8017b74:	3001      	adds	r0, #1
 8017b76:	d0ab      	beq.n	8017ad0 <_printf_i+0x164>
 8017b78:	6823      	ldr	r3, [r4, #0]
 8017b7a:	079b      	lsls	r3, r3, #30
 8017b7c:	d413      	bmi.n	8017ba6 <_printf_i+0x23a>
 8017b7e:	68e0      	ldr	r0, [r4, #12]
 8017b80:	9b03      	ldr	r3, [sp, #12]
 8017b82:	4298      	cmp	r0, r3
 8017b84:	bfb8      	it	lt
 8017b86:	4618      	movlt	r0, r3
 8017b88:	e7a4      	b.n	8017ad4 <_printf_i+0x168>
 8017b8a:	2301      	movs	r3, #1
 8017b8c:	4632      	mov	r2, r6
 8017b8e:	4649      	mov	r1, r9
 8017b90:	4640      	mov	r0, r8
 8017b92:	47d0      	blx	sl
 8017b94:	3001      	adds	r0, #1
 8017b96:	d09b      	beq.n	8017ad0 <_printf_i+0x164>
 8017b98:	3501      	adds	r5, #1
 8017b9a:	68e3      	ldr	r3, [r4, #12]
 8017b9c:	9903      	ldr	r1, [sp, #12]
 8017b9e:	1a5b      	subs	r3, r3, r1
 8017ba0:	42ab      	cmp	r3, r5
 8017ba2:	dcf2      	bgt.n	8017b8a <_printf_i+0x21e>
 8017ba4:	e7eb      	b.n	8017b7e <_printf_i+0x212>
 8017ba6:	2500      	movs	r5, #0
 8017ba8:	f104 0619 	add.w	r6, r4, #25
 8017bac:	e7f5      	b.n	8017b9a <_printf_i+0x22e>
 8017bae:	bf00      	nop
 8017bb0:	0801b74b 	.word	0x0801b74b
 8017bb4:	0801b75c 	.word	0x0801b75c

08017bb8 <_read_r>:
 8017bb8:	b538      	push	{r3, r4, r5, lr}
 8017bba:	4d07      	ldr	r5, [pc, #28]	; (8017bd8 <_read_r+0x20>)
 8017bbc:	4604      	mov	r4, r0
 8017bbe:	4608      	mov	r0, r1
 8017bc0:	4611      	mov	r1, r2
 8017bc2:	2200      	movs	r2, #0
 8017bc4:	602a      	str	r2, [r5, #0]
 8017bc6:	461a      	mov	r2, r3
 8017bc8:	f7ea f9a8 	bl	8001f1c <_read>
 8017bcc:	1c43      	adds	r3, r0, #1
 8017bce:	d102      	bne.n	8017bd6 <_read_r+0x1e>
 8017bd0:	682b      	ldr	r3, [r5, #0]
 8017bd2:	b103      	cbz	r3, 8017bd6 <_read_r+0x1e>
 8017bd4:	6023      	str	r3, [r4, #0]
 8017bd6:	bd38      	pop	{r3, r4, r5, pc}
 8017bd8:	2000d470 	.word	0x2000d470

08017bdc <__swbuf_r>:
 8017bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bde:	460e      	mov	r6, r1
 8017be0:	4614      	mov	r4, r2
 8017be2:	4605      	mov	r5, r0
 8017be4:	b118      	cbz	r0, 8017bee <__swbuf_r+0x12>
 8017be6:	6983      	ldr	r3, [r0, #24]
 8017be8:	b90b      	cbnz	r3, 8017bee <__swbuf_r+0x12>
 8017bea:	f7ff f8e1 	bl	8016db0 <__sinit>
 8017bee:	4b21      	ldr	r3, [pc, #132]	; (8017c74 <__swbuf_r+0x98>)
 8017bf0:	429c      	cmp	r4, r3
 8017bf2:	d12b      	bne.n	8017c4c <__swbuf_r+0x70>
 8017bf4:	686c      	ldr	r4, [r5, #4]
 8017bf6:	69a3      	ldr	r3, [r4, #24]
 8017bf8:	60a3      	str	r3, [r4, #8]
 8017bfa:	89a3      	ldrh	r3, [r4, #12]
 8017bfc:	071a      	lsls	r2, r3, #28
 8017bfe:	d52f      	bpl.n	8017c60 <__swbuf_r+0x84>
 8017c00:	6923      	ldr	r3, [r4, #16]
 8017c02:	b36b      	cbz	r3, 8017c60 <__swbuf_r+0x84>
 8017c04:	6923      	ldr	r3, [r4, #16]
 8017c06:	6820      	ldr	r0, [r4, #0]
 8017c08:	1ac0      	subs	r0, r0, r3
 8017c0a:	6963      	ldr	r3, [r4, #20]
 8017c0c:	b2f6      	uxtb	r6, r6
 8017c0e:	4283      	cmp	r3, r0
 8017c10:	4637      	mov	r7, r6
 8017c12:	dc04      	bgt.n	8017c1e <__swbuf_r+0x42>
 8017c14:	4621      	mov	r1, r4
 8017c16:	4628      	mov	r0, r5
 8017c18:	f7ff fc74 	bl	8017504 <_fflush_r>
 8017c1c:	bb30      	cbnz	r0, 8017c6c <__swbuf_r+0x90>
 8017c1e:	68a3      	ldr	r3, [r4, #8]
 8017c20:	3b01      	subs	r3, #1
 8017c22:	60a3      	str	r3, [r4, #8]
 8017c24:	6823      	ldr	r3, [r4, #0]
 8017c26:	1c5a      	adds	r2, r3, #1
 8017c28:	6022      	str	r2, [r4, #0]
 8017c2a:	701e      	strb	r6, [r3, #0]
 8017c2c:	6963      	ldr	r3, [r4, #20]
 8017c2e:	3001      	adds	r0, #1
 8017c30:	4283      	cmp	r3, r0
 8017c32:	d004      	beq.n	8017c3e <__swbuf_r+0x62>
 8017c34:	89a3      	ldrh	r3, [r4, #12]
 8017c36:	07db      	lsls	r3, r3, #31
 8017c38:	d506      	bpl.n	8017c48 <__swbuf_r+0x6c>
 8017c3a:	2e0a      	cmp	r6, #10
 8017c3c:	d104      	bne.n	8017c48 <__swbuf_r+0x6c>
 8017c3e:	4621      	mov	r1, r4
 8017c40:	4628      	mov	r0, r5
 8017c42:	f7ff fc5f 	bl	8017504 <_fflush_r>
 8017c46:	b988      	cbnz	r0, 8017c6c <__swbuf_r+0x90>
 8017c48:	4638      	mov	r0, r7
 8017c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c4c:	4b0a      	ldr	r3, [pc, #40]	; (8017c78 <__swbuf_r+0x9c>)
 8017c4e:	429c      	cmp	r4, r3
 8017c50:	d101      	bne.n	8017c56 <__swbuf_r+0x7a>
 8017c52:	68ac      	ldr	r4, [r5, #8]
 8017c54:	e7cf      	b.n	8017bf6 <__swbuf_r+0x1a>
 8017c56:	4b09      	ldr	r3, [pc, #36]	; (8017c7c <__swbuf_r+0xa0>)
 8017c58:	429c      	cmp	r4, r3
 8017c5a:	bf08      	it	eq
 8017c5c:	68ec      	ldreq	r4, [r5, #12]
 8017c5e:	e7ca      	b.n	8017bf6 <__swbuf_r+0x1a>
 8017c60:	4621      	mov	r1, r4
 8017c62:	4628      	mov	r0, r5
 8017c64:	f000 f80c 	bl	8017c80 <__swsetup_r>
 8017c68:	2800      	cmp	r0, #0
 8017c6a:	d0cb      	beq.n	8017c04 <__swbuf_r+0x28>
 8017c6c:	f04f 37ff 	mov.w	r7, #4294967295
 8017c70:	e7ea      	b.n	8017c48 <__swbuf_r+0x6c>
 8017c72:	bf00      	nop
 8017c74:	0801b648 	.word	0x0801b648
 8017c78:	0801b668 	.word	0x0801b668
 8017c7c:	0801b628 	.word	0x0801b628

08017c80 <__swsetup_r>:
 8017c80:	4b32      	ldr	r3, [pc, #200]	; (8017d4c <__swsetup_r+0xcc>)
 8017c82:	b570      	push	{r4, r5, r6, lr}
 8017c84:	681d      	ldr	r5, [r3, #0]
 8017c86:	4606      	mov	r6, r0
 8017c88:	460c      	mov	r4, r1
 8017c8a:	b125      	cbz	r5, 8017c96 <__swsetup_r+0x16>
 8017c8c:	69ab      	ldr	r3, [r5, #24]
 8017c8e:	b913      	cbnz	r3, 8017c96 <__swsetup_r+0x16>
 8017c90:	4628      	mov	r0, r5
 8017c92:	f7ff f88d 	bl	8016db0 <__sinit>
 8017c96:	4b2e      	ldr	r3, [pc, #184]	; (8017d50 <__swsetup_r+0xd0>)
 8017c98:	429c      	cmp	r4, r3
 8017c9a:	d10f      	bne.n	8017cbc <__swsetup_r+0x3c>
 8017c9c:	686c      	ldr	r4, [r5, #4]
 8017c9e:	89a3      	ldrh	r3, [r4, #12]
 8017ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ca4:	0719      	lsls	r1, r3, #28
 8017ca6:	d42c      	bmi.n	8017d02 <__swsetup_r+0x82>
 8017ca8:	06dd      	lsls	r5, r3, #27
 8017caa:	d411      	bmi.n	8017cd0 <__swsetup_r+0x50>
 8017cac:	2309      	movs	r3, #9
 8017cae:	6033      	str	r3, [r6, #0]
 8017cb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017cb4:	81a3      	strh	r3, [r4, #12]
 8017cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8017cba:	e03e      	b.n	8017d3a <__swsetup_r+0xba>
 8017cbc:	4b25      	ldr	r3, [pc, #148]	; (8017d54 <__swsetup_r+0xd4>)
 8017cbe:	429c      	cmp	r4, r3
 8017cc0:	d101      	bne.n	8017cc6 <__swsetup_r+0x46>
 8017cc2:	68ac      	ldr	r4, [r5, #8]
 8017cc4:	e7eb      	b.n	8017c9e <__swsetup_r+0x1e>
 8017cc6:	4b24      	ldr	r3, [pc, #144]	; (8017d58 <__swsetup_r+0xd8>)
 8017cc8:	429c      	cmp	r4, r3
 8017cca:	bf08      	it	eq
 8017ccc:	68ec      	ldreq	r4, [r5, #12]
 8017cce:	e7e6      	b.n	8017c9e <__swsetup_r+0x1e>
 8017cd0:	0758      	lsls	r0, r3, #29
 8017cd2:	d512      	bpl.n	8017cfa <__swsetup_r+0x7a>
 8017cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017cd6:	b141      	cbz	r1, 8017cea <__swsetup_r+0x6a>
 8017cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017cdc:	4299      	cmp	r1, r3
 8017cde:	d002      	beq.n	8017ce6 <__swsetup_r+0x66>
 8017ce0:	4630      	mov	r0, r6
 8017ce2:	f7ff f955 	bl	8016f90 <_free_r>
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	6363      	str	r3, [r4, #52]	; 0x34
 8017cea:	89a3      	ldrh	r3, [r4, #12]
 8017cec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017cf0:	81a3      	strh	r3, [r4, #12]
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	6063      	str	r3, [r4, #4]
 8017cf6:	6923      	ldr	r3, [r4, #16]
 8017cf8:	6023      	str	r3, [r4, #0]
 8017cfa:	89a3      	ldrh	r3, [r4, #12]
 8017cfc:	f043 0308 	orr.w	r3, r3, #8
 8017d00:	81a3      	strh	r3, [r4, #12]
 8017d02:	6923      	ldr	r3, [r4, #16]
 8017d04:	b94b      	cbnz	r3, 8017d1a <__swsetup_r+0x9a>
 8017d06:	89a3      	ldrh	r3, [r4, #12]
 8017d08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d10:	d003      	beq.n	8017d1a <__swsetup_r+0x9a>
 8017d12:	4621      	mov	r1, r4
 8017d14:	4630      	mov	r0, r6
 8017d16:	f000 f84d 	bl	8017db4 <__smakebuf_r>
 8017d1a:	89a0      	ldrh	r0, [r4, #12]
 8017d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017d20:	f010 0301 	ands.w	r3, r0, #1
 8017d24:	d00a      	beq.n	8017d3c <__swsetup_r+0xbc>
 8017d26:	2300      	movs	r3, #0
 8017d28:	60a3      	str	r3, [r4, #8]
 8017d2a:	6963      	ldr	r3, [r4, #20]
 8017d2c:	425b      	negs	r3, r3
 8017d2e:	61a3      	str	r3, [r4, #24]
 8017d30:	6923      	ldr	r3, [r4, #16]
 8017d32:	b943      	cbnz	r3, 8017d46 <__swsetup_r+0xc6>
 8017d34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017d38:	d1ba      	bne.n	8017cb0 <__swsetup_r+0x30>
 8017d3a:	bd70      	pop	{r4, r5, r6, pc}
 8017d3c:	0781      	lsls	r1, r0, #30
 8017d3e:	bf58      	it	pl
 8017d40:	6963      	ldrpl	r3, [r4, #20]
 8017d42:	60a3      	str	r3, [r4, #8]
 8017d44:	e7f4      	b.n	8017d30 <__swsetup_r+0xb0>
 8017d46:	2000      	movs	r0, #0
 8017d48:	e7f7      	b.n	8017d3a <__swsetup_r+0xba>
 8017d4a:	bf00      	nop
 8017d4c:	20000020 	.word	0x20000020
 8017d50:	0801b648 	.word	0x0801b648
 8017d54:	0801b668 	.word	0x0801b668
 8017d58:	0801b628 	.word	0x0801b628

08017d5c <abort>:
 8017d5c:	b508      	push	{r3, lr}
 8017d5e:	2006      	movs	r0, #6
 8017d60:	f000 f890 	bl	8017e84 <raise>
 8017d64:	2001      	movs	r0, #1
 8017d66:	f7ea f8cf 	bl	8001f08 <_exit>

08017d6a <__swhatbuf_r>:
 8017d6a:	b570      	push	{r4, r5, r6, lr}
 8017d6c:	460e      	mov	r6, r1
 8017d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d72:	2900      	cmp	r1, #0
 8017d74:	b096      	sub	sp, #88	; 0x58
 8017d76:	4614      	mov	r4, r2
 8017d78:	461d      	mov	r5, r3
 8017d7a:	da08      	bge.n	8017d8e <__swhatbuf_r+0x24>
 8017d7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017d80:	2200      	movs	r2, #0
 8017d82:	602a      	str	r2, [r5, #0]
 8017d84:	061a      	lsls	r2, r3, #24
 8017d86:	d410      	bmi.n	8017daa <__swhatbuf_r+0x40>
 8017d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d8c:	e00e      	b.n	8017dac <__swhatbuf_r+0x42>
 8017d8e:	466a      	mov	r2, sp
 8017d90:	f000 f894 	bl	8017ebc <_fstat_r>
 8017d94:	2800      	cmp	r0, #0
 8017d96:	dbf1      	blt.n	8017d7c <__swhatbuf_r+0x12>
 8017d98:	9a01      	ldr	r2, [sp, #4]
 8017d9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017d9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017da2:	425a      	negs	r2, r3
 8017da4:	415a      	adcs	r2, r3
 8017da6:	602a      	str	r2, [r5, #0]
 8017da8:	e7ee      	b.n	8017d88 <__swhatbuf_r+0x1e>
 8017daa:	2340      	movs	r3, #64	; 0x40
 8017dac:	2000      	movs	r0, #0
 8017dae:	6023      	str	r3, [r4, #0]
 8017db0:	b016      	add	sp, #88	; 0x58
 8017db2:	bd70      	pop	{r4, r5, r6, pc}

08017db4 <__smakebuf_r>:
 8017db4:	898b      	ldrh	r3, [r1, #12]
 8017db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017db8:	079d      	lsls	r5, r3, #30
 8017dba:	4606      	mov	r6, r0
 8017dbc:	460c      	mov	r4, r1
 8017dbe:	d507      	bpl.n	8017dd0 <__smakebuf_r+0x1c>
 8017dc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017dc4:	6023      	str	r3, [r4, #0]
 8017dc6:	6123      	str	r3, [r4, #16]
 8017dc8:	2301      	movs	r3, #1
 8017dca:	6163      	str	r3, [r4, #20]
 8017dcc:	b002      	add	sp, #8
 8017dce:	bd70      	pop	{r4, r5, r6, pc}
 8017dd0:	ab01      	add	r3, sp, #4
 8017dd2:	466a      	mov	r2, sp
 8017dd4:	f7ff ffc9 	bl	8017d6a <__swhatbuf_r>
 8017dd8:	9900      	ldr	r1, [sp, #0]
 8017dda:	4605      	mov	r5, r0
 8017ddc:	4630      	mov	r0, r6
 8017dde:	f7ff f943 	bl	8017068 <_malloc_r>
 8017de2:	b948      	cbnz	r0, 8017df8 <__smakebuf_r+0x44>
 8017de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017de8:	059a      	lsls	r2, r3, #22
 8017dea:	d4ef      	bmi.n	8017dcc <__smakebuf_r+0x18>
 8017dec:	f023 0303 	bic.w	r3, r3, #3
 8017df0:	f043 0302 	orr.w	r3, r3, #2
 8017df4:	81a3      	strh	r3, [r4, #12]
 8017df6:	e7e3      	b.n	8017dc0 <__smakebuf_r+0xc>
 8017df8:	4b0d      	ldr	r3, [pc, #52]	; (8017e30 <__smakebuf_r+0x7c>)
 8017dfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8017dfc:	89a3      	ldrh	r3, [r4, #12]
 8017dfe:	6020      	str	r0, [r4, #0]
 8017e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e04:	81a3      	strh	r3, [r4, #12]
 8017e06:	9b00      	ldr	r3, [sp, #0]
 8017e08:	6163      	str	r3, [r4, #20]
 8017e0a:	9b01      	ldr	r3, [sp, #4]
 8017e0c:	6120      	str	r0, [r4, #16]
 8017e0e:	b15b      	cbz	r3, 8017e28 <__smakebuf_r+0x74>
 8017e10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e14:	4630      	mov	r0, r6
 8017e16:	f000 f863 	bl	8017ee0 <_isatty_r>
 8017e1a:	b128      	cbz	r0, 8017e28 <__smakebuf_r+0x74>
 8017e1c:	89a3      	ldrh	r3, [r4, #12]
 8017e1e:	f023 0303 	bic.w	r3, r3, #3
 8017e22:	f043 0301 	orr.w	r3, r3, #1
 8017e26:	81a3      	strh	r3, [r4, #12]
 8017e28:	89a0      	ldrh	r0, [r4, #12]
 8017e2a:	4305      	orrs	r5, r0
 8017e2c:	81a5      	strh	r5, [r4, #12]
 8017e2e:	e7cd      	b.n	8017dcc <__smakebuf_r+0x18>
 8017e30:	08016d49 	.word	0x08016d49

08017e34 <_raise_r>:
 8017e34:	291f      	cmp	r1, #31
 8017e36:	b538      	push	{r3, r4, r5, lr}
 8017e38:	4604      	mov	r4, r0
 8017e3a:	460d      	mov	r5, r1
 8017e3c:	d904      	bls.n	8017e48 <_raise_r+0x14>
 8017e3e:	2316      	movs	r3, #22
 8017e40:	6003      	str	r3, [r0, #0]
 8017e42:	f04f 30ff 	mov.w	r0, #4294967295
 8017e46:	bd38      	pop	{r3, r4, r5, pc}
 8017e48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017e4a:	b112      	cbz	r2, 8017e52 <_raise_r+0x1e>
 8017e4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017e50:	b94b      	cbnz	r3, 8017e66 <_raise_r+0x32>
 8017e52:	4620      	mov	r0, r4
 8017e54:	f000 f830 	bl	8017eb8 <_getpid_r>
 8017e58:	462a      	mov	r2, r5
 8017e5a:	4601      	mov	r1, r0
 8017e5c:	4620      	mov	r0, r4
 8017e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e62:	f000 b817 	b.w	8017e94 <_kill_r>
 8017e66:	2b01      	cmp	r3, #1
 8017e68:	d00a      	beq.n	8017e80 <_raise_r+0x4c>
 8017e6a:	1c59      	adds	r1, r3, #1
 8017e6c:	d103      	bne.n	8017e76 <_raise_r+0x42>
 8017e6e:	2316      	movs	r3, #22
 8017e70:	6003      	str	r3, [r0, #0]
 8017e72:	2001      	movs	r0, #1
 8017e74:	e7e7      	b.n	8017e46 <_raise_r+0x12>
 8017e76:	2400      	movs	r4, #0
 8017e78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017e7c:	4628      	mov	r0, r5
 8017e7e:	4798      	blx	r3
 8017e80:	2000      	movs	r0, #0
 8017e82:	e7e0      	b.n	8017e46 <_raise_r+0x12>

08017e84 <raise>:
 8017e84:	4b02      	ldr	r3, [pc, #8]	; (8017e90 <raise+0xc>)
 8017e86:	4601      	mov	r1, r0
 8017e88:	6818      	ldr	r0, [r3, #0]
 8017e8a:	f7ff bfd3 	b.w	8017e34 <_raise_r>
 8017e8e:	bf00      	nop
 8017e90:	20000020 	.word	0x20000020

08017e94 <_kill_r>:
 8017e94:	b538      	push	{r3, r4, r5, lr}
 8017e96:	4d07      	ldr	r5, [pc, #28]	; (8017eb4 <_kill_r+0x20>)
 8017e98:	2300      	movs	r3, #0
 8017e9a:	4604      	mov	r4, r0
 8017e9c:	4608      	mov	r0, r1
 8017e9e:	4611      	mov	r1, r2
 8017ea0:	602b      	str	r3, [r5, #0]
 8017ea2:	f7ea f81f 	bl	8001ee4 <_kill>
 8017ea6:	1c43      	adds	r3, r0, #1
 8017ea8:	d102      	bne.n	8017eb0 <_kill_r+0x1c>
 8017eaa:	682b      	ldr	r3, [r5, #0]
 8017eac:	b103      	cbz	r3, 8017eb0 <_kill_r+0x1c>
 8017eae:	6023      	str	r3, [r4, #0]
 8017eb0:	bd38      	pop	{r3, r4, r5, pc}
 8017eb2:	bf00      	nop
 8017eb4:	2000d470 	.word	0x2000d470

08017eb8 <_getpid_r>:
 8017eb8:	f7ea b80c 	b.w	8001ed4 <_getpid>

08017ebc <_fstat_r>:
 8017ebc:	b538      	push	{r3, r4, r5, lr}
 8017ebe:	4d07      	ldr	r5, [pc, #28]	; (8017edc <_fstat_r+0x20>)
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	4604      	mov	r4, r0
 8017ec4:	4608      	mov	r0, r1
 8017ec6:	4611      	mov	r1, r2
 8017ec8:	602b      	str	r3, [r5, #0]
 8017eca:	f7ea f86c 	bl	8001fa6 <_fstat>
 8017ece:	1c43      	adds	r3, r0, #1
 8017ed0:	d102      	bne.n	8017ed8 <_fstat_r+0x1c>
 8017ed2:	682b      	ldr	r3, [r5, #0]
 8017ed4:	b103      	cbz	r3, 8017ed8 <_fstat_r+0x1c>
 8017ed6:	6023      	str	r3, [r4, #0]
 8017ed8:	bd38      	pop	{r3, r4, r5, pc}
 8017eda:	bf00      	nop
 8017edc:	2000d470 	.word	0x2000d470

08017ee0 <_isatty_r>:
 8017ee0:	b538      	push	{r3, r4, r5, lr}
 8017ee2:	4d06      	ldr	r5, [pc, #24]	; (8017efc <_isatty_r+0x1c>)
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	4604      	mov	r4, r0
 8017ee8:	4608      	mov	r0, r1
 8017eea:	602b      	str	r3, [r5, #0]
 8017eec:	f7ea f86b 	bl	8001fc6 <_isatty>
 8017ef0:	1c43      	adds	r3, r0, #1
 8017ef2:	d102      	bne.n	8017efa <_isatty_r+0x1a>
 8017ef4:	682b      	ldr	r3, [r5, #0]
 8017ef6:	b103      	cbz	r3, 8017efa <_isatty_r+0x1a>
 8017ef8:	6023      	str	r3, [r4, #0]
 8017efa:	bd38      	pop	{r3, r4, r5, pc}
 8017efc:	2000d470 	.word	0x2000d470

08017f00 <_init>:
 8017f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f02:	bf00      	nop
 8017f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f06:	bc08      	pop	{r3}
 8017f08:	469e      	mov	lr, r3
 8017f0a:	4770      	bx	lr

08017f0c <_fini>:
 8017f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f0e:	bf00      	nop
 8017f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f12:	bc08      	pop	{r3}
 8017f14:	469e      	mov	lr, r3
 8017f16:	4770      	bx	lr
