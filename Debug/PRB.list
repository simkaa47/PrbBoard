
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011eac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002de4  0801203c  0801203c  0002203c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e20  08014e20  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08014e20  08014e20  00024e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e28  08014e28  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e28  08014e28  00024e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014e2c  08014e2c  00024e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08014e30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030080  2**0
                  CONTENTS
 10 .bss          0000aab4  20000080  20000080  00030080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000ab34  2000ab34  00030080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ce7c  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000076b9  00000000  00000000  0006cf2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d08  00000000  00000000  000745e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001bb8  00000000  00000000  000762f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000301f3  00000000  00000000  00077ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e34a  00000000  00000000  000a809b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee91b  00000000  00000000  000d63e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c4d00  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e5c  00000000  00000000  001c4d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012024 	.word	0x08012024

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08012024 	.word	0x08012024

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <vApplicationGetIdleTaskMemory+0x2c>)
 8000578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <vApplicationGetIdleTaskMemory+0x30>)
 800057e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000009c 	.word	0x2000009c
 8000598:	20000150 	.word	0x20000150

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fb89 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f81b 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f889 	bl	80006c0 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <main+0x3c>)
 80005b0:	1d3c      	adds	r4, r7, #4
 80005b2:	461d      	mov	r5, r3
 80005b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 fd2a 	bl	800401e <osThreadCreate>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a03      	ldr	r2, [pc, #12]	; (80005dc <main+0x40>)
 80005ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005d0:	f003 fd0e 	bl	8003ff0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <main+0x38>
 80005d6:	bf00      	nop
 80005d8:	08012048 	.word	0x08012048
 80005dc:	2000426c 	.word	0x2000426c

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f010 fd8c 	bl	801110c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <SystemClock_Config+0xd8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a2a      	ldr	r2, [pc, #168]	; (80006b8 <SystemClock_Config+0xd8>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <SystemClock_Config+0xd8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xdc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a24      	ldr	r2, [pc, #144]	; (80006bc <SystemClock_Config+0xdc>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xdc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000650:	2319      	movs	r3, #25
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000654:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800065e:	2304      	movs	r3, #4
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	4618      	mov	r0, r3
 8000668:	f001 ffb0 	bl	80025cc <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000672:	f000 f89d 	bl	80007b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000682:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2105      	movs	r1, #5
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fa11 	bl	8002abc <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a0:	f000 f886 	bl	80007b0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80006aa:	2000      	movs	r0, #0
 80006ac:	f002 faec 	bl	8002c88 <HAL_RCC_MCOConfig>
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	; 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_GPIO_Init+0xb0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a24      	ldr	r2, [pc, #144]	; (8000770 <MX_GPIO_Init+0xb0>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_GPIO_Init+0xb0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_GPIO_Init+0xb0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <MX_GPIO_Init+0xb0>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_GPIO_Init+0xb0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_GPIO_Init+0xb0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a16      	ldr	r2, [pc, #88]	; (8000770 <MX_GPIO_Init+0xb0>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_GPIO_Init+0xb0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_GPIO_Init+0xb0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <MX_GPIO_Init+0xb0>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_GPIO_Init+0xb0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_GPIO_Init+0xb4>)
 8000764:	f001 fd96 	bl	8002294 <HAL_GPIO_Init>

}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40020000 	.word	0x40020000

08000778 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000780:	f002 fea0 	bl	80034c4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f003 fc96 	bl	80040b6 <osDelay>
 800078a:	e7fb      	b.n	8000784 <StartDefaultTask+0xc>

0800078c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d101      	bne.n	80007a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800079e:	f000 faad 	bl	8000cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40010000 	.word	0x40010000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_MspInit+0x54>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	4a11      	ldr	r2, [pc, #68]	; (8000810 <HAL_MspInit+0x54>)
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	; 0x44
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_MspInit+0x54>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <HAL_MspInit+0x54>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <HAL_MspInit+0x54>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_MspInit+0x54>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	210f      	movs	r1, #15
 80007fe:	f06f 0001 	mvn.w	r0, #1
 8000802:	f000 fb77 	bl	8000ef4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	2019      	movs	r0, #25
 800082a:	f000 fb63 	bl	8000ef4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800082e:	2019      	movs	r0, #25
 8000830:	f000 fb7c 	bl	8000f2c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <HAL_InitTick+0xa4>)
 800083a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083c:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <HAL_InitTick+0xa4>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	6453      	str	r3, [r2, #68]	; 0x44
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <HAL_InitTick+0xa4>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000850:	f107 0210 	add.w	r2, r7, #16
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fb52 	bl	8002f04 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000860:	f002 fb3c 	bl	8002edc <HAL_RCC_GetPCLK2Freq>
 8000864:	4603      	mov	r3, r0
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086c:	4a13      	ldr	r2, [pc, #76]	; (80008bc <HAL_InitTick+0xa8>)
 800086e:	fba2 2303 	umull	r2, r3, r2, r3
 8000872:	0c9b      	lsrs	r3, r3, #18
 8000874:	3b01      	subs	r3, #1
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_InitTick+0xac>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <HAL_InitTick+0xb0>)
 800087c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_InitTick+0xac>)
 8000880:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000884:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_InitTick+0xac>)
 8000888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_InitTick+0xac>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_InitTick+0xac>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <HAL_InitTick+0xac>)
 800089a:	f002 fb65 	bl	8002f68 <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d104      	bne.n	80008ae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008a4:	4806      	ldr	r0, [pc, #24]	; (80008c0 <HAL_InitTick+0xac>)
 80008a6:	f002 fbb9 	bl	800301c <HAL_TIM_Base_Start_IT>
 80008aa:	4603      	mov	r3, r0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3730      	adds	r7, #48	; 0x30
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	431bde83 	.word	0x431bde83
 80008c0:	20004270 	.word	0x20004270
 80008c4:	40010000 	.word	0x40010000

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80008fa:	f002 fbff 	bl	80030fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20004270 	.word	0x20004270

08000908 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <ETH_IRQHandler+0x10>)
 800090e:	f000 feff 	bl	8001710 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20005be0 	.word	0x20005be0

0800091c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
	return 1;
 8000920:	2301      	movs	r3, #1
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_kill>:

int _kill(int pid, int sig)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <_kill+0x20>)
 8000938:	2216      	movs	r2, #22
 800093a:	601a      	str	r2, [r3, #0]
	return -1;
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	2000ab2c 	.word	0x2000ab2c

08000950 <_exit>:

void _exit (int status)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000958:	f04f 31ff 	mov.w	r1, #4294967295
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ffe5 	bl	800092c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000962:	e7fe      	b.n	8000962 <_exit+0x12>

08000964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e00a      	b.n	800098c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000976:	f3af 8000 	nop.w
 800097a:	4601      	mov	r1, r0
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	60ba      	str	r2, [r7, #8]
 8000982:	b2ca      	uxtb	r2, r1
 8000984:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	3301      	adds	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	429a      	cmp	r2, r3
 8000992:	dbf0      	blt.n	8000976 <_read+0x12>
	}

return len;
 8000994:	687b      	ldr	r3, [r7, #4]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	e009      	b.n	80009c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	60ba      	str	r2, [r7, #8]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf1      	blt.n	80009b0 <_write+0x12>
	}
	return len;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_close>:

int _close(int file)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
	return -1;
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009fe:	605a      	str	r2, [r3, #4]
	return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <_isatty>:

int _isatty(int file)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
	return 1;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <_sbrk+0x5c>)
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <_sbrk+0x60>)
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <_sbrk+0x64>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <_sbrk+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d205      	bcs.n	8000a7c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <_sbrk+0x6c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	e009      	b.n	8000a90 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <_sbrk+0x64>)
 8000a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	371c      	adds	r7, #28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	20020000 	.word	0x20020000
 8000aa0:	00000400 	.word	0x00000400
 8000aa4:	20000350 	.word	0x20000350
 8000aa8:	2000ab38 	.word	0x2000ab38
 8000aac:	2000ab2c 	.word	0x2000ab2c

08000ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <SystemInit+0x20>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <SystemInit+0x20>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ada:	490e      	ldr	r1, [pc, #56]	; (8000b14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af0:	4c0b      	ldr	r4, [pc, #44]	; (8000b20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000afe:	f7ff ffd7 	bl	8000ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b02:	f010 fabb 	bl	801107c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b06:	f7ff fd49 	bl	800059c <main>
  bx  lr    
 8000b0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000b18:	08014e30 	.word	0x08014e30
  ldr r2, =_sbss
 8000b1c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000b20:	2000ab34 	.word	0x2000ab34

08000b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC_IRQHandler>

08000b26 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d104      	bne.n	8000b3e <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
 8000b38:	f7ff fe3a 	bl	80007b0 <Error_Handler>
 8000b3c:	e7fe      	b.n	8000b3c <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e007      	b.n	8000b54 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3301      	adds	r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d9f4      	bls.n	8000b44 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	721a      	strb	r2, [r3, #8]
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d104      	bne.n	8000b80 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b76:	b672      	cpsid	i
}
 8000b78:	bf00      	nop
 8000b7a:	f7ff fe19 	bl	80007b0 <Error_Handler>
 8000b7e:	e7fe      	b.n	8000b7e <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7a1b      	ldrb	r3, [r3, #8]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d904      	bls.n	8000b92 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
 8000b8c:	f7ff fe10 	bl	80007b0 <Error_Handler>
 8000b90:	e7fe      	b.n	8000b90 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7a1b      	ldrb	r3, [r3, #8]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	b2d1      	uxtb	r1, r2
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	7211      	strb	r1, [r2, #8]
 8000b9e:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000ba0:	f3ef 8211 	mrs	r2, BASEPRI
 8000ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba8:	f383 8811 	msr	BASEPRI, r3
 8000bac:	f3bf 8f6f 	isb	sy
 8000bb0:	f3bf 8f4f 	dsb	sy
 8000bb4:	60fa      	str	r2, [r7, #12]
 8000bb6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d104      	bne.n	8000be0 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd6:	b672      	cpsid	i
}
 8000bd8:	bf00      	nop
 8000bda:	f7ff fde9 	bl	80007b0 <Error_Handler>
 8000bde:	e7fe      	b.n	8000bde <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7a1b      	ldrb	r3, [r3, #8]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7a1b      	ldrb	r3, [r3, #8]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d904      	bls.n	8000bfe <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
 8000bf8:	f7ff fdda 	bl	80007b0 <Error_Handler>
 8000bfc:	e7fe      	b.n	8000bfc <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7a1b      	ldrb	r3, [r3, #8]
 8000c02:	461a      	mov	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c0a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000c12:	bf00      	nop
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <__retarget_lock_init_recursive+0x48>)
 8000c2c:	2216      	movs	r2, #22
 8000c2e:	601a      	str	r2, [r3, #0]
    return;
 8000c30:	e015      	b.n	8000c5e <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8000c32:	200c      	movs	r0, #12
 8000c34:	f010 fa46 	bl	80110c4 <malloc>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d005      	beq.n	8000c54 <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff6a 	bl	8000b26 <stm32_lock_init>
    return;
 8000c52:	e004      	b.n	8000c5e <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8000c58:	f7ff fdaa 	bl	80007b0 <Error_Handler>
 8000c5c:	e7fe      	b.n	8000c5c <__retarget_lock_init_recursive+0x40>
}
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2000ab2c 	.word	0x2000ab2c

08000c68 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d104      	bne.n	8000c80 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c76:	b672      	cpsid	i
}
 8000c78:	bf00      	nop
 8000c7a:	f7ff fd99 	bl	80007b0 <Error_Handler>
 8000c7e:	e7fe      	b.n	8000c7e <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ff70 	bl	8000b68 <stm32_lock_acquire>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d104      	bne.n	8000ca8 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9e:	b672      	cpsid	i
}
 8000ca0:	bf00      	nop
 8000ca2:	f7ff fd85 	bl	80007b0 <Error_Handler>
 8000ca6:	e7fe      	b.n	8000ca6 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff8c 	bl	8000bc8 <stm32_lock_release>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f8fc 	bl	8000ede <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f7ff fd94 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fd66 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	200042b8 	.word	0x200042b8

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200042b8 	.word	0x200042b8

08000d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff ffee 	bl	8000d24 <HAL_GetTick>
 8000d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d005      	beq.n	8000d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_Delay+0x44>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d62:	bf00      	nop
 8000d64:	f7ff ffde 	bl	8000d24 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f7      	bhi.n	8000d64 <HAL_Delay+0x28>
  {
  }
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	; (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	; (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff4c 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f06:	f7ff ff61 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	6978      	ldr	r0, [r7, #20]
 8000f12:	f7ff ffb1 	bl	8000e78 <NVIC_EncodePriority>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff80 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff54 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000f58:	4baa      	ldr	r3, [pc, #680]	; (8001204 <HAL_ETH_Init+0x2bc>)
 8000f5a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e183      	b.n	8001276 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d106      	bne.n	8000f88 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f002 fbfc 	bl	8003780 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4b9e      	ldr	r3, [pc, #632]	; (8001208 <HAL_ETH_Init+0x2c0>)
 8000f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f90:	4a9d      	ldr	r2, [pc, #628]	; (8001208 <HAL_ETH_Init+0x2c0>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	6453      	str	r3, [r2, #68]	; 0x44
 8000f98:	4b9b      	ldr	r3, [pc, #620]	; (8001208 <HAL_ETH_Init+0x2c0>)
 8000f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000fa4:	4b99      	ldr	r3, [pc, #612]	; (800120c <HAL_ETH_Init+0x2c4>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4a98      	ldr	r2, [pc, #608]	; (800120c <HAL_ETH_Init+0x2c4>)
 8000faa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fae:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000fb0:	4b96      	ldr	r3, [pc, #600]	; (800120c <HAL_ETH_Init+0x2c4>)
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	4994      	ldr	r1, [pc, #592]	; (800120c <HAL_ETH_Init+0x2c4>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 0201 	orr.w	r2, r2, #1
 8000fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000fd6:	f7ff fea5 	bl	8000d24 <HAL_GetTick>
 8000fda:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000fdc:	e011      	b.n	8001002 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000fde:	f7ff fea1 	bl	8000d24 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fec:	d909      	bls.n	8001002 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e139      	b.n	8001276 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1e4      	bne.n	8000fde <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f023 031c 	bic.w	r3, r3, #28
 8001022:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001024:	f001 ff4e 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8001028:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4a78      	ldr	r2, [pc, #480]	; (8001210 <HAL_ETH_Init+0x2c8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d908      	bls.n	8001044 <HAL_ETH_Init+0xfc>
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	4a77      	ldr	r2, [pc, #476]	; (8001214 <HAL_ETH_Init+0x2cc>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d804      	bhi.n	8001044 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	e027      	b.n	8001094 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	4a73      	ldr	r2, [pc, #460]	; (8001214 <HAL_ETH_Init+0x2cc>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d908      	bls.n	800105e <HAL_ETH_Init+0x116>
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	4a6d      	ldr	r2, [pc, #436]	; (8001204 <HAL_ETH_Init+0x2bc>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d204      	bcs.n	800105e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f043 030c 	orr.w	r3, r3, #12
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	e01a      	b.n	8001094 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4a68      	ldr	r2, [pc, #416]	; (8001204 <HAL_ETH_Init+0x2bc>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d303      	bcc.n	800106e <HAL_ETH_Init+0x126>
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	4a6b      	ldr	r2, [pc, #428]	; (8001218 <HAL_ETH_Init+0x2d0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d911      	bls.n	8001092 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4a69      	ldr	r2, [pc, #420]	; (8001218 <HAL_ETH_Init+0x2d0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d908      	bls.n	8001088 <HAL_ETH_Init+0x140>
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	4a68      	ldr	r2, [pc, #416]	; (800121c <HAL_ETH_Init+0x2d4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d804      	bhi.n	8001088 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e005      	b.n	8001094 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	e000      	b.n	8001094 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001092:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800109c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010a0:	2100      	movs	r1, #0
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fc17 	bl	80018d6 <HAL_ETH_WritePHYRegister>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00b      	beq.n	80010c6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80010b2:	6939      	ldr	r1, [r7, #16]
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 fdcd 	bl	8001c54 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e0d7      	b.n	8001276 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80010c6:	20ff      	movs	r0, #255	; 0xff
 80010c8:	f7ff fe38 	bl	8000d3c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80a5 	beq.w	8001220 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80010d6:	f7ff fe25 	bl	8000d24 <HAL_GetTick>
 80010da:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	461a      	mov	r2, r3
 80010e2:	2101      	movs	r1, #1
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 fb8e 	bl	8001806 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80010ea:	f7ff fe1b 	bl	8000d24 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d90f      	bls.n	800111c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001100:	6939      	ldr	r1, [r7, #16]
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 fda6 	bl	8001c54 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e0ac      	b.n	8001276 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0da      	beq.n	80010dc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001126:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800112a:	2100      	movs	r1, #0
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 fbd2 	bl	80018d6 <HAL_ETH_WritePHYRegister>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00b      	beq.n	8001150 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800113c:	6939      	ldr	r1, [r7, #16]
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 fd88 	bl	8001c54 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800114c:	2301      	movs	r3, #1
 800114e:	e092      	b.n	8001276 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001150:	f7ff fde8 	bl	8000d24 <HAL_GetTick>
 8001154:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	461a      	mov	r2, r3
 800115c:	2101      	movs	r1, #1
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 fb51 	bl	8001806 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001164:	f7ff fdde 	bl	8000d24 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001172:	4293      	cmp	r3, r2
 8001174:	d90f      	bls.n	8001196 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800117a:	6939      	ldr	r1, [r7, #16]
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 fd69 	bl	8001c54 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e06f      	b.n	8001276 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0da      	beq.n	8001156 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	461a      	mov	r2, r3
 80011a6:	2110      	movs	r1, #16
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 fb2c 	bl	8001806 <HAL_ETH_ReadPHYRegister>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00b      	beq.n	80011cc <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011b8:	6939      	ldr	r1, [r7, #16]
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 fd4a 	bl	8001c54 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80011c8:	2301      	movs	r3, #1
 80011ca:	e054      	b.n	8001276 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	e002      	b.n	80011e6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	e035      	b.n	8001264 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	e030      	b.n	8001264 <HAL_ETH_Init+0x31c>
 8001202:	bf00      	nop
 8001204:	03938700 	.word	0x03938700
 8001208:	40023800 	.word	0x40023800
 800120c:	40013800 	.word	0x40013800
 8001210:	01312cff 	.word	0x01312cff
 8001214:	02160ebf 	.word	0x02160ebf
 8001218:	05f5e0ff 	.word	0x05f5e0ff
 800121c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	08db      	lsrs	r3, r3, #3
 8001226:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	085b      	lsrs	r3, r3, #1
 800122e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001230:	4313      	orrs	r3, r2
 8001232:	b29b      	uxth	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	2100      	movs	r1, #0
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 fb4c 	bl	80018d6 <HAL_ETH_WritePHYRegister>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00b      	beq.n	800125c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001248:	6939      	ldr	r1, [r7, #16]
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 fd02 	bl	8001c54 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e00c      	b.n	8001276 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800125c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001260:	f7ff fd6c 	bl	8000d3c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001264:	6939      	ldr	r1, [r7, #16]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 fcf4 	bl	8001c54 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop

08001280 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <HAL_ETH_DMATxDescListInit+0x20>
 800129c:	2302      	movs	r3, #2
 800129e:	e052      	b.n	8001346 <HAL_ETH_DMATxDescListInit+0xc6>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2202      	movs	r2, #2
 80012ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e030      	b.n	800131e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	015b      	lsls	r3, r3, #5
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	4413      	add	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012cc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	461a      	mov	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d105      	bne.n	80012f6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d208      	bcs.n	8001312 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	015b      	lsls	r3, r3, #5
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	4413      	add	r3, r2
 800130a:	461a      	mov	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	e002      	b.n	8001318 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3ca      	bcc.n	80012bc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001330:	3310      	adds	r3, #16
 8001332:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001352:	b480      	push	{r7}
 8001354:	b087      	sub	sp, #28
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800136a:	2b01      	cmp	r3, #1
 800136c:	d101      	bne.n	8001372 <HAL_ETH_DMARxDescListInit+0x20>
 800136e:	2302      	movs	r3, #2
 8001370:	e056      	b.n	8001420 <HAL_ETH_DMARxDescListInit+0xce>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2202      	movs	r2, #2
 800137e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	e034      	b.n	80013f8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	015b      	lsls	r3, r3, #5
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4413      	add	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800139e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80013a6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	461a      	mov	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d105      	bne.n	80013d0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d208      	bcs.n	80013ec <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	015b      	lsls	r3, r3, #5
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	4413      	add	r3, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	e002      	b.n	80013f2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3301      	adds	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d3c6      	bcc.n	800138e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140a:	330c      	adds	r3, #12
 800140c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800142c:	b480      	push	{r7}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_ETH_TransmitFrame+0x24>
 800144c:	2302      	movs	r3, #2
 800144e:	e0cd      	b.n	80015ec <HAL_ETH_TransmitFrame+0x1c0>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2202      	movs	r2, #2
 800145c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001476:	2301      	movs	r3, #1
 8001478:	e0b8      	b.n	80015ec <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	da09      	bge.n	8001498 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2212      	movs	r2, #18
 8001488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0a9      	b.n	80015ec <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800149e:	4293      	cmp	r3, r2
 80014a0:	d915      	bls.n	80014ce <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	4a54      	ldr	r2, [pc, #336]	; (80015f8 <HAL_ETH_TransmitFrame+0x1cc>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	0a9b      	lsrs	r3, r3, #10
 80014ac:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	4b51      	ldr	r3, [pc, #324]	; (80015f8 <HAL_ETH_TransmitFrame+0x1cc>)
 80014b2:	fba3 1302 	umull	r1, r3, r3, r2
 80014b6:	0a9b      	lsrs	r3, r3, #10
 80014b8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80014bc:	fb01 f303 	mul.w	r3, r1, r3
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	e001      	b.n	80014d2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80014ce:	2301      	movs	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d11c      	bne.n	8001512 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80014e6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80014f2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001502:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	461a      	mov	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001510:	e04b      	b.n	80015aa <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	e044      	b.n	80015a2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001526:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d107      	bne.n	800153e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001538:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800153c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001542:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001546:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3b01      	subs	r3, #1
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	429a      	cmp	r2, r3
 8001550:	d116      	bne.n	8001580 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001560:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	4a25      	ldr	r2, [pc, #148]	; (80015fc <HAL_ETH_TransmitFrame+0x1d0>)
 8001566:	fb02 f203 	mul.w	r2, r2, r3
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	4413      	add	r3, r2
 800156e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001572:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800157e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800158e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	461a      	mov	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	3301      	adds	r3, #1
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d3b6      	bcc.n	8001518 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b2:	3314      	adds	r3, #20
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00d      	beq.n	80015da <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c6:	3314      	adds	r3, #20
 80015c8:	2204      	movs	r2, #4
 80015ca:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d4:	3304      	adds	r3, #4
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	ac02b00b 	.word	0xac02b00b
 80015fc:	fffffa0c 	.word	0xfffffa0c

08001600 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001616:	2302      	movs	r3, #2
 8001618:	e074      	b.n	8001704 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2202      	movs	r2, #2
 8001626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800162a:	e05a      	b.n	80016e2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3301      	adds	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800163c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001640:	d10d      	bne.n	800165e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
 800165c:	e041      	b.n	80016e2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10b      	bne.n	8001684 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
 8001682:	e02e      	b.n	80016e2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169a:	2b01      	cmp	r3, #1
 800169c:	d103      	bne.n	80016a6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0c1b      	lsrs	r3, r3, #16
 80016ae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016b2:	1f1a      	subs	r2, r3, #4
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	461a      	mov	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e010      	b.n	8001704 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db02      	blt.n	80016f2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d99c      	bls.n	800162c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001720:	3314      	adds	r3, #20
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001728:	2b40      	cmp	r3, #64	; 0x40
 800172a:	d112      	bne.n	8001752 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f002 f8d5 	bl	80038dc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173a:	3314      	adds	r3, #20
 800173c:	2240      	movs	r2, #64	; 0x40
 800173e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001750:	e01b      	b.n	800178a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800175a:	3314      	adds	r3, #20
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b01      	cmp	r3, #1
 8001764:	d111      	bne.n	800178a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f839 	bl	80017de <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001774:	3314      	adds	r3, #20
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001792:	3314      	adds	r3, #20
 8001794:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001798:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a2:	3314      	adds	r3, #20
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ae:	d112      	bne.n	80017d6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f81e 	bl	80017f2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017be:	3314      	adds	r3, #20
 80017c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017c4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	460b      	mov	r3, r1
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b82      	cmp	r3, #130	; 0x82
 8001826:	d101      	bne.n	800182c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001828:	2302      	movs	r3, #2
 800182a:	e050      	b.n	80018ce <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2282      	movs	r2, #130	; 0x82
 8001830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f003 031c 	and.w	r3, r3, #28
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8a1b      	ldrh	r3, [r3, #16]
 8001848:	02db      	lsls	r3, r3, #11
 800184a:	b29b      	uxth	r3, r3
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	4313      	orrs	r3, r2
 8001850:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001852:	897b      	ldrh	r3, [r7, #10]
 8001854:	019b      	lsls	r3, r3, #6
 8001856:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4313      	orrs	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f023 0302 	bic.w	r3, r3, #2
 8001866:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001878:	f7ff fa54 	bl	8000d24 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800187e:	e015      	b.n	80018ac <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001880:	f7ff fa50 	bl	8000d24 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188e:	d309      	bcc.n	80018a4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e014      	b.n	80018ce <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1e4      	bne.n	8001880 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	460b      	mov	r3, r1
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b42      	cmp	r3, #66	; 0x42
 80018f6:	d101      	bne.n	80018fc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80018f8:	2302      	movs	r3, #2
 80018fa:	e04e      	b.n	800199a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2242      	movs	r2, #66	; 0x42
 8001900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 031c 	and.w	r3, r3, #28
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8a1b      	ldrh	r3, [r3, #16]
 8001918:	02db      	lsls	r3, r3, #11
 800191a:	b29b      	uxth	r3, r3
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	4313      	orrs	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001922:	897b      	ldrh	r3, [r7, #10]
 8001924:	019b      	lsls	r3, r3, #6
 8001926:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001952:	f7ff f9e7 	bl	8000d24 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001958:	e015      	b.n	8001986 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800195a:	f7ff f9e3 	bl	8000d24 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001968:	d309      	bcc.n	800197e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e00d      	b.n	800199a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e4      	bne.n	800195a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_ETH_Start+0x16>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e01f      	b.n	80019f8 <HAL_ETH_Start+0x56>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fb45 	bl	8002058 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 fb7c 	bl	80020cc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 fc13 	bl	8002200 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fbb0 	bl	8002140 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fbdd 	bl	80021a0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_ETH_Stop+0x16>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e01f      	b.n	8001a56 <HAL_ETH_Stop+0x56>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2202      	movs	r2, #2
 8001a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 fba2 	bl	8002170 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 fbcf 	bl	80021d0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fb67 	bl	8002106 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fbe1 	bl	8002200 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fb27 	bl	8002092 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_ETH_ConfigMAC+0x1c>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e0e4      	b.n	8001c46 <HAL_ETH_ConfigMAC+0x1e6>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80b1 	beq.w	8001bf6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <HAL_ETH_ConfigMAC+0x1f0>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001aac:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001ab2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001ab8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001abe:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001ac4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001aca:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001ad0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001ad6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001adc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001ae2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001ae8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001aee:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7ff f918 	bl	8000d3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b1c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001b22:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001b28:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001b2e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001b34:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001b3a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001b46:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b48:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b52:	2001      	movs	r0, #1
 8001b54:	f7ff f8f2 	bl	8000d3c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b68:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b72:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b82:	4013      	ands	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001b90:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001b96:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001b9c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001ba2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001ba8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f7ff f8bb 	bl	8000d3c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff f8a8 	bl	8000d3c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	61da      	str	r2, [r3, #28]
 8001bf4:	e01e      	b.n	8001c34 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c04:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff f888 	bl	8000d3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	ff20810f 	.word	0xff20810f

08001c54 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b0b0      	sub	sp, #192	; 0xc0
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c70:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c78:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001c82:	2300      	movs	r3, #0
 8001c84:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9e:	663b      	str	r3, [r7, #96]	; 0x60
 8001ca0:	e001      	b.n	8001ca6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001caa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001cc0:	2340      	movs	r3, #64	; 0x40
 8001cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d2c:	4bac      	ldr	r3, [pc, #688]	; (8001fe0 <ETH_MACDMAConfig+0x38c>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001d38:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001d3c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001d40:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001d46:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001d48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001d4a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001d4e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001d54:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001d58:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001d5c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001d60:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001d64:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001d68:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001d6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d7c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f7fe ffd7 	bl	8000d3c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d96:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d9c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001d9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001da0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001da2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001da6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001dac:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001db2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001db8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001dbc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001dc4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001dc6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f7fe ffb2 	bl	8000d3c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001de0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001dea:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001df4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e04:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e08:	4013      	ands	r3, r2
 8001e0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001e0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e12:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001e14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001e18:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001e1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001e1e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001e20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001e24:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001e2a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001e2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001e30:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001e32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e44:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f7fe ff73 	bl	8000d3c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e5e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e60:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001e64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f7fe ff5e 	bl	8000d3c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e88:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e92:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001e98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e9c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ebc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ede:	3318      	adds	r3, #24
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ee6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eea:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <ETH_MACDMAConfig+0x390>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ef2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ef6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001ef8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001efa:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001efc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001efe:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001f00:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001f02:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001f04:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001f06:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001f08:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001f0a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001f0e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001f12:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f26:	3318      	adds	r3, #24
 8001f28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f2c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f36:	3318      	adds	r3, #24
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7fe fefc 	bl	8000d3c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4c:	3318      	adds	r3, #24
 8001f4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f52:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f58:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001f5c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f60:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001f64:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f68:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001f6a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001f6e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f7c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f7fe fed5 	bl	8000d3c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f9e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d10f      	bne.n	8001fc8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb0:	331c      	adds	r3, #28
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc4:	331c      	adds	r3, #28
 8001fc6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2100      	movs	r1, #0
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f809 	bl	8001fe8 <ETH_MACAddressConfig>
}
 8001fd6:	bf00      	nop
 8001fd8:	37c0      	adds	r7, #192	; 0xc0
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	ff20810f 	.word	0xff20810f
 8001fe4:	f8de3f23 	.word	0xf8de3f23

08001fe8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3305      	adds	r3, #5
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	3204      	adds	r2, #4
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <ETH_MACAddressConfig+0x68>)
 800200a:	4413      	add	r3, r2
 800200c:	461a      	mov	r2, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3303      	adds	r3, #3
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	061a      	lsls	r2, r3, #24
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3302      	adds	r3, #2
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	041b      	lsls	r3, r3, #16
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3301      	adds	r3, #1
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	4313      	orrs	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <ETH_MACAddressConfig+0x6c>)
 800203a:	4413      	add	r3, r2
 800203c:	461a      	mov	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	6013      	str	r3, [r2, #0]
}
 8002042:	bf00      	nop
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40028040 	.word	0x40028040
 8002054:	40028044 	.word	0x40028044

08002058 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0208 	orr.w	r2, r2, #8
 8002072:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800207c:	2001      	movs	r0, #1
 800207e:	f000 f8e9 	bl	8002254 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0208 	bic.w	r2, r2, #8
 80020ac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f000 f8cc 	bl	8002254 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0204 	orr.w	r2, r2, #4
 80020e6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f000 f8af 	bl	8002254 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	601a      	str	r2, [r3, #0]
}
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0204 	bic.w	r2, r2, #4
 8002120:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800212a:	2001      	movs	r0, #1
 800212c:	f000 f892 	bl	8002254 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	601a      	str	r2, [r3, #0]
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002150:	3318      	adds	r3, #24
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800215c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002160:	3318      	adds	r3, #24
 8002162:	601a      	str	r2, [r3, #0]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002180:	3318      	adds	r3, #24
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800218c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002190:	3318      	adds	r3, #24
 8002192:	601a      	str	r2, [r3, #0]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b0:	3318      	adds	r3, #24
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0202 	orr.w	r2, r2, #2
 80021bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c0:	3318      	adds	r3, #24
 80021c2:	601a      	str	r2, [r3, #0]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e0:	3318      	adds	r3, #24
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0202 	bic.w	r2, r2, #2
 80021ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f0:	3318      	adds	r3, #24
 80021f2:	601a      	str	r2, [r3, #0]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002214:	3318      	adds	r3, #24
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002224:	3318      	adds	r3, #24
 8002226:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002230:	3318      	adds	r3, #24
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002236:	2001      	movs	r0, #1
 8002238:	f000 f80c 	bl	8002254 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002246:	3318      	adds	r3, #24
 8002248:	601a      	str	r2, [r3, #0]
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <ETH_Delay+0x38>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <ETH_Delay+0x3c>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0a5b      	lsrs	r3, r3, #9
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002270:	bf00      	nop
  } 
  while (Delay --);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1e5a      	subs	r2, r3, #1
 8002276:	60fa      	str	r2, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f9      	bne.n	8002270 <ETH_Delay+0x1c>
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000000 	.word	0x20000000
 8002290:	10624dd3 	.word	0x10624dd3

08002294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	e16b      	b.n	8002588 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b0:	2201      	movs	r2, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	f040 815a 	bne.w	8002582 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d005      	beq.n	80022e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d130      	bne.n	8002348 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	2203      	movs	r2, #3
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 0201 	and.w	r2, r3, #1
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b03      	cmp	r3, #3
 8002352:	d017      	beq.n	8002384 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d123      	bne.n	80023d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	220f      	movs	r2, #15
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	08da      	lsrs	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3208      	adds	r2, #8
 80023d2:	69b9      	ldr	r1, [r7, #24]
 80023d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0203 	and.w	r2, r3, #3
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80b4 	beq.w	8002582 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b60      	ldr	r3, [pc, #384]	; (80025a0 <HAL_GPIO_Init+0x30c>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4a5f      	ldr	r2, [pc, #380]	; (80025a0 <HAL_GPIO_Init+0x30c>)
 8002424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002428:	6453      	str	r3, [r2, #68]	; 0x44
 800242a:	4b5d      	ldr	r3, [pc, #372]	; (80025a0 <HAL_GPIO_Init+0x30c>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002436:	4a5b      	ldr	r2, [pc, #364]	; (80025a4 <HAL_GPIO_Init+0x310>)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <HAL_GPIO_Init+0x314>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d02b      	beq.n	80024ba <HAL_GPIO_Init+0x226>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a51      	ldr	r2, [pc, #324]	; (80025ac <HAL_GPIO_Init+0x318>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d025      	beq.n	80024b6 <HAL_GPIO_Init+0x222>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a50      	ldr	r2, [pc, #320]	; (80025b0 <HAL_GPIO_Init+0x31c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01f      	beq.n	80024b2 <HAL_GPIO_Init+0x21e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4f      	ldr	r2, [pc, #316]	; (80025b4 <HAL_GPIO_Init+0x320>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d019      	beq.n	80024ae <HAL_GPIO_Init+0x21a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4e      	ldr	r2, [pc, #312]	; (80025b8 <HAL_GPIO_Init+0x324>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x216>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4d      	ldr	r2, [pc, #308]	; (80025bc <HAL_GPIO_Init+0x328>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x212>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4c      	ldr	r2, [pc, #304]	; (80025c0 <HAL_GPIO_Init+0x32c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x20e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4b      	ldr	r2, [pc, #300]	; (80025c4 <HAL_GPIO_Init+0x330>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x20a>
 800249a:	2307      	movs	r3, #7
 800249c:	e00e      	b.n	80024bc <HAL_GPIO_Init+0x228>
 800249e:	2308      	movs	r3, #8
 80024a0:	e00c      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024a2:	2306      	movs	r3, #6
 80024a4:	e00a      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024a6:	2305      	movs	r3, #5
 80024a8:	e008      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024aa:	2304      	movs	r3, #4
 80024ac:	e006      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024ae:	2303      	movs	r3, #3
 80024b0:	e004      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e002      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_GPIO_Init+0x228>
 80024ba:	2300      	movs	r3, #0
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f002 0203 	and.w	r2, r2, #3
 80024c2:	0092      	lsls	r2, r2, #2
 80024c4:	4093      	lsls	r3, r2
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024cc:	4935      	ldr	r1, [pc, #212]	; (80025a4 <HAL_GPIO_Init+0x310>)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	3302      	adds	r3, #2
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024da:	4b3b      	ldr	r3, [pc, #236]	; (80025c8 <HAL_GPIO_Init+0x334>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024fe:	4a32      	ldr	r2, [pc, #200]	; (80025c8 <HAL_GPIO_Init+0x334>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002504:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <HAL_GPIO_Init+0x334>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002528:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <HAL_GPIO_Init+0x334>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800252e:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <HAL_GPIO_Init+0x334>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002552:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <HAL_GPIO_Init+0x334>)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_GPIO_Init+0x334>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800257c:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_GPIO_Init+0x334>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3301      	adds	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b0f      	cmp	r3, #15
 800258c:	f67f ae90 	bls.w	80022b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3724      	adds	r7, #36	; 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40013800 	.word	0x40013800
 80025a8:	40020000 	.word	0x40020000
 80025ac:	40020400 	.word	0x40020400
 80025b0:	40020800 	.word	0x40020800
 80025b4:	40020c00 	.word	0x40020c00
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40021400 	.word	0x40021400
 80025c0:	40021800 	.word	0x40021800
 80025c4:	40021c00 	.word	0x40021c00
 80025c8:	40013c00 	.word	0x40013c00

080025cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e264      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d075      	beq.n	80026d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ea:	4ba3      	ldr	r3, [pc, #652]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d00c      	beq.n	8002610 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f6:	4ba0      	ldr	r3, [pc, #640]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d112      	bne.n	8002628 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002602:	4b9d      	ldr	r3, [pc, #628]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800260e:	d10b      	bne.n	8002628 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	4b99      	ldr	r3, [pc, #612]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d05b      	beq.n	80026d4 <HAL_RCC_OscConfig+0x108>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d157      	bne.n	80026d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e23f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002630:	d106      	bne.n	8002640 <HAL_RCC_OscConfig+0x74>
 8002632:	4b91      	ldr	r3, [pc, #580]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a90      	ldr	r2, [pc, #576]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xb0>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x98>
 800264a:	4b8b      	ldr	r3, [pc, #556]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a8a      	ldr	r2, [pc, #552]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b88      	ldr	r3, [pc, #544]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a87      	ldr	r2, [pc, #540]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xb0>
 8002664:	4b84      	ldr	r3, [pc, #528]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a83      	ldr	r2, [pc, #524]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b81      	ldr	r3, [pc, #516]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a80      	ldr	r2, [pc, #512]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fb4e 	bl	8000d24 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fb4a 	bl	8000d24 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e204      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b76      	ldr	r3, [pc, #472]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xc0>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fb3a 	bl	8000d24 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe fb36 	bl	8000d24 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1f0      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b6c      	ldr	r3, [pc, #432]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0xe8>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d063      	beq.n	80027aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026e2:	4b65      	ldr	r3, [pc, #404]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ee:	4b62      	ldr	r3, [pc, #392]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fa:	4b5f      	ldr	r3, [pc, #380]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b5c      	ldr	r3, [pc, #368]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x152>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1c4      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b56      	ldr	r3, [pc, #344]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4952      	ldr	r1, [pc, #328]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e03a      	b.n	80027aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b4f      	ldr	r3, [pc, #316]	; (800287c <HAL_RCC_OscConfig+0x2b0>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe faef 	bl	8000d24 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274a:	f7fe faeb 	bl	8000d24 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1a5      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	4b46      	ldr	r3, [pc, #280]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b43      	ldr	r3, [pc, #268]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4940      	ldr	r1, [pc, #256]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	4b3f      	ldr	r3, [pc, #252]	; (800287c <HAL_RCC_OscConfig+0x2b0>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe face 	bl	8000d24 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278c:	f7fe faca 	bl	8000d24 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e184      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	4b36      	ldr	r3, [pc, #216]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d030      	beq.n	8002818 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_RCC_OscConfig+0x2b4>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7fe faae 	bl	8000d24 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027cc:	f7fe faaa 	bl	8000d24 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e164      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	4b26      	ldr	r3, [pc, #152]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x200>
 80027ea:	e015      	b.n	8002818 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCC_OscConfig+0x2b4>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7fe fa97 	bl	8000d24 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027fa:	f7fe fa93 	bl	8000d24 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e14d      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280c:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800280e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80a0 	beq.w	8002966 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002826:	2300      	movs	r3, #0
 8002828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10f      	bne.n	8002856 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002852:	2301      	movs	r3, #1
 8002854:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_OscConfig+0x2b8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d121      	bne.n	80028a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_RCC_OscConfig+0x2b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a07      	ldr	r2, [pc, #28]	; (8002884 <HAL_RCC_OscConfig+0x2b8>)
 8002868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286e:	f7fe fa59 	bl	8000d24 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	e011      	b.n	800289a <HAL_RCC_OscConfig+0x2ce>
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	42470000 	.word	0x42470000
 8002880:	42470e80 	.word	0x42470e80
 8002884:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002888:	f7fe fa4c 	bl	8000d24 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e106      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	4b85      	ldr	r3, [pc, #532]	; (8002ab0 <HAL_RCC_OscConfig+0x4e4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x2f0>
 80028ae:	4b81      	ldr	r3, [pc, #516]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	4a80      	ldr	r2, [pc, #512]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ba:	e01c      	b.n	80028f6 <HAL_RCC_OscConfig+0x32a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d10c      	bne.n	80028de <HAL_RCC_OscConfig+0x312>
 80028c4:	4b7b      	ldr	r3, [pc, #492]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	4a7a      	ldr	r2, [pc, #488]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 80028ca:	f043 0304 	orr.w	r3, r3, #4
 80028ce:	6713      	str	r3, [r2, #112]	; 0x70
 80028d0:	4b78      	ldr	r3, [pc, #480]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a77      	ldr	r2, [pc, #476]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	e00b      	b.n	80028f6 <HAL_RCC_OscConfig+0x32a>
 80028de:	4b75      	ldr	r3, [pc, #468]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	4a74      	ldr	r2, [pc, #464]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ea:	4b72      	ldr	r3, [pc, #456]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a71      	ldr	r2, [pc, #452]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 80028f0:	f023 0304 	bic.w	r3, r3, #4
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d015      	beq.n	800292a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fe:	f7fe fa11 	bl	8000d24 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	e00a      	b.n	800291c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7fe fa0d 	bl	8000d24 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	; 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e0c5      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ee      	beq.n	8002906 <HAL_RCC_OscConfig+0x33a>
 8002928:	e014      	b.n	8002954 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292a:	f7fe f9fb 	bl	8000d24 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7fe f9f7 	bl	8000d24 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e0af      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002948:	4b5a      	ldr	r3, [pc, #360]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1ee      	bne.n	8002932 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d105      	bne.n	8002966 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295a:	4b56      	ldr	r3, [pc, #344]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a55      	ldr	r2, [pc, #340]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 8002960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 809b 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002970:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	2b08      	cmp	r3, #8
 800297a:	d05c      	beq.n	8002a36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d141      	bne.n	8002a08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002984:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <HAL_RCC_OscConfig+0x4ec>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298a:	f7fe f9cb 	bl	8000d24 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002992:	f7fe f9c7 	bl	8000d24 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e081      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a4:	4b43      	ldr	r3, [pc, #268]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69da      	ldr	r2, [r3, #28]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	019b      	lsls	r3, r3, #6
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	3b01      	subs	r3, #1
 80029ca:	041b      	lsls	r3, r3, #16
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	061b      	lsls	r3, r3, #24
 80029d4:	4937      	ldr	r1, [pc, #220]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029da:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <HAL_RCC_OscConfig+0x4ec>)
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe f9a0 	bl	8000d24 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe f99c 	bl	8000d24 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e056      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fa:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x41c>
 8002a06:	e04e      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a08:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_OscConfig+0x4ec>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe f989 	bl	8000d24 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a16:	f7fe f985 	bl	8000d24 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e03f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a28:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x44a>
 8002a34:	e037      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e032      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <HAL_RCC_OscConfig+0x4e8>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d028      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d121      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d11a      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a72:	4013      	ands	r3, r2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d111      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	42470060 	.word	0x42470060

08002abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0cc      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d90c      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b65      	ldr	r3, [pc, #404]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b63      	ldr	r3, [pc, #396]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0b8      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d020      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b10:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a58      	ldr	r2, [pc, #352]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b28:	4b53      	ldr	r3, [pc, #332]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4a52      	ldr	r2, [pc, #328]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b50      	ldr	r3, [pc, #320]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	494d      	ldr	r1, [pc, #308]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d044      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d119      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e07f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e06f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e067      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f023 0203 	bic.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4934      	ldr	r1, [pc, #208]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bac:	f7fe f8ba 	bl	8000d24 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7fe f8b6 	bl	8000d24 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e04f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 020c 	and.w	r2, r3, #12
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1eb      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d20c      	bcs.n	8002c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e032      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4916      	ldr	r1, [pc, #88]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	490e      	ldr	r1, [pc, #56]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c42:	f000 f889 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8002c46:	4602      	mov	r2, r0
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	490a      	ldr	r1, [pc, #40]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	5ccb      	ldrb	r3, [r1, r3]
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fdd6 	bl	8000814 <HAL_InitTick>

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023c00 	.word	0x40023c00
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	08014b90 	.word	0x08014b90
 8002c80:	20000000 	.word	0x20000000
 8002c84:	20000004 	.word	0x20000004

08002c88 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08c      	sub	sp, #48	; 0x30
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d129      	bne.n	8002cee <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <HAL_RCC_MCOConfig+0xc4>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a2a      	ldr	r2, [pc, #168]	; (8002d4c <HAL_RCC_MCOConfig+0xc4>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <HAL_RCC_MCOConfig+0xc4>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002ccc:	f107 031c 	add.w	r3, r7, #28
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	481f      	ldr	r0, [pc, #124]	; (8002d50 <HAL_RCC_MCOConfig+0xc8>)
 8002cd4:	f7ff fade 	bl	8002294 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002cd8:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <HAL_RCC_MCOConfig+0xc4>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	4919      	ldr	r1, [pc, #100]	; (8002d4c <HAL_RCC_MCOConfig+0xc4>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002cec:	e029      	b.n	8002d42 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <HAL_RCC_MCOConfig+0xc4>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <HAL_RCC_MCOConfig+0xc4>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_RCC_MCOConfig+0xc4>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d14:	2303      	movs	r3, #3
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002d20:	f107 031c 	add.w	r3, r7, #28
 8002d24:	4619      	mov	r1, r3
 8002d26:	480b      	ldr	r0, [pc, #44]	; (8002d54 <HAL_RCC_MCOConfig+0xcc>)
 8002d28:	f7ff fab4 	bl	8002294 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <HAL_RCC_MCOConfig+0xc4>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	00d9      	lsls	r1, r3, #3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	4903      	ldr	r1, [pc, #12]	; (8002d4c <HAL_RCC_MCOConfig+0xc4>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
}
 8002d42:	bf00      	nop
 8002d44:	3730      	adds	r7, #48	; 0x30
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020800 	.word	0x40020800

08002d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d58:	b5b0      	push	{r4, r5, r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d5e:	2100      	movs	r1, #0
 8002d60:	6079      	str	r1, [r7, #4]
 8002d62:	2100      	movs	r1, #0
 8002d64:	60f9      	str	r1, [r7, #12]
 8002d66:	2100      	movs	r1, #0
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d6e:	4952      	ldr	r1, [pc, #328]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d70:	6889      	ldr	r1, [r1, #8]
 8002d72:	f001 010c 	and.w	r1, r1, #12
 8002d76:	2908      	cmp	r1, #8
 8002d78:	d00d      	beq.n	8002d96 <HAL_RCC_GetSysClockFreq+0x3e>
 8002d7a:	2908      	cmp	r1, #8
 8002d7c:	f200 8094 	bhi.w	8002ea8 <HAL_RCC_GetSysClockFreq+0x150>
 8002d80:	2900      	cmp	r1, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_RCC_GetSysClockFreq+0x32>
 8002d84:	2904      	cmp	r1, #4
 8002d86:	d003      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0x38>
 8002d88:	e08e      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d8a:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x164>)
 8002d8c:	60bb      	str	r3, [r7, #8]
       break;
 8002d8e:	e08e      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d90:	4b4b      	ldr	r3, [pc, #300]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d92:	60bb      	str	r3, [r7, #8]
      break;
 8002d94:	e08b      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d96:	4948      	ldr	r1, [pc, #288]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d98:	6849      	ldr	r1, [r1, #4]
 8002d9a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002d9e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002da0:	4945      	ldr	r1, [pc, #276]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002da2:	6849      	ldr	r1, [r1, #4]
 8002da4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002da8:	2900      	cmp	r1, #0
 8002daa:	d024      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dac:	4942      	ldr	r1, [pc, #264]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dae:	6849      	ldr	r1, [r1, #4]
 8002db0:	0989      	lsrs	r1, r1, #6
 8002db2:	4608      	mov	r0, r1
 8002db4:	f04f 0100 	mov.w	r1, #0
 8002db8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002dbc:	f04f 0500 	mov.w	r5, #0
 8002dc0:	ea00 0204 	and.w	r2, r0, r4
 8002dc4:	ea01 0305 	and.w	r3, r1, r5
 8002dc8:	493d      	ldr	r1, [pc, #244]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002dca:	fb01 f003 	mul.w	r0, r1, r3
 8002dce:	2100      	movs	r1, #0
 8002dd0:	fb01 f102 	mul.w	r1, r1, r2
 8002dd4:	1844      	adds	r4, r0, r1
 8002dd6:	493a      	ldr	r1, [pc, #232]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002dd8:	fba2 0101 	umull	r0, r1, r2, r1
 8002ddc:	1863      	adds	r3, r4, r1
 8002dde:	4619      	mov	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	461a      	mov	r2, r3
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	f7fd fa42 	bl	8000270 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e04a      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df6:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e06:	f04f 0100 	mov.w	r1, #0
 8002e0a:	ea02 0400 	and.w	r4, r2, r0
 8002e0e:	ea03 0501 	and.w	r5, r3, r1
 8002e12:	4620      	mov	r0, r4
 8002e14:	4629      	mov	r1, r5
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	014b      	lsls	r3, r1, #5
 8002e20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e24:	0142      	lsls	r2, r0, #5
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	1b00      	subs	r0, r0, r4
 8002e2c:	eb61 0105 	sbc.w	r1, r1, r5
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	018b      	lsls	r3, r1, #6
 8002e3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e3e:	0182      	lsls	r2, r0, #6
 8002e40:	1a12      	subs	r2, r2, r0
 8002e42:	eb63 0301 	sbc.w	r3, r3, r1
 8002e46:	f04f 0000 	mov.w	r0, #0
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	00d9      	lsls	r1, r3, #3
 8002e50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e54:	00d0      	lsls	r0, r2, #3
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	1912      	adds	r2, r2, r4
 8002e5c:	eb45 0303 	adc.w	r3, r5, r3
 8002e60:	f04f 0000 	mov.w	r0, #0
 8002e64:	f04f 0100 	mov.w	r1, #0
 8002e68:	0299      	lsls	r1, r3, #10
 8002e6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e6e:	0290      	lsls	r0, r2, #10
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	f7fd f9f6 	bl	8000270 <__aeabi_uldivmod>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	3301      	adds	r3, #1
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	60bb      	str	r3, [r7, #8]
      break;
 8002ea6:	e002      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x164>)
 8002eaa:	60bb      	str	r3, [r7, #8]
      break;
 8002eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eae:	68bb      	ldr	r3, [r7, #8]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	00f42400 	.word	0x00f42400
 8002ec0:	017d7840 	.word	0x017d7840

08002ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000000 	.word	0x20000000

08002edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ee0:	f7ff fff0 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	0b5b      	lsrs	r3, r3, #13
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	4903      	ldr	r1, [pc, #12]	; (8002f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40023800 	.word	0x40023800
 8002f00:	08014ba0 	.word	0x08014ba0

08002f04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	220f      	movs	r2, #15
 8002f12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f14:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_RCC_GetClockConfig+0x5c>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0203 	and.w	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <HAL_RCC_GetClockConfig+0x5c>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_RCC_GetClockConfig+0x5c>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_GetClockConfig+0x5c>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	08db      	lsrs	r3, r3, #3
 8002f3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <HAL_RCC_GetClockConfig+0x60>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0207 	and.w	r2, r3, #7
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	601a      	str	r2, [r3, #0]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40023c00 	.word	0x40023c00

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e041      	b.n	8002ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f839 	bl	8003006 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f000 f9d8 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d001      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e04e      	b.n	80030d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d022      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x80>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305e:	d01d      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x80>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d018      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x80>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d013      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x80>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <HAL_TIM_Base_Start_IT+0xd0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00e      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x80>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d009      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x80>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x80>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d111      	bne.n	80030c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d010      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030be:	e007      	b.n	80030d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40010000 	.word	0x40010000
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800
 80030ec:	40000c00 	.word	0x40000c00
 80030f0:	40010400 	.word	0x40010400
 80030f4:	40014000 	.word	0x40014000
 80030f8:	40001800 	.word	0x40001800

080030fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b02      	cmp	r3, #2
 8003110:	d122      	bne.n	8003158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b02      	cmp	r3, #2
 800311e:	d11b      	bne.n	8003158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0202 	mvn.w	r2, #2
 8003128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f8ee 	bl	8003320 <HAL_TIM_IC_CaptureCallback>
 8003144:	e005      	b.n	8003152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8e0 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f8f1 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b04      	cmp	r3, #4
 8003164:	d122      	bne.n	80031ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b04      	cmp	r3, #4
 8003172:	d11b      	bne.n	80031ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0204 	mvn.w	r2, #4
 800317c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f8c4 	bl	8003320 <HAL_TIM_IC_CaptureCallback>
 8003198:	e005      	b.n	80031a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f8b6 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f8c7 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d122      	bne.n	8003200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d11b      	bne.n	8003200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0208 	mvn.w	r2, #8
 80031d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2204      	movs	r2, #4
 80031d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f89a 	bl	8003320 <HAL_TIM_IC_CaptureCallback>
 80031ec:	e005      	b.n	80031fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f88c 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f89d 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b10      	cmp	r3, #16
 800320c:	d122      	bne.n	8003254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b10      	cmp	r3, #16
 800321a:	d11b      	bne.n	8003254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0210 	mvn.w	r2, #16
 8003224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2208      	movs	r2, #8
 800322a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f870 	bl	8003320 <HAL_TIM_IC_CaptureCallback>
 8003240:	e005      	b.n	800324e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f862 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f873 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b01      	cmp	r3, #1
 8003260:	d10e      	bne.n	8003280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d107      	bne.n	8003280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0201 	mvn.w	r2, #1
 8003278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd fa86 	bl	800078c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	2b80      	cmp	r3, #128	; 0x80
 800328c:	d10e      	bne.n	80032ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003298:	2b80      	cmp	r3, #128	; 0x80
 800329a:	d107      	bne.n	80032ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f902 	bl	80034b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d10e      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d107      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f838 	bl	8003348 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d10e      	bne.n	8003304 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d107      	bne.n	8003304 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0220 	mvn.w	r2, #32
 80032fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f8cc 	bl	800349c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a40      	ldr	r2, [pc, #256]	; (8003470 <TIM_Base_SetConfig+0x114>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337a:	d00f      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3d      	ldr	r2, [pc, #244]	; (8003474 <TIM_Base_SetConfig+0x118>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00b      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3c      	ldr	r2, [pc, #240]	; (8003478 <TIM_Base_SetConfig+0x11c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d007      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3b      	ldr	r2, [pc, #236]	; (800347c <TIM_Base_SetConfig+0x120>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3a      	ldr	r2, [pc, #232]	; (8003480 <TIM_Base_SetConfig+0x124>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a2f      	ldr	r2, [pc, #188]	; (8003470 <TIM_Base_SetConfig+0x114>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d02b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033bc:	d027      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <TIM_Base_SetConfig+0x118>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d023      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <TIM_Base_SetConfig+0x11c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a2a      	ldr	r2, [pc, #168]	; (800347c <TIM_Base_SetConfig+0x120>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a29      	ldr	r2, [pc, #164]	; (8003480 <TIM_Base_SetConfig+0x124>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d017      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a28      	ldr	r2, [pc, #160]	; (8003484 <TIM_Base_SetConfig+0x128>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a27      	ldr	r2, [pc, #156]	; (8003488 <TIM_Base_SetConfig+0x12c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00f      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a26      	ldr	r2, [pc, #152]	; (800348c <TIM_Base_SetConfig+0x130>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a25      	ldr	r2, [pc, #148]	; (8003490 <TIM_Base_SetConfig+0x134>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a24      	ldr	r2, [pc, #144]	; (8003494 <TIM_Base_SetConfig+0x138>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a23      	ldr	r2, [pc, #140]	; (8003498 <TIM_Base_SetConfig+0x13c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <TIM_Base_SetConfig+0x114>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d003      	beq.n	8003454 <TIM_Base_SetConfig+0xf8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <TIM_Base_SetConfig+0x124>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d103      	bne.n	800345c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	615a      	str	r2, [r3, #20]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40010000 	.word	0x40010000
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800
 800347c:	40000c00 	.word	0x40000c00
 8003480:	40010400 	.word	0x40010400
 8003484:	40014000 	.word	0x40014000
 8003488:	40014400 	.word	0x40014400
 800348c:	40014800 	.word	0x40014800
 8003490:	40001800 	.word	0x40001800
 8003494:	40001c00 	.word	0x40001c00
 8003498:	40002000 	.word	0x40002000

0800349c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80034c4:	b5b0      	push	{r4, r5, r7, lr}
 80034c6:	b08e      	sub	sp, #56	; 0x38
 80034c8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80034ca:	4ba0      	ldr	r3, [pc, #640]	; (800374c <MX_LWIP_Init+0x288>)
 80034cc:	22c0      	movs	r2, #192	; 0xc0
 80034ce:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80034d0:	4b9e      	ldr	r3, [pc, #632]	; (800374c <MX_LWIP_Init+0x288>)
 80034d2:	22a8      	movs	r2, #168	; 0xa8
 80034d4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80034d6:	4b9d      	ldr	r3, [pc, #628]	; (800374c <MX_LWIP_Init+0x288>)
 80034d8:	2200      	movs	r2, #0
 80034da:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 80034dc:	4b9b      	ldr	r3, [pc, #620]	; (800374c <MX_LWIP_Init+0x288>)
 80034de:	22b1      	movs	r2, #177	; 0xb1
 80034e0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80034e2:	4b9b      	ldr	r3, [pc, #620]	; (8003750 <MX_LWIP_Init+0x28c>)
 80034e4:	22ff      	movs	r2, #255	; 0xff
 80034e6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80034e8:	4b99      	ldr	r3, [pc, #612]	; (8003750 <MX_LWIP_Init+0x28c>)
 80034ea:	22ff      	movs	r2, #255	; 0xff
 80034ec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80034ee:	4b98      	ldr	r3, [pc, #608]	; (8003750 <MX_LWIP_Init+0x28c>)
 80034f0:	22ff      	movs	r2, #255	; 0xff
 80034f2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80034f4:	4b96      	ldr	r3, [pc, #600]	; (8003750 <MX_LWIP_Init+0x28c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80034fa:	4b96      	ldr	r3, [pc, #600]	; (8003754 <MX_LWIP_Init+0x290>)
 80034fc:	22c0      	movs	r2, #192	; 0xc0
 80034fe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003500:	4b94      	ldr	r3, [pc, #592]	; (8003754 <MX_LWIP_Init+0x290>)
 8003502:	22a8      	movs	r2, #168	; 0xa8
 8003504:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003506:	4b93      	ldr	r3, [pc, #588]	; (8003754 <MX_LWIP_Init+0x290>)
 8003508:	2200      	movs	r2, #0
 800350a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800350c:	4b91      	ldr	r3, [pc, #580]	; (8003754 <MX_LWIP_Init+0x290>)
 800350e:	2201      	movs	r2, #1
 8003510:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003512:	2100      	movs	r1, #0
 8003514:	2000      	movs	r0, #0
 8003516:	f003 fdc9 	bl	80070ac <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800351a:	4b8c      	ldr	r3, [pc, #560]	; (800374c <MX_LWIP_Init+0x288>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	061a      	lsls	r2, r3, #24
 8003520:	4b8a      	ldr	r3, [pc, #552]	; (800374c <MX_LWIP_Init+0x288>)
 8003522:	785b      	ldrb	r3, [r3, #1]
 8003524:	041b      	lsls	r3, r3, #16
 8003526:	431a      	orrs	r2, r3
 8003528:	4b88      	ldr	r3, [pc, #544]	; (800374c <MX_LWIP_Init+0x288>)
 800352a:	789b      	ldrb	r3, [r3, #2]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	4313      	orrs	r3, r2
 8003530:	4a86      	ldr	r2, [pc, #536]	; (800374c <MX_LWIP_Init+0x288>)
 8003532:	78d2      	ldrb	r2, [r2, #3]
 8003534:	4313      	orrs	r3, r2
 8003536:	061a      	lsls	r2, r3, #24
 8003538:	4b84      	ldr	r3, [pc, #528]	; (800374c <MX_LWIP_Init+0x288>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	0619      	lsls	r1, r3, #24
 800353e:	4b83      	ldr	r3, [pc, #524]	; (800374c <MX_LWIP_Init+0x288>)
 8003540:	785b      	ldrb	r3, [r3, #1]
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	4319      	orrs	r1, r3
 8003546:	4b81      	ldr	r3, [pc, #516]	; (800374c <MX_LWIP_Init+0x288>)
 8003548:	789b      	ldrb	r3, [r3, #2]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	430b      	orrs	r3, r1
 800354e:	497f      	ldr	r1, [pc, #508]	; (800374c <MX_LWIP_Init+0x288>)
 8003550:	78c9      	ldrb	r1, [r1, #3]
 8003552:	430b      	orrs	r3, r1
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800355a:	431a      	orrs	r2, r3
 800355c:	4b7b      	ldr	r3, [pc, #492]	; (800374c <MX_LWIP_Init+0x288>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	0619      	lsls	r1, r3, #24
 8003562:	4b7a      	ldr	r3, [pc, #488]	; (800374c <MX_LWIP_Init+0x288>)
 8003564:	785b      	ldrb	r3, [r3, #1]
 8003566:	041b      	lsls	r3, r3, #16
 8003568:	4319      	orrs	r1, r3
 800356a:	4b78      	ldr	r3, [pc, #480]	; (800374c <MX_LWIP_Init+0x288>)
 800356c:	789b      	ldrb	r3, [r3, #2]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	430b      	orrs	r3, r1
 8003572:	4976      	ldr	r1, [pc, #472]	; (800374c <MX_LWIP_Init+0x288>)
 8003574:	78c9      	ldrb	r1, [r1, #3]
 8003576:	430b      	orrs	r3, r1
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800357e:	431a      	orrs	r2, r3
 8003580:	4b72      	ldr	r3, [pc, #456]	; (800374c <MX_LWIP_Init+0x288>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	0619      	lsls	r1, r3, #24
 8003586:	4b71      	ldr	r3, [pc, #452]	; (800374c <MX_LWIP_Init+0x288>)
 8003588:	785b      	ldrb	r3, [r3, #1]
 800358a:	041b      	lsls	r3, r3, #16
 800358c:	4319      	orrs	r1, r3
 800358e:	4b6f      	ldr	r3, [pc, #444]	; (800374c <MX_LWIP_Init+0x288>)
 8003590:	789b      	ldrb	r3, [r3, #2]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	430b      	orrs	r3, r1
 8003596:	496d      	ldr	r1, [pc, #436]	; (800374c <MX_LWIP_Init+0x288>)
 8003598:	78c9      	ldrb	r1, [r1, #3]
 800359a:	430b      	orrs	r3, r1
 800359c:	0e1b      	lsrs	r3, r3, #24
 800359e:	4313      	orrs	r3, r2
 80035a0:	4a6d      	ldr	r2, [pc, #436]	; (8003758 <MX_LWIP_Init+0x294>)
 80035a2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80035a4:	4b6a      	ldr	r3, [pc, #424]	; (8003750 <MX_LWIP_Init+0x28c>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	061a      	lsls	r2, r3, #24
 80035aa:	4b69      	ldr	r3, [pc, #420]	; (8003750 <MX_LWIP_Init+0x28c>)
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	041b      	lsls	r3, r3, #16
 80035b0:	431a      	orrs	r2, r3
 80035b2:	4b67      	ldr	r3, [pc, #412]	; (8003750 <MX_LWIP_Init+0x28c>)
 80035b4:	789b      	ldrb	r3, [r3, #2]
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	4313      	orrs	r3, r2
 80035ba:	4a65      	ldr	r2, [pc, #404]	; (8003750 <MX_LWIP_Init+0x28c>)
 80035bc:	78d2      	ldrb	r2, [r2, #3]
 80035be:	4313      	orrs	r3, r2
 80035c0:	061a      	lsls	r2, r3, #24
 80035c2:	4b63      	ldr	r3, [pc, #396]	; (8003750 <MX_LWIP_Init+0x28c>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	0619      	lsls	r1, r3, #24
 80035c8:	4b61      	ldr	r3, [pc, #388]	; (8003750 <MX_LWIP_Init+0x28c>)
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	4319      	orrs	r1, r3
 80035d0:	4b5f      	ldr	r3, [pc, #380]	; (8003750 <MX_LWIP_Init+0x28c>)
 80035d2:	789b      	ldrb	r3, [r3, #2]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	430b      	orrs	r3, r1
 80035d8:	495d      	ldr	r1, [pc, #372]	; (8003750 <MX_LWIP_Init+0x28c>)
 80035da:	78c9      	ldrb	r1, [r1, #3]
 80035dc:	430b      	orrs	r3, r1
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035e4:	431a      	orrs	r2, r3
 80035e6:	4b5a      	ldr	r3, [pc, #360]	; (8003750 <MX_LWIP_Init+0x28c>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	0619      	lsls	r1, r3, #24
 80035ec:	4b58      	ldr	r3, [pc, #352]	; (8003750 <MX_LWIP_Init+0x28c>)
 80035ee:	785b      	ldrb	r3, [r3, #1]
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	4319      	orrs	r1, r3
 80035f4:	4b56      	ldr	r3, [pc, #344]	; (8003750 <MX_LWIP_Init+0x28c>)
 80035f6:	789b      	ldrb	r3, [r3, #2]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	430b      	orrs	r3, r1
 80035fc:	4954      	ldr	r1, [pc, #336]	; (8003750 <MX_LWIP_Init+0x28c>)
 80035fe:	78c9      	ldrb	r1, [r1, #3]
 8003600:	430b      	orrs	r3, r1
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003608:	431a      	orrs	r2, r3
 800360a:	4b51      	ldr	r3, [pc, #324]	; (8003750 <MX_LWIP_Init+0x28c>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	0619      	lsls	r1, r3, #24
 8003610:	4b4f      	ldr	r3, [pc, #316]	; (8003750 <MX_LWIP_Init+0x28c>)
 8003612:	785b      	ldrb	r3, [r3, #1]
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	4319      	orrs	r1, r3
 8003618:	4b4d      	ldr	r3, [pc, #308]	; (8003750 <MX_LWIP_Init+0x28c>)
 800361a:	789b      	ldrb	r3, [r3, #2]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	430b      	orrs	r3, r1
 8003620:	494b      	ldr	r1, [pc, #300]	; (8003750 <MX_LWIP_Init+0x28c>)
 8003622:	78c9      	ldrb	r1, [r1, #3]
 8003624:	430b      	orrs	r3, r1
 8003626:	0e1b      	lsrs	r3, r3, #24
 8003628:	4313      	orrs	r3, r2
 800362a:	4a4c      	ldr	r2, [pc, #304]	; (800375c <MX_LWIP_Init+0x298>)
 800362c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800362e:	4b49      	ldr	r3, [pc, #292]	; (8003754 <MX_LWIP_Init+0x290>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	061a      	lsls	r2, r3, #24
 8003634:	4b47      	ldr	r3, [pc, #284]	; (8003754 <MX_LWIP_Init+0x290>)
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	041b      	lsls	r3, r3, #16
 800363a:	431a      	orrs	r2, r3
 800363c:	4b45      	ldr	r3, [pc, #276]	; (8003754 <MX_LWIP_Init+0x290>)
 800363e:	789b      	ldrb	r3, [r3, #2]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	4313      	orrs	r3, r2
 8003644:	4a43      	ldr	r2, [pc, #268]	; (8003754 <MX_LWIP_Init+0x290>)
 8003646:	78d2      	ldrb	r2, [r2, #3]
 8003648:	4313      	orrs	r3, r2
 800364a:	061a      	lsls	r2, r3, #24
 800364c:	4b41      	ldr	r3, [pc, #260]	; (8003754 <MX_LWIP_Init+0x290>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	0619      	lsls	r1, r3, #24
 8003652:	4b40      	ldr	r3, [pc, #256]	; (8003754 <MX_LWIP_Init+0x290>)
 8003654:	785b      	ldrb	r3, [r3, #1]
 8003656:	041b      	lsls	r3, r3, #16
 8003658:	4319      	orrs	r1, r3
 800365a:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <MX_LWIP_Init+0x290>)
 800365c:	789b      	ldrb	r3, [r3, #2]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	430b      	orrs	r3, r1
 8003662:	493c      	ldr	r1, [pc, #240]	; (8003754 <MX_LWIP_Init+0x290>)
 8003664:	78c9      	ldrb	r1, [r1, #3]
 8003666:	430b      	orrs	r3, r1
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800366e:	431a      	orrs	r2, r3
 8003670:	4b38      	ldr	r3, [pc, #224]	; (8003754 <MX_LWIP_Init+0x290>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	0619      	lsls	r1, r3, #24
 8003676:	4b37      	ldr	r3, [pc, #220]	; (8003754 <MX_LWIP_Init+0x290>)
 8003678:	785b      	ldrb	r3, [r3, #1]
 800367a:	041b      	lsls	r3, r3, #16
 800367c:	4319      	orrs	r1, r3
 800367e:	4b35      	ldr	r3, [pc, #212]	; (8003754 <MX_LWIP_Init+0x290>)
 8003680:	789b      	ldrb	r3, [r3, #2]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	430b      	orrs	r3, r1
 8003686:	4933      	ldr	r1, [pc, #204]	; (8003754 <MX_LWIP_Init+0x290>)
 8003688:	78c9      	ldrb	r1, [r1, #3]
 800368a:	430b      	orrs	r3, r1
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003692:	431a      	orrs	r2, r3
 8003694:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <MX_LWIP_Init+0x290>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	0619      	lsls	r1, r3, #24
 800369a:	4b2e      	ldr	r3, [pc, #184]	; (8003754 <MX_LWIP_Init+0x290>)
 800369c:	785b      	ldrb	r3, [r3, #1]
 800369e:	041b      	lsls	r3, r3, #16
 80036a0:	4319      	orrs	r1, r3
 80036a2:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <MX_LWIP_Init+0x290>)
 80036a4:	789b      	ldrb	r3, [r3, #2]
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	430b      	orrs	r3, r1
 80036aa:	492a      	ldr	r1, [pc, #168]	; (8003754 <MX_LWIP_Init+0x290>)
 80036ac:	78c9      	ldrb	r1, [r1, #3]
 80036ae:	430b      	orrs	r3, r1
 80036b0:	0e1b      	lsrs	r3, r3, #24
 80036b2:	4313      	orrs	r3, r2
 80036b4:	4a2a      	ldr	r2, [pc, #168]	; (8003760 <MX_LWIP_Init+0x29c>)
 80036b6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80036b8:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <MX_LWIP_Init+0x2a0>)
 80036ba:	9302      	str	r3, [sp, #8]
 80036bc:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <MX_LWIP_Init+0x2a4>)
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	2300      	movs	r3, #0
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	4b26      	ldr	r3, [pc, #152]	; (8003760 <MX_LWIP_Init+0x29c>)
 80036c6:	4a25      	ldr	r2, [pc, #148]	; (800375c <MX_LWIP_Init+0x298>)
 80036c8:	4923      	ldr	r1, [pc, #140]	; (8003758 <MX_LWIP_Init+0x294>)
 80036ca:	4828      	ldr	r0, [pc, #160]	; (800376c <MX_LWIP_Init+0x2a8>)
 80036cc:	f004 fa72 	bl	8007bb4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80036d0:	4826      	ldr	r0, [pc, #152]	; (800376c <MX_LWIP_Init+0x2a8>)
 80036d2:	f004 fc21 	bl	8007f18 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80036d6:	4b25      	ldr	r3, [pc, #148]	; (800376c <MX_LWIP_Init+0x2a8>)
 80036d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80036dc:	089b      	lsrs	r3, r3, #2
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80036e8:	4820      	ldr	r0, [pc, #128]	; (800376c <MX_LWIP_Init+0x2a8>)
 80036ea:	f004 fc25 	bl	8007f38 <netif_set_up>
 80036ee:	e002      	b.n	80036f6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80036f0:	481e      	ldr	r0, [pc, #120]	; (800376c <MX_LWIP_Init+0x2a8>)
 80036f2:	f004 fc8d 	bl	8008010 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80036f6:	491e      	ldr	r1, [pc, #120]	; (8003770 <MX_LWIP_Init+0x2ac>)
 80036f8:	481c      	ldr	r0, [pc, #112]	; (800376c <MX_LWIP_Init+0x2a8>)
 80036fa:	f004 fd1f 	bl	800813c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80036fe:	2300      	movs	r3, #0
 8003700:	623b      	str	r3, [r7, #32]
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8003706:	f107 0320 	add.w	r3, r7, #32
 800370a:	2101      	movs	r1, #1
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fd83 	bl	8004218 <osSemaphoreCreate>
 8003712:	4603      	mov	r3, r0
 8003714:	4a17      	ldr	r2, [pc, #92]	; (8003774 <MX_LWIP_Init+0x2b0>)
 8003716:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8003718:	4b17      	ldr	r3, [pc, #92]	; (8003778 <MX_LWIP_Init+0x2b4>)
 800371a:	4a14      	ldr	r2, [pc, #80]	; (800376c <MX_LWIP_Init+0x2a8>)
 800371c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <MX_LWIP_Init+0x2b0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a15      	ldr	r2, [pc, #84]	; (8003778 <MX_LWIP_Init+0x2b4>)
 8003724:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <MX_LWIP_Init+0x2b8>)
 8003728:	1d3c      	adds	r4, r7, #4
 800372a:	461d      	mov	r5, r3
 800372c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800372e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003734:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	490f      	ldr	r1, [pc, #60]	; (8003778 <MX_LWIP_Init+0x2b4>)
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fc6e 	bl	800401e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003742:	bf00      	nop
 8003744:	3728      	adds	r7, #40	; 0x28
 8003746:	46bd      	mov	sp, r7
 8003748:	bdb0      	pop	{r4, r5, r7, pc}
 800374a:	bf00      	nop
 800374c:	20004304 	.word	0x20004304
 8003750:	20004300 	.word	0x20004300
 8003754:	200042c4 	.word	0x200042c4
 8003758:	200042fc 	.word	0x200042fc
 800375c:	20004308 	.word	0x20004308
 8003760:	2000430c 	.word	0x2000430c
 8003764:	08006fe9 	.word	0x08006fe9
 8003768:	08003dad 	.word	0x08003dad
 800376c:	200042c8 	.word	0x200042c8
 8003770:	08003e91 	.word	0x08003e91
 8003774:	20000378 	.word	0x20000378
 8003778:	200042bc 	.word	0x200042bc
 800377c:	0801206c 	.word	0x0801206c

08003780 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08e      	sub	sp, #56	; 0x38
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a4a      	ldr	r2, [pc, #296]	; (80038c8 <HAL_ETH_MspInit+0x148>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	f040 808d 	bne.w	80038be <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80037a4:	2300      	movs	r3, #0
 80037a6:	623b      	str	r3, [r7, #32]
 80037a8:	4b48      	ldr	r3, [pc, #288]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	4a47      	ldr	r2, [pc, #284]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 80037ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037b2:	6313      	str	r3, [r2, #48]	; 0x30
 80037b4:	4b45      	ldr	r3, [pc, #276]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	623b      	str	r3, [r7, #32]
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	4b41      	ldr	r3, [pc, #260]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	4a40      	ldr	r2, [pc, #256]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 80037ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037ce:	6313      	str	r3, [r2, #48]	; 0x30
 80037d0:	4b3e      	ldr	r3, [pc, #248]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	4a39      	ldr	r2, [pc, #228]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 80037e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037ea:	6313      	str	r3, [r2, #48]	; 0x30
 80037ec:	4b37      	ldr	r3, [pc, #220]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	4b33      	ldr	r3, [pc, #204]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	4a32      	ldr	r2, [pc, #200]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	6313      	str	r3, [r2, #48]	; 0x30
 8003808:	4b30      	ldr	r3, [pc, #192]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003814:	2300      	movs	r3, #0
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	4b2c      	ldr	r3, [pc, #176]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	4a2b      	ldr	r2, [pc, #172]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	6313      	str	r3, [r2, #48]	; 0x30
 8003824:	4b29      	ldr	r3, [pc, #164]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	4b25      	ldr	r3, [pc, #148]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	4a24      	ldr	r2, [pc, #144]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 800383a:	f043 0302 	orr.w	r3, r3, #2
 800383e:	6313      	str	r3, [r2, #48]	; 0x30
 8003840:	4b22      	ldr	r3, [pc, #136]	; (80038cc <HAL_ETH_MspInit+0x14c>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800384c:	2332      	movs	r3, #50	; 0x32
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003850:	2302      	movs	r3, #2
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003854:	2300      	movs	r3, #0
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003858:	2303      	movs	r3, #3
 800385a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800385c:	230b      	movs	r3, #11
 800385e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003864:	4619      	mov	r1, r3
 8003866:	481a      	ldr	r0, [pc, #104]	; (80038d0 <HAL_ETH_MspInit+0x150>)
 8003868:	f7fe fd14 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800386c:	2386      	movs	r3, #134	; 0x86
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	2302      	movs	r3, #2
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	2300      	movs	r3, #0
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003878:	2303      	movs	r3, #3
 800387a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800387c:	230b      	movs	r3, #11
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003884:	4619      	mov	r1, r3
 8003886:	4813      	ldr	r0, [pc, #76]	; (80038d4 <HAL_ETH_MspInit+0x154>)
 8003888:	f7fe fd04 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800388c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003892:	2302      	movs	r3, #2
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	2300      	movs	r3, #0
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389a:	2303      	movs	r3, #3
 800389c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800389e:	230b      	movs	r3, #11
 80038a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038a6:	4619      	mov	r1, r3
 80038a8:	480b      	ldr	r0, [pc, #44]	; (80038d8 <HAL_ETH_MspInit+0x158>)
 80038aa:	f7fe fcf3 	bl	8002294 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80038ae:	2200      	movs	r2, #0
 80038b0:	2105      	movs	r1, #5
 80038b2:	203d      	movs	r0, #61	; 0x3d
 80038b4:	f7fd fb1e 	bl	8000ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80038b8:	203d      	movs	r0, #61	; 0x3d
 80038ba:	f7fd fb37 	bl	8000f2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80038be:	bf00      	nop
 80038c0:	3738      	adds	r7, #56	; 0x38
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40028000 	.word	0x40028000
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020800 	.word	0x40020800
 80038d4:	40020000 	.word	0x40020000
 80038d8:	40020400 	.word	0x40020400

080038dc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <HAL_ETH_RxCpltCallback+0x1c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fd15 	bl	8004318 <osSemaphoreRelease>
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	2000037c 	.word	0x2000037c

080038fc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80038fc:	b5b0      	push	{r4, r5, r7, lr}
 80038fe:	b090      	sub	sp, #64	; 0x40
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003908:	4b5f      	ldr	r3, [pc, #380]	; (8003a88 <low_level_init+0x18c>)
 800390a:	4a60      	ldr	r2, [pc, #384]	; (8003a8c <low_level_init+0x190>)
 800390c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 800390e:	4b5e      	ldr	r3, [pc, #376]	; (8003a88 <low_level_init+0x18c>)
 8003910:	2200      	movs	r2, #0
 8003912:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003914:	4b5c      	ldr	r3, [pc, #368]	; (8003a88 <low_level_init+0x18c>)
 8003916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800391a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800391c:	4b5a      	ldr	r3, [pc, #360]	; (8003a88 <low_level_init+0x18c>)
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003922:	4b59      	ldr	r3, [pc, #356]	; (8003a88 <low_level_init+0x18c>)
 8003924:	2201      	movs	r2, #1
 8003926:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003928:	2300      	movs	r3, #0
 800392a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8003934:	23e1      	movs	r3, #225	; 0xe1
 8003936:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800393a:	2300      	movs	r3, #0
 800393c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8003940:	2300      	movs	r3, #0
 8003942:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8003946:	2300      	movs	r3, #0
 8003948:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800394c:	4a4e      	ldr	r2, [pc, #312]	; (8003a88 <low_level_init+0x18c>)
 800394e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003952:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8003954:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <low_level_init+0x18c>)
 8003956:	2201      	movs	r2, #1
 8003958:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800395a:	4b4b      	ldr	r3, [pc, #300]	; (8003a88 <low_level_init+0x18c>)
 800395c:	2200      	movs	r2, #0
 800395e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003960:	4b49      	ldr	r3, [pc, #292]	; (8003a88 <low_level_init+0x18c>)
 8003962:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003966:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003968:	4847      	ldr	r0, [pc, #284]	; (8003a88 <low_level_init+0x18c>)
 800396a:	f7fd faed 	bl	8000f48 <HAL_ETH_Init>
 800396e:	4603      	mov	r3, r0
 8003970:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8003974:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003978:	2b00      	cmp	r3, #0
 800397a:	d108      	bne.n	800398e <low_level_init+0x92>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003982:	f043 0304 	orr.w	r3, r3, #4
 8003986:	b2da      	uxtb	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800398e:	2304      	movs	r3, #4
 8003990:	4a3f      	ldr	r2, [pc, #252]	; (8003a90 <low_level_init+0x194>)
 8003992:	4940      	ldr	r1, [pc, #256]	; (8003a94 <low_level_init+0x198>)
 8003994:	483c      	ldr	r0, [pc, #240]	; (8003a88 <low_level_init+0x18c>)
 8003996:	f7fd fc73 	bl	8001280 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800399a:	2304      	movs	r3, #4
 800399c:	4a3e      	ldr	r2, [pc, #248]	; (8003a98 <low_level_init+0x19c>)
 800399e:	493f      	ldr	r1, [pc, #252]	; (8003a9c <low_level_init+0x1a0>)
 80039a0:	4839      	ldr	r0, [pc, #228]	; (8003a88 <low_level_init+0x18c>)
 80039a2:	f7fd fcd6 	bl	8001352 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2206      	movs	r2, #6
 80039aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80039ae:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <low_level_init+0x18c>)
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80039ba:	4b33      	ldr	r3, [pc, #204]	; (8003a88 <low_level_init+0x18c>)
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	785a      	ldrb	r2, [r3, #1]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80039c6:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <low_level_init+0x18c>)
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	789a      	ldrb	r2, [r3, #2]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80039d2:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <low_level_init+0x18c>)
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	78da      	ldrb	r2, [r3, #3]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80039de:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <low_level_init+0x18c>)
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	791a      	ldrb	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80039ea:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <low_level_init+0x18c>)
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	795a      	ldrb	r2, [r3, #5]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80039fc:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003a04:	f043 030a 	orr.w	r3, r3, #10
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8003a10:	2300      	movs	r3, #0
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a14:	2300      	movs	r3, #0
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8003a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fbfa 	bl	8004218 <osSemaphoreCreate>
 8003a24:	4603      	mov	r3, r0
 8003a26:	4a1e      	ldr	r2, [pc, #120]	; (8003aa0 <low_level_init+0x1a4>)
 8003a28:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <low_level_init+0x1a8>)
 8003a2c:	f107 040c 	add.w	r4, r7, #12
 8003a30:	461d      	mov	r5, r3
 8003a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 faea 	bl	800401e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003a4a:	480f      	ldr	r0, [pc, #60]	; (8003a88 <low_level_init+0x18c>)
 8003a4c:	f7fd ffa9 	bl	80019a2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003a50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a54:	461a      	mov	r2, r3
 8003a56:	211d      	movs	r1, #29
 8003a58:	480b      	ldr	r0, [pc, #44]	; (8003a88 <low_level_init+0x18c>)
 8003a5a:	f7fd fed4 	bl	8001806 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	f043 030b 	orr.w	r3, r3, #11
 8003a64:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a68:	461a      	mov	r2, r3
 8003a6a:	211d      	movs	r1, #29
 8003a6c:	4806      	ldr	r0, [pc, #24]	; (8003a88 <low_level_init+0x18c>)
 8003a6e:	f7fd ff32 	bl	80018d6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003a72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a76:	461a      	mov	r2, r3
 8003a78:	211d      	movs	r1, #29
 8003a7a:	4803      	ldr	r0, [pc, #12]	; (8003a88 <low_level_init+0x18c>)
 8003a7c:	f7fd fec3 	bl	8001806 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003a80:	bf00      	nop
 8003a82:	3740      	adds	r7, #64	; 0x40
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bdb0      	pop	{r4, r5, r7, pc}
 8003a88:	20005be0 	.word	0x20005be0
 8003a8c:	40028000 	.word	0x40028000
 8003a90:	20005c28 	.word	0x20005c28
 8003a94:	20004310 	.word	0x20004310
 8003a98:	20004390 	.word	0x20004390
 8003a9c:	20005b60 	.word	0x20005b60
 8003aa0:	2000037c 	.word	0x2000037c
 8003aa4:	08012090 	.word	0x08012090

08003aa8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003ab2:	4b4b      	ldr	r3, [pc, #300]	; (8003be0 <low_level_output+0x138>)
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003aca:	4b45      	ldr	r3, [pc, #276]	; (8003be0 <low_level_output+0x138>)
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	623b      	str	r3, [r7, #32]
 8003ad8:	e05a      	b.n	8003b90 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da03      	bge.n	8003aea <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003ae2:	23f8      	movs	r3, #248	; 0xf8
 8003ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003ae8:	e05c      	b.n	8003ba4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	895b      	ldrh	r3, [r3, #10]
 8003aee:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003af4:	e02f      	b.n	8003b56 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	18d0      	adds	r0, r2, r3
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	18d1      	adds	r1, r2, r3
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f00d faef 	bl	80110f0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	da03      	bge.n	8003b28 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003b20:	23f8      	movs	r3, #248	; 0xf8
 8003b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003b26:	e03d      	b.n	8003ba4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003b38:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003b44:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003b50:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d8c8      	bhi.n	8003af6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	18d0      	adds	r0, r2, r3
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4413      	add	r3, r2
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4619      	mov	r1, r3
 8003b76:	f00d fabb 	bl	80110f0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	623b      	str	r3, [r7, #32]
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1a1      	bne.n	8003ada <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003b96:	6979      	ldr	r1, [r7, #20]
 8003b98:	4811      	ldr	r0, [pc, #68]	; (8003be0 <low_level_output+0x138>)
 8003b9a:	f7fd fc47 	bl	800142c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003ba4:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <low_level_output+0x138>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bac:	3314      	adds	r3, #20
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003bb8:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <low_level_output+0x138>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc0:	3314      	adds	r3, #20
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <low_level_output+0x138>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bce:	3304      	adds	r3, #4
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003bd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3728      	adds	r7, #40	; 0x28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20005be0 	.word	0x20005be0

08003be4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08c      	sub	sp, #48	; 0x30
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003c08:	484f      	ldr	r0, [pc, #316]	; (8003d48 <low_level_input+0x164>)
 8003c0a:	f7fd fcf9 	bl	8001600 <HAL_ETH_GetReceivedFrame_IT>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <low_level_input+0x34>

    return NULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e092      	b.n	8003d3e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003c18:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <low_level_input+0x164>)
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003c1e:	4b4a      	ldr	r3, [pc, #296]	; (8003d48 <low_level_input+0x164>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003c24:	89fb      	ldrh	r3, [r7, #14]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003c2a:	89fb      	ldrh	r3, [r7, #14]
 8003c2c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003c30:	4619      	mov	r1, r3
 8003c32:	2000      	movs	r0, #0
 8003c34:	f004 fb4c 	bl	80082d0 <pbuf_alloc>
 8003c38:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d04b      	beq.n	8003cd8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003c40:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <low_level_input+0x164>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c4e:	e040      	b.n	8003cd2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c52:	895b      	ldrh	r3, [r3, #10]
 8003c54:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003c5a:	e021      	b.n	8003ca0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	18d0      	adds	r0, r2, r3
 8003c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	18d1      	adds	r1, r2, r3
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003c70:	3304      	adds	r3, #4
 8003c72:	461a      	mov	r2, r3
 8003c74:	f00d fa3c 	bl	80110f0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003c8e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003c9a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d8d6      	bhi.n	8003c5c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	18d0      	adds	r0, r2, r3
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	4413      	add	r3, r2
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f00d fa16 	bl	80110f0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	4413      	add	r3, r2
 8003cca:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1bb      	bne.n	8003c50 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <low_level_input+0x164>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	e00b      	b.n	8003cfc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <low_level_input+0x164>)
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3ee      	bcc.n	8003ce4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <low_level_input+0x164>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <low_level_input+0x164>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d14:	3314      	adds	r3, #20
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <low_level_input+0x164>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d28:	3314      	adds	r3, #20
 8003d2a:	2280      	movs	r2, #128	; 0x80
 8003d2c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <low_level_input+0x164>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d36:	3308      	adds	r3, #8
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3730      	adds	r7, #48	; 0x30
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20005be0 	.word	0x20005be0

08003d4c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <ethernetif_input+0x58>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fa8b 	bl	800427c <osSemaphoreWait>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f5      	bne.n	8003d58 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8003d6c:	480e      	ldr	r0, [pc, #56]	; (8003da8 <ethernetif_input+0x5c>)
 8003d6e:	f00d f82f 	bl	8010dd0 <sys_mutex_lock>
        p = low_level_input( netif );
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7ff ff36 	bl	8003be4 <low_level_input>
 8003d78:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	68f9      	ldr	r1, [r7, #12]
 8003d86:	68b8      	ldr	r0, [r7, #8]
 8003d88:	4798      	blx	r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8003d90:	68b8      	ldr	r0, [r7, #8]
 8003d92:	f004 fd81 	bl	8008898 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003d96:	4804      	ldr	r0, [pc, #16]	; (8003da8 <ethernetif_input+0x5c>)
 8003d98:	f00d f829 	bl	8010dee <sys_mutex_unlock>
      } while(p!=NULL);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e4      	bne.n	8003d6c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003da2:	e7d9      	b.n	8003d58 <ethernetif_input+0xc>
 8003da4:	2000037c 	.word	0x2000037c
 8003da8:	200073f8 	.word	0x200073f8

08003dac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <ethernetif_init+0x1c>
 8003dba:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <ethernetif_init+0x48>)
 8003dbc:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8003dc0:	490d      	ldr	r1, [pc, #52]	; (8003df8 <ethernetif_init+0x4c>)
 8003dc2:	480e      	ldr	r0, [pc, #56]	; (8003dfc <ethernetif_init+0x50>)
 8003dc4:	f00d fa54 	bl	8011270 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2273      	movs	r2, #115	; 0x73
 8003dcc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2274      	movs	r2, #116	; 0x74
 8003dd4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <ethernetif_init+0x54>)
 8003ddc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <ethernetif_init+0x58>)
 8003de2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fd89 	bl	80038fc <low_level_init>

  return ERR_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	080120ac 	.word	0x080120ac
 8003df8:	080120c8 	.word	0x080120c8
 8003dfc:	080120d8 	.word	0x080120d8
 8003e00:	0800ef7d 	.word	0x0800ef7d
 8003e04:	08003aa9 	.word	0x08003aa9

08003e08 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003e0c:	f7fc ff8a 	bl	8000d24 <HAL_GetTick>
 8003e10:	4603      	mov	r3, r0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003e28:	f107 0308 	add.w	r3, r7, #8
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4816      	ldr	r0, [pc, #88]	; (8003e8c <ethernetif_set_link+0x74>)
 8003e32:	f7fd fce8 	bl	8001806 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d108      	bne.n	8003e60 <ethernetif_set_link+0x48>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f004 f90b 	bl	8008074 <netif_set_link_up>
 8003e5e:	e011      	b.n	8003e84 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003e68:	089b      	lsrs	r3, r3, #2
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <ethernetif_set_link+0x6c>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d104      	bne.n	8003e84 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f004 f92c 	bl	80080dc <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8003e84:	20c8      	movs	r0, #200	; 0xc8
 8003e86:	f000 f916 	bl	80040b6 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003e8a:	e7cd      	b.n	8003e28 <ethernetif_set_link+0x10>
 8003e8c:	20005be0 	.word	0x20005be0

08003e90 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d05d      	beq.n	8003f6e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003eb2:	4b34      	ldr	r3, [pc, #208]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d03f      	beq.n	8003f3a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003eba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4830      	ldr	r0, [pc, #192]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003ec2:	f7fd fd08 	bl	80018d6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003ec6:	f7fc ff2d 	bl	8000d24 <HAL_GetTick>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003ece:	f107 0308 	add.w	r3, r7, #8
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	482b      	ldr	r0, [pc, #172]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003ed8:	f7fd fc95 	bl	8001806 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003edc:	f7fc ff22 	bl	8000d24 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eea:	d828      	bhi.n	8003f3e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0eb      	beq.n	8003ece <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003ef6:	f107 0308 	add.w	r3, r7, #8
 8003efa:	461a      	mov	r2, r3
 8003efc:	2110      	movs	r1, #16
 8003efe:	4821      	ldr	r0, [pc, #132]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003f00:	f7fd fc81 	bl	8001806 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d004      	beq.n	8003f18 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	e002      	b.n	8003f1e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003f18:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003f28:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
 8003f2e:	e016      	b.n	8003f5e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003f30:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	e011      	b.n	8003f5e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003f3a:	bf00      	nop
 8003f3c:	e000      	b.n	8003f40 <ethernetif_update_config+0xb0>
          goto error;
 8003f3e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003f40:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	08db      	lsrs	r3, r3, #3
 8003f46:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003f48:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003f50:	4313      	orrs	r3, r2
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	2100      	movs	r1, #0
 8003f58:	480a      	ldr	r0, [pc, #40]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003f5a:	f7fd fcbc 	bl	80018d6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4808      	ldr	r0, [pc, #32]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003f62:	f7fd fd7d 	bl	8001a60 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003f66:	4807      	ldr	r0, [pc, #28]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003f68:	f7fd fd1b 	bl	80019a2 <HAL_ETH_Start>
 8003f6c:	e002      	b.n	8003f74 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003f6e:	4805      	ldr	r0, [pc, #20]	; (8003f84 <ethernetif_update_config+0xf4>)
 8003f70:	f7fd fd46 	bl	8001a00 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f807 	bl	8003f88 <ethernetif_notify_conn_changed>
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20005be0 	.word	0x20005be0

08003f88 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fae:	2b84      	cmp	r3, #132	; 0x84
 8003fb0:	d005      	beq.n	8003fbe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003fb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4413      	add	r3, r2
 8003fba:	3303      	adds	r3, #3
 8003fbc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fd2:	f3ef 8305 	mrs	r3, IPSR
 8003fd6:	607b      	str	r3, [r7, #4]
  return(result);
 8003fd8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bf14      	ite	ne
 8003fde:	2301      	movne	r3, #1
 8003fe0:	2300      	moveq	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ff4:	f001 fc74 	bl	80058e0 <vTaskStartScheduler>
  
  return osOK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004002:	f7ff ffe3 	bl	8003fcc <inHandlerMode>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800400c:	f001 fd8c 	bl	8005b28 <xTaskGetTickCountFromISR>
 8004010:	4603      	mov	r3, r0
 8004012:	e002      	b.n	800401a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004014:	f001 fd78 	bl	8005b08 <xTaskGetTickCount>
 8004018:	4603      	mov	r3, r0
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	bd80      	pop	{r7, pc}

0800401e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800401e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004020:	b089      	sub	sp, #36	; 0x24
 8004022:	af04      	add	r7, sp, #16
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d020      	beq.n	8004072 <osThreadCreate+0x54>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01c      	beq.n	8004072 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685c      	ldr	r4, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681d      	ldr	r5, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691e      	ldr	r6, [r3, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ffa6 	bl	8003f9c <makeFreeRtosPriority>
 8004050:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800405a:	9202      	str	r2, [sp, #8]
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	9100      	str	r1, [sp, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	4632      	mov	r2, r6
 8004064:	4629      	mov	r1, r5
 8004066:	4620      	mov	r0, r4
 8004068:	f001 fa5c 	bl	8005524 <xTaskCreateStatic>
 800406c:	4603      	mov	r3, r0
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e01c      	b.n	80040ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685c      	ldr	r4, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800407e:	b29e      	uxth	r6, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff ff88 	bl	8003f9c <makeFreeRtosPriority>
 800408c:	4602      	mov	r2, r0
 800408e:	f107 030c 	add.w	r3, r7, #12
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	9200      	str	r2, [sp, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	4632      	mov	r2, r6
 800409a:	4629      	mov	r1, r5
 800409c:	4620      	mov	r0, r4
 800409e:	f001 fa9e 	bl	80055de <xTaskCreate>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d001      	beq.n	80040ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e000      	b.n	80040ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80040ac:	68fb      	ldr	r3, [r7, #12]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <osDelay+0x16>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	e000      	b.n	80040ce <osDelay+0x18>
 80040cc:	2301      	movs	r3, #1
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 fbd2 	bl	8005878 <vTaskDelay>
  
  return osOK;
 80040d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4619      	mov	r1, r3
 80040f4:	2001      	movs	r0, #1
 80040f6:	f000 fc40 	bl	800497a <xQueueCreateMutexStatic>
 80040fa:	4603      	mov	r3, r0
 80040fc:	e003      	b.n	8004106 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80040fe:	2001      	movs	r0, #1
 8004100:	f000 fc23 	bl	800494a <xQueueCreateMutex>
 8004104:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <osMutexWait+0x18>
    return osErrorParameter;
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	e03a      	b.n	800419e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d103      	bne.n	800413c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004134:	f04f 33ff 	mov.w	r3, #4294967295
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e009      	b.n	8004150 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <osMutexWait+0x40>
      ticks = 1;
 800414c:	2301      	movs	r3, #1
 800414e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004150:	f7ff ff3c 	bl	8003fcc <inHandlerMode>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d017      	beq.n	800418a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800415a:	f107 0308 	add.w	r3, r7, #8
 800415e:	461a      	mov	r2, r3
 8004160:	2100      	movs	r1, #0
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f001 f836 	bl	80051d4 <xQueueReceiveFromISR>
 8004168:	4603      	mov	r3, r0
 800416a:	2b01      	cmp	r3, #1
 800416c:	d001      	beq.n	8004172 <osMutexWait+0x62>
      return osErrorOS;
 800416e:	23ff      	movs	r3, #255	; 0xff
 8004170:	e015      	b.n	800419e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d011      	beq.n	800419c <osMutexWait+0x8c>
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <osMutexWait+0x98>)
 800417a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	e008      	b.n	800419c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800418a:	68f9      	ldr	r1, [r7, #12]
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 ff15 	bl	8004fbc <xQueueSemaphoreTake>
 8004192:	4603      	mov	r3, r0
 8004194:	2b01      	cmp	r3, #1
 8004196:	d001      	beq.n	800419c <osMutexWait+0x8c>
    return osErrorOS;
 8004198:	23ff      	movs	r3, #255	; 0xff
 800419a:	e000      	b.n	800419e <osMutexWait+0x8e>
  }
  
  return osOK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	e000ed04 	.word	0xe000ed04

080041ac <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80041bc:	f7ff ff06 	bl	8003fcc <inHandlerMode>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d016      	beq.n	80041f4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80041c6:	f107 0308 	add.w	r3, r7, #8
 80041ca:	4619      	mov	r1, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fd88 	bl	8004ce2 <xQueueGiveFromISR>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d001      	beq.n	80041dc <osMutexRelease+0x30>
      return osErrorOS;
 80041d8:	23ff      	movs	r3, #255	; 0xff
 80041da:	e017      	b.n	800420c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d013      	beq.n	800420a <osMutexRelease+0x5e>
 80041e2:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <osMutexRelease+0x68>)
 80041e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	e00a      	b.n	800420a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80041f4:	2300      	movs	r3, #0
 80041f6:	2200      	movs	r2, #0
 80041f8:	2100      	movs	r1, #0
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fbd8 	bl	80049b0 <xQueueGenericSend>
 8004200:	4603      	mov	r3, r0
 8004202:	2b01      	cmp	r3, #1
 8004204:	d001      	beq.n	800420a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004206:	23ff      	movs	r3, #255	; 0xff
 8004208:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800420a:	68fb      	ldr	r3, [r7, #12]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	e000ed04 	.word	0xe000ed04

08004218 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af02      	add	r7, sp, #8
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00f      	beq.n	800424a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d10a      	bne.n	8004246 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2203      	movs	r2, #3
 8004236:	9200      	str	r2, [sp, #0]
 8004238:	2200      	movs	r2, #0
 800423a:	2100      	movs	r1, #0
 800423c:	2001      	movs	r0, #1
 800423e:	f000 fa99 	bl	8004774 <xQueueGenericCreateStatic>
 8004242:	4603      	mov	r3, r0
 8004244:	e016      	b.n	8004274 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	e014      	b.n	8004274 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d110      	bne.n	8004272 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004250:	2203      	movs	r2, #3
 8004252:	2100      	movs	r1, #0
 8004254:	2001      	movs	r0, #1
 8004256:	f000 fb05 	bl	8004864 <xQueueGenericCreate>
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <osSemaphoreCreate+0x56>
 8004262:	2300      	movs	r3, #0
 8004264:	2200      	movs	r2, #0
 8004266:	2100      	movs	r1, #0
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fba1 	bl	80049b0 <xQueueGenericSend>
      return sema;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	e000      	b.n	8004274 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004272:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004286:	2300      	movs	r3, #0
 8004288:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	e03a      	b.n	800430a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d103      	bne.n	80042a8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80042a0:	f04f 33ff 	mov.w	r3, #4294967295
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	e009      	b.n	80042bc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d006      	beq.n	80042bc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <osSemaphoreWait+0x40>
      ticks = 1;
 80042b8:	2301      	movs	r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80042bc:	f7ff fe86 	bl	8003fcc <inHandlerMode>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d017      	beq.n	80042f6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80042c6:	f107 0308 	add.w	r3, r7, #8
 80042ca:	461a      	mov	r2, r3
 80042cc:	2100      	movs	r1, #0
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 ff80 	bl	80051d4 <xQueueReceiveFromISR>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d001      	beq.n	80042de <osSemaphoreWait+0x62>
      return osErrorOS;
 80042da:	23ff      	movs	r3, #255	; 0xff
 80042dc:	e015      	b.n	800430a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d011      	beq.n	8004308 <osSemaphoreWait+0x8c>
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <osSemaphoreWait+0x98>)
 80042e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	e008      	b.n	8004308 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fe5f 	bl	8004fbc <xQueueSemaphoreTake>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b01      	cmp	r3, #1
 8004302:	d001      	beq.n	8004308 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004304:	23ff      	movs	r3, #255	; 0xff
 8004306:	e000      	b.n	800430a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	e000ed04 	.word	0xe000ed04

08004318 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004324:	2300      	movs	r3, #0
 8004326:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004328:	f7ff fe50 	bl	8003fcc <inHandlerMode>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004332:	f107 0308 	add.w	r3, r7, #8
 8004336:	4619      	mov	r1, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fcd2 	bl	8004ce2 <xQueueGiveFromISR>
 800433e:	4603      	mov	r3, r0
 8004340:	2b01      	cmp	r3, #1
 8004342:	d001      	beq.n	8004348 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004344:	23ff      	movs	r3, #255	; 0xff
 8004346:	e017      	b.n	8004378 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d013      	beq.n	8004376 <osSemaphoreRelease+0x5e>
 800434e:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <osSemaphoreRelease+0x68>)
 8004350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	e00a      	b.n	8004376 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004360:	2300      	movs	r3, #0
 8004362:	2200      	movs	r2, #0
 8004364:	2100      	movs	r1, #0
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fb22 	bl	80049b0 <xQueueGenericSend>
 800436c:	4603      	mov	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d001      	beq.n	8004376 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004372:	23ff      	movs	r3, #255	; 0xff
 8004374:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004376:	68fb      	ldr	r3, [r7, #12]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004384:	b590      	push	{r4, r7, lr}
 8004386:	b085      	sub	sp, #20
 8004388:	af02      	add	r7, sp, #8
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d011      	beq.n	80043ba <osMessageCreate+0x36>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6859      	ldr	r1, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	2400      	movs	r4, #0
 80043b0:	9400      	str	r4, [sp, #0]
 80043b2:	f000 f9df 	bl	8004774 <xQueueGenericCreateStatic>
 80043b6:	4603      	mov	r3, r0
 80043b8:	e008      	b.n	80043cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	4619      	mov	r1, r3
 80043c6:	f000 fa4d 	bl	8004864 <xQueueGenericCreate>
 80043ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd90      	pop	{r4, r7, pc}

080043d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <osMessagePut+0x1e>
    ticks = 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80043f2:	f7ff fdeb 	bl	8003fcc <inHandlerMode>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d018      	beq.n	800442e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80043fc:	f107 0210 	add.w	r2, r7, #16
 8004400:	f107 0108 	add.w	r1, r7, #8
 8004404:	2300      	movs	r3, #0
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fbd0 	bl	8004bac <xQueueGenericSendFromISR>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <osMessagePut+0x42>
      return osErrorOS;
 8004412:	23ff      	movs	r3, #255	; 0xff
 8004414:	e018      	b.n	8004448 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d014      	beq.n	8004446 <osMessagePut+0x72>
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <osMessagePut+0x7c>)
 800441e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	e00b      	b.n	8004446 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800442e:	f107 0108 	add.w	r1, r7, #8
 8004432:	2300      	movs	r3, #0
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 faba 	bl	80049b0 <xQueueGenericSend>
 800443c:	4603      	mov	r3, r0
 800443e:	2b01      	cmp	r3, #1
 8004440:	d001      	beq.n	8004446 <osMessagePut+0x72>
      return osErrorOS;
 8004442:	23ff      	movs	r3, #255	; 0xff
 8004444:	e000      	b.n	8004448 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004454:	b590      	push	{r4, r7, lr}
 8004456:	b08b      	sub	sp, #44	; 0x2c
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	617b      	str	r3, [r7, #20]
    return event;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	461c      	mov	r4, r3
 8004476:	f107 0314 	add.w	r3, r7, #20
 800447a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800447e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004482:	e054      	b.n	800452e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004484:	2300      	movs	r3, #0
 8004486:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004492:	d103      	bne.n	800449c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004494:	f04f 33ff 	mov.w	r3, #4294967295
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
 800449a:	e009      	b.n	80044b0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d006      	beq.n	80044b0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <osMessageGet+0x5c>
      ticks = 1;
 80044ac:	2301      	movs	r3, #1
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80044b0:	f7ff fd8c 	bl	8003fcc <inHandlerMode>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01c      	beq.n	80044f4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80044ba:	f107 0220 	add.w	r2, r7, #32
 80044be:	f107 0314 	add.w	r3, r7, #20
 80044c2:	3304      	adds	r3, #4
 80044c4:	4619      	mov	r1, r3
 80044c6:	68b8      	ldr	r0, [r7, #8]
 80044c8:	f000 fe84 	bl	80051d4 <xQueueReceiveFromISR>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d102      	bne.n	80044d8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80044d2:	2310      	movs	r3, #16
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	e001      	b.n	80044dc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d01d      	beq.n	800451e <osMessageGet+0xca>
 80044e2:	4b15      	ldr	r3, [pc, #84]	; (8004538 <osMessageGet+0xe4>)
 80044e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	e014      	b.n	800451e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80044f4:	f107 0314 	add.w	r3, r7, #20
 80044f8:	3304      	adds	r3, #4
 80044fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fc:	4619      	mov	r1, r3
 80044fe:	68b8      	ldr	r0, [r7, #8]
 8004500:	f000 fc7c 	bl	8004dfc <xQueueReceive>
 8004504:	4603      	mov	r3, r0
 8004506:	2b01      	cmp	r3, #1
 8004508:	d102      	bne.n	8004510 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800450a:	2310      	movs	r3, #16
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	e006      	b.n	800451e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <osMessageGet+0xc6>
 8004516:	2300      	movs	r3, #0
 8004518:	e000      	b.n	800451c <osMessageGet+0xc8>
 800451a:	2340      	movs	r3, #64	; 0x40
 800451c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	461c      	mov	r4, r3
 8004522:	f107 0314 	add.w	r3, r7, #20
 8004526:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800452a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	372c      	adds	r7, #44	; 0x2c
 8004532:	46bd      	mov	sp, r7
 8004534:	bd90      	pop	{r4, r7, pc}
 8004536:	bf00      	nop
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f103 0208 	add.w	r2, r3, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f04f 32ff 	mov.w	r2, #4294967295
 8004554:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f103 0208 	add.w	r2, r3, #8
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f103 0208 	add.w	r2, r3, #8
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004596:	b480      	push	{r7}
 8004598:	b085      	sub	sp, #20
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	601a      	str	r2, [r3, #0]
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d103      	bne.n	80045fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e00c      	b.n	8004618 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3308      	adds	r3, #8
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e002      	b.n	800460c <vListInsert+0x2e>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	429a      	cmp	r2, r3
 8004616:	d2f6      	bcs.n	8004606 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6892      	ldr	r2, [r2, #8]
 8004666:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6852      	ldr	r2, [r2, #4]
 8004670:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	429a      	cmp	r2, r3
 800467a:	d103      	bne.n	8004684 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	1e5a      	subs	r2, r3, #1
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <xQueueGenericReset+0x2a>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60bb      	str	r3, [r7, #8]
}
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046ce:	f002 f889 	bl	80067e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046de:	fb01 f303 	mul.w	r3, r1, r3
 80046e2:	441a      	add	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fe:	3b01      	subs	r3, #1
 8004700:	68f9      	ldr	r1, [r7, #12]
 8004702:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	441a      	add	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	22ff      	movs	r2, #255	; 0xff
 8004712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	22ff      	movs	r2, #255	; 0xff
 800471a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d114      	bne.n	800474e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01a      	beq.n	8004762 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3310      	adds	r3, #16
 8004730:	4618      	mov	r0, r3
 8004732:	f001 fb49 	bl	8005dc8 <xTaskRemoveFromEventList>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d012      	beq.n	8004762 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <xQueueGenericReset+0xcc>)
 800473e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	e009      	b.n	8004762 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3310      	adds	r3, #16
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fef2 	bl	800453c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3324      	adds	r3, #36	; 0x24
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff feed 	bl	800453c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004762:	f002 f86f 	bl	8006844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004766:	2301      	movs	r3, #1
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	e000ed04 	.word	0xe000ed04

08004774 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08e      	sub	sp, #56	; 0x38
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10a      	bne.n	80047ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <xQueueGenericCreateStatic+0x52>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <xQueueGenericCreateStatic+0x56>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <xQueueGenericCreateStatic+0x58>
 80047ca:	2300      	movs	r3, #0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	623b      	str	r3, [r7, #32]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d102      	bne.n	80047f2 <xQueueGenericCreateStatic+0x7e>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <xQueueGenericCreateStatic+0x82>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <xQueueGenericCreateStatic+0x84>
 80047f6:	2300      	movs	r3, #0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	61fb      	str	r3, [r7, #28]
}
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004812:	2348      	movs	r3, #72	; 0x48
 8004814:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b48      	cmp	r3, #72	; 0x48
 800481a:	d00a      	beq.n	8004832 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	61bb      	str	r3, [r7, #24]
}
 800482e:	bf00      	nop
 8004830:	e7fe      	b.n	8004830 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004832:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00d      	beq.n	800485a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004846:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	4613      	mov	r3, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f83f 	bl	80048d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800485a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800485c:	4618      	mov	r0, r3
 800485e:	3730      	adds	r7, #48	; 0x30
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	; 0x28
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	613b      	str	r3, [r7, #16]
}
 800488a:	bf00      	nop
 800488c:	e7fe      	b.n	800488c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	3348      	adds	r3, #72	; 0x48
 800489c:	4618      	mov	r0, r3
 800489e:	f002 f8c3 	bl	8006a28 <pvPortMalloc>
 80048a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d011      	beq.n	80048ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	3348      	adds	r3, #72	; 0x48
 80048b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048bc:	79fa      	ldrb	r2, [r7, #7]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	4613      	mov	r3, r2
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f805 	bl	80048d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048ce:	69bb      	ldr	r3, [r7, #24]
	}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3720      	adds	r7, #32
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d103      	bne.n	80048f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e002      	b.n	80048fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004906:	2101      	movs	r1, #1
 8004908:	69b8      	ldr	r0, [r7, #24]
 800490a:	f7ff fecb 	bl	80046a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00e      	beq.n	8004942 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004936:	2300      	movs	r3, #0
 8004938:	2200      	movs	r2, #0
 800493a:	2100      	movs	r1, #0
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f837 	bl	80049b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800494a:	b580      	push	{r7, lr}
 800494c:	b086      	sub	sp, #24
 800494e:	af00      	add	r7, sp, #0
 8004950:	4603      	mov	r3, r0
 8004952:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004954:	2301      	movs	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	2300      	movs	r3, #0
 800495a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	461a      	mov	r2, r3
 8004960:	6939      	ldr	r1, [r7, #16]
 8004962:	6978      	ldr	r0, [r7, #20]
 8004964:	f7ff ff7e 	bl	8004864 <xQueueGenericCreate>
 8004968:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff ffd3 	bl	8004916 <prvInitialiseMutex>

		return xNewQueue;
 8004970:	68fb      	ldr	r3, [r7, #12]
	}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800497a:	b580      	push	{r7, lr}
 800497c:	b088      	sub	sp, #32
 800497e:	af02      	add	r7, sp, #8
 8004980:	4603      	mov	r3, r0
 8004982:	6039      	str	r1, [r7, #0]
 8004984:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004986:	2301      	movs	r3, #1
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	2300      	movs	r3, #0
 800498c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2200      	movs	r2, #0
 8004996:	6939      	ldr	r1, [r7, #16]
 8004998:	6978      	ldr	r0, [r7, #20]
 800499a:	f7ff feeb 	bl	8004774 <xQueueGenericCreateStatic>
 800499e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f7ff ffb8 	bl	8004916 <prvInitialiseMutex>

		return xNewQueue;
 80049a6:	68fb      	ldr	r3, [r7, #12]
	}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08e      	sub	sp, #56	; 0x38
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049be:	2300      	movs	r3, #0
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <xQueueGenericSend+0x32>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d103      	bne.n	80049f0 <xQueueGenericSend+0x40>
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <xQueueGenericSend+0x44>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <xQueueGenericSend+0x46>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <xQueueGenericSend+0x60>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a0c:	bf00      	nop
 8004a0e:	e7fe      	b.n	8004a0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d103      	bne.n	8004a1e <xQueueGenericSend+0x6e>
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <xQueueGenericSend+0x72>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <xQueueGenericSend+0x74>
 8004a22:	2300      	movs	r3, #0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <xQueueGenericSend+0x8e>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	623b      	str	r3, [r7, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	e7fe      	b.n	8004a3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a3e:	f001 fb83 	bl	8006148 <xTaskGetSchedulerState>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d102      	bne.n	8004a4e <xQueueGenericSend+0x9e>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <xQueueGenericSend+0xa2>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <xQueueGenericSend+0xa4>
 8004a52:	2300      	movs	r3, #0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <xQueueGenericSend+0xbe>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	61fb      	str	r3, [r7, #28]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a6e:	f001 feb9 	bl	80067e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d302      	bcc.n	8004a84 <xQueueGenericSend+0xd4>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d129      	bne.n	8004ad8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a8a:	f000 fc3b 	bl	8005304 <prvCopyDataToQueue>
 8004a8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d010      	beq.n	8004aba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	3324      	adds	r3, #36	; 0x24
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f001 f993 	bl	8005dc8 <xTaskRemoveFromEventList>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d013      	beq.n	8004ad0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004aa8:	4b3f      	ldr	r3, [pc, #252]	; (8004ba8 <xQueueGenericSend+0x1f8>)
 8004aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	e00a      	b.n	8004ad0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ac0:	4b39      	ldr	r3, [pc, #228]	; (8004ba8 <xQueueGenericSend+0x1f8>)
 8004ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ad0:	f001 feb8 	bl	8006844 <vPortExitCritical>
				return pdPASS;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e063      	b.n	8004ba0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ade:	f001 feb1 	bl	8006844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e05c      	b.n	8004ba0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aec:	f107 0314 	add.w	r3, r7, #20
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 f9cb 	bl	8005e8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004af6:	2301      	movs	r3, #1
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004afa:	f001 fea3 	bl	8006844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004afe:	f000 ff59 	bl	80059b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b02:	f001 fe6f 	bl	80067e4 <vPortEnterCritical>
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b0c:	b25b      	sxtb	r3, r3
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d103      	bne.n	8004b1c <xQueueGenericSend+0x16c>
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b22:	b25b      	sxtb	r3, r3
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d103      	bne.n	8004b32 <xQueueGenericSend+0x182>
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b32:	f001 fe87 	bl	8006844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b36:	1d3a      	adds	r2, r7, #4
 8004b38:	f107 0314 	add.w	r3, r7, #20
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 f9ba 	bl	8005eb8 <xTaskCheckForTimeOut>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d124      	bne.n	8004b94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b4c:	f000 fcd2 	bl	80054f4 <prvIsQueueFull>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d018      	beq.n	8004b88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	3310      	adds	r3, #16
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 f90e 	bl	8005d80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b66:	f000 fc5d 	bl	8005424 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b6a:	f000 ff31 	bl	80059d0 <xTaskResumeAll>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f47f af7c 	bne.w	8004a6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <xQueueGenericSend+0x1f8>)
 8004b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	e772      	b.n	8004a6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b8a:	f000 fc4b 	bl	8005424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b8e:	f000 ff1f 	bl	80059d0 <xTaskResumeAll>
 8004b92:	e76c      	b.n	8004a6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b96:	f000 fc45 	bl	8005424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b9a:	f000 ff19 	bl	80059d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3738      	adds	r7, #56	; 0x38
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b090      	sub	sp, #64	; 0x40
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d103      	bne.n	8004be8 <xQueueGenericSendFromISR+0x3c>
 8004be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <xQueueGenericSendFromISR+0x40>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <xQueueGenericSendFromISR+0x42>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d103      	bne.n	8004c16 <xQueueGenericSendFromISR+0x6a>
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <xQueueGenericSendFromISR+0x6e>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <xQueueGenericSendFromISR+0x70>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	623b      	str	r3, [r7, #32]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c36:	f001 feb7 	bl	80069a8 <vPortValidateInterruptPriority>
	__asm volatile
 8004c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	61fa      	str	r2, [r7, #28]
 8004c50:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004c52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d302      	bcc.n	8004c68 <xQueueGenericSendFromISR+0xbc>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d12f      	bne.n	8004cc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c7e:	f000 fb41 	bl	8005304 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8a:	d112      	bne.n	8004cb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d016      	beq.n	8004cc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c96:	3324      	adds	r3, #36	; 0x24
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f001 f895 	bl	8005dc8 <xTaskRemoveFromEventList>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00e      	beq.n	8004cc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	e007      	b.n	8004cc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	b25a      	sxtb	r2, r3
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004cc6:	e001      	b.n	8004ccc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cce:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f383 8811 	msr	BASEPRI, r3
}
 8004cd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3740      	adds	r7, #64	; 0x40
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b08e      	sub	sp, #56	; 0x38
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10a      	bne.n	8004d0c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	623b      	str	r3, [r7, #32]
}
 8004d08:	bf00      	nop
 8004d0a:	e7fe      	b.n	8004d0a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <xQueueGiveFromISR+0x48>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	61fb      	str	r3, [r7, #28]
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <xQueueGiveFromISR+0x58>
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <xQueueGiveFromISR+0x5c>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <xQueueGiveFromISR+0x5e>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <xQueueGiveFromISR+0x78>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	61bb      	str	r3, [r7, #24]
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d5a:	f001 fe25 	bl	80069a8 <vPortValidateInterruptPriority>
	__asm volatile
 8004d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	617a      	str	r2, [r7, #20]
 8004d74:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004d76:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d22b      	bcs.n	8004de2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d112      	bne.n	8004dcc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d016      	beq.n	8004ddc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	3324      	adds	r3, #36	; 0x24
 8004db2:	4618      	mov	r0, r3
 8004db4:	f001 f808 	bl	8005dc8 <xTaskRemoveFromEventList>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00e      	beq.n	8004ddc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00b      	beq.n	8004ddc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e007      	b.n	8004ddc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	b25a      	sxtb	r2, r3
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
 8004de0:	e001      	b.n	8004de6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f383 8811 	msr	BASEPRI, r3
}
 8004df0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3738      	adds	r7, #56	; 0x38
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08c      	sub	sp, #48	; 0x30
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <xQueueReceive+0x30>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	623b      	str	r3, [r7, #32]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d103      	bne.n	8004e3a <xQueueReceive+0x3e>
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <xQueueReceive+0x42>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <xQueueReceive+0x44>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <xQueueReceive+0x5e>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	61fb      	str	r3, [r7, #28]
}
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e5a:	f001 f975 	bl	8006148 <xTaskGetSchedulerState>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d102      	bne.n	8004e6a <xQueueReceive+0x6e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <xQueueReceive+0x72>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <xQueueReceive+0x74>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <xQueueReceive+0x8e>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	61bb      	str	r3, [r7, #24]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e8a:	f001 fcab 	bl	80067e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01f      	beq.n	8004eda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e9e:	f000 fa9b 	bl	80053d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	1e5a      	subs	r2, r3, #1
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00f      	beq.n	8004ed2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	3310      	adds	r3, #16
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 ff86 	bl	8005dc8 <xTaskRemoveFromEventList>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ec2:	4b3d      	ldr	r3, [pc, #244]	; (8004fb8 <xQueueReceive+0x1bc>)
 8004ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ed2:	f001 fcb7 	bl	8006844 <vPortExitCritical>
				return pdPASS;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e069      	b.n	8004fae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d103      	bne.n	8004ee8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ee0:	f001 fcb0 	bl	8006844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e062      	b.n	8004fae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eee:	f107 0310 	add.w	r3, r7, #16
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 ffca 	bl	8005e8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004efc:	f001 fca2 	bl	8006844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f00:	f000 fd58 	bl	80059b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f04:	f001 fc6e 	bl	80067e4 <vPortEnterCritical>
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f0e:	b25b      	sxtb	r3, r3
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f14:	d103      	bne.n	8004f1e <xQueueReceive+0x122>
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d103      	bne.n	8004f34 <xQueueReceive+0x138>
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f34:	f001 fc86 	bl	8006844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f38:	1d3a      	adds	r2, r7, #4
 8004f3a:	f107 0310 	add.w	r3, r7, #16
 8004f3e:	4611      	mov	r1, r2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 ffb9 	bl	8005eb8 <xTaskCheckForTimeOut>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d123      	bne.n	8004f94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f4e:	f000 fabb 	bl	80054c8 <prvIsQueueEmpty>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d017      	beq.n	8004f88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	3324      	adds	r3, #36	; 0x24
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 ff0d 	bl	8005d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f68:	f000 fa5c 	bl	8005424 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f6c:	f000 fd30 	bl	80059d0 <xTaskResumeAll>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d189      	bne.n	8004e8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f76:	4b10      	ldr	r3, [pc, #64]	; (8004fb8 <xQueueReceive+0x1bc>)
 8004f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	e780      	b.n	8004e8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f8a:	f000 fa4b 	bl	8005424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f8e:	f000 fd1f 	bl	80059d0 <xTaskResumeAll>
 8004f92:	e77a      	b.n	8004e8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f96:	f000 fa45 	bl	8005424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f9a:	f000 fd19 	bl	80059d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa0:	f000 fa92 	bl	80054c8 <prvIsQueueEmpty>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f43f af6f 	beq.w	8004e8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3730      	adds	r7, #48	; 0x30
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08e      	sub	sp, #56	; 0x38
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	623b      	str	r3, [r7, #32]
}
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	61fb      	str	r3, [r7, #28]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800500c:	f001 f89c 	bl	8006148 <xTaskGetSchedulerState>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <xQueueSemaphoreTake+0x60>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <xQueueSemaphoreTake+0x64>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <xQueueSemaphoreTake+0x66>
 8005020:	2300      	movs	r3, #0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	61bb      	str	r3, [r7, #24]
}
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800503c:	f001 fbd2 	bl	80067e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d024      	beq.n	8005096 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	1e5a      	subs	r2, r3, #1
 8005050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005052:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800505c:	f001 fa1c 	bl	8006498 <pvTaskIncrementMutexHeldCount>
 8005060:	4602      	mov	r2, r0
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00f      	beq.n	800508e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800506e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005070:	3310      	adds	r3, #16
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fea8 	bl	8005dc8 <xTaskRemoveFromEventList>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800507e:	4b54      	ldr	r3, [pc, #336]	; (80051d0 <xQueueSemaphoreTake+0x214>)
 8005080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800508e:	f001 fbd9 	bl	8006844 <vPortExitCritical>
				return pdPASS;
 8005092:	2301      	movs	r3, #1
 8005094:	e097      	b.n	80051c6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d111      	bne.n	80050c0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	617b      	str	r3, [r7, #20]
}
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80050b8:	f001 fbc4 	bl	8006844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050bc:	2300      	movs	r3, #0
 80050be:	e082      	b.n	80051c6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050c6:	f107 030c 	add.w	r3, r7, #12
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fede 	bl	8005e8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050d0:	2301      	movs	r3, #1
 80050d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050d4:	f001 fbb6 	bl	8006844 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050d8:	f000 fc6c 	bl	80059b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050dc:	f001 fb82 	bl	80067e4 <vPortEnterCritical>
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050e6:	b25b      	sxtb	r3, r3
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d103      	bne.n	80050f6 <xQueueSemaphoreTake+0x13a>
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050fc:	b25b      	sxtb	r3, r3
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d103      	bne.n	800510c <xQueueSemaphoreTake+0x150>
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800510c:	f001 fb9a 	bl	8006844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005110:	463a      	mov	r2, r7
 8005112:	f107 030c 	add.w	r3, r7, #12
 8005116:	4611      	mov	r1, r2
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fecd 	bl	8005eb8 <xTaskCheckForTimeOut>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d132      	bne.n	800518a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005126:	f000 f9cf 	bl	80054c8 <prvIsQueueEmpty>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d026      	beq.n	800517e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d109      	bne.n	800514c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005138:	f001 fb54 	bl	80067e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800513c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	4618      	mov	r0, r3
 8005142:	f001 f81f 	bl	8006184 <xTaskPriorityInherit>
 8005146:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005148:	f001 fb7c 	bl	8006844 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514e:	3324      	adds	r3, #36	; 0x24
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	4611      	mov	r1, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fe13 	bl	8005d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800515a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800515c:	f000 f962 	bl	8005424 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005160:	f000 fc36 	bl	80059d0 <xTaskResumeAll>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	f47f af68 	bne.w	800503c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800516c:	4b18      	ldr	r3, [pc, #96]	; (80051d0 <xQueueSemaphoreTake+0x214>)
 800516e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	e75e      	b.n	800503c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800517e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005180:	f000 f950 	bl	8005424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005184:	f000 fc24 	bl	80059d0 <xTaskResumeAll>
 8005188:	e758      	b.n	800503c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800518a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800518c:	f000 f94a 	bl	8005424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005190:	f000 fc1e 	bl	80059d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005194:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005196:	f000 f997 	bl	80054c8 <prvIsQueueEmpty>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	f43f af4d 	beq.w	800503c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00d      	beq.n	80051c4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80051a8:	f001 fb1c 	bl	80067e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80051ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051ae:	f000 f891 	bl	80052d4 <prvGetDisinheritPriorityAfterTimeout>
 80051b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ba:	4618      	mov	r0, r3
 80051bc:	f001 f8de 	bl	800637c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80051c0:	f001 fb40 	bl	8006844 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3738      	adds	r7, #56	; 0x38
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	e000ed04 	.word	0xe000ed04

080051d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08e      	sub	sp, #56	; 0x38
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	623b      	str	r3, [r7, #32]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d103      	bne.n	800520e <xQueueReceiveFromISR+0x3a>
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <xQueueReceiveFromISR+0x3e>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <xQueueReceiveFromISR+0x40>
 8005212:	2300      	movs	r3, #0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10a      	bne.n	800522e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	61fb      	str	r3, [r7, #28]
}
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800522e:	f001 fbbb 	bl	80069a8 <vPortValidateInterruptPriority>
	__asm volatile
 8005232:	f3ef 8211 	mrs	r2, BASEPRI
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	61ba      	str	r2, [r7, #24]
 8005248:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800524a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	2b00      	cmp	r3, #0
 8005258:	d02f      	beq.n	80052ba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005268:	f000 f8b6 	bl	80053d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	1e5a      	subs	r2, r3, #1
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005274:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527c:	d112      	bne.n	80052a4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d016      	beq.n	80052b4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	3310      	adds	r3, #16
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fd9c 	bl	8005dc8 <xTaskRemoveFromEventList>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00e      	beq.n	80052b4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00b      	beq.n	80052b4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e007      	b.n	80052b4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80052a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052a8:	3301      	adds	r3, #1
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	b25a      	sxtb	r2, r3
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80052b4:	2301      	movs	r3, #1
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34
 80052b8:	e001      	b.n	80052be <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	637b      	str	r3, [r7, #52]	; 0x34
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f383 8811 	msr	BASEPRI, r3
}
 80052c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3738      	adds	r7, #56	; 0x38
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d006      	beq.n	80052f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f1c3 0307 	rsb	r3, r3, #7
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e001      	b.n	80052f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80052f6:	68fb      	ldr	r3, [r7, #12]
	}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10d      	bne.n	800533e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d14d      	bne.n	80053c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	4618      	mov	r0, r3
 8005330:	f000 ff9e 	bl	8006270 <xTaskPriorityDisinherit>
 8005334:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	e043      	b.n	80053c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d119      	bne.n	8005378 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6858      	ldr	r0, [r3, #4]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	461a      	mov	r2, r3
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	f00b fece 	bl	80110f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	441a      	add	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	429a      	cmp	r2, r3
 800536c:	d32b      	bcc.n	80053c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	605a      	str	r2, [r3, #4]
 8005376:	e026      	b.n	80053c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	68d8      	ldr	r0, [r3, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	461a      	mov	r2, r3
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	f00b feb4 	bl	80110f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	425b      	negs	r3, r3
 8005392:	441a      	add	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d207      	bcs.n	80053b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	425b      	negs	r3, r3
 80053ae:	441a      	add	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d105      	bne.n	80053c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80053ce:	697b      	ldr	r3, [r7, #20]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d018      	beq.n	800541c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	441a      	add	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	429a      	cmp	r2, r3
 8005402:	d303      	bcc.n	800540c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68d9      	ldr	r1, [r3, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	461a      	mov	r2, r3
 8005416:	6838      	ldr	r0, [r7, #0]
 8005418:	f00b fe6a 	bl	80110f0 <memcpy>
	}
}
 800541c:	bf00      	nop
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800542c:	f001 f9da 	bl	80067e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005436:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005438:	e011      	b.n	800545e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b00      	cmp	r3, #0
 8005440:	d012      	beq.n	8005468 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3324      	adds	r3, #36	; 0x24
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fcbe 	bl	8005dc8 <xTaskRemoveFromEventList>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005452:	f000 fd93 	bl	8005f7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	3b01      	subs	r3, #1
 800545a:	b2db      	uxtb	r3, r3
 800545c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800545e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005462:	2b00      	cmp	r3, #0
 8005464:	dce9      	bgt.n	800543a <prvUnlockQueue+0x16>
 8005466:	e000      	b.n	800546a <prvUnlockQueue+0x46>
					break;
 8005468:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	22ff      	movs	r2, #255	; 0xff
 800546e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005472:	f001 f9e7 	bl	8006844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005476:	f001 f9b5 	bl	80067e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005480:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005482:	e011      	b.n	80054a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d012      	beq.n	80054b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3310      	adds	r3, #16
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fc99 	bl	8005dc8 <xTaskRemoveFromEventList>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800549c:	f000 fd6e 	bl	8005f7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80054a0:	7bbb      	ldrb	r3, [r7, #14]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	dce9      	bgt.n	8005484 <prvUnlockQueue+0x60>
 80054b0:	e000      	b.n	80054b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80054b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	22ff      	movs	r2, #255	; 0xff
 80054b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80054bc:	f001 f9c2 	bl	8006844 <vPortExitCritical>
}
 80054c0:	bf00      	nop
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054d0:	f001 f988 	bl	80067e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d102      	bne.n	80054e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80054dc:	2301      	movs	r3, #1
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	e001      	b.n	80054e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054e6:	f001 f9ad 	bl	8006844 <vPortExitCritical>

	return xReturn;
 80054ea:	68fb      	ldr	r3, [r7, #12]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054fc:	f001 f972 	bl	80067e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005508:	429a      	cmp	r2, r3
 800550a:	d102      	bne.n	8005512 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800550c:	2301      	movs	r3, #1
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	e001      	b.n	8005516 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005516:	f001 f995 	bl	8006844 <vPortExitCritical>

	return xReturn;
 800551a:	68fb      	ldr	r3, [r7, #12]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08e      	sub	sp, #56	; 0x38
 8005528:	af04      	add	r7, sp, #16
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	623b      	str	r3, [r7, #32]
}
 800554a:	bf00      	nop
 800554c:	e7fe      	b.n	800554c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <xTaskCreateStatic+0x46>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	61fb      	str	r3, [r7, #28]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800556a:	23b4      	movs	r3, #180	; 0xb4
 800556c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2bb4      	cmp	r3, #180	; 0xb4
 8005572:	d00a      	beq.n	800558a <xTaskCreateStatic+0x66>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	61bb      	str	r3, [r7, #24]
}
 8005586:	bf00      	nop
 8005588:	e7fe      	b.n	8005588 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800558a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01e      	beq.n	80055d0 <xTaskCreateStatic+0xac>
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01b      	beq.n	80055d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055aa:	2300      	movs	r3, #0
 80055ac:	9303      	str	r3, [sp, #12]
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	9302      	str	r3, [sp, #8]
 80055b2:	f107 0314 	add.w	r3, r7, #20
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f850 	bl	8005668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055ca:	f000 f8eb 	bl	80057a4 <prvAddNewTaskToReadyList>
 80055ce:	e001      	b.n	80055d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055d4:	697b      	ldr	r3, [r7, #20]
	}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3728      	adds	r7, #40	; 0x28
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b08c      	sub	sp, #48	; 0x30
 80055e2:	af04      	add	r7, sp, #16
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f001 fa18 	bl	8006a28 <pvPortMalloc>
 80055f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00e      	beq.n	800561e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005600:	20b4      	movs	r0, #180	; 0xb4
 8005602:	f001 fa11 	bl	8006a28 <pvPortMalloc>
 8005606:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
 8005614:	e005      	b.n	8005622 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005616:	6978      	ldr	r0, [r7, #20]
 8005618:	f001 fad2 	bl	8006bc0 <vPortFree>
 800561c:	e001      	b.n	8005622 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d017      	beq.n	8005658 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005630:	88fa      	ldrh	r2, [r7, #6]
 8005632:	2300      	movs	r3, #0
 8005634:	9303      	str	r3, [sp, #12]
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	9302      	str	r3, [sp, #8]
 800563a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f80e 	bl	8005668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800564c:	69f8      	ldr	r0, [r7, #28]
 800564e:	f000 f8a9 	bl	80057a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005652:	2301      	movs	r3, #1
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e002      	b.n	800565e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005658:	f04f 33ff 	mov.w	r3, #4294967295
 800565c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800565e:	69bb      	ldr	r3, [r7, #24]
	}
 8005660:	4618      	mov	r0, r3
 8005662:	3720      	adds	r7, #32
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005680:	3b01      	subs	r3, #1
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	617b      	str	r3, [r7, #20]
}
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01f      	beq.n	80056f6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	e012      	b.n	80056e2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	4413      	add	r3, r2
 80056c2:	7819      	ldrb	r1, [r3, #0]
 80056c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4413      	add	r3, r2
 80056ca:	3334      	adds	r3, #52	; 0x34
 80056cc:	460a      	mov	r2, r1
 80056ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d006      	beq.n	80056ea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	3301      	adds	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b0f      	cmp	r3, #15
 80056e6:	d9e9      	bls.n	80056bc <prvInitialiseNewTask+0x54>
 80056e8:	e000      	b.n	80056ec <prvInitialiseNewTask+0x84>
			{
				break;
 80056ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056f4:	e003      	b.n	80056fe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	2b06      	cmp	r3, #6
 8005702:	d901      	bls.n	8005708 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005704:	2306      	movs	r3, #6
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800570c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005712:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	2200      	movs	r2, #0
 8005718:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	3304      	adds	r3, #4
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe ff2c 	bl	800457c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	3318      	adds	r3, #24
 8005728:	4618      	mov	r0, r3
 800572a:	f7fe ff27 	bl	800457c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005732:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	f1c3 0207 	rsb	r2, r3, #7
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005742:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	2200      	movs	r2, #0
 8005748:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	2200      	movs	r2, #0
 8005750:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	334c      	adds	r3, #76	; 0x4c
 8005758:	2260      	movs	r2, #96	; 0x60
 800575a:	2100      	movs	r1, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f00b fcd5 	bl	801110c <memset>
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	4a0c      	ldr	r2, [pc, #48]	; (8005798 <prvInitialiseNewTask+0x130>)
 8005766:	651a      	str	r2, [r3, #80]	; 0x50
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	4a0c      	ldr	r2, [pc, #48]	; (800579c <prvInitialiseNewTask+0x134>)
 800576c:	655a      	str	r2, [r3, #84]	; 0x54
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	4a0b      	ldr	r2, [pc, #44]	; (80057a0 <prvInitialiseNewTask+0x138>)
 8005772:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	68f9      	ldr	r1, [r7, #12]
 8005778:	69b8      	ldr	r0, [r7, #24]
 800577a:	f000 ff07 	bl	800658c <pxPortInitialiseStack>
 800577e:	4602      	mov	r2, r0
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800578e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005790:	bf00      	nop
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	08014cf4 	.word	0x08014cf4
 800579c:	08014d14 	.word	0x08014d14
 80057a0:	08014cd4 	.word	0x08014cd4

080057a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057ac:	f001 f81a 	bl	80067e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057b0:	4b2a      	ldr	r3, [pc, #168]	; (800585c <prvAddNewTaskToReadyList+0xb8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	4a29      	ldr	r2, [pc, #164]	; (800585c <prvAddNewTaskToReadyList+0xb8>)
 80057b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057ba:	4b29      	ldr	r3, [pc, #164]	; (8005860 <prvAddNewTaskToReadyList+0xbc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057c2:	4a27      	ldr	r2, [pc, #156]	; (8005860 <prvAddNewTaskToReadyList+0xbc>)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057c8:	4b24      	ldr	r3, [pc, #144]	; (800585c <prvAddNewTaskToReadyList+0xb8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d110      	bne.n	80057f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057d0:	f000 fbf8 	bl	8005fc4 <prvInitialiseTaskLists>
 80057d4:	e00d      	b.n	80057f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057d6:	4b23      	ldr	r3, [pc, #140]	; (8005864 <prvAddNewTaskToReadyList+0xc0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057de:	4b20      	ldr	r3, [pc, #128]	; (8005860 <prvAddNewTaskToReadyList+0xbc>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d802      	bhi.n	80057f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057ec:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <prvAddNewTaskToReadyList+0xbc>)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057f2:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <prvAddNewTaskToReadyList+0xc4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3301      	adds	r3, #1
 80057f8:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <prvAddNewTaskToReadyList+0xc4>)
 80057fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	2201      	movs	r2, #1
 8005802:	409a      	lsls	r2, r3
 8005804:	4b19      	ldr	r3, [pc, #100]	; (800586c <prvAddNewTaskToReadyList+0xc8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4313      	orrs	r3, r2
 800580a:	4a18      	ldr	r2, [pc, #96]	; (800586c <prvAddNewTaskToReadyList+0xc8>)
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4a15      	ldr	r2, [pc, #84]	; (8005870 <prvAddNewTaskToReadyList+0xcc>)
 800581c:	441a      	add	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3304      	adds	r3, #4
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f7fe feb6 	bl	8004596 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800582a:	f001 f80b 	bl	8006844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800582e:	4b0d      	ldr	r3, [pc, #52]	; (8005864 <prvAddNewTaskToReadyList+0xc0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00e      	beq.n	8005854 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005836:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <prvAddNewTaskToReadyList+0xbc>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	429a      	cmp	r2, r3
 8005842:	d207      	bcs.n	8005854 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005844:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <prvAddNewTaskToReadyList+0xd0>)
 8005846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005854:	bf00      	nop
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000480 	.word	0x20000480
 8005860:	20000380 	.word	0x20000380
 8005864:	2000048c 	.word	0x2000048c
 8005868:	2000049c 	.word	0x2000049c
 800586c:	20000488 	.word	0x20000488
 8005870:	20000384 	.word	0x20000384
 8005874:	e000ed04 	.word	0xe000ed04

08005878 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d017      	beq.n	80058ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800588a:	4b13      	ldr	r3, [pc, #76]	; (80058d8 <vTaskDelay+0x60>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <vTaskDelay+0x30>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	60bb      	str	r3, [r7, #8]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80058a8:	f000 f884 	bl	80059b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058ac:	2100      	movs	r1, #0
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fe06 	bl	80064c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058b4:	f000 f88c 	bl	80059d0 <xTaskResumeAll>
 80058b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d107      	bne.n	80058d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80058c0:	4b06      	ldr	r3, [pc, #24]	; (80058dc <vTaskDelay+0x64>)
 80058c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	200004a8 	.word	0x200004a8
 80058dc:	e000ed04 	.word	0xe000ed04

080058e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	; 0x28
 80058e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058ee:	463a      	mov	r2, r7
 80058f0:	1d39      	adds	r1, r7, #4
 80058f2:	f107 0308 	add.w	r3, r7, #8
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fa fe36 	bl	8000568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058fc:	6839      	ldr	r1, [r7, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	9202      	str	r2, [sp, #8]
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	2300      	movs	r3, #0
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	2300      	movs	r3, #0
 800590c:	460a      	mov	r2, r1
 800590e:	4921      	ldr	r1, [pc, #132]	; (8005994 <vTaskStartScheduler+0xb4>)
 8005910:	4821      	ldr	r0, [pc, #132]	; (8005998 <vTaskStartScheduler+0xb8>)
 8005912:	f7ff fe07 	bl	8005524 <xTaskCreateStatic>
 8005916:	4603      	mov	r3, r0
 8005918:	4a20      	ldr	r2, [pc, #128]	; (800599c <vTaskStartScheduler+0xbc>)
 800591a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800591c:	4b1f      	ldr	r3, [pc, #124]	; (800599c <vTaskStartScheduler+0xbc>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005924:	2301      	movs	r3, #1
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e001      	b.n	800592e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d11b      	bne.n	800596c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	613b      	str	r3, [r7, #16]
}
 8005946:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <vTaskStartScheduler+0xc0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	334c      	adds	r3, #76	; 0x4c
 800594e:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <vTaskStartScheduler+0xc4>)
 8005950:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005952:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <vTaskStartScheduler+0xc8>)
 8005954:	f04f 32ff 	mov.w	r2, #4294967295
 8005958:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800595a:	4b14      	ldr	r3, [pc, #80]	; (80059ac <vTaskStartScheduler+0xcc>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005960:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <vTaskStartScheduler+0xd0>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005966:	f000 fe9b 	bl	80066a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800596a:	e00e      	b.n	800598a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d10a      	bne.n	800598a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <vTaskStartScheduler+0xa8>
}
 800598a:	bf00      	nop
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	08012100 	.word	0x08012100
 8005998:	08005f95 	.word	0x08005f95
 800599c:	200004a4 	.word	0x200004a4
 80059a0:	20000380 	.word	0x20000380
 80059a4:	2000001c 	.word	0x2000001c
 80059a8:	200004a0 	.word	0x200004a0
 80059ac:	2000048c 	.word	0x2000048c
 80059b0:	20000484 	.word	0x20000484

080059b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <vTaskSuspendAll+0x18>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3301      	adds	r3, #1
 80059be:	4a03      	ldr	r2, [pc, #12]	; (80059cc <vTaskSuspendAll+0x18>)
 80059c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80059c2:	bf00      	nop
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	200004a8 	.word	0x200004a8

080059d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059da:	2300      	movs	r3, #0
 80059dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059de:	4b41      	ldr	r3, [pc, #260]	; (8005ae4 <xTaskResumeAll+0x114>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <xTaskResumeAll+0x2c>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	603b      	str	r3, [r7, #0]
}
 80059f8:	bf00      	nop
 80059fa:	e7fe      	b.n	80059fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059fc:	f000 fef2 	bl	80067e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a00:	4b38      	ldr	r3, [pc, #224]	; (8005ae4 <xTaskResumeAll+0x114>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	4a37      	ldr	r2, [pc, #220]	; (8005ae4 <xTaskResumeAll+0x114>)
 8005a08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a0a:	4b36      	ldr	r3, [pc, #216]	; (8005ae4 <xTaskResumeAll+0x114>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d161      	bne.n	8005ad6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a12:	4b35      	ldr	r3, [pc, #212]	; (8005ae8 <xTaskResumeAll+0x118>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d05d      	beq.n	8005ad6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a1a:	e02e      	b.n	8005a7a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a1c:	4b33      	ldr	r3, [pc, #204]	; (8005aec <xTaskResumeAll+0x11c>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3318      	adds	r3, #24
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe fe11 	bl	8004650 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe fe0c 	bl	8004650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	4b2b      	ldr	r3, [pc, #172]	; (8005af0 <xTaskResumeAll+0x120>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	4a2a      	ldr	r2, [pc, #168]	; (8005af0 <xTaskResumeAll+0x120>)
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4a27      	ldr	r2, [pc, #156]	; (8005af4 <xTaskResumeAll+0x124>)
 8005a58:	441a      	add	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f7fe fd98 	bl	8004596 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6a:	4b23      	ldr	r3, [pc, #140]	; (8005af8 <xTaskResumeAll+0x128>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d302      	bcc.n	8005a7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005a74:	4b21      	ldr	r3, [pc, #132]	; (8005afc <xTaskResumeAll+0x12c>)
 8005a76:	2201      	movs	r2, #1
 8005a78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a7a:	4b1c      	ldr	r3, [pc, #112]	; (8005aec <xTaskResumeAll+0x11c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1cc      	bne.n	8005a1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a88:	f000 fb3e 	bl	8006108 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a8c:	4b1c      	ldr	r3, [pc, #112]	; (8005b00 <xTaskResumeAll+0x130>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d010      	beq.n	8005aba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a98:	f000 f858 	bl	8005b4c <xTaskIncrementTick>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005aa2:	4b16      	ldr	r3, [pc, #88]	; (8005afc <xTaskResumeAll+0x12c>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f1      	bne.n	8005a98 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005ab4:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <xTaskResumeAll+0x130>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005aba:	4b10      	ldr	r3, [pc, #64]	; (8005afc <xTaskResumeAll+0x12c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d009      	beq.n	8005ad6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <xTaskResumeAll+0x134>)
 8005ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ad6:	f000 feb5 	bl	8006844 <vPortExitCritical>

	return xAlreadyYielded;
 8005ada:	68bb      	ldr	r3, [r7, #8]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	200004a8 	.word	0x200004a8
 8005ae8:	20000480 	.word	0x20000480
 8005aec:	20000440 	.word	0x20000440
 8005af0:	20000488 	.word	0x20000488
 8005af4:	20000384 	.word	0x20000384
 8005af8:	20000380 	.word	0x20000380
 8005afc:	20000494 	.word	0x20000494
 8005b00:	20000490 	.word	0x20000490
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <xTaskGetTickCount+0x1c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b14:	687b      	ldr	r3, [r7, #4]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000484 	.word	0x20000484

08005b28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b2e:	f000 ff3b 	bl	80069a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005b36:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <xTaskGetTickCountFromISR+0x20>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b3c:	683b      	ldr	r3, [r7, #0]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000484 	.word	0x20000484

08005b4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b56:	4b4e      	ldr	r3, [pc, #312]	; (8005c90 <xTaskIncrementTick+0x144>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f040 808e 	bne.w	8005c7c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b60:	4b4c      	ldr	r3, [pc, #304]	; (8005c94 <xTaskIncrementTick+0x148>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3301      	adds	r3, #1
 8005b66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b68:	4a4a      	ldr	r2, [pc, #296]	; (8005c94 <xTaskIncrementTick+0x148>)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d120      	bne.n	8005bb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b74:	4b48      	ldr	r3, [pc, #288]	; (8005c98 <xTaskIncrementTick+0x14c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	603b      	str	r3, [r7, #0]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <xTaskIncrementTick+0x46>
 8005b94:	4b40      	ldr	r3, [pc, #256]	; (8005c98 <xTaskIncrementTick+0x14c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	4b40      	ldr	r3, [pc, #256]	; (8005c9c <xTaskIncrementTick+0x150>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a3e      	ldr	r2, [pc, #248]	; (8005c98 <xTaskIncrementTick+0x14c>)
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	4a3e      	ldr	r2, [pc, #248]	; (8005c9c <xTaskIncrementTick+0x150>)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	4b3d      	ldr	r3, [pc, #244]	; (8005ca0 <xTaskIncrementTick+0x154>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3301      	adds	r3, #1
 8005bae:	4a3c      	ldr	r2, [pc, #240]	; (8005ca0 <xTaskIncrementTick+0x154>)
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	f000 faa9 	bl	8006108 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005bb6:	4b3b      	ldr	r3, [pc, #236]	; (8005ca4 <xTaskIncrementTick+0x158>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d348      	bcc.n	8005c52 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bc0:	4b35      	ldr	r3, [pc, #212]	; (8005c98 <xTaskIncrementTick+0x14c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bca:	4b36      	ldr	r3, [pc, #216]	; (8005ca4 <xTaskIncrementTick+0x158>)
 8005bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd0:	601a      	str	r2, [r3, #0]
					break;
 8005bd2:	e03e      	b.n	8005c52 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd4:	4b30      	ldr	r3, [pc, #192]	; (8005c98 <xTaskIncrementTick+0x14c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d203      	bcs.n	8005bf4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bec:	4a2d      	ldr	r2, [pc, #180]	; (8005ca4 <xTaskIncrementTick+0x158>)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bf2:	e02e      	b.n	8005c52 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fd29 	bl	8004650 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d004      	beq.n	8005c10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	3318      	adds	r3, #24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe fd20 	bl	8004650 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	2201      	movs	r2, #1
 8005c16:	409a      	lsls	r2, r3
 8005c18:	4b23      	ldr	r3, [pc, #140]	; (8005ca8 <xTaskIncrementTick+0x15c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	4a22      	ldr	r2, [pc, #136]	; (8005ca8 <xTaskIncrementTick+0x15c>)
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4a1f      	ldr	r2, [pc, #124]	; (8005cac <xTaskIncrementTick+0x160>)
 8005c30:	441a      	add	r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f7fe fcac 	bl	8004596 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c42:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <xTaskIncrementTick+0x164>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d3b9      	bcc.n	8005bc0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c50:	e7b6      	b.n	8005bc0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c52:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <xTaskIncrementTick+0x164>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c58:	4914      	ldr	r1, [pc, #80]	; (8005cac <xTaskIncrementTick+0x160>)
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	440b      	add	r3, r1
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d901      	bls.n	8005c6e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c6e:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <xTaskIncrementTick+0x168>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005c76:	2301      	movs	r3, #1
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	e004      	b.n	8005c86 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c7c:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <xTaskIncrementTick+0x16c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3301      	adds	r3, #1
 8005c82:	4a0d      	ldr	r2, [pc, #52]	; (8005cb8 <xTaskIncrementTick+0x16c>)
 8005c84:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c86:	697b      	ldr	r3, [r7, #20]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	200004a8 	.word	0x200004a8
 8005c94:	20000484 	.word	0x20000484
 8005c98:	20000438 	.word	0x20000438
 8005c9c:	2000043c 	.word	0x2000043c
 8005ca0:	20000498 	.word	0x20000498
 8005ca4:	200004a0 	.word	0x200004a0
 8005ca8:	20000488 	.word	0x20000488
 8005cac:	20000384 	.word	0x20000384
 8005cb0:	20000380 	.word	0x20000380
 8005cb4:	20000494 	.word	0x20000494
 8005cb8:	20000490 	.word	0x20000490

08005cbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cc2:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <vTaskSwitchContext+0xac>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005cca:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <vTaskSwitchContext+0xb0>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005cd0:	e044      	b.n	8005d5c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005cd2:	4b26      	ldr	r3, [pc, #152]	; (8005d6c <vTaskSwitchContext+0xb0>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd8:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <vTaskSwitchContext+0xb4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	fab3 f383 	clz	r3, r3
 8005ce4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	f1c3 031f 	rsb	r3, r3, #31
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	4921      	ldr	r1, [pc, #132]	; (8005d74 <vTaskSwitchContext+0xb8>)
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10a      	bne.n	8005d18 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	607b      	str	r3, [r7, #4]
}
 8005d14:	bf00      	nop
 8005d16:	e7fe      	b.n	8005d16 <vTaskSwitchContext+0x5a>
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4a14      	ldr	r2, [pc, #80]	; (8005d74 <vTaskSwitchContext+0xb8>)
 8005d24:	4413      	add	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	3308      	adds	r3, #8
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d104      	bne.n	8005d48 <vTaskSwitchContext+0x8c>
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	605a      	str	r2, [r3, #4]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	; (8005d78 <vTaskSwitchContext+0xbc>)
 8005d50:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d52:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <vTaskSwitchContext+0xbc>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	334c      	adds	r3, #76	; 0x4c
 8005d58:	4a08      	ldr	r2, [pc, #32]	; (8005d7c <vTaskSwitchContext+0xc0>)
 8005d5a:	6013      	str	r3, [r2, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	200004a8 	.word	0x200004a8
 8005d6c:	20000494 	.word	0x20000494
 8005d70:	20000488 	.word	0x20000488
 8005d74:	20000384 	.word	0x20000384
 8005d78:	20000380 	.word	0x20000380
 8005d7c:	2000001c 	.word	0x2000001c

08005d80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	60fb      	str	r3, [r7, #12]
}
 8005da2:	bf00      	nop
 8005da4:	e7fe      	b.n	8005da4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005da6:	4b07      	ldr	r3, [pc, #28]	; (8005dc4 <vTaskPlaceOnEventList+0x44>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3318      	adds	r3, #24
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fe fc15 	bl	80045de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005db4:	2101      	movs	r1, #1
 8005db6:	6838      	ldr	r0, [r7, #0]
 8005db8:	f000 fb82 	bl	80064c0 <prvAddCurrentTaskToDelayedList>
}
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000380 	.word	0x20000380

08005dc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	60fb      	str	r3, [r7, #12]
}
 8005df0:	bf00      	nop
 8005df2:	e7fe      	b.n	8005df2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	3318      	adds	r3, #24
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe fc29 	bl	8004650 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dfe:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <xTaskRemoveFromEventList+0xac>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d11c      	bne.n	8005e40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe fc20 	bl	8004650 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	2201      	movs	r2, #1
 8005e16:	409a      	lsls	r2, r3
 8005e18:	4b17      	ldr	r3, [pc, #92]	; (8005e78 <xTaskRemoveFromEventList+0xb0>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	4a16      	ldr	r2, [pc, #88]	; (8005e78 <xTaskRemoveFromEventList+0xb0>)
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4a13      	ldr	r2, [pc, #76]	; (8005e7c <xTaskRemoveFromEventList+0xb4>)
 8005e30:	441a      	add	r2, r3
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	3304      	adds	r3, #4
 8005e36:	4619      	mov	r1, r3
 8005e38:	4610      	mov	r0, r2
 8005e3a:	f7fe fbac 	bl	8004596 <vListInsertEnd>
 8005e3e:	e005      	b.n	8005e4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	3318      	adds	r3, #24
 8005e44:	4619      	mov	r1, r3
 8005e46:	480e      	ldr	r0, [pc, #56]	; (8005e80 <xTaskRemoveFromEventList+0xb8>)
 8005e48:	f7fe fba5 	bl	8004596 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e50:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <xTaskRemoveFromEventList+0xbc>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d905      	bls.n	8005e66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <xTaskRemoveFromEventList+0xc0>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	e001      	b.n	8005e6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e6a:	697b      	ldr	r3, [r7, #20]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	200004a8 	.word	0x200004a8
 8005e78:	20000488 	.word	0x20000488
 8005e7c:	20000384 	.word	0x20000384
 8005e80:	20000440 	.word	0x20000440
 8005e84:	20000380 	.word	0x20000380
 8005e88:	20000494 	.word	0x20000494

08005e8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e94:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <vTaskInternalSetTimeOutState+0x24>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e9c:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <vTaskInternalSetTimeOutState+0x28>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	605a      	str	r2, [r3, #4]
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	20000498 	.word	0x20000498
 8005eb4:	20000484 	.word	0x20000484

08005eb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	613b      	str	r3, [r7, #16]
}
 8005eda:	bf00      	nop
 8005edc:	e7fe      	b.n	8005edc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	60fb      	str	r3, [r7, #12]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005efa:	f000 fc73 	bl	80067e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005efe:	4b1d      	ldr	r3, [pc, #116]	; (8005f74 <xTaskCheckForTimeOut+0xbc>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f16:	d102      	bne.n	8005f1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61fb      	str	r3, [r7, #28]
 8005f1c:	e023      	b.n	8005f66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b15      	ldr	r3, [pc, #84]	; (8005f78 <xTaskCheckForTimeOut+0xc0>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d007      	beq.n	8005f3a <xTaskCheckForTimeOut+0x82>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d302      	bcc.n	8005f3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f34:	2301      	movs	r3, #1
 8005f36:	61fb      	str	r3, [r7, #28]
 8005f38:	e015      	b.n	8005f66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d20b      	bcs.n	8005f5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	1ad2      	subs	r2, r2, r3
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff ff9b 	bl	8005e8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	e004      	b.n	8005f66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f62:	2301      	movs	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f66:	f000 fc6d 	bl	8006844 <vPortExitCritical>

	return xReturn;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20000484 	.word	0x20000484
 8005f78:	20000498 	.word	0x20000498

08005f7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f80:	4b03      	ldr	r3, [pc, #12]	; (8005f90 <vTaskMissedYield+0x14>)
 8005f82:	2201      	movs	r2, #1
 8005f84:	601a      	str	r2, [r3, #0]
}
 8005f86:	bf00      	nop
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	20000494 	.word	0x20000494

08005f94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f9c:	f000 f852 	bl	8006044 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <prvIdleTask+0x28>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d9f9      	bls.n	8005f9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005fa8:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <prvIdleTask+0x2c>)
 8005faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005fb8:	e7f0      	b.n	8005f9c <prvIdleTask+0x8>
 8005fba:	bf00      	nop
 8005fbc:	20000384 	.word	0x20000384
 8005fc0:	e000ed04 	.word	0xe000ed04

08005fc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fca:	2300      	movs	r3, #0
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	e00c      	b.n	8005fea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4a12      	ldr	r2, [pc, #72]	; (8006024 <prvInitialiseTaskLists+0x60>)
 8005fdc:	4413      	add	r3, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe faac 	bl	800453c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	607b      	str	r3, [r7, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b06      	cmp	r3, #6
 8005fee:	d9ef      	bls.n	8005fd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ff0:	480d      	ldr	r0, [pc, #52]	; (8006028 <prvInitialiseTaskLists+0x64>)
 8005ff2:	f7fe faa3 	bl	800453c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ff6:	480d      	ldr	r0, [pc, #52]	; (800602c <prvInitialiseTaskLists+0x68>)
 8005ff8:	f7fe faa0 	bl	800453c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ffc:	480c      	ldr	r0, [pc, #48]	; (8006030 <prvInitialiseTaskLists+0x6c>)
 8005ffe:	f7fe fa9d 	bl	800453c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006002:	480c      	ldr	r0, [pc, #48]	; (8006034 <prvInitialiseTaskLists+0x70>)
 8006004:	f7fe fa9a 	bl	800453c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006008:	480b      	ldr	r0, [pc, #44]	; (8006038 <prvInitialiseTaskLists+0x74>)
 800600a:	f7fe fa97 	bl	800453c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800600e:	4b0b      	ldr	r3, [pc, #44]	; (800603c <prvInitialiseTaskLists+0x78>)
 8006010:	4a05      	ldr	r2, [pc, #20]	; (8006028 <prvInitialiseTaskLists+0x64>)
 8006012:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <prvInitialiseTaskLists+0x7c>)
 8006016:	4a05      	ldr	r2, [pc, #20]	; (800602c <prvInitialiseTaskLists+0x68>)
 8006018:	601a      	str	r2, [r3, #0]
}
 800601a:	bf00      	nop
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000384 	.word	0x20000384
 8006028:	20000410 	.word	0x20000410
 800602c:	20000424 	.word	0x20000424
 8006030:	20000440 	.word	0x20000440
 8006034:	20000454 	.word	0x20000454
 8006038:	2000046c 	.word	0x2000046c
 800603c:	20000438 	.word	0x20000438
 8006040:	2000043c 	.word	0x2000043c

08006044 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800604a:	e019      	b.n	8006080 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800604c:	f000 fbca 	bl	80067e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006050:	4b10      	ldr	r3, [pc, #64]	; (8006094 <prvCheckTasksWaitingTermination+0x50>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3304      	adds	r3, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe faf7 	bl	8004650 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006062:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <prvCheckTasksWaitingTermination+0x54>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3b01      	subs	r3, #1
 8006068:	4a0b      	ldr	r2, [pc, #44]	; (8006098 <prvCheckTasksWaitingTermination+0x54>)
 800606a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800606c:	4b0b      	ldr	r3, [pc, #44]	; (800609c <prvCheckTasksWaitingTermination+0x58>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3b01      	subs	r3, #1
 8006072:	4a0a      	ldr	r2, [pc, #40]	; (800609c <prvCheckTasksWaitingTermination+0x58>)
 8006074:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006076:	f000 fbe5 	bl	8006844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f810 	bl	80060a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006080:	4b06      	ldr	r3, [pc, #24]	; (800609c <prvCheckTasksWaitingTermination+0x58>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e1      	bne.n	800604c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006088:	bf00      	nop
 800608a:	bf00      	nop
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000454 	.word	0x20000454
 8006098:	20000480 	.word	0x20000480
 800609c:	20000468 	.word	0x20000468

080060a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	334c      	adds	r3, #76	; 0x4c
 80060ac:	4618      	mov	r0, r3
 80060ae:	f00b f945 	bl	801133c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d108      	bne.n	80060ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fd7d 	bl	8006bc0 <vPortFree>
				vPortFree( pxTCB );
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fd7a 	bl	8006bc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060cc:	e018      	b.n	8006100 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d103      	bne.n	80060e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fd71 	bl	8006bc0 <vPortFree>
	}
 80060de:	e00f      	b.n	8006100 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d00a      	beq.n	8006100 <prvDeleteTCB+0x60>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	60fb      	str	r3, [r7, #12]
}
 80060fc:	bf00      	nop
 80060fe:	e7fe      	b.n	80060fe <prvDeleteTCB+0x5e>
	}
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800610e:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <prvResetNextTaskUnblockTime+0x38>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d104      	bne.n	8006122 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006118:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <prvResetNextTaskUnblockTime+0x3c>)
 800611a:	f04f 32ff 	mov.w	r2, #4294967295
 800611e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006120:	e008      	b.n	8006134 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006122:	4b07      	ldr	r3, [pc, #28]	; (8006140 <prvResetNextTaskUnblockTime+0x38>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4a04      	ldr	r2, [pc, #16]	; (8006144 <prvResetNextTaskUnblockTime+0x3c>)
 8006132:	6013      	str	r3, [r2, #0]
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	20000438 	.word	0x20000438
 8006144:	200004a0 	.word	0x200004a0

08006148 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800614e:	4b0b      	ldr	r3, [pc, #44]	; (800617c <xTaskGetSchedulerState+0x34>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d102      	bne.n	800615c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006156:	2301      	movs	r3, #1
 8006158:	607b      	str	r3, [r7, #4]
 800615a:	e008      	b.n	800616e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800615c:	4b08      	ldr	r3, [pc, #32]	; (8006180 <xTaskGetSchedulerState+0x38>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d102      	bne.n	800616a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006164:	2302      	movs	r3, #2
 8006166:	607b      	str	r3, [r7, #4]
 8006168:	e001      	b.n	800616e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800616a:	2300      	movs	r3, #0
 800616c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800616e:	687b      	ldr	r3, [r7, #4]
	}
 8006170:	4618      	mov	r0, r3
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	2000048c 	.word	0x2000048c
 8006180:	200004a8 	.word	0x200004a8

08006184 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d05e      	beq.n	8006258 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619e:	4b31      	ldr	r3, [pc, #196]	; (8006264 <xTaskPriorityInherit+0xe0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d24e      	bcs.n	8006246 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	db06      	blt.n	80061be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061b0:	4b2c      	ldr	r3, [pc, #176]	; (8006264 <xTaskPriorityInherit+0xe0>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	f1c3 0207 	rsb	r2, r3, #7
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	6959      	ldr	r1, [r3, #20]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c6:	4613      	mov	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4a26      	ldr	r2, [pc, #152]	; (8006268 <xTaskPriorityInherit+0xe4>)
 80061d0:	4413      	add	r3, r2
 80061d2:	4299      	cmp	r1, r3
 80061d4:	d12f      	bne.n	8006236 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	3304      	adds	r3, #4
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe fa38 	bl	8004650 <uxListRemove>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	2201      	movs	r2, #1
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	43da      	mvns	r2, r3
 80061f2:	4b1e      	ldr	r3, [pc, #120]	; (800626c <xTaskPriorityInherit+0xe8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4013      	ands	r3, r2
 80061f8:	4a1c      	ldr	r2, [pc, #112]	; (800626c <xTaskPriorityInherit+0xe8>)
 80061fa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80061fc:	4b19      	ldr	r3, [pc, #100]	; (8006264 <xTaskPriorityInherit+0xe0>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	2201      	movs	r2, #1
 800620c:	409a      	lsls	r2, r3
 800620e:	4b17      	ldr	r3, [pc, #92]	; (800626c <xTaskPriorityInherit+0xe8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4313      	orrs	r3, r2
 8006214:	4a15      	ldr	r2, [pc, #84]	; (800626c <xTaskPriorityInherit+0xe8>)
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4a10      	ldr	r2, [pc, #64]	; (8006268 <xTaskPriorityInherit+0xe4>)
 8006226:	441a      	add	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f7fe f9b1 	bl	8004596 <vListInsertEnd>
 8006234:	e004      	b.n	8006240 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006236:	4b0b      	ldr	r3, [pc, #44]	; (8006264 <xTaskPriorityInherit+0xe0>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006240:	2301      	movs	r3, #1
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	e008      	b.n	8006258 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800624a:	4b06      	ldr	r3, [pc, #24]	; (8006264 <xTaskPriorityInherit+0xe0>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	429a      	cmp	r2, r3
 8006252:	d201      	bcs.n	8006258 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006254:	2301      	movs	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006258:	68fb      	ldr	r3, [r7, #12]
	}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20000380 	.word	0x20000380
 8006268:	20000384 	.word	0x20000384
 800626c:	20000488 	.word	0x20000488

08006270 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d06e      	beq.n	8006364 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006286:	4b3a      	ldr	r3, [pc, #232]	; (8006370 <xTaskPriorityDisinherit+0x100>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	429a      	cmp	r2, r3
 800628e:	d00a      	beq.n	80062a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	60fb      	str	r3, [r7, #12]
}
 80062a2:	bf00      	nop
 80062a4:	e7fe      	b.n	80062a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	60bb      	str	r3, [r7, #8]
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062c8:	1e5a      	subs	r2, r3, #1
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d044      	beq.n	8006364 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d140      	bne.n	8006364 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	3304      	adds	r3, #4
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe f9b2 	bl	8004650 <uxListRemove>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d115      	bne.n	800631e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f6:	491f      	ldr	r1, [pc, #124]	; (8006374 <xTaskPriorityDisinherit+0x104>)
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <xTaskPriorityDisinherit+0xae>
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	2201      	movs	r2, #1
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	43da      	mvns	r2, r3
 8006314:	4b18      	ldr	r3, [pc, #96]	; (8006378 <xTaskPriorityDisinherit+0x108>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4013      	ands	r3, r2
 800631a:	4a17      	ldr	r2, [pc, #92]	; (8006378 <xTaskPriorityDisinherit+0x108>)
 800631c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632a:	f1c3 0207 	rsb	r2, r3, #7
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	2201      	movs	r2, #1
 8006338:	409a      	lsls	r2, r3
 800633a:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <xTaskPriorityDisinherit+0x108>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4313      	orrs	r3, r2
 8006340:	4a0d      	ldr	r2, [pc, #52]	; (8006378 <xTaskPriorityDisinherit+0x108>)
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4a08      	ldr	r2, [pc, #32]	; (8006374 <xTaskPriorityDisinherit+0x104>)
 8006352:	441a      	add	r2, r3
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	3304      	adds	r3, #4
 8006358:	4619      	mov	r1, r3
 800635a:	4610      	mov	r0, r2
 800635c:	f7fe f91b 	bl	8004596 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006360:	2301      	movs	r3, #1
 8006362:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006364:	697b      	ldr	r3, [r7, #20]
	}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000380 	.word	0x20000380
 8006374:	20000384 	.word	0x20000384
 8006378:	20000488 	.word	0x20000488

0800637c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800638a:	2301      	movs	r3, #1
 800638c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d077      	beq.n	8006484 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10a      	bne.n	80063b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	60fb      	str	r3, [r7, #12]
}
 80063ae:	bf00      	nop
 80063b0:	e7fe      	b.n	80063b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d902      	bls.n	80063c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	e002      	b.n	80063c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	69fa      	ldr	r2, [r7, #28]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d058      	beq.n	8006484 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d153      	bne.n	8006484 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80063dc:	4b2b      	ldr	r3, [pc, #172]	; (800648c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d10a      	bne.n	80063fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60bb      	str	r3, [r7, #8]
}
 80063f8:	bf00      	nop
 80063fa:	e7fe      	b.n	80063fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	db04      	blt.n	800641a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	f1c3 0207 	rsb	r2, r3, #7
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	6959      	ldr	r1, [r3, #20]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4a19      	ldr	r2, [pc, #100]	; (8006490 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800642a:	4413      	add	r3, r2
 800642c:	4299      	cmp	r1, r3
 800642e:	d129      	bne.n	8006484 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	3304      	adds	r3, #4
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe f90b 	bl	8004650 <uxListRemove>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10a      	bne.n	8006456 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	2201      	movs	r2, #1
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	43da      	mvns	r2, r3
 800644c:	4b11      	ldr	r3, [pc, #68]	; (8006494 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4013      	ands	r3, r2
 8006452:	4a10      	ldr	r2, [pc, #64]	; (8006494 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006454:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	2201      	movs	r2, #1
 800645c:	409a      	lsls	r2, r3
 800645e:	4b0d      	ldr	r3, [pc, #52]	; (8006494 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4313      	orrs	r3, r2
 8006464:	4a0b      	ldr	r2, [pc, #44]	; (8006494 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4a06      	ldr	r2, [pc, #24]	; (8006490 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006476:	441a      	add	r2, r3
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	3304      	adds	r3, #4
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	f7fe f889 	bl	8004596 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006484:	bf00      	nop
 8006486:	3720      	adds	r7, #32
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	20000380 	.word	0x20000380
 8006490:	20000384 	.word	0x20000384
 8006494:	20000488 	.word	0x20000488

08006498 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800649c:	4b07      	ldr	r3, [pc, #28]	; (80064bc <pvTaskIncrementMutexHeldCount+0x24>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d004      	beq.n	80064ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <pvTaskIncrementMutexHeldCount+0x24>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064aa:	3201      	adds	r2, #1
 80064ac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80064ae:	4b03      	ldr	r3, [pc, #12]	; (80064bc <pvTaskIncrementMutexHeldCount+0x24>)
 80064b0:	681b      	ldr	r3, [r3, #0]
	}
 80064b2:	4618      	mov	r0, r3
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	20000380 	.word	0x20000380

080064c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064ca:	4b29      	ldr	r3, [pc, #164]	; (8006570 <prvAddCurrentTaskToDelayedList+0xb0>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064d0:	4b28      	ldr	r3, [pc, #160]	; (8006574 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe f8ba 	bl	8004650 <uxListRemove>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10b      	bne.n	80064fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064e2:	4b24      	ldr	r3, [pc, #144]	; (8006574 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	2201      	movs	r2, #1
 80064ea:	fa02 f303 	lsl.w	r3, r2, r3
 80064ee:	43da      	mvns	r2, r3
 80064f0:	4b21      	ldr	r3, [pc, #132]	; (8006578 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4013      	ands	r3, r2
 80064f6:	4a20      	ldr	r2, [pc, #128]	; (8006578 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d10a      	bne.n	8006518 <prvAddCurrentTaskToDelayedList+0x58>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006508:	4b1a      	ldr	r3, [pc, #104]	; (8006574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	481a      	ldr	r0, [pc, #104]	; (800657c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006512:	f7fe f840 	bl	8004596 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006516:	e026      	b.n	8006566 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4413      	add	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006520:	4b14      	ldr	r3, [pc, #80]	; (8006574 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	429a      	cmp	r2, r3
 800652e:	d209      	bcs.n	8006544 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006530:	4b13      	ldr	r3, [pc, #76]	; (8006580 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3304      	adds	r3, #4
 800653a:	4619      	mov	r1, r3
 800653c:	4610      	mov	r0, r2
 800653e:	f7fe f84e 	bl	80045de <vListInsert>
}
 8006542:	e010      	b.n	8006566 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006544:	4b0f      	ldr	r3, [pc, #60]	; (8006584 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3304      	adds	r3, #4
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f7fe f844 	bl	80045de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006556:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	429a      	cmp	r2, r3
 800655e:	d202      	bcs.n	8006566 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006560:	4a09      	ldr	r2, [pc, #36]	; (8006588 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	6013      	str	r3, [r2, #0]
}
 8006566:	bf00      	nop
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000484 	.word	0x20000484
 8006574:	20000380 	.word	0x20000380
 8006578:	20000488 	.word	0x20000488
 800657c:	2000046c 	.word	0x2000046c
 8006580:	2000043c 	.word	0x2000043c
 8006584:	20000438 	.word	0x20000438
 8006588:	200004a0 	.word	0x200004a0

0800658c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3b04      	subs	r3, #4
 800659c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3b04      	subs	r3, #4
 80065aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f023 0201 	bic.w	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3b04      	subs	r3, #4
 80065ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065bc:	4a0c      	ldr	r2, [pc, #48]	; (80065f0 <pxPortInitialiseStack+0x64>)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3b14      	subs	r3, #20
 80065c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3b04      	subs	r3, #4
 80065d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f06f 0202 	mvn.w	r2, #2
 80065da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3b20      	subs	r3, #32
 80065e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065e2:	68fb      	ldr	r3, [r7, #12]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	080065f5 	.word	0x080065f5

080065f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065fe:	4b12      	ldr	r3, [pc, #72]	; (8006648 <prvTaskExitError+0x54>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006606:	d00a      	beq.n	800661e <prvTaskExitError+0x2a>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	60fb      	str	r3, [r7, #12]
}
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <prvTaskExitError+0x28>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	60bb      	str	r3, [r7, #8]
}
 8006630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006632:	bf00      	nop
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0fc      	beq.n	8006634 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	2000000c 	.word	0x2000000c
 800664c:	00000000 	.word	0x00000000

08006650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006650:	4b07      	ldr	r3, [pc, #28]	; (8006670 <pxCurrentTCBConst2>)
 8006652:	6819      	ldr	r1, [r3, #0]
 8006654:	6808      	ldr	r0, [r1, #0]
 8006656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665a:	f380 8809 	msr	PSP, r0
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f04f 0000 	mov.w	r0, #0
 8006666:	f380 8811 	msr	BASEPRI, r0
 800666a:	4770      	bx	lr
 800666c:	f3af 8000 	nop.w

08006670 <pxCurrentTCBConst2>:
 8006670:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop

08006678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006678:	4808      	ldr	r0, [pc, #32]	; (800669c <prvPortStartFirstTask+0x24>)
 800667a:	6800      	ldr	r0, [r0, #0]
 800667c:	6800      	ldr	r0, [r0, #0]
 800667e:	f380 8808 	msr	MSP, r0
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f380 8814 	msr	CONTROL, r0
 800668a:	b662      	cpsie	i
 800668c:	b661      	cpsie	f
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	df00      	svc	0
 8006698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800669a:	bf00      	nop
 800669c:	e000ed08 	.word	0xe000ed08

080066a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066a6:	4b46      	ldr	r3, [pc, #280]	; (80067c0 <xPortStartScheduler+0x120>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a46      	ldr	r2, [pc, #280]	; (80067c4 <xPortStartScheduler+0x124>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d10a      	bne.n	80066c6 <xPortStartScheduler+0x26>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	613b      	str	r3, [r7, #16]
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066c6:	4b3e      	ldr	r3, [pc, #248]	; (80067c0 <xPortStartScheduler+0x120>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a3f      	ldr	r2, [pc, #252]	; (80067c8 <xPortStartScheduler+0x128>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10a      	bne.n	80066e6 <xPortStartScheduler+0x46>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	60fb      	str	r3, [r7, #12]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066e6:	4b39      	ldr	r3, [pc, #228]	; (80067cc <xPortStartScheduler+0x12c>)
 80066e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	22ff      	movs	r2, #255	; 0xff
 80066f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006708:	b2da      	uxtb	r2, r3
 800670a:	4b31      	ldr	r3, [pc, #196]	; (80067d0 <xPortStartScheduler+0x130>)
 800670c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800670e:	4b31      	ldr	r3, [pc, #196]	; (80067d4 <xPortStartScheduler+0x134>)
 8006710:	2207      	movs	r2, #7
 8006712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006714:	e009      	b.n	800672a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006716:	4b2f      	ldr	r3, [pc, #188]	; (80067d4 <xPortStartScheduler+0x134>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3b01      	subs	r3, #1
 800671c:	4a2d      	ldr	r2, [pc, #180]	; (80067d4 <xPortStartScheduler+0x134>)
 800671e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	b2db      	uxtb	r3, r3
 8006728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006732:	2b80      	cmp	r3, #128	; 0x80
 8006734:	d0ef      	beq.n	8006716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006736:	4b27      	ldr	r3, [pc, #156]	; (80067d4 <xPortStartScheduler+0x134>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1c3 0307 	rsb	r3, r3, #7
 800673e:	2b04      	cmp	r3, #4
 8006740:	d00a      	beq.n	8006758 <xPortStartScheduler+0xb8>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	60bb      	str	r3, [r7, #8]
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006758:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <xPortStartScheduler+0x134>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	4a1d      	ldr	r2, [pc, #116]	; (80067d4 <xPortStartScheduler+0x134>)
 8006760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006762:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <xPortStartScheduler+0x134>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800676a:	4a1a      	ldr	r2, [pc, #104]	; (80067d4 <xPortStartScheduler+0x134>)
 800676c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	b2da      	uxtb	r2, r3
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006776:	4b18      	ldr	r3, [pc, #96]	; (80067d8 <xPortStartScheduler+0x138>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a17      	ldr	r2, [pc, #92]	; (80067d8 <xPortStartScheduler+0x138>)
 800677c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <xPortStartScheduler+0x138>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a14      	ldr	r2, [pc, #80]	; (80067d8 <xPortStartScheduler+0x138>)
 8006788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800678c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800678e:	f000 f8dd 	bl	800694c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006792:	4b12      	ldr	r3, [pc, #72]	; (80067dc <xPortStartScheduler+0x13c>)
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006798:	f000 f8fc 	bl	8006994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800679c:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <xPortStartScheduler+0x140>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a0f      	ldr	r2, [pc, #60]	; (80067e0 <xPortStartScheduler+0x140>)
 80067a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067a8:	f7ff ff66 	bl	8006678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067ac:	f7ff fa86 	bl	8005cbc <vTaskSwitchContext>
	prvTaskExitError();
 80067b0:	f7ff ff20 	bl	80065f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	e000ed00 	.word	0xe000ed00
 80067c4:	410fc271 	.word	0x410fc271
 80067c8:	410fc270 	.word	0x410fc270
 80067cc:	e000e400 	.word	0xe000e400
 80067d0:	200004ac 	.word	0x200004ac
 80067d4:	200004b0 	.word	0x200004b0
 80067d8:	e000ed20 	.word	0xe000ed20
 80067dc:	2000000c 	.word	0x2000000c
 80067e0:	e000ef34 	.word	0xe000ef34

080067e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	607b      	str	r3, [r7, #4]
}
 80067fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067fe:	4b0f      	ldr	r3, [pc, #60]	; (800683c <vPortEnterCritical+0x58>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	4a0d      	ldr	r2, [pc, #52]	; (800683c <vPortEnterCritical+0x58>)
 8006806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006808:	4b0c      	ldr	r3, [pc, #48]	; (800683c <vPortEnterCritical+0x58>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d10f      	bne.n	8006830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006810:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <vPortEnterCritical+0x5c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <vPortEnterCritical+0x4c>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	603b      	str	r3, [r7, #0]
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <vPortEnterCritical+0x4a>
	}
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	2000000c 	.word	0x2000000c
 8006840:	e000ed04 	.word	0xe000ed04

08006844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800684a:	4b12      	ldr	r3, [pc, #72]	; (8006894 <vPortExitCritical+0x50>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <vPortExitCritical+0x24>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	607b      	str	r3, [r7, #4]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006868:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <vPortExitCritical+0x50>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3b01      	subs	r3, #1
 800686e:	4a09      	ldr	r2, [pc, #36]	; (8006894 <vPortExitCritical+0x50>)
 8006870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006872:	4b08      	ldr	r3, [pc, #32]	; (8006894 <vPortExitCritical+0x50>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d105      	bne.n	8006886 <vPortExitCritical+0x42>
 800687a:	2300      	movs	r3, #0
 800687c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	f383 8811 	msr	BASEPRI, r3
}
 8006884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	2000000c 	.word	0x2000000c
	...

080068a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068a0:	f3ef 8009 	mrs	r0, PSP
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	4b15      	ldr	r3, [pc, #84]	; (8006900 <pxCurrentTCBConst>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	f01e 0f10 	tst.w	lr, #16
 80068b0:	bf08      	it	eq
 80068b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ba:	6010      	str	r0, [r2, #0]
 80068bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068c4:	f380 8811 	msr	BASEPRI, r0
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f7ff f9f4 	bl	8005cbc <vTaskSwitchContext>
 80068d4:	f04f 0000 	mov.w	r0, #0
 80068d8:	f380 8811 	msr	BASEPRI, r0
 80068dc:	bc09      	pop	{r0, r3}
 80068de:	6819      	ldr	r1, [r3, #0]
 80068e0:	6808      	ldr	r0, [r1, #0]
 80068e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e6:	f01e 0f10 	tst.w	lr, #16
 80068ea:	bf08      	it	eq
 80068ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068f0:	f380 8809 	msr	PSP, r0
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	f3af 8000 	nop.w

08006900 <pxCurrentTCBConst>:
 8006900:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop

08006908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	607b      	str	r3, [r7, #4]
}
 8006920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006922:	f7ff f913 	bl	8005b4c <xTaskIncrementTick>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800692c:	4b06      	ldr	r3, [pc, #24]	; (8006948 <SysTick_Handler+0x40>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	2300      	movs	r3, #0
 8006936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	f383 8811 	msr	BASEPRI, r3
}
 800693e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006950:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <vPortSetupTimerInterrupt+0x34>)
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006956:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <vPortSetupTimerInterrupt+0x38>)
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800695c:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <vPortSetupTimerInterrupt+0x3c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0a      	ldr	r2, [pc, #40]	; (800698c <vPortSetupTimerInterrupt+0x40>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	099b      	lsrs	r3, r3, #6
 8006968:	4a09      	ldr	r2, [pc, #36]	; (8006990 <vPortSetupTimerInterrupt+0x44>)
 800696a:	3b01      	subs	r3, #1
 800696c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800696e:	4b04      	ldr	r3, [pc, #16]	; (8006980 <vPortSetupTimerInterrupt+0x34>)
 8006970:	2207      	movs	r2, #7
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	e000e010 	.word	0xe000e010
 8006984:	e000e018 	.word	0xe000e018
 8006988:	20000000 	.word	0x20000000
 800698c:	10624dd3 	.word	0x10624dd3
 8006990:	e000e014 	.word	0xe000e014

08006994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069a4 <vPortEnableVFP+0x10>
 8006998:	6801      	ldr	r1, [r0, #0]
 800699a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800699e:	6001      	str	r1, [r0, #0]
 80069a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069a2:	bf00      	nop
 80069a4:	e000ed88 	.word	0xe000ed88

080069a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069ae:	f3ef 8305 	mrs	r3, IPSR
 80069b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b0f      	cmp	r3, #15
 80069b8:	d914      	bls.n	80069e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069ba:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <vPortValidateInterruptPriority+0x70>)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069c4:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <vPortValidateInterruptPriority+0x74>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	7afa      	ldrb	r2, [r7, #11]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d20a      	bcs.n	80069e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	607b      	str	r3, [r7, #4]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069e4:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <vPortValidateInterruptPriority+0x78>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069ec:	4b0d      	ldr	r3, [pc, #52]	; (8006a24 <vPortValidateInterruptPriority+0x7c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d90a      	bls.n	8006a0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	603b      	str	r3, [r7, #0]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <vPortValidateInterruptPriority+0x60>
	}
 8006a0a:	bf00      	nop
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	e000e3f0 	.word	0xe000e3f0
 8006a1c:	200004ac 	.word	0x200004ac
 8006a20:	e000ed0c 	.word	0xe000ed0c
 8006a24:	200004b0 	.word	0x200004b0

08006a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08a      	sub	sp, #40	; 0x28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a30:	2300      	movs	r3, #0
 8006a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a34:	f7fe ffbe 	bl	80059b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a38:	4b5b      	ldr	r3, [pc, #364]	; (8006ba8 <pvPortMalloc+0x180>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a40:	f000 f920 	bl	8006c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a44:	4b59      	ldr	r3, [pc, #356]	; (8006bac <pvPortMalloc+0x184>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f040 8093 	bne.w	8006b78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01d      	beq.n	8006a94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a58:	2208      	movs	r2, #8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d014      	beq.n	8006a94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f023 0307 	bic.w	r3, r3, #7
 8006a70:	3308      	adds	r3, #8
 8006a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <pvPortMalloc+0x6c>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	617b      	str	r3, [r7, #20]
}
 8006a90:	bf00      	nop
 8006a92:	e7fe      	b.n	8006a92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d06e      	beq.n	8006b78 <pvPortMalloc+0x150>
 8006a9a:	4b45      	ldr	r3, [pc, #276]	; (8006bb0 <pvPortMalloc+0x188>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d869      	bhi.n	8006b78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006aa4:	4b43      	ldr	r3, [pc, #268]	; (8006bb4 <pvPortMalloc+0x18c>)
 8006aa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006aa8:	4b42      	ldr	r3, [pc, #264]	; (8006bb4 <pvPortMalloc+0x18c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aae:	e004      	b.n	8006aba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d903      	bls.n	8006acc <pvPortMalloc+0xa4>
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f1      	bne.n	8006ab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006acc:	4b36      	ldr	r3, [pc, #216]	; (8006ba8 <pvPortMalloc+0x180>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d050      	beq.n	8006b78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2208      	movs	r2, #8
 8006adc:	4413      	add	r3, r2
 8006ade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	2308      	movs	r3, #8
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d91f      	bls.n	8006b38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4413      	add	r3, r2
 8006afe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <pvPortMalloc+0xf8>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	613b      	str	r3, [r7, #16]
}
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	1ad2      	subs	r2, r2, r3
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b32:	69b8      	ldr	r0, [r7, #24]
 8006b34:	f000 f908 	bl	8006d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b38:	4b1d      	ldr	r3, [pc, #116]	; (8006bb0 <pvPortMalloc+0x188>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	4a1b      	ldr	r2, [pc, #108]	; (8006bb0 <pvPortMalloc+0x188>)
 8006b44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b46:	4b1a      	ldr	r3, [pc, #104]	; (8006bb0 <pvPortMalloc+0x188>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b1b      	ldr	r3, [pc, #108]	; (8006bb8 <pvPortMalloc+0x190>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d203      	bcs.n	8006b5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b52:	4b17      	ldr	r3, [pc, #92]	; (8006bb0 <pvPortMalloc+0x188>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a18      	ldr	r2, [pc, #96]	; (8006bb8 <pvPortMalloc+0x190>)
 8006b58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	4b13      	ldr	r3, [pc, #76]	; (8006bac <pvPortMalloc+0x184>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	431a      	orrs	r2, r3
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b6e:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <pvPortMalloc+0x194>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	4a11      	ldr	r2, [pc, #68]	; (8006bbc <pvPortMalloc+0x194>)
 8006b76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b78:	f7fe ff2a 	bl	80059d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <pvPortMalloc+0x174>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	60fb      	str	r3, [r7, #12]
}
 8006b98:	bf00      	nop
 8006b9a:	e7fe      	b.n	8006b9a <pvPortMalloc+0x172>
	return pvReturn;
 8006b9c:	69fb      	ldr	r3, [r7, #28]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3728      	adds	r7, #40	; 0x28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	200040bc 	.word	0x200040bc
 8006bac:	200040d0 	.word	0x200040d0
 8006bb0:	200040c0 	.word	0x200040c0
 8006bb4:	200040b4 	.word	0x200040b4
 8006bb8:	200040c4 	.word	0x200040c4
 8006bbc:	200040c8 	.word	0x200040c8

08006bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d04d      	beq.n	8006c6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	425b      	negs	r3, r3
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4413      	add	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	4b24      	ldr	r3, [pc, #144]	; (8006c78 <vPortFree+0xb8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4013      	ands	r3, r2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <vPortFree+0x44>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	60fb      	str	r3, [r7, #12]
}
 8006c00:	bf00      	nop
 8006c02:	e7fe      	b.n	8006c02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00a      	beq.n	8006c22 <vPortFree+0x62>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	60bb      	str	r3, [r7, #8]
}
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	4b14      	ldr	r3, [pc, #80]	; (8006c78 <vPortFree+0xb8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01e      	beq.n	8006c6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d11a      	bne.n	8006c6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	4b0e      	ldr	r3, [pc, #56]	; (8006c78 <vPortFree+0xb8>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	43db      	mvns	r3, r3
 8006c42:	401a      	ands	r2, r3
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c48:	f7fe feb4 	bl	80059b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <vPortFree+0xbc>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4413      	add	r3, r2
 8006c56:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <vPortFree+0xbc>)
 8006c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c5a:	6938      	ldr	r0, [r7, #16]
 8006c5c:	f000 f874 	bl	8006d48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <vPortFree+0xc0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3301      	adds	r3, #1
 8006c66:	4a06      	ldr	r2, [pc, #24]	; (8006c80 <vPortFree+0xc0>)
 8006c68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c6a:	f7fe feb1 	bl	80059d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c6e:	bf00      	nop
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	200040d0 	.word	0x200040d0
 8006c7c:	200040c0 	.word	0x200040c0
 8006c80:	200040cc 	.word	0x200040cc

08006c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c90:	4b27      	ldr	r3, [pc, #156]	; (8006d30 <prvHeapInit+0xac>)
 8006c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00c      	beq.n	8006cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3307      	adds	r3, #7
 8006ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0307 	bic.w	r3, r3, #7
 8006caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	4a1f      	ldr	r2, [pc, #124]	; (8006d30 <prvHeapInit+0xac>)
 8006cb4:	4413      	add	r3, r2
 8006cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cbc:	4a1d      	ldr	r2, [pc, #116]	; (8006d34 <prvHeapInit+0xb0>)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cc2:	4b1c      	ldr	r3, [pc, #112]	; (8006d34 <prvHeapInit+0xb0>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4413      	add	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0307 	bic.w	r3, r3, #7
 8006cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4a15      	ldr	r2, [pc, #84]	; (8006d38 <prvHeapInit+0xb4>)
 8006ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <prvHeapInit+0xb4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2200      	movs	r2, #0
 8006cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cee:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <prvHeapInit+0xb4>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d04:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <prvHeapInit+0xb4>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <prvHeapInit+0xb8>)
 8006d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	4a09      	ldr	r2, [pc, #36]	; (8006d40 <prvHeapInit+0xbc>)
 8006d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d1c:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <prvHeapInit+0xc0>)
 8006d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d22:	601a      	str	r2, [r3, #0]
}
 8006d24:	bf00      	nop
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	200004b4 	.word	0x200004b4
 8006d34:	200040b4 	.word	0x200040b4
 8006d38:	200040bc 	.word	0x200040bc
 8006d3c:	200040c4 	.word	0x200040c4
 8006d40:	200040c0 	.word	0x200040c0
 8006d44:	200040d0 	.word	0x200040d0

08006d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d50:	4b28      	ldr	r3, [pc, #160]	; (8006df4 <prvInsertBlockIntoFreeList+0xac>)
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e002      	b.n	8006d5c <prvInsertBlockIntoFreeList+0x14>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d8f7      	bhi.n	8006d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4413      	add	r3, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d108      	bne.n	8006d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	441a      	add	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	441a      	add	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d118      	bne.n	8006dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4b15      	ldr	r3, [pc, #84]	; (8006df8 <prvInsertBlockIntoFreeList+0xb0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d00d      	beq.n	8006dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	441a      	add	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	e008      	b.n	8006dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <prvInsertBlockIntoFreeList+0xb0>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e003      	b.n	8006dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d002      	beq.n	8006de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006de6:	bf00      	nop
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	200040b4 	.word	0x200040b4
 8006df8:	200040bc 	.word	0x200040bc

08006dfc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8006e06:	f007 fa7b 	bl	800e300 <sys_timeouts_sleeptime>
 8006e0a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e12:	d10b      	bne.n	8006e2c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8006e14:	4813      	ldr	r0, [pc, #76]	; (8006e64 <tcpip_timeouts_mbox_fetch+0x68>)
 8006e16:	f009 ffea 	bl	8010dee <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f009 ff5c 	bl	8010cdc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8006e24:	480f      	ldr	r0, [pc, #60]	; (8006e64 <tcpip_timeouts_mbox_fetch+0x68>)
 8006e26:	f009 ffd3 	bl	8010dd0 <sys_mutex_lock>
    return;
 8006e2a:	e018      	b.n	8006e5e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d102      	bne.n	8006e38 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8006e32:	f007 fa2b 	bl	800e28c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8006e36:	e7e6      	b.n	8006e06 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8006e38:	480a      	ldr	r0, [pc, #40]	; (8006e64 <tcpip_timeouts_mbox_fetch+0x68>)
 8006e3a:	f009 ffd8 	bl	8010dee <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f009 ff4a 	bl	8010cdc <sys_arch_mbox_fetch>
 8006e48:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8006e4a:	4806      	ldr	r0, [pc, #24]	; (8006e64 <tcpip_timeouts_mbox_fetch+0x68>)
 8006e4c:	f009 ffc0 	bl	8010dd0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d102      	bne.n	8006e5e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8006e58:	f007 fa18 	bl	800e28c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8006e5c:	e7d3      	b.n	8006e06 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	200073f8 	.word	0x200073f8

08006e68 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8006e70:	4810      	ldr	r0, [pc, #64]	; (8006eb4 <tcpip_thread+0x4c>)
 8006e72:	f009 ffad 	bl	8010dd0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8006e76:	4b10      	ldr	r3, [pc, #64]	; (8006eb8 <tcpip_thread+0x50>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d005      	beq.n	8006e8a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8006e7e:	4b0e      	ldr	r3, [pc, #56]	; (8006eb8 <tcpip_thread+0x50>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a0e      	ldr	r2, [pc, #56]	; (8006ebc <tcpip_thread+0x54>)
 8006e84:	6812      	ldr	r2, [r2, #0]
 8006e86:	4610      	mov	r0, r2
 8006e88:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8006e8a:	f107 030c 	add.w	r3, r7, #12
 8006e8e:	4619      	mov	r1, r3
 8006e90:	480b      	ldr	r0, [pc, #44]	; (8006ec0 <tcpip_thread+0x58>)
 8006e92:	f7ff ffb3 	bl	8006dfc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d106      	bne.n	8006eaa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006e9c:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <tcpip_thread+0x5c>)
 8006e9e:	2291      	movs	r2, #145	; 0x91
 8006ea0:	4909      	ldr	r1, [pc, #36]	; (8006ec8 <tcpip_thread+0x60>)
 8006ea2:	480a      	ldr	r0, [pc, #40]	; (8006ecc <tcpip_thread+0x64>)
 8006ea4:	f00a f9e4 	bl	8011270 <iprintf>
      continue;
 8006ea8:	e003      	b.n	8006eb2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f80f 	bl	8006ed0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8006eb2:	e7ea      	b.n	8006e8a <tcpip_thread+0x22>
 8006eb4:	200073f8 	.word	0x200073f8
 8006eb8:	200040d4 	.word	0x200040d4
 8006ebc:	200040d8 	.word	0x200040d8
 8006ec0:	200040dc 	.word	0x200040dc
 8006ec4:	08012108 	.word	0x08012108
 8006ec8:	08012138 	.word	0x08012138
 8006ecc:	08012158 	.word	0x08012158

08006ed0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d026      	beq.n	8006f2e <tcpip_thread_handle_msg+0x5e>
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	dc2b      	bgt.n	8006f3c <tcpip_thread_handle_msg+0x6c>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <tcpip_thread_handle_msg+0x1e>
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d015      	beq.n	8006f18 <tcpip_thread_handle_msg+0x48>
 8006eec:	e026      	b.n	8006f3c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6850      	ldr	r0, [r2, #4]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	6892      	ldr	r2, [r2, #8]
 8006efa:	4611      	mov	r1, r2
 8006efc:	4798      	blx	r3
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f001 fcc5 	bl	8008898 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	2009      	movs	r0, #9
 8006f12:	f000 fe1d 	bl	8007b50 <memp_free>
      break;
 8006f16:	e018      	b.n	8006f4a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6892      	ldr	r2, [r2, #8]
 8006f20:	4610      	mov	r0, r2
 8006f22:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	2008      	movs	r0, #8
 8006f28:	f000 fe12 	bl	8007b50 <memp_free>
      break;
 8006f2c:	e00d      	b.n	8006f4a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6892      	ldr	r2, [r2, #8]
 8006f36:	4610      	mov	r0, r2
 8006f38:	4798      	blx	r3
      break;
 8006f3a:	e006      	b.n	8006f4a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006f3c:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <tcpip_thread_handle_msg+0x84>)
 8006f3e:	22cf      	movs	r2, #207	; 0xcf
 8006f40:	4905      	ldr	r1, [pc, #20]	; (8006f58 <tcpip_thread_handle_msg+0x88>)
 8006f42:	4806      	ldr	r0, [pc, #24]	; (8006f5c <tcpip_thread_handle_msg+0x8c>)
 8006f44:	f00a f994 	bl	8011270 <iprintf>
      break;
 8006f48:	bf00      	nop
  }
}
 8006f4a:	bf00      	nop
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	08012108 	.word	0x08012108
 8006f58:	08012138 	.word	0x08012138
 8006f5c:	08012158 	.word	0x08012158

08006f60 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006f6c:	481a      	ldr	r0, [pc, #104]	; (8006fd8 <tcpip_inpkt+0x78>)
 8006f6e:	f009 fef4 	bl	8010d5a <sys_mbox_valid>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d105      	bne.n	8006f84 <tcpip_inpkt+0x24>
 8006f78:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <tcpip_inpkt+0x7c>)
 8006f7a:	22fc      	movs	r2, #252	; 0xfc
 8006f7c:	4918      	ldr	r1, [pc, #96]	; (8006fe0 <tcpip_inpkt+0x80>)
 8006f7e:	4819      	ldr	r0, [pc, #100]	; (8006fe4 <tcpip_inpkt+0x84>)
 8006f80:	f00a f976 	bl	8011270 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006f84:	2009      	movs	r0, #9
 8006f86:	f000 fd91 	bl	8007aac <memp_malloc>
 8006f8a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d102      	bne.n	8006f98 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8006f92:	f04f 33ff 	mov.w	r3, #4294967295
 8006f96:	e01a      	b.n	8006fce <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006fb0:	6979      	ldr	r1, [r7, #20]
 8006fb2:	4809      	ldr	r0, [pc, #36]	; (8006fd8 <tcpip_inpkt+0x78>)
 8006fb4:	f009 fe78 	bl	8010ca8 <sys_mbox_trypost>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d006      	beq.n	8006fcc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006fbe:	6979      	ldr	r1, [r7, #20]
 8006fc0:	2009      	movs	r0, #9
 8006fc2:	f000 fdc5 	bl	8007b50 <memp_free>
    return ERR_MEM;
 8006fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fca:	e000      	b.n	8006fce <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8006fcc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	200040dc 	.word	0x200040dc
 8006fdc:	08012108 	.word	0x08012108
 8006fe0:	08012180 	.word	0x08012180
 8006fe4:	08012158 	.word	0x08012158

08006fe8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006ff8:	f003 0318 	and.w	r3, r3, #24
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d006      	beq.n	800700e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007000:	4a08      	ldr	r2, [pc, #32]	; (8007024 <tcpip_input+0x3c>)
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff ffab 	bl	8006f60 <tcpip_inpkt>
 800700a:	4603      	mov	r3, r0
 800700c:	e005      	b.n	800701a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800700e:	4a06      	ldr	r2, [pc, #24]	; (8007028 <tcpip_input+0x40>)
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff ffa4 	bl	8006f60 <tcpip_inpkt>
 8007018:	4603      	mov	r3, r0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	08010ab9 	.word	0x08010ab9
 8007028:	0800f9cd 	.word	0x0800f9cd

0800702c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007036:	4819      	ldr	r0, [pc, #100]	; (800709c <tcpip_try_callback+0x70>)
 8007038:	f009 fe8f 	bl	8010d5a <sys_mbox_valid>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <tcpip_try_callback+0x24>
 8007042:	4b17      	ldr	r3, [pc, #92]	; (80070a0 <tcpip_try_callback+0x74>)
 8007044:	f240 125d 	movw	r2, #349	; 0x15d
 8007048:	4916      	ldr	r1, [pc, #88]	; (80070a4 <tcpip_try_callback+0x78>)
 800704a:	4817      	ldr	r0, [pc, #92]	; (80070a8 <tcpip_try_callback+0x7c>)
 800704c:	f00a f910 	bl	8011270 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007050:	2008      	movs	r0, #8
 8007052:	f000 fd2b 	bl	8007aac <memp_malloc>
 8007056:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d102      	bne.n	8007064 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800705e:	f04f 33ff 	mov.w	r3, #4294967295
 8007062:	e017      	b.n	8007094 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007076:	68f9      	ldr	r1, [r7, #12]
 8007078:	4808      	ldr	r0, [pc, #32]	; (800709c <tcpip_try_callback+0x70>)
 800707a:	f009 fe15 	bl	8010ca8 <sys_mbox_trypost>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d006      	beq.n	8007092 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8007084:	68f9      	ldr	r1, [r7, #12]
 8007086:	2008      	movs	r0, #8
 8007088:	f000 fd62 	bl	8007b50 <memp_free>
    return ERR_MEM;
 800708c:	f04f 33ff 	mov.w	r3, #4294967295
 8007090:	e000      	b.n	8007094 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	200040dc 	.word	0x200040dc
 80070a0:	08012108 	.word	0x08012108
 80070a4:	08012180 	.word	0x08012180
 80070a8:	08012158 	.word	0x08012158

080070ac <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80070b6:	f000 f871 	bl	800719c <lwip_init>

  tcpip_init_done = initfunc;
 80070ba:	4a17      	ldr	r2, [pc, #92]	; (8007118 <tcpip_init+0x6c>)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80070c0:	4a16      	ldr	r2, [pc, #88]	; (800711c <tcpip_init+0x70>)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80070c6:	2106      	movs	r1, #6
 80070c8:	4815      	ldr	r0, [pc, #84]	; (8007120 <tcpip_init+0x74>)
 80070ca:	f009 fdcb 	bl	8010c64 <sys_mbox_new>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d006      	beq.n	80070e2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80070d4:	4b13      	ldr	r3, [pc, #76]	; (8007124 <tcpip_init+0x78>)
 80070d6:	f240 2261 	movw	r2, #609	; 0x261
 80070da:	4913      	ldr	r1, [pc, #76]	; (8007128 <tcpip_init+0x7c>)
 80070dc:	4813      	ldr	r0, [pc, #76]	; (800712c <tcpip_init+0x80>)
 80070de:	f00a f8c7 	bl	8011270 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80070e2:	4813      	ldr	r0, [pc, #76]	; (8007130 <tcpip_init+0x84>)
 80070e4:	f009 fe58 	bl	8010d98 <sys_mutex_new>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d006      	beq.n	80070fc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80070ee:	4b0d      	ldr	r3, [pc, #52]	; (8007124 <tcpip_init+0x78>)
 80070f0:	f240 2265 	movw	r2, #613	; 0x265
 80070f4:	490f      	ldr	r1, [pc, #60]	; (8007134 <tcpip_init+0x88>)
 80070f6:	480d      	ldr	r0, [pc, #52]	; (800712c <tcpip_init+0x80>)
 80070f8:	f00a f8ba 	bl	8011270 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80070fc:	2300      	movs	r3, #0
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007104:	2200      	movs	r2, #0
 8007106:	490c      	ldr	r1, [pc, #48]	; (8007138 <tcpip_init+0x8c>)
 8007108:	480c      	ldr	r0, [pc, #48]	; (800713c <tcpip_init+0x90>)
 800710a:	f009 fe7d 	bl	8010e08 <sys_thread_new>
}
 800710e:	bf00      	nop
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	200040d4 	.word	0x200040d4
 800711c:	200040d8 	.word	0x200040d8
 8007120:	200040dc 	.word	0x200040dc
 8007124:	08012108 	.word	0x08012108
 8007128:	08012190 	.word	0x08012190
 800712c:	08012158 	.word	0x08012158
 8007130:	200073f8 	.word	0x200073f8
 8007134:	080121b4 	.word	0x080121b4
 8007138:	08006e69 	.word	0x08006e69
 800713c:	080121d8 	.word	0x080121d8

08007140 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800714a:	88fb      	ldrh	r3, [r7, #6]
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	b21a      	sxth	r2, r3
 8007150:	88fb      	ldrh	r3, [r7, #6]
 8007152:	0a1b      	lsrs	r3, r3, #8
 8007154:	b29b      	uxth	r3, r3
 8007156:	b21b      	sxth	r3, r3
 8007158:	4313      	orrs	r3, r2
 800715a:	b21b      	sxth	r3, r3
 800715c:	b29b      	uxth	r3, r3
}
 800715e:	4618      	mov	r0, r3
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	061a      	lsls	r2, r3, #24
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800717e:	431a      	orrs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	0a1b      	lsrs	r3, r3, #8
 8007184:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007188:	431a      	orrs	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	0e1b      	lsrs	r3, r3, #24
 800718e:	4313      	orrs	r3, r2
}
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80071a6:	f009 fde9 	bl	8010d7c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80071aa:	f000 f8d5 	bl	8007358 <mem_init>
  memp_init();
 80071ae:	f000 fc31 	bl	8007a14 <memp_init>
  pbuf_init();
  netif_init();
 80071b2:	f000 fcf7 	bl	8007ba4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80071b6:	f007 f8db 	bl	800e370 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80071ba:	f001 fe07 	bl	8008dcc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80071be:	f007 f81d 	bl	800e1fc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80071d6:	4b05      	ldr	r3, [pc, #20]	; (80071ec <ptr_to_mem+0x20>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	88fb      	ldrh	r3, [r7, #6]
 80071dc:	4413      	add	r3, r2
}
 80071de:	4618      	mov	r0, r3
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	200040e0 	.word	0x200040e0

080071f0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80071f8:	4b05      	ldr	r3, [pc, #20]	; (8007210 <mem_to_ptr+0x20>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	b29b      	uxth	r3, r3
}
 8007202:	4618      	mov	r0, r3
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	200040e0 	.word	0x200040e0

08007214 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007214:	b590      	push	{r4, r7, lr}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800721c:	4b45      	ldr	r3, [pc, #276]	; (8007334 <plug_holes+0x120>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	429a      	cmp	r2, r3
 8007224:	d206      	bcs.n	8007234 <plug_holes+0x20>
 8007226:	4b44      	ldr	r3, [pc, #272]	; (8007338 <plug_holes+0x124>)
 8007228:	f240 12df 	movw	r2, #479	; 0x1df
 800722c:	4943      	ldr	r1, [pc, #268]	; (800733c <plug_holes+0x128>)
 800722e:	4844      	ldr	r0, [pc, #272]	; (8007340 <plug_holes+0x12c>)
 8007230:	f00a f81e 	bl	8011270 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007234:	4b43      	ldr	r3, [pc, #268]	; (8007344 <plug_holes+0x130>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	429a      	cmp	r2, r3
 800723c:	d306      	bcc.n	800724c <plug_holes+0x38>
 800723e:	4b3e      	ldr	r3, [pc, #248]	; (8007338 <plug_holes+0x124>)
 8007240:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007244:	4940      	ldr	r1, [pc, #256]	; (8007348 <plug_holes+0x134>)
 8007246:	483e      	ldr	r0, [pc, #248]	; (8007340 <plug_holes+0x12c>)
 8007248:	f00a f812 	bl	8011270 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	791b      	ldrb	r3, [r3, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d006      	beq.n	8007262 <plug_holes+0x4e>
 8007254:	4b38      	ldr	r3, [pc, #224]	; (8007338 <plug_holes+0x124>)
 8007256:	f240 12e1 	movw	r2, #481	; 0x1e1
 800725a:	493c      	ldr	r1, [pc, #240]	; (800734c <plug_holes+0x138>)
 800725c:	4838      	ldr	r0, [pc, #224]	; (8007340 <plug_holes+0x12c>)
 800725e:	f00a f807 	bl	8011270 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800726a:	d906      	bls.n	800727a <plug_holes+0x66>
 800726c:	4b32      	ldr	r3, [pc, #200]	; (8007338 <plug_holes+0x124>)
 800726e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007272:	4937      	ldr	r1, [pc, #220]	; (8007350 <plug_holes+0x13c>)
 8007274:	4832      	ldr	r0, [pc, #200]	; (8007340 <plug_holes+0x12c>)
 8007276:	f009 fffb 	bl	8011270 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	4618      	mov	r0, r3
 8007280:	f7ff ffa4 	bl	80071cc <ptr_to_mem>
 8007284:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	429a      	cmp	r2, r3
 800728c:	d024      	beq.n	80072d8 <plug_holes+0xc4>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	791b      	ldrb	r3, [r3, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d120      	bne.n	80072d8 <plug_holes+0xc4>
 8007296:	4b2b      	ldr	r3, [pc, #172]	; (8007344 <plug_holes+0x130>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	429a      	cmp	r2, r3
 800729e:	d01b      	beq.n	80072d8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80072a0:	4b2c      	ldr	r3, [pc, #176]	; (8007354 <plug_holes+0x140>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d102      	bne.n	80072b0 <plug_holes+0x9c>
      lfree = mem;
 80072aa:	4a2a      	ldr	r2, [pc, #168]	; (8007354 <plug_holes+0x140>)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	881a      	ldrh	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80072c0:	d00a      	beq.n	80072d8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff ff80 	bl	80071cc <ptr_to_mem>
 80072cc:	4604      	mov	r4, r0
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff ff8e 	bl	80071f0 <mem_to_ptr>
 80072d4:	4603      	mov	r3, r0
 80072d6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	885b      	ldrh	r3, [r3, #2]
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff ff75 	bl	80071cc <ptr_to_mem>
 80072e2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d01f      	beq.n	800732c <plug_holes+0x118>
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	791b      	ldrb	r3, [r3, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d11b      	bne.n	800732c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80072f4:	4b17      	ldr	r3, [pc, #92]	; (8007354 <plug_holes+0x140>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d102      	bne.n	8007304 <plug_holes+0xf0>
      lfree = pmem;
 80072fe:	4a15      	ldr	r2, [pc, #84]	; (8007354 <plug_holes+0x140>)
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	881a      	ldrh	r2, [r3, #0]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007314:	d00a      	beq.n	800732c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff ff56 	bl	80071cc <ptr_to_mem>
 8007320:	4604      	mov	r4, r0
 8007322:	68b8      	ldr	r0, [r7, #8]
 8007324:	f7ff ff64 	bl	80071f0 <mem_to_ptr>
 8007328:	4603      	mov	r3, r0
 800732a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800732c:	bf00      	nop
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	bd90      	pop	{r4, r7, pc}
 8007334:	200040e0 	.word	0x200040e0
 8007338:	080121e8 	.word	0x080121e8
 800733c:	08012218 	.word	0x08012218
 8007340:	08012230 	.word	0x08012230
 8007344:	200040e4 	.word	0x200040e4
 8007348:	08012258 	.word	0x08012258
 800734c:	08012274 	.word	0x08012274
 8007350:	08012290 	.word	0x08012290
 8007354:	200040ec 	.word	0x200040ec

08007358 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800735e:	4b1f      	ldr	r3, [pc, #124]	; (80073dc <mem_init+0x84>)
 8007360:	3303      	adds	r3, #3
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	461a      	mov	r2, r3
 8007368:	4b1d      	ldr	r3, [pc, #116]	; (80073e0 <mem_init+0x88>)
 800736a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800736c:	4b1c      	ldr	r3, [pc, #112]	; (80073e0 <mem_init+0x88>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007378:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007386:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800738a:	f7ff ff1f 	bl	80071cc <ptr_to_mem>
 800738e:	4603      	mov	r3, r0
 8007390:	4a14      	ldr	r2, [pc, #80]	; (80073e4 <mem_init+0x8c>)
 8007392:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007394:	4b13      	ldr	r3, [pc, #76]	; (80073e4 <mem_init+0x8c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2201      	movs	r2, #1
 800739a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800739c:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <mem_init+0x8c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80073a4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <mem_init+0x8c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80073ae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80073b0:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <mem_init+0x88>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a0c      	ldr	r2, [pc, #48]	; (80073e8 <mem_init+0x90>)
 80073b6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80073b8:	480c      	ldr	r0, [pc, #48]	; (80073ec <mem_init+0x94>)
 80073ba:	f009 fced 	bl	8010d98 <sys_mutex_new>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d006      	beq.n	80073d2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80073c4:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <mem_init+0x98>)
 80073c6:	f240 221f 	movw	r2, #543	; 0x21f
 80073ca:	490a      	ldr	r1, [pc, #40]	; (80073f4 <mem_init+0x9c>)
 80073cc:	480a      	ldr	r0, [pc, #40]	; (80073f8 <mem_init+0xa0>)
 80073ce:	f009 ff4f 	bl	8011270 <iprintf>
  }
}
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	20007414 	.word	0x20007414
 80073e0:	200040e0 	.word	0x200040e0
 80073e4:	200040e4 	.word	0x200040e4
 80073e8:	200040ec 	.word	0x200040ec
 80073ec:	200040e8 	.word	0x200040e8
 80073f0:	080121e8 	.word	0x080121e8
 80073f4:	080122bc 	.word	0x080122bc
 80073f8:	08012230 	.word	0x08012230

080073fc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff fef3 	bl	80071f0 <mem_to_ptr>
 800740a:	4603      	mov	r3, r0
 800740c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	f7ff feda 	bl	80071cc <ptr_to_mem>
 8007418:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	885b      	ldrh	r3, [r3, #2]
 800741e:	4618      	mov	r0, r3
 8007420:	f7ff fed4 	bl	80071cc <ptr_to_mem>
 8007424:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800742e:	d818      	bhi.n	8007462 <mem_link_valid+0x66>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	885b      	ldrh	r3, [r3, #2]
 8007434:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007438:	d813      	bhi.n	8007462 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800743e:	8afa      	ldrh	r2, [r7, #22]
 8007440:	429a      	cmp	r2, r3
 8007442:	d004      	beq.n	800744e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	8afa      	ldrh	r2, [r7, #22]
 800744a:	429a      	cmp	r2, r3
 800744c:	d109      	bne.n	8007462 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800744e:	4b08      	ldr	r3, [pc, #32]	; (8007470 <mem_link_valid+0x74>)
 8007450:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	429a      	cmp	r2, r3
 8007456:	d006      	beq.n	8007466 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	885b      	ldrh	r3, [r3, #2]
 800745c:	8afa      	ldrh	r2, [r7, #22]
 800745e:	429a      	cmp	r2, r3
 8007460:	d001      	beq.n	8007466 <mem_link_valid+0x6a>
    return 0;
 8007462:	2300      	movs	r3, #0
 8007464:	e000      	b.n	8007468 <mem_link_valid+0x6c>
  }
  return 1;
 8007466:	2301      	movs	r3, #1
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	200040e4 	.word	0x200040e4

08007474 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b088      	sub	sp, #32
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d070      	beq.n	8007564 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f003 0303 	and.w	r3, r3, #3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00d      	beq.n	80074a8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800748c:	4b37      	ldr	r3, [pc, #220]	; (800756c <mem_free+0xf8>)
 800748e:	f240 2273 	movw	r2, #627	; 0x273
 8007492:	4937      	ldr	r1, [pc, #220]	; (8007570 <mem_free+0xfc>)
 8007494:	4837      	ldr	r0, [pc, #220]	; (8007574 <mem_free+0x100>)
 8007496:	f009 feeb 	bl	8011270 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800749a:	f009 fcdb 	bl	8010e54 <sys_arch_protect>
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f009 fce5 	bl	8010e70 <sys_arch_unprotect>
    return;
 80074a6:	e05e      	b.n	8007566 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3b08      	subs	r3, #8
 80074ac:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80074ae:	4b32      	ldr	r3, [pc, #200]	; (8007578 <mem_free+0x104>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69fa      	ldr	r2, [r7, #28]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d306      	bcc.n	80074c6 <mem_free+0x52>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f103 020c 	add.w	r2, r3, #12
 80074be:	4b2f      	ldr	r3, [pc, #188]	; (800757c <mem_free+0x108>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d90d      	bls.n	80074e2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80074c6:	4b29      	ldr	r3, [pc, #164]	; (800756c <mem_free+0xf8>)
 80074c8:	f240 227f 	movw	r2, #639	; 0x27f
 80074cc:	492c      	ldr	r1, [pc, #176]	; (8007580 <mem_free+0x10c>)
 80074ce:	4829      	ldr	r0, [pc, #164]	; (8007574 <mem_free+0x100>)
 80074d0:	f009 fece 	bl	8011270 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80074d4:	f009 fcbe 	bl	8010e54 <sys_arch_protect>
 80074d8:	6138      	str	r0, [r7, #16]
 80074da:	6938      	ldr	r0, [r7, #16]
 80074dc:	f009 fcc8 	bl	8010e70 <sys_arch_unprotect>
    return;
 80074e0:	e041      	b.n	8007566 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80074e2:	4828      	ldr	r0, [pc, #160]	; (8007584 <mem_free+0x110>)
 80074e4:	f009 fc74 	bl	8010dd0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	791b      	ldrb	r3, [r3, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d110      	bne.n	8007512 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80074f0:	4b1e      	ldr	r3, [pc, #120]	; (800756c <mem_free+0xf8>)
 80074f2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80074f6:	4924      	ldr	r1, [pc, #144]	; (8007588 <mem_free+0x114>)
 80074f8:	481e      	ldr	r0, [pc, #120]	; (8007574 <mem_free+0x100>)
 80074fa:	f009 feb9 	bl	8011270 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80074fe:	4821      	ldr	r0, [pc, #132]	; (8007584 <mem_free+0x110>)
 8007500:	f009 fc75 	bl	8010dee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007504:	f009 fca6 	bl	8010e54 <sys_arch_protect>
 8007508:	6178      	str	r0, [r7, #20]
 800750a:	6978      	ldr	r0, [r7, #20]
 800750c:	f009 fcb0 	bl	8010e70 <sys_arch_unprotect>
    return;
 8007510:	e029      	b.n	8007566 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8007512:	69f8      	ldr	r0, [r7, #28]
 8007514:	f7ff ff72 	bl	80073fc <mem_link_valid>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d110      	bne.n	8007540 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800751e:	4b13      	ldr	r3, [pc, #76]	; (800756c <mem_free+0xf8>)
 8007520:	f240 2295 	movw	r2, #661	; 0x295
 8007524:	4919      	ldr	r1, [pc, #100]	; (800758c <mem_free+0x118>)
 8007526:	4813      	ldr	r0, [pc, #76]	; (8007574 <mem_free+0x100>)
 8007528:	f009 fea2 	bl	8011270 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800752c:	4815      	ldr	r0, [pc, #84]	; (8007584 <mem_free+0x110>)
 800752e:	f009 fc5e 	bl	8010dee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007532:	f009 fc8f 	bl	8010e54 <sys_arch_protect>
 8007536:	61b8      	str	r0, [r7, #24]
 8007538:	69b8      	ldr	r0, [r7, #24]
 800753a:	f009 fc99 	bl	8010e70 <sys_arch_unprotect>
    return;
 800753e:	e012      	b.n	8007566 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	2200      	movs	r2, #0
 8007544:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007546:	4b12      	ldr	r3, [pc, #72]	; (8007590 <mem_free+0x11c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	429a      	cmp	r2, r3
 800754e:	d202      	bcs.n	8007556 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007550:	4a0f      	ldr	r2, [pc, #60]	; (8007590 <mem_free+0x11c>)
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007556:	69f8      	ldr	r0, [r7, #28]
 8007558:	f7ff fe5c 	bl	8007214 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800755c:	4809      	ldr	r0, [pc, #36]	; (8007584 <mem_free+0x110>)
 800755e:	f009 fc46 	bl	8010dee <sys_mutex_unlock>
 8007562:	e000      	b.n	8007566 <mem_free+0xf2>
    return;
 8007564:	bf00      	nop
}
 8007566:	3720      	adds	r7, #32
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	080121e8 	.word	0x080121e8
 8007570:	080122d8 	.word	0x080122d8
 8007574:	08012230 	.word	0x08012230
 8007578:	200040e0 	.word	0x200040e0
 800757c:	200040e4 	.word	0x200040e4
 8007580:	080122fc 	.word	0x080122fc
 8007584:	200040e8 	.word	0x200040e8
 8007588:	08012318 	.word	0x08012318
 800758c:	08012340 	.word	0x08012340
 8007590:	200040ec 	.word	0x200040ec

08007594 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b088      	sub	sp, #32
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80075a0:	887b      	ldrh	r3, [r7, #2]
 80075a2:	3303      	adds	r3, #3
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80075ac:	8bfb      	ldrh	r3, [r7, #30]
 80075ae:	2b0b      	cmp	r3, #11
 80075b0:	d801      	bhi.n	80075b6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80075b2:	230c      	movs	r3, #12
 80075b4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80075b6:	8bfb      	ldrh	r3, [r7, #30]
 80075b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80075bc:	d803      	bhi.n	80075c6 <mem_trim+0x32>
 80075be:	8bfa      	ldrh	r2, [r7, #30]
 80075c0:	887b      	ldrh	r3, [r7, #2]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d201      	bcs.n	80075ca <mem_trim+0x36>
    return NULL;
 80075c6:	2300      	movs	r3, #0
 80075c8:	e0d8      	b.n	800777c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80075ca:	4b6e      	ldr	r3, [pc, #440]	; (8007784 <mem_trim+0x1f0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d304      	bcc.n	80075de <mem_trim+0x4a>
 80075d4:	4b6c      	ldr	r3, [pc, #432]	; (8007788 <mem_trim+0x1f4>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d306      	bcc.n	80075ec <mem_trim+0x58>
 80075de:	4b6b      	ldr	r3, [pc, #428]	; (800778c <mem_trim+0x1f8>)
 80075e0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80075e4:	496a      	ldr	r1, [pc, #424]	; (8007790 <mem_trim+0x1fc>)
 80075e6:	486b      	ldr	r0, [pc, #428]	; (8007794 <mem_trim+0x200>)
 80075e8:	f009 fe42 	bl	8011270 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80075ec:	4b65      	ldr	r3, [pc, #404]	; (8007784 <mem_trim+0x1f0>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d304      	bcc.n	8007600 <mem_trim+0x6c>
 80075f6:	4b64      	ldr	r3, [pc, #400]	; (8007788 <mem_trim+0x1f4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d307      	bcc.n	8007610 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007600:	f009 fc28 	bl	8010e54 <sys_arch_protect>
 8007604:	60b8      	str	r0, [r7, #8]
 8007606:	68b8      	ldr	r0, [r7, #8]
 8007608:	f009 fc32 	bl	8010e70 <sys_arch_unprotect>
    return rmem;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	e0b5      	b.n	800777c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3b08      	subs	r3, #8
 8007614:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007616:	69b8      	ldr	r0, [r7, #24]
 8007618:	f7ff fdea 	bl	80071f0 <mem_to_ptr>
 800761c:	4603      	mov	r3, r0
 800761e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	881a      	ldrh	r2, [r3, #0]
 8007624:	8afb      	ldrh	r3, [r7, #22]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b08      	subs	r3, #8
 800762c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800762e:	8bfa      	ldrh	r2, [r7, #30]
 8007630:	8abb      	ldrh	r3, [r7, #20]
 8007632:	429a      	cmp	r2, r3
 8007634:	d906      	bls.n	8007644 <mem_trim+0xb0>
 8007636:	4b55      	ldr	r3, [pc, #340]	; (800778c <mem_trim+0x1f8>)
 8007638:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800763c:	4956      	ldr	r1, [pc, #344]	; (8007798 <mem_trim+0x204>)
 800763e:	4855      	ldr	r0, [pc, #340]	; (8007794 <mem_trim+0x200>)
 8007640:	f009 fe16 	bl	8011270 <iprintf>
  if (newsize > size) {
 8007644:	8bfa      	ldrh	r2, [r7, #30]
 8007646:	8abb      	ldrh	r3, [r7, #20]
 8007648:	429a      	cmp	r2, r3
 800764a:	d901      	bls.n	8007650 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800764c:	2300      	movs	r3, #0
 800764e:	e095      	b.n	800777c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8007650:	8bfa      	ldrh	r2, [r7, #30]
 8007652:	8abb      	ldrh	r3, [r7, #20]
 8007654:	429a      	cmp	r2, r3
 8007656:	d101      	bne.n	800765c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	e08f      	b.n	800777c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800765c:	484f      	ldr	r0, [pc, #316]	; (800779c <mem_trim+0x208>)
 800765e:	f009 fbb7 	bl	8010dd0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fdb0 	bl	80071cc <ptr_to_mem>
 800766c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	791b      	ldrb	r3, [r3, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d13f      	bne.n	80076f6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800767e:	d106      	bne.n	800768e <mem_trim+0xfa>
 8007680:	4b42      	ldr	r3, [pc, #264]	; (800778c <mem_trim+0x1f8>)
 8007682:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007686:	4946      	ldr	r1, [pc, #280]	; (80077a0 <mem_trim+0x20c>)
 8007688:	4842      	ldr	r0, [pc, #264]	; (8007794 <mem_trim+0x200>)
 800768a:	f009 fdf1 	bl	8011270 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007694:	8afa      	ldrh	r2, [r7, #22]
 8007696:	8bfb      	ldrh	r3, [r7, #30]
 8007698:	4413      	add	r3, r2
 800769a:	b29b      	uxth	r3, r3
 800769c:	3308      	adds	r3, #8
 800769e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80076a0:	4b40      	ldr	r3, [pc, #256]	; (80077a4 <mem_trim+0x210>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d106      	bne.n	80076b8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80076aa:	89fb      	ldrh	r3, [r7, #14]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff fd8d 	bl	80071cc <ptr_to_mem>
 80076b2:	4603      	mov	r3, r0
 80076b4:	4a3b      	ldr	r2, [pc, #236]	; (80077a4 <mem_trim+0x210>)
 80076b6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80076b8:	89fb      	ldrh	r3, [r7, #14]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff fd86 	bl	80071cc <ptr_to_mem>
 80076c0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	2200      	movs	r2, #0
 80076c6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	89ba      	ldrh	r2, [r7, #12]
 80076cc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	8afa      	ldrh	r2, [r7, #22]
 80076d2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	89fa      	ldrh	r2, [r7, #14]
 80076d8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80076e2:	d047      	beq.n	8007774 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7ff fd6f 	bl	80071cc <ptr_to_mem>
 80076ee:	4602      	mov	r2, r0
 80076f0:	89fb      	ldrh	r3, [r7, #14]
 80076f2:	8053      	strh	r3, [r2, #2]
 80076f4:	e03e      	b.n	8007774 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80076f6:	8bfb      	ldrh	r3, [r7, #30]
 80076f8:	f103 0214 	add.w	r2, r3, #20
 80076fc:	8abb      	ldrh	r3, [r7, #20]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d838      	bhi.n	8007774 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007702:	8afa      	ldrh	r2, [r7, #22]
 8007704:	8bfb      	ldrh	r3, [r7, #30]
 8007706:	4413      	add	r3, r2
 8007708:	b29b      	uxth	r3, r3
 800770a:	3308      	adds	r3, #8
 800770c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007716:	d106      	bne.n	8007726 <mem_trim+0x192>
 8007718:	4b1c      	ldr	r3, [pc, #112]	; (800778c <mem_trim+0x1f8>)
 800771a:	f240 3216 	movw	r2, #790	; 0x316
 800771e:	4920      	ldr	r1, [pc, #128]	; (80077a0 <mem_trim+0x20c>)
 8007720:	481c      	ldr	r0, [pc, #112]	; (8007794 <mem_trim+0x200>)
 8007722:	f009 fda5 	bl	8011270 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007726:	89fb      	ldrh	r3, [r7, #14]
 8007728:	4618      	mov	r0, r3
 800772a:	f7ff fd4f 	bl	80071cc <ptr_to_mem>
 800772e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007730:	4b1c      	ldr	r3, [pc, #112]	; (80077a4 <mem_trim+0x210>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	429a      	cmp	r2, r3
 8007738:	d202      	bcs.n	8007740 <mem_trim+0x1ac>
      lfree = mem2;
 800773a:	4a1a      	ldr	r2, [pc, #104]	; (80077a4 <mem_trim+0x210>)
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	2200      	movs	r2, #0
 8007744:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	881a      	ldrh	r2, [r3, #0]
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	8afa      	ldrh	r2, [r7, #22]
 8007752:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	89fa      	ldrh	r2, [r7, #14]
 8007758:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007762:	d007      	beq.n	8007774 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fd2f 	bl	80071cc <ptr_to_mem>
 800776e:	4602      	mov	r2, r0
 8007770:	89fb      	ldrh	r3, [r7, #14]
 8007772:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007774:	4809      	ldr	r0, [pc, #36]	; (800779c <mem_trim+0x208>)
 8007776:	f009 fb3a 	bl	8010dee <sys_mutex_unlock>
  return rmem;
 800777a:	687b      	ldr	r3, [r7, #4]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3720      	adds	r7, #32
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	200040e0 	.word	0x200040e0
 8007788:	200040e4 	.word	0x200040e4
 800778c:	080121e8 	.word	0x080121e8
 8007790:	08012374 	.word	0x08012374
 8007794:	08012230 	.word	0x08012230
 8007798:	0801238c 	.word	0x0801238c
 800779c:	200040e8 	.word	0x200040e8
 80077a0:	080123ac 	.word	0x080123ac
 80077a4:	200040ec 	.word	0x200040ec

080077a8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4603      	mov	r3, r0
 80077b0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80077b2:	88fb      	ldrh	r3, [r7, #6]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <mem_malloc+0x14>
    return NULL;
 80077b8:	2300      	movs	r3, #0
 80077ba:	e0e2      	b.n	8007982 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80077bc:	88fb      	ldrh	r3, [r7, #6]
 80077be:	3303      	adds	r3, #3
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	f023 0303 	bic.w	r3, r3, #3
 80077c6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80077c8:	8bbb      	ldrh	r3, [r7, #28]
 80077ca:	2b0b      	cmp	r3, #11
 80077cc:	d801      	bhi.n	80077d2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80077ce:	230c      	movs	r3, #12
 80077d0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80077d2:	8bbb      	ldrh	r3, [r7, #28]
 80077d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80077d8:	d803      	bhi.n	80077e2 <mem_malloc+0x3a>
 80077da:	8bba      	ldrh	r2, [r7, #28]
 80077dc:	88fb      	ldrh	r3, [r7, #6]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d201      	bcs.n	80077e6 <mem_malloc+0x3e>
    return NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	e0cd      	b.n	8007982 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80077e6:	4869      	ldr	r0, [pc, #420]	; (800798c <mem_malloc+0x1e4>)
 80077e8:	f009 faf2 	bl	8010dd0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80077ec:	4b68      	ldr	r3, [pc, #416]	; (8007990 <mem_malloc+0x1e8>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fcfd 	bl	80071f0 <mem_to_ptr>
 80077f6:	4603      	mov	r3, r0
 80077f8:	83fb      	strh	r3, [r7, #30]
 80077fa:	e0b7      	b.n	800796c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80077fc:	8bfb      	ldrh	r3, [r7, #30]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff fce4 	bl	80071cc <ptr_to_mem>
 8007804:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	791b      	ldrb	r3, [r3, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	f040 80a7 	bne.w	800795e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	8bfb      	ldrh	r3, [r7, #30]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	f1a3 0208 	sub.w	r2, r3, #8
 800781e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007820:	429a      	cmp	r2, r3
 8007822:	f0c0 809c 	bcc.w	800795e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	8bfb      	ldrh	r3, [r7, #30]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	f1a3 0208 	sub.w	r2, r3, #8
 8007834:	8bbb      	ldrh	r3, [r7, #28]
 8007836:	3314      	adds	r3, #20
 8007838:	429a      	cmp	r2, r3
 800783a:	d333      	bcc.n	80078a4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800783c:	8bfa      	ldrh	r2, [r7, #30]
 800783e:	8bbb      	ldrh	r3, [r7, #28]
 8007840:	4413      	add	r3, r2
 8007842:	b29b      	uxth	r3, r3
 8007844:	3308      	adds	r3, #8
 8007846:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007848:	8a7b      	ldrh	r3, [r7, #18]
 800784a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800784e:	d106      	bne.n	800785e <mem_malloc+0xb6>
 8007850:	4b50      	ldr	r3, [pc, #320]	; (8007994 <mem_malloc+0x1ec>)
 8007852:	f240 3287 	movw	r2, #903	; 0x387
 8007856:	4950      	ldr	r1, [pc, #320]	; (8007998 <mem_malloc+0x1f0>)
 8007858:	4850      	ldr	r0, [pc, #320]	; (800799c <mem_malloc+0x1f4>)
 800785a:	f009 fd09 	bl	8011270 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800785e:	8a7b      	ldrh	r3, [r7, #18]
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff fcb3 	bl	80071cc <ptr_to_mem>
 8007866:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	881a      	ldrh	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8bfa      	ldrh	r2, [r7, #30]
 800787a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	8a7a      	ldrh	r2, [r7, #18]
 8007880:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2201      	movs	r2, #1
 8007886:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007890:	d00b      	beq.n	80078aa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fc98 	bl	80071cc <ptr_to_mem>
 800789c:	4602      	mov	r2, r0
 800789e:	8a7b      	ldrh	r3, [r7, #18]
 80078a0:	8053      	strh	r3, [r2, #2]
 80078a2:	e002      	b.n	80078aa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2201      	movs	r2, #1
 80078a8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80078aa:	4b39      	ldr	r3, [pc, #228]	; (8007990 <mem_malloc+0x1e8>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d127      	bne.n	8007904 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80078b4:	4b36      	ldr	r3, [pc, #216]	; (8007990 <mem_malloc+0x1e8>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80078ba:	e005      	b.n	80078c8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff fc83 	bl	80071cc <ptr_to_mem>
 80078c6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	791b      	ldrb	r3, [r3, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d004      	beq.n	80078da <mem_malloc+0x132>
 80078d0:	4b33      	ldr	r3, [pc, #204]	; (80079a0 <mem_malloc+0x1f8>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d1f0      	bne.n	80078bc <mem_malloc+0x114>
          }
          lfree = cur;
 80078da:	4a2d      	ldr	r2, [pc, #180]	; (8007990 <mem_malloc+0x1e8>)
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80078e0:	4b2b      	ldr	r3, [pc, #172]	; (8007990 <mem_malloc+0x1e8>)
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	4b2e      	ldr	r3, [pc, #184]	; (80079a0 <mem_malloc+0x1f8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d00b      	beq.n	8007904 <mem_malloc+0x15c>
 80078ec:	4b28      	ldr	r3, [pc, #160]	; (8007990 <mem_malloc+0x1e8>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	791b      	ldrb	r3, [r3, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d006      	beq.n	8007904 <mem_malloc+0x15c>
 80078f6:	4b27      	ldr	r3, [pc, #156]	; (8007994 <mem_malloc+0x1ec>)
 80078f8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80078fc:	4929      	ldr	r1, [pc, #164]	; (80079a4 <mem_malloc+0x1fc>)
 80078fe:	4827      	ldr	r0, [pc, #156]	; (800799c <mem_malloc+0x1f4>)
 8007900:	f009 fcb6 	bl	8011270 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007904:	4821      	ldr	r0, [pc, #132]	; (800798c <mem_malloc+0x1e4>)
 8007906:	f009 fa72 	bl	8010dee <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800790a:	8bba      	ldrh	r2, [r7, #28]
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	4413      	add	r3, r2
 8007910:	3308      	adds	r3, #8
 8007912:	4a23      	ldr	r2, [pc, #140]	; (80079a0 <mem_malloc+0x1f8>)
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	4293      	cmp	r3, r2
 8007918:	d906      	bls.n	8007928 <mem_malloc+0x180>
 800791a:	4b1e      	ldr	r3, [pc, #120]	; (8007994 <mem_malloc+0x1ec>)
 800791c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007920:	4921      	ldr	r1, [pc, #132]	; (80079a8 <mem_malloc+0x200>)
 8007922:	481e      	ldr	r0, [pc, #120]	; (800799c <mem_malloc+0x1f4>)
 8007924:	f009 fca4 	bl	8011270 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f003 0303 	and.w	r3, r3, #3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d006      	beq.n	8007940 <mem_malloc+0x198>
 8007932:	4b18      	ldr	r3, [pc, #96]	; (8007994 <mem_malloc+0x1ec>)
 8007934:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007938:	491c      	ldr	r1, [pc, #112]	; (80079ac <mem_malloc+0x204>)
 800793a:	4818      	ldr	r0, [pc, #96]	; (800799c <mem_malloc+0x1f4>)
 800793c:	f009 fc98 	bl	8011270 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d006      	beq.n	8007958 <mem_malloc+0x1b0>
 800794a:	4b12      	ldr	r3, [pc, #72]	; (8007994 <mem_malloc+0x1ec>)
 800794c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007950:	4917      	ldr	r1, [pc, #92]	; (80079b0 <mem_malloc+0x208>)
 8007952:	4812      	ldr	r0, [pc, #72]	; (800799c <mem_malloc+0x1f4>)
 8007954:	f009 fc8c 	bl	8011270 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	3308      	adds	r3, #8
 800795c:	e011      	b.n	8007982 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800795e:	8bfb      	ldrh	r3, [r7, #30]
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff fc33 	bl	80071cc <ptr_to_mem>
 8007966:	4603      	mov	r3, r0
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800796c:	8bfa      	ldrh	r2, [r7, #30]
 800796e:	8bbb      	ldrh	r3, [r7, #28]
 8007970:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007974:	429a      	cmp	r2, r3
 8007976:	f4ff af41 	bcc.w	80077fc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800797a:	4804      	ldr	r0, [pc, #16]	; (800798c <mem_malloc+0x1e4>)
 800797c:	f009 fa37 	bl	8010dee <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3720      	adds	r7, #32
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	200040e8 	.word	0x200040e8
 8007990:	200040ec 	.word	0x200040ec
 8007994:	080121e8 	.word	0x080121e8
 8007998:	080123ac 	.word	0x080123ac
 800799c:	08012230 	.word	0x08012230
 80079a0:	200040e4 	.word	0x200040e4
 80079a4:	080123c0 	.word	0x080123c0
 80079a8:	080123dc 	.word	0x080123dc
 80079ac:	0801240c 	.word	0x0801240c
 80079b0:	0801243c 	.word	0x0801243c

080079b4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	3303      	adds	r3, #3
 80079ca:	f023 0303 	bic.w	r3, r3, #3
 80079ce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80079d0:	2300      	movs	r3, #0
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	e011      	b.n	80079fa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	4413      	add	r3, r2
 80079f2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3301      	adds	r3, #1
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	885b      	ldrh	r3, [r3, #2]
 80079fe:	461a      	mov	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4293      	cmp	r3, r2
 8007a04:	dbe7      	blt.n	80079d6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007a06:	bf00      	nop
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	80fb      	strh	r3, [r7, #6]
 8007a1e:	e009      	b.n	8007a34 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007a20:	88fb      	ldrh	r3, [r7, #6]
 8007a22:	4a08      	ldr	r2, [pc, #32]	; (8007a44 <memp_init+0x30>)
 8007a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff ffc3 	bl	80079b4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	3301      	adds	r3, #1
 8007a32:	80fb      	strh	r3, [r7, #6]
 8007a34:	88fb      	ldrh	r3, [r7, #6]
 8007a36:	2b0c      	cmp	r3, #12
 8007a38:	d9f2      	bls.n	8007a20 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007a3a:	bf00      	nop
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	08014c44 	.word	0x08014c44

08007a48 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007a50:	f009 fa00 	bl	8010e54 <sys_arch_protect>
 8007a54:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d015      	beq.n	8007a90 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	6812      	ldr	r2, [r2, #0]
 8007a6c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f003 0303 	and.w	r3, r3, #3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d006      	beq.n	8007a86 <do_memp_malloc_pool+0x3e>
 8007a78:	4b09      	ldr	r3, [pc, #36]	; (8007aa0 <do_memp_malloc_pool+0x58>)
 8007a7a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007a7e:	4909      	ldr	r1, [pc, #36]	; (8007aa4 <do_memp_malloc_pool+0x5c>)
 8007a80:	4809      	ldr	r0, [pc, #36]	; (8007aa8 <do_memp_malloc_pool+0x60>)
 8007a82:	f009 fbf5 	bl	8011270 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f009 f9f2 	bl	8010e70 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	e003      	b.n	8007a98 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f009 f9ed 	bl	8010e70 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	08012460 	.word	0x08012460
 8007aa4:	08012490 	.word	0x08012490
 8007aa8:	080124b4 	.word	0x080124b4

08007aac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	2b0c      	cmp	r3, #12
 8007aba:	d908      	bls.n	8007ace <memp_malloc+0x22>
 8007abc:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <memp_malloc+0x3c>)
 8007abe:	f240 1257 	movw	r2, #343	; 0x157
 8007ac2:	490a      	ldr	r1, [pc, #40]	; (8007aec <memp_malloc+0x40>)
 8007ac4:	480a      	ldr	r0, [pc, #40]	; (8007af0 <memp_malloc+0x44>)
 8007ac6:	f009 fbd3 	bl	8011270 <iprintf>
 8007aca:	2300      	movs	r3, #0
 8007acc:	e008      	b.n	8007ae0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	4a08      	ldr	r2, [pc, #32]	; (8007af4 <memp_malloc+0x48>)
 8007ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff ffb6 	bl	8007a48 <do_memp_malloc_pool>
 8007adc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007ade:	68fb      	ldr	r3, [r7, #12]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	08012460 	.word	0x08012460
 8007aec:	080124f0 	.word	0x080124f0
 8007af0:	080124b4 	.word	0x080124b4
 8007af4:	08014c44 	.word	0x08014c44

08007af8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	f003 0303 	and.w	r3, r3, #3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d006      	beq.n	8007b1a <do_memp_free_pool+0x22>
 8007b0c:	4b0d      	ldr	r3, [pc, #52]	; (8007b44 <do_memp_free_pool+0x4c>)
 8007b0e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007b12:	490d      	ldr	r1, [pc, #52]	; (8007b48 <do_memp_free_pool+0x50>)
 8007b14:	480d      	ldr	r0, [pc, #52]	; (8007b4c <do_memp_free_pool+0x54>)
 8007b16:	f009 fbab 	bl	8011270 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8007b1e:	f009 f999 	bl	8010e54 <sys_arch_protect>
 8007b22:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8007b36:	68b8      	ldr	r0, [r7, #8]
 8007b38:	f009 f99a 	bl	8010e70 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8007b3c:	bf00      	nop
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	08012460 	.word	0x08012460
 8007b48:	08012510 	.word	0x08012510
 8007b4c:	080124b4 	.word	0x080124b4

08007b50 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	6039      	str	r1, [r7, #0]
 8007b5a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	2b0c      	cmp	r3, #12
 8007b60:	d907      	bls.n	8007b72 <memp_free+0x22>
 8007b62:	4b0c      	ldr	r3, [pc, #48]	; (8007b94 <memp_free+0x44>)
 8007b64:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007b68:	490b      	ldr	r1, [pc, #44]	; (8007b98 <memp_free+0x48>)
 8007b6a:	480c      	ldr	r0, [pc, #48]	; (8007b9c <memp_free+0x4c>)
 8007b6c:	f009 fb80 	bl	8011270 <iprintf>
 8007b70:	e00c      	b.n	8007b8c <memp_free+0x3c>

  if (mem == NULL) {
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d008      	beq.n	8007b8a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <memp_free+0x50>)
 8007b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff ffb8 	bl	8007af8 <do_memp_free_pool>
 8007b88:	e000      	b.n	8007b8c <memp_free+0x3c>
    return;
 8007b8a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	08012460 	.word	0x08012460
 8007b98:	08012530 	.word	0x08012530
 8007b9c:	080124b4 	.word	0x080124b4
 8007ba0:	08014c44 	.word	0x08014c44

08007ba4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007ba8:	bf00      	nop
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d108      	bne.n	8007bda <netif_add+0x26>
 8007bc8:	4b57      	ldr	r3, [pc, #348]	; (8007d28 <netif_add+0x174>)
 8007bca:	f240 1227 	movw	r2, #295	; 0x127
 8007bce:	4957      	ldr	r1, [pc, #348]	; (8007d2c <netif_add+0x178>)
 8007bd0:	4857      	ldr	r0, [pc, #348]	; (8007d30 <netif_add+0x17c>)
 8007bd2:	f009 fb4d 	bl	8011270 <iprintf>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e0a2      	b.n	8007d20 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d108      	bne.n	8007bf2 <netif_add+0x3e>
 8007be0:	4b51      	ldr	r3, [pc, #324]	; (8007d28 <netif_add+0x174>)
 8007be2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007be6:	4953      	ldr	r1, [pc, #332]	; (8007d34 <netif_add+0x180>)
 8007be8:	4851      	ldr	r0, [pc, #324]	; (8007d30 <netif_add+0x17c>)
 8007bea:	f009 fb41 	bl	8011270 <iprintf>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e096      	b.n	8007d20 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007bf8:	4b4f      	ldr	r3, [pc, #316]	; (8007d38 <netif_add+0x184>)
 8007bfa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007c02:	4b4d      	ldr	r3, [pc, #308]	; (8007d38 <netif_add+0x184>)
 8007c04:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007c0c:	4b4a      	ldr	r3, [pc, #296]	; (8007d38 <netif_add+0x184>)
 8007c0e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4a45      	ldr	r2, [pc, #276]	; (8007d3c <netif_add+0x188>)
 8007c26:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a3a      	ldr	r2, [r7, #32]
 8007c40:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007c42:	4b3f      	ldr	r3, [pc, #252]	; (8007d40 <netif_add+0x18c>)
 8007c44:	781a      	ldrb	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c50:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	68b9      	ldr	r1, [r7, #8]
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 f913 	bl	8007e84 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	4798      	blx	r3
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <netif_add+0xba>
    return NULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e058      	b.n	8007d20 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c74:	2bff      	cmp	r3, #255	; 0xff
 8007c76:	d103      	bne.n	8007c80 <netif_add+0xcc>
        netif->num = 0;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007c84:	4b2f      	ldr	r3, [pc, #188]	; (8007d44 <netif_add+0x190>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	617b      	str	r3, [r7, #20]
 8007c8a:	e02b      	b.n	8007ce4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d106      	bne.n	8007ca2 <netif_add+0xee>
 8007c94:	4b24      	ldr	r3, [pc, #144]	; (8007d28 <netif_add+0x174>)
 8007c96:	f240 128b 	movw	r2, #395	; 0x18b
 8007c9a:	492b      	ldr	r1, [pc, #172]	; (8007d48 <netif_add+0x194>)
 8007c9c:	4824      	ldr	r0, [pc, #144]	; (8007d30 <netif_add+0x17c>)
 8007c9e:	f009 fae7 	bl	8011270 <iprintf>
        num_netifs++;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	2bff      	cmp	r3, #255	; 0xff
 8007cac:	dd06      	ble.n	8007cbc <netif_add+0x108>
 8007cae:	4b1e      	ldr	r3, [pc, #120]	; (8007d28 <netif_add+0x174>)
 8007cb0:	f240 128d 	movw	r2, #397	; 0x18d
 8007cb4:	4925      	ldr	r1, [pc, #148]	; (8007d4c <netif_add+0x198>)
 8007cb6:	481e      	ldr	r0, [pc, #120]	; (8007d30 <netif_add+0x17c>)
 8007cb8:	f009 fada 	bl	8011270 <iprintf>
        if (netif2->num == netif->num) {
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d108      	bne.n	8007cde <netif_add+0x12a>
          netif->num++;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007cdc:	e005      	b.n	8007cea <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1d0      	bne.n	8007c8c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1be      	bne.n	8007c6e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cf6:	2bfe      	cmp	r3, #254	; 0xfe
 8007cf8:	d103      	bne.n	8007d02 <netif_add+0x14e>
    netif_num = 0;
 8007cfa:	4b11      	ldr	r3, [pc, #68]	; (8007d40 <netif_add+0x18c>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	701a      	strb	r2, [r3, #0]
 8007d00:	e006      	b.n	8007d10 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d08:	3301      	adds	r3, #1
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <netif_add+0x18c>)
 8007d0e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007d10:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <netif_add+0x190>)
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007d18:	4a0a      	ldr	r2, [pc, #40]	; (8007d44 <netif_add+0x190>)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	0801254c 	.word	0x0801254c
 8007d2c:	080125e0 	.word	0x080125e0
 8007d30:	0801259c 	.word	0x0801259c
 8007d34:	080125fc 	.word	0x080125fc
 8007d38:	08014cb8 	.word	0x08014cb8
 8007d3c:	0800815f 	.word	0x0800815f
 8007d40:	20004124 	.word	0x20004124
 8007d44:	2000ab00 	.word	0x2000ab00
 8007d48:	08012620 	.word	0x08012620
 8007d4c:	08012634 	.word	0x08012634

08007d50 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f002 fb7d 	bl	800a45c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f006 fc8d 	bl	800e684 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
	...

08007d74 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d106      	bne.n	8007d94 <netif_do_set_ipaddr+0x20>
 8007d86:	4b1d      	ldr	r3, [pc, #116]	; (8007dfc <netif_do_set_ipaddr+0x88>)
 8007d88:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007d8c:	491c      	ldr	r1, [pc, #112]	; (8007e00 <netif_do_set_ipaddr+0x8c>)
 8007d8e:	481d      	ldr	r0, [pc, #116]	; (8007e04 <netif_do_set_ipaddr+0x90>)
 8007d90:	f009 fa6e 	bl	8011270 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d106      	bne.n	8007da8 <netif_do_set_ipaddr+0x34>
 8007d9a:	4b18      	ldr	r3, [pc, #96]	; (8007dfc <netif_do_set_ipaddr+0x88>)
 8007d9c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007da0:	4917      	ldr	r1, [pc, #92]	; (8007e00 <netif_do_set_ipaddr+0x8c>)
 8007da2:	4818      	ldr	r0, [pc, #96]	; (8007e04 <netif_do_set_ipaddr+0x90>)
 8007da4:	f009 fa64 	bl	8011270 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3304      	adds	r3, #4
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d01c      	beq.n	8007df0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007dc6:	f107 0314 	add.w	r3, r7, #20
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff ffbf 	bl	8007d50 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <netif_do_set_ipaddr+0x6a>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	e000      	b.n	8007de0 <netif_do_set_ipaddr+0x6c>
 8007dde:	2300      	movs	r3, #0
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007de4:	2101      	movs	r1, #1
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 f8d2 	bl	8007f90 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	0801254c 	.word	0x0801254c
 8007e00:	08012664 	.word	0x08012664
 8007e04:	0801259c 	.word	0x0801259c

08007e08 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d00a      	beq.n	8007e38 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <netif_do_set_netmask+0x26>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	e000      	b.n	8007e30 <netif_do_set_netmask+0x28>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007e34:	2301      	movs	r3, #1
 8007e36:	e000      	b.n	8007e3a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	330c      	adds	r3, #12
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d00a      	beq.n	8007e76 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <netif_do_set_gw+0x26>
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	e000      	b.n	8007e6e <netif_do_set_gw+0x28>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007e72:	2301      	movs	r3, #1
 8007e74:	e000      	b.n	8007e78 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007ea0:	4b1c      	ldr	r3, [pc, #112]	; (8007f14 <netif_set_addr+0x90>)
 8007ea2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007eaa:	4b1a      	ldr	r3, [pc, #104]	; (8007f14 <netif_set_addr+0x90>)
 8007eac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007eb4:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <netif_set_addr+0x90>)
 8007eb6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <netif_set_addr+0x42>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <netif_set_addr+0x46>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e000      	b.n	8007ecc <netif_set_addr+0x48>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d006      	beq.n	8007ee2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007ed4:	f107 0310 	add.w	r3, r7, #16
 8007ed8:	461a      	mov	r2, r3
 8007eda:	68b9      	ldr	r1, [r7, #8]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f7ff ff49 	bl	8007d74 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007ee2:	69fa      	ldr	r2, [r7, #28]
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f7ff ff8e 	bl	8007e08 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f7ff ffa8 	bl	8007e46 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d106      	bne.n	8007f0a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007efc:	f107 0310 	add.w	r3, r7, #16
 8007f00:	461a      	mov	r2, r3
 8007f02:	68b9      	ldr	r1, [r7, #8]
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7ff ff35 	bl	8007d74 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007f0a:	bf00      	nop
 8007f0c:	3720      	adds	r7, #32
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	08014cb8 	.word	0x08014cb8

08007f18 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007f20:	4a04      	ldr	r2, [pc, #16]	; (8007f34 <netif_set_default+0x1c>)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	2000ab04 	.word	0x2000ab04

08007f38 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d107      	bne.n	8007f56 <netif_set_up+0x1e>
 8007f46:	4b0f      	ldr	r3, [pc, #60]	; (8007f84 <netif_set_up+0x4c>)
 8007f48:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007f4c:	490e      	ldr	r1, [pc, #56]	; (8007f88 <netif_set_up+0x50>)
 8007f4e:	480f      	ldr	r0, [pc, #60]	; (8007f8c <netif_set_up+0x54>)
 8007f50:	f009 f98e 	bl	8011270 <iprintf>
 8007f54:	e013      	b.n	8007f7e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10c      	bne.n	8007f7e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f6a:	f043 0301 	orr.w	r3, r3, #1
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007f76:	2103      	movs	r1, #3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f809 	bl	8007f90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	0801254c 	.word	0x0801254c
 8007f88:	080126d4 	.word	0x080126d4
 8007f8c:	0801259c 	.word	0x0801259c

08007f90 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d106      	bne.n	8007fb0 <netif_issue_reports+0x20>
 8007fa2:	4b18      	ldr	r3, [pc, #96]	; (8008004 <netif_issue_reports+0x74>)
 8007fa4:	f240 326d 	movw	r2, #877	; 0x36d
 8007fa8:	4917      	ldr	r1, [pc, #92]	; (8008008 <netif_issue_reports+0x78>)
 8007faa:	4818      	ldr	r0, [pc, #96]	; (800800c <netif_issue_reports+0x7c>)
 8007fac:	f009 f960 	bl	8011270 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fb6:	f003 0304 	and.w	r3, r3, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d01e      	beq.n	8007ffc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fc4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d017      	beq.n	8007ffc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d013      	beq.n	8007ffe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00e      	beq.n	8007ffe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fe6:	f003 0308 	and.w	r3, r3, #8
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d007      	beq.n	8007ffe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f007 faaf 	bl	800f558 <etharp_request>
 8007ffa:	e000      	b.n	8007ffe <netif_issue_reports+0x6e>
    return;
 8007ffc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	0801254c 	.word	0x0801254c
 8008008:	080126f0 	.word	0x080126f0
 800800c:	0801259c 	.word	0x0801259c

08008010 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d107      	bne.n	800802e <netif_set_down+0x1e>
 800801e:	4b12      	ldr	r3, [pc, #72]	; (8008068 <netif_set_down+0x58>)
 8008020:	f240 329b 	movw	r2, #923	; 0x39b
 8008024:	4911      	ldr	r1, [pc, #68]	; (800806c <netif_set_down+0x5c>)
 8008026:	4812      	ldr	r0, [pc, #72]	; (8008070 <netif_set_down+0x60>)
 8008028:	f009 f922 	bl	8011270 <iprintf>
 800802c:	e019      	b.n	8008062 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d012      	beq.n	8008062 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008042:	f023 0301 	bic.w	r3, r3, #1
 8008046:	b2da      	uxtb	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008054:	f003 0308 	and.w	r3, r3, #8
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f006 fe39 	bl	800ecd4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	0801254c 	.word	0x0801254c
 800806c:	08012714 	.word	0x08012714
 8008070:	0801259c 	.word	0x0801259c

08008074 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d107      	bne.n	8008092 <netif_set_link_up+0x1e>
 8008082:	4b13      	ldr	r3, [pc, #76]	; (80080d0 <netif_set_link_up+0x5c>)
 8008084:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008088:	4912      	ldr	r1, [pc, #72]	; (80080d4 <netif_set_link_up+0x60>)
 800808a:	4813      	ldr	r0, [pc, #76]	; (80080d8 <netif_set_link_up+0x64>)
 800808c:	f009 f8f0 	bl	8011270 <iprintf>
 8008090:	e01b      	b.n	80080ca <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d114      	bne.n	80080ca <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80080a6:	f043 0304 	orr.w	r3, r3, #4
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80080b2:	2103      	movs	r1, #3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff ff6b 	bl	8007f90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <netif_set_link_up+0x56>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	0801254c 	.word	0x0801254c
 80080d4:	08012734 	.word	0x08012734
 80080d8:	0801259c 	.word	0x0801259c

080080dc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d107      	bne.n	80080fa <netif_set_link_down+0x1e>
 80080ea:	4b11      	ldr	r3, [pc, #68]	; (8008130 <netif_set_link_down+0x54>)
 80080ec:	f240 4206 	movw	r2, #1030	; 0x406
 80080f0:	4910      	ldr	r1, [pc, #64]	; (8008134 <netif_set_link_down+0x58>)
 80080f2:	4811      	ldr	r0, [pc, #68]	; (8008138 <netif_set_link_down+0x5c>)
 80080f4:	f009 f8bc 	bl	8011270 <iprintf>
 80080f8:	e017      	b.n	800812a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008100:	f003 0304 	and.w	r3, r3, #4
 8008104:	2b00      	cmp	r3, #0
 8008106:	d010      	beq.n	800812a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800810e:	f023 0304 	bic.w	r3, r3, #4
 8008112:	b2da      	uxtb	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <netif_set_link_down+0x4e>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	0801254c 	.word	0x0801254c
 8008134:	08012758 	.word	0x08012758
 8008138:	0801259c 	.word	0x0801259c

0800813c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	61da      	str	r2, [r3, #28]
  }
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800815e:	b480      	push	{r7}
 8008160:	b085      	sub	sp, #20
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800816a:	f06f 030b 	mvn.w	r3, #11
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
	...

0800817c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008186:	79fb      	ldrb	r3, [r7, #7]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d013      	beq.n	80081b4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800818c:	4b0d      	ldr	r3, [pc, #52]	; (80081c4 <netif_get_by_index+0x48>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	e00c      	b.n	80081ae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800819a:	3301      	adds	r3, #1
 800819c:	b2db      	uxtb	r3, r3
 800819e:	79fa      	ldrb	r2, [r7, #7]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d101      	bne.n	80081a8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	e006      	b.n	80081b6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1ef      	bne.n	8008194 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	2000ab00 	.word	0x2000ab00

080081c8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80081ce:	f008 fe41 	bl	8010e54 <sys_arch_protect>
 80081d2:	6038      	str	r0, [r7, #0]
 80081d4:	4b0d      	ldr	r3, [pc, #52]	; (800820c <pbuf_free_ooseq+0x44>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	6838      	ldr	r0, [r7, #0]
 80081dc:	f008 fe48 	bl	8010e70 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <pbuf_free_ooseq+0x48>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	607b      	str	r3, [r7, #4]
 80081e6:	e00a      	b.n	80081fe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d003      	beq.n	80081f8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f002 f971 	bl	800a4d8 <tcp_free_ooseq>
      return;
 80081f6:	e005      	b.n	8008204 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	607b      	str	r3, [r7, #4]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1f1      	bne.n	80081e8 <pbuf_free_ooseq+0x20>
    }
  }
}
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	2000ab08 	.word	0x2000ab08
 8008210:	2000ab10 	.word	0x2000ab10

08008214 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800821c:	f7ff ffd4 	bl	80081c8 <pbuf_free_ooseq>
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800822e:	f008 fe11 	bl	8010e54 <sys_arch_protect>
 8008232:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008234:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <pbuf_pool_is_empty+0x4c>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800823a:	4b0e      	ldr	r3, [pc, #56]	; (8008274 <pbuf_pool_is_empty+0x4c>)
 800823c:	2201      	movs	r2, #1
 800823e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f008 fe15 	bl	8010e70 <sys_arch_unprotect>

  if (!queued) {
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10f      	bne.n	800826c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800824c:	2100      	movs	r1, #0
 800824e:	480a      	ldr	r0, [pc, #40]	; (8008278 <pbuf_pool_is_empty+0x50>)
 8008250:	f7fe feec 	bl	800702c <tcpip_try_callback>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d008      	beq.n	800826c <pbuf_pool_is_empty+0x44>
 800825a:	f008 fdfb 	bl	8010e54 <sys_arch_protect>
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <pbuf_pool_is_empty+0x4c>)
 8008262:	2200      	movs	r2, #0
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f008 fe02 	bl	8010e70 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	2000ab08 	.word	0x2000ab08
 8008278:	08008215 	.word	0x08008215

0800827c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	4611      	mov	r1, r2
 8008288:	461a      	mov	r2, r3
 800828a:	460b      	mov	r3, r1
 800828c:	80fb      	strh	r3, [r7, #6]
 800828e:	4613      	mov	r3, r2
 8008290:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	88fa      	ldrh	r2, [r7, #6]
 80082a2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	88ba      	ldrh	r2, [r7, #4]
 80082a8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80082aa:	8b3b      	ldrh	r3, [r7, #24]
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	7f3a      	ldrb	r2, [r7, #28]
 80082b6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2201      	movs	r2, #1
 80082bc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	73da      	strb	r2, [r3, #15]
}
 80082c4:	bf00      	nop
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08c      	sub	sp, #48	; 0x30
 80082d4:	af02      	add	r7, sp, #8
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]
 80082da:	460b      	mov	r3, r1
 80082dc:	80bb      	strh	r3, [r7, #4]
 80082de:	4613      	mov	r3, r2
 80082e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80082e2:	79fb      	ldrb	r3, [r7, #7]
 80082e4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80082e6:	887b      	ldrh	r3, [r7, #2]
 80082e8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80082ec:	d07f      	beq.n	80083ee <pbuf_alloc+0x11e>
 80082ee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80082f2:	f300 80c8 	bgt.w	8008486 <pbuf_alloc+0x1b6>
 80082f6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80082fa:	d010      	beq.n	800831e <pbuf_alloc+0x4e>
 80082fc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008300:	f300 80c1 	bgt.w	8008486 <pbuf_alloc+0x1b6>
 8008304:	2b01      	cmp	r3, #1
 8008306:	d002      	beq.n	800830e <pbuf_alloc+0x3e>
 8008308:	2b41      	cmp	r3, #65	; 0x41
 800830a:	f040 80bc 	bne.w	8008486 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800830e:	887a      	ldrh	r2, [r7, #2]
 8008310:	88bb      	ldrh	r3, [r7, #4]
 8008312:	4619      	mov	r1, r3
 8008314:	2000      	movs	r0, #0
 8008316:	f000 f8d1 	bl	80084bc <pbuf_alloc_reference>
 800831a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800831c:	e0bd      	b.n	800849a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008326:	88bb      	ldrh	r3, [r7, #4]
 8008328:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800832a:	200c      	movs	r0, #12
 800832c:	f7ff fbbe 	bl	8007aac <memp_malloc>
 8008330:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d109      	bne.n	800834c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008338:	f7ff ff76 	bl	8008228 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <pbuf_alloc+0x78>
            pbuf_free(p);
 8008342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008344:	f000 faa8 	bl	8008898 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008348:	2300      	movs	r3, #0
 800834a:	e0a7      	b.n	800849c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800834c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800834e:	3303      	adds	r3, #3
 8008350:	b29b      	uxth	r3, r3
 8008352:	f023 0303 	bic.w	r3, r3, #3
 8008356:	b29b      	uxth	r3, r3
 8008358:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800835c:	b29b      	uxth	r3, r3
 800835e:	8b7a      	ldrh	r2, [r7, #26]
 8008360:	4293      	cmp	r3, r2
 8008362:	bf28      	it	cs
 8008364:	4613      	movcs	r3, r2
 8008366:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008368:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800836a:	3310      	adds	r3, #16
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4413      	add	r3, r2
 8008370:	3303      	adds	r3, #3
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	4618      	mov	r0, r3
 8008378:	89f9      	ldrh	r1, [r7, #14]
 800837a:	8b7a      	ldrh	r2, [r7, #26]
 800837c:	2300      	movs	r3, #0
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	887b      	ldrh	r3, [r7, #2]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	460b      	mov	r3, r1
 8008386:	4601      	mov	r1, r0
 8008388:	6938      	ldr	r0, [r7, #16]
 800838a:	f7ff ff77 	bl	800827c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d006      	beq.n	80083a8 <pbuf_alloc+0xd8>
 800839a:	4b42      	ldr	r3, [pc, #264]	; (80084a4 <pbuf_alloc+0x1d4>)
 800839c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083a0:	4941      	ldr	r1, [pc, #260]	; (80084a8 <pbuf_alloc+0x1d8>)
 80083a2:	4842      	ldr	r0, [pc, #264]	; (80084ac <pbuf_alloc+0x1dc>)
 80083a4:	f008 ff64 	bl	8011270 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80083a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083aa:	3303      	adds	r3, #3
 80083ac:	f023 0303 	bic.w	r3, r3, #3
 80083b0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80083b4:	d106      	bne.n	80083c4 <pbuf_alloc+0xf4>
 80083b6:	4b3b      	ldr	r3, [pc, #236]	; (80084a4 <pbuf_alloc+0x1d4>)
 80083b8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80083bc:	493c      	ldr	r1, [pc, #240]	; (80084b0 <pbuf_alloc+0x1e0>)
 80083be:	483b      	ldr	r0, [pc, #236]	; (80084ac <pbuf_alloc+0x1dc>)
 80083c0:	f008 ff56 	bl	8011270 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d102      	bne.n	80083d0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
 80083ce:	e002      	b.n	80083d6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80083da:	8b7a      	ldrh	r2, [r7, #26]
 80083dc:	89fb      	ldrh	r3, [r7, #14]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80083e6:	8b7b      	ldrh	r3, [r7, #26]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d19e      	bne.n	800832a <pbuf_alloc+0x5a>
      break;
 80083ec:	e055      	b.n	800849a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80083ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083f0:	3303      	adds	r3, #3
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	f023 0303 	bic.w	r3, r3, #3
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	88bb      	ldrh	r3, [r7, #4]
 80083fc:	3303      	adds	r3, #3
 80083fe:	b29b      	uxth	r3, r3
 8008400:	f023 0303 	bic.w	r3, r3, #3
 8008404:	b29b      	uxth	r3, r3
 8008406:	4413      	add	r3, r2
 8008408:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800840a:	8b3b      	ldrh	r3, [r7, #24]
 800840c:	3310      	adds	r3, #16
 800840e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008410:	8b3a      	ldrh	r2, [r7, #24]
 8008412:	88bb      	ldrh	r3, [r7, #4]
 8008414:	3303      	adds	r3, #3
 8008416:	f023 0303 	bic.w	r3, r3, #3
 800841a:	429a      	cmp	r2, r3
 800841c:	d306      	bcc.n	800842c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800841e:	8afa      	ldrh	r2, [r7, #22]
 8008420:	88bb      	ldrh	r3, [r7, #4]
 8008422:	3303      	adds	r3, #3
 8008424:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008428:	429a      	cmp	r2, r3
 800842a:	d201      	bcs.n	8008430 <pbuf_alloc+0x160>
        return NULL;
 800842c:	2300      	movs	r3, #0
 800842e:	e035      	b.n	800849c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008430:	8afb      	ldrh	r3, [r7, #22]
 8008432:	4618      	mov	r0, r3
 8008434:	f7ff f9b8 	bl	80077a8 <mem_malloc>
 8008438:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <pbuf_alloc+0x174>
        return NULL;
 8008440:	2300      	movs	r3, #0
 8008442:	e02b      	b.n	800849c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008444:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008446:	3310      	adds	r3, #16
 8008448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800844a:	4413      	add	r3, r2
 800844c:	3303      	adds	r3, #3
 800844e:	f023 0303 	bic.w	r3, r3, #3
 8008452:	4618      	mov	r0, r3
 8008454:	88b9      	ldrh	r1, [r7, #4]
 8008456:	88ba      	ldrh	r2, [r7, #4]
 8008458:	2300      	movs	r3, #0
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	887b      	ldrh	r3, [r7, #2]
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	460b      	mov	r3, r1
 8008462:	4601      	mov	r1, r0
 8008464:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008466:	f7ff ff09 	bl	800827c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f003 0303 	and.w	r3, r3, #3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d010      	beq.n	8008498 <pbuf_alloc+0x1c8>
 8008476:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <pbuf_alloc+0x1d4>)
 8008478:	f44f 7291 	mov.w	r2, #290	; 0x122
 800847c:	490d      	ldr	r1, [pc, #52]	; (80084b4 <pbuf_alloc+0x1e4>)
 800847e:	480b      	ldr	r0, [pc, #44]	; (80084ac <pbuf_alloc+0x1dc>)
 8008480:	f008 fef6 	bl	8011270 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008484:	e008      	b.n	8008498 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008486:	4b07      	ldr	r3, [pc, #28]	; (80084a4 <pbuf_alloc+0x1d4>)
 8008488:	f240 1227 	movw	r2, #295	; 0x127
 800848c:	490a      	ldr	r1, [pc, #40]	; (80084b8 <pbuf_alloc+0x1e8>)
 800848e:	4807      	ldr	r0, [pc, #28]	; (80084ac <pbuf_alloc+0x1dc>)
 8008490:	f008 feee 	bl	8011270 <iprintf>
      return NULL;
 8008494:	2300      	movs	r3, #0
 8008496:	e001      	b.n	800849c <pbuf_alloc+0x1cc>
      break;
 8008498:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800849c:	4618      	mov	r0, r3
 800849e:	3728      	adds	r7, #40	; 0x28
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	0801277c 	.word	0x0801277c
 80084a8:	080127ac 	.word	0x080127ac
 80084ac:	080127dc 	.word	0x080127dc
 80084b0:	08012804 	.word	0x08012804
 80084b4:	08012838 	.word	0x08012838
 80084b8:	08012864 	.word	0x08012864

080084bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af02      	add	r7, sp, #8
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	807b      	strh	r3, [r7, #2]
 80084c8:	4613      	mov	r3, r2
 80084ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80084cc:	883b      	ldrh	r3, [r7, #0]
 80084ce:	2b41      	cmp	r3, #65	; 0x41
 80084d0:	d009      	beq.n	80084e6 <pbuf_alloc_reference+0x2a>
 80084d2:	883b      	ldrh	r3, [r7, #0]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d006      	beq.n	80084e6 <pbuf_alloc_reference+0x2a>
 80084d8:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <pbuf_alloc_reference+0x5c>)
 80084da:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80084de:	490f      	ldr	r1, [pc, #60]	; (800851c <pbuf_alloc_reference+0x60>)
 80084e0:	480f      	ldr	r0, [pc, #60]	; (8008520 <pbuf_alloc_reference+0x64>)
 80084e2:	f008 fec5 	bl	8011270 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80084e6:	200b      	movs	r0, #11
 80084e8:	f7ff fae0 	bl	8007aac <memp_malloc>
 80084ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80084f4:	2300      	movs	r3, #0
 80084f6:	e00b      	b.n	8008510 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80084f8:	8879      	ldrh	r1, [r7, #2]
 80084fa:	887a      	ldrh	r2, [r7, #2]
 80084fc:	2300      	movs	r3, #0
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	883b      	ldrh	r3, [r7, #0]
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	460b      	mov	r3, r1
 8008506:	6879      	ldr	r1, [r7, #4]
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f7ff feb7 	bl	800827c <pbuf_init_alloced_pbuf>
  return p;
 800850e:	68fb      	ldr	r3, [r7, #12]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	0801277c 	.word	0x0801277c
 800851c:	08012880 	.word	0x08012880
 8008520:	080127dc 	.word	0x080127dc

08008524 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af02      	add	r7, sp, #8
 800852a:	607b      	str	r3, [r7, #4]
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]
 8008530:	460b      	mov	r3, r1
 8008532:	81bb      	strh	r3, [r7, #12]
 8008534:	4613      	mov	r3, r2
 8008536:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800853c:	8a7b      	ldrh	r3, [r7, #18]
 800853e:	3303      	adds	r3, #3
 8008540:	f023 0203 	bic.w	r2, r3, #3
 8008544:	89bb      	ldrh	r3, [r7, #12]
 8008546:	441a      	add	r2, r3
 8008548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800854a:	429a      	cmp	r2, r3
 800854c:	d901      	bls.n	8008552 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800854e:	2300      	movs	r3, #0
 8008550:	e018      	b.n	8008584 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d007      	beq.n	8008568 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008558:	8a7b      	ldrh	r3, [r7, #18]
 800855a:	3303      	adds	r3, #3
 800855c:	f023 0303 	bic.w	r3, r3, #3
 8008560:	6a3a      	ldr	r2, [r7, #32]
 8008562:	4413      	add	r3, r2
 8008564:	617b      	str	r3, [r7, #20]
 8008566:	e001      	b.n	800856c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008568:	2300      	movs	r3, #0
 800856a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	89b9      	ldrh	r1, [r7, #12]
 8008570:	89ba      	ldrh	r2, [r7, #12]
 8008572:	2302      	movs	r3, #2
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	897b      	ldrh	r3, [r7, #10]
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	460b      	mov	r3, r1
 800857c:	6979      	ldr	r1, [r7, #20]
 800857e:	f7ff fe7d 	bl	800827c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008582:	687b      	ldr	r3, [r7, #4]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3718      	adds	r7, #24
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d106      	bne.n	80085ac <pbuf_realloc+0x20>
 800859e:	4b3a      	ldr	r3, [pc, #232]	; (8008688 <pbuf_realloc+0xfc>)
 80085a0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80085a4:	4939      	ldr	r1, [pc, #228]	; (800868c <pbuf_realloc+0x100>)
 80085a6:	483a      	ldr	r0, [pc, #232]	; (8008690 <pbuf_realloc+0x104>)
 80085a8:	f008 fe62 	bl	8011270 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	891b      	ldrh	r3, [r3, #8]
 80085b0:	887a      	ldrh	r2, [r7, #2]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d263      	bcs.n	800867e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	891a      	ldrh	r2, [r3, #8]
 80085ba:	887b      	ldrh	r3, [r7, #2]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80085c0:	887b      	ldrh	r3, [r7, #2]
 80085c2:	817b      	strh	r3, [r7, #10]
  q = p;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80085c8:	e018      	b.n	80085fc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	895b      	ldrh	r3, [r3, #10]
 80085ce:	897a      	ldrh	r2, [r7, #10]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	891a      	ldrh	r2, [r3, #8]
 80085d8:	893b      	ldrh	r3, [r7, #8]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	b29a      	uxth	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d106      	bne.n	80085fc <pbuf_realloc+0x70>
 80085ee:	4b26      	ldr	r3, [pc, #152]	; (8008688 <pbuf_realloc+0xfc>)
 80085f0:	f240 12af 	movw	r2, #431	; 0x1af
 80085f4:	4927      	ldr	r1, [pc, #156]	; (8008694 <pbuf_realloc+0x108>)
 80085f6:	4826      	ldr	r0, [pc, #152]	; (8008690 <pbuf_realloc+0x104>)
 80085f8:	f008 fe3a 	bl	8011270 <iprintf>
  while (rem_len > q->len) {
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	895b      	ldrh	r3, [r3, #10]
 8008600:	897a      	ldrh	r2, [r7, #10]
 8008602:	429a      	cmp	r2, r3
 8008604:	d8e1      	bhi.n	80085ca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	7b1b      	ldrb	r3, [r3, #12]
 800860a:	f003 030f 	and.w	r3, r3, #15
 800860e:	2b00      	cmp	r3, #0
 8008610:	d121      	bne.n	8008656 <pbuf_realloc+0xca>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	895b      	ldrh	r3, [r3, #10]
 8008616:	897a      	ldrh	r2, [r7, #10]
 8008618:	429a      	cmp	r2, r3
 800861a:	d01c      	beq.n	8008656 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	7b5b      	ldrb	r3, [r3, #13]
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	2b00      	cmp	r3, #0
 8008626:	d116      	bne.n	8008656 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	b29a      	uxth	r2, r3
 8008632:	897b      	ldrh	r3, [r7, #10]
 8008634:	4413      	add	r3, r2
 8008636:	b29b      	uxth	r3, r3
 8008638:	4619      	mov	r1, r3
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7fe ffaa 	bl	8007594 <mem_trim>
 8008640:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d106      	bne.n	8008656 <pbuf_realloc+0xca>
 8008648:	4b0f      	ldr	r3, [pc, #60]	; (8008688 <pbuf_realloc+0xfc>)
 800864a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800864e:	4912      	ldr	r1, [pc, #72]	; (8008698 <pbuf_realloc+0x10c>)
 8008650:	480f      	ldr	r0, [pc, #60]	; (8008690 <pbuf_realloc+0x104>)
 8008652:	f008 fe0d 	bl	8011270 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	897a      	ldrh	r2, [r7, #10]
 800865a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	895a      	ldrh	r2, [r3, #10]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 f911 	bl	8008898 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	e000      	b.n	8008680 <pbuf_realloc+0xf4>
    return;
 800867e:	bf00      	nop

}
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	0801277c 	.word	0x0801277c
 800868c:	08012894 	.word	0x08012894
 8008690:	080127dc 	.word	0x080127dc
 8008694:	080128ac 	.word	0x080128ac
 8008698:	080128c4 	.word	0x080128c4

0800869c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	4613      	mov	r3, r2
 80086a8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d106      	bne.n	80086be <pbuf_add_header_impl+0x22>
 80086b0:	4b2b      	ldr	r3, [pc, #172]	; (8008760 <pbuf_add_header_impl+0xc4>)
 80086b2:	f240 12df 	movw	r2, #479	; 0x1df
 80086b6:	492b      	ldr	r1, [pc, #172]	; (8008764 <pbuf_add_header_impl+0xc8>)
 80086b8:	482b      	ldr	r0, [pc, #172]	; (8008768 <pbuf_add_header_impl+0xcc>)
 80086ba:	f008 fdd9 	bl	8011270 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d003      	beq.n	80086cc <pbuf_add_header_impl+0x30>
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ca:	d301      	bcc.n	80086d0 <pbuf_add_header_impl+0x34>
    return 1;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e043      	b.n	8008758 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <pbuf_add_header_impl+0x3e>
    return 0;
 80086d6:	2300      	movs	r3, #0
 80086d8:	e03e      	b.n	8008758 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	891a      	ldrh	r2, [r3, #8]
 80086e2:	8a7b      	ldrh	r3, [r7, #18]
 80086e4:	4413      	add	r3, r2
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	8a7a      	ldrh	r2, [r7, #18]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d901      	bls.n	80086f2 <pbuf_add_header_impl+0x56>
    return 1;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e032      	b.n	8008758 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	7b1b      	ldrb	r3, [r3, #12]
 80086f6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80086f8:	8a3b      	ldrh	r3, [r7, #16]
 80086fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00c      	beq.n	800871c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	425b      	negs	r3, r3
 800870a:	4413      	add	r3, r2
 800870c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3310      	adds	r3, #16
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	429a      	cmp	r2, r3
 8008716:	d20d      	bcs.n	8008734 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008718:	2301      	movs	r3, #1
 800871a:	e01d      	b.n	8008758 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d006      	beq.n	8008730 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	425b      	negs	r3, r3
 800872a:	4413      	add	r3, r2
 800872c:	617b      	str	r3, [r7, #20]
 800872e:	e001      	b.n	8008734 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008730:	2301      	movs	r3, #1
 8008732:	e011      	b.n	8008758 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	895a      	ldrh	r2, [r3, #10]
 800873e:	8a7b      	ldrh	r3, [r7, #18]
 8008740:	4413      	add	r3, r2
 8008742:	b29a      	uxth	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	891a      	ldrh	r2, [r3, #8]
 800874c:	8a7b      	ldrh	r3, [r7, #18]
 800874e:	4413      	add	r3, r2
 8008750:	b29a      	uxth	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	811a      	strh	r2, [r3, #8]


  return 0;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3718      	adds	r7, #24
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	0801277c 	.word	0x0801277c
 8008764:	080128e0 	.word	0x080128e0
 8008768:	080127dc 	.word	0x080127dc

0800876c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008776:	2200      	movs	r2, #0
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff ff8e 	bl	800869c <pbuf_add_header_impl>
 8008780:	4603      	mov	r3, r0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
	...

0800878c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d106      	bne.n	80087aa <pbuf_remove_header+0x1e>
 800879c:	4b20      	ldr	r3, [pc, #128]	; (8008820 <pbuf_remove_header+0x94>)
 800879e:	f240 224b 	movw	r2, #587	; 0x24b
 80087a2:	4920      	ldr	r1, [pc, #128]	; (8008824 <pbuf_remove_header+0x98>)
 80087a4:	4820      	ldr	r0, [pc, #128]	; (8008828 <pbuf_remove_header+0x9c>)
 80087a6:	f008 fd63 	bl	8011270 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d003      	beq.n	80087b8 <pbuf_remove_header+0x2c>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087b6:	d301      	bcc.n	80087bc <pbuf_remove_header+0x30>
    return 1;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e02c      	b.n	8008816 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <pbuf_remove_header+0x3a>
    return 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	e027      	b.n	8008816 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	895b      	ldrh	r3, [r3, #10]
 80087ce:	89fa      	ldrh	r2, [r7, #14]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d908      	bls.n	80087e6 <pbuf_remove_header+0x5a>
 80087d4:	4b12      	ldr	r3, [pc, #72]	; (8008820 <pbuf_remove_header+0x94>)
 80087d6:	f240 2255 	movw	r2, #597	; 0x255
 80087da:	4914      	ldr	r1, [pc, #80]	; (800882c <pbuf_remove_header+0xa0>)
 80087dc:	4812      	ldr	r0, [pc, #72]	; (8008828 <pbuf_remove_header+0x9c>)
 80087de:	f008 fd47 	bl	8011270 <iprintf>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e017      	b.n	8008816 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	441a      	add	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	895a      	ldrh	r2, [r3, #10]
 80087fc:	89fb      	ldrh	r3, [r7, #14]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	b29a      	uxth	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	891a      	ldrh	r2, [r3, #8]
 800880a:	89fb      	ldrh	r3, [r7, #14]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	b29a      	uxth	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	0801277c 	.word	0x0801277c
 8008824:	080128e0 	.word	0x080128e0
 8008828:	080127dc 	.word	0x080127dc
 800882c:	080128ec 	.word	0x080128ec

08008830 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	807b      	strh	r3, [r7, #2]
 800883c:	4613      	mov	r3, r2
 800883e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008840:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008844:	2b00      	cmp	r3, #0
 8008846:	da08      	bge.n	800885a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008848:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800884c:	425b      	negs	r3, r3
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff ff9b 	bl	800878c <pbuf_remove_header>
 8008856:	4603      	mov	r3, r0
 8008858:	e007      	b.n	800886a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800885a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800885e:	787a      	ldrb	r2, [r7, #1]
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7ff ff1a 	bl	800869c <pbuf_add_header_impl>
 8008868:	4603      	mov	r3, r0
  }
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800887e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008882:	2201      	movs	r2, #1
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff ffd2 	bl	8008830 <pbuf_header_impl>
 800888c:	4603      	mov	r3, r0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b088      	sub	sp, #32
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10b      	bne.n	80088be <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d106      	bne.n	80088ba <pbuf_free+0x22>
 80088ac:	4b3b      	ldr	r3, [pc, #236]	; (800899c <pbuf_free+0x104>)
 80088ae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80088b2:	493b      	ldr	r1, [pc, #236]	; (80089a0 <pbuf_free+0x108>)
 80088b4:	483b      	ldr	r0, [pc, #236]	; (80089a4 <pbuf_free+0x10c>)
 80088b6:	f008 fcdb 	bl	8011270 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	e069      	b.n	8008992 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80088c2:	e062      	b.n	800898a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80088c4:	f008 fac6 	bl	8010e54 <sys_arch_protect>
 80088c8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	7b9b      	ldrb	r3, [r3, #14]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d106      	bne.n	80088e0 <pbuf_free+0x48>
 80088d2:	4b32      	ldr	r3, [pc, #200]	; (800899c <pbuf_free+0x104>)
 80088d4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80088d8:	4933      	ldr	r1, [pc, #204]	; (80089a8 <pbuf_free+0x110>)
 80088da:	4832      	ldr	r0, [pc, #200]	; (80089a4 <pbuf_free+0x10c>)
 80088dc:	f008 fcc8 	bl	8011270 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	7b9b      	ldrb	r3, [r3, #14]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	739a      	strb	r2, [r3, #14]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	7b9b      	ldrb	r3, [r3, #14]
 80088f0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80088f2:	69b8      	ldr	r0, [r7, #24]
 80088f4:	f008 fabc 	bl	8010e70 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d143      	bne.n	8008986 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	7b1b      	ldrb	r3, [r3, #12]
 8008908:	f003 030f 	and.w	r3, r3, #15
 800890c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	7b5b      	ldrb	r3, [r3, #13]
 8008912:	f003 0302 	and.w	r3, r3, #2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d011      	beq.n	800893e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d106      	bne.n	8008934 <pbuf_free+0x9c>
 8008926:	4b1d      	ldr	r3, [pc, #116]	; (800899c <pbuf_free+0x104>)
 8008928:	f240 22ff 	movw	r2, #767	; 0x2ff
 800892c:	491f      	ldr	r1, [pc, #124]	; (80089ac <pbuf_free+0x114>)
 800892e:	481d      	ldr	r0, [pc, #116]	; (80089a4 <pbuf_free+0x10c>)
 8008930:	f008 fc9e 	bl	8011270 <iprintf>
        pc->custom_free_function(p);
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4798      	blx	r3
 800893c:	e01d      	b.n	800897a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	2b02      	cmp	r3, #2
 8008942:	d104      	bne.n	800894e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8008944:	6879      	ldr	r1, [r7, #4]
 8008946:	200c      	movs	r0, #12
 8008948:	f7ff f902 	bl	8007b50 <memp_free>
 800894c:	e015      	b.n	800897a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d104      	bne.n	800895e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	200b      	movs	r0, #11
 8008958:	f7ff f8fa 	bl	8007b50 <memp_free>
 800895c:	e00d      	b.n	800897a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800895e:	7bfb      	ldrb	r3, [r7, #15]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d103      	bne.n	800896c <pbuf_free+0xd4>
          mem_free(p);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7fe fd85 	bl	8007474 <mem_free>
 800896a:	e006      	b.n	800897a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800896c:	4b0b      	ldr	r3, [pc, #44]	; (800899c <pbuf_free+0x104>)
 800896e:	f240 320f 	movw	r2, #783	; 0x30f
 8008972:	490f      	ldr	r1, [pc, #60]	; (80089b0 <pbuf_free+0x118>)
 8008974:	480b      	ldr	r0, [pc, #44]	; (80089a4 <pbuf_free+0x10c>)
 8008976:	f008 fc7b 	bl	8011270 <iprintf>
        }
      }
      count++;
 800897a:	7ffb      	ldrb	r3, [r7, #31]
 800897c:	3301      	adds	r3, #1
 800897e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	607b      	str	r3, [r7, #4]
 8008984:	e001      	b.n	800898a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008986:	2300      	movs	r3, #0
 8008988:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d199      	bne.n	80088c4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008990:	7ffb      	ldrb	r3, [r7, #31]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3720      	adds	r7, #32
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	0801277c 	.word	0x0801277c
 80089a0:	080128e0 	.word	0x080128e0
 80089a4:	080127dc 	.word	0x080127dc
 80089a8:	0801290c 	.word	0x0801290c
 80089ac:	08012924 	.word	0x08012924
 80089b0:	08012948 	.word	0x08012948

080089b4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80089bc:	2300      	movs	r3, #0
 80089be:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80089c0:	e005      	b.n	80089ce <pbuf_clen+0x1a>
    ++len;
 80089c2:	89fb      	ldrh	r3, [r7, #14]
 80089c4:	3301      	adds	r3, #1
 80089c6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1f6      	bne.n	80089c2 <pbuf_clen+0xe>
  }
  return len;
 80089d4:	89fb      	ldrh	r3, [r7, #14]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
	...

080089e4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d016      	beq.n	8008a20 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80089f2:	f008 fa2f 	bl	8010e54 <sys_arch_protect>
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	7b9b      	ldrb	r3, [r3, #14]
 80089fc:	3301      	adds	r3, #1
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	739a      	strb	r2, [r3, #14]
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f008 fa33 	bl	8010e70 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	7b9b      	ldrb	r3, [r3, #14]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d106      	bne.n	8008a20 <pbuf_ref+0x3c>
 8008a12:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <pbuf_ref+0x44>)
 8008a14:	f240 3242 	movw	r2, #834	; 0x342
 8008a18:	4904      	ldr	r1, [pc, #16]	; (8008a2c <pbuf_ref+0x48>)
 8008a1a:	4805      	ldr	r0, [pc, #20]	; (8008a30 <pbuf_ref+0x4c>)
 8008a1c:	f008 fc28 	bl	8011270 <iprintf>
  }
}
 8008a20:	bf00      	nop
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	0801277c 	.word	0x0801277c
 8008a2c:	0801295c 	.word	0x0801295c
 8008a30:	080127dc 	.word	0x080127dc

08008a34 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <pbuf_cat+0x16>
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d107      	bne.n	8008a5a <pbuf_cat+0x26>
 8008a4a:	4b20      	ldr	r3, [pc, #128]	; (8008acc <pbuf_cat+0x98>)
 8008a4c:	f240 3259 	movw	r2, #857	; 0x359
 8008a50:	491f      	ldr	r1, [pc, #124]	; (8008ad0 <pbuf_cat+0x9c>)
 8008a52:	4820      	ldr	r0, [pc, #128]	; (8008ad4 <pbuf_cat+0xa0>)
 8008a54:	f008 fc0c 	bl	8011270 <iprintf>
 8008a58:	e034      	b.n	8008ac4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60fb      	str	r3, [r7, #12]
 8008a5e:	e00a      	b.n	8008a76 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	891a      	ldrh	r2, [r3, #8]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	891b      	ldrh	r3, [r3, #8]
 8008a68:	4413      	add	r3, r2
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1f0      	bne.n	8008a60 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	891a      	ldrh	r2, [r3, #8]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	895b      	ldrh	r3, [r3, #10]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d006      	beq.n	8008a98 <pbuf_cat+0x64>
 8008a8a:	4b10      	ldr	r3, [pc, #64]	; (8008acc <pbuf_cat+0x98>)
 8008a8c:	f240 3262 	movw	r2, #866	; 0x362
 8008a90:	4911      	ldr	r1, [pc, #68]	; (8008ad8 <pbuf_cat+0xa4>)
 8008a92:	4810      	ldr	r0, [pc, #64]	; (8008ad4 <pbuf_cat+0xa0>)
 8008a94:	f008 fbec 	bl	8011270 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d006      	beq.n	8008aae <pbuf_cat+0x7a>
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <pbuf_cat+0x98>)
 8008aa2:	f240 3263 	movw	r2, #867	; 0x363
 8008aa6:	490d      	ldr	r1, [pc, #52]	; (8008adc <pbuf_cat+0xa8>)
 8008aa8:	480a      	ldr	r0, [pc, #40]	; (8008ad4 <pbuf_cat+0xa0>)
 8008aaa:	f008 fbe1 	bl	8011270 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	891a      	ldrh	r2, [r3, #8]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	891b      	ldrh	r3, [r3, #8]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	0801277c 	.word	0x0801277c
 8008ad0:	08012970 	.word	0x08012970
 8008ad4:	080127dc 	.word	0x080127dc
 8008ad8:	080129a8 	.word	0x080129a8
 8008adc:	080129d8 	.word	0x080129d8

08008ae0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008aea:	2300      	movs	r3, #0
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	2300      	movs	r3, #0
 8008af0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d008      	beq.n	8008b0a <pbuf_copy+0x2a>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d005      	beq.n	8008b0a <pbuf_copy+0x2a>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	891a      	ldrh	r2, [r3, #8]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	891b      	ldrh	r3, [r3, #8]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d209      	bcs.n	8008b1e <pbuf_copy+0x3e>
 8008b0a:	4b57      	ldr	r3, [pc, #348]	; (8008c68 <pbuf_copy+0x188>)
 8008b0c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008b10:	4956      	ldr	r1, [pc, #344]	; (8008c6c <pbuf_copy+0x18c>)
 8008b12:	4857      	ldr	r0, [pc, #348]	; (8008c70 <pbuf_copy+0x190>)
 8008b14:	f008 fbac 	bl	8011270 <iprintf>
 8008b18:	f06f 030f 	mvn.w	r3, #15
 8008b1c:	e09f      	b.n	8008c5e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	895b      	ldrh	r3, [r3, #10]
 8008b22:	461a      	mov	r2, r3
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	1ad2      	subs	r2, r2, r3
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	895b      	ldrh	r3, [r3, #10]
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1acb      	subs	r3, r1, r3
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d306      	bcc.n	8008b44 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	895b      	ldrh	r3, [r3, #10]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	e005      	b.n	8008b50 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	895b      	ldrh	r3, [r3, #10]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	685a      	ldr	r2, [r3, #4]
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	18d0      	adds	r0, r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	4413      	add	r3, r2
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	4619      	mov	r1, r3
 8008b64:	f008 fac4 	bl	80110f0 <memcpy>
    offset_to += len;
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4413      	add	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	895b      	ldrh	r3, [r3, #10]
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d906      	bls.n	8008b92 <pbuf_copy+0xb2>
 8008b84:	4b38      	ldr	r3, [pc, #224]	; (8008c68 <pbuf_copy+0x188>)
 8008b86:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008b8a:	493a      	ldr	r1, [pc, #232]	; (8008c74 <pbuf_copy+0x194>)
 8008b8c:	4838      	ldr	r0, [pc, #224]	; (8008c70 <pbuf_copy+0x190>)
 8008b8e:	f008 fb6f 	bl	8011270 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	895b      	ldrh	r3, [r3, #10]
 8008b96:	461a      	mov	r2, r3
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d906      	bls.n	8008bac <pbuf_copy+0xcc>
 8008b9e:	4b32      	ldr	r3, [pc, #200]	; (8008c68 <pbuf_copy+0x188>)
 8008ba0:	f240 32da 	movw	r2, #986	; 0x3da
 8008ba4:	4934      	ldr	r1, [pc, #208]	; (8008c78 <pbuf_copy+0x198>)
 8008ba6:	4832      	ldr	r0, [pc, #200]	; (8008c70 <pbuf_copy+0x190>)
 8008ba8:	f008 fb62 	bl	8011270 <iprintf>
    if (offset_from >= p_from->len) {
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	895b      	ldrh	r3, [r3, #10]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d304      	bcc.n	8008bc2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	895b      	ldrh	r3, [r3, #10]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d114      	bne.n	8008bf8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10c      	bne.n	8008bf8 <pbuf_copy+0x118>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d009      	beq.n	8008bf8 <pbuf_copy+0x118>
 8008be4:	4b20      	ldr	r3, [pc, #128]	; (8008c68 <pbuf_copy+0x188>)
 8008be6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008bea:	4924      	ldr	r1, [pc, #144]	; (8008c7c <pbuf_copy+0x19c>)
 8008bec:	4820      	ldr	r0, [pc, #128]	; (8008c70 <pbuf_copy+0x190>)
 8008bee:	f008 fb3f 	bl	8011270 <iprintf>
 8008bf2:	f06f 030f 	mvn.w	r3, #15
 8008bf6:	e032      	b.n	8008c5e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d013      	beq.n	8008c26 <pbuf_copy+0x146>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	895a      	ldrh	r2, [r3, #10]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	891b      	ldrh	r3, [r3, #8]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d10d      	bne.n	8008c26 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d009      	beq.n	8008c26 <pbuf_copy+0x146>
 8008c12:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <pbuf_copy+0x188>)
 8008c14:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008c18:	4919      	ldr	r1, [pc, #100]	; (8008c80 <pbuf_copy+0x1a0>)
 8008c1a:	4815      	ldr	r0, [pc, #84]	; (8008c70 <pbuf_copy+0x190>)
 8008c1c:	f008 fb28 	bl	8011270 <iprintf>
 8008c20:	f06f 0305 	mvn.w	r3, #5
 8008c24:	e01b      	b.n	8008c5e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d013      	beq.n	8008c54 <pbuf_copy+0x174>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	895a      	ldrh	r2, [r3, #10]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	891b      	ldrh	r3, [r3, #8]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d10d      	bne.n	8008c54 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d009      	beq.n	8008c54 <pbuf_copy+0x174>
 8008c40:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <pbuf_copy+0x188>)
 8008c42:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008c46:	490e      	ldr	r1, [pc, #56]	; (8008c80 <pbuf_copy+0x1a0>)
 8008c48:	4809      	ldr	r0, [pc, #36]	; (8008c70 <pbuf_copy+0x190>)
 8008c4a:	f008 fb11 	bl	8011270 <iprintf>
 8008c4e:	f06f 0305 	mvn.w	r3, #5
 8008c52:	e004      	b.n	8008c5e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f47f af61 	bne.w	8008b1e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3718      	adds	r7, #24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	0801277c 	.word	0x0801277c
 8008c6c:	08012a24 	.word	0x08012a24
 8008c70:	080127dc 	.word	0x080127dc
 8008c74:	08012a54 	.word	0x08012a54
 8008c78:	08012a6c 	.word	0x08012a6c
 8008c7c:	08012a88 	.word	0x08012a88
 8008c80:	08012a98 	.word	0x08012a98

08008c84 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	4611      	mov	r1, r2
 8008c90:	461a      	mov	r2, r3
 8008c92:	460b      	mov	r3, r1
 8008c94:	80fb      	strh	r3, [r7, #6]
 8008c96:	4613      	mov	r3, r2
 8008c98:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d108      	bne.n	8008cba <pbuf_copy_partial+0x36>
 8008ca8:	4b2b      	ldr	r3, [pc, #172]	; (8008d58 <pbuf_copy_partial+0xd4>)
 8008caa:	f240 420a 	movw	r2, #1034	; 0x40a
 8008cae:	492b      	ldr	r1, [pc, #172]	; (8008d5c <pbuf_copy_partial+0xd8>)
 8008cb0:	482b      	ldr	r0, [pc, #172]	; (8008d60 <pbuf_copy_partial+0xdc>)
 8008cb2:	f008 fadd 	bl	8011270 <iprintf>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	e04a      	b.n	8008d50 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d108      	bne.n	8008cd2 <pbuf_copy_partial+0x4e>
 8008cc0:	4b25      	ldr	r3, [pc, #148]	; (8008d58 <pbuf_copy_partial+0xd4>)
 8008cc2:	f240 420b 	movw	r2, #1035	; 0x40b
 8008cc6:	4927      	ldr	r1, [pc, #156]	; (8008d64 <pbuf_copy_partial+0xe0>)
 8008cc8:	4825      	ldr	r0, [pc, #148]	; (8008d60 <pbuf_copy_partial+0xdc>)
 8008cca:	f008 fad1 	bl	8011270 <iprintf>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e03e      	b.n	8008d50 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	61fb      	str	r3, [r7, #28]
 8008cd6:	e034      	b.n	8008d42 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008cd8:	88bb      	ldrh	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00a      	beq.n	8008cf4 <pbuf_copy_partial+0x70>
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	895b      	ldrh	r3, [r3, #10]
 8008ce2:	88ba      	ldrh	r2, [r7, #4]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d305      	bcc.n	8008cf4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	895b      	ldrh	r3, [r3, #10]
 8008cec:	88ba      	ldrh	r2, [r7, #4]
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	80bb      	strh	r3, [r7, #4]
 8008cf2:	e023      	b.n	8008d3c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	895a      	ldrh	r2, [r3, #10]
 8008cf8:	88bb      	ldrh	r3, [r7, #4]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008cfe:	8b3a      	ldrh	r2, [r7, #24]
 8008d00:	88fb      	ldrh	r3, [r7, #6]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d901      	bls.n	8008d0a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008d06:	88fb      	ldrh	r3, [r7, #6]
 8008d08:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008d0a:	8b7b      	ldrh	r3, [r7, #26]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	18d0      	adds	r0, r2, r3
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	88bb      	ldrh	r3, [r7, #4]
 8008d16:	4413      	add	r3, r2
 8008d18:	8b3a      	ldrh	r2, [r7, #24]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	f008 f9e8 	bl	80110f0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008d20:	8afa      	ldrh	r2, [r7, #22]
 8008d22:	8b3b      	ldrh	r3, [r7, #24]
 8008d24:	4413      	add	r3, r2
 8008d26:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008d28:	8b7a      	ldrh	r2, [r7, #26]
 8008d2a:	8b3b      	ldrh	r3, [r7, #24]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008d30:	88fa      	ldrh	r2, [r7, #6]
 8008d32:	8b3b      	ldrh	r3, [r7, #24]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	61fb      	str	r3, [r7, #28]
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <pbuf_copy_partial+0xca>
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1c4      	bne.n	8008cd8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008d4e:	8afb      	ldrh	r3, [r7, #22]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3720      	adds	r7, #32
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	0801277c 	.word	0x0801277c
 8008d5c:	08012ac4 	.word	0x08012ac4
 8008d60:	080127dc 	.word	0x080127dc
 8008d64:	08012ae4 	.word	0x08012ae4

08008d68 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	603a      	str	r2, [r7, #0]
 8008d72:	71fb      	strb	r3, [r7, #7]
 8008d74:	460b      	mov	r3, r1
 8008d76:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	8919      	ldrh	r1, [r3, #8]
 8008d7c:	88ba      	ldrh	r2, [r7, #4]
 8008d7e:	79fb      	ldrb	r3, [r7, #7]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff faa5 	bl	80082d0 <pbuf_alloc>
 8008d86:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <pbuf_clone+0x2a>
    return NULL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e011      	b.n	8008db6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f7ff fea3 	bl	8008ae0 <pbuf_copy>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008d9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d006      	beq.n	8008db4 <pbuf_clone+0x4c>
 8008da6:	4b06      	ldr	r3, [pc, #24]	; (8008dc0 <pbuf_clone+0x58>)
 8008da8:	f240 5224 	movw	r2, #1316	; 0x524
 8008dac:	4905      	ldr	r1, [pc, #20]	; (8008dc4 <pbuf_clone+0x5c>)
 8008dae:	4806      	ldr	r0, [pc, #24]	; (8008dc8 <pbuf_clone+0x60>)
 8008db0:	f008 fa5e 	bl	8011270 <iprintf>
  return q;
 8008db4:	68fb      	ldr	r3, [r7, #12]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	0801277c 	.word	0x0801277c
 8008dc4:	08012bf0 	.word	0x08012bf0
 8008dc8:	080127dc 	.word	0x080127dc

08008dcc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008dd0:	f008 fa66 	bl	80112a0 <rand>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	4b01      	ldr	r3, [pc, #4]	; (8008dec <tcp_init+0x20>)
 8008de6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008de8:	bf00      	nop
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	20000010 	.word	0x20000010

08008df0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	7d1b      	ldrb	r3, [r3, #20]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d105      	bne.n	8008e0c <tcp_free+0x1c>
 8008e00:	4b06      	ldr	r3, [pc, #24]	; (8008e1c <tcp_free+0x2c>)
 8008e02:	22d4      	movs	r2, #212	; 0xd4
 8008e04:	4906      	ldr	r1, [pc, #24]	; (8008e20 <tcp_free+0x30>)
 8008e06:	4807      	ldr	r0, [pc, #28]	; (8008e24 <tcp_free+0x34>)
 8008e08:	f008 fa32 	bl	8011270 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	2001      	movs	r0, #1
 8008e10:	f7fe fe9e 	bl	8007b50 <memp_free>
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	08012c7c 	.word	0x08012c7c
 8008e20:	08012cac 	.word	0x08012cac
 8008e24:	08012cc0 	.word	0x08012cc0

08008e28 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	7d1b      	ldrb	r3, [r3, #20]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d105      	bne.n	8008e44 <tcp_free_listen+0x1c>
 8008e38:	4b06      	ldr	r3, [pc, #24]	; (8008e54 <tcp_free_listen+0x2c>)
 8008e3a:	22df      	movs	r2, #223	; 0xdf
 8008e3c:	4906      	ldr	r1, [pc, #24]	; (8008e58 <tcp_free_listen+0x30>)
 8008e3e:	4807      	ldr	r0, [pc, #28]	; (8008e5c <tcp_free_listen+0x34>)
 8008e40:	f008 fa16 	bl	8011270 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	2002      	movs	r0, #2
 8008e48:	f7fe fe82 	bl	8007b50 <memp_free>
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	08012c7c 	.word	0x08012c7c
 8008e58:	08012ce8 	.word	0x08012ce8
 8008e5c:	08012cc0 	.word	0x08012cc0

08008e60 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008e64:	f000 fea2 	bl	8009bac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008e68:	4b07      	ldr	r3, [pc, #28]	; (8008e88 <tcp_tmr+0x28>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	b2da      	uxtb	r2, r3
 8008e70:	4b05      	ldr	r3, [pc, #20]	; (8008e88 <tcp_tmr+0x28>)
 8008e72:	701a      	strb	r2, [r3, #0]
 8008e74:	4b04      	ldr	r3, [pc, #16]	; (8008e88 <tcp_tmr+0x28>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008e80:	f000 fb54 	bl	800952c <tcp_slowtmr>
  }
}
 8008e84:	bf00      	nop
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20004125 	.word	0x20004125

08008e8c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d105      	bne.n	8008ea8 <tcp_remove_listener+0x1c>
 8008e9c:	4b0d      	ldr	r3, [pc, #52]	; (8008ed4 <tcp_remove_listener+0x48>)
 8008e9e:	22ff      	movs	r2, #255	; 0xff
 8008ea0:	490d      	ldr	r1, [pc, #52]	; (8008ed8 <tcp_remove_listener+0x4c>)
 8008ea2:	480e      	ldr	r0, [pc, #56]	; (8008edc <tcp_remove_listener+0x50>)
 8008ea4:	f008 f9e4 	bl	8011270 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	e00a      	b.n	8008ec4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d102      	bne.n	8008ebe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	60fb      	str	r3, [r7, #12]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1f1      	bne.n	8008eae <tcp_remove_listener+0x22>
    }
  }
}
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	08012c7c 	.word	0x08012c7c
 8008ed8:	08012d04 	.word	0x08012d04
 8008edc:	08012cc0 	.word	0x08012cc0

08008ee0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d106      	bne.n	8008efc <tcp_listen_closed+0x1c>
 8008eee:	4b14      	ldr	r3, [pc, #80]	; (8008f40 <tcp_listen_closed+0x60>)
 8008ef0:	f240 1211 	movw	r2, #273	; 0x111
 8008ef4:	4913      	ldr	r1, [pc, #76]	; (8008f44 <tcp_listen_closed+0x64>)
 8008ef6:	4814      	ldr	r0, [pc, #80]	; (8008f48 <tcp_listen_closed+0x68>)
 8008ef8:	f008 f9ba 	bl	8011270 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	7d1b      	ldrb	r3, [r3, #20]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d006      	beq.n	8008f12 <tcp_listen_closed+0x32>
 8008f04:	4b0e      	ldr	r3, [pc, #56]	; (8008f40 <tcp_listen_closed+0x60>)
 8008f06:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008f0a:	4910      	ldr	r1, [pc, #64]	; (8008f4c <tcp_listen_closed+0x6c>)
 8008f0c:	480e      	ldr	r0, [pc, #56]	; (8008f48 <tcp_listen_closed+0x68>)
 8008f0e:	f008 f9af 	bl	8011270 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008f12:	2301      	movs	r3, #1
 8008f14:	60fb      	str	r3, [r7, #12]
 8008f16:	e00b      	b.n	8008f30 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008f18:	4a0d      	ldr	r2, [pc, #52]	; (8008f50 <tcp_listen_closed+0x70>)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6879      	ldr	r1, [r7, #4]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7ff ffb1 	bl	8008e8c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d9f0      	bls.n	8008f18 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008f36:	bf00      	nop
 8008f38:	bf00      	nop
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	08012c7c 	.word	0x08012c7c
 8008f44:	08012d2c 	.word	0x08012d2c
 8008f48:	08012cc0 	.word	0x08012cc0
 8008f4c:	08012d38 	.word	0x08012d38
 8008f50:	08014c90 	.word	0x08014c90

08008f54 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008f54:	b5b0      	push	{r4, r5, r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af04      	add	r7, sp, #16
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <tcp_close_shutdown+0x20>
 8008f66:	4b63      	ldr	r3, [pc, #396]	; (80090f4 <tcp_close_shutdown+0x1a0>)
 8008f68:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008f6c:	4962      	ldr	r1, [pc, #392]	; (80090f8 <tcp_close_shutdown+0x1a4>)
 8008f6e:	4863      	ldr	r0, [pc, #396]	; (80090fc <tcp_close_shutdown+0x1a8>)
 8008f70:	f008 f97e 	bl	8011270 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008f74:	78fb      	ldrb	r3, [r7, #3]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d066      	beq.n	8009048 <tcp_close_shutdown+0xf4>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	7d1b      	ldrb	r3, [r3, #20]
 8008f7e:	2b04      	cmp	r3, #4
 8008f80:	d003      	beq.n	8008f8a <tcp_close_shutdown+0x36>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	7d1b      	ldrb	r3, [r3, #20]
 8008f86:	2b07      	cmp	r3, #7
 8008f88:	d15e      	bne.n	8009048 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d104      	bne.n	8008f9c <tcp_close_shutdown+0x48>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008f9a:	d055      	beq.n	8009048 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	8b5b      	ldrh	r3, [r3, #26]
 8008fa0:	f003 0310 	and.w	r3, r3, #16
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d106      	bne.n	8008fb6 <tcp_close_shutdown+0x62>
 8008fa8:	4b52      	ldr	r3, [pc, #328]	; (80090f4 <tcp_close_shutdown+0x1a0>)
 8008faa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008fae:	4954      	ldr	r1, [pc, #336]	; (8009100 <tcp_close_shutdown+0x1ac>)
 8008fb0:	4852      	ldr	r0, [pc, #328]	; (80090fc <tcp_close_shutdown+0x1a8>)
 8008fb2:	f008 f95d 	bl	8011270 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008fbe:	687d      	ldr	r5, [r7, #4]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	8ad2      	ldrh	r2, [r2, #22]
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	8b09      	ldrh	r1, [r1, #24]
 8008fcc:	9102      	str	r1, [sp, #8]
 8008fce:	9201      	str	r2, [sp, #4]
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	462b      	mov	r3, r5
 8008fd4:	4622      	mov	r2, r4
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f004 fe8d 	bl	800dcf8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f001 f8c6 	bl	800a170 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008fe4:	4b47      	ldr	r3, [pc, #284]	; (8009104 <tcp_close_shutdown+0x1b0>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d105      	bne.n	8008ffa <tcp_close_shutdown+0xa6>
 8008fee:	4b45      	ldr	r3, [pc, #276]	; (8009104 <tcp_close_shutdown+0x1b0>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	4a43      	ldr	r2, [pc, #268]	; (8009104 <tcp_close_shutdown+0x1b0>)
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	e013      	b.n	8009022 <tcp_close_shutdown+0xce>
 8008ffa:	4b42      	ldr	r3, [pc, #264]	; (8009104 <tcp_close_shutdown+0x1b0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	e00c      	b.n	800901c <tcp_close_shutdown+0xc8>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	429a      	cmp	r2, r3
 800900a:	d104      	bne.n	8009016 <tcp_close_shutdown+0xc2>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68da      	ldr	r2, [r3, #12]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	60da      	str	r2, [r3, #12]
 8009014:	e005      	b.n	8009022 <tcp_close_shutdown+0xce>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	60fb      	str	r3, [r7, #12]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1ef      	bne.n	8009002 <tcp_close_shutdown+0xae>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	60da      	str	r2, [r3, #12]
 8009028:	4b37      	ldr	r3, [pc, #220]	; (8009108 <tcp_close_shutdown+0x1b4>)
 800902a:	2201      	movs	r2, #1
 800902c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800902e:	4b37      	ldr	r3, [pc, #220]	; (800910c <tcp_close_shutdown+0x1b8>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	429a      	cmp	r2, r3
 8009036:	d102      	bne.n	800903e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009038:	f003 fd5a 	bl	800caf0 <tcp_trigger_input_pcb_close>
 800903c:	e002      	b.n	8009044 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff fed6 	bl	8008df0 <tcp_free>
      }
      return ERR_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	e050      	b.n	80090ea <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	7d1b      	ldrb	r3, [r3, #20]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d03b      	beq.n	80090c8 <tcp_close_shutdown+0x174>
 8009050:	2b02      	cmp	r3, #2
 8009052:	dc44      	bgt.n	80090de <tcp_close_shutdown+0x18a>
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <tcp_close_shutdown+0x10a>
 8009058:	2b01      	cmp	r3, #1
 800905a:	d02a      	beq.n	80090b2 <tcp_close_shutdown+0x15e>
 800905c:	e03f      	b.n	80090de <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	8adb      	ldrh	r3, [r3, #22]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d021      	beq.n	80090aa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009066:	4b2a      	ldr	r3, [pc, #168]	; (8009110 <tcp_close_shutdown+0x1bc>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	429a      	cmp	r2, r3
 800906e:	d105      	bne.n	800907c <tcp_close_shutdown+0x128>
 8009070:	4b27      	ldr	r3, [pc, #156]	; (8009110 <tcp_close_shutdown+0x1bc>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	4a26      	ldr	r2, [pc, #152]	; (8009110 <tcp_close_shutdown+0x1bc>)
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	e013      	b.n	80090a4 <tcp_close_shutdown+0x150>
 800907c:	4b24      	ldr	r3, [pc, #144]	; (8009110 <tcp_close_shutdown+0x1bc>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	60bb      	str	r3, [r7, #8]
 8009082:	e00c      	b.n	800909e <tcp_close_shutdown+0x14a>
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	429a      	cmp	r2, r3
 800908c:	d104      	bne.n	8009098 <tcp_close_shutdown+0x144>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	60da      	str	r2, [r3, #12]
 8009096:	e005      	b.n	80090a4 <tcp_close_shutdown+0x150>
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	60bb      	str	r3, [r7, #8]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1ef      	bne.n	8009084 <tcp_close_shutdown+0x130>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7ff fea0 	bl	8008df0 <tcp_free>
      break;
 80090b0:	e01a      	b.n	80090e8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff ff14 	bl	8008ee0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80090b8:	6879      	ldr	r1, [r7, #4]
 80090ba:	4816      	ldr	r0, [pc, #88]	; (8009114 <tcp_close_shutdown+0x1c0>)
 80090bc:	f001 f8a8 	bl	800a210 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7ff feb1 	bl	8008e28 <tcp_free_listen>
      break;
 80090c6:	e00f      	b.n	80090e8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80090c8:	6879      	ldr	r1, [r7, #4]
 80090ca:	480e      	ldr	r0, [pc, #56]	; (8009104 <tcp_close_shutdown+0x1b0>)
 80090cc:	f001 f8a0 	bl	800a210 <tcp_pcb_remove>
 80090d0:	4b0d      	ldr	r3, [pc, #52]	; (8009108 <tcp_close_shutdown+0x1b4>)
 80090d2:	2201      	movs	r2, #1
 80090d4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7ff fe8a 	bl	8008df0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80090dc:	e004      	b.n	80090e8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f81a 	bl	8009118 <tcp_close_shutdown_fin>
 80090e4:	4603      	mov	r3, r0
 80090e6:	e000      	b.n	80090ea <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bdb0      	pop	{r4, r5, r7, pc}
 80090f2:	bf00      	nop
 80090f4:	08012c7c 	.word	0x08012c7c
 80090f8:	08012d50 	.word	0x08012d50
 80090fc:	08012cc0 	.word	0x08012cc0
 8009100:	08012d70 	.word	0x08012d70
 8009104:	2000ab10 	.word	0x2000ab10
 8009108:	2000ab0c 	.word	0x2000ab0c
 800910c:	2000ab24 	.word	0x2000ab24
 8009110:	2000ab1c 	.word	0x2000ab1c
 8009114:	2000ab18 	.word	0x2000ab18

08009118 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d106      	bne.n	8009134 <tcp_close_shutdown_fin+0x1c>
 8009126:	4b2e      	ldr	r3, [pc, #184]	; (80091e0 <tcp_close_shutdown_fin+0xc8>)
 8009128:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800912c:	492d      	ldr	r1, [pc, #180]	; (80091e4 <tcp_close_shutdown_fin+0xcc>)
 800912e:	482e      	ldr	r0, [pc, #184]	; (80091e8 <tcp_close_shutdown_fin+0xd0>)
 8009130:	f008 f89e 	bl	8011270 <iprintf>

  switch (pcb->state) {
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	7d1b      	ldrb	r3, [r3, #20]
 8009138:	2b07      	cmp	r3, #7
 800913a:	d020      	beq.n	800917e <tcp_close_shutdown_fin+0x66>
 800913c:	2b07      	cmp	r3, #7
 800913e:	dc2b      	bgt.n	8009198 <tcp_close_shutdown_fin+0x80>
 8009140:	2b03      	cmp	r3, #3
 8009142:	d002      	beq.n	800914a <tcp_close_shutdown_fin+0x32>
 8009144:	2b04      	cmp	r3, #4
 8009146:	d00d      	beq.n	8009164 <tcp_close_shutdown_fin+0x4c>
 8009148:	e026      	b.n	8009198 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f003 fee2 	bl	800cf14 <tcp_send_fin>
 8009150:	4603      	mov	r3, r0
 8009152:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d11f      	bne.n	800919c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2205      	movs	r2, #5
 8009160:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009162:	e01b      	b.n	800919c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f003 fed5 	bl	800cf14 <tcp_send_fin>
 800916a:	4603      	mov	r3, r0
 800916c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800916e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d114      	bne.n	80091a0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2205      	movs	r2, #5
 800917a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800917c:	e010      	b.n	80091a0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f003 fec8 	bl	800cf14 <tcp_send_fin>
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d109      	bne.n	80091a4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2209      	movs	r2, #9
 8009194:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009196:	e005      	b.n	80091a4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	e01c      	b.n	80091d6 <tcp_close_shutdown_fin+0xbe>
      break;
 800919c:	bf00      	nop
 800919e:	e002      	b.n	80091a6 <tcp_close_shutdown_fin+0x8e>
      break;
 80091a0:	bf00      	nop
 80091a2:	e000      	b.n	80091a6 <tcp_close_shutdown_fin+0x8e>
      break;
 80091a4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80091a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d103      	bne.n	80091b6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f003 ffee 	bl	800d190 <tcp_output>
 80091b4:	e00d      	b.n	80091d2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80091b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091be:	d108      	bne.n	80091d2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	8b5b      	ldrh	r3, [r3, #26]
 80091c4:	f043 0308 	orr.w	r3, r3, #8
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	e001      	b.n	80091d6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80091d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	08012c7c 	.word	0x08012c7c
 80091e4:	08012d2c 	.word	0x08012d2c
 80091e8:	08012cc0 	.word	0x08012cc0

080091ec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d109      	bne.n	800920e <tcp_close+0x22>
 80091fa:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <tcp_close+0x4c>)
 80091fc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009200:	490e      	ldr	r1, [pc, #56]	; (800923c <tcp_close+0x50>)
 8009202:	480f      	ldr	r0, [pc, #60]	; (8009240 <tcp_close+0x54>)
 8009204:	f008 f834 	bl	8011270 <iprintf>
 8009208:	f06f 030f 	mvn.w	r3, #15
 800920c:	e00f      	b.n	800922e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	7d1b      	ldrb	r3, [r3, #20]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d006      	beq.n	8009224 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	8b5b      	ldrh	r3, [r3, #26]
 800921a:	f043 0310 	orr.w	r3, r3, #16
 800921e:	b29a      	uxth	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009224:	2101      	movs	r1, #1
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff fe94 	bl	8008f54 <tcp_close_shutdown>
 800922c:	4603      	mov	r3, r0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	08012c7c 	.word	0x08012c7c
 800923c:	08012d8c 	.word	0x08012d8c
 8009240:	08012cc0 	.word	0x08012cc0

08009244 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b08e      	sub	sp, #56	; 0x38
 8009248:	af04      	add	r7, sp, #16
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d107      	bne.n	8009264 <tcp_abandon+0x20>
 8009254:	4b52      	ldr	r3, [pc, #328]	; (80093a0 <tcp_abandon+0x15c>)
 8009256:	f240 223d 	movw	r2, #573	; 0x23d
 800925a:	4952      	ldr	r1, [pc, #328]	; (80093a4 <tcp_abandon+0x160>)
 800925c:	4852      	ldr	r0, [pc, #328]	; (80093a8 <tcp_abandon+0x164>)
 800925e:	f008 f807 	bl	8011270 <iprintf>
 8009262:	e099      	b.n	8009398 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	7d1b      	ldrb	r3, [r3, #20]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d106      	bne.n	800927a <tcp_abandon+0x36>
 800926c:	4b4c      	ldr	r3, [pc, #304]	; (80093a0 <tcp_abandon+0x15c>)
 800926e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009272:	494e      	ldr	r1, [pc, #312]	; (80093ac <tcp_abandon+0x168>)
 8009274:	484c      	ldr	r0, [pc, #304]	; (80093a8 <tcp_abandon+0x164>)
 8009276:	f007 fffb 	bl	8011270 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	7d1b      	ldrb	r3, [r3, #20]
 800927e:	2b0a      	cmp	r3, #10
 8009280:	d107      	bne.n	8009292 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	484a      	ldr	r0, [pc, #296]	; (80093b0 <tcp_abandon+0x16c>)
 8009286:	f000 ffc3 	bl	800a210 <tcp_pcb_remove>
    tcp_free(pcb);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff fdb0 	bl	8008df0 <tcp_free>
 8009290:	e082      	b.n	8009398 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800929e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	7d1b      	ldrb	r3, [r3, #20]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d126      	bne.n	800930a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	8adb      	ldrh	r3, [r3, #22]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d02e      	beq.n	8009322 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80092c4:	4b3b      	ldr	r3, [pc, #236]	; (80093b4 <tcp_abandon+0x170>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d105      	bne.n	80092da <tcp_abandon+0x96>
 80092ce:	4b39      	ldr	r3, [pc, #228]	; (80093b4 <tcp_abandon+0x170>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	4a37      	ldr	r2, [pc, #220]	; (80093b4 <tcp_abandon+0x170>)
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	e013      	b.n	8009302 <tcp_abandon+0xbe>
 80092da:	4b36      	ldr	r3, [pc, #216]	; (80093b4 <tcp_abandon+0x170>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	61fb      	str	r3, [r7, #28]
 80092e0:	e00c      	b.n	80092fc <tcp_abandon+0xb8>
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d104      	bne.n	80092f6 <tcp_abandon+0xb2>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	60da      	str	r2, [r3, #12]
 80092f4:	e005      	b.n	8009302 <tcp_abandon+0xbe>
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	61fb      	str	r3, [r7, #28]
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1ef      	bne.n	80092e2 <tcp_abandon+0x9e>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	60da      	str	r2, [r3, #12]
 8009308:	e00b      	b.n	8009322 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	8adb      	ldrh	r3, [r3, #22]
 8009312:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	4828      	ldr	r0, [pc, #160]	; (80093b8 <tcp_abandon+0x174>)
 8009318:	f000 ff7a 	bl	800a210 <tcp_pcb_remove>
 800931c:	4b27      	ldr	r3, [pc, #156]	; (80093bc <tcp_abandon+0x178>)
 800931e:	2201      	movs	r2, #1
 8009320:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009326:	2b00      	cmp	r3, #0
 8009328:	d004      	beq.n	8009334 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932e:	4618      	mov	r0, r3
 8009330:	f000 fd1c 	bl	8009d6c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009338:	2b00      	cmp	r3, #0
 800933a:	d004      	beq.n	8009346 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009340:	4618      	mov	r0, r3
 8009342:	f000 fd13 	bl	8009d6c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800934a:	2b00      	cmp	r3, #0
 800934c:	d004      	beq.n	8009358 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fd0a 	bl	8009d6c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00e      	beq.n	800937c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3304      	adds	r3, #4
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	8b12      	ldrh	r2, [r2, #24]
 8009368:	9202      	str	r2, [sp, #8]
 800936a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800936c:	9201      	str	r2, [sp, #4]
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	460b      	mov	r3, r1
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	69b9      	ldr	r1, [r7, #24]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f004 fcbe 	bl	800dcf8 <tcp_rst>
    }
    last_state = pcb->state;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	7d1b      	ldrb	r3, [r3, #20]
 8009380:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff fd34 	bl	8008df0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d004      	beq.n	8009398 <tcp_abandon+0x154>
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	f06f 010c 	mvn.w	r1, #12
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	4798      	blx	r3
  }
}
 8009398:	3728      	adds	r7, #40	; 0x28
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	08012c7c 	.word	0x08012c7c
 80093a4:	08012dc0 	.word	0x08012dc0
 80093a8:	08012cc0 	.word	0x08012cc0
 80093ac:	08012ddc 	.word	0x08012ddc
 80093b0:	2000ab20 	.word	0x2000ab20
 80093b4:	2000ab1c 	.word	0x2000ab1c
 80093b8:	2000ab10 	.word	0x2000ab10
 80093bc:	2000ab0c 	.word	0x2000ab0c

080093c0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80093c8:	2101      	movs	r1, #1
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7ff ff3a 	bl	8009244 <tcp_abandon>
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d106      	bne.n	80093f4 <tcp_update_rcv_ann_wnd+0x1c>
 80093e6:	4b25      	ldr	r3, [pc, #148]	; (800947c <tcp_update_rcv_ann_wnd+0xa4>)
 80093e8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80093ec:	4924      	ldr	r1, [pc, #144]	; (8009480 <tcp_update_rcv_ann_wnd+0xa8>)
 80093ee:	4825      	ldr	r0, [pc, #148]	; (8009484 <tcp_update_rcv_ann_wnd+0xac>)
 80093f0:	f007 ff3e 	bl	8011270 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80093fc:	4413      	add	r3, r2
 80093fe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009408:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800940c:	bf28      	it	cs
 800940e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009412:	b292      	uxth	r2, r2
 8009414:	4413      	add	r3, r2
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	db08      	blt.n	8009430 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	e020      	b.n	8009472 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	dd03      	ble.n	8009446 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009444:	e014      	b.n	8009470 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009458:	d306      	bcc.n	8009468 <tcp_update_rcv_ann_wnd+0x90>
 800945a:	4b08      	ldr	r3, [pc, #32]	; (800947c <tcp_update_rcv_ann_wnd+0xa4>)
 800945c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009460:	4909      	ldr	r1, [pc, #36]	; (8009488 <tcp_update_rcv_ann_wnd+0xb0>)
 8009462:	4808      	ldr	r0, [pc, #32]	; (8009484 <tcp_update_rcv_ann_wnd+0xac>)
 8009464:	f007 ff04 	bl	8011270 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	b29a      	uxth	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009470:	2300      	movs	r3, #0
  }
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	08012c7c 	.word	0x08012c7c
 8009480:	08012ed8 	.word	0x08012ed8
 8009484:	08012cc0 	.word	0x08012cc0
 8009488:	08012efc 	.word	0x08012efc

0800948c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d107      	bne.n	80094ae <tcp_recved+0x22>
 800949e:	4b1f      	ldr	r3, [pc, #124]	; (800951c <tcp_recved+0x90>)
 80094a0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80094a4:	491e      	ldr	r1, [pc, #120]	; (8009520 <tcp_recved+0x94>)
 80094a6:	481f      	ldr	r0, [pc, #124]	; (8009524 <tcp_recved+0x98>)
 80094a8:	f007 fee2 	bl	8011270 <iprintf>
 80094ac:	e032      	b.n	8009514 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	7d1b      	ldrb	r3, [r3, #20]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d106      	bne.n	80094c4 <tcp_recved+0x38>
 80094b6:	4b19      	ldr	r3, [pc, #100]	; (800951c <tcp_recved+0x90>)
 80094b8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80094bc:	491a      	ldr	r1, [pc, #104]	; (8009528 <tcp_recved+0x9c>)
 80094be:	4819      	ldr	r0, [pc, #100]	; (8009524 <tcp_recved+0x98>)
 80094c0:	f007 fed6 	bl	8011270 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80094c8:	887b      	ldrh	r3, [r7, #2]
 80094ca:	4413      	add	r3, r2
 80094cc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80094ce:	89fb      	ldrh	r3, [r7, #14]
 80094d0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80094d4:	d804      	bhi.n	80094e0 <tcp_recved+0x54>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094da:	89fa      	ldrh	r2, [r7, #14]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d204      	bcs.n	80094ea <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80094e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80094e8:	e002      	b.n	80094f0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	89fa      	ldrh	r2, [r7, #14]
 80094ee:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff ff71 	bl	80093d8 <tcp_update_rcv_ann_wnd>
 80094f6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80094fe:	d309      	bcc.n	8009514 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	8b5b      	ldrh	r3, [r3, #26]
 8009504:	f043 0302 	orr.w	r3, r3, #2
 8009508:	b29a      	uxth	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f003 fe3e 	bl	800d190 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	08012c7c 	.word	0x08012c7c
 8009520:	08012f18 	.word	0x08012f18
 8009524:	08012cc0 	.word	0x08012cc0
 8009528:	08012f30 	.word	0x08012f30

0800952c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800952c:	b5b0      	push	{r4, r5, r7, lr}
 800952e:	b090      	sub	sp, #64	; 0x40
 8009530:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009538:	4b94      	ldr	r3, [pc, #592]	; (800978c <tcp_slowtmr+0x260>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3301      	adds	r3, #1
 800953e:	4a93      	ldr	r2, [pc, #588]	; (800978c <tcp_slowtmr+0x260>)
 8009540:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009542:	4b93      	ldr	r3, [pc, #588]	; (8009790 <tcp_slowtmr+0x264>)
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	3301      	adds	r3, #1
 8009548:	b2da      	uxtb	r2, r3
 800954a:	4b91      	ldr	r3, [pc, #580]	; (8009790 <tcp_slowtmr+0x264>)
 800954c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800954e:	2300      	movs	r3, #0
 8009550:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009552:	4b90      	ldr	r3, [pc, #576]	; (8009794 <tcp_slowtmr+0x268>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009558:	e29f      	b.n	8009a9a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800955a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955c:	7d1b      	ldrb	r3, [r3, #20]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d106      	bne.n	8009570 <tcp_slowtmr+0x44>
 8009562:	4b8d      	ldr	r3, [pc, #564]	; (8009798 <tcp_slowtmr+0x26c>)
 8009564:	f240 42be 	movw	r2, #1214	; 0x4be
 8009568:	498c      	ldr	r1, [pc, #560]	; (800979c <tcp_slowtmr+0x270>)
 800956a:	488d      	ldr	r0, [pc, #564]	; (80097a0 <tcp_slowtmr+0x274>)
 800956c:	f007 fe80 	bl	8011270 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009572:	7d1b      	ldrb	r3, [r3, #20]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d106      	bne.n	8009586 <tcp_slowtmr+0x5a>
 8009578:	4b87      	ldr	r3, [pc, #540]	; (8009798 <tcp_slowtmr+0x26c>)
 800957a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800957e:	4989      	ldr	r1, [pc, #548]	; (80097a4 <tcp_slowtmr+0x278>)
 8009580:	4887      	ldr	r0, [pc, #540]	; (80097a0 <tcp_slowtmr+0x274>)
 8009582:	f007 fe75 	bl	8011270 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009588:	7d1b      	ldrb	r3, [r3, #20]
 800958a:	2b0a      	cmp	r3, #10
 800958c:	d106      	bne.n	800959c <tcp_slowtmr+0x70>
 800958e:	4b82      	ldr	r3, [pc, #520]	; (8009798 <tcp_slowtmr+0x26c>)
 8009590:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009594:	4984      	ldr	r1, [pc, #528]	; (80097a8 <tcp_slowtmr+0x27c>)
 8009596:	4882      	ldr	r0, [pc, #520]	; (80097a0 <tcp_slowtmr+0x274>)
 8009598:	f007 fe6a 	bl	8011270 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800959c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959e:	7f9a      	ldrb	r2, [r3, #30]
 80095a0:	4b7b      	ldr	r3, [pc, #492]	; (8009790 <tcp_slowtmr+0x264>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d105      	bne.n	80095b4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80095ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80095b2:	e272      	b.n	8009a9a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80095b4:	4b76      	ldr	r3, [pc, #472]	; (8009790 <tcp_slowtmr+0x264>)
 80095b6:	781a      	ldrb	r2, [r3, #0]
 80095b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ba:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80095c2:	2300      	movs	r3, #0
 80095c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80095c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ca:	7d1b      	ldrb	r3, [r3, #20]
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d10a      	bne.n	80095e6 <tcp_slowtmr+0xba>
 80095d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095d6:	2b05      	cmp	r3, #5
 80095d8:	d905      	bls.n	80095e6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80095da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095de:	3301      	adds	r3, #1
 80095e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095e4:	e11e      	b.n	8009824 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80095e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095ec:	2b0b      	cmp	r3, #11
 80095ee:	d905      	bls.n	80095fc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80095f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095f4:	3301      	adds	r3, #1
 80095f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095fa:	e113      	b.n	8009824 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80095fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009602:	2b00      	cmp	r3, #0
 8009604:	d075      	beq.n	80096f2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800960a:	2b00      	cmp	r3, #0
 800960c:	d006      	beq.n	800961c <tcp_slowtmr+0xf0>
 800960e:	4b62      	ldr	r3, [pc, #392]	; (8009798 <tcp_slowtmr+0x26c>)
 8009610:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009614:	4965      	ldr	r1, [pc, #404]	; (80097ac <tcp_slowtmr+0x280>)
 8009616:	4862      	ldr	r0, [pc, #392]	; (80097a0 <tcp_slowtmr+0x274>)
 8009618:	f007 fe2a 	bl	8011270 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800961c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d106      	bne.n	8009632 <tcp_slowtmr+0x106>
 8009624:	4b5c      	ldr	r3, [pc, #368]	; (8009798 <tcp_slowtmr+0x26c>)
 8009626:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800962a:	4961      	ldr	r1, [pc, #388]	; (80097b0 <tcp_slowtmr+0x284>)
 800962c:	485c      	ldr	r0, [pc, #368]	; (80097a0 <tcp_slowtmr+0x274>)
 800962e:	f007 fe1f 	bl	8011270 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009634:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009638:	2b0b      	cmp	r3, #11
 800963a:	d905      	bls.n	8009648 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800963c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009640:	3301      	adds	r3, #1
 8009642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009646:	e0ed      	b.n	8009824 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800964e:	3b01      	subs	r3, #1
 8009650:	4a58      	ldr	r2, [pc, #352]	; (80097b4 <tcp_slowtmr+0x288>)
 8009652:	5cd3      	ldrb	r3, [r2, r3]
 8009654:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009658:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800965c:	7c7a      	ldrb	r2, [r7, #17]
 800965e:	429a      	cmp	r2, r3
 8009660:	d907      	bls.n	8009672 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009664:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009668:	3301      	adds	r3, #1
 800966a:	b2da      	uxtb	r2, r3
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009674:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009678:	7c7a      	ldrb	r2, [r7, #17]
 800967a:	429a      	cmp	r2, r3
 800967c:	f200 80d2 	bhi.w	8009824 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009680:	2301      	movs	r3, #1
 8009682:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009686:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800968a:	2b00      	cmp	r3, #0
 800968c:	d108      	bne.n	80096a0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800968e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009690:	f004 fc26 	bl	800dee0 <tcp_zero_window_probe>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d014      	beq.n	80096c4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800969a:	2300      	movs	r3, #0
 800969c:	623b      	str	r3, [r7, #32]
 800969e:	e011      	b.n	80096c4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80096a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096a6:	4619      	mov	r1, r3
 80096a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096aa:	f003 faeb 	bl	800cc84 <tcp_split_unsent_seg>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d107      	bne.n	80096c4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80096b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096b6:	f003 fd6b 	bl	800d190 <tcp_output>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 80ac 	beq.w	8009824 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80096cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80096da:	2b06      	cmp	r3, #6
 80096dc:	f200 80a2 	bhi.w	8009824 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80096e6:	3301      	adds	r3, #1
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80096f0:	e098      	b.n	8009824 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80096f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	db0f      	blt.n	800971c <tcp_slowtmr+0x1f0>
 80096fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009702:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009706:	4293      	cmp	r3, r2
 8009708:	d008      	beq.n	800971c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800970a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009710:	b29b      	uxth	r3, r3
 8009712:	3301      	adds	r3, #1
 8009714:	b29b      	uxth	r3, r3
 8009716:	b21a      	sxth	r2, r3
 8009718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800971c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009724:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009728:	429a      	cmp	r2, r3
 800972a:	db7b      	blt.n	8009824 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800972c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800972e:	f004 f821 	bl	800d774 <tcp_rexmit_rto_prepare>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d007      	beq.n	8009748 <tcp_slowtmr+0x21c>
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973c:	2b00      	cmp	r3, #0
 800973e:	d171      	bne.n	8009824 <tcp_slowtmr+0x2f8>
 8009740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009744:	2b00      	cmp	r3, #0
 8009746:	d06d      	beq.n	8009824 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974a:	7d1b      	ldrb	r3, [r3, #20]
 800974c:	2b02      	cmp	r3, #2
 800974e:	d03a      	beq.n	80097c6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009756:	2b0c      	cmp	r3, #12
 8009758:	bf28      	it	cs
 800975a:	230c      	movcs	r3, #12
 800975c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009764:	10db      	asrs	r3, r3, #3
 8009766:	b21b      	sxth	r3, r3
 8009768:	461a      	mov	r2, r3
 800976a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009770:	4413      	add	r3, r2
 8009772:	7efa      	ldrb	r2, [r7, #27]
 8009774:	4910      	ldr	r1, [pc, #64]	; (80097b8 <tcp_slowtmr+0x28c>)
 8009776:	5c8a      	ldrb	r2, [r1, r2]
 8009778:	4093      	lsls	r3, r2
 800977a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009782:	4293      	cmp	r3, r2
 8009784:	dc1a      	bgt.n	80097bc <tcp_slowtmr+0x290>
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	b21a      	sxth	r2, r3
 800978a:	e019      	b.n	80097c0 <tcp_slowtmr+0x294>
 800978c:	2000ab14 	.word	0x2000ab14
 8009790:	20004126 	.word	0x20004126
 8009794:	2000ab10 	.word	0x2000ab10
 8009798:	08012c7c 	.word	0x08012c7c
 800979c:	08012fc0 	.word	0x08012fc0
 80097a0:	08012cc0 	.word	0x08012cc0
 80097a4:	08012fec 	.word	0x08012fec
 80097a8:	08013018 	.word	0x08013018
 80097ac:	08013048 	.word	0x08013048
 80097b0:	0801307c 	.word	0x0801307c
 80097b4:	08014c88 	.word	0x08014c88
 80097b8:	08014c78 	.word	0x08014c78
 80097bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80097c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80097c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c8:	2200      	movs	r2, #0
 80097ca:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80097cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80097d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80097d8:	4293      	cmp	r3, r2
 80097da:	bf28      	it	cs
 80097dc:	4613      	movcs	r3, r2
 80097de:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80097e0:	8a7b      	ldrh	r3, [r7, #18]
 80097e2:	085b      	lsrs	r3, r3, #1
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80097f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097f6:	005b      	lsls	r3, r3, #1
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d206      	bcs.n	800980c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80097fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009800:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	b29a      	uxth	r2, r3
 8009806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009808:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800980c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009812:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009818:	2200      	movs	r2, #0
 800981a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800981e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009820:	f004 f818 	bl	800d854 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009826:	7d1b      	ldrb	r3, [r3, #20]
 8009828:	2b06      	cmp	r3, #6
 800982a:	d111      	bne.n	8009850 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800982c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982e:	8b5b      	ldrh	r3, [r3, #26]
 8009830:	f003 0310 	and.w	r3, r3, #16
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00b      	beq.n	8009850 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009838:	4b9d      	ldr	r3, [pc, #628]	; (8009ab0 <tcp_slowtmr+0x584>)
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	2b28      	cmp	r3, #40	; 0x28
 8009844:	d904      	bls.n	8009850 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800984a:	3301      	adds	r3, #1
 800984c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009852:	7a5b      	ldrb	r3, [r3, #9]
 8009854:	f003 0308 	and.w	r3, r3, #8
 8009858:	2b00      	cmp	r3, #0
 800985a:	d04c      	beq.n	80098f6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800985c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009860:	2b04      	cmp	r3, #4
 8009862:	d003      	beq.n	800986c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009866:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009868:	2b07      	cmp	r3, #7
 800986a:	d144      	bne.n	80098f6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800986c:	4b90      	ldr	r3, [pc, #576]	; (8009ab0 <tcp_slowtmr+0x584>)
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800987c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8009880:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009884:	498b      	ldr	r1, [pc, #556]	; (8009ab4 <tcp_slowtmr+0x588>)
 8009886:	fba1 1303 	umull	r1, r3, r1, r3
 800988a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800988c:	429a      	cmp	r2, r3
 800988e:	d90a      	bls.n	80098a6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009894:	3301      	adds	r3, #1
 8009896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800989a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800989e:	3301      	adds	r3, #1
 80098a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80098a4:	e027      	b.n	80098f6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80098a6:	4b82      	ldr	r3, [pc, #520]	; (8009ab0 <tcp_slowtmr+0x584>)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80098b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80098bc:	4618      	mov	r0, r3
 80098be:	4b7e      	ldr	r3, [pc, #504]	; (8009ab8 <tcp_slowtmr+0x58c>)
 80098c0:	fb03 f300 	mul.w	r3, r3, r0
 80098c4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80098c6:	497b      	ldr	r1, [pc, #492]	; (8009ab4 <tcp_slowtmr+0x588>)
 80098c8:	fba1 1303 	umull	r1, r3, r1, r3
 80098cc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d911      	bls.n	80098f6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80098d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098d4:	f004 fac4 	bl	800de60 <tcp_keepalive>
 80098d8:	4603      	mov	r3, r0
 80098da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80098de:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d107      	bne.n	80098f6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80098e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80098ec:	3301      	adds	r3, #1
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80098f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d011      	beq.n	8009922 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80098fe:	4b6c      	ldr	r3, [pc, #432]	; (8009ab0 <tcp_slowtmr+0x584>)
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	1ad2      	subs	r2, r2, r3
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800990e:	4619      	mov	r1, r3
 8009910:	460b      	mov	r3, r1
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	440b      	add	r3, r1
 8009916:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009918:	429a      	cmp	r2, r3
 800991a:	d302      	bcc.n	8009922 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800991c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800991e:	f000 fddb 	bl	800a4d8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009924:	7d1b      	ldrb	r3, [r3, #20]
 8009926:	2b03      	cmp	r3, #3
 8009928:	d10b      	bne.n	8009942 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800992a:	4b61      	ldr	r3, [pc, #388]	; (8009ab0 <tcp_slowtmr+0x584>)
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	6a1b      	ldr	r3, [r3, #32]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	2b28      	cmp	r3, #40	; 0x28
 8009936:	d904      	bls.n	8009942 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800993c:	3301      	adds	r3, #1
 800993e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009944:	7d1b      	ldrb	r3, [r3, #20]
 8009946:	2b09      	cmp	r3, #9
 8009948:	d10b      	bne.n	8009962 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800994a:	4b59      	ldr	r3, [pc, #356]	; (8009ab0 <tcp_slowtmr+0x584>)
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	2bf0      	cmp	r3, #240	; 0xf0
 8009956:	d904      	bls.n	8009962 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800995c:	3301      	adds	r3, #1
 800995e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009966:	2b00      	cmp	r3, #0
 8009968:	d060      	beq.n	8009a2c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009970:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009974:	f000 fbfc 	bl	800a170 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997a:	2b00      	cmp	r3, #0
 800997c:	d010      	beq.n	80099a0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800997e:	4b4f      	ldr	r3, [pc, #316]	; (8009abc <tcp_slowtmr+0x590>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009984:	429a      	cmp	r2, r3
 8009986:	d106      	bne.n	8009996 <tcp_slowtmr+0x46a>
 8009988:	4b4d      	ldr	r3, [pc, #308]	; (8009ac0 <tcp_slowtmr+0x594>)
 800998a:	f240 526d 	movw	r2, #1389	; 0x56d
 800998e:	494d      	ldr	r1, [pc, #308]	; (8009ac4 <tcp_slowtmr+0x598>)
 8009990:	484d      	ldr	r0, [pc, #308]	; (8009ac8 <tcp_slowtmr+0x59c>)
 8009992:	f007 fc6d 	bl	8011270 <iprintf>
        prev->next = pcb->next;
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	68da      	ldr	r2, [r3, #12]
 800999a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999c:	60da      	str	r2, [r3, #12]
 800999e:	e00f      	b.n	80099c0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80099a0:	4b46      	ldr	r3, [pc, #280]	; (8009abc <tcp_slowtmr+0x590>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d006      	beq.n	80099b8 <tcp_slowtmr+0x48c>
 80099aa:	4b45      	ldr	r3, [pc, #276]	; (8009ac0 <tcp_slowtmr+0x594>)
 80099ac:	f240 5271 	movw	r2, #1393	; 0x571
 80099b0:	4946      	ldr	r1, [pc, #280]	; (8009acc <tcp_slowtmr+0x5a0>)
 80099b2:	4845      	ldr	r0, [pc, #276]	; (8009ac8 <tcp_slowtmr+0x59c>)
 80099b4:	f007 fc5c 	bl	8011270 <iprintf>
        tcp_active_pcbs = pcb->next;
 80099b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	4a3f      	ldr	r2, [pc, #252]	; (8009abc <tcp_slowtmr+0x590>)
 80099be:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80099c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d013      	beq.n	80099f0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80099c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80099cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80099d0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80099d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d4:	3304      	adds	r3, #4
 80099d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099d8:	8ad2      	ldrh	r2, [r2, #22]
 80099da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099dc:	8b09      	ldrh	r1, [r1, #24]
 80099de:	9102      	str	r1, [sp, #8]
 80099e0:	9201      	str	r2, [sp, #4]
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	462b      	mov	r3, r5
 80099e6:	4622      	mov	r2, r4
 80099e8:	4601      	mov	r1, r0
 80099ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099ec:	f004 f984 	bl	800dcf8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80099f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f8:	7d1b      	ldrb	r3, [r3, #20]
 80099fa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80099fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009a06:	6838      	ldr	r0, [r7, #0]
 8009a08:	f7ff f9f2 	bl	8008df0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009a0c:	4b30      	ldr	r3, [pc, #192]	; (8009ad0 <tcp_slowtmr+0x5a4>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d004      	beq.n	8009a22 <tcp_slowtmr+0x4f6>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f06f 010c 	mvn.w	r1, #12
 8009a1e:	68b8      	ldr	r0, [r7, #8]
 8009a20:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009a22:	4b2b      	ldr	r3, [pc, #172]	; (8009ad0 <tcp_slowtmr+0x5a4>)
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d037      	beq.n	8009a9a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8009a2a:	e590      	b.n	800954e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a38:	7f1b      	ldrb	r3, [r3, #28]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a44:	7f1a      	ldrb	r2, [r3, #28]
 8009a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a48:	7f5b      	ldrb	r3, [r3, #29]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d325      	bcc.n	8009a9a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	2200      	movs	r2, #0
 8009a52:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009a54:	4b1e      	ldr	r3, [pc, #120]	; (8009ad0 <tcp_slowtmr+0x5a4>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00b      	beq.n	8009a7c <tcp_slowtmr+0x550>
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a6c:	6912      	ldr	r2, [r2, #16]
 8009a6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a70:	4610      	mov	r0, r2
 8009a72:	4798      	blx	r3
 8009a74:	4603      	mov	r3, r0
 8009a76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009a7a:	e002      	b.n	8009a82 <tcp_slowtmr+0x556>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009a82:	4b13      	ldr	r3, [pc, #76]	; (8009ad0 <tcp_slowtmr+0x5a4>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d000      	beq.n	8009a8c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8009a8a:	e560      	b.n	800954e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009a8c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d102      	bne.n	8009a9a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a96:	f003 fb7b 	bl	800d190 <tcp_output>
  while (pcb != NULL) {
 8009a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f47f ad5c 	bne.w	800955a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <tcp_slowtmr+0x5a8>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009aac:	e067      	b.n	8009b7e <tcp_slowtmr+0x652>
 8009aae:	bf00      	nop
 8009ab0:	2000ab14 	.word	0x2000ab14
 8009ab4:	10624dd3 	.word	0x10624dd3
 8009ab8:	000124f8 	.word	0x000124f8
 8009abc:	2000ab10 	.word	0x2000ab10
 8009ac0:	08012c7c 	.word	0x08012c7c
 8009ac4:	080130b4 	.word	0x080130b4
 8009ac8:	08012cc0 	.word	0x08012cc0
 8009acc:	080130e0 	.word	0x080130e0
 8009ad0:	2000ab0c 	.word	0x2000ab0c
 8009ad4:	2000ab20 	.word	0x2000ab20
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ada:	7d1b      	ldrb	r3, [r3, #20]
 8009adc:	2b0a      	cmp	r3, #10
 8009ade:	d006      	beq.n	8009aee <tcp_slowtmr+0x5c2>
 8009ae0:	4b2b      	ldr	r3, [pc, #172]	; (8009b90 <tcp_slowtmr+0x664>)
 8009ae2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009ae6:	492b      	ldr	r1, [pc, #172]	; (8009b94 <tcp_slowtmr+0x668>)
 8009ae8:	482b      	ldr	r0, [pc, #172]	; (8009b98 <tcp_slowtmr+0x66c>)
 8009aea:	f007 fbc1 	bl	8011270 <iprintf>
    pcb_remove = 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009af4:	4b29      	ldr	r3, [pc, #164]	; (8009b9c <tcp_slowtmr+0x670>)
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afa:	6a1b      	ldr	r3, [r3, #32]
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	2bf0      	cmp	r3, #240	; 0xf0
 8009b00:	d904      	bls.n	8009b0c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b06:	3301      	adds	r3, #1
 8009b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d02f      	beq.n	8009b74 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b16:	f000 fb2b 	bl	800a170 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d010      	beq.n	8009b42 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009b20:	4b1f      	ldr	r3, [pc, #124]	; (8009ba0 <tcp_slowtmr+0x674>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d106      	bne.n	8009b38 <tcp_slowtmr+0x60c>
 8009b2a:	4b19      	ldr	r3, [pc, #100]	; (8009b90 <tcp_slowtmr+0x664>)
 8009b2c:	f240 52af 	movw	r2, #1455	; 0x5af
 8009b30:	491c      	ldr	r1, [pc, #112]	; (8009ba4 <tcp_slowtmr+0x678>)
 8009b32:	4819      	ldr	r0, [pc, #100]	; (8009b98 <tcp_slowtmr+0x66c>)
 8009b34:	f007 fb9c 	bl	8011270 <iprintf>
        prev->next = pcb->next;
 8009b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3a:	68da      	ldr	r2, [r3, #12]
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	60da      	str	r2, [r3, #12]
 8009b40:	e00f      	b.n	8009b62 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009b42:	4b17      	ldr	r3, [pc, #92]	; (8009ba0 <tcp_slowtmr+0x674>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d006      	beq.n	8009b5a <tcp_slowtmr+0x62e>
 8009b4c:	4b10      	ldr	r3, [pc, #64]	; (8009b90 <tcp_slowtmr+0x664>)
 8009b4e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009b52:	4915      	ldr	r1, [pc, #84]	; (8009ba8 <tcp_slowtmr+0x67c>)
 8009b54:	4810      	ldr	r0, [pc, #64]	; (8009b98 <tcp_slowtmr+0x66c>)
 8009b56:	f007 fb8b 	bl	8011270 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	4a10      	ldr	r2, [pc, #64]	; (8009ba0 <tcp_slowtmr+0x674>)
 8009b60:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b64:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009b6c:	69f8      	ldr	r0, [r7, #28]
 8009b6e:	f7ff f93f 	bl	8008df0 <tcp_free>
 8009b72:	e004      	b.n	8009b7e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b76:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1a9      	bne.n	8009ad8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop
 8009b88:	3730      	adds	r7, #48	; 0x30
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	08012c7c 	.word	0x08012c7c
 8009b94:	0801310c 	.word	0x0801310c
 8009b98:	08012cc0 	.word	0x08012cc0
 8009b9c:	2000ab14 	.word	0x2000ab14
 8009ba0:	2000ab20 	.word	0x2000ab20
 8009ba4:	0801313c 	.word	0x0801313c
 8009ba8:	08013164 	.word	0x08013164

08009bac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009bb2:	4b2d      	ldr	r3, [pc, #180]	; (8009c68 <tcp_fasttmr+0xbc>)
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	4b2b      	ldr	r3, [pc, #172]	; (8009c68 <tcp_fasttmr+0xbc>)
 8009bbc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009bbe:	4b2b      	ldr	r3, [pc, #172]	; (8009c6c <tcp_fasttmr+0xc0>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009bc4:	e048      	b.n	8009c58 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	7f9a      	ldrb	r2, [r3, #30]
 8009bca:	4b27      	ldr	r3, [pc, #156]	; (8009c68 <tcp_fasttmr+0xbc>)
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d03f      	beq.n	8009c52 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009bd2:	4b25      	ldr	r3, [pc, #148]	; (8009c68 <tcp_fasttmr+0xbc>)
 8009bd4:	781a      	ldrb	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	8b5b      	ldrh	r3, [r3, #26]
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d010      	beq.n	8009c08 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	8b5b      	ldrh	r3, [r3, #26]
 8009bea:	f043 0302 	orr.w	r3, r3, #2
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f003 facb 	bl	800d190 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	8b5b      	ldrh	r3, [r3, #26]
 8009bfe:	f023 0303 	bic.w	r3, r3, #3
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	8b5b      	ldrh	r3, [r3, #26]
 8009c0c:	f003 0308 	and.w	r3, r3, #8
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d009      	beq.n	8009c28 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	8b5b      	ldrh	r3, [r3, #26]
 8009c18:	f023 0308 	bic.w	r3, r3, #8
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7ff fa78 	bl	8009118 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00a      	beq.n	8009c4c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009c36:	4b0e      	ldr	r3, [pc, #56]	; (8009c70 <tcp_fasttmr+0xc4>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f819 	bl	8009c74 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009c42:	4b0b      	ldr	r3, [pc, #44]	; (8009c70 <tcp_fasttmr+0xc4>)
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d000      	beq.n	8009c4c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009c4a:	e7b8      	b.n	8009bbe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	607b      	str	r3, [r7, #4]
 8009c50:	e002      	b.n	8009c58 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1b3      	bne.n	8009bc6 <tcp_fasttmr+0x1a>
    }
  }
}
 8009c5e:	bf00      	nop
 8009c60:	bf00      	nop
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	20004126 	.word	0x20004126
 8009c6c:	2000ab10 	.word	0x2000ab10
 8009c70:	2000ab0c 	.word	0x2000ab0c

08009c74 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009c74:	b590      	push	{r4, r7, lr}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d109      	bne.n	8009c96 <tcp_process_refused_data+0x22>
 8009c82:	4b37      	ldr	r3, [pc, #220]	; (8009d60 <tcp_process_refused_data+0xec>)
 8009c84:	f240 6209 	movw	r2, #1545	; 0x609
 8009c88:	4936      	ldr	r1, [pc, #216]	; (8009d64 <tcp_process_refused_data+0xf0>)
 8009c8a:	4837      	ldr	r0, [pc, #220]	; (8009d68 <tcp_process_refused_data+0xf4>)
 8009c8c:	f007 faf0 	bl	8011270 <iprintf>
 8009c90:	f06f 030f 	mvn.w	r3, #15
 8009c94:	e060      	b.n	8009d58 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c9a:	7b5b      	ldrb	r3, [r3, #13]
 8009c9c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ca2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00b      	beq.n	8009ccc <tcp_process_refused_data+0x58>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6918      	ldr	r0, [r3, #16]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	47a0      	blx	r4
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73fb      	strb	r3, [r7, #15]
 8009cca:	e007      	b.n	8009cdc <tcp_process_refused_data+0x68>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	6879      	ldr	r1, [r7, #4]
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	f000 f8a4 	bl	8009e20 <tcp_recv_null>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d12a      	bne.n	8009d3a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
 8009ce6:	f003 0320 	and.w	r3, r3, #32
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d033      	beq.n	8009d56 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cf2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009cf6:	d005      	beq.n	8009d04 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00b      	beq.n	8009d26 <tcp_process_refused_data+0xb2>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6918      	ldr	r0, [r3, #16]
 8009d18:	2300      	movs	r3, #0
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	6879      	ldr	r1, [r7, #4]
 8009d1e:	47a0      	blx	r4
 8009d20:	4603      	mov	r3, r0
 8009d22:	73fb      	strb	r3, [r7, #15]
 8009d24:	e001      	b.n	8009d2a <tcp_process_refused_data+0xb6>
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d2e:	f113 0f0d 	cmn.w	r3, #13
 8009d32:	d110      	bne.n	8009d56 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009d34:	f06f 030c 	mvn.w	r3, #12
 8009d38:	e00e      	b.n	8009d58 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d3e:	f113 0f0d 	cmn.w	r3, #13
 8009d42:	d102      	bne.n	8009d4a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009d44:	f06f 030c 	mvn.w	r3, #12
 8009d48:	e006      	b.n	8009d58 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009d50:	f06f 0304 	mvn.w	r3, #4
 8009d54:	e000      	b.n	8009d58 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd90      	pop	{r4, r7, pc}
 8009d60:	08012c7c 	.word	0x08012c7c
 8009d64:	0801318c 	.word	0x0801318c
 8009d68:	08012cc0 	.word	0x08012cc0

08009d6c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009d74:	e007      	b.n	8009d86 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f80a 	bl	8009d96 <tcp_seg_free>
    seg = next;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1f4      	bne.n	8009d76 <tcp_segs_free+0xa>
  }
}
 8009d8c:	bf00      	nop
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00c      	beq.n	8009dbe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d004      	beq.n	8009db6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe fd71 	bl	8008898 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	2003      	movs	r0, #3
 8009dba:	f7fd fec9 	bl	8007b50 <memp_free>
  }
}
 8009dbe:	bf00      	nop
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
	...

08009dc8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d106      	bne.n	8009de4 <tcp_seg_copy+0x1c>
 8009dd6:	4b0f      	ldr	r3, [pc, #60]	; (8009e14 <tcp_seg_copy+0x4c>)
 8009dd8:	f240 6282 	movw	r2, #1666	; 0x682
 8009ddc:	490e      	ldr	r1, [pc, #56]	; (8009e18 <tcp_seg_copy+0x50>)
 8009dde:	480f      	ldr	r0, [pc, #60]	; (8009e1c <tcp_seg_copy+0x54>)
 8009de0:	f007 fa46 	bl	8011270 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009de4:	2003      	movs	r0, #3
 8009de6:	f7fd fe61 	bl	8007aac <memp_malloc>
 8009dea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <tcp_seg_copy+0x2e>
    return NULL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	e00a      	b.n	8009e0c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009df6:	2210      	movs	r2, #16
 8009df8:	6879      	ldr	r1, [r7, #4]
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f007 f978 	bl	80110f0 <memcpy>
  pbuf_ref(cseg->p);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fe fded 	bl	80089e4 <pbuf_ref>
  return cseg;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	08012c7c 	.word	0x08012c7c
 8009e18:	080131d0 	.word	0x080131d0
 8009e1c:	08012cc0 	.word	0x08012cc0

08009e20 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d109      	bne.n	8009e48 <tcp_recv_null+0x28>
 8009e34:	4b12      	ldr	r3, [pc, #72]	; (8009e80 <tcp_recv_null+0x60>)
 8009e36:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009e3a:	4912      	ldr	r1, [pc, #72]	; (8009e84 <tcp_recv_null+0x64>)
 8009e3c:	4812      	ldr	r0, [pc, #72]	; (8009e88 <tcp_recv_null+0x68>)
 8009e3e:	f007 fa17 	bl	8011270 <iprintf>
 8009e42:	f06f 030f 	mvn.w	r3, #15
 8009e46:	e016      	b.n	8009e76 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d009      	beq.n	8009e62 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	891b      	ldrh	r3, [r3, #8]
 8009e52:	4619      	mov	r1, r3
 8009e54:	68b8      	ldr	r0, [r7, #8]
 8009e56:	f7ff fb19 	bl	800948c <tcp_recved>
    pbuf_free(p);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7fe fd1c 	bl	8008898 <pbuf_free>
 8009e60:	e008      	b.n	8009e74 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d104      	bne.n	8009e74 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009e6a:	68b8      	ldr	r0, [r7, #8]
 8009e6c:	f7ff f9be 	bl	80091ec <tcp_close>
 8009e70:	4603      	mov	r3, r0
 8009e72:	e000      	b.n	8009e76 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	08012c7c 	.word	0x08012c7c
 8009e84:	080131ec 	.word	0x080131ec
 8009e88:	08012cc0 	.word	0x08012cc0

08009e8c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	db01      	blt.n	8009ea2 <tcp_kill_prio+0x16>
 8009e9e:	79fb      	ldrb	r3, [r7, #7]
 8009ea0:	e000      	b.n	8009ea4 <tcp_kill_prio+0x18>
 8009ea2:	237f      	movs	r3, #127	; 0x7f
 8009ea4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009ea6:	7afb      	ldrb	r3, [r7, #11]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d034      	beq.n	8009f16 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009eac:	7afb      	ldrb	r3, [r7, #11]
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009eba:	4b19      	ldr	r3, [pc, #100]	; (8009f20 <tcp_kill_prio+0x94>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	e01f      	b.n	8009f02 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	7d5b      	ldrb	r3, [r3, #21]
 8009ec6:	7afa      	ldrb	r2, [r7, #11]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d80c      	bhi.n	8009ee6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009ed0:	7afa      	ldrb	r2, [r7, #11]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d112      	bne.n	8009efc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009ed6:	4b13      	ldr	r3, [pc, #76]	; (8009f24 <tcp_kill_prio+0x98>)
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d80a      	bhi.n	8009efc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009ee6:	4b0f      	ldr	r3, [pc, #60]	; (8009f24 <tcp_kill_prio+0x98>)
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	7d5b      	ldrb	r3, [r3, #21]
 8009efa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	617b      	str	r3, [r7, #20]
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1dc      	bne.n	8009ec2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d004      	beq.n	8009f18 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009f0e:	6938      	ldr	r0, [r7, #16]
 8009f10:	f7ff fa56 	bl	80093c0 <tcp_abort>
 8009f14:	e000      	b.n	8009f18 <tcp_kill_prio+0x8c>
    return;
 8009f16:	bf00      	nop
  }
}
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	2000ab10 	.word	0x2000ab10
 8009f24:	2000ab14 	.word	0x2000ab14

08009f28 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	4603      	mov	r3, r0
 8009f30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009f32:	79fb      	ldrb	r3, [r7, #7]
 8009f34:	2b08      	cmp	r3, #8
 8009f36:	d009      	beq.n	8009f4c <tcp_kill_state+0x24>
 8009f38:	79fb      	ldrb	r3, [r7, #7]
 8009f3a:	2b09      	cmp	r3, #9
 8009f3c:	d006      	beq.n	8009f4c <tcp_kill_state+0x24>
 8009f3e:	4b1a      	ldr	r3, [pc, #104]	; (8009fa8 <tcp_kill_state+0x80>)
 8009f40:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009f44:	4919      	ldr	r1, [pc, #100]	; (8009fac <tcp_kill_state+0x84>)
 8009f46:	481a      	ldr	r0, [pc, #104]	; (8009fb0 <tcp_kill_state+0x88>)
 8009f48:	f007 f992 	bl	8011270 <iprintf>

  inactivity = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009f50:	2300      	movs	r3, #0
 8009f52:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f54:	4b17      	ldr	r3, [pc, #92]	; (8009fb4 <tcp_kill_state+0x8c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	617b      	str	r3, [r7, #20]
 8009f5a:	e017      	b.n	8009f8c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	7d1b      	ldrb	r3, [r3, #20]
 8009f60:	79fa      	ldrb	r2, [r7, #7]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d10f      	bne.n	8009f86 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009f66:	4b14      	ldr	r3, [pc, #80]	; (8009fb8 <tcp_kill_state+0x90>)
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d807      	bhi.n	8009f86 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009f76:	4b10      	ldr	r3, [pc, #64]	; (8009fb8 <tcp_kill_state+0x90>)
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	617b      	str	r3, [r7, #20]
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1e4      	bne.n	8009f5c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009f98:	2100      	movs	r1, #0
 8009f9a:	6938      	ldr	r0, [r7, #16]
 8009f9c:	f7ff f952 	bl	8009244 <tcp_abandon>
  }
}
 8009fa0:	bf00      	nop
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	08012c7c 	.word	0x08012c7c
 8009fac:	08013208 	.word	0x08013208
 8009fb0:	08012cc0 	.word	0x08012cc0
 8009fb4:	2000ab10 	.word	0x2000ab10
 8009fb8:	2000ab14 	.word	0x2000ab14

08009fbc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fca:	4b12      	ldr	r3, [pc, #72]	; (800a014 <tcp_kill_timewait+0x58>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	60fb      	str	r3, [r7, #12]
 8009fd0:	e012      	b.n	8009ff8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009fd2:	4b11      	ldr	r3, [pc, #68]	; (800a018 <tcp_kill_timewait+0x5c>)
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	1ad3      	subs	r3, r2, r3
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d807      	bhi.n	8009ff2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009fe2:	4b0d      	ldr	r3, [pc, #52]	; (800a018 <tcp_kill_timewait+0x5c>)
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e9      	bne.n	8009fd2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a004:	68b8      	ldr	r0, [r7, #8]
 800a006:	f7ff f9db 	bl	80093c0 <tcp_abort>
  }
}
 800a00a:	bf00      	nop
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	2000ab20 	.word	0x2000ab20
 800a018:	2000ab14 	.word	0x2000ab14

0800a01c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a022:	4b10      	ldr	r3, [pc, #64]	; (800a064 <tcp_handle_closepend+0x48>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a028:	e014      	b.n	800a054 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	8b5b      	ldrh	r3, [r3, #26]
 800a034:	f003 0308 	and.w	r3, r3, #8
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d009      	beq.n	800a050 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	8b5b      	ldrh	r3, [r3, #26]
 800a040:	f023 0308 	bic.w	r3, r3, #8
 800a044:	b29a      	uxth	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7ff f864 	bl	8009118 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1e7      	bne.n	800a02a <tcp_handle_closepend+0xe>
  }
}
 800a05a:	bf00      	nop
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	2000ab10 	.word	0x2000ab10

0800a068 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	4603      	mov	r3, r0
 800a070:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a072:	2001      	movs	r0, #1
 800a074:	f7fd fd1a 	bl	8007aac <memp_malloc>
 800a078:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d126      	bne.n	800a0ce <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a080:	f7ff ffcc 	bl	800a01c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a084:	f7ff ff9a 	bl	8009fbc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a088:	2001      	movs	r0, #1
 800a08a:	f7fd fd0f 	bl	8007aac <memp_malloc>
 800a08e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d11b      	bne.n	800a0ce <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a096:	2009      	movs	r0, #9
 800a098:	f7ff ff46 	bl	8009f28 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a09c:	2001      	movs	r0, #1
 800a09e:	f7fd fd05 	bl	8007aac <memp_malloc>
 800a0a2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d111      	bne.n	800a0ce <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a0aa:	2008      	movs	r0, #8
 800a0ac:	f7ff ff3c 	bl	8009f28 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0b0:	2001      	movs	r0, #1
 800a0b2:	f7fd fcfb 	bl	8007aac <memp_malloc>
 800a0b6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d107      	bne.n	800a0ce <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7ff fee3 	bl	8009e8c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	f7fd fcf0 	bl	8007aac <memp_malloc>
 800a0cc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d03f      	beq.n	800a154 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a0d4:	229c      	movs	r2, #156	; 0x9c
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f007 f817 	bl	801110c <memset>
    pcb->prio = prio;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	79fa      	ldrb	r2, [r7, #7]
 800a0e2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a0ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a0f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	22ff      	movs	r2, #255	; 0xff
 800a102:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a10a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2206      	movs	r2, #6
 800a110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2206      	movs	r2, #6
 800a118:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a120:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2201      	movs	r2, #1
 800a126:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a12a:	4b0d      	ldr	r3, [pc, #52]	; (800a160 <tcp_alloc+0xf8>)
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a132:	4b0c      	ldr	r3, [pc, #48]	; (800a164 <tcp_alloc+0xfc>)
 800a134:	781a      	ldrb	r2, [r3, #0]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a140:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	4a08      	ldr	r2, [pc, #32]	; (800a168 <tcp_alloc+0x100>)
 800a148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4a07      	ldr	r2, [pc, #28]	; (800a16c <tcp_alloc+0x104>)
 800a150:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a154:	68fb      	ldr	r3, [r7, #12]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	2000ab14 	.word	0x2000ab14
 800a164:	20004126 	.word	0x20004126
 800a168:	08009e21 	.word	0x08009e21
 800a16c:	006ddd00 	.word	0x006ddd00

0800a170 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d107      	bne.n	800a18e <tcp_pcb_purge+0x1e>
 800a17e:	4b21      	ldr	r3, [pc, #132]	; (800a204 <tcp_pcb_purge+0x94>)
 800a180:	f640 0251 	movw	r2, #2129	; 0x851
 800a184:	4920      	ldr	r1, [pc, #128]	; (800a208 <tcp_pcb_purge+0x98>)
 800a186:	4821      	ldr	r0, [pc, #132]	; (800a20c <tcp_pcb_purge+0x9c>)
 800a188:	f007 f872 	bl	8011270 <iprintf>
 800a18c:	e037      	b.n	800a1fe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	7d1b      	ldrb	r3, [r3, #20]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d033      	beq.n	800a1fe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a19a:	2b0a      	cmp	r3, #10
 800a19c:	d02f      	beq.n	800a1fe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d02b      	beq.n	800a1fe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d007      	beq.n	800a1be <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe fb70 	bl	8008898 <pbuf_free>
      pcb->refused_data = NULL;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f986 	bl	800a4d8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1d2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7ff fdc7 	bl	8009d6c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7ff fdc2 	bl	8009d6c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	66da      	str	r2, [r3, #108]	; 0x6c
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	08012c7c 	.word	0x08012c7c
 800a208:	080132c8 	.word	0x080132c8
 800a20c:	08012cc0 	.word	0x08012cc0

0800a210 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d106      	bne.n	800a22e <tcp_pcb_remove+0x1e>
 800a220:	4b3e      	ldr	r3, [pc, #248]	; (800a31c <tcp_pcb_remove+0x10c>)
 800a222:	f640 0283 	movw	r2, #2179	; 0x883
 800a226:	493e      	ldr	r1, [pc, #248]	; (800a320 <tcp_pcb_remove+0x110>)
 800a228:	483e      	ldr	r0, [pc, #248]	; (800a324 <tcp_pcb_remove+0x114>)
 800a22a:	f007 f821 	bl	8011270 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d106      	bne.n	800a242 <tcp_pcb_remove+0x32>
 800a234:	4b39      	ldr	r3, [pc, #228]	; (800a31c <tcp_pcb_remove+0x10c>)
 800a236:	f640 0284 	movw	r2, #2180	; 0x884
 800a23a:	493b      	ldr	r1, [pc, #236]	; (800a328 <tcp_pcb_remove+0x118>)
 800a23c:	4839      	ldr	r0, [pc, #228]	; (800a324 <tcp_pcb_remove+0x114>)
 800a23e:	f007 f817 	bl	8011270 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d105      	bne.n	800a258 <tcp_pcb_remove+0x48>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68da      	ldr	r2, [r3, #12]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	601a      	str	r2, [r3, #0]
 800a256:	e013      	b.n	800a280 <tcp_pcb_remove+0x70>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	60fb      	str	r3, [r7, #12]
 800a25e:	e00c      	b.n	800a27a <tcp_pcb_remove+0x6a>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	683a      	ldr	r2, [r7, #0]
 800a266:	429a      	cmp	r2, r3
 800a268:	d104      	bne.n	800a274 <tcp_pcb_remove+0x64>
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	68da      	ldr	r2, [r3, #12]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	60da      	str	r2, [r3, #12]
 800a272:	e005      	b.n	800a280 <tcp_pcb_remove+0x70>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1ef      	bne.n	800a260 <tcp_pcb_remove+0x50>
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	2200      	movs	r2, #0
 800a284:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a286:	6838      	ldr	r0, [r7, #0]
 800a288:	f7ff ff72 	bl	800a170 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	7d1b      	ldrb	r3, [r3, #20]
 800a290:	2b0a      	cmp	r3, #10
 800a292:	d013      	beq.n	800a2bc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d00f      	beq.n	800a2bc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	8b5b      	ldrh	r3, [r3, #26]
 800a2a0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d009      	beq.n	800a2bc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	8b5b      	ldrh	r3, [r3, #26]
 800a2ac:	f043 0302 	orr.w	r3, r3, #2
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a2b6:	6838      	ldr	r0, [r7, #0]
 800a2b8:	f002 ff6a 	bl	800d190 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	7d1b      	ldrb	r3, [r3, #20]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d020      	beq.n	800a306 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d006      	beq.n	800a2da <tcp_pcb_remove+0xca>
 800a2cc:	4b13      	ldr	r3, [pc, #76]	; (800a31c <tcp_pcb_remove+0x10c>)
 800a2ce:	f640 0293 	movw	r2, #2195	; 0x893
 800a2d2:	4916      	ldr	r1, [pc, #88]	; (800a32c <tcp_pcb_remove+0x11c>)
 800a2d4:	4813      	ldr	r0, [pc, #76]	; (800a324 <tcp_pcb_remove+0x114>)
 800a2d6:	f006 ffcb 	bl	8011270 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d006      	beq.n	800a2f0 <tcp_pcb_remove+0xe0>
 800a2e2:	4b0e      	ldr	r3, [pc, #56]	; (800a31c <tcp_pcb_remove+0x10c>)
 800a2e4:	f640 0294 	movw	r2, #2196	; 0x894
 800a2e8:	4911      	ldr	r1, [pc, #68]	; (800a330 <tcp_pcb_remove+0x120>)
 800a2ea:	480e      	ldr	r0, [pc, #56]	; (800a324 <tcp_pcb_remove+0x114>)
 800a2ec:	f006 ffc0 	bl	8011270 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d006      	beq.n	800a306 <tcp_pcb_remove+0xf6>
 800a2f8:	4b08      	ldr	r3, [pc, #32]	; (800a31c <tcp_pcb_remove+0x10c>)
 800a2fa:	f640 0296 	movw	r2, #2198	; 0x896
 800a2fe:	490d      	ldr	r1, [pc, #52]	; (800a334 <tcp_pcb_remove+0x124>)
 800a300:	4808      	ldr	r0, [pc, #32]	; (800a324 <tcp_pcb_remove+0x114>)
 800a302:	f006 ffb5 	bl	8011270 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	2200      	movs	r2, #0
 800a30a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	2200      	movs	r2, #0
 800a310:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a312:	bf00      	nop
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	08012c7c 	.word	0x08012c7c
 800a320:	080132e4 	.word	0x080132e4
 800a324:	08012cc0 	.word	0x08012cc0
 800a328:	08013300 	.word	0x08013300
 800a32c:	08013320 	.word	0x08013320
 800a330:	08013338 	.word	0x08013338
 800a334:	08013354 	.word	0x08013354

0800a338 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d106      	bne.n	800a354 <tcp_next_iss+0x1c>
 800a346:	4b0a      	ldr	r3, [pc, #40]	; (800a370 <tcp_next_iss+0x38>)
 800a348:	f640 02af 	movw	r2, #2223	; 0x8af
 800a34c:	4909      	ldr	r1, [pc, #36]	; (800a374 <tcp_next_iss+0x3c>)
 800a34e:	480a      	ldr	r0, [pc, #40]	; (800a378 <tcp_next_iss+0x40>)
 800a350:	f006 ff8e 	bl	8011270 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a354:	4b09      	ldr	r3, [pc, #36]	; (800a37c <tcp_next_iss+0x44>)
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	4b09      	ldr	r3, [pc, #36]	; (800a380 <tcp_next_iss+0x48>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4413      	add	r3, r2
 800a35e:	4a07      	ldr	r2, [pc, #28]	; (800a37c <tcp_next_iss+0x44>)
 800a360:	6013      	str	r3, [r2, #0]
  return iss;
 800a362:	4b06      	ldr	r3, [pc, #24]	; (800a37c <tcp_next_iss+0x44>)
 800a364:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a366:	4618      	mov	r0, r3
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	08012c7c 	.word	0x08012c7c
 800a374:	0801336c 	.word	0x0801336c
 800a378:	08012cc0 	.word	0x08012cc0
 800a37c:	20000014 	.word	0x20000014
 800a380:	2000ab14 	.word	0x2000ab14

0800a384 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	4603      	mov	r3, r0
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	607a      	str	r2, [r7, #4]
 800a390:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d106      	bne.n	800a3a6 <tcp_eff_send_mss_netif+0x22>
 800a398:	4b14      	ldr	r3, [pc, #80]	; (800a3ec <tcp_eff_send_mss_netif+0x68>)
 800a39a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a39e:	4914      	ldr	r1, [pc, #80]	; (800a3f0 <tcp_eff_send_mss_netif+0x6c>)
 800a3a0:	4814      	ldr	r0, [pc, #80]	; (800a3f4 <tcp_eff_send_mss_netif+0x70>)
 800a3a2:	f006 ff65 	bl	8011270 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a3ac:	89fb      	ldrh	r3, [r7, #14]
 800a3ae:	e019      	b.n	800a3e4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a3b4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a3b6:	8afb      	ldrh	r3, [r7, #22]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d012      	beq.n	800a3e2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a3bc:	2328      	movs	r3, #40	; 0x28
 800a3be:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a3c0:	8afa      	ldrh	r2, [r7, #22]
 800a3c2:	8abb      	ldrh	r3, [r7, #20]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d904      	bls.n	800a3d2 <tcp_eff_send_mss_netif+0x4e>
 800a3c8:	8afa      	ldrh	r2, [r7, #22]
 800a3ca:	8abb      	ldrh	r3, [r7, #20]
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	e000      	b.n	800a3d4 <tcp_eff_send_mss_netif+0x50>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a3d6:	8a7a      	ldrh	r2, [r7, #18]
 800a3d8:	89fb      	ldrh	r3, [r7, #14]
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	bf28      	it	cs
 800a3de:	4613      	movcs	r3, r2
 800a3e0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a3e2:	89fb      	ldrh	r3, [r7, #14]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	08012c7c 	.word	0x08012c7c
 800a3f0:	08013388 	.word	0x08013388
 800a3f4:	08012cc0 	.word	0x08012cc0

0800a3f8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d119      	bne.n	800a440 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a40c:	4b10      	ldr	r3, [pc, #64]	; (800a450 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a40e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a412:	4910      	ldr	r1, [pc, #64]	; (800a454 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a414:	4810      	ldr	r0, [pc, #64]	; (800a458 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a416:	f006 ff2b 	bl	8011270 <iprintf>

  while (pcb != NULL) {
 800a41a:	e011      	b.n	800a440 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	429a      	cmp	r2, r3
 800a426:	d108      	bne.n	800a43a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7fe ffc6 	bl	80093c0 <tcp_abort>
      pcb = next;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	60fb      	str	r3, [r7, #12]
 800a438:	e002      	b.n	800a440 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1ea      	bne.n	800a41c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a446:	bf00      	nop
 800a448:	bf00      	nop
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	08012c7c 	.word	0x08012c7c
 800a454:	080133b0 	.word	0x080133b0
 800a458:	08012cc0 	.word	0x08012cc0

0800a45c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d02a      	beq.n	800a4c2 <tcp_netif_ip_addr_changed+0x66>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d026      	beq.n	800a4c2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a474:	4b15      	ldr	r3, [pc, #84]	; (800a4cc <tcp_netif_ip_addr_changed+0x70>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4619      	mov	r1, r3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7ff ffbc 	bl	800a3f8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a480:	4b13      	ldr	r3, [pc, #76]	; (800a4d0 <tcp_netif_ip_addr_changed+0x74>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff ffb6 	bl	800a3f8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d017      	beq.n	800a4c2 <tcp_netif_ip_addr_changed+0x66>
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d013      	beq.n	800a4c2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a49a:	4b0e      	ldr	r3, [pc, #56]	; (800a4d4 <tcp_netif_ip_addr_changed+0x78>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	e00c      	b.n	800a4bc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d103      	bne.n	800a4b6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	60fb      	str	r3, [r7, #12]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1ef      	bne.n	800a4a2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a4c2:	bf00      	nop
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	2000ab10 	.word	0x2000ab10
 800a4d0:	2000ab1c 	.word	0x2000ab1c
 800a4d4:	2000ab18 	.word	0x2000ab18

0800a4d8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d007      	beq.n	800a4f8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7ff fc3d 	bl	8009d6c <tcp_segs_free>
    pcb->ooseq = NULL;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a500:	b590      	push	{r4, r7, lr}
 800a502:	b08d      	sub	sp, #52	; 0x34
 800a504:	af04      	add	r7, sp, #16
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d105      	bne.n	800a51c <tcp_input+0x1c>
 800a510:	4b9b      	ldr	r3, [pc, #620]	; (800a780 <tcp_input+0x280>)
 800a512:	2283      	movs	r2, #131	; 0x83
 800a514:	499b      	ldr	r1, [pc, #620]	; (800a784 <tcp_input+0x284>)
 800a516:	489c      	ldr	r0, [pc, #624]	; (800a788 <tcp_input+0x288>)
 800a518:	f006 feaa 	bl	8011270 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	4a9a      	ldr	r2, [pc, #616]	; (800a78c <tcp_input+0x28c>)
 800a522:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	895b      	ldrh	r3, [r3, #10]
 800a528:	2b13      	cmp	r3, #19
 800a52a:	f240 83c4 	bls.w	800acb6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a52e:	4b98      	ldr	r3, [pc, #608]	; (800a790 <tcp_input+0x290>)
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	4a97      	ldr	r2, [pc, #604]	; (800a790 <tcp_input+0x290>)
 800a534:	6812      	ldr	r2, [r2, #0]
 800a536:	4611      	mov	r1, r2
 800a538:	4618      	mov	r0, r3
 800a53a:	f005 fc43 	bl	800fdc4 <ip4_addr_isbroadcast_u32>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	f040 83ba 	bne.w	800acba <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a546:	4b92      	ldr	r3, [pc, #584]	; (800a790 <tcp_input+0x290>)
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a54e:	2be0      	cmp	r3, #224	; 0xe0
 800a550:	f000 83b3 	beq.w	800acba <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a554:	4b8d      	ldr	r3, [pc, #564]	; (800a78c <tcp_input+0x28c>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	899b      	ldrh	r3, [r3, #12]
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fc fdef 	bl	8007140 <lwip_htons>
 800a562:	4603      	mov	r3, r0
 800a564:	0b1b      	lsrs	r3, r3, #12
 800a566:	b29b      	uxth	r3, r3
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a56e:	7cbb      	ldrb	r3, [r7, #18]
 800a570:	2b13      	cmp	r3, #19
 800a572:	f240 83a4 	bls.w	800acbe <tcp_input+0x7be>
 800a576:	7cbb      	ldrb	r3, [r7, #18]
 800a578:	b29a      	uxth	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	891b      	ldrh	r3, [r3, #8]
 800a57e:	429a      	cmp	r2, r3
 800a580:	f200 839d 	bhi.w	800acbe <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a584:	7cbb      	ldrb	r3, [r7, #18]
 800a586:	b29b      	uxth	r3, r3
 800a588:	3b14      	subs	r3, #20
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	4b81      	ldr	r3, [pc, #516]	; (800a794 <tcp_input+0x294>)
 800a58e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a590:	4b81      	ldr	r3, [pc, #516]	; (800a798 <tcp_input+0x298>)
 800a592:	2200      	movs	r2, #0
 800a594:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	895a      	ldrh	r2, [r3, #10]
 800a59a:	7cbb      	ldrb	r3, [r7, #18]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d309      	bcc.n	800a5b6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a5a2:	4b7c      	ldr	r3, [pc, #496]	; (800a794 <tcp_input+0x294>)
 800a5a4:	881a      	ldrh	r2, [r3, #0]
 800a5a6:	4b7d      	ldr	r3, [pc, #500]	; (800a79c <tcp_input+0x29c>)
 800a5a8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a5aa:	7cbb      	ldrb	r3, [r7, #18]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7fe f8ec 	bl	800878c <pbuf_remove_header>
 800a5b4:	e04e      	b.n	800a654 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d105      	bne.n	800a5ca <tcp_input+0xca>
 800a5be:	4b70      	ldr	r3, [pc, #448]	; (800a780 <tcp_input+0x280>)
 800a5c0:	22c2      	movs	r2, #194	; 0xc2
 800a5c2:	4977      	ldr	r1, [pc, #476]	; (800a7a0 <tcp_input+0x2a0>)
 800a5c4:	4870      	ldr	r0, [pc, #448]	; (800a788 <tcp_input+0x288>)
 800a5c6:	f006 fe53 	bl	8011270 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a5ca:	2114      	movs	r1, #20
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7fe f8dd 	bl	800878c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	895a      	ldrh	r2, [r3, #10]
 800a5d6:	4b71      	ldr	r3, [pc, #452]	; (800a79c <tcp_input+0x29c>)
 800a5d8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a5da:	4b6e      	ldr	r3, [pc, #440]	; (800a794 <tcp_input+0x294>)
 800a5dc:	881a      	ldrh	r2, [r3, #0]
 800a5de:	4b6f      	ldr	r3, [pc, #444]	; (800a79c <tcp_input+0x29c>)
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a5e6:	4b6d      	ldr	r3, [pc, #436]	; (800a79c <tcp_input+0x29c>)
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7fe f8cd 	bl	800878c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	895b      	ldrh	r3, [r3, #10]
 800a5f8:	8a3a      	ldrh	r2, [r7, #16]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	f200 8361 	bhi.w	800acc2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	4a64      	ldr	r2, [pc, #400]	; (800a798 <tcp_input+0x298>)
 800a608:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	8a3a      	ldrh	r2, [r7, #16]
 800a610:	4611      	mov	r1, r2
 800a612:	4618      	mov	r0, r3
 800a614:	f7fe f8ba 	bl	800878c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	891a      	ldrh	r2, [r3, #8]
 800a61c:	8a3b      	ldrh	r3, [r7, #16]
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	b29a      	uxth	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	895b      	ldrh	r3, [r3, #10]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d005      	beq.n	800a63a <tcp_input+0x13a>
 800a62e:	4b54      	ldr	r3, [pc, #336]	; (800a780 <tcp_input+0x280>)
 800a630:	22df      	movs	r2, #223	; 0xdf
 800a632:	495c      	ldr	r1, [pc, #368]	; (800a7a4 <tcp_input+0x2a4>)
 800a634:	4854      	ldr	r0, [pc, #336]	; (800a788 <tcp_input+0x288>)
 800a636:	f006 fe1b 	bl	8011270 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	891a      	ldrh	r2, [r3, #8]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	891b      	ldrh	r3, [r3, #8]
 800a644:	429a      	cmp	r2, r3
 800a646:	d005      	beq.n	800a654 <tcp_input+0x154>
 800a648:	4b4d      	ldr	r3, [pc, #308]	; (800a780 <tcp_input+0x280>)
 800a64a:	22e0      	movs	r2, #224	; 0xe0
 800a64c:	4956      	ldr	r1, [pc, #344]	; (800a7a8 <tcp_input+0x2a8>)
 800a64e:	484e      	ldr	r0, [pc, #312]	; (800a788 <tcp_input+0x288>)
 800a650:	f006 fe0e 	bl	8011270 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a654:	4b4d      	ldr	r3, [pc, #308]	; (800a78c <tcp_input+0x28c>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	4a4b      	ldr	r2, [pc, #300]	; (800a78c <tcp_input+0x28c>)
 800a65e:	6814      	ldr	r4, [r2, #0]
 800a660:	4618      	mov	r0, r3
 800a662:	f7fc fd6d 	bl	8007140 <lwip_htons>
 800a666:	4603      	mov	r3, r0
 800a668:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a66a:	4b48      	ldr	r3, [pc, #288]	; (800a78c <tcp_input+0x28c>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	885b      	ldrh	r3, [r3, #2]
 800a670:	b29b      	uxth	r3, r3
 800a672:	4a46      	ldr	r2, [pc, #280]	; (800a78c <tcp_input+0x28c>)
 800a674:	6814      	ldr	r4, [r2, #0]
 800a676:	4618      	mov	r0, r3
 800a678:	f7fc fd62 	bl	8007140 <lwip_htons>
 800a67c:	4603      	mov	r3, r0
 800a67e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a680:	4b42      	ldr	r3, [pc, #264]	; (800a78c <tcp_input+0x28c>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	4a41      	ldr	r2, [pc, #260]	; (800a78c <tcp_input+0x28c>)
 800a688:	6814      	ldr	r4, [r2, #0]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7fc fd6d 	bl	800716a <lwip_htonl>
 800a690:	4603      	mov	r3, r0
 800a692:	6063      	str	r3, [r4, #4]
 800a694:	6863      	ldr	r3, [r4, #4]
 800a696:	4a45      	ldr	r2, [pc, #276]	; (800a7ac <tcp_input+0x2ac>)
 800a698:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a69a:	4b3c      	ldr	r3, [pc, #240]	; (800a78c <tcp_input+0x28c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	4a3a      	ldr	r2, [pc, #232]	; (800a78c <tcp_input+0x28c>)
 800a6a2:	6814      	ldr	r4, [r2, #0]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fc fd60 	bl	800716a <lwip_htonl>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	60a3      	str	r3, [r4, #8]
 800a6ae:	68a3      	ldr	r3, [r4, #8]
 800a6b0:	4a3f      	ldr	r2, [pc, #252]	; (800a7b0 <tcp_input+0x2b0>)
 800a6b2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a6b4:	4b35      	ldr	r3, [pc, #212]	; (800a78c <tcp_input+0x28c>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	89db      	ldrh	r3, [r3, #14]
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	4a33      	ldr	r2, [pc, #204]	; (800a78c <tcp_input+0x28c>)
 800a6be:	6814      	ldr	r4, [r2, #0]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fc fd3d 	bl	8007140 <lwip_htons>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a6ca:	4b30      	ldr	r3, [pc, #192]	; (800a78c <tcp_input+0x28c>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	899b      	ldrh	r3, [r3, #12]
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fc fd34 	bl	8007140 <lwip_htons>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	4b34      	ldr	r3, [pc, #208]	; (800a7b4 <tcp_input+0x2b4>)
 800a6e4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	891a      	ldrh	r2, [r3, #8]
 800a6ea:	4b33      	ldr	r3, [pc, #204]	; (800a7b8 <tcp_input+0x2b8>)
 800a6ec:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a6ee:	4b31      	ldr	r3, [pc, #196]	; (800a7b4 <tcp_input+0x2b4>)
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	f003 0303 	and.w	r3, r3, #3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00c      	beq.n	800a714 <tcp_input+0x214>
    tcplen++;
 800a6fa:	4b2f      	ldr	r3, [pc, #188]	; (800a7b8 <tcp_input+0x2b8>)
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	3301      	adds	r3, #1
 800a700:	b29a      	uxth	r2, r3
 800a702:	4b2d      	ldr	r3, [pc, #180]	; (800a7b8 <tcp_input+0x2b8>)
 800a704:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	891a      	ldrh	r2, [r3, #8]
 800a70a:	4b2b      	ldr	r3, [pc, #172]	; (800a7b8 <tcp_input+0x2b8>)
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	429a      	cmp	r2, r3
 800a710:	f200 82d9 	bhi.w	800acc6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a714:	2300      	movs	r3, #0
 800a716:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a718:	4b28      	ldr	r3, [pc, #160]	; (800a7bc <tcp_input+0x2bc>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	61fb      	str	r3, [r7, #28]
 800a71e:	e09d      	b.n	800a85c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	7d1b      	ldrb	r3, [r3, #20]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d105      	bne.n	800a734 <tcp_input+0x234>
 800a728:	4b15      	ldr	r3, [pc, #84]	; (800a780 <tcp_input+0x280>)
 800a72a:	22fb      	movs	r2, #251	; 0xfb
 800a72c:	4924      	ldr	r1, [pc, #144]	; (800a7c0 <tcp_input+0x2c0>)
 800a72e:	4816      	ldr	r0, [pc, #88]	; (800a788 <tcp_input+0x288>)
 800a730:	f006 fd9e 	bl	8011270 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	7d1b      	ldrb	r3, [r3, #20]
 800a738:	2b0a      	cmp	r3, #10
 800a73a:	d105      	bne.n	800a748 <tcp_input+0x248>
 800a73c:	4b10      	ldr	r3, [pc, #64]	; (800a780 <tcp_input+0x280>)
 800a73e:	22fc      	movs	r2, #252	; 0xfc
 800a740:	4920      	ldr	r1, [pc, #128]	; (800a7c4 <tcp_input+0x2c4>)
 800a742:	4811      	ldr	r0, [pc, #68]	; (800a788 <tcp_input+0x288>)
 800a744:	f006 fd94 	bl	8011270 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	7d1b      	ldrb	r3, [r3, #20]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d105      	bne.n	800a75c <tcp_input+0x25c>
 800a750:	4b0b      	ldr	r3, [pc, #44]	; (800a780 <tcp_input+0x280>)
 800a752:	22fd      	movs	r2, #253	; 0xfd
 800a754:	491c      	ldr	r1, [pc, #112]	; (800a7c8 <tcp_input+0x2c8>)
 800a756:	480c      	ldr	r0, [pc, #48]	; (800a788 <tcp_input+0x288>)
 800a758:	f006 fd8a 	bl	8011270 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	7a1b      	ldrb	r3, [r3, #8]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d033      	beq.n	800a7cc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	7a1a      	ldrb	r2, [r3, #8]
 800a768:	4b09      	ldr	r3, [pc, #36]	; (800a790 <tcp_input+0x290>)
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a770:	3301      	adds	r3, #1
 800a772:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a774:	429a      	cmp	r2, r3
 800a776:	d029      	beq.n	800a7cc <tcp_input+0x2cc>
      prev = pcb;
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	61bb      	str	r3, [r7, #24]
      continue;
 800a77c:	e06b      	b.n	800a856 <tcp_input+0x356>
 800a77e:	bf00      	nop
 800a780:	080133e4 	.word	0x080133e4
 800a784:	08013418 	.word	0x08013418
 800a788:	08013430 	.word	0x08013430
 800a78c:	20004138 	.word	0x20004138
 800a790:	200073fc 	.word	0x200073fc
 800a794:	2000413c 	.word	0x2000413c
 800a798:	20004140 	.word	0x20004140
 800a79c:	2000413e 	.word	0x2000413e
 800a7a0:	08013458 	.word	0x08013458
 800a7a4:	08013468 	.word	0x08013468
 800a7a8:	08013474 	.word	0x08013474
 800a7ac:	20004148 	.word	0x20004148
 800a7b0:	2000414c 	.word	0x2000414c
 800a7b4:	20004154 	.word	0x20004154
 800a7b8:	20004152 	.word	0x20004152
 800a7bc:	2000ab10 	.word	0x2000ab10
 800a7c0:	08013494 	.word	0x08013494
 800a7c4:	080134bc 	.word	0x080134bc
 800a7c8:	080134e8 	.word	0x080134e8
    }

    if (pcb->remote_port == tcphdr->src &&
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	8b1a      	ldrh	r2, [r3, #24]
 800a7d0:	4b94      	ldr	r3, [pc, #592]	; (800aa24 <tcp_input+0x524>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	881b      	ldrh	r3, [r3, #0]
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d13a      	bne.n	800a852 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	8ada      	ldrh	r2, [r3, #22]
 800a7e0:	4b90      	ldr	r3, [pc, #576]	; (800aa24 <tcp_input+0x524>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	885b      	ldrh	r3, [r3, #2]
 800a7e6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d132      	bne.n	800a852 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	4b8d      	ldr	r3, [pc, #564]	; (800aa28 <tcp_input+0x528>)
 800a7f2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d12c      	bne.n	800a852 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	4b8a      	ldr	r3, [pc, #552]	; (800aa28 <tcp_input+0x528>)
 800a7fe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a800:	429a      	cmp	r2, r3
 800a802:	d126      	bne.n	800a852 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	69fa      	ldr	r2, [r7, #28]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d106      	bne.n	800a81c <tcp_input+0x31c>
 800a80e:	4b87      	ldr	r3, [pc, #540]	; (800aa2c <tcp_input+0x52c>)
 800a810:	f240 120d 	movw	r2, #269	; 0x10d
 800a814:	4986      	ldr	r1, [pc, #536]	; (800aa30 <tcp_input+0x530>)
 800a816:	4887      	ldr	r0, [pc, #540]	; (800aa34 <tcp_input+0x534>)
 800a818:	f006 fd2a 	bl	8011270 <iprintf>
      if (prev != NULL) {
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00a      	beq.n	800a838 <tcp_input+0x338>
        prev->next = pcb->next;
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	68da      	ldr	r2, [r3, #12]
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a82a:	4b83      	ldr	r3, [pc, #524]	; (800aa38 <tcp_input+0x538>)
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a832:	4a81      	ldr	r2, [pc, #516]	; (800aa38 <tcp_input+0x538>)
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	69fa      	ldr	r2, [r7, #28]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d111      	bne.n	800a866 <tcp_input+0x366>
 800a842:	4b7a      	ldr	r3, [pc, #488]	; (800aa2c <tcp_input+0x52c>)
 800a844:	f240 1215 	movw	r2, #277	; 0x115
 800a848:	497c      	ldr	r1, [pc, #496]	; (800aa3c <tcp_input+0x53c>)
 800a84a:	487a      	ldr	r0, [pc, #488]	; (800aa34 <tcp_input+0x534>)
 800a84c:	f006 fd10 	bl	8011270 <iprintf>
      break;
 800a850:	e009      	b.n	800a866 <tcp_input+0x366>
    }
    prev = pcb;
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	61fb      	str	r3, [r7, #28]
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f47f af5e 	bne.w	800a720 <tcp_input+0x220>
 800a864:	e000      	b.n	800a868 <tcp_input+0x368>
      break;
 800a866:	bf00      	nop
  }

  if (pcb == NULL) {
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f040 8095 	bne.w	800a99a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a870:	4b73      	ldr	r3, [pc, #460]	; (800aa40 <tcp_input+0x540>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	61fb      	str	r3, [r7, #28]
 800a876:	e03f      	b.n	800a8f8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	7d1b      	ldrb	r3, [r3, #20]
 800a87c:	2b0a      	cmp	r3, #10
 800a87e:	d006      	beq.n	800a88e <tcp_input+0x38e>
 800a880:	4b6a      	ldr	r3, [pc, #424]	; (800aa2c <tcp_input+0x52c>)
 800a882:	f240 121f 	movw	r2, #287	; 0x11f
 800a886:	496f      	ldr	r1, [pc, #444]	; (800aa44 <tcp_input+0x544>)
 800a888:	486a      	ldr	r0, [pc, #424]	; (800aa34 <tcp_input+0x534>)
 800a88a:	f006 fcf1 	bl	8011270 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	7a1b      	ldrb	r3, [r3, #8]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d009      	beq.n	800a8aa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	7a1a      	ldrb	r2, [r3, #8]
 800a89a:	4b63      	ldr	r3, [pc, #396]	; (800aa28 <tcp_input+0x528>)
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d122      	bne.n	800a8f0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	8b1a      	ldrh	r2, [r3, #24]
 800a8ae:	4b5d      	ldr	r3, [pc, #372]	; (800aa24 <tcp_input+0x524>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d11b      	bne.n	800a8f2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	8ada      	ldrh	r2, [r3, #22]
 800a8be:	4b59      	ldr	r3, [pc, #356]	; (800aa24 <tcp_input+0x524>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	885b      	ldrh	r3, [r3, #2]
 800a8c4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d113      	bne.n	800a8f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	685a      	ldr	r2, [r3, #4]
 800a8ce:	4b56      	ldr	r3, [pc, #344]	; (800aa28 <tcp_input+0x528>)
 800a8d0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d10d      	bne.n	800a8f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	4b53      	ldr	r3, [pc, #332]	; (800aa28 <tcp_input+0x528>)
 800a8dc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d107      	bne.n	800a8f2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a8e2:	69f8      	ldr	r0, [r7, #28]
 800a8e4:	f000 fb54 	bl	800af90 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f7fd ffd5 	bl	8008898 <pbuf_free>
        return;
 800a8ee:	e1f0      	b.n	800acd2 <tcp_input+0x7d2>
        continue;
 800a8f0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	61fb      	str	r3, [r7, #28]
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1bc      	bne.n	800a878 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a8fe:	2300      	movs	r3, #0
 800a900:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a902:	4b51      	ldr	r3, [pc, #324]	; (800aa48 <tcp_input+0x548>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	617b      	str	r3, [r7, #20]
 800a908:	e02a      	b.n	800a960 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	7a1b      	ldrb	r3, [r3, #8]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00c      	beq.n	800a92c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	7a1a      	ldrb	r2, [r3, #8]
 800a916:	4b44      	ldr	r3, [pc, #272]	; (800aa28 <tcp_input+0x528>)
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a91e:	3301      	adds	r3, #1
 800a920:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a922:	429a      	cmp	r2, r3
 800a924:	d002      	beq.n	800a92c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	61bb      	str	r3, [r7, #24]
        continue;
 800a92a:	e016      	b.n	800a95a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	8ada      	ldrh	r2, [r3, #22]
 800a930:	4b3c      	ldr	r3, [pc, #240]	; (800aa24 <tcp_input+0x524>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	885b      	ldrh	r3, [r3, #2]
 800a936:	b29b      	uxth	r3, r3
 800a938:	429a      	cmp	r2, r3
 800a93a:	d10c      	bne.n	800a956 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	4b39      	ldr	r3, [pc, #228]	; (800aa28 <tcp_input+0x528>)
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	429a      	cmp	r2, r3
 800a946:	d00f      	beq.n	800a968 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00d      	beq.n	800a96a <tcp_input+0x46a>
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d009      	beq.n	800a96a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	617b      	str	r3, [r7, #20]
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1d1      	bne.n	800a90a <tcp_input+0x40a>
 800a966:	e000      	b.n	800a96a <tcp_input+0x46a>
            break;
 800a968:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d014      	beq.n	800a99a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00a      	beq.n	800a98c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	68da      	ldr	r2, [r3, #12]
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a97e:	4b32      	ldr	r3, [pc, #200]	; (800aa48 <tcp_input+0x548>)
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a986:	4a30      	ldr	r2, [pc, #192]	; (800aa48 <tcp_input+0x548>)
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a98c:	6978      	ldr	r0, [r7, #20]
 800a98e:	f000 fa01 	bl	800ad94 <tcp_listen_input>
      }
      pbuf_free(p);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f7fd ff80 	bl	8008898 <pbuf_free>
      return;
 800a998:	e19b      	b.n	800acd2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f000 8160 	beq.w	800ac62 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a9a2:	4b2a      	ldr	r3, [pc, #168]	; (800aa4c <tcp_input+0x54c>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	891a      	ldrh	r2, [r3, #8]
 800a9ac:	4b27      	ldr	r3, [pc, #156]	; (800aa4c <tcp_input+0x54c>)
 800a9ae:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a9b0:	4a26      	ldr	r2, [pc, #152]	; (800aa4c <tcp_input+0x54c>)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a9b6:	4b1b      	ldr	r3, [pc, #108]	; (800aa24 <tcp_input+0x524>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a24      	ldr	r2, [pc, #144]	; (800aa4c <tcp_input+0x54c>)
 800a9bc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a9be:	4b24      	ldr	r3, [pc, #144]	; (800aa50 <tcp_input+0x550>)
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a9c4:	4b23      	ldr	r3, [pc, #140]	; (800aa54 <tcp_input+0x554>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a9ca:	4b23      	ldr	r3, [pc, #140]	; (800aa58 <tcp_input+0x558>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a9d0:	4b22      	ldr	r3, [pc, #136]	; (800aa5c <tcp_input+0x55c>)
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	f003 0308 	and.w	r3, r3, #8
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d006      	beq.n	800a9ea <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	7b5b      	ldrb	r3, [r3, #13]
 800a9e0:	f043 0301 	orr.w	r3, r3, #1
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d038      	beq.n	800aa64 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a9f2:	69f8      	ldr	r0, [r7, #28]
 800a9f4:	f7ff f93e 	bl	8009c74 <tcp_process_refused_data>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	f113 0f0d 	cmn.w	r3, #13
 800a9fe:	d007      	beq.n	800aa10 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d02d      	beq.n	800aa64 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aa08:	4b15      	ldr	r3, [pc, #84]	; (800aa60 <tcp_input+0x560>)
 800aa0a:	881b      	ldrh	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d029      	beq.n	800aa64 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f040 8104 	bne.w	800ac22 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800aa1a:	69f8      	ldr	r0, [r7, #28]
 800aa1c:	f003 f9be 	bl	800dd9c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800aa20:	e0ff      	b.n	800ac22 <tcp_input+0x722>
 800aa22:	bf00      	nop
 800aa24:	20004138 	.word	0x20004138
 800aa28:	200073fc 	.word	0x200073fc
 800aa2c:	080133e4 	.word	0x080133e4
 800aa30:	08013510 	.word	0x08013510
 800aa34:	08013430 	.word	0x08013430
 800aa38:	2000ab10 	.word	0x2000ab10
 800aa3c:	0801353c 	.word	0x0801353c
 800aa40:	2000ab20 	.word	0x2000ab20
 800aa44:	08013568 	.word	0x08013568
 800aa48:	2000ab18 	.word	0x2000ab18
 800aa4c:	20004128 	.word	0x20004128
 800aa50:	20004158 	.word	0x20004158
 800aa54:	20004155 	.word	0x20004155
 800aa58:	20004150 	.word	0x20004150
 800aa5c:	20004154 	.word	0x20004154
 800aa60:	20004152 	.word	0x20004152
      }
    }
    tcp_input_pcb = pcb;
 800aa64:	4a9c      	ldr	r2, [pc, #624]	; (800acd8 <tcp_input+0x7d8>)
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800aa6a:	69f8      	ldr	r0, [r7, #28]
 800aa6c:	f000 fb0a 	bl	800b084 <tcp_process>
 800aa70:	4603      	mov	r3, r0
 800aa72:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800aa74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa78:	f113 0f0d 	cmn.w	r3, #13
 800aa7c:	f000 80d3 	beq.w	800ac26 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800aa80:	4b96      	ldr	r3, [pc, #600]	; (800acdc <tcp_input+0x7dc>)
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	f003 0308 	and.w	r3, r3, #8
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d015      	beq.n	800aab8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d008      	beq.n	800aaa8 <tcp_input+0x5a8>
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa9c:	69fa      	ldr	r2, [r7, #28]
 800aa9e:	6912      	ldr	r2, [r2, #16]
 800aaa0:	f06f 010d 	mvn.w	r1, #13
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aaa8:	69f9      	ldr	r1, [r7, #28]
 800aaaa:	488d      	ldr	r0, [pc, #564]	; (800ace0 <tcp_input+0x7e0>)
 800aaac:	f7ff fbb0 	bl	800a210 <tcp_pcb_remove>
        tcp_free(pcb);
 800aab0:	69f8      	ldr	r0, [r7, #28]
 800aab2:	f7fe f99d 	bl	8008df0 <tcp_free>
 800aab6:	e0c1      	b.n	800ac3c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800aab8:	2300      	movs	r3, #0
 800aaba:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800aabc:	4b89      	ldr	r3, [pc, #548]	; (800ace4 <tcp_input+0x7e4>)
 800aabe:	881b      	ldrh	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d01d      	beq.n	800ab00 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800aac4:	4b87      	ldr	r3, [pc, #540]	; (800ace4 <tcp_input+0x7e4>)
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00a      	beq.n	800aaea <tcp_input+0x5ea>
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aada:	69fa      	ldr	r2, [r7, #28]
 800aadc:	6910      	ldr	r0, [r2, #16]
 800aade:	89fa      	ldrh	r2, [r7, #14]
 800aae0:	69f9      	ldr	r1, [r7, #28]
 800aae2:	4798      	blx	r3
 800aae4:	4603      	mov	r3, r0
 800aae6:	74fb      	strb	r3, [r7, #19]
 800aae8:	e001      	b.n	800aaee <tcp_input+0x5ee>
 800aaea:	2300      	movs	r3, #0
 800aaec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800aaee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aaf2:	f113 0f0d 	cmn.w	r3, #13
 800aaf6:	f000 8098 	beq.w	800ac2a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800aafa:	4b7a      	ldr	r3, [pc, #488]	; (800ace4 <tcp_input+0x7e4>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ab00:	69f8      	ldr	r0, [r7, #28]
 800ab02:	f000 f907 	bl	800ad14 <tcp_input_delayed_close>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f040 8090 	bne.w	800ac2e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ab0e:	4b76      	ldr	r3, [pc, #472]	; (800ace8 <tcp_input+0x7e8>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d041      	beq.n	800ab9a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d006      	beq.n	800ab2c <tcp_input+0x62c>
 800ab1e:	4b73      	ldr	r3, [pc, #460]	; (800acec <tcp_input+0x7ec>)
 800ab20:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ab24:	4972      	ldr	r1, [pc, #456]	; (800acf0 <tcp_input+0x7f0>)
 800ab26:	4873      	ldr	r0, [pc, #460]	; (800acf4 <tcp_input+0x7f4>)
 800ab28:	f006 fba2 	bl	8011270 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	8b5b      	ldrh	r3, [r3, #26]
 800ab30:	f003 0310 	and.w	r3, r3, #16
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d008      	beq.n	800ab4a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ab38:	4b6b      	ldr	r3, [pc, #428]	; (800ace8 <tcp_input+0x7e8>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fd feab 	bl	8008898 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ab42:	69f8      	ldr	r0, [r7, #28]
 800ab44:	f7fe fc3c 	bl	80093c0 <tcp_abort>
            goto aborted;
 800ab48:	e078      	b.n	800ac3c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00c      	beq.n	800ab6e <tcp_input+0x66e>
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	6918      	ldr	r0, [r3, #16]
 800ab5e:	4b62      	ldr	r3, [pc, #392]	; (800ace8 <tcp_input+0x7e8>)
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	2300      	movs	r3, #0
 800ab64:	69f9      	ldr	r1, [r7, #28]
 800ab66:	47a0      	blx	r4
 800ab68:	4603      	mov	r3, r0
 800ab6a:	74fb      	strb	r3, [r7, #19]
 800ab6c:	e008      	b.n	800ab80 <tcp_input+0x680>
 800ab6e:	4b5e      	ldr	r3, [pc, #376]	; (800ace8 <tcp_input+0x7e8>)
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	2300      	movs	r3, #0
 800ab74:	69f9      	ldr	r1, [r7, #28]
 800ab76:	2000      	movs	r0, #0
 800ab78:	f7ff f952 	bl	8009e20 <tcp_recv_null>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ab80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab84:	f113 0f0d 	cmn.w	r3, #13
 800ab88:	d053      	beq.n	800ac32 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ab8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d003      	beq.n	800ab9a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ab92:	4b55      	ldr	r3, [pc, #340]	; (800ace8 <tcp_input+0x7e8>)
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ab9a:	4b50      	ldr	r3, [pc, #320]	; (800acdc <tcp_input+0x7dc>)
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	f003 0320 	and.w	r3, r3, #32
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d030      	beq.n	800ac08 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d009      	beq.n	800abc2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abb2:	7b5a      	ldrb	r2, [r3, #13]
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abb8:	f042 0220 	orr.w	r2, r2, #32
 800abbc:	b2d2      	uxtb	r2, r2
 800abbe:	735a      	strb	r2, [r3, #13]
 800abc0:	e022      	b.n	800ac08 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abc6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800abca:	d005      	beq.n	800abd8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abd0:	3301      	adds	r3, #1
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00b      	beq.n	800abfa <tcp_input+0x6fa>
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	6918      	ldr	r0, [r3, #16]
 800abec:	2300      	movs	r3, #0
 800abee:	2200      	movs	r2, #0
 800abf0:	69f9      	ldr	r1, [r7, #28]
 800abf2:	47a0      	blx	r4
 800abf4:	4603      	mov	r3, r0
 800abf6:	74fb      	strb	r3, [r7, #19]
 800abf8:	e001      	b.n	800abfe <tcp_input+0x6fe>
 800abfa:	2300      	movs	r3, #0
 800abfc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800abfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac02:	f113 0f0d 	cmn.w	r3, #13
 800ac06:	d016      	beq.n	800ac36 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ac08:	4b33      	ldr	r3, [pc, #204]	; (800acd8 <tcp_input+0x7d8>)
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ac0e:	69f8      	ldr	r0, [r7, #28]
 800ac10:	f000 f880 	bl	800ad14 <tcp_input_delayed_close>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10f      	bne.n	800ac3a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ac1a:	69f8      	ldr	r0, [r7, #28]
 800ac1c:	f002 fab8 	bl	800d190 <tcp_output>
 800ac20:	e00c      	b.n	800ac3c <tcp_input+0x73c>
        goto aborted;
 800ac22:	bf00      	nop
 800ac24:	e00a      	b.n	800ac3c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ac26:	bf00      	nop
 800ac28:	e008      	b.n	800ac3c <tcp_input+0x73c>
              goto aborted;
 800ac2a:	bf00      	nop
 800ac2c:	e006      	b.n	800ac3c <tcp_input+0x73c>
          goto aborted;
 800ac2e:	bf00      	nop
 800ac30:	e004      	b.n	800ac3c <tcp_input+0x73c>
            goto aborted;
 800ac32:	bf00      	nop
 800ac34:	e002      	b.n	800ac3c <tcp_input+0x73c>
              goto aborted;
 800ac36:	bf00      	nop
 800ac38:	e000      	b.n	800ac3c <tcp_input+0x73c>
          goto aborted;
 800ac3a:	bf00      	nop
    tcp_input_pcb = NULL;
 800ac3c:	4b26      	ldr	r3, [pc, #152]	; (800acd8 <tcp_input+0x7d8>)
 800ac3e:	2200      	movs	r2, #0
 800ac40:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ac42:	4b29      	ldr	r3, [pc, #164]	; (800ace8 <tcp_input+0x7e8>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ac48:	4b2b      	ldr	r3, [pc, #172]	; (800acf8 <tcp_input+0x7f8>)
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d03f      	beq.n	800acd0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800ac50:	4b29      	ldr	r3, [pc, #164]	; (800acf8 <tcp_input+0x7f8>)
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fd fe1f 	bl	8008898 <pbuf_free>
      inseg.p = NULL;
 800ac5a:	4b27      	ldr	r3, [pc, #156]	; (800acf8 <tcp_input+0x7f8>)
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ac60:	e036      	b.n	800acd0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ac62:	4b26      	ldr	r3, [pc, #152]	; (800acfc <tcp_input+0x7fc>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	899b      	ldrh	r3, [r3, #12]
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fc fa68 	bl	8007140 <lwip_htons>
 800ac70:	4603      	mov	r3, r0
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	f003 0304 	and.w	r3, r3, #4
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d118      	bne.n	800acae <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac7c:	4b20      	ldr	r3, [pc, #128]	; (800ad00 <tcp_input+0x800>)
 800ac7e:	6819      	ldr	r1, [r3, #0]
 800ac80:	4b20      	ldr	r3, [pc, #128]	; (800ad04 <tcp_input+0x804>)
 800ac82:	881b      	ldrh	r3, [r3, #0]
 800ac84:	461a      	mov	r2, r3
 800ac86:	4b20      	ldr	r3, [pc, #128]	; (800ad08 <tcp_input+0x808>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac8c:	4b1b      	ldr	r3, [pc, #108]	; (800acfc <tcp_input+0x7fc>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac90:	885b      	ldrh	r3, [r3, #2]
 800ac92:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac94:	4a19      	ldr	r2, [pc, #100]	; (800acfc <tcp_input+0x7fc>)
 800ac96:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac98:	8812      	ldrh	r2, [r2, #0]
 800ac9a:	b292      	uxth	r2, r2
 800ac9c:	9202      	str	r2, [sp, #8]
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	4b1a      	ldr	r3, [pc, #104]	; (800ad0c <tcp_input+0x80c>)
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	4b1a      	ldr	r3, [pc, #104]	; (800ad10 <tcp_input+0x810>)
 800aca6:	4602      	mov	r2, r0
 800aca8:	2000      	movs	r0, #0
 800acaa:	f003 f825 	bl	800dcf8 <tcp_rst>
    pbuf_free(p);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7fd fdf2 	bl	8008898 <pbuf_free>
  return;
 800acb4:	e00c      	b.n	800acd0 <tcp_input+0x7d0>
    goto dropped;
 800acb6:	bf00      	nop
 800acb8:	e006      	b.n	800acc8 <tcp_input+0x7c8>
    goto dropped;
 800acba:	bf00      	nop
 800acbc:	e004      	b.n	800acc8 <tcp_input+0x7c8>
    goto dropped;
 800acbe:	bf00      	nop
 800acc0:	e002      	b.n	800acc8 <tcp_input+0x7c8>
      goto dropped;
 800acc2:	bf00      	nop
 800acc4:	e000      	b.n	800acc8 <tcp_input+0x7c8>
      goto dropped;
 800acc6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7fd fde5 	bl	8008898 <pbuf_free>
 800acce:	e000      	b.n	800acd2 <tcp_input+0x7d2>
  return;
 800acd0:	bf00      	nop
}
 800acd2:	3724      	adds	r7, #36	; 0x24
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd90      	pop	{r4, r7, pc}
 800acd8:	2000ab24 	.word	0x2000ab24
 800acdc:	20004155 	.word	0x20004155
 800ace0:	2000ab10 	.word	0x2000ab10
 800ace4:	20004150 	.word	0x20004150
 800ace8:	20004158 	.word	0x20004158
 800acec:	080133e4 	.word	0x080133e4
 800acf0:	08013598 	.word	0x08013598
 800acf4:	08013430 	.word	0x08013430
 800acf8:	20004128 	.word	0x20004128
 800acfc:	20004138 	.word	0x20004138
 800ad00:	2000414c 	.word	0x2000414c
 800ad04:	20004152 	.word	0x20004152
 800ad08:	20004148 	.word	0x20004148
 800ad0c:	2000740c 	.word	0x2000740c
 800ad10:	20007410 	.word	0x20007410

0800ad14 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d106      	bne.n	800ad30 <tcp_input_delayed_close+0x1c>
 800ad22:	4b17      	ldr	r3, [pc, #92]	; (800ad80 <tcp_input_delayed_close+0x6c>)
 800ad24:	f240 225a 	movw	r2, #602	; 0x25a
 800ad28:	4916      	ldr	r1, [pc, #88]	; (800ad84 <tcp_input_delayed_close+0x70>)
 800ad2a:	4817      	ldr	r0, [pc, #92]	; (800ad88 <tcp_input_delayed_close+0x74>)
 800ad2c:	f006 faa0 	bl	8011270 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ad30:	4b16      	ldr	r3, [pc, #88]	; (800ad8c <tcp_input_delayed_close+0x78>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	f003 0310 	and.w	r3, r3, #16
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d01c      	beq.n	800ad76 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	8b5b      	ldrh	r3, [r3, #26]
 800ad40:	f003 0310 	and.w	r3, r3, #16
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10d      	bne.n	800ad64 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d008      	beq.n	800ad64 <tcp_input_delayed_close+0x50>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	6912      	ldr	r2, [r2, #16]
 800ad5c:	f06f 010e 	mvn.w	r1, #14
 800ad60:	4610      	mov	r0, r2
 800ad62:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ad64:	6879      	ldr	r1, [r7, #4]
 800ad66:	480a      	ldr	r0, [pc, #40]	; (800ad90 <tcp_input_delayed_close+0x7c>)
 800ad68:	f7ff fa52 	bl	800a210 <tcp_pcb_remove>
    tcp_free(pcb);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7fe f83f 	bl	8008df0 <tcp_free>
    return 1;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e000      	b.n	800ad78 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	080133e4 	.word	0x080133e4
 800ad84:	080135b4 	.word	0x080135b4
 800ad88:	08013430 	.word	0x08013430
 800ad8c:	20004155 	.word	0x20004155
 800ad90:	2000ab10 	.word	0x2000ab10

0800ad94 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ad94:	b590      	push	{r4, r7, lr}
 800ad96:	b08b      	sub	sp, #44	; 0x2c
 800ad98:	af04      	add	r7, sp, #16
 800ad9a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ad9c:	4b6f      	ldr	r3, [pc, #444]	; (800af5c <tcp_listen_input+0x1c8>)
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	f003 0304 	and.w	r3, r3, #4
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f040 80d2 	bne.w	800af4e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d106      	bne.n	800adbe <tcp_listen_input+0x2a>
 800adb0:	4b6b      	ldr	r3, [pc, #428]	; (800af60 <tcp_listen_input+0x1cc>)
 800adb2:	f240 2281 	movw	r2, #641	; 0x281
 800adb6:	496b      	ldr	r1, [pc, #428]	; (800af64 <tcp_listen_input+0x1d0>)
 800adb8:	486b      	ldr	r0, [pc, #428]	; (800af68 <tcp_listen_input+0x1d4>)
 800adba:	f006 fa59 	bl	8011270 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800adbe:	4b67      	ldr	r3, [pc, #412]	; (800af5c <tcp_listen_input+0x1c8>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	f003 0310 	and.w	r3, r3, #16
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d019      	beq.n	800adfe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adca:	4b68      	ldr	r3, [pc, #416]	; (800af6c <tcp_listen_input+0x1d8>)
 800adcc:	6819      	ldr	r1, [r3, #0]
 800adce:	4b68      	ldr	r3, [pc, #416]	; (800af70 <tcp_listen_input+0x1dc>)
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	461a      	mov	r2, r3
 800add4:	4b67      	ldr	r3, [pc, #412]	; (800af74 <tcp_listen_input+0x1e0>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adda:	4b67      	ldr	r3, [pc, #412]	; (800af78 <tcp_listen_input+0x1e4>)
 800addc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adde:	885b      	ldrh	r3, [r3, #2]
 800ade0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ade2:	4a65      	ldr	r2, [pc, #404]	; (800af78 <tcp_listen_input+0x1e4>)
 800ade4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ade6:	8812      	ldrh	r2, [r2, #0]
 800ade8:	b292      	uxth	r2, r2
 800adea:	9202      	str	r2, [sp, #8]
 800adec:	9301      	str	r3, [sp, #4]
 800adee:	4b63      	ldr	r3, [pc, #396]	; (800af7c <tcp_listen_input+0x1e8>)
 800adf0:	9300      	str	r3, [sp, #0]
 800adf2:	4b63      	ldr	r3, [pc, #396]	; (800af80 <tcp_listen_input+0x1ec>)
 800adf4:	4602      	mov	r2, r0
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f002 ff7e 	bl	800dcf8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800adfc:	e0a9      	b.n	800af52 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800adfe:	4b57      	ldr	r3, [pc, #348]	; (800af5c <tcp_listen_input+0x1c8>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	f003 0302 	and.w	r3, r3, #2
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 80a3 	beq.w	800af52 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	7d5b      	ldrb	r3, [r3, #21]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff f929 	bl	800a068 <tcp_alloc>
 800ae16:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d111      	bne.n	800ae42 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00a      	beq.n	800ae3c <tcp_listen_input+0xa8>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	6910      	ldr	r0, [r2, #16]
 800ae2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae32:	2100      	movs	r1, #0
 800ae34:	4798      	blx	r3
 800ae36:	4603      	mov	r3, r0
 800ae38:	73bb      	strb	r3, [r7, #14]
      return;
 800ae3a:	e08b      	b.n	800af54 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ae3c:	23f0      	movs	r3, #240	; 0xf0
 800ae3e:	73bb      	strb	r3, [r7, #14]
      return;
 800ae40:	e088      	b.n	800af54 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ae42:	4b50      	ldr	r3, [pc, #320]	; (800af84 <tcp_listen_input+0x1f0>)
 800ae44:	695a      	ldr	r2, [r3, #20]
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ae4a:	4b4e      	ldr	r3, [pc, #312]	; (800af84 <tcp_listen_input+0x1f0>)
 800ae4c:	691a      	ldr	r2, [r3, #16]
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	8ada      	ldrh	r2, [r3, #22]
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ae5a:	4b47      	ldr	r3, [pc, #284]	; (800af78 <tcp_listen_input+0x1e4>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	881b      	ldrh	r3, [r3, #0]
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	2203      	movs	r2, #3
 800ae6a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ae6c:	4b41      	ldr	r3, [pc, #260]	; (800af74 <tcp_listen_input+0x1e0>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	1c5a      	adds	r2, r3, #1
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ae7e:	6978      	ldr	r0, [r7, #20]
 800ae80:	f7ff fa5a 	bl	800a338 <tcp_next_iss>
 800ae84:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ae9e:	4b35      	ldr	r3, [pc, #212]	; (800af74 <tcp_listen_input+0x1e0>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	1e5a      	subs	r2, r3, #1
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	691a      	ldr	r2, [r3, #16]
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	7a5b      	ldrb	r3, [r3, #9]
 800aeba:	f003 030c 	and.w	r3, r3, #12
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	7a1a      	ldrb	r2, [r3, #8]
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800aecc:	4b2e      	ldr	r3, [pc, #184]	; (800af88 <tcp_listen_input+0x1f4>)
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	60da      	str	r2, [r3, #12]
 800aed4:	4a2c      	ldr	r2, [pc, #176]	; (800af88 <tcp_listen_input+0x1f4>)
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	6013      	str	r3, [r2, #0]
 800aeda:	f003 f8cf 	bl	800e07c <tcp_timer_needed>
 800aede:	4b2b      	ldr	r3, [pc, #172]	; (800af8c <tcp_listen_input+0x1f8>)
 800aee0:	2201      	movs	r2, #1
 800aee2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800aee4:	6978      	ldr	r0, [r7, #20]
 800aee6:	f001 fd8d 	bl	800ca04 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800aeea:	4b23      	ldr	r3, [pc, #140]	; (800af78 <tcp_listen_input+0x1e4>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	89db      	ldrh	r3, [r3, #14]
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4618      	mov	r0, r3
 800af0e:	f004 fcc3 	bl	800f898 <ip4_route>
 800af12:	4601      	mov	r1, r0
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	3304      	adds	r3, #4
 800af18:	461a      	mov	r2, r3
 800af1a:	4620      	mov	r0, r4
 800af1c:	f7ff fa32 	bl	800a384 <tcp_eff_send_mss_netif>
 800af20:	4603      	mov	r3, r0
 800af22:	461a      	mov	r2, r3
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800af28:	2112      	movs	r1, #18
 800af2a:	6978      	ldr	r0, [r7, #20]
 800af2c:	f002 f842 	bl	800cfb4 <tcp_enqueue_flags>
 800af30:	4603      	mov	r3, r0
 800af32:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800af34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d004      	beq.n	800af46 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800af3c:	2100      	movs	r1, #0
 800af3e:	6978      	ldr	r0, [r7, #20]
 800af40:	f7fe f980 	bl	8009244 <tcp_abandon>
      return;
 800af44:	e006      	b.n	800af54 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800af46:	6978      	ldr	r0, [r7, #20]
 800af48:	f002 f922 	bl	800d190 <tcp_output>
  return;
 800af4c:	e001      	b.n	800af52 <tcp_listen_input+0x1be>
    return;
 800af4e:	bf00      	nop
 800af50:	e000      	b.n	800af54 <tcp_listen_input+0x1c0>
  return;
 800af52:	bf00      	nop
}
 800af54:	371c      	adds	r7, #28
 800af56:	46bd      	mov	sp, r7
 800af58:	bd90      	pop	{r4, r7, pc}
 800af5a:	bf00      	nop
 800af5c:	20004154 	.word	0x20004154
 800af60:	080133e4 	.word	0x080133e4
 800af64:	080135dc 	.word	0x080135dc
 800af68:	08013430 	.word	0x08013430
 800af6c:	2000414c 	.word	0x2000414c
 800af70:	20004152 	.word	0x20004152
 800af74:	20004148 	.word	0x20004148
 800af78:	20004138 	.word	0x20004138
 800af7c:	2000740c 	.word	0x2000740c
 800af80:	20007410 	.word	0x20007410
 800af84:	200073fc 	.word	0x200073fc
 800af88:	2000ab10 	.word	0x2000ab10
 800af8c:	2000ab0c 	.word	0x2000ab0c

0800af90 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af04      	add	r7, sp, #16
 800af96:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800af98:	4b2f      	ldr	r3, [pc, #188]	; (800b058 <tcp_timewait_input+0xc8>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	f003 0304 	and.w	r3, r3, #4
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d153      	bne.n	800b04c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d106      	bne.n	800afb8 <tcp_timewait_input+0x28>
 800afaa:	4b2c      	ldr	r3, [pc, #176]	; (800b05c <tcp_timewait_input+0xcc>)
 800afac:	f240 22ee 	movw	r2, #750	; 0x2ee
 800afb0:	492b      	ldr	r1, [pc, #172]	; (800b060 <tcp_timewait_input+0xd0>)
 800afb2:	482c      	ldr	r0, [pc, #176]	; (800b064 <tcp_timewait_input+0xd4>)
 800afb4:	f006 f95c 	bl	8011270 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800afb8:	4b27      	ldr	r3, [pc, #156]	; (800b058 <tcp_timewait_input+0xc8>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	f003 0302 	and.w	r3, r3, #2
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d02a      	beq.n	800b01a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800afc4:	4b28      	ldr	r3, [pc, #160]	; (800b068 <tcp_timewait_input+0xd8>)
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	db2d      	blt.n	800b02e <tcp_timewait_input+0x9e>
 800afd2:	4b25      	ldr	r3, [pc, #148]	; (800b068 <tcp_timewait_input+0xd8>)
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	6879      	ldr	r1, [r7, #4]
 800afdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800afde:	440b      	add	r3, r1
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	dc23      	bgt.n	800b02e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800afe6:	4b21      	ldr	r3, [pc, #132]	; (800b06c <tcp_timewait_input+0xdc>)
 800afe8:	6819      	ldr	r1, [r3, #0]
 800afea:	4b21      	ldr	r3, [pc, #132]	; (800b070 <tcp_timewait_input+0xe0>)
 800afec:	881b      	ldrh	r3, [r3, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	4b1d      	ldr	r3, [pc, #116]	; (800b068 <tcp_timewait_input+0xd8>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aff6:	4b1f      	ldr	r3, [pc, #124]	; (800b074 <tcp_timewait_input+0xe4>)
 800aff8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800affa:	885b      	ldrh	r3, [r3, #2]
 800affc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800affe:	4a1d      	ldr	r2, [pc, #116]	; (800b074 <tcp_timewait_input+0xe4>)
 800b000:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b002:	8812      	ldrh	r2, [r2, #0]
 800b004:	b292      	uxth	r2, r2
 800b006:	9202      	str	r2, [sp, #8]
 800b008:	9301      	str	r3, [sp, #4]
 800b00a:	4b1b      	ldr	r3, [pc, #108]	; (800b078 <tcp_timewait_input+0xe8>)
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	4b1b      	ldr	r3, [pc, #108]	; (800b07c <tcp_timewait_input+0xec>)
 800b010:	4602      	mov	r2, r0
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f002 fe70 	bl	800dcf8 <tcp_rst>
      return;
 800b018:	e01b      	b.n	800b052 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b01a:	4b0f      	ldr	r3, [pc, #60]	; (800b058 <tcp_timewait_input+0xc8>)
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b026:	4b16      	ldr	r3, [pc, #88]	; (800b080 <tcp_timewait_input+0xf0>)
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b02e:	4b10      	ldr	r3, [pc, #64]	; (800b070 <tcp_timewait_input+0xe0>)
 800b030:	881b      	ldrh	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00c      	beq.n	800b050 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	8b5b      	ldrh	r3, [r3, #26]
 800b03a:	f043 0302 	orr.w	r3, r3, #2
 800b03e:	b29a      	uxth	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f002 f8a3 	bl	800d190 <tcp_output>
  }
  return;
 800b04a:	e001      	b.n	800b050 <tcp_timewait_input+0xc0>
    return;
 800b04c:	bf00      	nop
 800b04e:	e000      	b.n	800b052 <tcp_timewait_input+0xc2>
  return;
 800b050:	bf00      	nop
}
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	20004154 	.word	0x20004154
 800b05c:	080133e4 	.word	0x080133e4
 800b060:	080135fc 	.word	0x080135fc
 800b064:	08013430 	.word	0x08013430
 800b068:	20004148 	.word	0x20004148
 800b06c:	2000414c 	.word	0x2000414c
 800b070:	20004152 	.word	0x20004152
 800b074:	20004138 	.word	0x20004138
 800b078:	2000740c 	.word	0x2000740c
 800b07c:	20007410 	.word	0x20007410
 800b080:	2000ab14 	.word	0x2000ab14

0800b084 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b084:	b590      	push	{r4, r7, lr}
 800b086:	b08d      	sub	sp, #52	; 0x34
 800b088:	af04      	add	r7, sp, #16
 800b08a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b08c:	2300      	movs	r3, #0
 800b08e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d106      	bne.n	800b0a8 <tcp_process+0x24>
 800b09a:	4ba5      	ldr	r3, [pc, #660]	; (800b330 <tcp_process+0x2ac>)
 800b09c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b0a0:	49a4      	ldr	r1, [pc, #656]	; (800b334 <tcp_process+0x2b0>)
 800b0a2:	48a5      	ldr	r0, [pc, #660]	; (800b338 <tcp_process+0x2b4>)
 800b0a4:	f006 f8e4 	bl	8011270 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b0a8:	4ba4      	ldr	r3, [pc, #656]	; (800b33c <tcp_process+0x2b8>)
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	f003 0304 	and.w	r3, r3, #4
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d04e      	beq.n	800b152 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	7d1b      	ldrb	r3, [r3, #20]
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d108      	bne.n	800b0ce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0c0:	4b9f      	ldr	r3, [pc, #636]	; (800b340 <tcp_process+0x2bc>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d123      	bne.n	800b110 <tcp_process+0x8c>
        acceptable = 1;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	76fb      	strb	r3, [r7, #27]
 800b0cc:	e020      	b.n	800b110 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0d2:	4b9c      	ldr	r3, [pc, #624]	; (800b344 <tcp_process+0x2c0>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d102      	bne.n	800b0e0 <tcp_process+0x5c>
        acceptable = 1;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	76fb      	strb	r3, [r7, #27]
 800b0de:	e017      	b.n	800b110 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b0e0:	4b98      	ldr	r3, [pc, #608]	; (800b344 <tcp_process+0x2c0>)
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	db10      	blt.n	800b110 <tcp_process+0x8c>
 800b0ee:	4b95      	ldr	r3, [pc, #596]	; (800b344 <tcp_process+0x2c0>)
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f6:	6879      	ldr	r1, [r7, #4]
 800b0f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b0fa:	440b      	add	r3, r1
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	dc06      	bgt.n	800b110 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	8b5b      	ldrh	r3, [r3, #26]
 800b106:	f043 0302 	orr.w	r3, r3, #2
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b110:	7efb      	ldrb	r3, [r7, #27]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d01b      	beq.n	800b14e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	7d1b      	ldrb	r3, [r3, #20]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d106      	bne.n	800b12c <tcp_process+0xa8>
 800b11e:	4b84      	ldr	r3, [pc, #528]	; (800b330 <tcp_process+0x2ac>)
 800b120:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b124:	4988      	ldr	r1, [pc, #544]	; (800b348 <tcp_process+0x2c4>)
 800b126:	4884      	ldr	r0, [pc, #528]	; (800b338 <tcp_process+0x2b4>)
 800b128:	f006 f8a2 	bl	8011270 <iprintf>
      recv_flags |= TF_RESET;
 800b12c:	4b87      	ldr	r3, [pc, #540]	; (800b34c <tcp_process+0x2c8>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	f043 0308 	orr.w	r3, r3, #8
 800b134:	b2da      	uxtb	r2, r3
 800b136:	4b85      	ldr	r3, [pc, #532]	; (800b34c <tcp_process+0x2c8>)
 800b138:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	8b5b      	ldrh	r3, [r3, #26]
 800b13e:	f023 0301 	bic.w	r3, r3, #1
 800b142:	b29a      	uxth	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b148:	f06f 030d 	mvn.w	r3, #13
 800b14c:	e37a      	b.n	800b844 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	e378      	b.n	800b844 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b152:	4b7a      	ldr	r3, [pc, #488]	; (800b33c <tcp_process+0x2b8>)
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	f003 0302 	and.w	r3, r3, #2
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d010      	beq.n	800b180 <tcp_process+0xfc>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	7d1b      	ldrb	r3, [r3, #20]
 800b162:	2b02      	cmp	r3, #2
 800b164:	d00c      	beq.n	800b180 <tcp_process+0xfc>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	7d1b      	ldrb	r3, [r3, #20]
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	d008      	beq.n	800b180 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	8b5b      	ldrh	r3, [r3, #26]
 800b172:	f043 0302 	orr.w	r3, r3, #2
 800b176:	b29a      	uxth	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	e361      	b.n	800b844 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	8b5b      	ldrh	r3, [r3, #26]
 800b184:	f003 0310 	and.w	r3, r3, #16
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d103      	bne.n	800b194 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b18c:	4b70      	ldr	r3, [pc, #448]	; (800b350 <tcp_process+0x2cc>)
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f001 fc2d 	bl	800ca04 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	7d1b      	ldrb	r3, [r3, #20]
 800b1ae:	3b02      	subs	r3, #2
 800b1b0:	2b07      	cmp	r3, #7
 800b1b2:	f200 8337 	bhi.w	800b824 <tcp_process+0x7a0>
 800b1b6:	a201      	add	r2, pc, #4	; (adr r2, 800b1bc <tcp_process+0x138>)
 800b1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1bc:	0800b1dd 	.word	0x0800b1dd
 800b1c0:	0800b40d 	.word	0x0800b40d
 800b1c4:	0800b585 	.word	0x0800b585
 800b1c8:	0800b5af 	.word	0x0800b5af
 800b1cc:	0800b6d3 	.word	0x0800b6d3
 800b1d0:	0800b585 	.word	0x0800b585
 800b1d4:	0800b75f 	.word	0x0800b75f
 800b1d8:	0800b7ef 	.word	0x0800b7ef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b1dc:	4b57      	ldr	r3, [pc, #348]	; (800b33c <tcp_process+0x2b8>)
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	f003 0310 	and.w	r3, r3, #16
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f000 80e4 	beq.w	800b3b2 <tcp_process+0x32e>
 800b1ea:	4b54      	ldr	r3, [pc, #336]	; (800b33c <tcp_process+0x2b8>)
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	f003 0302 	and.w	r3, r3, #2
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 80dd 	beq.w	800b3b2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1fc:	1c5a      	adds	r2, r3, #1
 800b1fe:	4b50      	ldr	r3, [pc, #320]	; (800b340 <tcp_process+0x2bc>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	429a      	cmp	r2, r3
 800b204:	f040 80d5 	bne.w	800b3b2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b208:	4b4e      	ldr	r3, [pc, #312]	; (800b344 <tcp_process+0x2c0>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	1c5a      	adds	r2, r3, #1
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b21a:	4b49      	ldr	r3, [pc, #292]	; (800b340 <tcp_process+0x2bc>)
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b222:	4b4c      	ldr	r3, [pc, #304]	; (800b354 <tcp_process+0x2d0>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	89db      	ldrh	r3, [r3, #14]
 800b228:	b29a      	uxth	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b23c:	4b41      	ldr	r3, [pc, #260]	; (800b344 <tcp_process+0x2c0>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	1e5a      	subs	r2, r3, #1
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2204      	movs	r2, #4
 800b24a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	3304      	adds	r3, #4
 800b254:	4618      	mov	r0, r3
 800b256:	f004 fb1f 	bl	800f898 <ip4_route>
 800b25a:	4601      	mov	r1, r0
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	3304      	adds	r3, #4
 800b260:	461a      	mov	r2, r3
 800b262:	4620      	mov	r0, r4
 800b264:	f7ff f88e 	bl	800a384 <tcp_eff_send_mss_netif>
 800b268:	4603      	mov	r3, r0
 800b26a:	461a      	mov	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b274:	009a      	lsls	r2, r3, #2
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b27a:	005b      	lsls	r3, r3, #1
 800b27c:	f241 111c 	movw	r1, #4380	; 0x111c
 800b280:	428b      	cmp	r3, r1
 800b282:	bf38      	it	cc
 800b284:	460b      	movcc	r3, r1
 800b286:	429a      	cmp	r2, r3
 800b288:	d204      	bcs.n	800b294 <tcp_process+0x210>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	b29b      	uxth	r3, r3
 800b292:	e00d      	b.n	800b2b0 <tcp_process+0x22c>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b298:	005b      	lsls	r3, r3, #1
 800b29a:	f241 121c 	movw	r2, #4380	; 0x111c
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d904      	bls.n	800b2ac <tcp_process+0x228>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2a6:	005b      	lsls	r3, r3, #1
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	e001      	b.n	800b2b0 <tcp_process+0x22c>
 800b2ac:	f241 131c 	movw	r3, #4380	; 0x111c
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d106      	bne.n	800b2ce <tcp_process+0x24a>
 800b2c0:	4b1b      	ldr	r3, [pc, #108]	; (800b330 <tcp_process+0x2ac>)
 800b2c2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b2c6:	4924      	ldr	r1, [pc, #144]	; (800b358 <tcp_process+0x2d4>)
 800b2c8:	481b      	ldr	r0, [pc, #108]	; (800b338 <tcp_process+0x2b4>)
 800b2ca:	f005 ffd1 	bl	8011270 <iprintf>
        --pcb->snd_queuelen;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d111      	bne.n	800b30e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2ee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d106      	bne.n	800b304 <tcp_process+0x280>
 800b2f6:	4b0e      	ldr	r3, [pc, #56]	; (800b330 <tcp_process+0x2ac>)
 800b2f8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b2fc:	4917      	ldr	r1, [pc, #92]	; (800b35c <tcp_process+0x2d8>)
 800b2fe:	480e      	ldr	r0, [pc, #56]	; (800b338 <tcp_process+0x2b4>)
 800b300:	f005 ffb6 	bl	8011270 <iprintf>
          pcb->unsent = rseg->next;
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	66da      	str	r2, [r3, #108]	; 0x6c
 800b30c:	e003      	b.n	800b316 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b316:	69f8      	ldr	r0, [r7, #28]
 800b318:	f7fe fd3d 	bl	8009d96 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b320:	2b00      	cmp	r3, #0
 800b322:	d11d      	bne.n	800b360 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b32a:	861a      	strh	r2, [r3, #48]	; 0x30
 800b32c:	e01f      	b.n	800b36e <tcp_process+0x2ea>
 800b32e:	bf00      	nop
 800b330:	080133e4 	.word	0x080133e4
 800b334:	0801361c 	.word	0x0801361c
 800b338:	08013430 	.word	0x08013430
 800b33c:	20004154 	.word	0x20004154
 800b340:	2000414c 	.word	0x2000414c
 800b344:	20004148 	.word	0x20004148
 800b348:	08013638 	.word	0x08013638
 800b34c:	20004155 	.word	0x20004155
 800b350:	2000ab14 	.word	0x2000ab14
 800b354:	20004138 	.word	0x20004138
 800b358:	08013658 	.word	0x08013658
 800b35c:	08013670 	.word	0x08013670
        } else {
          pcb->rtime = 0;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00a      	beq.n	800b38e <tcp_process+0x30a>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	6910      	ldr	r0, [r2, #16]
 800b382:	2200      	movs	r2, #0
 800b384:	6879      	ldr	r1, [r7, #4]
 800b386:	4798      	blx	r3
 800b388:	4603      	mov	r3, r0
 800b38a:	76bb      	strb	r3, [r7, #26]
 800b38c:	e001      	b.n	800b392 <tcp_process+0x30e>
 800b38e:	2300      	movs	r3, #0
 800b390:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b392:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b396:	f113 0f0d 	cmn.w	r3, #13
 800b39a:	d102      	bne.n	800b3a2 <tcp_process+0x31e>
          return ERR_ABRT;
 800b39c:	f06f 030c 	mvn.w	r3, #12
 800b3a0:	e250      	b.n	800b844 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	8b5b      	ldrh	r3, [r3, #26]
 800b3a6:	f043 0302 	orr.w	r3, r3, #2
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b3b0:	e23a      	b.n	800b828 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b3b2:	4b9d      	ldr	r3, [pc, #628]	; (800b628 <tcp_process+0x5a4>)
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	f003 0310 	and.w	r3, r3, #16
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 8234 	beq.w	800b828 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3c0:	4b9a      	ldr	r3, [pc, #616]	; (800b62c <tcp_process+0x5a8>)
 800b3c2:	6819      	ldr	r1, [r3, #0]
 800b3c4:	4b9a      	ldr	r3, [pc, #616]	; (800b630 <tcp_process+0x5ac>)
 800b3c6:	881b      	ldrh	r3, [r3, #0]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	4b9a      	ldr	r3, [pc, #616]	; (800b634 <tcp_process+0x5b0>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3d0:	4b99      	ldr	r3, [pc, #612]	; (800b638 <tcp_process+0x5b4>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3d4:	885b      	ldrh	r3, [r3, #2]
 800b3d6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3d8:	4a97      	ldr	r2, [pc, #604]	; (800b638 <tcp_process+0x5b4>)
 800b3da:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3dc:	8812      	ldrh	r2, [r2, #0]
 800b3de:	b292      	uxth	r2, r2
 800b3e0:	9202      	str	r2, [sp, #8]
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	4b95      	ldr	r3, [pc, #596]	; (800b63c <tcp_process+0x5b8>)
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	4b95      	ldr	r3, [pc, #596]	; (800b640 <tcp_process+0x5bc>)
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f002 fc83 	bl	800dcf8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3f8:	2b05      	cmp	r3, #5
 800b3fa:	f200 8215 	bhi.w	800b828 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f002 fa4d 	bl	800d8a4 <tcp_rexmit_rto>
      break;
 800b40a:	e20d      	b.n	800b828 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b40c:	4b86      	ldr	r3, [pc, #536]	; (800b628 <tcp_process+0x5a4>)
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	f003 0310 	and.w	r3, r3, #16
 800b414:	2b00      	cmp	r3, #0
 800b416:	f000 80a1 	beq.w	800b55c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b41a:	4b84      	ldr	r3, [pc, #528]	; (800b62c <tcp_process+0x5a8>)
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	3b01      	subs	r3, #1
 800b426:	2b00      	cmp	r3, #0
 800b428:	db7e      	blt.n	800b528 <tcp_process+0x4a4>
 800b42a:	4b80      	ldr	r3, [pc, #512]	; (800b62c <tcp_process+0x5a8>)
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b432:	1ad3      	subs	r3, r2, r3
 800b434:	2b00      	cmp	r3, #0
 800b436:	dc77      	bgt.n	800b528 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2204      	movs	r2, #4
 800b43c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b442:	2b00      	cmp	r3, #0
 800b444:	d102      	bne.n	800b44c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b446:	23fa      	movs	r3, #250	; 0xfa
 800b448:	76bb      	strb	r3, [r7, #26]
 800b44a:	e01d      	b.n	800b488 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b450:	699b      	ldr	r3, [r3, #24]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d106      	bne.n	800b464 <tcp_process+0x3e0>
 800b456:	4b7b      	ldr	r3, [pc, #492]	; (800b644 <tcp_process+0x5c0>)
 800b458:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b45c:	497a      	ldr	r1, [pc, #488]	; (800b648 <tcp_process+0x5c4>)
 800b45e:	487b      	ldr	r0, [pc, #492]	; (800b64c <tcp_process+0x5c8>)
 800b460:	f005 ff06 	bl	8011270 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b468:	699b      	ldr	r3, [r3, #24]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00a      	beq.n	800b484 <tcp_process+0x400>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b472:	699b      	ldr	r3, [r3, #24]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6910      	ldr	r0, [r2, #16]
 800b478:	2200      	movs	r2, #0
 800b47a:	6879      	ldr	r1, [r7, #4]
 800b47c:	4798      	blx	r3
 800b47e:	4603      	mov	r3, r0
 800b480:	76bb      	strb	r3, [r7, #26]
 800b482:	e001      	b.n	800b488 <tcp_process+0x404>
 800b484:	23f0      	movs	r3, #240	; 0xf0
 800b486:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b488:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00a      	beq.n	800b4a6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b490:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b494:	f113 0f0d 	cmn.w	r3, #13
 800b498:	d002      	beq.n	800b4a0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f7fd ff90 	bl	80093c0 <tcp_abort>
            }
            return ERR_ABRT;
 800b4a0:	f06f 030c 	mvn.w	r3, #12
 800b4a4:	e1ce      	b.n	800b844 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fae0 	bl	800ba6c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b4ac:	4b68      	ldr	r3, [pc, #416]	; (800b650 <tcp_process+0x5cc>)
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d005      	beq.n	800b4c0 <tcp_process+0x43c>
            recv_acked--;
 800b4b4:	4b66      	ldr	r3, [pc, #408]	; (800b650 <tcp_process+0x5cc>)
 800b4b6:	881b      	ldrh	r3, [r3, #0]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	4b64      	ldr	r3, [pc, #400]	; (800b650 <tcp_process+0x5cc>)
 800b4be:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4c4:	009a      	lsls	r2, r3, #2
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	f241 111c 	movw	r1, #4380	; 0x111c
 800b4d0:	428b      	cmp	r3, r1
 800b4d2:	bf38      	it	cc
 800b4d4:	460b      	movcc	r3, r1
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d204      	bcs.n	800b4e4 <tcp_process+0x460>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	e00d      	b.n	800b500 <tcp_process+0x47c>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4e8:	005b      	lsls	r3, r3, #1
 800b4ea:	f241 121c 	movw	r2, #4380	; 0x111c
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d904      	bls.n	800b4fc <tcp_process+0x478>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4f6:	005b      	lsls	r3, r3, #1
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	e001      	b.n	800b500 <tcp_process+0x47c>
 800b4fc:	f241 131c 	movw	r3, #4380	; 0x111c
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b506:	4b53      	ldr	r3, [pc, #332]	; (800b654 <tcp_process+0x5d0>)
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	f003 0320 	and.w	r3, r3, #32
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d037      	beq.n	800b582 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	8b5b      	ldrh	r3, [r3, #26]
 800b516:	f043 0302 	orr.w	r3, r3, #2
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2207      	movs	r2, #7
 800b524:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b526:	e02c      	b.n	800b582 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b528:	4b40      	ldr	r3, [pc, #256]	; (800b62c <tcp_process+0x5a8>)
 800b52a:	6819      	ldr	r1, [r3, #0]
 800b52c:	4b40      	ldr	r3, [pc, #256]	; (800b630 <tcp_process+0x5ac>)
 800b52e:	881b      	ldrh	r3, [r3, #0]
 800b530:	461a      	mov	r2, r3
 800b532:	4b40      	ldr	r3, [pc, #256]	; (800b634 <tcp_process+0x5b0>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b538:	4b3f      	ldr	r3, [pc, #252]	; (800b638 <tcp_process+0x5b4>)
 800b53a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b53c:	885b      	ldrh	r3, [r3, #2]
 800b53e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b540:	4a3d      	ldr	r2, [pc, #244]	; (800b638 <tcp_process+0x5b4>)
 800b542:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b544:	8812      	ldrh	r2, [r2, #0]
 800b546:	b292      	uxth	r2, r2
 800b548:	9202      	str	r2, [sp, #8]
 800b54a:	9301      	str	r3, [sp, #4]
 800b54c:	4b3b      	ldr	r3, [pc, #236]	; (800b63c <tcp_process+0x5b8>)
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	4b3b      	ldr	r3, [pc, #236]	; (800b640 <tcp_process+0x5bc>)
 800b552:	4602      	mov	r2, r0
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f002 fbcf 	bl	800dcf8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b55a:	e167      	b.n	800b82c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b55c:	4b32      	ldr	r3, [pc, #200]	; (800b628 <tcp_process+0x5a4>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b00      	cmp	r3, #0
 800b566:	f000 8161 	beq.w	800b82c <tcp_process+0x7a8>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56e:	1e5a      	subs	r2, r3, #1
 800b570:	4b30      	ldr	r3, [pc, #192]	; (800b634 <tcp_process+0x5b0>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	429a      	cmp	r2, r3
 800b576:	f040 8159 	bne.w	800b82c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f002 f9b4 	bl	800d8e8 <tcp_rexmit>
      break;
 800b580:	e154      	b.n	800b82c <tcp_process+0x7a8>
 800b582:	e153      	b.n	800b82c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fa71 	bl	800ba6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b58a:	4b32      	ldr	r3, [pc, #200]	; (800b654 <tcp_process+0x5d0>)
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	f003 0320 	and.w	r3, r3, #32
 800b592:	2b00      	cmp	r3, #0
 800b594:	f000 814c 	beq.w	800b830 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	8b5b      	ldrh	r3, [r3, #26]
 800b59c:	f043 0302 	orr.w	r3, r3, #2
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2207      	movs	r2, #7
 800b5aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b5ac:	e140      	b.n	800b830 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa5c 	bl	800ba6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b5b4:	4b27      	ldr	r3, [pc, #156]	; (800b654 <tcp_process+0x5d0>)
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	f003 0320 	and.w	r3, r3, #32
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d071      	beq.n	800b6a4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5c0:	4b19      	ldr	r3, [pc, #100]	; (800b628 <tcp_process+0x5a4>)
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	f003 0310 	and.w	r3, r3, #16
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d060      	beq.n	800b68e <tcp_process+0x60a>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5d0:	4b16      	ldr	r3, [pc, #88]	; (800b62c <tcp_process+0x5a8>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d15a      	bne.n	800b68e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d156      	bne.n	800b68e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	8b5b      	ldrh	r3, [r3, #26]
 800b5e4:	f043 0302 	orr.w	r3, r3, #2
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7fe fdbe 	bl	800a170 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b5f4:	4b18      	ldr	r3, [pc, #96]	; (800b658 <tcp_process+0x5d4>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d105      	bne.n	800b60a <tcp_process+0x586>
 800b5fe:	4b16      	ldr	r3, [pc, #88]	; (800b658 <tcp_process+0x5d4>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	4a14      	ldr	r2, [pc, #80]	; (800b658 <tcp_process+0x5d4>)
 800b606:	6013      	str	r3, [r2, #0]
 800b608:	e02e      	b.n	800b668 <tcp_process+0x5e4>
 800b60a:	4b13      	ldr	r3, [pc, #76]	; (800b658 <tcp_process+0x5d4>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	617b      	str	r3, [r7, #20]
 800b610:	e027      	b.n	800b662 <tcp_process+0x5de>
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d11f      	bne.n	800b65c <tcp_process+0x5d8>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68da      	ldr	r2, [r3, #12]
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	60da      	str	r2, [r3, #12]
 800b624:	e020      	b.n	800b668 <tcp_process+0x5e4>
 800b626:	bf00      	nop
 800b628:	20004154 	.word	0x20004154
 800b62c:	2000414c 	.word	0x2000414c
 800b630:	20004152 	.word	0x20004152
 800b634:	20004148 	.word	0x20004148
 800b638:	20004138 	.word	0x20004138
 800b63c:	2000740c 	.word	0x2000740c
 800b640:	20007410 	.word	0x20007410
 800b644:	080133e4 	.word	0x080133e4
 800b648:	08013684 	.word	0x08013684
 800b64c:	08013430 	.word	0x08013430
 800b650:	20004150 	.word	0x20004150
 800b654:	20004155 	.word	0x20004155
 800b658:	2000ab10 	.word	0x2000ab10
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	617b      	str	r3, [r7, #20]
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d1d4      	bne.n	800b612 <tcp_process+0x58e>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	60da      	str	r2, [r3, #12]
 800b66e:	4b77      	ldr	r3, [pc, #476]	; (800b84c <tcp_process+0x7c8>)
 800b670:	2201      	movs	r2, #1
 800b672:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	220a      	movs	r2, #10
 800b678:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b67a:	4b75      	ldr	r3, [pc, #468]	; (800b850 <tcp_process+0x7cc>)
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	60da      	str	r2, [r3, #12]
 800b682:	4a73      	ldr	r2, [pc, #460]	; (800b850 <tcp_process+0x7cc>)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6013      	str	r3, [r2, #0]
 800b688:	f002 fcf8 	bl	800e07c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b68c:	e0d2      	b.n	800b834 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	8b5b      	ldrh	r3, [r3, #26]
 800b692:	f043 0302 	orr.w	r3, r3, #2
 800b696:	b29a      	uxth	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2208      	movs	r2, #8
 800b6a0:	751a      	strb	r2, [r3, #20]
      break;
 800b6a2:	e0c7      	b.n	800b834 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6a4:	4b6b      	ldr	r3, [pc, #428]	; (800b854 <tcp_process+0x7d0>)
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	f003 0310 	and.w	r3, r3, #16
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f000 80c1 	beq.w	800b834 <tcp_process+0x7b0>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6b6:	4b68      	ldr	r3, [pc, #416]	; (800b858 <tcp_process+0x7d4>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	f040 80ba 	bne.w	800b834 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f040 80b5 	bne.w	800b834 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2206      	movs	r2, #6
 800b6ce:	751a      	strb	r2, [r3, #20]
      break;
 800b6d0:	e0b0      	b.n	800b834 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f9ca 	bl	800ba6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b6d8:	4b60      	ldr	r3, [pc, #384]	; (800b85c <tcp_process+0x7d8>)
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	f003 0320 	and.w	r3, r3, #32
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 80a9 	beq.w	800b838 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	8b5b      	ldrh	r3, [r3, #26]
 800b6ea:	f043 0302 	orr.w	r3, r3, #2
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7fe fd3b 	bl	800a170 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b6fa:	4b59      	ldr	r3, [pc, #356]	; (800b860 <tcp_process+0x7dc>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	429a      	cmp	r2, r3
 800b702:	d105      	bne.n	800b710 <tcp_process+0x68c>
 800b704:	4b56      	ldr	r3, [pc, #344]	; (800b860 <tcp_process+0x7dc>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	4a55      	ldr	r2, [pc, #340]	; (800b860 <tcp_process+0x7dc>)
 800b70c:	6013      	str	r3, [r2, #0]
 800b70e:	e013      	b.n	800b738 <tcp_process+0x6b4>
 800b710:	4b53      	ldr	r3, [pc, #332]	; (800b860 <tcp_process+0x7dc>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	613b      	str	r3, [r7, #16]
 800b716:	e00c      	b.n	800b732 <tcp_process+0x6ae>
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d104      	bne.n	800b72c <tcp_process+0x6a8>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	68da      	ldr	r2, [r3, #12]
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	60da      	str	r2, [r3, #12]
 800b72a:	e005      	b.n	800b738 <tcp_process+0x6b4>
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	613b      	str	r3, [r7, #16]
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1ef      	bne.n	800b718 <tcp_process+0x694>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	60da      	str	r2, [r3, #12]
 800b73e:	4b43      	ldr	r3, [pc, #268]	; (800b84c <tcp_process+0x7c8>)
 800b740:	2201      	movs	r2, #1
 800b742:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	220a      	movs	r2, #10
 800b748:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b74a:	4b41      	ldr	r3, [pc, #260]	; (800b850 <tcp_process+0x7cc>)
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	60da      	str	r2, [r3, #12]
 800b752:	4a3f      	ldr	r2, [pc, #252]	; (800b850 <tcp_process+0x7cc>)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	f002 fc90 	bl	800e07c <tcp_timer_needed>
      }
      break;
 800b75c:	e06c      	b.n	800b838 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f984 	bl	800ba6c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b764:	4b3b      	ldr	r3, [pc, #236]	; (800b854 <tcp_process+0x7d0>)
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	f003 0310 	and.w	r3, r3, #16
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d065      	beq.n	800b83c <tcp_process+0x7b8>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b774:	4b38      	ldr	r3, [pc, #224]	; (800b858 <tcp_process+0x7d4>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d15f      	bne.n	800b83c <tcp_process+0x7b8>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b780:	2b00      	cmp	r3, #0
 800b782:	d15b      	bne.n	800b83c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f7fe fcf3 	bl	800a170 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b78a:	4b35      	ldr	r3, [pc, #212]	; (800b860 <tcp_process+0x7dc>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	429a      	cmp	r2, r3
 800b792:	d105      	bne.n	800b7a0 <tcp_process+0x71c>
 800b794:	4b32      	ldr	r3, [pc, #200]	; (800b860 <tcp_process+0x7dc>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	4a31      	ldr	r2, [pc, #196]	; (800b860 <tcp_process+0x7dc>)
 800b79c:	6013      	str	r3, [r2, #0]
 800b79e:	e013      	b.n	800b7c8 <tcp_process+0x744>
 800b7a0:	4b2f      	ldr	r3, [pc, #188]	; (800b860 <tcp_process+0x7dc>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	60fb      	str	r3, [r7, #12]
 800b7a6:	e00c      	b.n	800b7c2 <tcp_process+0x73e>
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d104      	bne.n	800b7bc <tcp_process+0x738>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	68da      	ldr	r2, [r3, #12]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	60da      	str	r2, [r3, #12]
 800b7ba:	e005      	b.n	800b7c8 <tcp_process+0x744>
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	60fb      	str	r3, [r7, #12]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1ef      	bne.n	800b7a8 <tcp_process+0x724>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	60da      	str	r2, [r3, #12]
 800b7ce:	4b1f      	ldr	r3, [pc, #124]	; (800b84c <tcp_process+0x7c8>)
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	220a      	movs	r2, #10
 800b7d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b7da:	4b1d      	ldr	r3, [pc, #116]	; (800b850 <tcp_process+0x7cc>)
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	60da      	str	r2, [r3, #12]
 800b7e2:	4a1b      	ldr	r2, [pc, #108]	; (800b850 <tcp_process+0x7cc>)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6013      	str	r3, [r2, #0]
 800b7e8:	f002 fc48 	bl	800e07c <tcp_timer_needed>
      }
      break;
 800b7ec:	e026      	b.n	800b83c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f93c 	bl	800ba6c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b7f4:	4b17      	ldr	r3, [pc, #92]	; (800b854 <tcp_process+0x7d0>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	f003 0310 	and.w	r3, r3, #16
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d01f      	beq.n	800b840 <tcp_process+0x7bc>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b804:	4b14      	ldr	r3, [pc, #80]	; (800b858 <tcp_process+0x7d4>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d119      	bne.n	800b840 <tcp_process+0x7bc>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b810:	2b00      	cmp	r3, #0
 800b812:	d115      	bne.n	800b840 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b814:	4b11      	ldr	r3, [pc, #68]	; (800b85c <tcp_process+0x7d8>)
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	f043 0310 	orr.w	r3, r3, #16
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	4b0f      	ldr	r3, [pc, #60]	; (800b85c <tcp_process+0x7d8>)
 800b820:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b822:	e00d      	b.n	800b840 <tcp_process+0x7bc>
    default:
      break;
 800b824:	bf00      	nop
 800b826:	e00c      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b828:	bf00      	nop
 800b82a:	e00a      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b82c:	bf00      	nop
 800b82e:	e008      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b830:	bf00      	nop
 800b832:	e006      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b834:	bf00      	nop
 800b836:	e004      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b838:	bf00      	nop
 800b83a:	e002      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b83c:	bf00      	nop
 800b83e:	e000      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b840:	bf00      	nop
  }
  return ERR_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3724      	adds	r7, #36	; 0x24
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd90      	pop	{r4, r7, pc}
 800b84c:	2000ab0c 	.word	0x2000ab0c
 800b850:	2000ab20 	.word	0x2000ab20
 800b854:	20004154 	.word	0x20004154
 800b858:	2000414c 	.word	0x2000414c
 800b85c:	20004155 	.word	0x20004155
 800b860:	2000ab10 	.word	0x2000ab10

0800b864 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d106      	bne.n	800b882 <tcp_oos_insert_segment+0x1e>
 800b874:	4b3b      	ldr	r3, [pc, #236]	; (800b964 <tcp_oos_insert_segment+0x100>)
 800b876:	f240 421f 	movw	r2, #1055	; 0x41f
 800b87a:	493b      	ldr	r1, [pc, #236]	; (800b968 <tcp_oos_insert_segment+0x104>)
 800b87c:	483b      	ldr	r0, [pc, #236]	; (800b96c <tcp_oos_insert_segment+0x108>)
 800b87e:	f005 fcf7 	bl	8011270 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	899b      	ldrh	r3, [r3, #12]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fb fc58 	bl	8007140 <lwip_htons>
 800b890:	4603      	mov	r3, r0
 800b892:	b2db      	uxtb	r3, r3
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d028      	beq.n	800b8ee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b89c:	6838      	ldr	r0, [r7, #0]
 800b89e:	f7fe fa65 	bl	8009d6c <tcp_segs_free>
    next = NULL;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	603b      	str	r3, [r7, #0]
 800b8a6:	e056      	b.n	800b956 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	899b      	ldrh	r3, [r3, #12]
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7fb fc45 	bl	8007140 <lwip_htons>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	f003 0301 	and.w	r3, r3, #1
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00d      	beq.n	800b8de <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	899b      	ldrh	r3, [r3, #12]
 800b8c8:	b29c      	uxth	r4, r3
 800b8ca:	2001      	movs	r0, #1
 800b8cc:	f7fb fc38 	bl	8007140 <lwip_htons>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	4322      	orrs	r2, r4
 800b8da:	b292      	uxth	r2, r2
 800b8dc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f7fe fa54 	bl	8009d96 <tcp_seg_free>
    while (next &&
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00e      	beq.n	800b912 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	891b      	ldrh	r3, [r3, #8]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	4b1d      	ldr	r3, [pc, #116]	; (800b970 <tcp_oos_insert_segment+0x10c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	441a      	add	r2, r3
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	8909      	ldrh	r1, [r1, #8]
 800b90a:	440b      	add	r3, r1
 800b90c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b90e:	2b00      	cmp	r3, #0
 800b910:	daca      	bge.n	800b8a8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d01e      	beq.n	800b956 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	891b      	ldrh	r3, [r3, #8]
 800b91c:	461a      	mov	r2, r3
 800b91e:	4b14      	ldr	r3, [pc, #80]	; (800b970 <tcp_oos_insert_segment+0x10c>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	441a      	add	r2, r3
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	dd12      	ble.n	800b956 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	b29a      	uxth	r2, r3
 800b938:	4b0d      	ldr	r3, [pc, #52]	; (800b970 <tcp_oos_insert_segment+0x10c>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	1ad3      	subs	r3, r2, r3
 800b940:	b29a      	uxth	r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	685a      	ldr	r2, [r3, #4]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	891b      	ldrh	r3, [r3, #8]
 800b94e:	4619      	mov	r1, r3
 800b950:	4610      	mov	r0, r2
 800b952:	f7fc fe1b 	bl	800858c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	601a      	str	r2, [r3, #0]
}
 800b95c:	bf00      	nop
 800b95e:	3714      	adds	r7, #20
 800b960:	46bd      	mov	sp, r7
 800b962:	bd90      	pop	{r4, r7, pc}
 800b964:	080133e4 	.word	0x080133e4
 800b968:	080136a4 	.word	0x080136a4
 800b96c:	08013430 	.word	0x08013430
 800b970:	20004148 	.word	0x20004148

0800b974 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b974:	b5b0      	push	{r4, r5, r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
 800b980:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b982:	e03e      	b.n	800ba02 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	4618      	mov	r0, r3
 800b994:	f7fd f80e 	bl	80089b4 <pbuf_clen>
 800b998:	4603      	mov	r3, r0
 800b99a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9a2:	8a7a      	ldrh	r2, [r7, #18]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d906      	bls.n	800b9b6 <tcp_free_acked_segments+0x42>
 800b9a8:	4b2a      	ldr	r3, [pc, #168]	; (800ba54 <tcp_free_acked_segments+0xe0>)
 800b9aa:	f240 4257 	movw	r2, #1111	; 0x457
 800b9ae:	492a      	ldr	r1, [pc, #168]	; (800ba58 <tcp_free_acked_segments+0xe4>)
 800b9b0:	482a      	ldr	r0, [pc, #168]	; (800ba5c <tcp_free_acked_segments+0xe8>)
 800b9b2:	f005 fc5d 	bl	8011270 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b9bc:	8a7b      	ldrh	r3, [r7, #18]
 800b9be:	1ad3      	subs	r3, r2, r3
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	891a      	ldrh	r2, [r3, #8]
 800b9cc:	4b24      	ldr	r3, [pc, #144]	; (800ba60 <tcp_free_acked_segments+0xec>)
 800b9ce:	881b      	ldrh	r3, [r3, #0]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	4b22      	ldr	r3, [pc, #136]	; (800ba60 <tcp_free_acked_segments+0xec>)
 800b9d6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b9d8:	6978      	ldr	r0, [r7, #20]
 800b9da:	f7fe f9dc 	bl	8009d96 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00c      	beq.n	800ba02 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d109      	bne.n	800ba02 <tcp_free_acked_segments+0x8e>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d106      	bne.n	800ba02 <tcp_free_acked_segments+0x8e>
 800b9f4:	4b17      	ldr	r3, [pc, #92]	; (800ba54 <tcp_free_acked_segments+0xe0>)
 800b9f6:	f240 4261 	movw	r2, #1121	; 0x461
 800b9fa:	491a      	ldr	r1, [pc, #104]	; (800ba64 <tcp_free_acked_segments+0xf0>)
 800b9fc:	4817      	ldr	r0, [pc, #92]	; (800ba5c <tcp_free_acked_segments+0xe8>)
 800b9fe:	f005 fc37 	bl	8011270 <iprintf>
  while (seg_list != NULL &&
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d020      	beq.n	800ba4a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fb fbab 	bl	800716a <lwip_htonl>
 800ba14:	4604      	mov	r4, r0
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	891b      	ldrh	r3, [r3, #8]
 800ba1a:	461d      	mov	r5, r3
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	899b      	ldrh	r3, [r3, #12]
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7fb fb8b 	bl	8007140 <lwip_htons>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	f003 0303 	and.w	r3, r3, #3
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d001      	beq.n	800ba3a <tcp_free_acked_segments+0xc6>
 800ba36:	2301      	movs	r3, #1
 800ba38:	e000      	b.n	800ba3c <tcp_free_acked_segments+0xc8>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	442b      	add	r3, r5
 800ba3e:	18e2      	adds	r2, r4, r3
 800ba40:	4b09      	ldr	r3, [pc, #36]	; (800ba68 <tcp_free_acked_segments+0xf4>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	dd9c      	ble.n	800b984 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bdb0      	pop	{r4, r5, r7, pc}
 800ba54:	080133e4 	.word	0x080133e4
 800ba58:	080136cc 	.word	0x080136cc
 800ba5c:	08013430 	.word	0x08013430
 800ba60:	20004150 	.word	0x20004150
 800ba64:	080136f4 	.word	0x080136f4
 800ba68:	2000414c 	.word	0x2000414c

0800ba6c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ba6c:	b5b0      	push	{r4, r5, r7, lr}
 800ba6e:	b094      	sub	sp, #80	; 0x50
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d106      	bne.n	800ba8c <tcp_receive+0x20>
 800ba7e:	4ba6      	ldr	r3, [pc, #664]	; (800bd18 <tcp_receive+0x2ac>)
 800ba80:	f240 427b 	movw	r2, #1147	; 0x47b
 800ba84:	49a5      	ldr	r1, [pc, #660]	; (800bd1c <tcp_receive+0x2b0>)
 800ba86:	48a6      	ldr	r0, [pc, #664]	; (800bd20 <tcp_receive+0x2b4>)
 800ba88:	f005 fbf2 	bl	8011270 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	7d1b      	ldrb	r3, [r3, #20]
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	d806      	bhi.n	800baa2 <tcp_receive+0x36>
 800ba94:	4ba0      	ldr	r3, [pc, #640]	; (800bd18 <tcp_receive+0x2ac>)
 800ba96:	f240 427c 	movw	r2, #1148	; 0x47c
 800ba9a:	49a2      	ldr	r1, [pc, #648]	; (800bd24 <tcp_receive+0x2b8>)
 800ba9c:	48a0      	ldr	r0, [pc, #640]	; (800bd20 <tcp_receive+0x2b4>)
 800ba9e:	f005 fbe7 	bl	8011270 <iprintf>

  if (flags & TCP_ACK) {
 800baa2:	4ba1      	ldr	r3, [pc, #644]	; (800bd28 <tcp_receive+0x2bc>)
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	f003 0310 	and.w	r3, r3, #16
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 8263 	beq.w	800bf76 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bab6:	461a      	mov	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800babc:	4413      	add	r3, r2
 800babe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bac4:	4b99      	ldr	r3, [pc, #612]	; (800bd2c <tcp_receive+0x2c0>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	2b00      	cmp	r3, #0
 800bacc:	db1b      	blt.n	800bb06 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bad2:	4b96      	ldr	r3, [pc, #600]	; (800bd2c <tcp_receive+0x2c0>)
 800bad4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d106      	bne.n	800bae8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bade:	4b94      	ldr	r3, [pc, #592]	; (800bd30 <tcp_receive+0x2c4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	db0e      	blt.n	800bb06 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800baec:	4b90      	ldr	r3, [pc, #576]	; (800bd30 <tcp_receive+0x2c4>)
 800baee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d125      	bne.n	800bb40 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800baf4:	4b8f      	ldr	r3, [pc, #572]	; (800bd34 <tcp_receive+0x2c8>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	89db      	ldrh	r3, [r3, #14]
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d91c      	bls.n	800bb40 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bb06:	4b8b      	ldr	r3, [pc, #556]	; (800bd34 <tcp_receive+0x2c8>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	89db      	ldrh	r3, [r3, #14]
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d205      	bcs.n	800bb30 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800bb30:	4b7e      	ldr	r3, [pc, #504]	; (800bd2c <tcp_receive+0x2c0>)
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800bb38:	4b7d      	ldr	r3, [pc, #500]	; (800bd30 <tcp_receive+0x2c4>)
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bb40:	4b7b      	ldr	r3, [pc, #492]	; (800bd30 <tcp_receive+0x2c4>)
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	dc58      	bgt.n	800bc00 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bb4e:	4b7a      	ldr	r3, [pc, #488]	; (800bd38 <tcp_receive+0x2cc>)
 800bb50:	881b      	ldrh	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d14b      	bne.n	800bbee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800bb60:	4413      	add	r3, r2
 800bb62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d142      	bne.n	800bbee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	db3d      	blt.n	800bbee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb76:	4b6e      	ldr	r3, [pc, #440]	; (800bd30 <tcp_receive+0x2c4>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d137      	bne.n	800bbee <tcp_receive+0x182>
              found_dupack = 1;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb88:	2bff      	cmp	r3, #255	; 0xff
 800bb8a:	d007      	beq.n	800bb9c <tcp_receive+0x130>
                ++pcb->dupacks;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb92:	3301      	adds	r3, #1
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bba2:	2b03      	cmp	r3, #3
 800bba4:	d91b      	bls.n	800bbde <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbb0:	4413      	add	r3, r2
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d30a      	bcc.n	800bbd4 <tcp_receive+0x168>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbc8:	4413      	add	r3, r2
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bbd2:	e004      	b.n	800bbde <tcp_receive+0x172>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d902      	bls.n	800bbee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f001 fee9 	bl	800d9c0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bbee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f040 8160 	bne.w	800beb6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bbfe:	e15a      	b.n	800beb6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc00:	4b4b      	ldr	r3, [pc, #300]	; (800bd30 <tcp_receive+0x2c4>)
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f2c0 814d 	blt.w	800beac <tcp_receive+0x440>
 800bc12:	4b47      	ldr	r3, [pc, #284]	; (800bd30 <tcp_receive+0x2c4>)
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f300 8145 	bgt.w	800beac <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	8b5b      	ldrh	r3, [r3, #26]
 800bc26:	f003 0304 	and.w	r3, r3, #4
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d010      	beq.n	800bc50 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	8b5b      	ldrh	r3, [r3, #26]
 800bc32:	f023 0304 	bic.w	r3, r3, #4
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bc5e:	10db      	asrs	r3, r3, #3
 800bc60:	b21b      	sxth	r3, r3
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	4413      	add	r3, r2
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	b21a      	sxth	r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bc78:	4b2d      	ldr	r3, [pc, #180]	; (800bd30 <tcp_receive+0x2c4>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bc90:	4b27      	ldr	r3, [pc, #156]	; (800bd30 <tcp_receive+0x2c4>)
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	7d1b      	ldrb	r3, [r3, #20]
 800bc9c:	2b03      	cmp	r3, #3
 800bc9e:	f240 8096 	bls.w	800bdce <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d244      	bcs.n	800bd3c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	8b5b      	ldrh	r3, [r3, #26]
 800bcb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d001      	beq.n	800bcc2 <tcp_receive+0x256>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e000      	b.n	800bcc4 <tcp_receive+0x258>
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bcc8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcd2:	fb12 f303 	smulbb	r3, r2, r3
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	bf28      	it	cs
 800bcde:	4613      	movcs	r3, r2
 800bce0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bce8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bcea:	4413      	add	r3, r2
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d309      	bcc.n	800bd0c <tcp_receive+0x2a0>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bcfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd00:	4413      	add	r3, r2
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bd0a:	e060      	b.n	800bdce <tcp_receive+0x362>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bd16:	e05a      	b.n	800bdce <tcp_receive+0x362>
 800bd18:	080133e4 	.word	0x080133e4
 800bd1c:	08013714 	.word	0x08013714
 800bd20:	08013430 	.word	0x08013430
 800bd24:	08013730 	.word	0x08013730
 800bd28:	20004154 	.word	0x20004154
 800bd2c:	20004148 	.word	0x20004148
 800bd30:	2000414c 	.word	0x2000414c
 800bd34:	20004138 	.word	0x20004138
 800bd38:	20004152 	.word	0x20004152
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd44:	4413      	add	r3, r2
 800bd46:	b29a      	uxth	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d309      	bcc.n	800bd66 <tcp_receive+0x2fa>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd5a:	4413      	add	r3, r2
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd64:	e004      	b.n	800bd70 <tcp_receive+0x304>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d326      	bcc.n	800bdce <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bda0:	4413      	add	r3, r2
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d30a      	bcc.n	800bdc4 <tcp_receive+0x358>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdb8:	4413      	add	r3, r2
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bdc2:	e004      	b.n	800bdce <tcp_receive+0x362>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdd6:	4a98      	ldr	r2, [pc, #608]	; (800c038 <tcp_receive+0x5cc>)
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f7ff fdcb 	bl	800b974 <tcp_free_acked_segments>
 800bdde:	4602      	mov	r2, r0
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdec:	4a93      	ldr	r2, [pc, #588]	; (800c03c <tcp_receive+0x5d0>)
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7ff fdc0 	bl	800b974 <tcp_free_acked_segments>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d104      	bne.n	800be0c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be08:	861a      	strh	r2, [r3, #48]	; 0x30
 800be0a:	e002      	b.n	800be12 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d103      	bne.n	800be28 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800be2e:	4b84      	ldr	r3, [pc, #528]	; (800c040 <tcp_receive+0x5d4>)
 800be30:	881b      	ldrh	r3, [r3, #0]
 800be32:	4413      	add	r3, r2
 800be34:	b29a      	uxth	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	8b5b      	ldrh	r3, [r3, #26]
 800be40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be44:	2b00      	cmp	r3, #0
 800be46:	d035      	beq.n	800beb4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d118      	bne.n	800be82 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00c      	beq.n	800be72 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	4618      	mov	r0, r3
 800be66:	f7fb f980 	bl	800716a <lwip_htonl>
 800be6a:	4603      	mov	r3, r0
 800be6c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800be6e:	2b00      	cmp	r3, #0
 800be70:	dc20      	bgt.n	800beb4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	8b5b      	ldrh	r3, [r3, #26]
 800be76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800be80:	e018      	b.n	800beb4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fb f96b 	bl	800716a <lwip_htonl>
 800be94:	4603      	mov	r3, r0
 800be96:	1ae3      	subs	r3, r4, r3
 800be98:	2b00      	cmp	r3, #0
 800be9a:	dc0b      	bgt.n	800beb4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	8b5b      	ldrh	r3, [r3, #26]
 800bea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800beaa:	e003      	b.n	800beb4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f001 ff75 	bl	800dd9c <tcp_send_empty_ack>
 800beb2:	e000      	b.n	800beb6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800beb4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d05b      	beq.n	800bf76 <tcp_receive+0x50a>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bec2:	4b60      	ldr	r3, [pc, #384]	; (800c044 <tcp_receive+0x5d8>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	1ad3      	subs	r3, r2, r3
 800bec8:	2b00      	cmp	r3, #0
 800beca:	da54      	bge.n	800bf76 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800becc:	4b5e      	ldr	r3, [pc, #376]	; (800c048 <tcp_receive+0x5dc>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	b29a      	uxth	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	1ad3      	subs	r3, r2, r3
 800beda:	b29b      	uxth	r3, r3
 800bedc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bee0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800beea:	10db      	asrs	r3, r3, #3
 800beec:	b21b      	sxth	r3, r3
 800beee:	b29b      	uxth	r3, r3
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800befe:	b29a      	uxth	r2, r3
 800bf00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf04:	4413      	add	r3, r2
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	b21a      	sxth	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bf0e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	da05      	bge.n	800bf22 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800bf16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf1a:	425b      	negs	r3, r3
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bf22:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf2c:	109b      	asrs	r3, r3, #2
 800bf2e:	b21b      	sxth	r3, r3
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf46:	4413      	add	r3, r2
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	b21a      	sxth	r2, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf56:	10db      	asrs	r3, r3, #3
 800bf58:	b21b      	sxth	r3, r3
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	4413      	add	r3, r2
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	b21a      	sxth	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bf76:	4b35      	ldr	r3, [pc, #212]	; (800c04c <tcp_receive+0x5e0>)
 800bf78:	881b      	ldrh	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f000 84e1 	beq.w	800c942 <tcp_receive+0xed6>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	7d1b      	ldrb	r3, [r3, #20]
 800bf84:	2b06      	cmp	r3, #6
 800bf86:	f200 84dc 	bhi.w	800c942 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf8e:	4b30      	ldr	r3, [pc, #192]	; (800c050 <tcp_receive+0x5e4>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	3b01      	subs	r3, #1
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	f2c0 808e 	blt.w	800c0b8 <tcp_receive+0x64c>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfa0:	4b2a      	ldr	r3, [pc, #168]	; (800c04c <tcp_receive+0x5e0>)
 800bfa2:	881b      	ldrh	r3, [r3, #0]
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	4b2a      	ldr	r3, [pc, #168]	; (800c050 <tcp_receive+0x5e4>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	440b      	add	r3, r1
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	3301      	adds	r3, #1
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f300 8081 	bgt.w	800c0b8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bfb6:	4b27      	ldr	r3, [pc, #156]	; (800c054 <tcp_receive+0x5e8>)
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfc0:	4b23      	ldr	r3, [pc, #140]	; (800c050 <tcp_receive+0x5e4>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bfc8:	4b22      	ldr	r3, [pc, #136]	; (800c054 <tcp_receive+0x5e8>)
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d106      	bne.n	800bfde <tcp_receive+0x572>
 800bfd0:	4b21      	ldr	r3, [pc, #132]	; (800c058 <tcp_receive+0x5ec>)
 800bfd2:	f240 5294 	movw	r2, #1428	; 0x594
 800bfd6:	4921      	ldr	r1, [pc, #132]	; (800c05c <tcp_receive+0x5f0>)
 800bfd8:	4821      	ldr	r0, [pc, #132]	; (800c060 <tcp_receive+0x5f4>)
 800bfda:	f005 f949 	bl	8011270 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d906      	bls.n	800bff6 <tcp_receive+0x58a>
 800bfe8:	4b1b      	ldr	r3, [pc, #108]	; (800c058 <tcp_receive+0x5ec>)
 800bfea:	f240 5295 	movw	r2, #1429	; 0x595
 800bfee:	491d      	ldr	r1, [pc, #116]	; (800c064 <tcp_receive+0x5f8>)
 800bff0:	481b      	ldr	r0, [pc, #108]	; (800c060 <tcp_receive+0x5f4>)
 800bff2:	f005 f93d 	bl	8011270 <iprintf>
      off = (u16_t)off32;
 800bff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bffc:	4b15      	ldr	r3, [pc, #84]	; (800c054 <tcp_receive+0x5e8>)
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	891b      	ldrh	r3, [r3, #8]
 800c002:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c006:	429a      	cmp	r2, r3
 800c008:	d906      	bls.n	800c018 <tcp_receive+0x5ac>
 800c00a:	4b13      	ldr	r3, [pc, #76]	; (800c058 <tcp_receive+0x5ec>)
 800c00c:	f240 5297 	movw	r2, #1431	; 0x597
 800c010:	4915      	ldr	r1, [pc, #84]	; (800c068 <tcp_receive+0x5fc>)
 800c012:	4813      	ldr	r0, [pc, #76]	; (800c060 <tcp_receive+0x5f4>)
 800c014:	f005 f92c 	bl	8011270 <iprintf>
      inseg.len -= off;
 800c018:	4b0e      	ldr	r3, [pc, #56]	; (800c054 <tcp_receive+0x5e8>)
 800c01a:	891a      	ldrh	r2, [r3, #8]
 800c01c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	b29a      	uxth	r2, r3
 800c024:	4b0b      	ldr	r3, [pc, #44]	; (800c054 <tcp_receive+0x5e8>)
 800c026:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c028:	4b0a      	ldr	r3, [pc, #40]	; (800c054 <tcp_receive+0x5e8>)
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	891a      	ldrh	r2, [r3, #8]
 800c02e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c032:	1ad3      	subs	r3, r2, r3
 800c034:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c036:	e029      	b.n	800c08c <tcp_receive+0x620>
 800c038:	0801374c 	.word	0x0801374c
 800c03c:	08013754 	.word	0x08013754
 800c040:	20004150 	.word	0x20004150
 800c044:	2000414c 	.word	0x2000414c
 800c048:	2000ab14 	.word	0x2000ab14
 800c04c:	20004152 	.word	0x20004152
 800c050:	20004148 	.word	0x20004148
 800c054:	20004128 	.word	0x20004128
 800c058:	080133e4 	.word	0x080133e4
 800c05c:	0801375c 	.word	0x0801375c
 800c060:	08013430 	.word	0x08013430
 800c064:	0801376c 	.word	0x0801376c
 800c068:	0801377c 	.word	0x0801377c
        off -= p->len;
 800c06c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c06e:	895b      	ldrh	r3, [r3, #10]
 800c070:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c074:	1ad3      	subs	r3, r2, r3
 800c076:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c07a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c07c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c07e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c082:	2200      	movs	r2, #0
 800c084:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c08c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c08e:	895b      	ldrh	r3, [r3, #10]
 800c090:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c094:	429a      	cmp	r2, r3
 800c096:	d8e9      	bhi.n	800c06c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c098:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c09c:	4619      	mov	r1, r3
 800c09e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c0a0:	f7fc fb74 	bl	800878c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a8:	4a91      	ldr	r2, [pc, #580]	; (800c2f0 <tcp_receive+0x884>)
 800c0aa:	6013      	str	r3, [r2, #0]
 800c0ac:	4b91      	ldr	r3, [pc, #580]	; (800c2f4 <tcp_receive+0x888>)
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	4a8f      	ldr	r2, [pc, #572]	; (800c2f0 <tcp_receive+0x884>)
 800c0b2:	6812      	ldr	r2, [r2, #0]
 800c0b4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c0b6:	e00d      	b.n	800c0d4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c0b8:	4b8d      	ldr	r3, [pc, #564]	; (800c2f0 <tcp_receive+0x884>)
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	da06      	bge.n	800c0d4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	8b5b      	ldrh	r3, [r3, #26]
 800c0ca:	f043 0302 	orr.w	r3, r3, #2
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c0d4:	4b86      	ldr	r3, [pc, #536]	; (800c2f0 <tcp_receive+0x884>)
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0dc:	1ad3      	subs	r3, r2, r3
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f2c0 842a 	blt.w	800c938 <tcp_receive+0xecc>
 800c0e4:	4b82      	ldr	r3, [pc, #520]	; (800c2f0 <tcp_receive+0x884>)
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ec:	6879      	ldr	r1, [r7, #4]
 800c0ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c0f0:	440b      	add	r3, r1
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f300 841e 	bgt.w	800c938 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c100:	4b7b      	ldr	r3, [pc, #492]	; (800c2f0 <tcp_receive+0x884>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	429a      	cmp	r2, r3
 800c106:	f040 829a 	bne.w	800c63e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c10a:	4b7a      	ldr	r3, [pc, #488]	; (800c2f4 <tcp_receive+0x888>)
 800c10c:	891c      	ldrh	r4, [r3, #8]
 800c10e:	4b79      	ldr	r3, [pc, #484]	; (800c2f4 <tcp_receive+0x888>)
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	899b      	ldrh	r3, [r3, #12]
 800c114:	b29b      	uxth	r3, r3
 800c116:	4618      	mov	r0, r3
 800c118:	f7fb f812 	bl	8007140 <lwip_htons>
 800c11c:	4603      	mov	r3, r0
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	f003 0303 	and.w	r3, r3, #3
 800c124:	2b00      	cmp	r3, #0
 800c126:	d001      	beq.n	800c12c <tcp_receive+0x6c0>
 800c128:	2301      	movs	r3, #1
 800c12a:	e000      	b.n	800c12e <tcp_receive+0x6c2>
 800c12c:	2300      	movs	r3, #0
 800c12e:	4423      	add	r3, r4
 800c130:	b29a      	uxth	r2, r3
 800c132:	4b71      	ldr	r3, [pc, #452]	; (800c2f8 <tcp_receive+0x88c>)
 800c134:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c13a:	4b6f      	ldr	r3, [pc, #444]	; (800c2f8 <tcp_receive+0x88c>)
 800c13c:	881b      	ldrh	r3, [r3, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d275      	bcs.n	800c22e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c142:	4b6c      	ldr	r3, [pc, #432]	; (800c2f4 <tcp_receive+0x888>)
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	899b      	ldrh	r3, [r3, #12]
 800c148:	b29b      	uxth	r3, r3
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fa fff8 	bl	8007140 <lwip_htons>
 800c150:	4603      	mov	r3, r0
 800c152:	b2db      	uxtb	r3, r3
 800c154:	f003 0301 	and.w	r3, r3, #1
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d01f      	beq.n	800c19c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c15c:	4b65      	ldr	r3, [pc, #404]	; (800c2f4 <tcp_receive+0x888>)
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	899b      	ldrh	r3, [r3, #12]
 800c162:	b29b      	uxth	r3, r3
 800c164:	b21b      	sxth	r3, r3
 800c166:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c16a:	b21c      	sxth	r4, r3
 800c16c:	4b61      	ldr	r3, [pc, #388]	; (800c2f4 <tcp_receive+0x888>)
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	899b      	ldrh	r3, [r3, #12]
 800c172:	b29b      	uxth	r3, r3
 800c174:	4618      	mov	r0, r3
 800c176:	f7fa ffe3 	bl	8007140 <lwip_htons>
 800c17a:	4603      	mov	r3, r0
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	b29b      	uxth	r3, r3
 800c180:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c184:	b29b      	uxth	r3, r3
 800c186:	4618      	mov	r0, r3
 800c188:	f7fa ffda 	bl	8007140 <lwip_htons>
 800c18c:	4603      	mov	r3, r0
 800c18e:	b21b      	sxth	r3, r3
 800c190:	4323      	orrs	r3, r4
 800c192:	b21a      	sxth	r2, r3
 800c194:	4b57      	ldr	r3, [pc, #348]	; (800c2f4 <tcp_receive+0x888>)
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	b292      	uxth	r2, r2
 800c19a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c1a0:	4b54      	ldr	r3, [pc, #336]	; (800c2f4 <tcp_receive+0x888>)
 800c1a2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c1a4:	4b53      	ldr	r3, [pc, #332]	; (800c2f4 <tcp_receive+0x888>)
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	899b      	ldrh	r3, [r3, #12]
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fa ffc7 	bl	8007140 <lwip_htons>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	f003 0302 	and.w	r3, r3, #2
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d005      	beq.n	800c1ca <tcp_receive+0x75e>
            inseg.len -= 1;
 800c1be:	4b4d      	ldr	r3, [pc, #308]	; (800c2f4 <tcp_receive+0x888>)
 800c1c0:	891b      	ldrh	r3, [r3, #8]
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	4b4b      	ldr	r3, [pc, #300]	; (800c2f4 <tcp_receive+0x888>)
 800c1c8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c1ca:	4b4a      	ldr	r3, [pc, #296]	; (800c2f4 <tcp_receive+0x888>)
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	4a49      	ldr	r2, [pc, #292]	; (800c2f4 <tcp_receive+0x888>)
 800c1d0:	8912      	ldrh	r2, [r2, #8]
 800c1d2:	4611      	mov	r1, r2
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fc f9d9 	bl	800858c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c1da:	4b46      	ldr	r3, [pc, #280]	; (800c2f4 <tcp_receive+0x888>)
 800c1dc:	891c      	ldrh	r4, [r3, #8]
 800c1de:	4b45      	ldr	r3, [pc, #276]	; (800c2f4 <tcp_receive+0x888>)
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	899b      	ldrh	r3, [r3, #12]
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fa ffaa 	bl	8007140 <lwip_htons>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	f003 0303 	and.w	r3, r3, #3
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d001      	beq.n	800c1fc <tcp_receive+0x790>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e000      	b.n	800c1fe <tcp_receive+0x792>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	4423      	add	r3, r4
 800c200:	b29a      	uxth	r2, r3
 800c202:	4b3d      	ldr	r3, [pc, #244]	; (800c2f8 <tcp_receive+0x88c>)
 800c204:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c206:	4b3c      	ldr	r3, [pc, #240]	; (800c2f8 <tcp_receive+0x88c>)
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	461a      	mov	r2, r3
 800c20c:	4b38      	ldr	r3, [pc, #224]	; (800c2f0 <tcp_receive+0x884>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	441a      	add	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c216:	6879      	ldr	r1, [r7, #4]
 800c218:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c21a:	440b      	add	r3, r1
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d006      	beq.n	800c22e <tcp_receive+0x7c2>
 800c220:	4b36      	ldr	r3, [pc, #216]	; (800c2fc <tcp_receive+0x890>)
 800c222:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c226:	4936      	ldr	r1, [pc, #216]	; (800c300 <tcp_receive+0x894>)
 800c228:	4836      	ldr	r0, [pc, #216]	; (800c304 <tcp_receive+0x898>)
 800c22a:	f005 f821 	bl	8011270 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 80e7 	beq.w	800c406 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c238:	4b2e      	ldr	r3, [pc, #184]	; (800c2f4 <tcp_receive+0x888>)
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	899b      	ldrh	r3, [r3, #12]
 800c23e:	b29b      	uxth	r3, r3
 800c240:	4618      	mov	r0, r3
 800c242:	f7fa ff7d 	bl	8007140 <lwip_htons>
 800c246:	4603      	mov	r3, r0
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	f003 0301 	and.w	r3, r3, #1
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d010      	beq.n	800c274 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c252:	e00a      	b.n	800c26a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c258:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c264:	68f8      	ldr	r0, [r7, #12]
 800c266:	f7fd fd96 	bl	8009d96 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1f0      	bne.n	800c254 <tcp_receive+0x7e8>
 800c272:	e0c8      	b.n	800c406 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c278:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c27a:	e052      	b.n	800c322 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	899b      	ldrh	r3, [r3, #12]
 800c282:	b29b      	uxth	r3, r3
 800c284:	4618      	mov	r0, r3
 800c286:	f7fa ff5b 	bl	8007140 <lwip_htons>
 800c28a:	4603      	mov	r3, r0
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	f003 0301 	and.w	r3, r3, #1
 800c292:	2b00      	cmp	r3, #0
 800c294:	d03d      	beq.n	800c312 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c296:	4b17      	ldr	r3, [pc, #92]	; (800c2f4 <tcp_receive+0x888>)
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	899b      	ldrh	r3, [r3, #12]
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fa ff4e 	bl	8007140 <lwip_htons>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d130      	bne.n	800c312 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c2b0:	4b10      	ldr	r3, [pc, #64]	; (800c2f4 <tcp_receive+0x888>)
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	899b      	ldrh	r3, [r3, #12]
 800c2b6:	b29c      	uxth	r4, r3
 800c2b8:	2001      	movs	r0, #1
 800c2ba:	f7fa ff41 	bl	8007140 <lwip_htons>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	4b0c      	ldr	r3, [pc, #48]	; (800c2f4 <tcp_receive+0x888>)
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	4322      	orrs	r2, r4
 800c2c8:	b292      	uxth	r2, r2
 800c2ca:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c2cc:	4b09      	ldr	r3, [pc, #36]	; (800c2f4 <tcp_receive+0x888>)
 800c2ce:	891c      	ldrh	r4, [r3, #8]
 800c2d0:	4b08      	ldr	r3, [pc, #32]	; (800c2f4 <tcp_receive+0x888>)
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	899b      	ldrh	r3, [r3, #12]
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7fa ff31 	bl	8007140 <lwip_htons>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	f003 0303 	and.w	r3, r3, #3
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00e      	beq.n	800c308 <tcp_receive+0x89c>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e00d      	b.n	800c30a <tcp_receive+0x89e>
 800c2ee:	bf00      	nop
 800c2f0:	20004148 	.word	0x20004148
 800c2f4:	20004128 	.word	0x20004128
 800c2f8:	20004152 	.word	0x20004152
 800c2fc:	080133e4 	.word	0x080133e4
 800c300:	0801378c 	.word	0x0801378c
 800c304:	08013430 	.word	0x08013430
 800c308:	2300      	movs	r3, #0
 800c30a:	4423      	add	r3, r4
 800c30c:	b29a      	uxth	r2, r3
 800c30e:	4b98      	ldr	r3, [pc, #608]	; (800c570 <tcp_receive+0xb04>)
 800c310:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c314:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c31c:	6938      	ldr	r0, [r7, #16]
 800c31e:	f7fd fd3a 	bl	8009d96 <tcp_seg_free>
            while (next &&
 800c322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00e      	beq.n	800c346 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c328:	4b91      	ldr	r3, [pc, #580]	; (800c570 <tcp_receive+0xb04>)
 800c32a:	881b      	ldrh	r3, [r3, #0]
 800c32c:	461a      	mov	r2, r3
 800c32e:	4b91      	ldr	r3, [pc, #580]	; (800c574 <tcp_receive+0xb08>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	441a      	add	r2, r3
 800c334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c33c:	8909      	ldrh	r1, [r1, #8]
 800c33e:	440b      	add	r3, r1
 800c340:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c342:	2b00      	cmp	r3, #0
 800c344:	da9a      	bge.n	800c27c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d059      	beq.n	800c400 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c34c:	4b88      	ldr	r3, [pc, #544]	; (800c570 <tcp_receive+0xb04>)
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	461a      	mov	r2, r3
 800c352:	4b88      	ldr	r3, [pc, #544]	; (800c574 <tcp_receive+0xb08>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	441a      	add	r2, r3
 800c358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c360:	2b00      	cmp	r3, #0
 800c362:	dd4d      	ble.n	800c400 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	b29a      	uxth	r2, r3
 800c36c:	4b81      	ldr	r3, [pc, #516]	; (800c574 <tcp_receive+0xb08>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	b29b      	uxth	r3, r3
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	b29a      	uxth	r2, r3
 800c376:	4b80      	ldr	r3, [pc, #512]	; (800c578 <tcp_receive+0xb0c>)
 800c378:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c37a:	4b7f      	ldr	r3, [pc, #508]	; (800c578 <tcp_receive+0xb0c>)
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	899b      	ldrh	r3, [r3, #12]
 800c380:	b29b      	uxth	r3, r3
 800c382:	4618      	mov	r0, r3
 800c384:	f7fa fedc 	bl	8007140 <lwip_htons>
 800c388:	4603      	mov	r3, r0
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	f003 0302 	and.w	r3, r3, #2
 800c390:	2b00      	cmp	r3, #0
 800c392:	d005      	beq.n	800c3a0 <tcp_receive+0x934>
                inseg.len -= 1;
 800c394:	4b78      	ldr	r3, [pc, #480]	; (800c578 <tcp_receive+0xb0c>)
 800c396:	891b      	ldrh	r3, [r3, #8]
 800c398:	3b01      	subs	r3, #1
 800c39a:	b29a      	uxth	r2, r3
 800c39c:	4b76      	ldr	r3, [pc, #472]	; (800c578 <tcp_receive+0xb0c>)
 800c39e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c3a0:	4b75      	ldr	r3, [pc, #468]	; (800c578 <tcp_receive+0xb0c>)
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	4a74      	ldr	r2, [pc, #464]	; (800c578 <tcp_receive+0xb0c>)
 800c3a6:	8912      	ldrh	r2, [r2, #8]
 800c3a8:	4611      	mov	r1, r2
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7fc f8ee 	bl	800858c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c3b0:	4b71      	ldr	r3, [pc, #452]	; (800c578 <tcp_receive+0xb0c>)
 800c3b2:	891c      	ldrh	r4, [r3, #8]
 800c3b4:	4b70      	ldr	r3, [pc, #448]	; (800c578 <tcp_receive+0xb0c>)
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	899b      	ldrh	r3, [r3, #12]
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fa febf 	bl	8007140 <lwip_htons>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	f003 0303 	and.w	r3, r3, #3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <tcp_receive+0x966>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e000      	b.n	800c3d4 <tcp_receive+0x968>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	4423      	add	r3, r4
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	4b65      	ldr	r3, [pc, #404]	; (800c570 <tcp_receive+0xb04>)
 800c3da:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c3dc:	4b64      	ldr	r3, [pc, #400]	; (800c570 <tcp_receive+0xb04>)
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	4b64      	ldr	r3, [pc, #400]	; (800c574 <tcp_receive+0xb08>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	441a      	add	r2, r3
 800c3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d006      	beq.n	800c400 <tcp_receive+0x994>
 800c3f2:	4b62      	ldr	r3, [pc, #392]	; (800c57c <tcp_receive+0xb10>)
 800c3f4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c3f8:	4961      	ldr	r1, [pc, #388]	; (800c580 <tcp_receive+0xb14>)
 800c3fa:	4862      	ldr	r0, [pc, #392]	; (800c584 <tcp_receive+0xb18>)
 800c3fc:	f004 ff38 	bl	8011270 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c404:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c406:	4b5a      	ldr	r3, [pc, #360]	; (800c570 <tcp_receive+0xb04>)
 800c408:	881b      	ldrh	r3, [r3, #0]
 800c40a:	461a      	mov	r2, r3
 800c40c:	4b59      	ldr	r3, [pc, #356]	; (800c574 <tcp_receive+0xb08>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	441a      	add	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c41a:	4b55      	ldr	r3, [pc, #340]	; (800c570 <tcp_receive+0xb04>)
 800c41c:	881b      	ldrh	r3, [r3, #0]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d206      	bcs.n	800c430 <tcp_receive+0x9c4>
 800c422:	4b56      	ldr	r3, [pc, #344]	; (800c57c <tcp_receive+0xb10>)
 800c424:	f240 6207 	movw	r2, #1543	; 0x607
 800c428:	4957      	ldr	r1, [pc, #348]	; (800c588 <tcp_receive+0xb1c>)
 800c42a:	4856      	ldr	r0, [pc, #344]	; (800c584 <tcp_receive+0xb18>)
 800c42c:	f004 ff20 	bl	8011270 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c434:	4b4e      	ldr	r3, [pc, #312]	; (800c570 <tcp_receive+0xb04>)
 800c436:	881b      	ldrh	r3, [r3, #0]
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	b29a      	uxth	r2, r3
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f7fc ffc9 	bl	80093d8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c446:	4b4c      	ldr	r3, [pc, #304]	; (800c578 <tcp_receive+0xb0c>)
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	891b      	ldrh	r3, [r3, #8]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d006      	beq.n	800c45e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c450:	4b49      	ldr	r3, [pc, #292]	; (800c578 <tcp_receive+0xb0c>)
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	4a4d      	ldr	r2, [pc, #308]	; (800c58c <tcp_receive+0xb20>)
 800c456:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c458:	4b47      	ldr	r3, [pc, #284]	; (800c578 <tcp_receive+0xb0c>)
 800c45a:	2200      	movs	r2, #0
 800c45c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c45e:	4b46      	ldr	r3, [pc, #280]	; (800c578 <tcp_receive+0xb0c>)
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	899b      	ldrh	r3, [r3, #12]
 800c464:	b29b      	uxth	r3, r3
 800c466:	4618      	mov	r0, r3
 800c468:	f7fa fe6a 	bl	8007140 <lwip_htons>
 800c46c:	4603      	mov	r3, r0
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	f003 0301 	and.w	r3, r3, #1
 800c474:	2b00      	cmp	r3, #0
 800c476:	f000 80b8 	beq.w	800c5ea <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c47a:	4b45      	ldr	r3, [pc, #276]	; (800c590 <tcp_receive+0xb24>)
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	f043 0320 	orr.w	r3, r3, #32
 800c482:	b2da      	uxtb	r2, r3
 800c484:	4b42      	ldr	r3, [pc, #264]	; (800c590 <tcp_receive+0xb24>)
 800c486:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c488:	e0af      	b.n	800c5ea <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c48e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	4a36      	ldr	r2, [pc, #216]	; (800c574 <tcp_receive+0xb08>)
 800c49a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	891b      	ldrh	r3, [r3, #8]
 800c4a0:	461c      	mov	r4, r3
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	899b      	ldrh	r3, [r3, #12]
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fa fe48 	bl	8007140 <lwip_htons>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	f003 0303 	and.w	r3, r3, #3
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d001      	beq.n	800c4c0 <tcp_receive+0xa54>
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e000      	b.n	800c4c2 <tcp_receive+0xa56>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	191a      	adds	r2, r3, r4
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c8:	441a      	add	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4d2:	461c      	mov	r4, r3
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	891b      	ldrh	r3, [r3, #8]
 800c4d8:	461d      	mov	r5, r3
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	899b      	ldrh	r3, [r3, #12]
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7fa fe2c 	bl	8007140 <lwip_htons>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	f003 0303 	and.w	r3, r3, #3
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d001      	beq.n	800c4f8 <tcp_receive+0xa8c>
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e000      	b.n	800c4fa <tcp_receive+0xa8e>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	442b      	add	r3, r5
 800c4fc:	429c      	cmp	r4, r3
 800c4fe:	d206      	bcs.n	800c50e <tcp_receive+0xaa2>
 800c500:	4b1e      	ldr	r3, [pc, #120]	; (800c57c <tcp_receive+0xb10>)
 800c502:	f240 622b 	movw	r2, #1579	; 0x62b
 800c506:	4923      	ldr	r1, [pc, #140]	; (800c594 <tcp_receive+0xb28>)
 800c508:	481e      	ldr	r0, [pc, #120]	; (800c584 <tcp_receive+0xb18>)
 800c50a:	f004 feb1 	bl	8011270 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	891b      	ldrh	r3, [r3, #8]
 800c512:	461c      	mov	r4, r3
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	899b      	ldrh	r3, [r3, #12]
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fa fe0f 	bl	8007140 <lwip_htons>
 800c522:	4603      	mov	r3, r0
 800c524:	b2db      	uxtb	r3, r3
 800c526:	f003 0303 	and.w	r3, r3, #3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d001      	beq.n	800c532 <tcp_receive+0xac6>
 800c52e:	2301      	movs	r3, #1
 800c530:	e000      	b.n	800c534 <tcp_receive+0xac8>
 800c532:	2300      	movs	r3, #0
 800c534:	1919      	adds	r1, r3, r4
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c53a:	b28b      	uxth	r3, r1
 800c53c:	1ad3      	subs	r3, r2, r3
 800c53e:	b29a      	uxth	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f7fc ff47 	bl	80093d8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	891b      	ldrh	r3, [r3, #8]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d028      	beq.n	800c5a6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c554:	4b0d      	ldr	r3, [pc, #52]	; (800c58c <tcp_receive+0xb20>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d01d      	beq.n	800c598 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c55c:	4b0b      	ldr	r3, [pc, #44]	; (800c58c <tcp_receive+0xb20>)
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	4619      	mov	r1, r3
 800c566:	4610      	mov	r0, r2
 800c568:	f7fc fa64 	bl	8008a34 <pbuf_cat>
 800c56c:	e018      	b.n	800c5a0 <tcp_receive+0xb34>
 800c56e:	bf00      	nop
 800c570:	20004152 	.word	0x20004152
 800c574:	20004148 	.word	0x20004148
 800c578:	20004128 	.word	0x20004128
 800c57c:	080133e4 	.word	0x080133e4
 800c580:	080137c4 	.word	0x080137c4
 800c584:	08013430 	.word	0x08013430
 800c588:	08013800 	.word	0x08013800
 800c58c:	20004158 	.word	0x20004158
 800c590:	20004155 	.word	0x20004155
 800c594:	08013820 	.word	0x08013820
            } else {
              recv_data = cseg->p;
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	685b      	ldr	r3, [r3, #4]
 800c59c:	4a70      	ldr	r2, [pc, #448]	; (800c760 <tcp_receive+0xcf4>)
 800c59e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	899b      	ldrh	r3, [r3, #12]
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fa fdc6 	bl	8007140 <lwip_htons>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	f003 0301 	and.w	r3, r3, #1
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00d      	beq.n	800c5dc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c5c0:	4b68      	ldr	r3, [pc, #416]	; (800c764 <tcp_receive+0xcf8>)
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	f043 0320 	orr.w	r3, r3, #32
 800c5c8:	b2da      	uxtb	r2, r3
 800c5ca:	4b66      	ldr	r3, [pc, #408]	; (800c764 <tcp_receive+0xcf8>)
 800c5cc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	7d1b      	ldrb	r3, [r3, #20]
 800c5d2:	2b04      	cmp	r3, #4
 800c5d4:	d102      	bne.n	800c5dc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2207      	movs	r2, #7
 800c5da:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c5e4:	68b8      	ldr	r0, [r7, #8]
 800c5e6:	f7fd fbd6 	bl	8009d96 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d008      	beq.n	800c604 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	685a      	ldr	r2, [r3, #4]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c5fe:	429a      	cmp	r2, r3
 800c600:	f43f af43 	beq.w	800c48a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	8b5b      	ldrh	r3, [r3, #26]
 800c608:	f003 0301 	and.w	r3, r3, #1
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00e      	beq.n	800c62e <tcp_receive+0xbc2>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	8b5b      	ldrh	r3, [r3, #26]
 800c614:	f023 0301 	bic.w	r3, r3, #1
 800c618:	b29a      	uxth	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	835a      	strh	r2, [r3, #26]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	8b5b      	ldrh	r3, [r3, #26]
 800c622:	f043 0302 	orr.w	r3, r3, #2
 800c626:	b29a      	uxth	r2, r3
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c62c:	e188      	b.n	800c940 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	8b5b      	ldrh	r3, [r3, #26]
 800c632:	f043 0301 	orr.w	r3, r3, #1
 800c636:	b29a      	uxth	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c63c:	e180      	b.n	800c940 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c642:	2b00      	cmp	r3, #0
 800c644:	d106      	bne.n	800c654 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c646:	4848      	ldr	r0, [pc, #288]	; (800c768 <tcp_receive+0xcfc>)
 800c648:	f7fd fbbe 	bl	8009dc8 <tcp_seg_copy>
 800c64c:	4602      	mov	r2, r0
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	675a      	str	r2, [r3, #116]	; 0x74
 800c652:	e16d      	b.n	800c930 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c654:	2300      	movs	r3, #0
 800c656:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c65c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c65e:	e157      	b.n	800c910 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800c660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	685a      	ldr	r2, [r3, #4]
 800c666:	4b41      	ldr	r3, [pc, #260]	; (800c76c <tcp_receive+0xd00>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d11d      	bne.n	800c6aa <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c66e:	4b3e      	ldr	r3, [pc, #248]	; (800c768 <tcp_receive+0xcfc>)
 800c670:	891a      	ldrh	r2, [r3, #8]
 800c672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c674:	891b      	ldrh	r3, [r3, #8]
 800c676:	429a      	cmp	r2, r3
 800c678:	f240 814f 	bls.w	800c91a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c67c:	483a      	ldr	r0, [pc, #232]	; (800c768 <tcp_receive+0xcfc>)
 800c67e:	f7fd fba3 	bl	8009dc8 <tcp_seg_copy>
 800c682:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	2b00      	cmp	r3, #0
 800c688:	f000 8149 	beq.w	800c91e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800c68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d003      	beq.n	800c69a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c694:	697a      	ldr	r2, [r7, #20]
 800c696:	601a      	str	r2, [r3, #0]
 800c698:	e002      	b.n	800c6a0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	697a      	ldr	r2, [r7, #20]
 800c69e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c6a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6a2:	6978      	ldr	r0, [r7, #20]
 800c6a4:	f7ff f8de 	bl	800b864 <tcp_oos_insert_segment>
                }
                break;
 800c6a8:	e139      	b.n	800c91e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d117      	bne.n	800c6e0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c6b0:	4b2e      	ldr	r3, [pc, #184]	; (800c76c <tcp_receive+0xd00>)
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	da57      	bge.n	800c770 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c6c0:	4829      	ldr	r0, [pc, #164]	; (800c768 <tcp_receive+0xcfc>)
 800c6c2:	f7fd fb81 	bl	8009dc8 <tcp_seg_copy>
 800c6c6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f000 8129 	beq.w	800c922 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	69ba      	ldr	r2, [r7, #24]
 800c6d4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c6d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6d8:	69b8      	ldr	r0, [r7, #24]
 800c6da:	f7ff f8c3 	bl	800b864 <tcp_oos_insert_segment>
                  }
                  break;
 800c6de:	e120      	b.n	800c922 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c6e0:	4b22      	ldr	r3, [pc, #136]	; (800c76c <tcp_receive+0xd00>)
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	3b01      	subs	r3, #1
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	db3e      	blt.n	800c770 <tcp_receive+0xd04>
 800c6f2:	4b1e      	ldr	r3, [pc, #120]	; (800c76c <tcp_receive+0xd00>)
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	1ad3      	subs	r3, r2, r3
 800c6fe:	3301      	adds	r3, #1
 800c700:	2b00      	cmp	r3, #0
 800c702:	dc35      	bgt.n	800c770 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c704:	4818      	ldr	r0, [pc, #96]	; (800c768 <tcp_receive+0xcfc>)
 800c706:	f7fd fb5f 	bl	8009dc8 <tcp_seg_copy>
 800c70a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f000 8109 	beq.w	800c926 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c71c:	8912      	ldrh	r2, [r2, #8]
 800c71e:	441a      	add	r2, r3
 800c720:	4b12      	ldr	r3, [pc, #72]	; (800c76c <tcp_receive+0xd00>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	dd12      	ble.n	800c750 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c72a:	4b10      	ldr	r3, [pc, #64]	; (800c76c <tcp_receive+0xd00>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	b29a      	uxth	r2, r3
 800c730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	b29b      	uxth	r3, r3
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c742:	685a      	ldr	r2, [r3, #4]
 800c744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c746:	891b      	ldrh	r3, [r3, #8]
 800c748:	4619      	mov	r1, r3
 800c74a:	4610      	mov	r0, r2
 800c74c:	f7fb ff1e 	bl	800858c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c752:	69fa      	ldr	r2, [r7, #28]
 800c754:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c756:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c758:	69f8      	ldr	r0, [r7, #28]
 800c75a:	f7ff f883 	bl	800b864 <tcp_oos_insert_segment>
                  }
                  break;
 800c75e:	e0e2      	b.n	800c926 <tcp_receive+0xeba>
 800c760:	20004158 	.word	0x20004158
 800c764:	20004155 	.word	0x20004155
 800c768:	20004128 	.word	0x20004128
 800c76c:	20004148 	.word	0x20004148
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c772:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f040 80c6 	bne.w	800c90a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c77e:	4b80      	ldr	r3, [pc, #512]	; (800c980 <tcp_receive+0xf14>)
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	f340 80bd 	ble.w	800c90a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	899b      	ldrh	r3, [r3, #12]
 800c796:	b29b      	uxth	r3, r3
 800c798:	4618      	mov	r0, r3
 800c79a:	f7fa fcd1 	bl	8007140 <lwip_htons>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	f003 0301 	and.w	r3, r3, #1
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f040 80bf 	bne.w	800c92a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c7ac:	4875      	ldr	r0, [pc, #468]	; (800c984 <tcp_receive+0xf18>)
 800c7ae:	f7fd fb0b 	bl	8009dc8 <tcp_seg_copy>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f000 80b6 	beq.w	800c92e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7ca:	8912      	ldrh	r2, [r2, #8]
 800c7cc:	441a      	add	r2, r3
 800c7ce:	4b6c      	ldr	r3, [pc, #432]	; (800c980 <tcp_receive+0xf14>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	dd12      	ble.n	800c7fe <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c7d8:	4b69      	ldr	r3, [pc, #420]	; (800c980 <tcp_receive+0xf14>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	b29a      	uxth	r2, r3
 800c7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f0:	685a      	ldr	r2, [r3, #4]
 800c7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f4:	891b      	ldrh	r3, [r3, #8]
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	f7fb fec7 	bl	800858c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c7fe:	4b62      	ldr	r3, [pc, #392]	; (800c988 <tcp_receive+0xf1c>)
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	461a      	mov	r2, r3
 800c804:	4b5e      	ldr	r3, [pc, #376]	; (800c980 <tcp_receive+0xf14>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	441a      	add	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80e:	6879      	ldr	r1, [r7, #4]
 800c810:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c812:	440b      	add	r3, r1
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	2b00      	cmp	r3, #0
 800c818:	f340 8089 	ble.w	800c92e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	899b      	ldrh	r3, [r3, #12]
 800c824:	b29b      	uxth	r3, r3
 800c826:	4618      	mov	r0, r3
 800c828:	f7fa fc8a 	bl	8007140 <lwip_htons>
 800c82c:	4603      	mov	r3, r0
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	f003 0301 	and.w	r3, r3, #1
 800c834:	2b00      	cmp	r3, #0
 800c836:	d022      	beq.n	800c87e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	899b      	ldrh	r3, [r3, #12]
 800c840:	b29b      	uxth	r3, r3
 800c842:	b21b      	sxth	r3, r3
 800c844:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c848:	b21c      	sxth	r4, r3
 800c84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	899b      	ldrh	r3, [r3, #12]
 800c852:	b29b      	uxth	r3, r3
 800c854:	4618      	mov	r0, r3
 800c856:	f7fa fc73 	bl	8007140 <lwip_htons>
 800c85a:	4603      	mov	r3, r0
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	b29b      	uxth	r3, r3
 800c860:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c864:	b29b      	uxth	r3, r3
 800c866:	4618      	mov	r0, r3
 800c868:	f7fa fc6a 	bl	8007140 <lwip_htons>
 800c86c:	4603      	mov	r3, r0
 800c86e:	b21b      	sxth	r3, r3
 800c870:	4323      	orrs	r3, r4
 800c872:	b21a      	sxth	r2, r3
 800c874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	b292      	uxth	r2, r2
 800c87c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c882:	b29a      	uxth	r2, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c888:	4413      	add	r3, r2
 800c88a:	b299      	uxth	r1, r3
 800c88c:	4b3c      	ldr	r3, [pc, #240]	; (800c980 <tcp_receive+0xf14>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	b29a      	uxth	r2, r3
 800c892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	1a8a      	subs	r2, r1, r2
 800c898:	b292      	uxth	r2, r2
 800c89a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	685a      	ldr	r2, [r3, #4]
 800c8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	891b      	ldrh	r3, [r3, #8]
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	f7fb fe6e 	bl	800858c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	891c      	ldrh	r4, [r3, #8]
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	899b      	ldrh	r3, [r3, #12]
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fa fc3d 	bl	8007140 <lwip_htons>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	f003 0303 	and.w	r3, r3, #3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d001      	beq.n	800c8d6 <tcp_receive+0xe6a>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e000      	b.n	800c8d8 <tcp_receive+0xe6c>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	4423      	add	r3, r4
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	4b2a      	ldr	r3, [pc, #168]	; (800c988 <tcp_receive+0xf1c>)
 800c8de:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c8e0:	4b29      	ldr	r3, [pc, #164]	; (800c988 <tcp_receive+0xf1c>)
 800c8e2:	881b      	ldrh	r3, [r3, #0]
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	4b26      	ldr	r3, [pc, #152]	; (800c980 <tcp_receive+0xf14>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	441a      	add	r2, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f0:	6879      	ldr	r1, [r7, #4]
 800c8f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c8f4:	440b      	add	r3, r1
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d019      	beq.n	800c92e <tcp_receive+0xec2>
 800c8fa:	4b24      	ldr	r3, [pc, #144]	; (800c98c <tcp_receive+0xf20>)
 800c8fc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c900:	4923      	ldr	r1, [pc, #140]	; (800c990 <tcp_receive+0xf24>)
 800c902:	4824      	ldr	r0, [pc, #144]	; (800c994 <tcp_receive+0xf28>)
 800c904:	f004 fcb4 	bl	8011270 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c908:	e011      	b.n	800c92e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c912:	2b00      	cmp	r3, #0
 800c914:	f47f aea4 	bne.w	800c660 <tcp_receive+0xbf4>
 800c918:	e00a      	b.n	800c930 <tcp_receive+0xec4>
                break;
 800c91a:	bf00      	nop
 800c91c:	e008      	b.n	800c930 <tcp_receive+0xec4>
                break;
 800c91e:	bf00      	nop
 800c920:	e006      	b.n	800c930 <tcp_receive+0xec4>
                  break;
 800c922:	bf00      	nop
 800c924:	e004      	b.n	800c930 <tcp_receive+0xec4>
                  break;
 800c926:	bf00      	nop
 800c928:	e002      	b.n	800c930 <tcp_receive+0xec4>
                  break;
 800c92a:	bf00      	nop
 800c92c:	e000      	b.n	800c930 <tcp_receive+0xec4>
                break;
 800c92e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f001 fa33 	bl	800dd9c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c936:	e003      	b.n	800c940 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f001 fa2f 	bl	800dd9c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c93e:	e01a      	b.n	800c976 <tcp_receive+0xf0a>
 800c940:	e019      	b.n	800c976 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c942:	4b0f      	ldr	r3, [pc, #60]	; (800c980 <tcp_receive+0xf14>)
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94a:	1ad3      	subs	r3, r2, r3
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	db0a      	blt.n	800c966 <tcp_receive+0xefa>
 800c950:	4b0b      	ldr	r3, [pc, #44]	; (800c980 <tcp_receive+0xf14>)
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c958:	6879      	ldr	r1, [r7, #4]
 800c95a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c95c:	440b      	add	r3, r1
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	3301      	adds	r3, #1
 800c962:	2b00      	cmp	r3, #0
 800c964:	dd07      	ble.n	800c976 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	8b5b      	ldrh	r3, [r3, #26]
 800c96a:	f043 0302 	orr.w	r3, r3, #2
 800c96e:	b29a      	uxth	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c974:	e7ff      	b.n	800c976 <tcp_receive+0xf0a>
 800c976:	bf00      	nop
 800c978:	3750      	adds	r7, #80	; 0x50
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bdb0      	pop	{r4, r5, r7, pc}
 800c97e:	bf00      	nop
 800c980:	20004148 	.word	0x20004148
 800c984:	20004128 	.word	0x20004128
 800c988:	20004152 	.word	0x20004152
 800c98c:	080133e4 	.word	0x080133e4
 800c990:	0801378c 	.word	0x0801378c
 800c994:	08013430 	.word	0x08013430

0800c998 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c99e:	4b15      	ldr	r3, [pc, #84]	; (800c9f4 <tcp_get_next_optbyte+0x5c>)
 800c9a0:	881b      	ldrh	r3, [r3, #0]
 800c9a2:	1c5a      	adds	r2, r3, #1
 800c9a4:	b291      	uxth	r1, r2
 800c9a6:	4a13      	ldr	r2, [pc, #76]	; (800c9f4 <tcp_get_next_optbyte+0x5c>)
 800c9a8:	8011      	strh	r1, [r2, #0]
 800c9aa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c9ac:	4b12      	ldr	r3, [pc, #72]	; (800c9f8 <tcp_get_next_optbyte+0x60>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d004      	beq.n	800c9be <tcp_get_next_optbyte+0x26>
 800c9b4:	4b11      	ldr	r3, [pc, #68]	; (800c9fc <tcp_get_next_optbyte+0x64>)
 800c9b6:	881b      	ldrh	r3, [r3, #0]
 800c9b8:	88fa      	ldrh	r2, [r7, #6]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d208      	bcs.n	800c9d0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c9be:	4b10      	ldr	r3, [pc, #64]	; (800ca00 <tcp_get_next_optbyte+0x68>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	3314      	adds	r3, #20
 800c9c4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c9c6:	88fb      	ldrh	r3, [r7, #6]
 800c9c8:	683a      	ldr	r2, [r7, #0]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	e00b      	b.n	800c9e8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c9d0:	88fb      	ldrh	r3, [r7, #6]
 800c9d2:	b2da      	uxtb	r2, r3
 800c9d4:	4b09      	ldr	r3, [pc, #36]	; (800c9fc <tcp_get_next_optbyte+0x64>)
 800c9d6:	881b      	ldrh	r3, [r3, #0]
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c9de:	4b06      	ldr	r3, [pc, #24]	; (800c9f8 <tcp_get_next_optbyte+0x60>)
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	797b      	ldrb	r3, [r7, #5]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr
 800c9f4:	20004144 	.word	0x20004144
 800c9f8:	20004140 	.word	0x20004140
 800c9fc:	2000413e 	.word	0x2000413e
 800ca00:	20004138 	.word	0x20004138

0800ca04 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d106      	bne.n	800ca20 <tcp_parseopt+0x1c>
 800ca12:	4b32      	ldr	r3, [pc, #200]	; (800cadc <tcp_parseopt+0xd8>)
 800ca14:	f240 727d 	movw	r2, #1917	; 0x77d
 800ca18:	4931      	ldr	r1, [pc, #196]	; (800cae0 <tcp_parseopt+0xdc>)
 800ca1a:	4832      	ldr	r0, [pc, #200]	; (800cae4 <tcp_parseopt+0xe0>)
 800ca1c:	f004 fc28 	bl	8011270 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ca20:	4b31      	ldr	r3, [pc, #196]	; (800cae8 <tcp_parseopt+0xe4>)
 800ca22:	881b      	ldrh	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d055      	beq.n	800cad4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ca28:	4b30      	ldr	r3, [pc, #192]	; (800caec <tcp_parseopt+0xe8>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	801a      	strh	r2, [r3, #0]
 800ca2e:	e045      	b.n	800cabc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ca30:	f7ff ffb2 	bl	800c998 <tcp_get_next_optbyte>
 800ca34:	4603      	mov	r3, r0
 800ca36:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ca38:	7bfb      	ldrb	r3, [r7, #15]
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d006      	beq.n	800ca4c <tcp_parseopt+0x48>
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	dc2b      	bgt.n	800ca9a <tcp_parseopt+0x96>
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d041      	beq.n	800caca <tcp_parseopt+0xc6>
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d127      	bne.n	800ca9a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ca4a:	e037      	b.n	800cabc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ca4c:	f7ff ffa4 	bl	800c998 <tcp_get_next_optbyte>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b04      	cmp	r3, #4
 800ca54:	d13b      	bne.n	800cace <tcp_parseopt+0xca>
 800ca56:	4b25      	ldr	r3, [pc, #148]	; (800caec <tcp_parseopt+0xe8>)
 800ca58:	881b      	ldrh	r3, [r3, #0]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	4a22      	ldr	r2, [pc, #136]	; (800cae8 <tcp_parseopt+0xe4>)
 800ca5e:	8812      	ldrh	r2, [r2, #0]
 800ca60:	4293      	cmp	r3, r2
 800ca62:	da34      	bge.n	800cace <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ca64:	f7ff ff98 	bl	800c998 <tcp_get_next_optbyte>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	021b      	lsls	r3, r3, #8
 800ca6e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ca70:	f7ff ff92 	bl	800c998 <tcp_get_next_optbyte>
 800ca74:	4603      	mov	r3, r0
 800ca76:	b29a      	uxth	r2, r3
 800ca78:	89bb      	ldrh	r3, [r7, #12]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ca7e:	89bb      	ldrh	r3, [r7, #12]
 800ca80:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ca84:	d804      	bhi.n	800ca90 <tcp_parseopt+0x8c>
 800ca86:	89bb      	ldrh	r3, [r7, #12]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <tcp_parseopt+0x8c>
 800ca8c:	89ba      	ldrh	r2, [r7, #12]
 800ca8e:	e001      	b.n	800ca94 <tcp_parseopt+0x90>
 800ca90:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ca98:	e010      	b.n	800cabc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ca9a:	f7ff ff7d 	bl	800c998 <tcp_get_next_optbyte>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800caa2:	7afb      	ldrb	r3, [r7, #11]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d914      	bls.n	800cad2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800caa8:	7afb      	ldrb	r3, [r7, #11]
 800caaa:	b29a      	uxth	r2, r3
 800caac:	4b0f      	ldr	r3, [pc, #60]	; (800caec <tcp_parseopt+0xe8>)
 800caae:	881b      	ldrh	r3, [r3, #0]
 800cab0:	4413      	add	r3, r2
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	3b02      	subs	r3, #2
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	4b0c      	ldr	r3, [pc, #48]	; (800caec <tcp_parseopt+0xe8>)
 800caba:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cabc:	4b0b      	ldr	r3, [pc, #44]	; (800caec <tcp_parseopt+0xe8>)
 800cabe:	881a      	ldrh	r2, [r3, #0]
 800cac0:	4b09      	ldr	r3, [pc, #36]	; (800cae8 <tcp_parseopt+0xe4>)
 800cac2:	881b      	ldrh	r3, [r3, #0]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d3b3      	bcc.n	800ca30 <tcp_parseopt+0x2c>
 800cac8:	e004      	b.n	800cad4 <tcp_parseopt+0xd0>
          return;
 800caca:	bf00      	nop
 800cacc:	e002      	b.n	800cad4 <tcp_parseopt+0xd0>
            return;
 800cace:	bf00      	nop
 800cad0:	e000      	b.n	800cad4 <tcp_parseopt+0xd0>
            return;
 800cad2:	bf00      	nop
      }
    }
  }
}
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	080133e4 	.word	0x080133e4
 800cae0:	08013848 	.word	0x08013848
 800cae4:	08013430 	.word	0x08013430
 800cae8:	2000413c 	.word	0x2000413c
 800caec:	20004144 	.word	0x20004144

0800caf0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800caf0:	b480      	push	{r7}
 800caf2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800caf4:	4b05      	ldr	r3, [pc, #20]	; (800cb0c <tcp_trigger_input_pcb_close+0x1c>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	f043 0310 	orr.w	r3, r3, #16
 800cafc:	b2da      	uxtb	r2, r3
 800cafe:	4b03      	ldr	r3, [pc, #12]	; (800cb0c <tcp_trigger_input_pcb_close+0x1c>)
 800cb00:	701a      	strb	r2, [r3, #0]
}
 800cb02:	bf00      	nop
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr
 800cb0c:	20004155 	.word	0x20004155

0800cb10 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00a      	beq.n	800cb38 <tcp_route+0x28>
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	7a1b      	ldrb	r3, [r3, #8]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d006      	beq.n	800cb38 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	7a1b      	ldrb	r3, [r3, #8]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fb fb24 	bl	800817c <netif_get_by_index>
 800cb34:	4603      	mov	r3, r0
 800cb36:	e003      	b.n	800cb40 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f002 fead 	bl	800f898 <ip4_route>
 800cb3e:	4603      	mov	r3, r0
  }
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3710      	adds	r7, #16
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cb48:	b590      	push	{r4, r7, lr}
 800cb4a:	b087      	sub	sp, #28
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	603b      	str	r3, [r7, #0]
 800cb54:	4613      	mov	r3, r2
 800cb56:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d105      	bne.n	800cb6a <tcp_create_segment+0x22>
 800cb5e:	4b44      	ldr	r3, [pc, #272]	; (800cc70 <tcp_create_segment+0x128>)
 800cb60:	22a3      	movs	r2, #163	; 0xa3
 800cb62:	4944      	ldr	r1, [pc, #272]	; (800cc74 <tcp_create_segment+0x12c>)
 800cb64:	4844      	ldr	r0, [pc, #272]	; (800cc78 <tcp_create_segment+0x130>)
 800cb66:	f004 fb83 	bl	8011270 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d105      	bne.n	800cb7c <tcp_create_segment+0x34>
 800cb70:	4b3f      	ldr	r3, [pc, #252]	; (800cc70 <tcp_create_segment+0x128>)
 800cb72:	22a4      	movs	r2, #164	; 0xa4
 800cb74:	4941      	ldr	r1, [pc, #260]	; (800cc7c <tcp_create_segment+0x134>)
 800cb76:	4840      	ldr	r0, [pc, #256]	; (800cc78 <tcp_create_segment+0x130>)
 800cb78:	f004 fb7a 	bl	8011270 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cb7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	f003 0304 	and.w	r3, r3, #4
 800cb88:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cb8a:	2003      	movs	r0, #3
 800cb8c:	f7fa ff8e 	bl	8007aac <memp_malloc>
 800cb90:	6138      	str	r0, [r7, #16]
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d104      	bne.n	800cba2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cb98:	68b8      	ldr	r0, [r7, #8]
 800cb9a:	f7fb fe7d 	bl	8008898 <pbuf_free>
    return NULL;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	e061      	b.n	800cc66 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cba8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	2200      	movs	r2, #0
 800cbae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	68ba      	ldr	r2, [r7, #8]
 800cbb4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	891a      	ldrh	r2, [r3, #8]
 800cbba:	7dfb      	ldrb	r3, [r7, #23]
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d205      	bcs.n	800cbce <tcp_create_segment+0x86>
 800cbc2:	4b2b      	ldr	r3, [pc, #172]	; (800cc70 <tcp_create_segment+0x128>)
 800cbc4:	22b0      	movs	r2, #176	; 0xb0
 800cbc6:	492e      	ldr	r1, [pc, #184]	; (800cc80 <tcp_create_segment+0x138>)
 800cbc8:	482b      	ldr	r0, [pc, #172]	; (800cc78 <tcp_create_segment+0x130>)
 800cbca:	f004 fb51 	bl	8011270 <iprintf>
  seg->len = p->tot_len - optlen;
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	891a      	ldrh	r2, [r3, #8]
 800cbd2:	7dfb      	ldrb	r3, [r7, #23]
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	1ad3      	subs	r3, r2, r3
 800cbd8:	b29a      	uxth	r2, r3
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cbde:	2114      	movs	r1, #20
 800cbe0:	68b8      	ldr	r0, [r7, #8]
 800cbe2:	f7fb fdc3 	bl	800876c <pbuf_add_header>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d004      	beq.n	800cbf6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cbec:	6938      	ldr	r0, [r7, #16]
 800cbee:	f7fd f8d2 	bl	8009d96 <tcp_seg_free>
    return NULL;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	e037      	b.n	800cc66 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	8ada      	ldrh	r2, [r3, #22]
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	68dc      	ldr	r4, [r3, #12]
 800cc08:	4610      	mov	r0, r2
 800cc0a:	f7fa fa99 	bl	8007140 <lwip_htons>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	8b1a      	ldrh	r2, [r3, #24]
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	68dc      	ldr	r4, [r3, #12]
 800cc1a:	4610      	mov	r0, r2
 800cc1c:	f7fa fa90 	bl	8007140 <lwip_htons>
 800cc20:	4603      	mov	r3, r0
 800cc22:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	68dc      	ldr	r4, [r3, #12]
 800cc28:	6838      	ldr	r0, [r7, #0]
 800cc2a:	f7fa fa9e 	bl	800716a <lwip_htonl>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cc32:	7dfb      	ldrb	r3, [r7, #23]
 800cc34:	089b      	lsrs	r3, r3, #2
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	3305      	adds	r3, #5
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	031b      	lsls	r3, r3, #12
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	79fb      	ldrb	r3, [r7, #7]
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	4313      	orrs	r3, r2
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	68dc      	ldr	r4, [r3, #12]
 800cc4e:	4610      	mov	r0, r2
 800cc50:	f7fa fa76 	bl	8007140 <lwip_htons>
 800cc54:	4603      	mov	r3, r0
 800cc56:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	749a      	strb	r2, [r3, #18]
 800cc60:	2200      	movs	r2, #0
 800cc62:	74da      	strb	r2, [r3, #19]
  return seg;
 800cc64:	693b      	ldr	r3, [r7, #16]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	371c      	adds	r7, #28
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd90      	pop	{r4, r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	08013864 	.word	0x08013864
 800cc74:	08013898 	.word	0x08013898
 800cc78:	080138b8 	.word	0x080138b8
 800cc7c:	080138e0 	.word	0x080138e0
 800cc80:	08013904 	.word	0x08013904

0800cc84 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cc84:	b590      	push	{r4, r7, lr}
 800cc86:	b08b      	sub	sp, #44	; 0x2c
 800cc88:	af02      	add	r7, sp, #8
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cc90:	2300      	movs	r3, #0
 800cc92:	61fb      	str	r3, [r7, #28]
 800cc94:	2300      	movs	r3, #0
 800cc96:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d106      	bne.n	800ccb0 <tcp_split_unsent_seg+0x2c>
 800cca2:	4b95      	ldr	r3, [pc, #596]	; (800cef8 <tcp_split_unsent_seg+0x274>)
 800cca4:	f240 324b 	movw	r2, #843	; 0x34b
 800cca8:	4994      	ldr	r1, [pc, #592]	; (800cefc <tcp_split_unsent_seg+0x278>)
 800ccaa:	4895      	ldr	r0, [pc, #596]	; (800cf00 <tcp_split_unsent_seg+0x27c>)
 800ccac:	f004 fae0 	bl	8011270 <iprintf>

  useg = pcb->unsent;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccb4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d102      	bne.n	800ccc2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ccbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc0:	e116      	b.n	800cef0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ccc2:	887b      	ldrh	r3, [r7, #2]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d109      	bne.n	800ccdc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ccc8:	4b8b      	ldr	r3, [pc, #556]	; (800cef8 <tcp_split_unsent_seg+0x274>)
 800ccca:	f240 3253 	movw	r2, #851	; 0x353
 800ccce:	498d      	ldr	r1, [pc, #564]	; (800cf04 <tcp_split_unsent_seg+0x280>)
 800ccd0:	488b      	ldr	r0, [pc, #556]	; (800cf00 <tcp_split_unsent_seg+0x27c>)
 800ccd2:	f004 facd 	bl	8011270 <iprintf>
    return ERR_VAL;
 800ccd6:	f06f 0305 	mvn.w	r3, #5
 800ccda:	e109      	b.n	800cef0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	891b      	ldrh	r3, [r3, #8]
 800cce0:	887a      	ldrh	r2, [r7, #2]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d301      	bcc.n	800ccea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cce6:	2300      	movs	r3, #0
 800cce8:	e102      	b.n	800cef0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ccee:	887a      	ldrh	r2, [r7, #2]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d906      	bls.n	800cd02 <tcp_split_unsent_seg+0x7e>
 800ccf4:	4b80      	ldr	r3, [pc, #512]	; (800cef8 <tcp_split_unsent_seg+0x274>)
 800ccf6:	f240 325b 	movw	r2, #859	; 0x35b
 800ccfa:	4983      	ldr	r1, [pc, #524]	; (800cf08 <tcp_split_unsent_seg+0x284>)
 800ccfc:	4880      	ldr	r0, [pc, #512]	; (800cf00 <tcp_split_unsent_seg+0x27c>)
 800ccfe:	f004 fab7 	bl	8011270 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	891b      	ldrh	r3, [r3, #8]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d106      	bne.n	800cd18 <tcp_split_unsent_seg+0x94>
 800cd0a:	4b7b      	ldr	r3, [pc, #492]	; (800cef8 <tcp_split_unsent_seg+0x274>)
 800cd0c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cd10:	497e      	ldr	r1, [pc, #504]	; (800cf0c <tcp_split_unsent_seg+0x288>)
 800cd12:	487b      	ldr	r0, [pc, #492]	; (800cf00 <tcp_split_unsent_seg+0x27c>)
 800cd14:	f004 faac 	bl	8011270 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	7a9b      	ldrb	r3, [r3, #10]
 800cd1c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cd1e:	7bfb      	ldrb	r3, [r7, #15]
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	f003 0304 	and.w	r3, r3, #4
 800cd28:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	891a      	ldrh	r2, [r3, #8]
 800cd2e:	887b      	ldrh	r3, [r7, #2]
 800cd30:	1ad3      	subs	r3, r2, r3
 800cd32:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cd34:	7bbb      	ldrb	r3, [r7, #14]
 800cd36:	b29a      	uxth	r2, r3
 800cd38:	89bb      	ldrh	r3, [r7, #12]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd42:	4619      	mov	r1, r3
 800cd44:	2036      	movs	r0, #54	; 0x36
 800cd46:	f7fb fac3 	bl	80082d0 <pbuf_alloc>
 800cd4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f000 80b7 	beq.w	800cec2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	891a      	ldrh	r2, [r3, #8]
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	891b      	ldrh	r3, [r3, #8]
 800cd5e:	1ad3      	subs	r3, r2, r3
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	887b      	ldrh	r3, [r7, #2]
 800cd64:	4413      	add	r3, r2
 800cd66:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	6858      	ldr	r0, [r3, #4]
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	685a      	ldr	r2, [r3, #4]
 800cd70:	7bbb      	ldrb	r3, [r7, #14]
 800cd72:	18d1      	adds	r1, r2, r3
 800cd74:	897b      	ldrh	r3, [r7, #10]
 800cd76:	89ba      	ldrh	r2, [r7, #12]
 800cd78:	f7fb ff84 	bl	8008c84 <pbuf_copy_partial>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	461a      	mov	r2, r3
 800cd80:	89bb      	ldrh	r3, [r7, #12]
 800cd82:	4293      	cmp	r3, r2
 800cd84:	f040 809f 	bne.w	800cec6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	899b      	ldrh	r3, [r3, #12]
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fa f9d5 	bl	8007140 <lwip_htons>
 800cd96:	4603      	mov	r3, r0
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd9e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cda0:	2300      	movs	r3, #0
 800cda2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cda4:	7efb      	ldrb	r3, [r7, #27]
 800cda6:	f003 0308 	and.w	r3, r3, #8
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d007      	beq.n	800cdbe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cdae:	7efb      	ldrb	r3, [r7, #27]
 800cdb0:	f023 0308 	bic.w	r3, r3, #8
 800cdb4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cdb6:	7ebb      	ldrb	r3, [r7, #26]
 800cdb8:	f043 0308 	orr.w	r3, r3, #8
 800cdbc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cdbe:	7efb      	ldrb	r3, [r7, #27]
 800cdc0:	f003 0301 	and.w	r3, r3, #1
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d007      	beq.n	800cdd8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cdc8:	7efb      	ldrb	r3, [r7, #27]
 800cdca:	f023 0301 	bic.w	r3, r3, #1
 800cdce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cdd0:	7ebb      	ldrb	r3, [r7, #26]
 800cdd2:	f043 0301 	orr.w	r3, r3, #1
 800cdd6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fa f9c3 	bl	800716a <lwip_htonl>
 800cde4:	4602      	mov	r2, r0
 800cde6:	887b      	ldrh	r3, [r7, #2]
 800cde8:	18d1      	adds	r1, r2, r3
 800cdea:	7eba      	ldrb	r2, [r7, #26]
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	6939      	ldr	r1, [r7, #16]
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f7ff fea7 	bl	800cb48 <tcp_create_segment>
 800cdfa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d063      	beq.n	800ceca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fb fdd4 	bl	80089b4 <pbuf_clen>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	461a      	mov	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce16:	1a9b      	subs	r3, r3, r2
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	6858      	ldr	r0, [r3, #4]
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	891a      	ldrh	r2, [r3, #8]
 800ce2a:	89bb      	ldrh	r3, [r7, #12]
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	4619      	mov	r1, r3
 800ce32:	f7fb fbab 	bl	800858c <pbuf_realloc>
  useg->len -= remainder;
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	891a      	ldrh	r2, [r3, #8]
 800ce3a:	89bb      	ldrh	r3, [r7, #12]
 800ce3c:	1ad3      	subs	r3, r2, r3
 800ce3e:	b29a      	uxth	r2, r3
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	899b      	ldrh	r3, [r3, #12]
 800ce4a:	b29c      	uxth	r4, r3
 800ce4c:	7efb      	ldrb	r3, [r7, #27]
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fa f975 	bl	8007140 <lwip_htons>
 800ce56:	4603      	mov	r3, r0
 800ce58:	461a      	mov	r2, r3
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	68db      	ldr	r3, [r3, #12]
 800ce5e:	4322      	orrs	r2, r4
 800ce60:	b292      	uxth	r2, r2
 800ce62:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7fb fda3 	bl	80089b4 <pbuf_clen>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	461a      	mov	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce78:	4413      	add	r3, r2
 800ce7a:	b29a      	uxth	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fb fd94 	bl	80089b4 <pbuf_clen>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	461a      	mov	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce96:	4413      	add	r3, r2
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	69fa      	ldr	r2, [r7, #28]
 800ceac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d103      	bne.n	800cebe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cebe:	2300      	movs	r3, #0
 800cec0:	e016      	b.n	800cef0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cec2:	bf00      	nop
 800cec4:	e002      	b.n	800cecc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cec6:	bf00      	nop
 800cec8:	e000      	b.n	800cecc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ceca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d006      	beq.n	800cee0 <tcp_split_unsent_seg+0x25c>
 800ced2:	4b09      	ldr	r3, [pc, #36]	; (800cef8 <tcp_split_unsent_seg+0x274>)
 800ced4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ced8:	490d      	ldr	r1, [pc, #52]	; (800cf10 <tcp_split_unsent_seg+0x28c>)
 800ceda:	4809      	ldr	r0, [pc, #36]	; (800cf00 <tcp_split_unsent_seg+0x27c>)
 800cedc:	f004 f9c8 	bl	8011270 <iprintf>
  if (p != NULL) {
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d002      	beq.n	800ceec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cee6:	6938      	ldr	r0, [r7, #16]
 800cee8:	f7fb fcd6 	bl	8008898 <pbuf_free>
  }

  return ERR_MEM;
 800ceec:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3724      	adds	r7, #36	; 0x24
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd90      	pop	{r4, r7, pc}
 800cef8:	08013864 	.word	0x08013864
 800cefc:	08013bf8 	.word	0x08013bf8
 800cf00:	080138b8 	.word	0x080138b8
 800cf04:	08013c1c 	.word	0x08013c1c
 800cf08:	08013c40 	.word	0x08013c40
 800cf0c:	08013c50 	.word	0x08013c50
 800cf10:	08013c60 	.word	0x08013c60

0800cf14 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cf14:	b590      	push	{r4, r7, lr}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <tcp_send_fin+0x1c>
 800cf22:	4b21      	ldr	r3, [pc, #132]	; (800cfa8 <tcp_send_fin+0x94>)
 800cf24:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cf28:	4920      	ldr	r1, [pc, #128]	; (800cfac <tcp_send_fin+0x98>)
 800cf2a:	4821      	ldr	r0, [pc, #132]	; (800cfb0 <tcp_send_fin+0x9c>)
 800cf2c:	f004 f9a0 	bl	8011270 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d02e      	beq.n	800cf96 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf3c:	60fb      	str	r3, [r7, #12]
 800cf3e:	e002      	b.n	800cf46 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d1f8      	bne.n	800cf40 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	899b      	ldrh	r3, [r3, #12]
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fa f8f2 	bl	8007140 <lwip_htons>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	f003 0307 	and.w	r3, r3, #7
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d116      	bne.n	800cf96 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	899b      	ldrh	r3, [r3, #12]
 800cf6e:	b29c      	uxth	r4, r3
 800cf70:	2001      	movs	r0, #1
 800cf72:	f7fa f8e5 	bl	8007140 <lwip_htons>
 800cf76:	4603      	mov	r3, r0
 800cf78:	461a      	mov	r2, r3
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	4322      	orrs	r2, r4
 800cf80:	b292      	uxth	r2, r2
 800cf82:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	8b5b      	ldrh	r3, [r3, #26]
 800cf88:	f043 0320 	orr.w	r3, r3, #32
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cf92:	2300      	movs	r3, #0
 800cf94:	e004      	b.n	800cfa0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cf96:	2101      	movs	r1, #1
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 f80b 	bl	800cfb4 <tcp_enqueue_flags>
 800cf9e:	4603      	mov	r3, r0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3714      	adds	r7, #20
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd90      	pop	{r4, r7, pc}
 800cfa8:	08013864 	.word	0x08013864
 800cfac:	08013c6c 	.word	0x08013c6c
 800cfb0:	080138b8 	.word	0x080138b8

0800cfb4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b08a      	sub	sp, #40	; 0x28
 800cfb8:	af02      	add	r7, sp, #8
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cfc8:	78fb      	ldrb	r3, [r7, #3]
 800cfca:	f003 0303 	and.w	r3, r3, #3
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d106      	bne.n	800cfe0 <tcp_enqueue_flags+0x2c>
 800cfd2:	4b67      	ldr	r3, [pc, #412]	; (800d170 <tcp_enqueue_flags+0x1bc>)
 800cfd4:	f240 4211 	movw	r2, #1041	; 0x411
 800cfd8:	4966      	ldr	r1, [pc, #408]	; (800d174 <tcp_enqueue_flags+0x1c0>)
 800cfda:	4867      	ldr	r0, [pc, #412]	; (800d178 <tcp_enqueue_flags+0x1c4>)
 800cfdc:	f004 f948 	bl	8011270 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d106      	bne.n	800cff4 <tcp_enqueue_flags+0x40>
 800cfe6:	4b62      	ldr	r3, [pc, #392]	; (800d170 <tcp_enqueue_flags+0x1bc>)
 800cfe8:	f240 4213 	movw	r2, #1043	; 0x413
 800cfec:	4963      	ldr	r1, [pc, #396]	; (800d17c <tcp_enqueue_flags+0x1c8>)
 800cfee:	4862      	ldr	r0, [pc, #392]	; (800d178 <tcp_enqueue_flags+0x1c4>)
 800cff0:	f004 f93e 	bl	8011270 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cff4:	78fb      	ldrb	r3, [r7, #3]
 800cff6:	f003 0302 	and.w	r3, r3, #2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d001      	beq.n	800d002 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cffe:	2301      	movs	r3, #1
 800d000:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d002:	7ffb      	ldrb	r3, [r7, #31]
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	b2db      	uxtb	r3, r3
 800d008:	f003 0304 	and.w	r3, r3, #4
 800d00c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d00e:	7dfb      	ldrb	r3, [r7, #23]
 800d010:	b29b      	uxth	r3, r3
 800d012:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d016:	4619      	mov	r1, r3
 800d018:	2036      	movs	r0, #54	; 0x36
 800d01a:	f7fb f959 	bl	80082d0 <pbuf_alloc>
 800d01e:	6138      	str	r0, [r7, #16]
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d109      	bne.n	800d03a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	8b5b      	ldrh	r3, [r3, #26]
 800d02a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d02e:	b29a      	uxth	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d034:	f04f 33ff 	mov.w	r3, #4294967295
 800d038:	e095      	b.n	800d166 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	895a      	ldrh	r2, [r3, #10]
 800d03e:	7dfb      	ldrb	r3, [r7, #23]
 800d040:	b29b      	uxth	r3, r3
 800d042:	429a      	cmp	r2, r3
 800d044:	d206      	bcs.n	800d054 <tcp_enqueue_flags+0xa0>
 800d046:	4b4a      	ldr	r3, [pc, #296]	; (800d170 <tcp_enqueue_flags+0x1bc>)
 800d048:	f240 4239 	movw	r2, #1081	; 0x439
 800d04c:	494c      	ldr	r1, [pc, #304]	; (800d180 <tcp_enqueue_flags+0x1cc>)
 800d04e:	484a      	ldr	r0, [pc, #296]	; (800d178 <tcp_enqueue_flags+0x1c4>)
 800d050:	f004 f90e 	bl	8011270 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d058:	78fa      	ldrb	r2, [r7, #3]
 800d05a:	7ffb      	ldrb	r3, [r7, #31]
 800d05c:	9300      	str	r3, [sp, #0]
 800d05e:	460b      	mov	r3, r1
 800d060:	6939      	ldr	r1, [r7, #16]
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f7ff fd70 	bl	800cb48 <tcp_create_segment>
 800d068:	60f8      	str	r0, [r7, #12]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d109      	bne.n	800d084 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	8b5b      	ldrh	r3, [r3, #26]
 800d074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d078:	b29a      	uxth	r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d07e:	f04f 33ff 	mov.w	r3, #4294967295
 800d082:	e070      	b.n	800d166 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	f003 0303 	and.w	r3, r3, #3
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d006      	beq.n	800d09e <tcp_enqueue_flags+0xea>
 800d090:	4b37      	ldr	r3, [pc, #220]	; (800d170 <tcp_enqueue_flags+0x1bc>)
 800d092:	f240 4242 	movw	r2, #1090	; 0x442
 800d096:	493b      	ldr	r1, [pc, #236]	; (800d184 <tcp_enqueue_flags+0x1d0>)
 800d098:	4837      	ldr	r0, [pc, #220]	; (800d178 <tcp_enqueue_flags+0x1c4>)
 800d09a:	f004 f8e9 	bl	8011270 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	891b      	ldrh	r3, [r3, #8]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d006      	beq.n	800d0b4 <tcp_enqueue_flags+0x100>
 800d0a6:	4b32      	ldr	r3, [pc, #200]	; (800d170 <tcp_enqueue_flags+0x1bc>)
 800d0a8:	f240 4243 	movw	r2, #1091	; 0x443
 800d0ac:	4936      	ldr	r1, [pc, #216]	; (800d188 <tcp_enqueue_flags+0x1d4>)
 800d0ae:	4832      	ldr	r0, [pc, #200]	; (800d178 <tcp_enqueue_flags+0x1c4>)
 800d0b0:	f004 f8de 	bl	8011270 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d103      	bne.n	800d0c4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	68fa      	ldr	r2, [r7, #12]
 800d0c0:	66da      	str	r2, [r3, #108]	; 0x6c
 800d0c2:	e00d      	b.n	800d0e0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0c8:	61bb      	str	r3, [r7, #24]
 800d0ca:	e002      	b.n	800d0d2 <tcp_enqueue_flags+0x11e>
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	61bb      	str	r3, [r7, #24]
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1f8      	bne.n	800d0cc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d0e8:	78fb      	ldrb	r3, [r7, #3]
 800d0ea:	f003 0302 	and.w	r3, r3, #2
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d104      	bne.n	800d0fc <tcp_enqueue_flags+0x148>
 800d0f2:	78fb      	ldrb	r3, [r7, #3]
 800d0f4:	f003 0301 	and.w	r3, r3, #1
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d004      	beq.n	800d106 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d106:	78fb      	ldrb	r3, [r7, #3]
 800d108:	f003 0301 	and.w	r3, r3, #1
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d006      	beq.n	800d11e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	8b5b      	ldrh	r3, [r3, #26]
 800d114:	f043 0320 	orr.w	r3, r3, #32
 800d118:	b29a      	uxth	r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	4618      	mov	r0, r3
 800d124:	f7fb fc46 	bl	80089b4 <pbuf_clen>
 800d128:	4603      	mov	r3, r0
 800d12a:	461a      	mov	r2, r3
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d132:	4413      	add	r3, r2
 800d134:	b29a      	uxth	r2, r3
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00e      	beq.n	800d164 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10a      	bne.n	800d164 <tcp_enqueue_flags+0x1b0>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d152:	2b00      	cmp	r3, #0
 800d154:	d106      	bne.n	800d164 <tcp_enqueue_flags+0x1b0>
 800d156:	4b06      	ldr	r3, [pc, #24]	; (800d170 <tcp_enqueue_flags+0x1bc>)
 800d158:	f240 4265 	movw	r2, #1125	; 0x465
 800d15c:	490b      	ldr	r1, [pc, #44]	; (800d18c <tcp_enqueue_flags+0x1d8>)
 800d15e:	4806      	ldr	r0, [pc, #24]	; (800d178 <tcp_enqueue_flags+0x1c4>)
 800d160:	f004 f886 	bl	8011270 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3720      	adds	r7, #32
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	08013864 	.word	0x08013864
 800d174:	08013c88 	.word	0x08013c88
 800d178:	080138b8 	.word	0x080138b8
 800d17c:	08013ce0 	.word	0x08013ce0
 800d180:	08013d00 	.word	0x08013d00
 800d184:	08013d3c 	.word	0x08013d3c
 800d188:	08013d54 	.word	0x08013d54
 800d18c:	08013d80 	.word	0x08013d80

0800d190 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d190:	b5b0      	push	{r4, r5, r7, lr}
 800d192:	b08a      	sub	sp, #40	; 0x28
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d106      	bne.n	800d1ac <tcp_output+0x1c>
 800d19e:	4b9e      	ldr	r3, [pc, #632]	; (800d418 <tcp_output+0x288>)
 800d1a0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d1a4:	499d      	ldr	r1, [pc, #628]	; (800d41c <tcp_output+0x28c>)
 800d1a6:	489e      	ldr	r0, [pc, #632]	; (800d420 <tcp_output+0x290>)
 800d1a8:	f004 f862 	bl	8011270 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	7d1b      	ldrb	r3, [r3, #20]
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d106      	bne.n	800d1c2 <tcp_output+0x32>
 800d1b4:	4b98      	ldr	r3, [pc, #608]	; (800d418 <tcp_output+0x288>)
 800d1b6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d1ba:	499a      	ldr	r1, [pc, #616]	; (800d424 <tcp_output+0x294>)
 800d1bc:	4898      	ldr	r0, [pc, #608]	; (800d420 <tcp_output+0x290>)
 800d1be:	f004 f857 	bl	8011270 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d1c2:	4b99      	ldr	r3, [pc, #612]	; (800d428 <tcp_output+0x298>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d101      	bne.n	800d1d0 <tcp_output+0x40>
    return ERR_OK;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	e1ce      	b.n	800d56e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	bf28      	it	cs
 800d1e0:	4613      	movcs	r3, r2
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d10b      	bne.n	800d20a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	8b5b      	ldrh	r3, [r3, #26]
 800d1f6:	f003 0302 	and.w	r3, r3, #2
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f000 81aa 	beq.w	800d554 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 fdcb 	bl	800dd9c <tcp_send_empty_ack>
 800d206:	4603      	mov	r3, r0
 800d208:	e1b1      	b.n	800d56e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d20a:	6879      	ldr	r1, [r7, #4]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	3304      	adds	r3, #4
 800d210:	461a      	mov	r2, r3
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f7ff fc7c 	bl	800cb10 <tcp_route>
 800d218:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d102      	bne.n	800d226 <tcp_output+0x96>
    return ERR_RTE;
 800d220:	f06f 0303 	mvn.w	r3, #3
 800d224:	e1a3      	b.n	800d56e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d003      	beq.n	800d234 <tcp_output+0xa4>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d111      	bne.n	800d258 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d002      	beq.n	800d240 <tcp_output+0xb0>
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	3304      	adds	r3, #4
 800d23e:	e000      	b.n	800d242 <tcp_output+0xb2>
 800d240:	2300      	movs	r3, #0
 800d242:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d102      	bne.n	800d250 <tcp_output+0xc0>
      return ERR_RTE;
 800d24a:	f06f 0303 	mvn.w	r3, #3
 800d24e:	e18e      	b.n	800d56e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	4618      	mov	r0, r3
 800d260:	f7f9 ff83 	bl	800716a <lwip_htonl>
 800d264:	4602      	mov	r2, r0
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d26a:	1ad3      	subs	r3, r2, r3
 800d26c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d26e:	8912      	ldrh	r2, [r2, #8]
 800d270:	4413      	add	r3, r2
 800d272:	69ba      	ldr	r2, [r7, #24]
 800d274:	429a      	cmp	r2, r3
 800d276:	d227      	bcs.n	800d2c8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d27e:	461a      	mov	r2, r3
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	4293      	cmp	r3, r2
 800d284:	d114      	bne.n	800d2b0 <tcp_output+0x120>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d110      	bne.n	800d2b0 <tcp_output+0x120>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10b      	bne.n	800d2b0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	8b5b      	ldrh	r3, [r3, #26]
 800d2b4:	f003 0302 	and.w	r3, r3, #2
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	f000 814d 	beq.w	800d558 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 fd6c 	bl	800dd9c <tcp_send_empty_ack>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	e152      	b.n	800d56e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2d4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d2d6:	6a3b      	ldr	r3, [r7, #32]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 811c 	beq.w	800d516 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d2de:	e002      	b.n	800d2e6 <tcp_output+0x156>
 800d2e0:	6a3b      	ldr	r3, [r7, #32]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	623b      	str	r3, [r7, #32]
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1f8      	bne.n	800d2e0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d2ee:	e112      	b.n	800d516 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	899b      	ldrh	r3, [r3, #12]
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7f9 ff21 	bl	8007140 <lwip_htons>
 800d2fe:	4603      	mov	r3, r0
 800d300:	b2db      	uxtb	r3, r3
 800d302:	f003 0304 	and.w	r3, r3, #4
 800d306:	2b00      	cmp	r3, #0
 800d308:	d006      	beq.n	800d318 <tcp_output+0x188>
 800d30a:	4b43      	ldr	r3, [pc, #268]	; (800d418 <tcp_output+0x288>)
 800d30c:	f240 5236 	movw	r2, #1334	; 0x536
 800d310:	4946      	ldr	r1, [pc, #280]	; (800d42c <tcp_output+0x29c>)
 800d312:	4843      	ldr	r0, [pc, #268]	; (800d420 <tcp_output+0x290>)
 800d314:	f003 ffac 	bl	8011270 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d01f      	beq.n	800d360 <tcp_output+0x1d0>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	8b5b      	ldrh	r3, [r3, #26]
 800d324:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d119      	bne.n	800d360 <tcp_output+0x1d0>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00b      	beq.n	800d34c <tcp_output+0x1bc>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d110      	bne.n	800d360 <tcp_output+0x1d0>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d342:	891a      	ldrh	r2, [r3, #8]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d348:	429a      	cmp	r2, r3
 800d34a:	d209      	bcs.n	800d360 <tcp_output+0x1d0>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d352:	2b00      	cmp	r3, #0
 800d354:	d004      	beq.n	800d360 <tcp_output+0x1d0>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d35c:	2b08      	cmp	r3, #8
 800d35e:	d901      	bls.n	800d364 <tcp_output+0x1d4>
 800d360:	2301      	movs	r3, #1
 800d362:	e000      	b.n	800d366 <tcp_output+0x1d6>
 800d364:	2300      	movs	r3, #0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d106      	bne.n	800d378 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	8b5b      	ldrh	r3, [r3, #26]
 800d36e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d372:	2b00      	cmp	r3, #0
 800d374:	f000 80e4 	beq.w	800d540 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	7d1b      	ldrb	r3, [r3, #20]
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d00d      	beq.n	800d39c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	899b      	ldrh	r3, [r3, #12]
 800d386:	b29c      	uxth	r4, r3
 800d388:	2010      	movs	r0, #16
 800d38a:	f7f9 fed9 	bl	8007140 <lwip_htons>
 800d38e:	4603      	mov	r3, r0
 800d390:	461a      	mov	r2, r3
 800d392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	4322      	orrs	r2, r4
 800d398:	b292      	uxth	r2, r2
 800d39a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d39c:	697a      	ldr	r2, [r7, #20]
 800d39e:	6879      	ldr	r1, [r7, #4]
 800d3a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3a2:	f000 f909 	bl	800d5b8 <tcp_output_segment>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d009      	beq.n	800d3c6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	8b5b      	ldrh	r3, [r3, #26]
 800d3b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3ba:	b29a      	uxth	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	835a      	strh	r2, [r3, #26]
      return err;
 800d3c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3c4:	e0d3      	b.n	800d56e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	7d1b      	ldrb	r3, [r3, #20]
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d006      	beq.n	800d3e4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	8b5b      	ldrh	r3, [r3, #26]
 800d3da:	f023 0303 	bic.w	r3, r3, #3
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7f9 febd 	bl	800716a <lwip_htonl>
 800d3f0:	4604      	mov	r4, r0
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f4:	891b      	ldrh	r3, [r3, #8]
 800d3f6:	461d      	mov	r5, r3
 800d3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	899b      	ldrh	r3, [r3, #12]
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	4618      	mov	r0, r3
 800d402:	f7f9 fe9d 	bl	8007140 <lwip_htons>
 800d406:	4603      	mov	r3, r0
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	f003 0303 	and.w	r3, r3, #3
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d00e      	beq.n	800d430 <tcp_output+0x2a0>
 800d412:	2301      	movs	r3, #1
 800d414:	e00d      	b.n	800d432 <tcp_output+0x2a2>
 800d416:	bf00      	nop
 800d418:	08013864 	.word	0x08013864
 800d41c:	08013da8 	.word	0x08013da8
 800d420:	080138b8 	.word	0x080138b8
 800d424:	08013dc0 	.word	0x08013dc0
 800d428:	2000ab24 	.word	0x2000ab24
 800d42c:	08013de8 	.word	0x08013de8
 800d430:	2300      	movs	r3, #0
 800d432:	442b      	add	r3, r5
 800d434:	4423      	add	r3, r4
 800d436:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	2b00      	cmp	r3, #0
 800d442:	da02      	bge.n	800d44a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	68ba      	ldr	r2, [r7, #8]
 800d448:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44c:	891b      	ldrh	r3, [r3, #8]
 800d44e:	461c      	mov	r4, r3
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	899b      	ldrh	r3, [r3, #12]
 800d456:	b29b      	uxth	r3, r3
 800d458:	4618      	mov	r0, r3
 800d45a:	f7f9 fe71 	bl	8007140 <lwip_htons>
 800d45e:	4603      	mov	r3, r0
 800d460:	b2db      	uxtb	r3, r3
 800d462:	f003 0303 	and.w	r3, r3, #3
 800d466:	2b00      	cmp	r3, #0
 800d468:	d001      	beq.n	800d46e <tcp_output+0x2de>
 800d46a:	2301      	movs	r3, #1
 800d46c:	e000      	b.n	800d470 <tcp_output+0x2e0>
 800d46e:	2300      	movs	r3, #0
 800d470:	4423      	add	r3, r4
 800d472:	2b00      	cmp	r3, #0
 800d474:	d049      	beq.n	800d50a <tcp_output+0x37a>
      seg->next = NULL;
 800d476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d478:	2200      	movs	r2, #0
 800d47a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d480:	2b00      	cmp	r3, #0
 800d482:	d105      	bne.n	800d490 <tcp_output+0x300>
        pcb->unacked = seg;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d488:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	623b      	str	r3, [r7, #32]
 800d48e:	e03f      	b.n	800d510 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	4618      	mov	r0, r3
 800d498:	f7f9 fe67 	bl	800716a <lwip_htonl>
 800d49c:	4604      	mov	r4, r0
 800d49e:	6a3b      	ldr	r3, [r7, #32]
 800d4a0:	68db      	ldr	r3, [r3, #12]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7f9 fe60 	bl	800716a <lwip_htonl>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	1ae3      	subs	r3, r4, r3
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	da24      	bge.n	800d4fc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	3370      	adds	r3, #112	; 0x70
 800d4b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d4b8:	e002      	b.n	800d4c0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d011      	beq.n	800d4ec <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7f9 fe4a 	bl	800716a <lwip_htonl>
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7f9 fe43 	bl	800716a <lwip_htonl>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	dbe6      	blt.n	800d4ba <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4f8:	601a      	str	r2, [r3, #0]
 800d4fa:	e009      	b.n	800d510 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d4fc:	6a3b      	ldr	r3, [r7, #32]
 800d4fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d500:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d502:	6a3b      	ldr	r3, [r7, #32]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	623b      	str	r3, [r7, #32]
 800d508:	e002      	b.n	800d510 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d50a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d50c:	f7fc fc43 	bl	8009d96 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d514:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d012      	beq.n	800d542 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	4618      	mov	r0, r3
 800d524:	f7f9 fe21 	bl	800716a <lwip_htonl>
 800d528:	4602      	mov	r2, r0
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d52e:	1ad3      	subs	r3, r2, r3
 800d530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d532:	8912      	ldrh	r2, [r2, #8]
 800d534:	4413      	add	r3, r2
  while (seg != NULL &&
 800d536:	69ba      	ldr	r2, [r7, #24]
 800d538:	429a      	cmp	r2, r3
 800d53a:	f4bf aed9 	bcs.w	800d2f0 <tcp_output+0x160>
 800d53e:	e000      	b.n	800d542 <tcp_output+0x3b2>
      break;
 800d540:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d546:	2b00      	cmp	r3, #0
 800d548:	d108      	bne.n	800d55c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d552:	e004      	b.n	800d55e <tcp_output+0x3ce>
    goto output_done;
 800d554:	bf00      	nop
 800d556:	e002      	b.n	800d55e <tcp_output+0x3ce>
    goto output_done;
 800d558:	bf00      	nop
 800d55a:	e000      	b.n	800d55e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d55c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	8b5b      	ldrh	r3, [r3, #26]
 800d562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d566:	b29a      	uxth	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3728      	adds	r7, #40	; 0x28
 800d572:	46bd      	mov	sp, r7
 800d574:	bdb0      	pop	{r4, r5, r7, pc}
 800d576:	bf00      	nop

0800d578 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d106      	bne.n	800d594 <tcp_output_segment_busy+0x1c>
 800d586:	4b09      	ldr	r3, [pc, #36]	; (800d5ac <tcp_output_segment_busy+0x34>)
 800d588:	f240 529a 	movw	r2, #1434	; 0x59a
 800d58c:	4908      	ldr	r1, [pc, #32]	; (800d5b0 <tcp_output_segment_busy+0x38>)
 800d58e:	4809      	ldr	r0, [pc, #36]	; (800d5b4 <tcp_output_segment_busy+0x3c>)
 800d590:	f003 fe6e 	bl	8011270 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	7b9b      	ldrb	r3, [r3, #14]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d001      	beq.n	800d5a2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e000      	b.n	800d5a4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d5a2:	2300      	movs	r3, #0
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	08013864 	.word	0x08013864
 800d5b0:	08013e00 	.word	0x08013e00
 800d5b4:	080138b8 	.word	0x080138b8

0800d5b8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d5b8:	b5b0      	push	{r4, r5, r7, lr}
 800d5ba:	b08c      	sub	sp, #48	; 0x30
 800d5bc:	af04      	add	r7, sp, #16
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d106      	bne.n	800d5d8 <tcp_output_segment+0x20>
 800d5ca:	4b63      	ldr	r3, [pc, #396]	; (800d758 <tcp_output_segment+0x1a0>)
 800d5cc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d5d0:	4962      	ldr	r1, [pc, #392]	; (800d75c <tcp_output_segment+0x1a4>)
 800d5d2:	4863      	ldr	r0, [pc, #396]	; (800d760 <tcp_output_segment+0x1a8>)
 800d5d4:	f003 fe4c 	bl	8011270 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d106      	bne.n	800d5ec <tcp_output_segment+0x34>
 800d5de:	4b5e      	ldr	r3, [pc, #376]	; (800d758 <tcp_output_segment+0x1a0>)
 800d5e0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d5e4:	495f      	ldr	r1, [pc, #380]	; (800d764 <tcp_output_segment+0x1ac>)
 800d5e6:	485e      	ldr	r0, [pc, #376]	; (800d760 <tcp_output_segment+0x1a8>)
 800d5e8:	f003 fe42 	bl	8011270 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d106      	bne.n	800d600 <tcp_output_segment+0x48>
 800d5f2:	4b59      	ldr	r3, [pc, #356]	; (800d758 <tcp_output_segment+0x1a0>)
 800d5f4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d5f8:	495b      	ldr	r1, [pc, #364]	; (800d768 <tcp_output_segment+0x1b0>)
 800d5fa:	4859      	ldr	r0, [pc, #356]	; (800d760 <tcp_output_segment+0x1a8>)
 800d5fc:	f003 fe38 	bl	8011270 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f7ff ffb9 	bl	800d578 <tcp_output_segment_busy>
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d001      	beq.n	800d610 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	e09f      	b.n	800d750 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	68dc      	ldr	r4, [r3, #12]
 800d618:	4610      	mov	r0, r2
 800d61a:	f7f9 fda6 	bl	800716a <lwip_htonl>
 800d61e:	4603      	mov	r3, r0
 800d620:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	68dc      	ldr	r4, [r3, #12]
 800d62a:	4610      	mov	r0, r2
 800d62c:	f7f9 fd88 	bl	8007140 <lwip_htons>
 800d630:	4603      	mov	r3, r0
 800d632:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d63c:	441a      	add	r2, r3
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	3314      	adds	r3, #20
 800d648:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	7a9b      	ldrb	r3, [r3, #10]
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d015      	beq.n	800d682 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	3304      	adds	r3, #4
 800d65a:	461a      	mov	r2, r3
 800d65c:	6879      	ldr	r1, [r7, #4]
 800d65e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d662:	f7fc fe8f 	bl	800a384 <tcp_eff_send_mss_netif>
 800d666:	4603      	mov	r3, r0
 800d668:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d66a:	8b7b      	ldrh	r3, [r7, #26]
 800d66c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d670:	4618      	mov	r0, r3
 800d672:	f7f9 fd7a 	bl	800716a <lwip_htonl>
 800d676:	4602      	mov	r2, r0
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	3304      	adds	r3, #4
 800d680:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d688:	2b00      	cmp	r3, #0
 800d68a:	da02      	bge.n	800d692 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	2200      	movs	r2, #0
 800d690:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d696:	2b00      	cmp	r3, #0
 800d698:	d10c      	bne.n	800d6b4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d69a:	4b34      	ldr	r3, [pc, #208]	; (800d76c <tcp_output_segment+0x1b4>)
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7f9 fd5e 	bl	800716a <lwip_htonl>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	68da      	ldr	r2, [r3, #12]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	1ad3      	subs	r3, r2, r3
 800d6c0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	8959      	ldrh	r1, [r3, #10]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	8b3a      	ldrh	r2, [r7, #24]
 800d6ce:	1a8a      	subs	r2, r1, r2
 800d6d0:	b292      	uxth	r2, r2
 800d6d2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	8919      	ldrh	r1, [r3, #8]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	8b3a      	ldrh	r2, [r7, #24]
 800d6e0:	1a8a      	subs	r2, r1, r2
 800d6e2:	b292      	uxth	r2, r2
 800d6e4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	68d2      	ldr	r2, [r2, #12]
 800d6ee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	741a      	strb	r2, [r3, #16]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	f103 0214 	add.w	r2, r3, #20
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	7a9b      	ldrb	r3, [r3, #10]
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	f003 0304 	and.w	r3, r3, #4
 800d70e:	4413      	add	r3, r2
 800d710:	69fa      	ldr	r2, [r7, #28]
 800d712:	429a      	cmp	r2, r3
 800d714:	d006      	beq.n	800d724 <tcp_output_segment+0x16c>
 800d716:	4b10      	ldr	r3, [pc, #64]	; (800d758 <tcp_output_segment+0x1a0>)
 800d718:	f240 621c 	movw	r2, #1564	; 0x61c
 800d71c:	4914      	ldr	r1, [pc, #80]	; (800d770 <tcp_output_segment+0x1b8>)
 800d71e:	4810      	ldr	r0, [pc, #64]	; (800d760 <tcp_output_segment+0x1a8>)
 800d720:	f003 fda6 	bl	8011270 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6858      	ldr	r0, [r3, #4]
 800d728:	68b9      	ldr	r1, [r7, #8]
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	1d1c      	adds	r4, r3, #4
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	7add      	ldrb	r5, [r3, #11]
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	7a9b      	ldrb	r3, [r3, #10]
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	9202      	str	r2, [sp, #8]
 800d73a:	2206      	movs	r2, #6
 800d73c:	9201      	str	r2, [sp, #4]
 800d73e:	9300      	str	r3, [sp, #0]
 800d740:	462b      	mov	r3, r5
 800d742:	4622      	mov	r2, r4
 800d744:	f002 fa66 	bl	800fc14 <ip4_output_if>
 800d748:	4603      	mov	r3, r0
 800d74a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d74c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d750:	4618      	mov	r0, r3
 800d752:	3720      	adds	r7, #32
 800d754:	46bd      	mov	sp, r7
 800d756:	bdb0      	pop	{r4, r5, r7, pc}
 800d758:	08013864 	.word	0x08013864
 800d75c:	08013e28 	.word	0x08013e28
 800d760:	080138b8 	.word	0x080138b8
 800d764:	08013e48 	.word	0x08013e48
 800d768:	08013e68 	.word	0x08013e68
 800d76c:	2000ab14 	.word	0x2000ab14
 800d770:	08013e8c 	.word	0x08013e8c

0800d774 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d774:	b5b0      	push	{r4, r5, r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d106      	bne.n	800d790 <tcp_rexmit_rto_prepare+0x1c>
 800d782:	4b31      	ldr	r3, [pc, #196]	; (800d848 <tcp_rexmit_rto_prepare+0xd4>)
 800d784:	f240 6263 	movw	r2, #1635	; 0x663
 800d788:	4930      	ldr	r1, [pc, #192]	; (800d84c <tcp_rexmit_rto_prepare+0xd8>)
 800d78a:	4831      	ldr	r0, [pc, #196]	; (800d850 <tcp_rexmit_rto_prepare+0xdc>)
 800d78c:	f003 fd70 	bl	8011270 <iprintf>

  if (pcb->unacked == NULL) {
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d794:	2b00      	cmp	r3, #0
 800d796:	d102      	bne.n	800d79e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d798:	f06f 0305 	mvn.w	r3, #5
 800d79c:	e050      	b.n	800d840 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7a2:	60fb      	str	r3, [r7, #12]
 800d7a4:	e00b      	b.n	800d7be <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f7ff fee6 	bl	800d578 <tcp_output_segment_busy>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d002      	beq.n	800d7b8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d7b2:	f06f 0305 	mvn.w	r3, #5
 800d7b6:	e043      	b.n	800d840 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	60fb      	str	r3, [r7, #12]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d1ef      	bne.n	800d7a6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d7c6:	68f8      	ldr	r0, [r7, #12]
 800d7c8:	f7ff fed6 	bl	800d578 <tcp_output_segment_busy>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d002      	beq.n	800d7d8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d7d2:	f06f 0305 	mvn.w	r3, #5
 800d7d6:	e033      	b.n	800d840 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	8b5b      	ldrh	r3, [r3, #26]
 800d7f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	4618      	mov	r0, r3
 800d804:	f7f9 fcb1 	bl	800716a <lwip_htonl>
 800d808:	4604      	mov	r4, r0
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	891b      	ldrh	r3, [r3, #8]
 800d80e:	461d      	mov	r5, r3
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	899b      	ldrh	r3, [r3, #12]
 800d816:	b29b      	uxth	r3, r3
 800d818:	4618      	mov	r0, r3
 800d81a:	f7f9 fc91 	bl	8007140 <lwip_htons>
 800d81e:	4603      	mov	r3, r0
 800d820:	b2db      	uxtb	r3, r3
 800d822:	f003 0303 	and.w	r3, r3, #3
 800d826:	2b00      	cmp	r3, #0
 800d828:	d001      	beq.n	800d82e <tcp_rexmit_rto_prepare+0xba>
 800d82a:	2301      	movs	r3, #1
 800d82c:	e000      	b.n	800d830 <tcp_rexmit_rto_prepare+0xbc>
 800d82e:	2300      	movs	r3, #0
 800d830:	442b      	add	r3, r5
 800d832:	18e2      	adds	r2, r4, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bdb0      	pop	{r4, r5, r7, pc}
 800d848:	08013864 	.word	0x08013864
 800d84c:	08013ea0 	.word	0x08013ea0
 800d850:	080138b8 	.word	0x080138b8

0800d854 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d106      	bne.n	800d870 <tcp_rexmit_rto_commit+0x1c>
 800d862:	4b0d      	ldr	r3, [pc, #52]	; (800d898 <tcp_rexmit_rto_commit+0x44>)
 800d864:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d868:	490c      	ldr	r1, [pc, #48]	; (800d89c <tcp_rexmit_rto_commit+0x48>)
 800d86a:	480d      	ldr	r0, [pc, #52]	; (800d8a0 <tcp_rexmit_rto_commit+0x4c>)
 800d86c:	f003 fd00 	bl	8011270 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d876:	2bff      	cmp	r3, #255	; 0xff
 800d878:	d007      	beq.n	800d88a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d880:	3301      	adds	r3, #1
 800d882:	b2da      	uxtb	r2, r3
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7ff fc80 	bl	800d190 <tcp_output>
}
 800d890:	bf00      	nop
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	08013864 	.word	0x08013864
 800d89c:	08013ec4 	.word	0x08013ec4
 800d8a0:	080138b8 	.word	0x080138b8

0800d8a4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d106      	bne.n	800d8c0 <tcp_rexmit_rto+0x1c>
 800d8b2:	4b0a      	ldr	r3, [pc, #40]	; (800d8dc <tcp_rexmit_rto+0x38>)
 800d8b4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d8b8:	4909      	ldr	r1, [pc, #36]	; (800d8e0 <tcp_rexmit_rto+0x3c>)
 800d8ba:	480a      	ldr	r0, [pc, #40]	; (800d8e4 <tcp_rexmit_rto+0x40>)
 800d8bc:	f003 fcd8 	bl	8011270 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f7ff ff57 	bl	800d774 <tcp_rexmit_rto_prepare>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d102      	bne.n	800d8d2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f7ff ffc1 	bl	800d854 <tcp_rexmit_rto_commit>
  }
}
 800d8d2:	bf00      	nop
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	08013864 	.word	0x08013864
 800d8e0:	08013ee8 	.word	0x08013ee8
 800d8e4:	080138b8 	.word	0x080138b8

0800d8e8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d8e8:	b590      	push	{r4, r7, lr}
 800d8ea:	b085      	sub	sp, #20
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d106      	bne.n	800d904 <tcp_rexmit+0x1c>
 800d8f6:	4b2f      	ldr	r3, [pc, #188]	; (800d9b4 <tcp_rexmit+0xcc>)
 800d8f8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d8fc:	492e      	ldr	r1, [pc, #184]	; (800d9b8 <tcp_rexmit+0xd0>)
 800d8fe:	482f      	ldr	r0, [pc, #188]	; (800d9bc <tcp_rexmit+0xd4>)
 800d900:	f003 fcb6 	bl	8011270 <iprintf>

  if (pcb->unacked == NULL) {
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d102      	bne.n	800d912 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d90c:	f06f 0305 	mvn.w	r3, #5
 800d910:	e04c      	b.n	800d9ac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d916:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d918:	68b8      	ldr	r0, [r7, #8]
 800d91a:	f7ff fe2d 	bl	800d578 <tcp_output_segment_busy>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d002      	beq.n	800d92a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d924:	f06f 0305 	mvn.w	r3, #5
 800d928:	e040      	b.n	800d9ac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	681a      	ldr	r2, [r3, #0]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	336c      	adds	r3, #108	; 0x6c
 800d936:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d938:	e002      	b.n	800d940 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d011      	beq.n	800d96c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	4618      	mov	r0, r3
 800d952:	f7f9 fc0a 	bl	800716a <lwip_htonl>
 800d956:	4604      	mov	r4, r0
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	4618      	mov	r0, r3
 800d960:	f7f9 fc03 	bl	800716a <lwip_htonl>
 800d964:	4603      	mov	r3, r0
 800d966:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d968:	2b00      	cmp	r3, #0
 800d96a:	dbe6      	blt.n	800d93a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	68ba      	ldr	r2, [r7, #8]
 800d978:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d103      	bne.n	800d98a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d990:	2bff      	cmp	r3, #255	; 0xff
 800d992:	d007      	beq.n	800d9a4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d99a:	3301      	adds	r3, #1
 800d99c:	b2da      	uxtb	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3714      	adds	r7, #20
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd90      	pop	{r4, r7, pc}
 800d9b4:	08013864 	.word	0x08013864
 800d9b8:	08013f04 	.word	0x08013f04
 800d9bc:	080138b8 	.word	0x080138b8

0800d9c0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d106      	bne.n	800d9dc <tcp_rexmit_fast+0x1c>
 800d9ce:	4b2a      	ldr	r3, [pc, #168]	; (800da78 <tcp_rexmit_fast+0xb8>)
 800d9d0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d9d4:	4929      	ldr	r1, [pc, #164]	; (800da7c <tcp_rexmit_fast+0xbc>)
 800d9d6:	482a      	ldr	r0, [pc, #168]	; (800da80 <tcp_rexmit_fast+0xc0>)
 800d9d8:	f003 fc4a 	bl	8011270 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d044      	beq.n	800da6e <tcp_rexmit_fast+0xae>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	8b5b      	ldrh	r3, [r3, #26]
 800d9e8:	f003 0304 	and.w	r3, r3, #4
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d13e      	bne.n	800da6e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f7ff ff79 	bl	800d8e8 <tcp_rexmit>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d138      	bne.n	800da6e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da08:	4293      	cmp	r3, r2
 800da0a:	bf28      	it	cs
 800da0c:	4613      	movcs	r3, r2
 800da0e:	b29b      	uxth	r3, r3
 800da10:	0fda      	lsrs	r2, r3, #31
 800da12:	4413      	add	r3, r2
 800da14:	105b      	asrs	r3, r3, #1
 800da16:	b29a      	uxth	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800da24:	461a      	mov	r2, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d206      	bcs.n	800da3e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da34:	005b      	lsls	r3, r3, #1
 800da36:	b29a      	uxth	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da48:	4619      	mov	r1, r3
 800da4a:	0049      	lsls	r1, r1, #1
 800da4c:	440b      	add	r3, r1
 800da4e:	b29b      	uxth	r3, r3
 800da50:	4413      	add	r3, r2
 800da52:	b29a      	uxth	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	8b5b      	ldrh	r3, [r3, #26]
 800da5e:	f043 0304 	orr.w	r3, r3, #4
 800da62:	b29a      	uxth	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800da6e:	bf00      	nop
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	08013864 	.word	0x08013864
 800da7c:	08013f1c 	.word	0x08013f1c
 800da80:	080138b8 	.word	0x080138b8

0800da84 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	607b      	str	r3, [r7, #4]
 800da8e:	460b      	mov	r3, r1
 800da90:	817b      	strh	r3, [r7, #10]
 800da92:	4613      	mov	r3, r2
 800da94:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800da96:	897a      	ldrh	r2, [r7, #10]
 800da98:	893b      	ldrh	r3, [r7, #8]
 800da9a:	4413      	add	r3, r2
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	3314      	adds	r3, #20
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800daa6:	4619      	mov	r1, r3
 800daa8:	2022      	movs	r0, #34	; 0x22
 800daaa:	f7fa fc11 	bl	80082d0 <pbuf_alloc>
 800daae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d04d      	beq.n	800db52 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dab6:	897b      	ldrh	r3, [r7, #10]
 800dab8:	3313      	adds	r3, #19
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	8952      	ldrh	r2, [r2, #10]
 800dabe:	4293      	cmp	r3, r2
 800dac0:	db06      	blt.n	800dad0 <tcp_output_alloc_header_common+0x4c>
 800dac2:	4b26      	ldr	r3, [pc, #152]	; (800db5c <tcp_output_alloc_header_common+0xd8>)
 800dac4:	f240 7223 	movw	r2, #1827	; 0x723
 800dac8:	4925      	ldr	r1, [pc, #148]	; (800db60 <tcp_output_alloc_header_common+0xdc>)
 800daca:	4826      	ldr	r0, [pc, #152]	; (800db64 <tcp_output_alloc_header_common+0xe0>)
 800dacc:	f003 fbd0 	bl	8011270 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800dad6:	8c3b      	ldrh	r3, [r7, #32]
 800dad8:	4618      	mov	r0, r3
 800dada:	f7f9 fb31 	bl	8007140 <lwip_htons>
 800dade:	4603      	mov	r3, r0
 800dae0:	461a      	mov	r2, r3
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800dae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dae8:	4618      	mov	r0, r3
 800daea:	f7f9 fb29 	bl	8007140 <lwip_htons>
 800daee:	4603      	mov	r3, r0
 800daf0:	461a      	mov	r2, r3
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f7f9 fb34 	bl	800716a <lwip_htonl>
 800db02:	4602      	mov	r2, r0
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800db08:	897b      	ldrh	r3, [r7, #10]
 800db0a:	089b      	lsrs	r3, r3, #2
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	3305      	adds	r3, #5
 800db10:	b29b      	uxth	r3, r3
 800db12:	031b      	lsls	r3, r3, #12
 800db14:	b29a      	uxth	r2, r3
 800db16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db1a:	b29b      	uxth	r3, r3
 800db1c:	4313      	orrs	r3, r2
 800db1e:	b29b      	uxth	r3, r3
 800db20:	4618      	mov	r0, r3
 800db22:	f7f9 fb0d 	bl	8007140 <lwip_htons>
 800db26:	4603      	mov	r3, r0
 800db28:	461a      	mov	r2, r3
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800db2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db30:	4618      	mov	r0, r3
 800db32:	f7f9 fb05 	bl	8007140 <lwip_htons>
 800db36:	4603      	mov	r3, r0
 800db38:	461a      	mov	r2, r3
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	2200      	movs	r2, #0
 800db42:	741a      	strb	r2, [r3, #16]
 800db44:	2200      	movs	r2, #0
 800db46:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	2200      	movs	r2, #0
 800db4c:	749a      	strb	r2, [r3, #18]
 800db4e:	2200      	movs	r2, #0
 800db50:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800db52:	697b      	ldr	r3, [r7, #20]
}
 800db54:	4618      	mov	r0, r3
 800db56:	3718      	adds	r7, #24
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	08013864 	.word	0x08013864
 800db60:	08013f3c 	.word	0x08013f3c
 800db64:	080138b8 	.word	0x080138b8

0800db68 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800db68:	b5b0      	push	{r4, r5, r7, lr}
 800db6a:	b08a      	sub	sp, #40	; 0x28
 800db6c:	af04      	add	r7, sp, #16
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	607b      	str	r3, [r7, #4]
 800db72:	460b      	mov	r3, r1
 800db74:	817b      	strh	r3, [r7, #10]
 800db76:	4613      	mov	r3, r2
 800db78:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d106      	bne.n	800db8e <tcp_output_alloc_header+0x26>
 800db80:	4b15      	ldr	r3, [pc, #84]	; (800dbd8 <tcp_output_alloc_header+0x70>)
 800db82:	f240 7242 	movw	r2, #1858	; 0x742
 800db86:	4915      	ldr	r1, [pc, #84]	; (800dbdc <tcp_output_alloc_header+0x74>)
 800db88:	4815      	ldr	r0, [pc, #84]	; (800dbe0 <tcp_output_alloc_header+0x78>)
 800db8a:	f003 fb71 	bl	8011270 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	8adb      	ldrh	r3, [r3, #22]
 800db96:	68fa      	ldr	r2, [r7, #12]
 800db98:	8b12      	ldrh	r2, [r2, #24]
 800db9a:	68f9      	ldr	r1, [r7, #12]
 800db9c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800db9e:	893d      	ldrh	r5, [r7, #8]
 800dba0:	897c      	ldrh	r4, [r7, #10]
 800dba2:	9103      	str	r1, [sp, #12]
 800dba4:	2110      	movs	r1, #16
 800dba6:	9102      	str	r1, [sp, #8]
 800dba8:	9201      	str	r2, [sp, #4]
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	462a      	mov	r2, r5
 800dbb0:	4621      	mov	r1, r4
 800dbb2:	f7ff ff67 	bl	800da84 <tcp_output_alloc_header_common>
 800dbb6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d006      	beq.n	800dbcc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dbc6:	441a      	add	r2, r3
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800dbcc:	697b      	ldr	r3, [r7, #20]
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3718      	adds	r7, #24
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bdb0      	pop	{r4, r5, r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	08013864 	.word	0x08013864
 800dbdc:	08013f6c 	.word	0x08013f6c
 800dbe0:	080138b8 	.word	0x080138b8

0800dbe4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b088      	sub	sp, #32
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	4611      	mov	r1, r2
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	71fb      	strb	r3, [r7, #7]
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d106      	bne.n	800dc12 <tcp_output_fill_options+0x2e>
 800dc04:	4b13      	ldr	r3, [pc, #76]	; (800dc54 <tcp_output_fill_options+0x70>)
 800dc06:	f240 7256 	movw	r2, #1878	; 0x756
 800dc0a:	4913      	ldr	r1, [pc, #76]	; (800dc58 <tcp_output_fill_options+0x74>)
 800dc0c:	4813      	ldr	r0, [pc, #76]	; (800dc5c <tcp_output_fill_options+0x78>)
 800dc0e:	f003 fb2f 	bl	8011270 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	3314      	adds	r3, #20
 800dc1c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	f103 0214 	add.w	r2, r3, #20
 800dc24:	8bfb      	ldrh	r3, [r7, #30]
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4619      	mov	r1, r3
 800dc2a:	79fb      	ldrb	r3, [r7, #7]
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	f003 0304 	and.w	r3, r3, #4
 800dc32:	440b      	add	r3, r1
 800dc34:	4413      	add	r3, r2
 800dc36:	697a      	ldr	r2, [r7, #20]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d006      	beq.n	800dc4a <tcp_output_fill_options+0x66>
 800dc3c:	4b05      	ldr	r3, [pc, #20]	; (800dc54 <tcp_output_fill_options+0x70>)
 800dc3e:	f240 7275 	movw	r2, #1909	; 0x775
 800dc42:	4907      	ldr	r1, [pc, #28]	; (800dc60 <tcp_output_fill_options+0x7c>)
 800dc44:	4805      	ldr	r0, [pc, #20]	; (800dc5c <tcp_output_fill_options+0x78>)
 800dc46:	f003 fb13 	bl	8011270 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800dc4a:	bf00      	nop
 800dc4c:	3720      	adds	r7, #32
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	08013864 	.word	0x08013864
 800dc58:	08013f94 	.word	0x08013f94
 800dc5c:	080138b8 	.word	0x080138b8
 800dc60:	08013e8c 	.word	0x08013e8c

0800dc64 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b08a      	sub	sp, #40	; 0x28
 800dc68:	af04      	add	r7, sp, #16
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
 800dc70:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d106      	bne.n	800dc86 <tcp_output_control_segment+0x22>
 800dc78:	4b1c      	ldr	r3, [pc, #112]	; (800dcec <tcp_output_control_segment+0x88>)
 800dc7a:	f240 7287 	movw	r2, #1927	; 0x787
 800dc7e:	491c      	ldr	r1, [pc, #112]	; (800dcf0 <tcp_output_control_segment+0x8c>)
 800dc80:	481c      	ldr	r0, [pc, #112]	; (800dcf4 <tcp_output_control_segment+0x90>)
 800dc82:	f003 faf5 	bl	8011270 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	6879      	ldr	r1, [r7, #4]
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	f7fe ff40 	bl	800cb10 <tcp_route>
 800dc90:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d102      	bne.n	800dc9e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800dc98:	23fc      	movs	r3, #252	; 0xfc
 800dc9a:	75fb      	strb	r3, [r7, #23]
 800dc9c:	e01c      	b.n	800dcd8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d006      	beq.n	800dcb2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	7adb      	ldrb	r3, [r3, #11]
 800dca8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	7a9b      	ldrb	r3, [r3, #10]
 800dcae:	757b      	strb	r3, [r7, #21]
 800dcb0:	e003      	b.n	800dcba <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800dcb2:	23ff      	movs	r3, #255	; 0xff
 800dcb4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dcba:	7dba      	ldrb	r2, [r7, #22]
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	9302      	str	r3, [sp, #8]
 800dcc0:	2306      	movs	r3, #6
 800dcc2:	9301      	str	r3, [sp, #4]
 800dcc4:	7d7b      	ldrb	r3, [r7, #21]
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	4613      	mov	r3, r2
 800dcca:	683a      	ldr	r2, [r7, #0]
 800dccc:	6879      	ldr	r1, [r7, #4]
 800dcce:	68b8      	ldr	r0, [r7, #8]
 800dcd0:	f001 ffa0 	bl	800fc14 <ip4_output_if>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dcd8:	68b8      	ldr	r0, [r7, #8]
 800dcda:	f7fa fddd 	bl	8008898 <pbuf_free>
  return err;
 800dcde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3718      	adds	r7, #24
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	08013864 	.word	0x08013864
 800dcf0:	08013fbc 	.word	0x08013fbc
 800dcf4:	080138b8 	.word	0x080138b8

0800dcf8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dcf8:	b590      	push	{r4, r7, lr}
 800dcfa:	b08b      	sub	sp, #44	; 0x2c
 800dcfc:	af04      	add	r7, sp, #16
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
 800dd04:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d106      	bne.n	800dd1a <tcp_rst+0x22>
 800dd0c:	4b1f      	ldr	r3, [pc, #124]	; (800dd8c <tcp_rst+0x94>)
 800dd0e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dd12:	491f      	ldr	r1, [pc, #124]	; (800dd90 <tcp_rst+0x98>)
 800dd14:	481f      	ldr	r0, [pc, #124]	; (800dd94 <tcp_rst+0x9c>)
 800dd16:	f003 faab 	bl	8011270 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d106      	bne.n	800dd2e <tcp_rst+0x36>
 800dd20:	4b1a      	ldr	r3, [pc, #104]	; (800dd8c <tcp_rst+0x94>)
 800dd22:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dd26:	491c      	ldr	r1, [pc, #112]	; (800dd98 <tcp_rst+0xa0>)
 800dd28:	481a      	ldr	r0, [pc, #104]	; (800dd94 <tcp_rst+0x9c>)
 800dd2a:	f003 faa1 	bl	8011270 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dd2e:	2300      	movs	r3, #0
 800dd30:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dd32:	f246 0308 	movw	r3, #24584	; 0x6008
 800dd36:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dd38:	7dfb      	ldrb	r3, [r7, #23]
 800dd3a:	b29c      	uxth	r4, r3
 800dd3c:	68b8      	ldr	r0, [r7, #8]
 800dd3e:	f7f9 fa14 	bl	800716a <lwip_htonl>
 800dd42:	4602      	mov	r2, r0
 800dd44:	8abb      	ldrh	r3, [r7, #20]
 800dd46:	9303      	str	r3, [sp, #12]
 800dd48:	2314      	movs	r3, #20
 800dd4a:	9302      	str	r3, [sp, #8]
 800dd4c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dd4e:	9301      	str	r3, [sp, #4]
 800dd50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	4613      	mov	r3, r2
 800dd56:	2200      	movs	r2, #0
 800dd58:	4621      	mov	r1, r4
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f7ff fe92 	bl	800da84 <tcp_output_alloc_header_common>
 800dd60:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00c      	beq.n	800dd82 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd68:	7dfb      	ldrb	r3, [r7, #23]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	6939      	ldr	r1, [r7, #16]
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	f7ff ff38 	bl	800dbe4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	6939      	ldr	r1, [r7, #16]
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f7ff ff72 	bl	800dc64 <tcp_output_control_segment>
 800dd80:	e000      	b.n	800dd84 <tcp_rst+0x8c>
    return;
 800dd82:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dd84:	371c      	adds	r7, #28
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd90      	pop	{r4, r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	08013864 	.word	0x08013864
 800dd90:	08013fe8 	.word	0x08013fe8
 800dd94:	080138b8 	.word	0x080138b8
 800dd98:	08014004 	.word	0x08014004

0800dd9c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800dd9c:	b590      	push	{r4, r7, lr}
 800dd9e:	b087      	sub	sp, #28
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800dda4:	2300      	movs	r3, #0
 800dda6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d106      	bne.n	800ddc0 <tcp_send_empty_ack+0x24>
 800ddb2:	4b28      	ldr	r3, [pc, #160]	; (800de54 <tcp_send_empty_ack+0xb8>)
 800ddb4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ddb8:	4927      	ldr	r1, [pc, #156]	; (800de58 <tcp_send_empty_ack+0xbc>)
 800ddba:	4828      	ldr	r0, [pc, #160]	; (800de5c <tcp_send_empty_ack+0xc0>)
 800ddbc:	f003 fa58 	bl	8011270 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ddc0:	7dfb      	ldrb	r3, [r7, #23]
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	f003 0304 	and.w	r3, r3, #4
 800ddca:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ddcc:	7d7b      	ldrb	r3, [r7, #21]
 800ddce:	b29c      	uxth	r4, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7f9 f9c8 	bl	800716a <lwip_htonl>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2200      	movs	r2, #0
 800ddde:	4621      	mov	r1, r4
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7ff fec1 	bl	800db68 <tcp_output_alloc_header>
 800dde6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d109      	bne.n	800de02 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	8b5b      	ldrh	r3, [r3, #26]
 800ddf2:	f043 0303 	orr.w	r3, r3, #3
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ddfc:	f06f 0301 	mvn.w	r3, #1
 800de00:	e023      	b.n	800de4a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800de02:	7dbb      	ldrb	r3, [r7, #22]
 800de04:	7dfa      	ldrb	r2, [r7, #23]
 800de06:	6939      	ldr	r1, [r7, #16]
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f7ff feeb 	bl	800dbe4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	3304      	adds	r3, #4
 800de14:	6939      	ldr	r1, [r7, #16]
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f7ff ff24 	bl	800dc64 <tcp_output_control_segment>
 800de1c:	4603      	mov	r3, r0
 800de1e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800de20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d007      	beq.n	800de38 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	8b5b      	ldrh	r3, [r3, #26]
 800de2c:	f043 0303 	orr.w	r3, r3, #3
 800de30:	b29a      	uxth	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	835a      	strh	r2, [r3, #26]
 800de36:	e006      	b.n	800de46 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	8b5b      	ldrh	r3, [r3, #26]
 800de3c:	f023 0303 	bic.w	r3, r3, #3
 800de40:	b29a      	uxth	r2, r3
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800de46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	371c      	adds	r7, #28
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd90      	pop	{r4, r7, pc}
 800de52:	bf00      	nop
 800de54:	08013864 	.word	0x08013864
 800de58:	08014020 	.word	0x08014020
 800de5c:	080138b8 	.word	0x080138b8

0800de60 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800de60:	b590      	push	{r4, r7, lr}
 800de62:	b087      	sub	sp, #28
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800de68:	2300      	movs	r3, #0
 800de6a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d106      	bne.n	800de80 <tcp_keepalive+0x20>
 800de72:	4b18      	ldr	r3, [pc, #96]	; (800ded4 <tcp_keepalive+0x74>)
 800de74:	f640 0224 	movw	r2, #2084	; 0x824
 800de78:	4917      	ldr	r1, [pc, #92]	; (800ded8 <tcp_keepalive+0x78>)
 800de7a:	4818      	ldr	r0, [pc, #96]	; (800dedc <tcp_keepalive+0x7c>)
 800de7c:	f003 f9f8 	bl	8011270 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800de80:	7dfb      	ldrb	r3, [r7, #23]
 800de82:	b29c      	uxth	r4, r3
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de88:	3b01      	subs	r3, #1
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7f9 f96d 	bl	800716a <lwip_htonl>
 800de90:	4603      	mov	r3, r0
 800de92:	2200      	movs	r2, #0
 800de94:	4621      	mov	r1, r4
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f7ff fe66 	bl	800db68 <tcp_output_alloc_header>
 800de9c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d102      	bne.n	800deaa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dea4:	f04f 33ff 	mov.w	r3, #4294967295
 800dea8:	e010      	b.n	800decc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800deaa:	7dfb      	ldrb	r3, [r7, #23]
 800deac:	2200      	movs	r2, #0
 800deae:	6939      	ldr	r1, [r7, #16]
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f7ff fe97 	bl	800dbe4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	3304      	adds	r3, #4
 800debc:	6939      	ldr	r1, [r7, #16]
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7ff fed0 	bl	800dc64 <tcp_output_control_segment>
 800dec4:	4603      	mov	r3, r0
 800dec6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800decc:	4618      	mov	r0, r3
 800dece:	371c      	adds	r7, #28
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd90      	pop	{r4, r7, pc}
 800ded4:	08013864 	.word	0x08013864
 800ded8:	08014040 	.word	0x08014040
 800dedc:	080138b8 	.word	0x080138b8

0800dee0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800dee0:	b590      	push	{r4, r7, lr}
 800dee2:	b08b      	sub	sp, #44	; 0x2c
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dee8:	2300      	movs	r3, #0
 800deea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d106      	bne.n	800df02 <tcp_zero_window_probe+0x22>
 800def4:	4b4c      	ldr	r3, [pc, #304]	; (800e028 <tcp_zero_window_probe+0x148>)
 800def6:	f640 024f 	movw	r2, #2127	; 0x84f
 800defa:	494c      	ldr	r1, [pc, #304]	; (800e02c <tcp_zero_window_probe+0x14c>)
 800defc:	484c      	ldr	r0, [pc, #304]	; (800e030 <tcp_zero_window_probe+0x150>)
 800defe:	f003 f9b7 	bl	8011270 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df06:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800df08:	6a3b      	ldr	r3, [r7, #32]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d101      	bne.n	800df12 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800df0e:	2300      	movs	r3, #0
 800df10:	e086      	b.n	800e020 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800df18:	2bff      	cmp	r3, #255	; 0xff
 800df1a:	d007      	beq.n	800df2c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800df22:	3301      	adds	r3, #1
 800df24:	b2da      	uxtb	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800df2c:	6a3b      	ldr	r3, [r7, #32]
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	899b      	ldrh	r3, [r3, #12]
 800df32:	b29b      	uxth	r3, r3
 800df34:	4618      	mov	r0, r3
 800df36:	f7f9 f903 	bl	8007140 <lwip_htons>
 800df3a:	4603      	mov	r3, r0
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	f003 0301 	and.w	r3, r3, #1
 800df42:	2b00      	cmp	r3, #0
 800df44:	d005      	beq.n	800df52 <tcp_zero_window_probe+0x72>
 800df46:	6a3b      	ldr	r3, [r7, #32]
 800df48:	891b      	ldrh	r3, [r3, #8]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <tcp_zero_window_probe+0x72>
 800df4e:	2301      	movs	r3, #1
 800df50:	e000      	b.n	800df54 <tcp_zero_window_probe+0x74>
 800df52:	2300      	movs	r3, #0
 800df54:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800df56:	7ffb      	ldrb	r3, [r7, #31]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	bf0c      	ite	eq
 800df5c:	2301      	moveq	r3, #1
 800df5e:	2300      	movne	r3, #0
 800df60:	b2db      	uxtb	r3, r3
 800df62:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800df64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df68:	b299      	uxth	r1, r3
 800df6a:	6a3b      	ldr	r3, [r7, #32]
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	8bba      	ldrh	r2, [r7, #28]
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f7ff fdf8 	bl	800db68 <tcp_output_alloc_header>
 800df78:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d102      	bne.n	800df86 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800df80:	f04f 33ff 	mov.w	r3, #4294967295
 800df84:	e04c      	b.n	800e020 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800df8c:	7ffb      	ldrb	r3, [r7, #31]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d011      	beq.n	800dfb6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	899b      	ldrh	r3, [r3, #12]
 800df96:	b29b      	uxth	r3, r3
 800df98:	b21b      	sxth	r3, r3
 800df9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800df9e:	b21c      	sxth	r4, r3
 800dfa0:	2011      	movs	r0, #17
 800dfa2:	f7f9 f8cd 	bl	8007140 <lwip_htons>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	b21b      	sxth	r3, r3
 800dfaa:	4323      	orrs	r3, r4
 800dfac:	b21b      	sxth	r3, r3
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	819a      	strh	r2, [r3, #12]
 800dfb4:	e010      	b.n	800dfd8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	3314      	adds	r3, #20
 800dfbc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dfbe:	6a3b      	ldr	r3, [r7, #32]
 800dfc0:	6858      	ldr	r0, [r3, #4]
 800dfc2:	6a3b      	ldr	r3, [r7, #32]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	891a      	ldrh	r2, [r3, #8]
 800dfc8:	6a3b      	ldr	r3, [r7, #32]
 800dfca:	891b      	ldrh	r3, [r3, #8]
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	6939      	ldr	r1, [r7, #16]
 800dfd4:	f7fa fe56 	bl	8008c84 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dfd8:	6a3b      	ldr	r3, [r7, #32]
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7f9 f8c3 	bl	800716a <lwip_htonl>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	da02      	bge.n	800dffc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e000:	2200      	movs	r2, #0
 800e002:	69b9      	ldr	r1, [r7, #24]
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff fded 	bl	800dbe4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	3304      	adds	r3, #4
 800e010:	69b9      	ldr	r1, [r7, #24]
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f7ff fe26 	bl	800dc64 <tcp_output_control_segment>
 800e018:	4603      	mov	r3, r0
 800e01a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e01c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e020:	4618      	mov	r0, r3
 800e022:	372c      	adds	r7, #44	; 0x2c
 800e024:	46bd      	mov	sp, r7
 800e026:	bd90      	pop	{r4, r7, pc}
 800e028:	08013864 	.word	0x08013864
 800e02c:	0801405c 	.word	0x0801405c
 800e030:	080138b8 	.word	0x080138b8

0800e034 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e03c:	f7fa ff10 	bl	8008e60 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e040:	4b0a      	ldr	r3, [pc, #40]	; (800e06c <tcpip_tcp_timer+0x38>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d103      	bne.n	800e050 <tcpip_tcp_timer+0x1c>
 800e048:	4b09      	ldr	r3, [pc, #36]	; (800e070 <tcpip_tcp_timer+0x3c>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d005      	beq.n	800e05c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e050:	2200      	movs	r2, #0
 800e052:	4908      	ldr	r1, [pc, #32]	; (800e074 <tcpip_tcp_timer+0x40>)
 800e054:	20fa      	movs	r0, #250	; 0xfa
 800e056:	f000 f8f3 	bl	800e240 <sys_timeout>
 800e05a:	e003      	b.n	800e064 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e05c:	4b06      	ldr	r3, [pc, #24]	; (800e078 <tcpip_tcp_timer+0x44>)
 800e05e:	2200      	movs	r2, #0
 800e060:	601a      	str	r2, [r3, #0]
  }
}
 800e062:	bf00      	nop
 800e064:	bf00      	nop
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	2000ab10 	.word	0x2000ab10
 800e070:	2000ab20 	.word	0x2000ab20
 800e074:	0800e035 	.word	0x0800e035
 800e078:	20004164 	.word	0x20004164

0800e07c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e080:	4b0a      	ldr	r3, [pc, #40]	; (800e0ac <tcp_timer_needed+0x30>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10f      	bne.n	800e0a8 <tcp_timer_needed+0x2c>
 800e088:	4b09      	ldr	r3, [pc, #36]	; (800e0b0 <tcp_timer_needed+0x34>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d103      	bne.n	800e098 <tcp_timer_needed+0x1c>
 800e090:	4b08      	ldr	r3, [pc, #32]	; (800e0b4 <tcp_timer_needed+0x38>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d007      	beq.n	800e0a8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e098:	4b04      	ldr	r3, [pc, #16]	; (800e0ac <tcp_timer_needed+0x30>)
 800e09a:	2201      	movs	r2, #1
 800e09c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e09e:	2200      	movs	r2, #0
 800e0a0:	4905      	ldr	r1, [pc, #20]	; (800e0b8 <tcp_timer_needed+0x3c>)
 800e0a2:	20fa      	movs	r0, #250	; 0xfa
 800e0a4:	f000 f8cc 	bl	800e240 <sys_timeout>
  }
}
 800e0a8:	bf00      	nop
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	20004164 	.word	0x20004164
 800e0b0:	2000ab10 	.word	0x2000ab10
 800e0b4:	2000ab20 	.word	0x2000ab20
 800e0b8:	0800e035 	.word	0x0800e035

0800e0bc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b086      	sub	sp, #24
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e0c8:	200a      	movs	r0, #10
 800e0ca:	f7f9 fcef 	bl	8007aac <memp_malloc>
 800e0ce:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d109      	bne.n	800e0ea <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d151      	bne.n	800e180 <sys_timeout_abs+0xc4>
 800e0dc:	4b2a      	ldr	r3, [pc, #168]	; (800e188 <sys_timeout_abs+0xcc>)
 800e0de:	22be      	movs	r2, #190	; 0xbe
 800e0e0:	492a      	ldr	r1, [pc, #168]	; (800e18c <sys_timeout_abs+0xd0>)
 800e0e2:	482b      	ldr	r0, [pc, #172]	; (800e190 <sys_timeout_abs+0xd4>)
 800e0e4:	f003 f8c4 	bl	8011270 <iprintf>
    return;
 800e0e8:	e04a      	b.n	800e180 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	68ba      	ldr	r2, [r7, #8]
 800e0f4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	68fa      	ldr	r2, [r7, #12]
 800e100:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e102:	4b24      	ldr	r3, [pc, #144]	; (800e194 <sys_timeout_abs+0xd8>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d103      	bne.n	800e112 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e10a:	4a22      	ldr	r2, [pc, #136]	; (800e194 <sys_timeout_abs+0xd8>)
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	6013      	str	r3, [r2, #0]
    return;
 800e110:	e037      	b.n	800e182 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	685a      	ldr	r2, [r3, #4]
 800e116:	4b1f      	ldr	r3, [pc, #124]	; (800e194 <sys_timeout_abs+0xd8>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	0fdb      	lsrs	r3, r3, #31
 800e120:	f003 0301 	and.w	r3, r3, #1
 800e124:	b2db      	uxtb	r3, r3
 800e126:	2b00      	cmp	r3, #0
 800e128:	d007      	beq.n	800e13a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e12a:	4b1a      	ldr	r3, [pc, #104]	; (800e194 <sys_timeout_abs+0xd8>)
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e132:	4a18      	ldr	r2, [pc, #96]	; (800e194 <sys_timeout_abs+0xd8>)
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	6013      	str	r3, [r2, #0]
 800e138:	e023      	b.n	800e182 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e13a:	4b16      	ldr	r3, [pc, #88]	; (800e194 <sys_timeout_abs+0xd8>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	617b      	str	r3, [r7, #20]
 800e140:	e01a      	b.n	800e178 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00b      	beq.n	800e162 <sys_timeout_abs+0xa6>
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	685a      	ldr	r2, [r3, #4]
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	1ad3      	subs	r3, r2, r3
 800e156:	0fdb      	lsrs	r3, r3, #31
 800e158:	f003 0301 	and.w	r3, r3, #1
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d007      	beq.n	800e172 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	693a      	ldr	r2, [r7, #16]
 800e16e:	601a      	str	r2, [r3, #0]
        break;
 800e170:	e007      	b.n	800e182 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	617b      	str	r3, [r7, #20]
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d1e1      	bne.n	800e142 <sys_timeout_abs+0x86>
 800e17e:	e000      	b.n	800e182 <sys_timeout_abs+0xc6>
    return;
 800e180:	bf00      	nop
      }
    }
  }
}
 800e182:	3718      	adds	r7, #24
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	08014080 	.word	0x08014080
 800e18c:	080140b4 	.word	0x080140b4
 800e190:	080140f4 	.word	0x080140f4
 800e194:	2000415c 	.word	0x2000415c

0800e198 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b086      	sub	sp, #24
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	4798      	blx	r3

  now = sys_now();
 800e1aa:	f7f5 fe2d 	bl	8003e08 <sys_now>
 800e1ae:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	4b0f      	ldr	r3, [pc, #60]	; (800e1f4 <lwip_cyclic_timer+0x5c>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4413      	add	r3, r2
 800e1ba:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	0fdb      	lsrs	r3, r3, #31
 800e1c4:	f003 0301 	and.w	r3, r3, #1
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d009      	beq.n	800e1e2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	681a      	ldr	r2, [r3, #0]
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	4907      	ldr	r1, [pc, #28]	; (800e1f8 <lwip_cyclic_timer+0x60>)
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7ff ff6e 	bl	800e0bc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e1e0:	e004      	b.n	800e1ec <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	4904      	ldr	r1, [pc, #16]	; (800e1f8 <lwip_cyclic_timer+0x60>)
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	f7ff ff68 	bl	800e0bc <sys_timeout_abs>
}
 800e1ec:	bf00      	nop
 800e1ee:	3718      	adds	r7, #24
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	20004160 	.word	0x20004160
 800e1f8:	0800e199 	.word	0x0800e199

0800e1fc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e202:	2301      	movs	r3, #1
 800e204:	607b      	str	r3, [r7, #4]
 800e206:	e00e      	b.n	800e226 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e208:	4a0b      	ldr	r2, [pc, #44]	; (800e238 <sys_timeouts_init+0x3c>)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	00db      	lsls	r3, r3, #3
 800e214:	4a08      	ldr	r2, [pc, #32]	; (800e238 <sys_timeouts_init+0x3c>)
 800e216:	4413      	add	r3, r2
 800e218:	461a      	mov	r2, r3
 800e21a:	4908      	ldr	r1, [pc, #32]	; (800e23c <sys_timeouts_init+0x40>)
 800e21c:	f000 f810 	bl	800e240 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	3301      	adds	r3, #1
 800e224:	607b      	str	r3, [r7, #4]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2b02      	cmp	r3, #2
 800e22a:	d9ed      	bls.n	800e208 <sys_timeouts_init+0xc>
  }
}
 800e22c:	bf00      	nop
 800e22e:	bf00      	nop
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	08014ca0 	.word	0x08014ca0
 800e23c:	0800e199 	.word	0x0800e199

0800e240 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b086      	sub	sp, #24
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e252:	d306      	bcc.n	800e262 <sys_timeout+0x22>
 800e254:	4b0a      	ldr	r3, [pc, #40]	; (800e280 <sys_timeout+0x40>)
 800e256:	f240 1229 	movw	r2, #297	; 0x129
 800e25a:	490a      	ldr	r1, [pc, #40]	; (800e284 <sys_timeout+0x44>)
 800e25c:	480a      	ldr	r0, [pc, #40]	; (800e288 <sys_timeout+0x48>)
 800e25e:	f003 f807 	bl	8011270 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e262:	f7f5 fdd1 	bl	8003e08 <sys_now>
 800e266:	4602      	mov	r2, r0
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	4413      	add	r3, r2
 800e26c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	68b9      	ldr	r1, [r7, #8]
 800e272:	6978      	ldr	r0, [r7, #20]
 800e274:	f7ff ff22 	bl	800e0bc <sys_timeout_abs>
#endif
}
 800e278:	bf00      	nop
 800e27a:	3718      	adds	r7, #24
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	08014080 	.word	0x08014080
 800e284:	0801411c 	.word	0x0801411c
 800e288:	080140f4 	.word	0x080140f4

0800e28c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e292:	f7f5 fdb9 	bl	8003e08 <sys_now>
 800e296:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800e298:	4b17      	ldr	r3, [pc, #92]	; (800e2f8 <sys_check_timeouts+0x6c>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d022      	beq.n	800e2ea <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	68fa      	ldr	r2, [r7, #12]
 800e2aa:	1ad3      	subs	r3, r2, r3
 800e2ac:	0fdb      	lsrs	r3, r3, #31
 800e2ae:	f003 0301 	and.w	r3, r3, #1
 800e2b2:	b2db      	uxtb	r3, r3
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d11a      	bne.n	800e2ee <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a0e      	ldr	r2, [pc, #56]	; (800e2f8 <sys_check_timeouts+0x6c>)
 800e2be:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	4a0a      	ldr	r2, [pc, #40]	; (800e2fc <sys_check_timeouts+0x70>)
 800e2d2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e2d4:	68b9      	ldr	r1, [r7, #8]
 800e2d6:	200a      	movs	r0, #10
 800e2d8:	f7f9 fc3a 	bl	8007b50 <memp_free>
    if (handler != NULL) {
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d0da      	beq.n	800e298 <sys_check_timeouts+0xc>
      handler(arg);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6838      	ldr	r0, [r7, #0]
 800e2e6:	4798      	blx	r3
  do {
 800e2e8:	e7d6      	b.n	800e298 <sys_check_timeouts+0xc>
      return;
 800e2ea:	bf00      	nop
 800e2ec:	e000      	b.n	800e2f0 <sys_check_timeouts+0x64>
      return;
 800e2ee:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	2000415c 	.word	0x2000415c
 800e2fc:	20004160 	.word	0x20004160

0800e300 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800e306:	4b16      	ldr	r3, [pc, #88]	; (800e360 <sys_timeouts_sleeptime+0x60>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d102      	bne.n	800e314 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800e30e:	f04f 33ff 	mov.w	r3, #4294967295
 800e312:	e020      	b.n	800e356 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800e314:	f7f5 fd78 	bl	8003e08 <sys_now>
 800e318:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800e31a:	4b11      	ldr	r3, [pc, #68]	; (800e360 <sys_timeouts_sleeptime+0x60>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	685a      	ldr	r2, [r3, #4]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	0fdb      	lsrs	r3, r3, #31
 800e326:	f003 0301 	and.w	r3, r3, #1
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d001      	beq.n	800e334 <sys_timeouts_sleeptime+0x34>
    return 0;
 800e330:	2300      	movs	r3, #0
 800e332:	e010      	b.n	800e356 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800e334:	4b0a      	ldr	r3, [pc, #40]	; (800e360 <sys_timeouts_sleeptime+0x60>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	685a      	ldr	r2, [r3, #4]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	1ad3      	subs	r3, r2, r3
 800e33e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	da06      	bge.n	800e354 <sys_timeouts_sleeptime+0x54>
 800e346:	4b07      	ldr	r3, [pc, #28]	; (800e364 <sys_timeouts_sleeptime+0x64>)
 800e348:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800e34c:	4906      	ldr	r1, [pc, #24]	; (800e368 <sys_timeouts_sleeptime+0x68>)
 800e34e:	4807      	ldr	r0, [pc, #28]	; (800e36c <sys_timeouts_sleeptime+0x6c>)
 800e350:	f002 ff8e 	bl	8011270 <iprintf>
    return ret;
 800e354:	683b      	ldr	r3, [r7, #0]
  }
}
 800e356:	4618      	mov	r0, r3
 800e358:	3708      	adds	r7, #8
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	2000415c 	.word	0x2000415c
 800e364:	08014080 	.word	0x08014080
 800e368:	08014154 	.word	0x08014154
 800e36c:	080140f4 	.word	0x080140f4

0800e370 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e374:	f002 ff94 	bl	80112a0 <rand>
 800e378:	4603      	mov	r3, r0
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e380:	b29b      	uxth	r3, r3
 800e382:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e386:	b29a      	uxth	r2, r3
 800e388:	4b01      	ldr	r3, [pc, #4]	; (800e390 <udp_init+0x20>)
 800e38a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e38c:	bf00      	nop
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	20000018 	.word	0x20000018

0800e394 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	4613      	mov	r3, r2
 800e3a0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d105      	bne.n	800e3b4 <udp_input_local_match+0x20>
 800e3a8:	4b27      	ldr	r3, [pc, #156]	; (800e448 <udp_input_local_match+0xb4>)
 800e3aa:	2287      	movs	r2, #135	; 0x87
 800e3ac:	4927      	ldr	r1, [pc, #156]	; (800e44c <udp_input_local_match+0xb8>)
 800e3ae:	4828      	ldr	r0, [pc, #160]	; (800e450 <udp_input_local_match+0xbc>)
 800e3b0:	f002 ff5e 	bl	8011270 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d105      	bne.n	800e3c6 <udp_input_local_match+0x32>
 800e3ba:	4b23      	ldr	r3, [pc, #140]	; (800e448 <udp_input_local_match+0xb4>)
 800e3bc:	2288      	movs	r2, #136	; 0x88
 800e3be:	4925      	ldr	r1, [pc, #148]	; (800e454 <udp_input_local_match+0xc0>)
 800e3c0:	4823      	ldr	r0, [pc, #140]	; (800e450 <udp_input_local_match+0xbc>)
 800e3c2:	f002 ff55 	bl	8011270 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	7a1b      	ldrb	r3, [r3, #8]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00b      	beq.n	800e3e6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	7a1a      	ldrb	r2, [r3, #8]
 800e3d2:	4b21      	ldr	r3, [pc, #132]	; (800e458 <udp_input_local_match+0xc4>)
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e3da:	3301      	adds	r3, #1
 800e3dc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d001      	beq.n	800e3e6 <udp_input_local_match+0x52>
    return 0;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	e02b      	b.n	800e43e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e3e6:	79fb      	ldrb	r3, [r7, #7]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d018      	beq.n	800e41e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d013      	beq.n	800e41a <udp_input_local_match+0x86>
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d00f      	beq.n	800e41a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e3fa:	4b17      	ldr	r3, [pc, #92]	; (800e458 <udp_input_local_match+0xc4>)
 800e3fc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e402:	d00a      	beq.n	800e41a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	4b13      	ldr	r3, [pc, #76]	; (800e458 <udp_input_local_match+0xc4>)
 800e40a:	695b      	ldr	r3, [r3, #20]
 800e40c:	405a      	eors	r2, r3
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	3308      	adds	r3, #8
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e416:	2b00      	cmp	r3, #0
 800e418:	d110      	bne.n	800e43c <udp_input_local_match+0xa8>
          return 1;
 800e41a:	2301      	movs	r3, #1
 800e41c:	e00f      	b.n	800e43e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d009      	beq.n	800e438 <udp_input_local_match+0xa4>
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d005      	beq.n	800e438 <udp_input_local_match+0xa4>
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	4b09      	ldr	r3, [pc, #36]	; (800e458 <udp_input_local_match+0xc4>)
 800e432:	695b      	ldr	r3, [r3, #20]
 800e434:	429a      	cmp	r2, r3
 800e436:	d101      	bne.n	800e43c <udp_input_local_match+0xa8>
        return 1;
 800e438:	2301      	movs	r3, #1
 800e43a:	e000      	b.n	800e43e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	08014168 	.word	0x08014168
 800e44c:	08014198 	.word	0x08014198
 800e450:	080141bc 	.word	0x080141bc
 800e454:	080141e4 	.word	0x080141e4
 800e458:	200073fc 	.word	0x200073fc

0800e45c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e45c:	b590      	push	{r4, r7, lr}
 800e45e:	b08d      	sub	sp, #52	; 0x34
 800e460:	af02      	add	r7, sp, #8
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e466:	2300      	movs	r3, #0
 800e468:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d105      	bne.n	800e47c <udp_input+0x20>
 800e470:	4b7c      	ldr	r3, [pc, #496]	; (800e664 <udp_input+0x208>)
 800e472:	22cf      	movs	r2, #207	; 0xcf
 800e474:	497c      	ldr	r1, [pc, #496]	; (800e668 <udp_input+0x20c>)
 800e476:	487d      	ldr	r0, [pc, #500]	; (800e66c <udp_input+0x210>)
 800e478:	f002 fefa 	bl	8011270 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d105      	bne.n	800e48e <udp_input+0x32>
 800e482:	4b78      	ldr	r3, [pc, #480]	; (800e664 <udp_input+0x208>)
 800e484:	22d0      	movs	r2, #208	; 0xd0
 800e486:	497a      	ldr	r1, [pc, #488]	; (800e670 <udp_input+0x214>)
 800e488:	4878      	ldr	r0, [pc, #480]	; (800e66c <udp_input+0x210>)
 800e48a:	f002 fef1 	bl	8011270 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	895b      	ldrh	r3, [r3, #10]
 800e492:	2b07      	cmp	r3, #7
 800e494:	d803      	bhi.n	800e49e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f7fa f9fe 	bl	8008898 <pbuf_free>
    goto end;
 800e49c:	e0de      	b.n	800e65c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e4a4:	4b73      	ldr	r3, [pc, #460]	; (800e674 <udp_input+0x218>)
 800e4a6:	695b      	ldr	r3, [r3, #20]
 800e4a8:	4a72      	ldr	r2, [pc, #456]	; (800e674 <udp_input+0x218>)
 800e4aa:	6812      	ldr	r2, [r2, #0]
 800e4ac:	4611      	mov	r1, r2
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f001 fc88 	bl	800fdc4 <ip4_addr_isbroadcast_u32>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	881b      	ldrh	r3, [r3, #0]
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7f8 fe3e 	bl	8007140 <lwip_htons>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	885b      	ldrh	r3, [r3, #2]
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7f8 fe36 	bl	8007140 <lwip_htons>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4e4:	4b64      	ldr	r3, [pc, #400]	; (800e678 <udp_input+0x21c>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e4ea:	e054      	b.n	800e596 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	8a5b      	ldrh	r3, [r3, #18]
 800e4f0:	89fa      	ldrh	r2, [r7, #14]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d14a      	bne.n	800e58c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e4f6:	7cfb      	ldrb	r3, [r7, #19]
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	6839      	ldr	r1, [r7, #0]
 800e4fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4fe:	f7ff ff49 	bl	800e394 <udp_input_local_match>
 800e502:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e504:	2b00      	cmp	r3, #0
 800e506:	d041      	beq.n	800e58c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50a:	7c1b      	ldrb	r3, [r3, #16]
 800e50c:	f003 0304 	and.w	r3, r3, #4
 800e510:	2b00      	cmp	r3, #0
 800e512:	d11d      	bne.n	800e550 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e514:	69fb      	ldr	r3, [r7, #28]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d102      	bne.n	800e520 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	61fb      	str	r3, [r7, #28]
 800e51e:	e017      	b.n	800e550 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e520:	7cfb      	ldrb	r3, [r7, #19]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d014      	beq.n	800e550 <udp_input+0xf4>
 800e526:	4b53      	ldr	r3, [pc, #332]	; (800e674 <udp_input+0x218>)
 800e528:	695b      	ldr	r3, [r3, #20]
 800e52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e52e:	d10f      	bne.n	800e550 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e530:	69fb      	ldr	r3, [r7, #28]
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	3304      	adds	r3, #4
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d008      	beq.n	800e550 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	3304      	adds	r3, #4
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d101      	bne.n	800e550 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e552:	8a9b      	ldrh	r3, [r3, #20]
 800e554:	8a3a      	ldrh	r2, [r7, #16]
 800e556:	429a      	cmp	r2, r3
 800e558:	d118      	bne.n	800e58c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d005      	beq.n	800e56e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e564:	685a      	ldr	r2, [r3, #4]
 800e566:	4b43      	ldr	r3, [pc, #268]	; (800e674 <udp_input+0x218>)
 800e568:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d10e      	bne.n	800e58c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e56e:	6a3b      	ldr	r3, [r7, #32]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d014      	beq.n	800e59e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e576:	68da      	ldr	r2, [r3, #12]
 800e578:	6a3b      	ldr	r3, [r7, #32]
 800e57a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e57c:	4b3e      	ldr	r3, [pc, #248]	; (800e678 <udp_input+0x21c>)
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e582:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e584:	4a3c      	ldr	r2, [pc, #240]	; (800e678 <udp_input+0x21c>)
 800e586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e588:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e58a:	e008      	b.n	800e59e <udp_input+0x142>
      }
    }

    prev = pcb;
 800e58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	627b      	str	r3, [r7, #36]	; 0x24
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d1a7      	bne.n	800e4ec <udp_input+0x90>
 800e59c:	e000      	b.n	800e5a0 <udp_input+0x144>
        break;
 800e59e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d101      	bne.n	800e5aa <udp_input+0x14e>
    pcb = uncon_pcb;
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d002      	beq.n	800e5b6 <udp_input+0x15a>
    for_us = 1;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	76fb      	strb	r3, [r7, #27]
 800e5b4:	e00a      	b.n	800e5cc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	3304      	adds	r3, #4
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	4b2d      	ldr	r3, [pc, #180]	; (800e674 <udp_input+0x218>)
 800e5be:	695b      	ldr	r3, [r3, #20]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	bf0c      	ite	eq
 800e5c4:	2301      	moveq	r3, #1
 800e5c6:	2300      	movne	r3, #0
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e5cc:	7efb      	ldrb	r3, [r7, #27]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d041      	beq.n	800e656 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e5d2:	2108      	movs	r1, #8
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7fa f8d9 	bl	800878c <pbuf_remove_header>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d00a      	beq.n	800e5f6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e5e0:	4b20      	ldr	r3, [pc, #128]	; (800e664 <udp_input+0x208>)
 800e5e2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e5e6:	4925      	ldr	r1, [pc, #148]	; (800e67c <udp_input+0x220>)
 800e5e8:	4820      	ldr	r0, [pc, #128]	; (800e66c <udp_input+0x210>)
 800e5ea:	f002 fe41 	bl	8011270 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7fa f952 	bl	8008898 <pbuf_free>
      goto end;
 800e5f4:	e032      	b.n	800e65c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d012      	beq.n	800e622 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fe:	699b      	ldr	r3, [r3, #24]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d00a      	beq.n	800e61a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e606:	699c      	ldr	r4, [r3, #24]
 800e608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60a:	69d8      	ldr	r0, [r3, #28]
 800e60c:	8a3b      	ldrh	r3, [r7, #16]
 800e60e:	9300      	str	r3, [sp, #0]
 800e610:	4b1b      	ldr	r3, [pc, #108]	; (800e680 <udp_input+0x224>)
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e616:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e618:	e021      	b.n	800e65e <udp_input+0x202>
        pbuf_free(p);
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f7fa f93c 	bl	8008898 <pbuf_free>
        goto end;
 800e620:	e01c      	b.n	800e65c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e622:	7cfb      	ldrb	r3, [r7, #19]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d112      	bne.n	800e64e <udp_input+0x1f2>
 800e628:	4b12      	ldr	r3, [pc, #72]	; (800e674 <udp_input+0x218>)
 800e62a:	695b      	ldr	r3, [r3, #20]
 800e62c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e630:	2be0      	cmp	r3, #224	; 0xe0
 800e632:	d00c      	beq.n	800e64e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e634:	4b0f      	ldr	r3, [pc, #60]	; (800e674 <udp_input+0x218>)
 800e636:	899b      	ldrh	r3, [r3, #12]
 800e638:	3308      	adds	r3, #8
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	b21b      	sxth	r3, r3
 800e63e:	4619      	mov	r1, r3
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f7fa f916 	bl	8008872 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e646:	2103      	movs	r1, #3
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f001 f89b 	bl	800f784 <icmp_dest_unreach>
      pbuf_free(p);
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f7fa f922 	bl	8008898 <pbuf_free>
  return;
 800e654:	e003      	b.n	800e65e <udp_input+0x202>
    pbuf_free(p);
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7fa f91e 	bl	8008898 <pbuf_free>
  return;
 800e65c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e65e:	372c      	adds	r7, #44	; 0x2c
 800e660:	46bd      	mov	sp, r7
 800e662:	bd90      	pop	{r4, r7, pc}
 800e664:	08014168 	.word	0x08014168
 800e668:	0801420c 	.word	0x0801420c
 800e66c:	080141bc 	.word	0x080141bc
 800e670:	08014224 	.word	0x08014224
 800e674:	200073fc 	.word	0x200073fc
 800e678:	2000ab28 	.word	0x2000ab28
 800e67c:	08014240 	.word	0x08014240
 800e680:	2000740c 	.word	0x2000740c

0800e684 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e684:	b480      	push	{r7}
 800e686:	b085      	sub	sp, #20
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d01e      	beq.n	800e6d2 <udp_netif_ip_addr_changed+0x4e>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d01a      	beq.n	800e6d2 <udp_netif_ip_addr_changed+0x4e>
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d017      	beq.n	800e6d2 <udp_netif_ip_addr_changed+0x4e>
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d013      	beq.n	800e6d2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e6aa:	4b0d      	ldr	r3, [pc, #52]	; (800e6e0 <udp_netif_ip_addr_changed+0x5c>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	60fb      	str	r3, [r7, #12]
 800e6b0:	e00c      	b.n	800e6cc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d103      	bne.n	800e6c6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	60fb      	str	r3, [r7, #12]
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1ef      	bne.n	800e6b2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e6d2:	bf00      	nop
 800e6d4:	3714      	adds	r7, #20
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6dc:	4770      	bx	lr
 800e6de:	bf00      	nop
 800e6e0:	2000ab28 	.word	0x2000ab28

0800e6e4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e6ec:	4915      	ldr	r1, [pc, #84]	; (800e744 <etharp_free_entry+0x60>)
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	005b      	lsls	r3, r3, #1
 800e6f4:	4413      	add	r3, r2
 800e6f6:	00db      	lsls	r3, r3, #3
 800e6f8:	440b      	add	r3, r1
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d013      	beq.n	800e728 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e700:	4910      	ldr	r1, [pc, #64]	; (800e744 <etharp_free_entry+0x60>)
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	4613      	mov	r3, r2
 800e706:	005b      	lsls	r3, r3, #1
 800e708:	4413      	add	r3, r2
 800e70a:	00db      	lsls	r3, r3, #3
 800e70c:	440b      	add	r3, r1
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4618      	mov	r0, r3
 800e712:	f7fa f8c1 	bl	8008898 <pbuf_free>
    arp_table[i].q = NULL;
 800e716:	490b      	ldr	r1, [pc, #44]	; (800e744 <etharp_free_entry+0x60>)
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	4613      	mov	r3, r2
 800e71c:	005b      	lsls	r3, r3, #1
 800e71e:	4413      	add	r3, r2
 800e720:	00db      	lsls	r3, r3, #3
 800e722:	440b      	add	r3, r1
 800e724:	2200      	movs	r2, #0
 800e726:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e728:	4906      	ldr	r1, [pc, #24]	; (800e744 <etharp_free_entry+0x60>)
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	4613      	mov	r3, r2
 800e72e:	005b      	lsls	r3, r3, #1
 800e730:	4413      	add	r3, r2
 800e732:	00db      	lsls	r3, r3, #3
 800e734:	440b      	add	r3, r1
 800e736:	3314      	adds	r3, #20
 800e738:	2200      	movs	r2, #0
 800e73a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e73c:	bf00      	nop
 800e73e:	3708      	adds	r7, #8
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	20004168 	.word	0x20004168

0800e748 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e74e:	2300      	movs	r3, #0
 800e750:	607b      	str	r3, [r7, #4]
 800e752:	e096      	b.n	800e882 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e754:	494f      	ldr	r1, [pc, #316]	; (800e894 <etharp_tmr+0x14c>)
 800e756:	687a      	ldr	r2, [r7, #4]
 800e758:	4613      	mov	r3, r2
 800e75a:	005b      	lsls	r3, r3, #1
 800e75c:	4413      	add	r3, r2
 800e75e:	00db      	lsls	r3, r3, #3
 800e760:	440b      	add	r3, r1
 800e762:	3314      	adds	r3, #20
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e768:	78fb      	ldrb	r3, [r7, #3]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	f000 8086 	beq.w	800e87c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e770:	4948      	ldr	r1, [pc, #288]	; (800e894 <etharp_tmr+0x14c>)
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	4613      	mov	r3, r2
 800e776:	005b      	lsls	r3, r3, #1
 800e778:	4413      	add	r3, r2
 800e77a:	00db      	lsls	r3, r3, #3
 800e77c:	440b      	add	r3, r1
 800e77e:	3312      	adds	r3, #18
 800e780:	881b      	ldrh	r3, [r3, #0]
 800e782:	3301      	adds	r3, #1
 800e784:	b298      	uxth	r0, r3
 800e786:	4943      	ldr	r1, [pc, #268]	; (800e894 <etharp_tmr+0x14c>)
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	4613      	mov	r3, r2
 800e78c:	005b      	lsls	r3, r3, #1
 800e78e:	4413      	add	r3, r2
 800e790:	00db      	lsls	r3, r3, #3
 800e792:	440b      	add	r3, r1
 800e794:	3312      	adds	r3, #18
 800e796:	4602      	mov	r2, r0
 800e798:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e79a:	493e      	ldr	r1, [pc, #248]	; (800e894 <etharp_tmr+0x14c>)
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	4613      	mov	r3, r2
 800e7a0:	005b      	lsls	r3, r3, #1
 800e7a2:	4413      	add	r3, r2
 800e7a4:	00db      	lsls	r3, r3, #3
 800e7a6:	440b      	add	r3, r1
 800e7a8:	3312      	adds	r3, #18
 800e7aa:	881b      	ldrh	r3, [r3, #0]
 800e7ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e7b0:	d215      	bcs.n	800e7de <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e7b2:	4938      	ldr	r1, [pc, #224]	; (800e894 <etharp_tmr+0x14c>)
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	4613      	mov	r3, r2
 800e7b8:	005b      	lsls	r3, r3, #1
 800e7ba:	4413      	add	r3, r2
 800e7bc:	00db      	lsls	r3, r3, #3
 800e7be:	440b      	add	r3, r1
 800e7c0:	3314      	adds	r3, #20
 800e7c2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d10e      	bne.n	800e7e6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e7c8:	4932      	ldr	r1, [pc, #200]	; (800e894 <etharp_tmr+0x14c>)
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	4613      	mov	r3, r2
 800e7ce:	005b      	lsls	r3, r3, #1
 800e7d0:	4413      	add	r3, r2
 800e7d2:	00db      	lsls	r3, r3, #3
 800e7d4:	440b      	add	r3, r1
 800e7d6:	3312      	adds	r3, #18
 800e7d8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e7da:	2b04      	cmp	r3, #4
 800e7dc:	d903      	bls.n	800e7e6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f7ff ff80 	bl	800e6e4 <etharp_free_entry>
 800e7e4:	e04a      	b.n	800e87c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e7e6:	492b      	ldr	r1, [pc, #172]	; (800e894 <etharp_tmr+0x14c>)
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	4613      	mov	r3, r2
 800e7ec:	005b      	lsls	r3, r3, #1
 800e7ee:	4413      	add	r3, r2
 800e7f0:	00db      	lsls	r3, r3, #3
 800e7f2:	440b      	add	r3, r1
 800e7f4:	3314      	adds	r3, #20
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	2b03      	cmp	r3, #3
 800e7fa:	d10a      	bne.n	800e812 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e7fc:	4925      	ldr	r1, [pc, #148]	; (800e894 <etharp_tmr+0x14c>)
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	4613      	mov	r3, r2
 800e802:	005b      	lsls	r3, r3, #1
 800e804:	4413      	add	r3, r2
 800e806:	00db      	lsls	r3, r3, #3
 800e808:	440b      	add	r3, r1
 800e80a:	3314      	adds	r3, #20
 800e80c:	2204      	movs	r2, #4
 800e80e:	701a      	strb	r2, [r3, #0]
 800e810:	e034      	b.n	800e87c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e812:	4920      	ldr	r1, [pc, #128]	; (800e894 <etharp_tmr+0x14c>)
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	4613      	mov	r3, r2
 800e818:	005b      	lsls	r3, r3, #1
 800e81a:	4413      	add	r3, r2
 800e81c:	00db      	lsls	r3, r3, #3
 800e81e:	440b      	add	r3, r1
 800e820:	3314      	adds	r3, #20
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	2b04      	cmp	r3, #4
 800e826:	d10a      	bne.n	800e83e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e828:	491a      	ldr	r1, [pc, #104]	; (800e894 <etharp_tmr+0x14c>)
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	4613      	mov	r3, r2
 800e82e:	005b      	lsls	r3, r3, #1
 800e830:	4413      	add	r3, r2
 800e832:	00db      	lsls	r3, r3, #3
 800e834:	440b      	add	r3, r1
 800e836:	3314      	adds	r3, #20
 800e838:	2202      	movs	r2, #2
 800e83a:	701a      	strb	r2, [r3, #0]
 800e83c:	e01e      	b.n	800e87c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e83e:	4915      	ldr	r1, [pc, #84]	; (800e894 <etharp_tmr+0x14c>)
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	4613      	mov	r3, r2
 800e844:	005b      	lsls	r3, r3, #1
 800e846:	4413      	add	r3, r2
 800e848:	00db      	lsls	r3, r3, #3
 800e84a:	440b      	add	r3, r1
 800e84c:	3314      	adds	r3, #20
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	2b01      	cmp	r3, #1
 800e852:	d113      	bne.n	800e87c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e854:	490f      	ldr	r1, [pc, #60]	; (800e894 <etharp_tmr+0x14c>)
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	4613      	mov	r3, r2
 800e85a:	005b      	lsls	r3, r3, #1
 800e85c:	4413      	add	r3, r2
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	440b      	add	r3, r1
 800e862:	3308      	adds	r3, #8
 800e864:	6818      	ldr	r0, [r3, #0]
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	4613      	mov	r3, r2
 800e86a:	005b      	lsls	r3, r3, #1
 800e86c:	4413      	add	r3, r2
 800e86e:	00db      	lsls	r3, r3, #3
 800e870:	4a08      	ldr	r2, [pc, #32]	; (800e894 <etharp_tmr+0x14c>)
 800e872:	4413      	add	r3, r2
 800e874:	3304      	adds	r3, #4
 800e876:	4619      	mov	r1, r3
 800e878:	f000 fe6e 	bl	800f558 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	3301      	adds	r3, #1
 800e880:	607b      	str	r3, [r7, #4]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2b09      	cmp	r3, #9
 800e886:	f77f af65 	ble.w	800e754 <etharp_tmr+0xc>
      }
    }
  }
}
 800e88a:	bf00      	nop
 800e88c:	bf00      	nop
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	20004168 	.word	0x20004168

0800e898 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b08a      	sub	sp, #40	; 0x28
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	607a      	str	r2, [r7, #4]
 800e8a4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e8a6:	230a      	movs	r3, #10
 800e8a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e8aa:	230a      	movs	r3, #10
 800e8ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e8ae:	230a      	movs	r3, #10
 800e8b0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e8b6:	230a      	movs	r3, #10
 800e8b8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	83bb      	strh	r3, [r7, #28]
 800e8be:	2300      	movs	r3, #0
 800e8c0:	837b      	strh	r3, [r7, #26]
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	843b      	strh	r3, [r7, #32]
 800e8ca:	e0ae      	b.n	800ea2a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e8cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8d0:	49a6      	ldr	r1, [pc, #664]	; (800eb6c <etharp_find_entry+0x2d4>)
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	005b      	lsls	r3, r3, #1
 800e8d6:	4413      	add	r3, r2
 800e8d8:	00db      	lsls	r3, r3, #3
 800e8da:	440b      	add	r3, r1
 800e8dc:	3314      	adds	r3, #20
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e8e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e8e6:	2b0a      	cmp	r3, #10
 800e8e8:	d105      	bne.n	800e8f6 <etharp_find_entry+0x5e>
 800e8ea:	7dfb      	ldrb	r3, [r7, #23]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d102      	bne.n	800e8f6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e8f0:	8c3b      	ldrh	r3, [r7, #32]
 800e8f2:	847b      	strh	r3, [r7, #34]	; 0x22
 800e8f4:	e095      	b.n	800ea22 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e8f6:	7dfb      	ldrb	r3, [r7, #23]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f000 8092 	beq.w	800ea22 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e8fe:	7dfb      	ldrb	r3, [r7, #23]
 800e900:	2b01      	cmp	r3, #1
 800e902:	d009      	beq.n	800e918 <etharp_find_entry+0x80>
 800e904:	7dfb      	ldrb	r3, [r7, #23]
 800e906:	2b01      	cmp	r3, #1
 800e908:	d806      	bhi.n	800e918 <etharp_find_entry+0x80>
 800e90a:	4b99      	ldr	r3, [pc, #612]	; (800eb70 <etharp_find_entry+0x2d8>)
 800e90c:	f240 1223 	movw	r2, #291	; 0x123
 800e910:	4998      	ldr	r1, [pc, #608]	; (800eb74 <etharp_find_entry+0x2dc>)
 800e912:	4899      	ldr	r0, [pc, #612]	; (800eb78 <etharp_find_entry+0x2e0>)
 800e914:	f002 fcac 	bl	8011270 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d020      	beq.n	800e960 <etharp_find_entry+0xc8>
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	6819      	ldr	r1, [r3, #0]
 800e922:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e926:	4891      	ldr	r0, [pc, #580]	; (800eb6c <etharp_find_entry+0x2d4>)
 800e928:	4613      	mov	r3, r2
 800e92a:	005b      	lsls	r3, r3, #1
 800e92c:	4413      	add	r3, r2
 800e92e:	00db      	lsls	r3, r3, #3
 800e930:	4403      	add	r3, r0
 800e932:	3304      	adds	r3, #4
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4299      	cmp	r1, r3
 800e938:	d112      	bne.n	800e960 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00c      	beq.n	800e95a <etharp_find_entry+0xc2>
 800e940:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e944:	4989      	ldr	r1, [pc, #548]	; (800eb6c <etharp_find_entry+0x2d4>)
 800e946:	4613      	mov	r3, r2
 800e948:	005b      	lsls	r3, r3, #1
 800e94a:	4413      	add	r3, r2
 800e94c:	00db      	lsls	r3, r3, #3
 800e94e:	440b      	add	r3, r1
 800e950:	3308      	adds	r3, #8
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	429a      	cmp	r2, r3
 800e958:	d102      	bne.n	800e960 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e95a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e95e:	e100      	b.n	800eb62 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e960:	7dfb      	ldrb	r3, [r7, #23]
 800e962:	2b01      	cmp	r3, #1
 800e964:	d140      	bne.n	800e9e8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e966:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e96a:	4980      	ldr	r1, [pc, #512]	; (800eb6c <etharp_find_entry+0x2d4>)
 800e96c:	4613      	mov	r3, r2
 800e96e:	005b      	lsls	r3, r3, #1
 800e970:	4413      	add	r3, r2
 800e972:	00db      	lsls	r3, r3, #3
 800e974:	440b      	add	r3, r1
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d01a      	beq.n	800e9b2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e97c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e980:	497a      	ldr	r1, [pc, #488]	; (800eb6c <etharp_find_entry+0x2d4>)
 800e982:	4613      	mov	r3, r2
 800e984:	005b      	lsls	r3, r3, #1
 800e986:	4413      	add	r3, r2
 800e988:	00db      	lsls	r3, r3, #3
 800e98a:	440b      	add	r3, r1
 800e98c:	3312      	adds	r3, #18
 800e98e:	881b      	ldrh	r3, [r3, #0]
 800e990:	8bba      	ldrh	r2, [r7, #28]
 800e992:	429a      	cmp	r2, r3
 800e994:	d845      	bhi.n	800ea22 <etharp_find_entry+0x18a>
            old_queue = i;
 800e996:	8c3b      	ldrh	r3, [r7, #32]
 800e998:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e99a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e99e:	4973      	ldr	r1, [pc, #460]	; (800eb6c <etharp_find_entry+0x2d4>)
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	005b      	lsls	r3, r3, #1
 800e9a4:	4413      	add	r3, r2
 800e9a6:	00db      	lsls	r3, r3, #3
 800e9a8:	440b      	add	r3, r1
 800e9aa:	3312      	adds	r3, #18
 800e9ac:	881b      	ldrh	r3, [r3, #0]
 800e9ae:	83bb      	strh	r3, [r7, #28]
 800e9b0:	e037      	b.n	800ea22 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e9b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e9b6:	496d      	ldr	r1, [pc, #436]	; (800eb6c <etharp_find_entry+0x2d4>)
 800e9b8:	4613      	mov	r3, r2
 800e9ba:	005b      	lsls	r3, r3, #1
 800e9bc:	4413      	add	r3, r2
 800e9be:	00db      	lsls	r3, r3, #3
 800e9c0:	440b      	add	r3, r1
 800e9c2:	3312      	adds	r3, #18
 800e9c4:	881b      	ldrh	r3, [r3, #0]
 800e9c6:	8b7a      	ldrh	r2, [r7, #26]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d82a      	bhi.n	800ea22 <etharp_find_entry+0x18a>
            old_pending = i;
 800e9cc:	8c3b      	ldrh	r3, [r7, #32]
 800e9ce:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e9d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e9d4:	4965      	ldr	r1, [pc, #404]	; (800eb6c <etharp_find_entry+0x2d4>)
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	005b      	lsls	r3, r3, #1
 800e9da:	4413      	add	r3, r2
 800e9dc:	00db      	lsls	r3, r3, #3
 800e9de:	440b      	add	r3, r1
 800e9e0:	3312      	adds	r3, #18
 800e9e2:	881b      	ldrh	r3, [r3, #0]
 800e9e4:	837b      	strh	r3, [r7, #26]
 800e9e6:	e01c      	b.n	800ea22 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e9e8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d919      	bls.n	800ea22 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e9ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e9f2:	495e      	ldr	r1, [pc, #376]	; (800eb6c <etharp_find_entry+0x2d4>)
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	005b      	lsls	r3, r3, #1
 800e9f8:	4413      	add	r3, r2
 800e9fa:	00db      	lsls	r3, r3, #3
 800e9fc:	440b      	add	r3, r1
 800e9fe:	3312      	adds	r3, #18
 800ea00:	881b      	ldrh	r3, [r3, #0]
 800ea02:	8b3a      	ldrh	r2, [r7, #24]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d80c      	bhi.n	800ea22 <etharp_find_entry+0x18a>
            old_stable = i;
 800ea08:	8c3b      	ldrh	r3, [r7, #32]
 800ea0a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ea0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea10:	4956      	ldr	r1, [pc, #344]	; (800eb6c <etharp_find_entry+0x2d4>)
 800ea12:	4613      	mov	r3, r2
 800ea14:	005b      	lsls	r3, r3, #1
 800ea16:	4413      	add	r3, r2
 800ea18:	00db      	lsls	r3, r3, #3
 800ea1a:	440b      	add	r3, r1
 800ea1c:	3312      	adds	r3, #18
 800ea1e:	881b      	ldrh	r3, [r3, #0]
 800ea20:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ea22:	8c3b      	ldrh	r3, [r7, #32]
 800ea24:	3301      	adds	r3, #1
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	843b      	strh	r3, [r7, #32]
 800ea2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea2e:	2b09      	cmp	r3, #9
 800ea30:	f77f af4c 	ble.w	800e8cc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ea34:	7afb      	ldrb	r3, [r7, #11]
 800ea36:	f003 0302 	and.w	r3, r3, #2
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d108      	bne.n	800ea50 <etharp_find_entry+0x1b8>
 800ea3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ea42:	2b0a      	cmp	r3, #10
 800ea44:	d107      	bne.n	800ea56 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ea46:	7afb      	ldrb	r3, [r7, #11]
 800ea48:	f003 0301 	and.w	r3, r3, #1
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d102      	bne.n	800ea56 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ea50:	f04f 33ff 	mov.w	r3, #4294967295
 800ea54:	e085      	b.n	800eb62 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ea56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ea5a:	2b09      	cmp	r3, #9
 800ea5c:	dc02      	bgt.n	800ea64 <etharp_find_entry+0x1cc>
    i = empty;
 800ea5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea60:	843b      	strh	r3, [r7, #32]
 800ea62:	e039      	b.n	800ead8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ea64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ea68:	2b09      	cmp	r3, #9
 800ea6a:	dc14      	bgt.n	800ea96 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ea6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea6e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ea70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea74:	493d      	ldr	r1, [pc, #244]	; (800eb6c <etharp_find_entry+0x2d4>)
 800ea76:	4613      	mov	r3, r2
 800ea78:	005b      	lsls	r3, r3, #1
 800ea7a:	4413      	add	r3, r2
 800ea7c:	00db      	lsls	r3, r3, #3
 800ea7e:	440b      	add	r3, r1
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d018      	beq.n	800eab8 <etharp_find_entry+0x220>
 800ea86:	4b3a      	ldr	r3, [pc, #232]	; (800eb70 <etharp_find_entry+0x2d8>)
 800ea88:	f240 126d 	movw	r2, #365	; 0x16d
 800ea8c:	493b      	ldr	r1, [pc, #236]	; (800eb7c <etharp_find_entry+0x2e4>)
 800ea8e:	483a      	ldr	r0, [pc, #232]	; (800eb78 <etharp_find_entry+0x2e0>)
 800ea90:	f002 fbee 	bl	8011270 <iprintf>
 800ea94:	e010      	b.n	800eab8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ea96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ea9a:	2b09      	cmp	r3, #9
 800ea9c:	dc02      	bgt.n	800eaa4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ea9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eaa0:	843b      	strh	r3, [r7, #32]
 800eaa2:	e009      	b.n	800eab8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800eaa4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800eaa8:	2b09      	cmp	r3, #9
 800eaaa:	dc02      	bgt.n	800eab2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800eaac:	8bfb      	ldrh	r3, [r7, #30]
 800eaae:	843b      	strh	r3, [r7, #32]
 800eab0:	e002      	b.n	800eab8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800eab2:	f04f 33ff 	mov.w	r3, #4294967295
 800eab6:	e054      	b.n	800eb62 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800eab8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eabc:	2b09      	cmp	r3, #9
 800eabe:	dd06      	ble.n	800eace <etharp_find_entry+0x236>
 800eac0:	4b2b      	ldr	r3, [pc, #172]	; (800eb70 <etharp_find_entry+0x2d8>)
 800eac2:	f240 127f 	movw	r2, #383	; 0x17f
 800eac6:	492e      	ldr	r1, [pc, #184]	; (800eb80 <etharp_find_entry+0x2e8>)
 800eac8:	482b      	ldr	r0, [pc, #172]	; (800eb78 <etharp_find_entry+0x2e0>)
 800eaca:	f002 fbd1 	bl	8011270 <iprintf>
    etharp_free_entry(i);
 800eace:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7ff fe06 	bl	800e6e4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ead8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eadc:	2b09      	cmp	r3, #9
 800eade:	dd06      	ble.n	800eaee <etharp_find_entry+0x256>
 800eae0:	4b23      	ldr	r3, [pc, #140]	; (800eb70 <etharp_find_entry+0x2d8>)
 800eae2:	f240 1283 	movw	r2, #387	; 0x183
 800eae6:	4926      	ldr	r1, [pc, #152]	; (800eb80 <etharp_find_entry+0x2e8>)
 800eae8:	4823      	ldr	r0, [pc, #140]	; (800eb78 <etharp_find_entry+0x2e0>)
 800eaea:	f002 fbc1 	bl	8011270 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800eaee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eaf2:	491e      	ldr	r1, [pc, #120]	; (800eb6c <etharp_find_entry+0x2d4>)
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	005b      	lsls	r3, r3, #1
 800eaf8:	4413      	add	r3, r2
 800eafa:	00db      	lsls	r3, r3, #3
 800eafc:	440b      	add	r3, r1
 800eafe:	3314      	adds	r3, #20
 800eb00:	781b      	ldrb	r3, [r3, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d006      	beq.n	800eb14 <etharp_find_entry+0x27c>
 800eb06:	4b1a      	ldr	r3, [pc, #104]	; (800eb70 <etharp_find_entry+0x2d8>)
 800eb08:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800eb0c:	491d      	ldr	r1, [pc, #116]	; (800eb84 <etharp_find_entry+0x2ec>)
 800eb0e:	481a      	ldr	r0, [pc, #104]	; (800eb78 <etharp_find_entry+0x2e0>)
 800eb10:	f002 fbae 	bl	8011270 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00b      	beq.n	800eb32 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800eb1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6819      	ldr	r1, [r3, #0]
 800eb22:	4812      	ldr	r0, [pc, #72]	; (800eb6c <etharp_find_entry+0x2d4>)
 800eb24:	4613      	mov	r3, r2
 800eb26:	005b      	lsls	r3, r3, #1
 800eb28:	4413      	add	r3, r2
 800eb2a:	00db      	lsls	r3, r3, #3
 800eb2c:	4403      	add	r3, r0
 800eb2e:	3304      	adds	r3, #4
 800eb30:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800eb32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb36:	490d      	ldr	r1, [pc, #52]	; (800eb6c <etharp_find_entry+0x2d4>)
 800eb38:	4613      	mov	r3, r2
 800eb3a:	005b      	lsls	r3, r3, #1
 800eb3c:	4413      	add	r3, r2
 800eb3e:	00db      	lsls	r3, r3, #3
 800eb40:	440b      	add	r3, r1
 800eb42:	3312      	adds	r3, #18
 800eb44:	2200      	movs	r2, #0
 800eb46:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800eb48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb4c:	4907      	ldr	r1, [pc, #28]	; (800eb6c <etharp_find_entry+0x2d4>)
 800eb4e:	4613      	mov	r3, r2
 800eb50:	005b      	lsls	r3, r3, #1
 800eb52:	4413      	add	r3, r2
 800eb54:	00db      	lsls	r3, r3, #3
 800eb56:	440b      	add	r3, r1
 800eb58:	3308      	adds	r3, #8
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800eb5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3728      	adds	r7, #40	; 0x28
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	20004168 	.word	0x20004168
 800eb70:	080144cc 	.word	0x080144cc
 800eb74:	08014504 	.word	0x08014504
 800eb78:	08014544 	.word	0x08014544
 800eb7c:	0801456c 	.word	0x0801456c
 800eb80:	08014584 	.word	0x08014584
 800eb84:	08014598 	.word	0x08014598

0800eb88 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b088      	sub	sp, #32
 800eb8c:	af02      	add	r7, sp, #8
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eb9c:	2b06      	cmp	r3, #6
 800eb9e:	d006      	beq.n	800ebae <etharp_update_arp_entry+0x26>
 800eba0:	4b48      	ldr	r3, [pc, #288]	; (800ecc4 <etharp_update_arp_entry+0x13c>)
 800eba2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800eba6:	4948      	ldr	r1, [pc, #288]	; (800ecc8 <etharp_update_arp_entry+0x140>)
 800eba8:	4848      	ldr	r0, [pc, #288]	; (800eccc <etharp_update_arp_entry+0x144>)
 800ebaa:	f002 fb61 	bl	8011270 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d012      	beq.n	800ebda <etharp_update_arp_entry+0x52>
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d00e      	beq.n	800ebda <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	68f9      	ldr	r1, [r7, #12]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f001 f8fe 	bl	800fdc4 <ip4_addr_isbroadcast_u32>
 800ebc8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d105      	bne.n	800ebda <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ebd6:	2be0      	cmp	r3, #224	; 0xe0
 800ebd8:	d102      	bne.n	800ebe0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ebda:	f06f 030f 	mvn.w	r3, #15
 800ebde:	e06c      	b.n	800ecba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ebe0:	78fb      	ldrb	r3, [r7, #3]
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	68b8      	ldr	r0, [r7, #8]
 800ebe8:	f7ff fe56 	bl	800e898 <etharp_find_entry>
 800ebec:	4603      	mov	r3, r0
 800ebee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ebf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	da02      	bge.n	800ebfe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ebf8:	8afb      	ldrh	r3, [r7, #22]
 800ebfa:	b25b      	sxtb	r3, r3
 800ebfc:	e05d      	b.n	800ecba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ebfe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec02:	4933      	ldr	r1, [pc, #204]	; (800ecd0 <etharp_update_arp_entry+0x148>)
 800ec04:	4613      	mov	r3, r2
 800ec06:	005b      	lsls	r3, r3, #1
 800ec08:	4413      	add	r3, r2
 800ec0a:	00db      	lsls	r3, r3, #3
 800ec0c:	440b      	add	r3, r1
 800ec0e:	3314      	adds	r3, #20
 800ec10:	2202      	movs	r2, #2
 800ec12:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ec14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec18:	492d      	ldr	r1, [pc, #180]	; (800ecd0 <etharp_update_arp_entry+0x148>)
 800ec1a:	4613      	mov	r3, r2
 800ec1c:	005b      	lsls	r3, r3, #1
 800ec1e:	4413      	add	r3, r2
 800ec20:	00db      	lsls	r3, r3, #3
 800ec22:	440b      	add	r3, r1
 800ec24:	3308      	adds	r3, #8
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ec2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec2e:	4613      	mov	r3, r2
 800ec30:	005b      	lsls	r3, r3, #1
 800ec32:	4413      	add	r3, r2
 800ec34:	00db      	lsls	r3, r3, #3
 800ec36:	3308      	adds	r3, #8
 800ec38:	4a25      	ldr	r2, [pc, #148]	; (800ecd0 <etharp_update_arp_entry+0x148>)
 800ec3a:	4413      	add	r3, r2
 800ec3c:	3304      	adds	r3, #4
 800ec3e:	2206      	movs	r2, #6
 800ec40:	6879      	ldr	r1, [r7, #4]
 800ec42:	4618      	mov	r0, r3
 800ec44:	f002 fa54 	bl	80110f0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ec48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec4c:	4920      	ldr	r1, [pc, #128]	; (800ecd0 <etharp_update_arp_entry+0x148>)
 800ec4e:	4613      	mov	r3, r2
 800ec50:	005b      	lsls	r3, r3, #1
 800ec52:	4413      	add	r3, r2
 800ec54:	00db      	lsls	r3, r3, #3
 800ec56:	440b      	add	r3, r1
 800ec58:	3312      	adds	r3, #18
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ec5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec62:	491b      	ldr	r1, [pc, #108]	; (800ecd0 <etharp_update_arp_entry+0x148>)
 800ec64:	4613      	mov	r3, r2
 800ec66:	005b      	lsls	r3, r3, #1
 800ec68:	4413      	add	r3, r2
 800ec6a:	00db      	lsls	r3, r3, #3
 800ec6c:	440b      	add	r3, r1
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d021      	beq.n	800ecb8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ec74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec78:	4915      	ldr	r1, [pc, #84]	; (800ecd0 <etharp_update_arp_entry+0x148>)
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	005b      	lsls	r3, r3, #1
 800ec7e:	4413      	add	r3, r2
 800ec80:	00db      	lsls	r3, r3, #3
 800ec82:	440b      	add	r3, r1
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ec88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec8c:	4910      	ldr	r1, [pc, #64]	; (800ecd0 <etharp_update_arp_entry+0x148>)
 800ec8e:	4613      	mov	r3, r2
 800ec90:	005b      	lsls	r3, r3, #1
 800ec92:	4413      	add	r3, r2
 800ec94:	00db      	lsls	r3, r3, #3
 800ec96:	440b      	add	r3, r1
 800ec98:	2200      	movs	r2, #0
 800ec9a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800eca2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eca6:	9300      	str	r3, [sp, #0]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6939      	ldr	r1, [r7, #16]
 800ecac:	68f8      	ldr	r0, [r7, #12]
 800ecae:	f001 ff91 	bl	8010bd4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ecb2:	6938      	ldr	r0, [r7, #16]
 800ecb4:	f7f9 fdf0 	bl	8008898 <pbuf_free>
  }
  return ERR_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3718      	adds	r7, #24
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	080144cc 	.word	0x080144cc
 800ecc8:	080145c4 	.word	0x080145c4
 800eccc:	08014544 	.word	0x08014544
 800ecd0:	20004168 	.word	0x20004168

0800ecd4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ecdc:	2300      	movs	r3, #0
 800ecde:	60fb      	str	r3, [r7, #12]
 800ece0:	e01e      	b.n	800ed20 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ece2:	4913      	ldr	r1, [pc, #76]	; (800ed30 <etharp_cleanup_netif+0x5c>)
 800ece4:	68fa      	ldr	r2, [r7, #12]
 800ece6:	4613      	mov	r3, r2
 800ece8:	005b      	lsls	r3, r3, #1
 800ecea:	4413      	add	r3, r2
 800ecec:	00db      	lsls	r3, r3, #3
 800ecee:	440b      	add	r3, r1
 800ecf0:	3314      	adds	r3, #20
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ecf6:	7afb      	ldrb	r3, [r7, #11]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d00e      	beq.n	800ed1a <etharp_cleanup_netif+0x46>
 800ecfc:	490c      	ldr	r1, [pc, #48]	; (800ed30 <etharp_cleanup_netif+0x5c>)
 800ecfe:	68fa      	ldr	r2, [r7, #12]
 800ed00:	4613      	mov	r3, r2
 800ed02:	005b      	lsls	r3, r3, #1
 800ed04:	4413      	add	r3, r2
 800ed06:	00db      	lsls	r3, r3, #3
 800ed08:	440b      	add	r3, r1
 800ed0a:	3308      	adds	r3, #8
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d102      	bne.n	800ed1a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ed14:	68f8      	ldr	r0, [r7, #12]
 800ed16:	f7ff fce5 	bl	800e6e4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	60fb      	str	r3, [r7, #12]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2b09      	cmp	r3, #9
 800ed24:	dddd      	ble.n	800ece2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ed26:	bf00      	nop
 800ed28:	bf00      	nop
 800ed2a:	3710      	adds	r7, #16
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	20004168 	.word	0x20004168

0800ed34 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ed34:	b5b0      	push	{r4, r5, r7, lr}
 800ed36:	b08a      	sub	sp, #40	; 0x28
 800ed38:	af04      	add	r7, sp, #16
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d107      	bne.n	800ed54 <etharp_input+0x20>
 800ed44:	4b3d      	ldr	r3, [pc, #244]	; (800ee3c <etharp_input+0x108>)
 800ed46:	f240 228a 	movw	r2, #650	; 0x28a
 800ed4a:	493d      	ldr	r1, [pc, #244]	; (800ee40 <etharp_input+0x10c>)
 800ed4c:	483d      	ldr	r0, [pc, #244]	; (800ee44 <etharp_input+0x110>)
 800ed4e:	f002 fa8f 	bl	8011270 <iprintf>
 800ed52:	e06f      	b.n	800ee34 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	881b      	ldrh	r3, [r3, #0]
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed64:	d10c      	bne.n	800ed80 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ed6a:	2b06      	cmp	r3, #6
 800ed6c:	d108      	bne.n	800ed80 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ed72:	2b04      	cmp	r3, #4
 800ed74:	d104      	bne.n	800ed80 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	885b      	ldrh	r3, [r3, #2]
 800ed7a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ed7c:	2b08      	cmp	r3, #8
 800ed7e:	d003      	beq.n	800ed88 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f7f9 fd89 	bl	8008898 <pbuf_free>
    return;
 800ed86:	e055      	b.n	800ee34 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	330e      	adds	r3, #14
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	3318      	adds	r3, #24
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	3304      	adds	r3, #4
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d102      	bne.n	800eda8 <etharp_input+0x74>
    for_us = 0;
 800eda2:	2300      	movs	r3, #0
 800eda4:	75fb      	strb	r3, [r7, #23]
 800eda6:	e009      	b.n	800edbc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800eda8:	68ba      	ldr	r2, [r7, #8]
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	3304      	adds	r3, #4
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	bf0c      	ite	eq
 800edb4:	2301      	moveq	r3, #1
 800edb6:	2300      	movne	r3, #0
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	f103 0208 	add.w	r2, r3, #8
 800edc2:	7dfb      	ldrb	r3, [r7, #23]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d001      	beq.n	800edcc <etharp_input+0x98>
 800edc8:	2301      	movs	r3, #1
 800edca:	e000      	b.n	800edce <etharp_input+0x9a>
 800edcc:	2302      	movs	r3, #2
 800edce:	f107 010c 	add.w	r1, r7, #12
 800edd2:	6838      	ldr	r0, [r7, #0]
 800edd4:	f7ff fed8 	bl	800eb88 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	88db      	ldrh	r3, [r3, #6]
 800eddc:	b29b      	uxth	r3, r3
 800edde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ede2:	d003      	beq.n	800edec <etharp_input+0xb8>
 800ede4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ede8:	d01e      	beq.n	800ee28 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800edea:	e020      	b.n	800ee2e <etharp_input+0xfa>
      if (for_us) {
 800edec:	7dfb      	ldrb	r3, [r7, #23]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d01c      	beq.n	800ee2c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ee08:	693a      	ldr	r2, [r7, #16]
 800ee0a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ee0c:	2102      	movs	r1, #2
 800ee0e:	9103      	str	r1, [sp, #12]
 800ee10:	f107 010c 	add.w	r1, r7, #12
 800ee14:	9102      	str	r1, [sp, #8]
 800ee16:	9201      	str	r2, [sp, #4]
 800ee18:	9300      	str	r3, [sp, #0]
 800ee1a:	462b      	mov	r3, r5
 800ee1c:	4622      	mov	r2, r4
 800ee1e:	4601      	mov	r1, r0
 800ee20:	6838      	ldr	r0, [r7, #0]
 800ee22:	f000 faeb 	bl	800f3fc <etharp_raw>
      break;
 800ee26:	e001      	b.n	800ee2c <etharp_input+0xf8>
      break;
 800ee28:	bf00      	nop
 800ee2a:	e000      	b.n	800ee2e <etharp_input+0xfa>
      break;
 800ee2c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f7f9 fd32 	bl	8008898 <pbuf_free>
}
 800ee34:	3718      	adds	r7, #24
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bdb0      	pop	{r4, r5, r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	080144cc 	.word	0x080144cc
 800ee40:	0801461c 	.word	0x0801461c
 800ee44:	08014544 	.word	0x08014544

0800ee48 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b086      	sub	sp, #24
 800ee4c:	af02      	add	r7, sp, #8
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	4613      	mov	r3, r2
 800ee54:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ee56:	79fa      	ldrb	r2, [r7, #7]
 800ee58:	4944      	ldr	r1, [pc, #272]	; (800ef6c <etharp_output_to_arp_index+0x124>)
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	005b      	lsls	r3, r3, #1
 800ee5e:	4413      	add	r3, r2
 800ee60:	00db      	lsls	r3, r3, #3
 800ee62:	440b      	add	r3, r1
 800ee64:	3314      	adds	r3, #20
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d806      	bhi.n	800ee7a <etharp_output_to_arp_index+0x32>
 800ee6c:	4b40      	ldr	r3, [pc, #256]	; (800ef70 <etharp_output_to_arp_index+0x128>)
 800ee6e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ee72:	4940      	ldr	r1, [pc, #256]	; (800ef74 <etharp_output_to_arp_index+0x12c>)
 800ee74:	4840      	ldr	r0, [pc, #256]	; (800ef78 <etharp_output_to_arp_index+0x130>)
 800ee76:	f002 f9fb 	bl	8011270 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ee7a:	79fa      	ldrb	r2, [r7, #7]
 800ee7c:	493b      	ldr	r1, [pc, #236]	; (800ef6c <etharp_output_to_arp_index+0x124>)
 800ee7e:	4613      	mov	r3, r2
 800ee80:	005b      	lsls	r3, r3, #1
 800ee82:	4413      	add	r3, r2
 800ee84:	00db      	lsls	r3, r3, #3
 800ee86:	440b      	add	r3, r1
 800ee88:	3314      	adds	r3, #20
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	2b02      	cmp	r3, #2
 800ee8e:	d153      	bne.n	800ef38 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ee90:	79fa      	ldrb	r2, [r7, #7]
 800ee92:	4936      	ldr	r1, [pc, #216]	; (800ef6c <etharp_output_to_arp_index+0x124>)
 800ee94:	4613      	mov	r3, r2
 800ee96:	005b      	lsls	r3, r3, #1
 800ee98:	4413      	add	r3, r2
 800ee9a:	00db      	lsls	r3, r3, #3
 800ee9c:	440b      	add	r3, r1
 800ee9e:	3312      	adds	r3, #18
 800eea0:	881b      	ldrh	r3, [r3, #0]
 800eea2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800eea6:	d919      	bls.n	800eedc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800eea8:	79fa      	ldrb	r2, [r7, #7]
 800eeaa:	4613      	mov	r3, r2
 800eeac:	005b      	lsls	r3, r3, #1
 800eeae:	4413      	add	r3, r2
 800eeb0:	00db      	lsls	r3, r3, #3
 800eeb2:	4a2e      	ldr	r2, [pc, #184]	; (800ef6c <etharp_output_to_arp_index+0x124>)
 800eeb4:	4413      	add	r3, r2
 800eeb6:	3304      	adds	r3, #4
 800eeb8:	4619      	mov	r1, r3
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f000 fb4c 	bl	800f558 <etharp_request>
 800eec0:	4603      	mov	r3, r0
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d138      	bne.n	800ef38 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eec6:	79fa      	ldrb	r2, [r7, #7]
 800eec8:	4928      	ldr	r1, [pc, #160]	; (800ef6c <etharp_output_to_arp_index+0x124>)
 800eeca:	4613      	mov	r3, r2
 800eecc:	005b      	lsls	r3, r3, #1
 800eece:	4413      	add	r3, r2
 800eed0:	00db      	lsls	r3, r3, #3
 800eed2:	440b      	add	r3, r1
 800eed4:	3314      	adds	r3, #20
 800eed6:	2203      	movs	r2, #3
 800eed8:	701a      	strb	r2, [r3, #0]
 800eeda:	e02d      	b.n	800ef38 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800eedc:	79fa      	ldrb	r2, [r7, #7]
 800eede:	4923      	ldr	r1, [pc, #140]	; (800ef6c <etharp_output_to_arp_index+0x124>)
 800eee0:	4613      	mov	r3, r2
 800eee2:	005b      	lsls	r3, r3, #1
 800eee4:	4413      	add	r3, r2
 800eee6:	00db      	lsls	r3, r3, #3
 800eee8:	440b      	add	r3, r1
 800eeea:	3312      	adds	r3, #18
 800eeec:	881b      	ldrh	r3, [r3, #0]
 800eeee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800eef2:	d321      	bcc.n	800ef38 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800eef4:	79fa      	ldrb	r2, [r7, #7]
 800eef6:	4613      	mov	r3, r2
 800eef8:	005b      	lsls	r3, r3, #1
 800eefa:	4413      	add	r3, r2
 800eefc:	00db      	lsls	r3, r3, #3
 800eefe:	4a1b      	ldr	r2, [pc, #108]	; (800ef6c <etharp_output_to_arp_index+0x124>)
 800ef00:	4413      	add	r3, r2
 800ef02:	1d19      	adds	r1, r3, #4
 800ef04:	79fa      	ldrb	r2, [r7, #7]
 800ef06:	4613      	mov	r3, r2
 800ef08:	005b      	lsls	r3, r3, #1
 800ef0a:	4413      	add	r3, r2
 800ef0c:	00db      	lsls	r3, r3, #3
 800ef0e:	3308      	adds	r3, #8
 800ef10:	4a16      	ldr	r2, [pc, #88]	; (800ef6c <etharp_output_to_arp_index+0x124>)
 800ef12:	4413      	add	r3, r2
 800ef14:	3304      	adds	r3, #4
 800ef16:	461a      	mov	r2, r3
 800ef18:	68f8      	ldr	r0, [r7, #12]
 800ef1a:	f000 fafb 	bl	800f514 <etharp_request_dst>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d109      	bne.n	800ef38 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ef24:	79fa      	ldrb	r2, [r7, #7]
 800ef26:	4911      	ldr	r1, [pc, #68]	; (800ef6c <etharp_output_to_arp_index+0x124>)
 800ef28:	4613      	mov	r3, r2
 800ef2a:	005b      	lsls	r3, r3, #1
 800ef2c:	4413      	add	r3, r2
 800ef2e:	00db      	lsls	r3, r3, #3
 800ef30:	440b      	add	r3, r1
 800ef32:	3314      	adds	r3, #20
 800ef34:	2203      	movs	r2, #3
 800ef36:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ef3e:	79fa      	ldrb	r2, [r7, #7]
 800ef40:	4613      	mov	r3, r2
 800ef42:	005b      	lsls	r3, r3, #1
 800ef44:	4413      	add	r3, r2
 800ef46:	00db      	lsls	r3, r3, #3
 800ef48:	3308      	adds	r3, #8
 800ef4a:	4a08      	ldr	r2, [pc, #32]	; (800ef6c <etharp_output_to_arp_index+0x124>)
 800ef4c:	4413      	add	r3, r2
 800ef4e:	3304      	adds	r3, #4
 800ef50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef54:	9200      	str	r2, [sp, #0]
 800ef56:	460a      	mov	r2, r1
 800ef58:	68b9      	ldr	r1, [r7, #8]
 800ef5a:	68f8      	ldr	r0, [r7, #12]
 800ef5c:	f001 fe3a 	bl	8010bd4 <ethernet_output>
 800ef60:	4603      	mov	r3, r0
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	20004168 	.word	0x20004168
 800ef70:	080144cc 	.word	0x080144cc
 800ef74:	0801463c 	.word	0x0801463c
 800ef78:	08014544 	.word	0x08014544

0800ef7c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b08a      	sub	sp, #40	; 0x28
 800ef80:	af02      	add	r7, sp, #8
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d106      	bne.n	800efa0 <etharp_output+0x24>
 800ef92:	4b73      	ldr	r3, [pc, #460]	; (800f160 <etharp_output+0x1e4>)
 800ef94:	f240 321e 	movw	r2, #798	; 0x31e
 800ef98:	4972      	ldr	r1, [pc, #456]	; (800f164 <etharp_output+0x1e8>)
 800ef9a:	4873      	ldr	r0, [pc, #460]	; (800f168 <etharp_output+0x1ec>)
 800ef9c:	f002 f968 	bl	8011270 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d106      	bne.n	800efb4 <etharp_output+0x38>
 800efa6:	4b6e      	ldr	r3, [pc, #440]	; (800f160 <etharp_output+0x1e4>)
 800efa8:	f240 321f 	movw	r2, #799	; 0x31f
 800efac:	496f      	ldr	r1, [pc, #444]	; (800f16c <etharp_output+0x1f0>)
 800efae:	486e      	ldr	r0, [pc, #440]	; (800f168 <etharp_output+0x1ec>)
 800efb0:	f002 f95e 	bl	8011270 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d106      	bne.n	800efc8 <etharp_output+0x4c>
 800efba:	4b69      	ldr	r3, [pc, #420]	; (800f160 <etharp_output+0x1e4>)
 800efbc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800efc0:	496b      	ldr	r1, [pc, #428]	; (800f170 <etharp_output+0x1f4>)
 800efc2:	4869      	ldr	r0, [pc, #420]	; (800f168 <etharp_output+0x1ec>)
 800efc4:	f002 f954 	bl	8011270 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	68f9      	ldr	r1, [r7, #12]
 800efce:	4618      	mov	r0, r3
 800efd0:	f000 fef8 	bl	800fdc4 <ip4_addr_isbroadcast_u32>
 800efd4:	4603      	mov	r3, r0
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d002      	beq.n	800efe0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800efda:	4b66      	ldr	r3, [pc, #408]	; (800f174 <etharp_output+0x1f8>)
 800efdc:	61fb      	str	r3, [r7, #28]
 800efde:	e0af      	b.n	800f140 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800efe8:	2be0      	cmp	r3, #224	; 0xe0
 800efea:	d118      	bne.n	800f01e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800efec:	2301      	movs	r3, #1
 800efee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800eff0:	2300      	movs	r3, #0
 800eff2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800eff4:	235e      	movs	r3, #94	; 0x5e
 800eff6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	3301      	adds	r3, #1
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f002:	b2db      	uxtb	r3, r3
 800f004:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	3302      	adds	r3, #2
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	3303      	adds	r3, #3
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f016:	f107 0310 	add.w	r3, r7, #16
 800f01a:	61fb      	str	r3, [r7, #28]
 800f01c:	e090      	b.n	800f140 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	3304      	adds	r3, #4
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	405a      	eors	r2, r3
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	3308      	adds	r3, #8
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4013      	ands	r3, r2
 800f032:	2b00      	cmp	r3, #0
 800f034:	d012      	beq.n	800f05c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f03c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f040:	4293      	cmp	r3, r2
 800f042:	d00b      	beq.n	800f05c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	330c      	adds	r3, #12
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d003      	beq.n	800f056 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	330c      	adds	r3, #12
 800f052:	61bb      	str	r3, [r7, #24]
 800f054:	e002      	b.n	800f05c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f056:	f06f 0303 	mvn.w	r3, #3
 800f05a:	e07d      	b.n	800f158 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f05c:	4b46      	ldr	r3, [pc, #280]	; (800f178 <etharp_output+0x1fc>)
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	4619      	mov	r1, r3
 800f062:	4a46      	ldr	r2, [pc, #280]	; (800f17c <etharp_output+0x200>)
 800f064:	460b      	mov	r3, r1
 800f066:	005b      	lsls	r3, r3, #1
 800f068:	440b      	add	r3, r1
 800f06a:	00db      	lsls	r3, r3, #3
 800f06c:	4413      	add	r3, r2
 800f06e:	3314      	adds	r3, #20
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	2b01      	cmp	r3, #1
 800f074:	d925      	bls.n	800f0c2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f076:	4b40      	ldr	r3, [pc, #256]	; (800f178 <etharp_output+0x1fc>)
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	4619      	mov	r1, r3
 800f07c:	4a3f      	ldr	r2, [pc, #252]	; (800f17c <etharp_output+0x200>)
 800f07e:	460b      	mov	r3, r1
 800f080:	005b      	lsls	r3, r3, #1
 800f082:	440b      	add	r3, r1
 800f084:	00db      	lsls	r3, r3, #3
 800f086:	4413      	add	r3, r2
 800f088:	3308      	adds	r3, #8
 800f08a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d117      	bne.n	800f0c2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	4b38      	ldr	r3, [pc, #224]	; (800f178 <etharp_output+0x1fc>)
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	4618      	mov	r0, r3
 800f09c:	4937      	ldr	r1, [pc, #220]	; (800f17c <etharp_output+0x200>)
 800f09e:	4603      	mov	r3, r0
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	4403      	add	r3, r0
 800f0a4:	00db      	lsls	r3, r3, #3
 800f0a6:	440b      	add	r3, r1
 800f0a8:	3304      	adds	r3, #4
 800f0aa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d108      	bne.n	800f0c2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f0b0:	4b31      	ldr	r3, [pc, #196]	; (800f178 <etharp_output+0x1fc>)
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	461a      	mov	r2, r3
 800f0b6:	68b9      	ldr	r1, [r7, #8]
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f7ff fec5 	bl	800ee48 <etharp_output_to_arp_index>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	e04a      	b.n	800f158 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	75fb      	strb	r3, [r7, #23]
 800f0c6:	e031      	b.n	800f12c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f0c8:	7dfa      	ldrb	r2, [r7, #23]
 800f0ca:	492c      	ldr	r1, [pc, #176]	; (800f17c <etharp_output+0x200>)
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	4413      	add	r3, r2
 800f0d2:	00db      	lsls	r3, r3, #3
 800f0d4:	440b      	add	r3, r1
 800f0d6:	3314      	adds	r3, #20
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d923      	bls.n	800f126 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f0de:	7dfa      	ldrb	r2, [r7, #23]
 800f0e0:	4926      	ldr	r1, [pc, #152]	; (800f17c <etharp_output+0x200>)
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	005b      	lsls	r3, r3, #1
 800f0e6:	4413      	add	r3, r2
 800f0e8:	00db      	lsls	r3, r3, #3
 800f0ea:	440b      	add	r3, r1
 800f0ec:	3308      	adds	r3, #8
 800f0ee:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f0f0:	68fa      	ldr	r2, [r7, #12]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d117      	bne.n	800f126 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	6819      	ldr	r1, [r3, #0]
 800f0fa:	7dfa      	ldrb	r2, [r7, #23]
 800f0fc:	481f      	ldr	r0, [pc, #124]	; (800f17c <etharp_output+0x200>)
 800f0fe:	4613      	mov	r3, r2
 800f100:	005b      	lsls	r3, r3, #1
 800f102:	4413      	add	r3, r2
 800f104:	00db      	lsls	r3, r3, #3
 800f106:	4403      	add	r3, r0
 800f108:	3304      	adds	r3, #4
 800f10a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f10c:	4299      	cmp	r1, r3
 800f10e:	d10a      	bne.n	800f126 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f110:	4a19      	ldr	r2, [pc, #100]	; (800f178 <etharp_output+0x1fc>)
 800f112:	7dfb      	ldrb	r3, [r7, #23]
 800f114:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f116:	7dfb      	ldrb	r3, [r7, #23]
 800f118:	461a      	mov	r2, r3
 800f11a:	68b9      	ldr	r1, [r7, #8]
 800f11c:	68f8      	ldr	r0, [r7, #12]
 800f11e:	f7ff fe93 	bl	800ee48 <etharp_output_to_arp_index>
 800f122:	4603      	mov	r3, r0
 800f124:	e018      	b.n	800f158 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f126:	7dfb      	ldrb	r3, [r7, #23]
 800f128:	3301      	adds	r3, #1
 800f12a:	75fb      	strb	r3, [r7, #23]
 800f12c:	7dfb      	ldrb	r3, [r7, #23]
 800f12e:	2b09      	cmp	r3, #9
 800f130:	d9ca      	bls.n	800f0c8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f132:	68ba      	ldr	r2, [r7, #8]
 800f134:	69b9      	ldr	r1, [r7, #24]
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	f000 f822 	bl	800f180 <etharp_query>
 800f13c:	4603      	mov	r3, r0
 800f13e:	e00b      	b.n	800f158 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f14a:	9300      	str	r3, [sp, #0]
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	68b9      	ldr	r1, [r7, #8]
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	f001 fd3f 	bl	8010bd4 <ethernet_output>
 800f156:	4603      	mov	r3, r0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3720      	adds	r7, #32
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	080144cc 	.word	0x080144cc
 800f164:	0801461c 	.word	0x0801461c
 800f168:	08014544 	.word	0x08014544
 800f16c:	0801466c 	.word	0x0801466c
 800f170:	0801460c 	.word	0x0801460c
 800f174:	08014cbc 	.word	0x08014cbc
 800f178:	20004258 	.word	0x20004258
 800f17c:	20004168 	.word	0x20004168

0800f180 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b08c      	sub	sp, #48	; 0x30
 800f184:	af02      	add	r7, sp, #8
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	3326      	adds	r3, #38	; 0x26
 800f190:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f192:	23ff      	movs	r3, #255	; 0xff
 800f194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f198:	2300      	movs	r3, #0
 800f19a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	68f9      	ldr	r1, [r7, #12]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f000 fe0e 	bl	800fdc4 <ip4_addr_isbroadcast_u32>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d10c      	bne.n	800f1c8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f1b6:	2be0      	cmp	r3, #224	; 0xe0
 800f1b8:	d006      	beq.n	800f1c8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d003      	beq.n	800f1c8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d102      	bne.n	800f1ce <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f1c8:	f06f 030f 	mvn.w	r3, #15
 800f1cc:	e101      	b.n	800f3d2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f1ce:	68fa      	ldr	r2, [r7, #12]
 800f1d0:	2101      	movs	r1, #1
 800f1d2:	68b8      	ldr	r0, [r7, #8]
 800f1d4:	f7ff fb60 	bl	800e898 <etharp_find_entry>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f1dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	da02      	bge.n	800f1ea <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f1e4:	8a7b      	ldrh	r3, [r7, #18]
 800f1e6:	b25b      	sxtb	r3, r3
 800f1e8:	e0f3      	b.n	800f3d2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f1ea:	8a7b      	ldrh	r3, [r7, #18]
 800f1ec:	2b7e      	cmp	r3, #126	; 0x7e
 800f1ee:	d906      	bls.n	800f1fe <etharp_query+0x7e>
 800f1f0:	4b7a      	ldr	r3, [pc, #488]	; (800f3dc <etharp_query+0x25c>)
 800f1f2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f1f6:	497a      	ldr	r1, [pc, #488]	; (800f3e0 <etharp_query+0x260>)
 800f1f8:	487a      	ldr	r0, [pc, #488]	; (800f3e4 <etharp_query+0x264>)
 800f1fa:	f002 f839 	bl	8011270 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f1fe:	8a7b      	ldrh	r3, [r7, #18]
 800f200:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f202:	7c7a      	ldrb	r2, [r7, #17]
 800f204:	4978      	ldr	r1, [pc, #480]	; (800f3e8 <etharp_query+0x268>)
 800f206:	4613      	mov	r3, r2
 800f208:	005b      	lsls	r3, r3, #1
 800f20a:	4413      	add	r3, r2
 800f20c:	00db      	lsls	r3, r3, #3
 800f20e:	440b      	add	r3, r1
 800f210:	3314      	adds	r3, #20
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d115      	bne.n	800f244 <etharp_query+0xc4>
    is_new_entry = 1;
 800f218:	2301      	movs	r3, #1
 800f21a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f21c:	7c7a      	ldrb	r2, [r7, #17]
 800f21e:	4972      	ldr	r1, [pc, #456]	; (800f3e8 <etharp_query+0x268>)
 800f220:	4613      	mov	r3, r2
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	4413      	add	r3, r2
 800f226:	00db      	lsls	r3, r3, #3
 800f228:	440b      	add	r3, r1
 800f22a:	3314      	adds	r3, #20
 800f22c:	2201      	movs	r2, #1
 800f22e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f230:	7c7a      	ldrb	r2, [r7, #17]
 800f232:	496d      	ldr	r1, [pc, #436]	; (800f3e8 <etharp_query+0x268>)
 800f234:	4613      	mov	r3, r2
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	4413      	add	r3, r2
 800f23a:	00db      	lsls	r3, r3, #3
 800f23c:	440b      	add	r3, r1
 800f23e:	3308      	adds	r3, #8
 800f240:	68fa      	ldr	r2, [r7, #12]
 800f242:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f244:	7c7a      	ldrb	r2, [r7, #17]
 800f246:	4968      	ldr	r1, [pc, #416]	; (800f3e8 <etharp_query+0x268>)
 800f248:	4613      	mov	r3, r2
 800f24a:	005b      	lsls	r3, r3, #1
 800f24c:	4413      	add	r3, r2
 800f24e:	00db      	lsls	r3, r3, #3
 800f250:	440b      	add	r3, r1
 800f252:	3314      	adds	r3, #20
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	2b01      	cmp	r3, #1
 800f258:	d011      	beq.n	800f27e <etharp_query+0xfe>
 800f25a:	7c7a      	ldrb	r2, [r7, #17]
 800f25c:	4962      	ldr	r1, [pc, #392]	; (800f3e8 <etharp_query+0x268>)
 800f25e:	4613      	mov	r3, r2
 800f260:	005b      	lsls	r3, r3, #1
 800f262:	4413      	add	r3, r2
 800f264:	00db      	lsls	r3, r3, #3
 800f266:	440b      	add	r3, r1
 800f268:	3314      	adds	r3, #20
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	d806      	bhi.n	800f27e <etharp_query+0xfe>
 800f270:	4b5a      	ldr	r3, [pc, #360]	; (800f3dc <etharp_query+0x25c>)
 800f272:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f276:	495d      	ldr	r1, [pc, #372]	; (800f3ec <etharp_query+0x26c>)
 800f278:	485a      	ldr	r0, [pc, #360]	; (800f3e4 <etharp_query+0x264>)
 800f27a:	f001 fff9 	bl	8011270 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f27e:	6a3b      	ldr	r3, [r7, #32]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d102      	bne.n	800f28a <etharp_query+0x10a>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d10c      	bne.n	800f2a4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f28a:	68b9      	ldr	r1, [r7, #8]
 800f28c:	68f8      	ldr	r0, [r7, #12]
 800f28e:	f000 f963 	bl	800f558 <etharp_request>
 800f292:	4603      	mov	r3, r0
 800f294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d102      	bne.n	800f2a4 <etharp_query+0x124>
      return result;
 800f29e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f2a2:	e096      	b.n	800f3d2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d106      	bne.n	800f2b8 <etharp_query+0x138>
 800f2aa:	4b4c      	ldr	r3, [pc, #304]	; (800f3dc <etharp_query+0x25c>)
 800f2ac:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f2b0:	494f      	ldr	r1, [pc, #316]	; (800f3f0 <etharp_query+0x270>)
 800f2b2:	484c      	ldr	r0, [pc, #304]	; (800f3e4 <etharp_query+0x264>)
 800f2b4:	f001 ffdc 	bl	8011270 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f2b8:	7c7a      	ldrb	r2, [r7, #17]
 800f2ba:	494b      	ldr	r1, [pc, #300]	; (800f3e8 <etharp_query+0x268>)
 800f2bc:	4613      	mov	r3, r2
 800f2be:	005b      	lsls	r3, r3, #1
 800f2c0:	4413      	add	r3, r2
 800f2c2:	00db      	lsls	r3, r3, #3
 800f2c4:	440b      	add	r3, r1
 800f2c6:	3314      	adds	r3, #20
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d917      	bls.n	800f2fe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f2ce:	4a49      	ldr	r2, [pc, #292]	; (800f3f4 <etharp_query+0x274>)
 800f2d0:	7c7b      	ldrb	r3, [r7, #17]
 800f2d2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f2d4:	7c7a      	ldrb	r2, [r7, #17]
 800f2d6:	4613      	mov	r3, r2
 800f2d8:	005b      	lsls	r3, r3, #1
 800f2da:	4413      	add	r3, r2
 800f2dc:	00db      	lsls	r3, r3, #3
 800f2de:	3308      	adds	r3, #8
 800f2e0:	4a41      	ldr	r2, [pc, #260]	; (800f3e8 <etharp_query+0x268>)
 800f2e2:	4413      	add	r3, r2
 800f2e4:	3304      	adds	r3, #4
 800f2e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2ea:	9200      	str	r2, [sp, #0]
 800f2ec:	697a      	ldr	r2, [r7, #20]
 800f2ee:	6879      	ldr	r1, [r7, #4]
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f001 fc6f 	bl	8010bd4 <ethernet_output>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f2fc:	e067      	b.n	800f3ce <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f2fe:	7c7a      	ldrb	r2, [r7, #17]
 800f300:	4939      	ldr	r1, [pc, #228]	; (800f3e8 <etharp_query+0x268>)
 800f302:	4613      	mov	r3, r2
 800f304:	005b      	lsls	r3, r3, #1
 800f306:	4413      	add	r3, r2
 800f308:	00db      	lsls	r3, r3, #3
 800f30a:	440b      	add	r3, r1
 800f30c:	3314      	adds	r3, #20
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	2b01      	cmp	r3, #1
 800f312:	d15c      	bne.n	800f3ce <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f314:	2300      	movs	r3, #0
 800f316:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f31c:	e01c      	b.n	800f358 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	895a      	ldrh	r2, [r3, #10]
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	891b      	ldrh	r3, [r3, #8]
 800f326:	429a      	cmp	r2, r3
 800f328:	d10a      	bne.n	800f340 <etharp_query+0x1c0>
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d006      	beq.n	800f340 <etharp_query+0x1c0>
 800f332:	4b2a      	ldr	r3, [pc, #168]	; (800f3dc <etharp_query+0x25c>)
 800f334:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f338:	492f      	ldr	r1, [pc, #188]	; (800f3f8 <etharp_query+0x278>)
 800f33a:	482a      	ldr	r0, [pc, #168]	; (800f3e4 <etharp_query+0x264>)
 800f33c:	f001 ff98 	bl	8011270 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	7b1b      	ldrb	r3, [r3, #12]
 800f344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d002      	beq.n	800f352 <etharp_query+0x1d2>
        copy_needed = 1;
 800f34c:	2301      	movs	r3, #1
 800f34e:	61bb      	str	r3, [r7, #24]
        break;
 800f350:	e005      	b.n	800f35e <etharp_query+0x1de>
      }
      p = p->next;
 800f352:	69fb      	ldr	r3, [r7, #28]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d1df      	bne.n	800f31e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d007      	beq.n	800f374 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f36a:	200e      	movs	r0, #14
 800f36c:	f7f9 fcfc 	bl	8008d68 <pbuf_clone>
 800f370:	61f8      	str	r0, [r7, #28]
 800f372:	e004      	b.n	800f37e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f378:	69f8      	ldr	r0, [r7, #28]
 800f37a:	f7f9 fb33 	bl	80089e4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d021      	beq.n	800f3c8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f384:	7c7a      	ldrb	r2, [r7, #17]
 800f386:	4918      	ldr	r1, [pc, #96]	; (800f3e8 <etharp_query+0x268>)
 800f388:	4613      	mov	r3, r2
 800f38a:	005b      	lsls	r3, r3, #1
 800f38c:	4413      	add	r3, r2
 800f38e:	00db      	lsls	r3, r3, #3
 800f390:	440b      	add	r3, r1
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d00a      	beq.n	800f3ae <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f398:	7c7a      	ldrb	r2, [r7, #17]
 800f39a:	4913      	ldr	r1, [pc, #76]	; (800f3e8 <etharp_query+0x268>)
 800f39c:	4613      	mov	r3, r2
 800f39e:	005b      	lsls	r3, r3, #1
 800f3a0:	4413      	add	r3, r2
 800f3a2:	00db      	lsls	r3, r3, #3
 800f3a4:	440b      	add	r3, r1
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7f9 fa75 	bl	8008898 <pbuf_free>
      }
      arp_table[i].q = p;
 800f3ae:	7c7a      	ldrb	r2, [r7, #17]
 800f3b0:	490d      	ldr	r1, [pc, #52]	; (800f3e8 <etharp_query+0x268>)
 800f3b2:	4613      	mov	r3, r2
 800f3b4:	005b      	lsls	r3, r3, #1
 800f3b6:	4413      	add	r3, r2
 800f3b8:	00db      	lsls	r3, r3, #3
 800f3ba:	440b      	add	r3, r1
 800f3bc:	69fa      	ldr	r2, [r7, #28]
 800f3be:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f3c6:	e002      	b.n	800f3ce <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f3c8:	23ff      	movs	r3, #255	; 0xff
 800f3ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f3ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3728      	adds	r7, #40	; 0x28
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	080144cc 	.word	0x080144cc
 800f3e0:	08014678 	.word	0x08014678
 800f3e4:	08014544 	.word	0x08014544
 800f3e8:	20004168 	.word	0x20004168
 800f3ec:	08014688 	.word	0x08014688
 800f3f0:	0801466c 	.word	0x0801466c
 800f3f4:	20004258 	.word	0x20004258
 800f3f8:	080146b0 	.word	0x080146b0

0800f3fc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b08a      	sub	sp, #40	; 0x28
 800f400:	af02      	add	r7, sp, #8
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
 800f408:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f40a:	2300      	movs	r3, #0
 800f40c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d106      	bne.n	800f422 <etharp_raw+0x26>
 800f414:	4b3a      	ldr	r3, [pc, #232]	; (800f500 <etharp_raw+0x104>)
 800f416:	f240 4257 	movw	r2, #1111	; 0x457
 800f41a:	493a      	ldr	r1, [pc, #232]	; (800f504 <etharp_raw+0x108>)
 800f41c:	483a      	ldr	r0, [pc, #232]	; (800f508 <etharp_raw+0x10c>)
 800f41e:	f001 ff27 	bl	8011270 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f422:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f426:	211c      	movs	r1, #28
 800f428:	200e      	movs	r0, #14
 800f42a:	f7f8 ff51 	bl	80082d0 <pbuf_alloc>
 800f42e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d102      	bne.n	800f43c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f436:	f04f 33ff 	mov.w	r3, #4294967295
 800f43a:	e05d      	b.n	800f4f8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f43c:	69bb      	ldr	r3, [r7, #24]
 800f43e:	895b      	ldrh	r3, [r3, #10]
 800f440:	2b1b      	cmp	r3, #27
 800f442:	d806      	bhi.n	800f452 <etharp_raw+0x56>
 800f444:	4b2e      	ldr	r3, [pc, #184]	; (800f500 <etharp_raw+0x104>)
 800f446:	f240 4262 	movw	r2, #1122	; 0x462
 800f44a:	4930      	ldr	r1, [pc, #192]	; (800f50c <etharp_raw+0x110>)
 800f44c:	482e      	ldr	r0, [pc, #184]	; (800f508 <etharp_raw+0x10c>)
 800f44e:	f001 ff0f 	bl	8011270 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f458:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7f7 fe70 	bl	8007140 <lwip_htons>
 800f460:	4603      	mov	r3, r0
 800f462:	461a      	mov	r2, r3
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f46e:	2b06      	cmp	r3, #6
 800f470:	d006      	beq.n	800f480 <etharp_raw+0x84>
 800f472:	4b23      	ldr	r3, [pc, #140]	; (800f500 <etharp_raw+0x104>)
 800f474:	f240 4269 	movw	r2, #1129	; 0x469
 800f478:	4925      	ldr	r1, [pc, #148]	; (800f510 <etharp_raw+0x114>)
 800f47a:	4823      	ldr	r0, [pc, #140]	; (800f508 <etharp_raw+0x10c>)
 800f47c:	f001 fef8 	bl	8011270 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	3308      	adds	r3, #8
 800f484:	2206      	movs	r2, #6
 800f486:	6839      	ldr	r1, [r7, #0]
 800f488:	4618      	mov	r0, r3
 800f48a:	f001 fe31 	bl	80110f0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	3312      	adds	r3, #18
 800f492:	2206      	movs	r2, #6
 800f494:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f496:	4618      	mov	r0, r3
 800f498:	f001 fe2a 	bl	80110f0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	330e      	adds	r3, #14
 800f4a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4a2:	6812      	ldr	r2, [r2, #0]
 800f4a4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	3318      	adds	r3, #24
 800f4aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ac:	6812      	ldr	r2, [r2, #0]
 800f4ae:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	701a      	strb	r2, [r3, #0]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f042 0201 	orr.w	r2, r2, #1
 800f4bc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	f042 0208 	orr.w	r2, r2, #8
 800f4c6:	709a      	strb	r2, [r3, #2]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	2206      	movs	r2, #6
 800f4d0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	2204      	movs	r2, #4
 800f4d6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f4d8:	f640 0306 	movw	r3, #2054	; 0x806
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	68ba      	ldr	r2, [r7, #8]
 800f4e2:	69b9      	ldr	r1, [r7, #24]
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	f001 fb75 	bl	8010bd4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f4ea:	69b8      	ldr	r0, [r7, #24]
 800f4ec:	f7f9 f9d4 	bl	8008898 <pbuf_free>
  p = NULL;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f4f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3720      	adds	r7, #32
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	080144cc 	.word	0x080144cc
 800f504:	0801461c 	.word	0x0801461c
 800f508:	08014544 	.word	0x08014544
 800f50c:	080146cc 	.word	0x080146cc
 800f510:	08014700 	.word	0x08014700

0800f514 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b088      	sub	sp, #32
 800f518:	af04      	add	r7, sp, #16
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f530:	2201      	movs	r2, #1
 800f532:	9203      	str	r2, [sp, #12]
 800f534:	68ba      	ldr	r2, [r7, #8]
 800f536:	9202      	str	r2, [sp, #8]
 800f538:	4a06      	ldr	r2, [pc, #24]	; (800f554 <etharp_request_dst+0x40>)
 800f53a:	9201      	str	r2, [sp, #4]
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	4603      	mov	r3, r0
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	68f8      	ldr	r0, [r7, #12]
 800f544:	f7ff ff5a 	bl	800f3fc <etharp_raw>
 800f548:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3710      	adds	r7, #16
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	08014cc4 	.word	0x08014cc4

0800f558 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b082      	sub	sp, #8
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f562:	4a05      	ldr	r2, [pc, #20]	; (800f578 <etharp_request+0x20>)
 800f564:	6839      	ldr	r1, [r7, #0]
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f7ff ffd4 	bl	800f514 <etharp_request_dst>
 800f56c:	4603      	mov	r3, r0
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3708      	adds	r7, #8
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	08014cbc 	.word	0x08014cbc

0800f57c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b08e      	sub	sp, #56	; 0x38
 800f580:	af04      	add	r7, sp, #16
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f586:	4b79      	ldr	r3, [pc, #484]	; (800f76c <icmp_input+0x1f0>)
 800f588:	689b      	ldr	r3, [r3, #8]
 800f58a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	f003 030f 	and.w	r3, r3, #15
 800f594:	b2db      	uxtb	r3, r3
 800f596:	009b      	lsls	r3, r3, #2
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f59c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f59e:	2b13      	cmp	r3, #19
 800f5a0:	f240 80cd 	bls.w	800f73e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	895b      	ldrh	r3, [r3, #10]
 800f5a8:	2b03      	cmp	r3, #3
 800f5aa:	f240 80ca 	bls.w	800f742 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f5b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	f000 80b7 	beq.w	800f730 <icmp_input+0x1b4>
 800f5c2:	2b08      	cmp	r3, #8
 800f5c4:	f040 80b7 	bne.w	800f736 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f5c8:	4b69      	ldr	r3, [pc, #420]	; (800f770 <icmp_input+0x1f4>)
 800f5ca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f5cc:	4b67      	ldr	r3, [pc, #412]	; (800f76c <icmp_input+0x1f0>)
 800f5ce:	695b      	ldr	r3, [r3, #20]
 800f5d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f5d4:	2be0      	cmp	r3, #224	; 0xe0
 800f5d6:	f000 80bb 	beq.w	800f750 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f5da:	4b64      	ldr	r3, [pc, #400]	; (800f76c <icmp_input+0x1f0>)
 800f5dc:	695b      	ldr	r3, [r3, #20]
 800f5de:	4a63      	ldr	r2, [pc, #396]	; (800f76c <icmp_input+0x1f0>)
 800f5e0:	6812      	ldr	r2, [r2, #0]
 800f5e2:	4611      	mov	r1, r2
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f000 fbed 	bl	800fdc4 <ip4_addr_isbroadcast_u32>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	f040 80b1 	bne.w	800f754 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	891b      	ldrh	r3, [r3, #8]
 800f5f6:	2b07      	cmp	r3, #7
 800f5f8:	f240 80a5 	bls.w	800f746 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f5fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5fe:	330e      	adds	r3, #14
 800f600:	4619      	mov	r1, r3
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f7f9 f8b2 	bl	800876c <pbuf_add_header>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d04b      	beq.n	800f6a6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	891a      	ldrh	r2, [r3, #8]
 800f612:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f614:	4413      	add	r3, r2
 800f616:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	891b      	ldrh	r3, [r3, #8]
 800f61c:	8b7a      	ldrh	r2, [r7, #26]
 800f61e:	429a      	cmp	r2, r3
 800f620:	f0c0 809a 	bcc.w	800f758 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f624:	8b7b      	ldrh	r3, [r7, #26]
 800f626:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f62a:	4619      	mov	r1, r3
 800f62c:	200e      	movs	r0, #14
 800f62e:	f7f8 fe4f 	bl	80082d0 <pbuf_alloc>
 800f632:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	2b00      	cmp	r3, #0
 800f638:	f000 8090 	beq.w	800f75c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	895b      	ldrh	r3, [r3, #10]
 800f640:	461a      	mov	r2, r3
 800f642:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f644:	3308      	adds	r3, #8
 800f646:	429a      	cmp	r2, r3
 800f648:	d203      	bcs.n	800f652 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f64a:	6978      	ldr	r0, [r7, #20]
 800f64c:	f7f9 f924 	bl	8008898 <pbuf_free>
          goto icmperr;
 800f650:	e085      	b.n	800f75e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f65a:	4618      	mov	r0, r3
 800f65c:	f001 fd48 	bl	80110f0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f662:	4619      	mov	r1, r3
 800f664:	6978      	ldr	r0, [r7, #20]
 800f666:	f7f9 f891 	bl	800878c <pbuf_remove_header>
 800f66a:	4603      	mov	r3, r0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d009      	beq.n	800f684 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f670:	4b40      	ldr	r3, [pc, #256]	; (800f774 <icmp_input+0x1f8>)
 800f672:	22b6      	movs	r2, #182	; 0xb6
 800f674:	4940      	ldr	r1, [pc, #256]	; (800f778 <icmp_input+0x1fc>)
 800f676:	4841      	ldr	r0, [pc, #260]	; (800f77c <icmp_input+0x200>)
 800f678:	f001 fdfa 	bl	8011270 <iprintf>
          pbuf_free(r);
 800f67c:	6978      	ldr	r0, [r7, #20]
 800f67e:	f7f9 f90b 	bl	8008898 <pbuf_free>
          goto icmperr;
 800f682:	e06c      	b.n	800f75e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f684:	6879      	ldr	r1, [r7, #4]
 800f686:	6978      	ldr	r0, [r7, #20]
 800f688:	f7f9 fa2a 	bl	8008ae0 <pbuf_copy>
 800f68c:	4603      	mov	r3, r0
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d003      	beq.n	800f69a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f692:	6978      	ldr	r0, [r7, #20]
 800f694:	f7f9 f900 	bl	8008898 <pbuf_free>
          goto icmperr;
 800f698:	e061      	b.n	800f75e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f7f9 f8fc 	bl	8008898 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	607b      	str	r3, [r7, #4]
 800f6a4:	e00f      	b.n	800f6c6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f6a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f6a8:	330e      	adds	r3, #14
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f7f9 f86d 	bl	800878c <pbuf_remove_header>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d006      	beq.n	800f6c6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f6b8:	4b2e      	ldr	r3, [pc, #184]	; (800f774 <icmp_input+0x1f8>)
 800f6ba:	22c7      	movs	r2, #199	; 0xc7
 800f6bc:	4930      	ldr	r1, [pc, #192]	; (800f780 <icmp_input+0x204>)
 800f6be:	482f      	ldr	r0, [pc, #188]	; (800f77c <icmp_input+0x200>)
 800f6c0:	f001 fdd6 	bl	8011270 <iprintf>
          goto icmperr;
 800f6c4:	e04b      	b.n	800f75e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	685b      	ldr	r3, [r3, #4]
 800f6ca:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f6cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f7f9 f84b 	bl	800876c <pbuf_add_header>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d12b      	bne.n	800f734 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f6ea:	4b20      	ldr	r3, [pc, #128]	; (800f76c <icmp_input+0x1f0>)
 800f6ec:	691a      	ldr	r2, [r3, #16]
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	709a      	strb	r2, [r3, #2]
 800f6fe:	2200      	movs	r2, #0
 800f700:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	22ff      	movs	r2, #255	; 0xff
 800f706:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2200      	movs	r2, #0
 800f70c:	729a      	strb	r2, [r3, #10]
 800f70e:	2200      	movs	r2, #0
 800f710:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	9302      	str	r3, [sp, #8]
 800f716:	2301      	movs	r3, #1
 800f718:	9301      	str	r3, [sp, #4]
 800f71a:	2300      	movs	r3, #0
 800f71c:	9300      	str	r3, [sp, #0]
 800f71e:	23ff      	movs	r3, #255	; 0xff
 800f720:	2200      	movs	r2, #0
 800f722:	69f9      	ldr	r1, [r7, #28]
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 fa75 	bl	800fc14 <ip4_output_if>
 800f72a:	4603      	mov	r3, r0
 800f72c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f72e:	e001      	b.n	800f734 <icmp_input+0x1b8>
      break;
 800f730:	bf00      	nop
 800f732:	e000      	b.n	800f736 <icmp_input+0x1ba>
      break;
 800f734:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f7f9 f8ae 	bl	8008898 <pbuf_free>
  return;
 800f73c:	e013      	b.n	800f766 <icmp_input+0x1ea>
    goto lenerr;
 800f73e:	bf00      	nop
 800f740:	e002      	b.n	800f748 <icmp_input+0x1cc>
    goto lenerr;
 800f742:	bf00      	nop
 800f744:	e000      	b.n	800f748 <icmp_input+0x1cc>
        goto lenerr;
 800f746:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f7f9 f8a5 	bl	8008898 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f74e:	e00a      	b.n	800f766 <icmp_input+0x1ea>
        goto icmperr;
 800f750:	bf00      	nop
 800f752:	e004      	b.n	800f75e <icmp_input+0x1e2>
        goto icmperr;
 800f754:	bf00      	nop
 800f756:	e002      	b.n	800f75e <icmp_input+0x1e2>
          goto icmperr;
 800f758:	bf00      	nop
 800f75a:	e000      	b.n	800f75e <icmp_input+0x1e2>
          goto icmperr;
 800f75c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f7f9 f89a 	bl	8008898 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f764:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f766:	3728      	adds	r7, #40	; 0x28
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	200073fc 	.word	0x200073fc
 800f770:	20007410 	.word	0x20007410
 800f774:	08014744 	.word	0x08014744
 800f778:	0801477c 	.word	0x0801477c
 800f77c:	080147b4 	.word	0x080147b4
 800f780:	080147dc 	.word	0x080147dc

0800f784 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	460b      	mov	r3, r1
 800f78e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f790:	78fb      	ldrb	r3, [r7, #3]
 800f792:	461a      	mov	r2, r3
 800f794:	2103      	movs	r1, #3
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 f814 	bl	800f7c4 <icmp_send_response>
}
 800f79c:	bf00      	nop
 800f79e:	3708      	adds	r7, #8
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f7b0:	78fb      	ldrb	r3, [r7, #3]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	210b      	movs	r1, #11
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 f804 	bl	800f7c4 <icmp_send_response>
}
 800f7bc:	bf00      	nop
 800f7be:	3708      	adds	r7, #8
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b08c      	sub	sp, #48	; 0x30
 800f7c8:	af04      	add	r7, sp, #16
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	70fb      	strb	r3, [r7, #3]
 800f7d0:	4613      	mov	r3, r2
 800f7d2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f7d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f7d8:	2124      	movs	r1, #36	; 0x24
 800f7da:	2022      	movs	r0, #34	; 0x22
 800f7dc:	f7f8 fd78 	bl	80082d0 <pbuf_alloc>
 800f7e0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d04c      	beq.n	800f882 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	895b      	ldrh	r3, [r3, #10]
 800f7ec:	2b23      	cmp	r3, #35	; 0x23
 800f7ee:	d806      	bhi.n	800f7fe <icmp_send_response+0x3a>
 800f7f0:	4b26      	ldr	r3, [pc, #152]	; (800f88c <icmp_send_response+0xc8>)
 800f7f2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f7f6:	4926      	ldr	r1, [pc, #152]	; (800f890 <icmp_send_response+0xcc>)
 800f7f8:	4826      	ldr	r0, [pc, #152]	; (800f894 <icmp_send_response+0xd0>)
 800f7fa:	f001 fd39 	bl	8011270 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	78fa      	ldrb	r2, [r7, #3]
 800f80e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	78ba      	ldrb	r2, [r7, #2]
 800f814:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	2200      	movs	r2, #0
 800f81a:	711a      	strb	r2, [r3, #4]
 800f81c:	2200      	movs	r2, #0
 800f81e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	2200      	movs	r2, #0
 800f824:	719a      	strb	r2, [r3, #6]
 800f826:	2200      	movs	r2, #0
 800f828:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	f103 0008 	add.w	r0, r3, #8
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	221c      	movs	r2, #28
 800f838:	4619      	mov	r1, r3
 800f83a:	f001 fc59 	bl	80110f0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f844:	f107 030c 	add.w	r3, r7, #12
 800f848:	4618      	mov	r0, r3
 800f84a:	f000 f825 	bl	800f898 <ip4_route>
 800f84e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d011      	beq.n	800f87a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	2200      	movs	r2, #0
 800f85a:	709a      	strb	r2, [r3, #2]
 800f85c:	2200      	movs	r2, #0
 800f85e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f860:	f107 020c 	add.w	r2, r7, #12
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	9302      	str	r3, [sp, #8]
 800f868:	2301      	movs	r3, #1
 800f86a:	9301      	str	r3, [sp, #4]
 800f86c:	2300      	movs	r3, #0
 800f86e:	9300      	str	r3, [sp, #0]
 800f870:	23ff      	movs	r3, #255	; 0xff
 800f872:	2100      	movs	r1, #0
 800f874:	69f8      	ldr	r0, [r7, #28]
 800f876:	f000 f9cd 	bl	800fc14 <ip4_output_if>
  }
  pbuf_free(q);
 800f87a:	69f8      	ldr	r0, [r7, #28]
 800f87c:	f7f9 f80c 	bl	8008898 <pbuf_free>
 800f880:	e000      	b.n	800f884 <icmp_send_response+0xc0>
    return;
 800f882:	bf00      	nop
}
 800f884:	3720      	adds	r7, #32
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	08014744 	.word	0x08014744
 800f890:	08014810 	.word	0x08014810
 800f894:	080147b4 	.word	0x080147b4

0800f898 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f8a0:	4b33      	ldr	r3, [pc, #204]	; (800f970 <ip4_route+0xd8>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	60fb      	str	r3, [r7, #12]
 800f8a6:	e036      	b.n	800f916 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8ae:	f003 0301 	and.w	r3, r3, #1
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d02b      	beq.n	800f910 <ip4_route+0x78>
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8be:	089b      	lsrs	r3, r3, #2
 800f8c0:	f003 0301 	and.w	r3, r3, #1
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d022      	beq.n	800f910 <ip4_route+0x78>
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	3304      	adds	r3, #4
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d01d      	beq.n	800f910 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	3304      	adds	r3, #4
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	405a      	eors	r2, r3
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	3308      	adds	r3, #8
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	4013      	ands	r3, r2
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d101      	bne.n	800f8f0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	e038      	b.n	800f962 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8f6:	f003 0302 	and.w	r3, r3, #2
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d108      	bne.n	800f910 <ip4_route+0x78>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	330c      	adds	r3, #12
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	429a      	cmp	r2, r3
 800f90a:	d101      	bne.n	800f910 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	e028      	b.n	800f962 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	60fb      	str	r3, [r7, #12]
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d1c5      	bne.n	800f8a8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f91c:	4b15      	ldr	r3, [pc, #84]	; (800f974 <ip4_route+0xdc>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d01a      	beq.n	800f95a <ip4_route+0xc2>
 800f924:	4b13      	ldr	r3, [pc, #76]	; (800f974 <ip4_route+0xdc>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f92c:	f003 0301 	and.w	r3, r3, #1
 800f930:	2b00      	cmp	r3, #0
 800f932:	d012      	beq.n	800f95a <ip4_route+0xc2>
 800f934:	4b0f      	ldr	r3, [pc, #60]	; (800f974 <ip4_route+0xdc>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f93c:	f003 0304 	and.w	r3, r3, #4
 800f940:	2b00      	cmp	r3, #0
 800f942:	d00a      	beq.n	800f95a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f944:	4b0b      	ldr	r3, [pc, #44]	; (800f974 <ip4_route+0xdc>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	3304      	adds	r3, #4
 800f94a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d004      	beq.n	800f95a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	b2db      	uxtb	r3, r3
 800f956:	2b7f      	cmp	r3, #127	; 0x7f
 800f958:	d101      	bne.n	800f95e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f95a:	2300      	movs	r3, #0
 800f95c:	e001      	b.n	800f962 <ip4_route+0xca>
  }

  return netif_default;
 800f95e:	4b05      	ldr	r3, [pc, #20]	; (800f974 <ip4_route+0xdc>)
 800f960:	681b      	ldr	r3, [r3, #0]
}
 800f962:	4618      	mov	r0, r3
 800f964:	3714      	adds	r7, #20
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr
 800f96e:	bf00      	nop
 800f970:	2000ab00 	.word	0x2000ab00
 800f974:	2000ab04 	.word	0x2000ab04

0800f978 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f986:	f003 0301 	and.w	r3, r3, #1
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d016      	beq.n	800f9be <ip4_input_accept+0x46>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	3304      	adds	r3, #4
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d011      	beq.n	800f9be <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f99a:	4b0b      	ldr	r3, [pc, #44]	; (800f9c8 <ip4_input_accept+0x50>)
 800f99c:	695a      	ldr	r2, [r3, #20]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	3304      	adds	r3, #4
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d008      	beq.n	800f9ba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f9a8:	4b07      	ldr	r3, [pc, #28]	; (800f9c8 <ip4_input_accept+0x50>)
 800f9aa:	695b      	ldr	r3, [r3, #20]
 800f9ac:	6879      	ldr	r1, [r7, #4]
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f000 fa08 	bl	800fdc4 <ip4_addr_isbroadcast_u32>
 800f9b4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d001      	beq.n	800f9be <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	e000      	b.n	800f9c0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f9be:	2300      	movs	r3, #0
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	200073fc 	.word	0x200073fc

0800f9cc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b086      	sub	sp, #24
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	091b      	lsrs	r3, r3, #4
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	2b04      	cmp	r3, #4
 800f9e6:	d004      	beq.n	800f9f2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f7f8 ff55 	bl	8008898 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	e107      	b.n	800fc02 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	f003 030f 	and.w	r3, r3, #15
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	009b      	lsls	r3, r3, #2
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	885b      	ldrh	r3, [r3, #2]
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7f7 fb99 	bl	8007140 <lwip_htons>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	891b      	ldrh	r3, [r3, #8]
 800fa16:	89ba      	ldrh	r2, [r7, #12]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d204      	bcs.n	800fa26 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800fa1c:	89bb      	ldrh	r3, [r7, #12]
 800fa1e:	4619      	mov	r1, r3
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f7f8 fdb3 	bl	800858c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	895b      	ldrh	r3, [r3, #10]
 800fa2a:	89fa      	ldrh	r2, [r7, #14]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d807      	bhi.n	800fa40 <ip4_input+0x74>
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	891b      	ldrh	r3, [r3, #8]
 800fa34:	89ba      	ldrh	r2, [r7, #12]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d802      	bhi.n	800fa40 <ip4_input+0x74>
 800fa3a:	89fb      	ldrh	r3, [r7, #14]
 800fa3c:	2b13      	cmp	r3, #19
 800fa3e:	d804      	bhi.n	800fa4a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f7f8 ff29 	bl	8008898 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fa46:	2300      	movs	r3, #0
 800fa48:	e0db      	b.n	800fc02 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	691b      	ldr	r3, [r3, #16]
 800fa4e:	4a6f      	ldr	r2, [pc, #444]	; (800fc0c <ip4_input+0x240>)
 800fa50:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	4a6d      	ldr	r2, [pc, #436]	; (800fc0c <ip4_input+0x240>)
 800fa58:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fa5a:	4b6c      	ldr	r3, [pc, #432]	; (800fc0c <ip4_input+0x240>)
 800fa5c:	695b      	ldr	r3, [r3, #20]
 800fa5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa62:	2be0      	cmp	r3, #224	; 0xe0
 800fa64:	d112      	bne.n	800fa8c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa6c:	f003 0301 	and.w	r3, r3, #1
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d007      	beq.n	800fa86 <ip4_input+0xba>
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	3304      	adds	r3, #4
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d002      	beq.n	800fa86 <ip4_input+0xba>
      netif = inp;
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	613b      	str	r3, [r7, #16]
 800fa84:	e02a      	b.n	800fadc <ip4_input+0x110>
    } else {
      netif = NULL;
 800fa86:	2300      	movs	r3, #0
 800fa88:	613b      	str	r3, [r7, #16]
 800fa8a:	e027      	b.n	800fadc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fa8c:	6838      	ldr	r0, [r7, #0]
 800fa8e:	f7ff ff73 	bl	800f978 <ip4_input_accept>
 800fa92:	4603      	mov	r3, r0
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d002      	beq.n	800fa9e <ip4_input+0xd2>
      netif = inp;
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	613b      	str	r3, [r7, #16]
 800fa9c:	e01e      	b.n	800fadc <ip4_input+0x110>
    } else {
      netif = NULL;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800faa2:	4b5a      	ldr	r3, [pc, #360]	; (800fc0c <ip4_input+0x240>)
 800faa4:	695b      	ldr	r3, [r3, #20]
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	2b7f      	cmp	r3, #127	; 0x7f
 800faaa:	d017      	beq.n	800fadc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800faac:	4b58      	ldr	r3, [pc, #352]	; (800fc10 <ip4_input+0x244>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	613b      	str	r3, [r7, #16]
 800fab2:	e00e      	b.n	800fad2 <ip4_input+0x106>
          if (netif == inp) {
 800fab4:	693a      	ldr	r2, [r7, #16]
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	429a      	cmp	r2, r3
 800faba:	d006      	beq.n	800faca <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fabc:	6938      	ldr	r0, [r7, #16]
 800fabe:	f7ff ff5b 	bl	800f978 <ip4_input_accept>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d108      	bne.n	800fada <ip4_input+0x10e>
 800fac8:	e000      	b.n	800facc <ip4_input+0x100>
            continue;
 800faca:	bf00      	nop
        NETIF_FOREACH(netif) {
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	613b      	str	r3, [r7, #16]
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d1ed      	bne.n	800fab4 <ip4_input+0xe8>
 800fad8:	e000      	b.n	800fadc <ip4_input+0x110>
            break;
 800fada:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fadc:	4b4b      	ldr	r3, [pc, #300]	; (800fc0c <ip4_input+0x240>)
 800fade:	691b      	ldr	r3, [r3, #16]
 800fae0:	6839      	ldr	r1, [r7, #0]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f000 f96e 	bl	800fdc4 <ip4_addr_isbroadcast_u32>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d105      	bne.n	800fafa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800faee:	4b47      	ldr	r3, [pc, #284]	; (800fc0c <ip4_input+0x240>)
 800faf0:	691b      	ldr	r3, [r3, #16]
 800faf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800faf6:	2be0      	cmp	r3, #224	; 0xe0
 800faf8:	d104      	bne.n	800fb04 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f7f8 fecc 	bl	8008898 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fb00:	2300      	movs	r3, #0
 800fb02:	e07e      	b.n	800fc02 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d104      	bne.n	800fb14 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f7f8 fec4 	bl	8008898 <pbuf_free>
    return ERR_OK;
 800fb10:	2300      	movs	r3, #0
 800fb12:	e076      	b.n	800fc02 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	88db      	ldrh	r3, [r3, #6]
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fb20:	4013      	ands	r3, r2
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d00b      	beq.n	800fb3e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 fc92 	bl	8010450 <ip4_reass>
 800fb2c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d101      	bne.n	800fb38 <ip4_input+0x16c>
      return ERR_OK;
 800fb34:	2300      	movs	r3, #0
 800fb36:	e064      	b.n	800fc02 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fb3e:	4a33      	ldr	r2, [pc, #204]	; (800fc0c <ip4_input+0x240>)
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fb44:	4a31      	ldr	r2, [pc, #196]	; (800fc0c <ip4_input+0x240>)
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fb4a:	4a30      	ldr	r2, [pc, #192]	; (800fc0c <ip4_input+0x240>)
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	f003 030f 	and.w	r3, r3, #15
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	b2db      	uxtb	r3, r3
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	4b2a      	ldr	r3, [pc, #168]	; (800fc0c <ip4_input+0x240>)
 800fb62:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fb64:	89fb      	ldrh	r3, [r7, #14]
 800fb66:	4619      	mov	r1, r3
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f7f8 fe0f 	bl	800878c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	7a5b      	ldrb	r3, [r3, #9]
 800fb72:	2b11      	cmp	r3, #17
 800fb74:	d006      	beq.n	800fb84 <ip4_input+0x1b8>
 800fb76:	2b11      	cmp	r3, #17
 800fb78:	dc13      	bgt.n	800fba2 <ip4_input+0x1d6>
 800fb7a:	2b01      	cmp	r3, #1
 800fb7c:	d00c      	beq.n	800fb98 <ip4_input+0x1cc>
 800fb7e:	2b06      	cmp	r3, #6
 800fb80:	d005      	beq.n	800fb8e <ip4_input+0x1c2>
 800fb82:	e00e      	b.n	800fba2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fb84:	6839      	ldr	r1, [r7, #0]
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7fe fc68 	bl	800e45c <udp_input>
        break;
 800fb8c:	e026      	b.n	800fbdc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fb8e:	6839      	ldr	r1, [r7, #0]
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f7fa fcb5 	bl	800a500 <tcp_input>
        break;
 800fb96:	e021      	b.n	800fbdc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fb98:	6839      	ldr	r1, [r7, #0]
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f7ff fcee 	bl	800f57c <icmp_input>
        break;
 800fba0:	e01c      	b.n	800fbdc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fba2:	4b1a      	ldr	r3, [pc, #104]	; (800fc0c <ip4_input+0x240>)
 800fba4:	695b      	ldr	r3, [r3, #20]
 800fba6:	6939      	ldr	r1, [r7, #16]
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f000 f90b 	bl	800fdc4 <ip4_addr_isbroadcast_u32>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d10f      	bne.n	800fbd4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fbb4:	4b15      	ldr	r3, [pc, #84]	; (800fc0c <ip4_input+0x240>)
 800fbb6:	695b      	ldr	r3, [r3, #20]
 800fbb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fbbc:	2be0      	cmp	r3, #224	; 0xe0
 800fbbe:	d009      	beq.n	800fbd4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fbc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f7f8 fe53 	bl	8008872 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fbcc:	2102      	movs	r1, #2
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f7ff fdd8 	bl	800f784 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f7f8 fe5f 	bl	8008898 <pbuf_free>
        break;
 800fbda:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fbdc:	4b0b      	ldr	r3, [pc, #44]	; (800fc0c <ip4_input+0x240>)
 800fbde:	2200      	movs	r2, #0
 800fbe0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fbe2:	4b0a      	ldr	r3, [pc, #40]	; (800fc0c <ip4_input+0x240>)
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fbe8:	4b08      	ldr	r3, [pc, #32]	; (800fc0c <ip4_input+0x240>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fbee:	4b07      	ldr	r3, [pc, #28]	; (800fc0c <ip4_input+0x240>)
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fbf4:	4b05      	ldr	r3, [pc, #20]	; (800fc0c <ip4_input+0x240>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fbfa:	4b04      	ldr	r3, [pc, #16]	; (800fc0c <ip4_input+0x240>)
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fc00:	2300      	movs	r3, #0
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3718      	adds	r7, #24
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	200073fc 	.word	0x200073fc
 800fc10:	2000ab00 	.word	0x2000ab00

0800fc14 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b08a      	sub	sp, #40	; 0x28
 800fc18:	af04      	add	r7, sp, #16
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	607a      	str	r2, [r7, #4]
 800fc20:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d009      	beq.n	800fc40 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d003      	beq.n	800fc3a <ip4_output_if+0x26>
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d102      	bne.n	800fc40 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc3c:	3304      	adds	r3, #4
 800fc3e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fc40:	78fa      	ldrb	r2, [r7, #3]
 800fc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc44:	9302      	str	r3, [sp, #8]
 800fc46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fc4a:	9301      	str	r3, [sp, #4]
 800fc4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc50:	9300      	str	r3, [sp, #0]
 800fc52:	4613      	mov	r3, r2
 800fc54:	687a      	ldr	r2, [r7, #4]
 800fc56:	6979      	ldr	r1, [r7, #20]
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	f000 f805 	bl	800fc68 <ip4_output_if_src>
 800fc5e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3718      	adds	r7, #24
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b088      	sub	sp, #32
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	607a      	str	r2, [r7, #4]
 800fc74:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	7b9b      	ldrb	r3, [r3, #14]
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	d006      	beq.n	800fc8c <ip4_output_if_src+0x24>
 800fc7e:	4b4b      	ldr	r3, [pc, #300]	; (800fdac <ip4_output_if_src+0x144>)
 800fc80:	f44f 7255 	mov.w	r2, #852	; 0x354
 800fc84:	494a      	ldr	r1, [pc, #296]	; (800fdb0 <ip4_output_if_src+0x148>)
 800fc86:	484b      	ldr	r0, [pc, #300]	; (800fdb4 <ip4_output_if_src+0x14c>)
 800fc88:	f001 faf2 	bl	8011270 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d060      	beq.n	800fd54 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800fc92:	2314      	movs	r3, #20
 800fc94:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fc96:	2114      	movs	r1, #20
 800fc98:	68f8      	ldr	r0, [r7, #12]
 800fc9a:	f7f8 fd67 	bl	800876c <pbuf_add_header>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d002      	beq.n	800fcaa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fca4:	f06f 0301 	mvn.w	r3, #1
 800fca8:	e07c      	b.n	800fda4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	895b      	ldrh	r3, [r3, #10]
 800fcb4:	2b13      	cmp	r3, #19
 800fcb6:	d806      	bhi.n	800fcc6 <ip4_output_if_src+0x5e>
 800fcb8:	4b3c      	ldr	r3, [pc, #240]	; (800fdac <ip4_output_if_src+0x144>)
 800fcba:	f44f 7262 	mov.w	r2, #904	; 0x388
 800fcbe:	493e      	ldr	r1, [pc, #248]	; (800fdb8 <ip4_output_if_src+0x150>)
 800fcc0:	483c      	ldr	r0, [pc, #240]	; (800fdb4 <ip4_output_if_src+0x14c>)
 800fcc2:	f001 fad5 	bl	8011270 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fcc6:	69fb      	ldr	r3, [r7, #28]
 800fcc8:	78fa      	ldrb	r2, [r7, #3]
 800fcca:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fcd2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fcdc:	8b7b      	ldrh	r3, [r7, #26]
 800fcde:	089b      	lsrs	r3, r3, #2
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fce8:	b2da      	uxtb	r2, r3
 800fcea:	69fb      	ldr	r3, [r7, #28]
 800fcec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fcf4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	891b      	ldrh	r3, [r3, #8]
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7f7 fa20 	bl	8007140 <lwip_htons>
 800fd00:	4603      	mov	r3, r0
 800fd02:	461a      	mov	r2, r3
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	719a      	strb	r2, [r3, #6]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fd12:	4b2a      	ldr	r3, [pc, #168]	; (800fdbc <ip4_output_if_src+0x154>)
 800fd14:	881b      	ldrh	r3, [r3, #0]
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7f7 fa12 	bl	8007140 <lwip_htons>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	461a      	mov	r2, r3
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fd24:	4b25      	ldr	r3, [pc, #148]	; (800fdbc <ip4_output_if_src+0x154>)
 800fd26:	881b      	ldrh	r3, [r3, #0]
 800fd28:	3301      	adds	r3, #1
 800fd2a:	b29a      	uxth	r2, r3
 800fd2c:	4b23      	ldr	r3, [pc, #140]	; (800fdbc <ip4_output_if_src+0x154>)
 800fd2e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d104      	bne.n	800fd40 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fd36:	4b22      	ldr	r3, [pc, #136]	; (800fdc0 <ip4_output_if_src+0x158>)
 800fd38:	681a      	ldr	r2, [r3, #0]
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	60da      	str	r2, [r3, #12]
 800fd3e:	e003      	b.n	800fd48 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	681a      	ldr	r2, [r3, #0]
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fd48:	69fb      	ldr	r3, [r7, #28]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	729a      	strb	r2, [r3, #10]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	72da      	strb	r2, [r3, #11]
 800fd52:	e00f      	b.n	800fd74 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	895b      	ldrh	r3, [r3, #10]
 800fd58:	2b13      	cmp	r3, #19
 800fd5a:	d802      	bhi.n	800fd62 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fd5c:	f06f 0301 	mvn.w	r3, #1
 800fd60:	e020      	b.n	800fda4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fd68:	69fb      	ldr	r3, [r7, #28]
 800fd6a:	691b      	ldr	r3, [r3, #16]
 800fd6c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800fd6e:	f107 0314 	add.w	r3, r7, #20
 800fd72:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00c      	beq.n	800fd96 <ip4_output_if_src+0x12e>
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	891a      	ldrh	r2, [r3, #8]
 800fd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d906      	bls.n	800fd96 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd8c:	68f8      	ldr	r0, [r7, #12]
 800fd8e:	f000 fd4d 	bl	801082c <ip4_frag>
 800fd92:	4603      	mov	r3, r0
 800fd94:	e006      	b.n	800fda4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd98:	695b      	ldr	r3, [r3, #20]
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	68f9      	ldr	r1, [r7, #12]
 800fd9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fda0:	4798      	blx	r3
 800fda2:	4603      	mov	r3, r0
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3720      	adds	r7, #32
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	0801483c 	.word	0x0801483c
 800fdb0:	08014870 	.word	0x08014870
 800fdb4:	0801487c 	.word	0x0801487c
 800fdb8:	080148a4 	.word	0x080148a4
 800fdbc:	2000425a 	.word	0x2000425a
 800fdc0:	08014cb8 	.word	0x08014cb8

0800fdc4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b085      	sub	sp, #20
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdd8:	d002      	beq.n	800fde0 <ip4_addr_isbroadcast_u32+0x1c>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d101      	bne.n	800fde4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fde0:	2301      	movs	r3, #1
 800fde2:	e02a      	b.n	800fe3a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fdea:	f003 0302 	and.w	r3, r3, #2
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d101      	bne.n	800fdf6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	e021      	b.n	800fe3a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	3304      	adds	r3, #4
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	687a      	ldr	r2, [r7, #4]
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d101      	bne.n	800fe06 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800fe02:	2300      	movs	r3, #0
 800fe04:	e019      	b.n	800fe3a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fe06:	68fa      	ldr	r2, [r7, #12]
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	3304      	adds	r3, #4
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	405a      	eors	r2, r3
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	3308      	adds	r3, #8
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	4013      	ands	r3, r2
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d10d      	bne.n	800fe38 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	3308      	adds	r3, #8
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	43da      	mvns	r2, r3
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	3308      	adds	r3, #8
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d101      	bne.n	800fe38 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800fe34:	2301      	movs	r3, #1
 800fe36:	e000      	b.n	800fe3a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fe38:	2300      	movs	r3, #0
  }
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3714      	adds	r7, #20
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe44:	4770      	bx	lr
	...

0800fe48 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b084      	sub	sp, #16
 800fe4c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fe52:	4b12      	ldr	r3, [pc, #72]	; (800fe9c <ip_reass_tmr+0x54>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fe58:	e018      	b.n	800fe8c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	7fdb      	ldrb	r3, [r3, #31]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d00b      	beq.n	800fe7a <ip_reass_tmr+0x32>
      r->timer--;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	7fdb      	ldrb	r3, [r3, #31]
 800fe66:	3b01      	subs	r3, #1
 800fe68:	b2da      	uxtb	r2, r3
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	60fb      	str	r3, [r7, #12]
 800fe78:	e008      	b.n	800fe8c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fe84:	68b9      	ldr	r1, [r7, #8]
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 f80a 	bl	800fea0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d1e3      	bne.n	800fe5a <ip_reass_tmr+0x12>
    }
  }
}
 800fe92:	bf00      	nop
 800fe94:	bf00      	nop
 800fe96:	3710      	adds	r7, #16
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	2000425c 	.word	0x2000425c

0800fea0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b088      	sub	sp, #32
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800feaa:	2300      	movs	r3, #0
 800feac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800feae:	683a      	ldr	r2, [r7, #0]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d105      	bne.n	800fec2 <ip_reass_free_complete_datagram+0x22>
 800feb6:	4b45      	ldr	r3, [pc, #276]	; (800ffcc <ip_reass_free_complete_datagram+0x12c>)
 800feb8:	22ab      	movs	r2, #171	; 0xab
 800feba:	4945      	ldr	r1, [pc, #276]	; (800ffd0 <ip_reass_free_complete_datagram+0x130>)
 800febc:	4845      	ldr	r0, [pc, #276]	; (800ffd4 <ip_reass_free_complete_datagram+0x134>)
 800febe:	f001 f9d7 	bl	8011270 <iprintf>
  if (prev != NULL) {
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00a      	beq.n	800fede <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d005      	beq.n	800fede <ip_reass_free_complete_datagram+0x3e>
 800fed2:	4b3e      	ldr	r3, [pc, #248]	; (800ffcc <ip_reass_free_complete_datagram+0x12c>)
 800fed4:	22ad      	movs	r2, #173	; 0xad
 800fed6:	4940      	ldr	r1, [pc, #256]	; (800ffd8 <ip_reass_free_complete_datagram+0x138>)
 800fed8:	483e      	ldr	r0, [pc, #248]	; (800ffd4 <ip_reass_free_complete_datagram+0x134>)
 800feda:	f001 f9c9 	bl	8011270 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	889b      	ldrh	r3, [r3, #4]
 800feea:	b29b      	uxth	r3, r3
 800feec:	2b00      	cmp	r3, #0
 800feee:	d12a      	bne.n	800ff46 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fefe:	69bb      	ldr	r3, [r7, #24]
 800ff00:	6858      	ldr	r0, [r3, #4]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	3308      	adds	r3, #8
 800ff06:	2214      	movs	r2, #20
 800ff08:	4619      	mov	r1, r3
 800ff0a:	f001 f8f1 	bl	80110f0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ff0e:	2101      	movs	r1, #1
 800ff10:	69b8      	ldr	r0, [r7, #24]
 800ff12:	f7ff fc47 	bl	800f7a4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ff16:	69b8      	ldr	r0, [r7, #24]
 800ff18:	f7f8 fd4c 	bl	80089b4 <pbuf_clen>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ff20:	8bfa      	ldrh	r2, [r7, #30]
 800ff22:	8a7b      	ldrh	r3, [r7, #18]
 800ff24:	4413      	add	r3, r2
 800ff26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff2a:	db05      	blt.n	800ff38 <ip_reass_free_complete_datagram+0x98>
 800ff2c:	4b27      	ldr	r3, [pc, #156]	; (800ffcc <ip_reass_free_complete_datagram+0x12c>)
 800ff2e:	22bc      	movs	r2, #188	; 0xbc
 800ff30:	492a      	ldr	r1, [pc, #168]	; (800ffdc <ip_reass_free_complete_datagram+0x13c>)
 800ff32:	4828      	ldr	r0, [pc, #160]	; (800ffd4 <ip_reass_free_complete_datagram+0x134>)
 800ff34:	f001 f99c 	bl	8011270 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ff38:	8bfa      	ldrh	r2, [r7, #30]
 800ff3a:	8a7b      	ldrh	r3, [r7, #18]
 800ff3c:	4413      	add	r3, r2
 800ff3e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ff40:	69b8      	ldr	r0, [r7, #24]
 800ff42:	f7f8 fca9 	bl	8008898 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	685b      	ldr	r3, [r3, #4]
 800ff4a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ff4c:	e01f      	b.n	800ff8e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ff4e:	69bb      	ldr	r3, [r7, #24]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ff5e:	68f8      	ldr	r0, [r7, #12]
 800ff60:	f7f8 fd28 	bl	80089b4 <pbuf_clen>
 800ff64:	4603      	mov	r3, r0
 800ff66:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ff68:	8bfa      	ldrh	r2, [r7, #30]
 800ff6a:	8a7b      	ldrh	r3, [r7, #18]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff72:	db05      	blt.n	800ff80 <ip_reass_free_complete_datagram+0xe0>
 800ff74:	4b15      	ldr	r3, [pc, #84]	; (800ffcc <ip_reass_free_complete_datagram+0x12c>)
 800ff76:	22cc      	movs	r2, #204	; 0xcc
 800ff78:	4918      	ldr	r1, [pc, #96]	; (800ffdc <ip_reass_free_complete_datagram+0x13c>)
 800ff7a:	4816      	ldr	r0, [pc, #88]	; (800ffd4 <ip_reass_free_complete_datagram+0x134>)
 800ff7c:	f001 f978 	bl	8011270 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ff80:	8bfa      	ldrh	r2, [r7, #30]
 800ff82:	8a7b      	ldrh	r3, [r7, #18]
 800ff84:	4413      	add	r3, r2
 800ff86:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f7f8 fc85 	bl	8008898 <pbuf_free>
  while (p != NULL) {
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d1dc      	bne.n	800ff4e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ff94:	6839      	ldr	r1, [r7, #0]
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f000 f8c2 	bl	8010120 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ff9c:	4b10      	ldr	r3, [pc, #64]	; (800ffe0 <ip_reass_free_complete_datagram+0x140>)
 800ff9e:	881b      	ldrh	r3, [r3, #0]
 800ffa0:	8bfa      	ldrh	r2, [r7, #30]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d905      	bls.n	800ffb2 <ip_reass_free_complete_datagram+0x112>
 800ffa6:	4b09      	ldr	r3, [pc, #36]	; (800ffcc <ip_reass_free_complete_datagram+0x12c>)
 800ffa8:	22d2      	movs	r2, #210	; 0xd2
 800ffaa:	490e      	ldr	r1, [pc, #56]	; (800ffe4 <ip_reass_free_complete_datagram+0x144>)
 800ffac:	4809      	ldr	r0, [pc, #36]	; (800ffd4 <ip_reass_free_complete_datagram+0x134>)
 800ffae:	f001 f95f 	bl	8011270 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ffb2:	4b0b      	ldr	r3, [pc, #44]	; (800ffe0 <ip_reass_free_complete_datagram+0x140>)
 800ffb4:	881a      	ldrh	r2, [r3, #0]
 800ffb6:	8bfb      	ldrh	r3, [r7, #30]
 800ffb8:	1ad3      	subs	r3, r2, r3
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	4b08      	ldr	r3, [pc, #32]	; (800ffe0 <ip_reass_free_complete_datagram+0x140>)
 800ffbe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ffc0:	8bfb      	ldrh	r3, [r7, #30]
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3720      	adds	r7, #32
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	080148d4 	.word	0x080148d4
 800ffd0:	08014910 	.word	0x08014910
 800ffd4:	0801491c 	.word	0x0801491c
 800ffd8:	08014944 	.word	0x08014944
 800ffdc:	08014958 	.word	0x08014958
 800ffe0:	20004260 	.word	0x20004260
 800ffe4:	08014978 	.word	0x08014978

0800ffe8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b08a      	sub	sp, #40	; 0x28
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800fff2:	2300      	movs	r3, #0
 800fff4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800fff6:	2300      	movs	r3, #0
 800fff8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800fffa:	2300      	movs	r3, #0
 800fffc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800fffe:	2300      	movs	r3, #0
 8010000:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010002:	2300      	movs	r3, #0
 8010004:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010006:	4b28      	ldr	r3, [pc, #160]	; (80100a8 <ip_reass_remove_oldest_datagram+0xc0>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801000c:	e030      	b.n	8010070 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801000e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010010:	695a      	ldr	r2, [r3, #20]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	429a      	cmp	r2, r3
 8010018:	d10c      	bne.n	8010034 <ip_reass_remove_oldest_datagram+0x4c>
 801001a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801001c:	699a      	ldr	r2, [r3, #24]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	691b      	ldr	r3, [r3, #16]
 8010022:	429a      	cmp	r2, r3
 8010024:	d106      	bne.n	8010034 <ip_reass_remove_oldest_datagram+0x4c>
 8010026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010028:	899a      	ldrh	r2, [r3, #12]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	889b      	ldrh	r3, [r3, #4]
 801002e:	b29b      	uxth	r3, r3
 8010030:	429a      	cmp	r2, r3
 8010032:	d014      	beq.n	801005e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	3301      	adds	r3, #1
 8010038:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801003a:	6a3b      	ldr	r3, [r7, #32]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d104      	bne.n	801004a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010042:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	61bb      	str	r3, [r7, #24]
 8010048:	e009      	b.n	801005e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801004a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004c:	7fda      	ldrb	r2, [r3, #31]
 801004e:	6a3b      	ldr	r3, [r7, #32]
 8010050:	7fdb      	ldrb	r3, [r3, #31]
 8010052:	429a      	cmp	r2, r3
 8010054:	d803      	bhi.n	801005e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010058:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801005e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d001      	beq.n	801006a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010068:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801006a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010072:	2b00      	cmp	r3, #0
 8010074:	d1cb      	bne.n	801000e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010076:	6a3b      	ldr	r3, [r7, #32]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d008      	beq.n	801008e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801007c:	69b9      	ldr	r1, [r7, #24]
 801007e:	6a38      	ldr	r0, [r7, #32]
 8010080:	f7ff ff0e 	bl	800fea0 <ip_reass_free_complete_datagram>
 8010084:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010086:	697a      	ldr	r2, [r7, #20]
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	4413      	add	r3, r2
 801008c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801008e:	697a      	ldr	r2, [r7, #20]
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	429a      	cmp	r2, r3
 8010094:	da02      	bge.n	801009c <ip_reass_remove_oldest_datagram+0xb4>
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	2b01      	cmp	r3, #1
 801009a:	dcac      	bgt.n	800fff6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801009c:	697b      	ldr	r3, [r7, #20]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3728      	adds	r7, #40	; 0x28
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	2000425c 	.word	0x2000425c

080100ac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80100b6:	2004      	movs	r0, #4
 80100b8:	f7f7 fcf8 	bl	8007aac <memp_malloc>
 80100bc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d110      	bne.n	80100e6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80100c4:	6839      	ldr	r1, [r7, #0]
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f7ff ff8e 	bl	800ffe8 <ip_reass_remove_oldest_datagram>
 80100cc:	4602      	mov	r2, r0
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	4293      	cmp	r3, r2
 80100d2:	dc03      	bgt.n	80100dc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80100d4:	2004      	movs	r0, #4
 80100d6:	f7f7 fce9 	bl	8007aac <memp_malloc>
 80100da:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d101      	bne.n	80100e6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80100e2:	2300      	movs	r3, #0
 80100e4:	e016      	b.n	8010114 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80100e6:	2220      	movs	r2, #32
 80100e8:	2100      	movs	r1, #0
 80100ea:	68f8      	ldr	r0, [r7, #12]
 80100ec:	f001 f80e 	bl	801110c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	220f      	movs	r2, #15
 80100f4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80100f6:	4b09      	ldr	r3, [pc, #36]	; (801011c <ip_reass_enqueue_new_datagram+0x70>)
 80100f8:	681a      	ldr	r2, [r3, #0]
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80100fe:	4a07      	ldr	r2, [pc, #28]	; (801011c <ip_reass_enqueue_new_datagram+0x70>)
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	3308      	adds	r3, #8
 8010108:	2214      	movs	r2, #20
 801010a:	6879      	ldr	r1, [r7, #4]
 801010c:	4618      	mov	r0, r3
 801010e:	f000 ffef 	bl	80110f0 <memcpy>
  return ipr;
 8010112:	68fb      	ldr	r3, [r7, #12]
}
 8010114:	4618      	mov	r0, r3
 8010116:	3710      	adds	r7, #16
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}
 801011c:	2000425c 	.word	0x2000425c

08010120 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801012a:	4b10      	ldr	r3, [pc, #64]	; (801016c <ip_reass_dequeue_datagram+0x4c>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	429a      	cmp	r2, r3
 8010132:	d104      	bne.n	801013e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	4a0c      	ldr	r2, [pc, #48]	; (801016c <ip_reass_dequeue_datagram+0x4c>)
 801013a:	6013      	str	r3, [r2, #0]
 801013c:	e00d      	b.n	801015a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d106      	bne.n	8010152 <ip_reass_dequeue_datagram+0x32>
 8010144:	4b0a      	ldr	r3, [pc, #40]	; (8010170 <ip_reass_dequeue_datagram+0x50>)
 8010146:	f240 1245 	movw	r2, #325	; 0x145
 801014a:	490a      	ldr	r1, [pc, #40]	; (8010174 <ip_reass_dequeue_datagram+0x54>)
 801014c:	480a      	ldr	r0, [pc, #40]	; (8010178 <ip_reass_dequeue_datagram+0x58>)
 801014e:	f001 f88f 	bl	8011270 <iprintf>
    prev->next = ipr->next;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801015a:	6879      	ldr	r1, [r7, #4]
 801015c:	2004      	movs	r0, #4
 801015e:	f7f7 fcf7 	bl	8007b50 <memp_free>
}
 8010162:	bf00      	nop
 8010164:	3708      	adds	r7, #8
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}
 801016a:	bf00      	nop
 801016c:	2000425c 	.word	0x2000425c
 8010170:	080148d4 	.word	0x080148d4
 8010174:	0801499c 	.word	0x0801499c
 8010178:	0801491c 	.word	0x0801491c

0801017c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b08c      	sub	sp, #48	; 0x30
 8010180:	af00      	add	r7, sp, #0
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	60b9      	str	r1, [r7, #8]
 8010186:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010188:	2300      	movs	r3, #0
 801018a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801018c:	2301      	movs	r3, #1
 801018e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010196:	69fb      	ldr	r3, [r7, #28]
 8010198:	885b      	ldrh	r3, [r3, #2]
 801019a:	b29b      	uxth	r3, r3
 801019c:	4618      	mov	r0, r3
 801019e:	f7f6 ffcf 	bl	8007140 <lwip_htons>
 80101a2:	4603      	mov	r3, r0
 80101a4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80101a6:	69fb      	ldr	r3, [r7, #28]
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	f003 030f 	and.w	r3, r3, #15
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	009b      	lsls	r3, r3, #2
 80101b2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80101b4:	7e7b      	ldrb	r3, [r7, #25]
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	8b7a      	ldrh	r2, [r7, #26]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d202      	bcs.n	80101c4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80101be:	f04f 33ff 	mov.w	r3, #4294967295
 80101c2:	e135      	b.n	8010430 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80101c4:	7e7b      	ldrb	r3, [r7, #25]
 80101c6:	b29b      	uxth	r3, r3
 80101c8:	8b7a      	ldrh	r2, [r7, #26]
 80101ca:	1ad3      	subs	r3, r2, r3
 80101cc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80101ce:	69fb      	ldr	r3, [r7, #28]
 80101d0:	88db      	ldrh	r3, [r3, #6]
 80101d2:	b29b      	uxth	r3, r3
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7f6 ffb3 	bl	8007140 <lwip_htons>
 80101da:	4603      	mov	r3, r0
 80101dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	00db      	lsls	r3, r3, #3
 80101e4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80101ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ee:	2200      	movs	r2, #0
 80101f0:	701a      	strb	r2, [r3, #0]
 80101f2:	2200      	movs	r2, #0
 80101f4:	705a      	strb	r2, [r3, #1]
 80101f6:	2200      	movs	r2, #0
 80101f8:	709a      	strb	r2, [r3, #2]
 80101fa:	2200      	movs	r2, #0
 80101fc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80101fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010200:	8afa      	ldrh	r2, [r7, #22]
 8010202:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010204:	8afa      	ldrh	r2, [r7, #22]
 8010206:	8b7b      	ldrh	r3, [r7, #26]
 8010208:	4413      	add	r3, r2
 801020a:	b29a      	uxth	r2, r3
 801020c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801020e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010212:	88db      	ldrh	r3, [r3, #6]
 8010214:	b29b      	uxth	r3, r3
 8010216:	8afa      	ldrh	r2, [r7, #22]
 8010218:	429a      	cmp	r2, r3
 801021a:	d902      	bls.n	8010222 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801021c:	f04f 33ff 	mov.w	r3, #4294967295
 8010220:	e106      	b.n	8010430 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	627b      	str	r3, [r7, #36]	; 0x24
 8010228:	e068      	b.n	80102fc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801022a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010232:	889b      	ldrh	r3, [r3, #4]
 8010234:	b29a      	uxth	r2, r3
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	889b      	ldrh	r3, [r3, #4]
 801023a:	b29b      	uxth	r3, r3
 801023c:	429a      	cmp	r2, r3
 801023e:	d235      	bcs.n	80102ac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010244:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010248:	2b00      	cmp	r3, #0
 801024a:	d020      	beq.n	801028e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024e:	889b      	ldrh	r3, [r3, #4]
 8010250:	b29a      	uxth	r2, r3
 8010252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010254:	88db      	ldrh	r3, [r3, #6]
 8010256:	b29b      	uxth	r3, r3
 8010258:	429a      	cmp	r2, r3
 801025a:	d307      	bcc.n	801026c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801025c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025e:	88db      	ldrh	r3, [r3, #6]
 8010260:	b29a      	uxth	r2, r3
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	889b      	ldrh	r3, [r3, #4]
 8010266:	b29b      	uxth	r3, r3
 8010268:	429a      	cmp	r2, r3
 801026a:	d902      	bls.n	8010272 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801026c:	f04f 33ff 	mov.w	r3, #4294967295
 8010270:	e0de      	b.n	8010430 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010274:	68ba      	ldr	r2, [r7, #8]
 8010276:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801027a:	88db      	ldrh	r3, [r3, #6]
 801027c:	b29a      	uxth	r2, r3
 801027e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010280:	889b      	ldrh	r3, [r3, #4]
 8010282:	b29b      	uxth	r3, r3
 8010284:	429a      	cmp	r2, r3
 8010286:	d03d      	beq.n	8010304 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010288:	2300      	movs	r3, #0
 801028a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801028c:	e03a      	b.n	8010304 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801028e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010290:	88db      	ldrh	r3, [r3, #6]
 8010292:	b29a      	uxth	r2, r3
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	889b      	ldrh	r3, [r3, #4]
 8010298:	b29b      	uxth	r3, r3
 801029a:	429a      	cmp	r2, r3
 801029c:	d902      	bls.n	80102a4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801029e:	f04f 33ff 	mov.w	r3, #4294967295
 80102a2:	e0c5      	b.n	8010430 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	68ba      	ldr	r2, [r7, #8]
 80102a8:	605a      	str	r2, [r3, #4]
      break;
 80102aa:	e02b      	b.n	8010304 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80102ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ae:	889b      	ldrh	r3, [r3, #4]
 80102b0:	b29a      	uxth	r2, r3
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	889b      	ldrh	r3, [r3, #4]
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d102      	bne.n	80102c2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80102bc:	f04f 33ff 	mov.w	r3, #4294967295
 80102c0:	e0b6      	b.n	8010430 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80102c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c4:	889b      	ldrh	r3, [r3, #4]
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	88db      	ldrh	r3, [r3, #6]
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d202      	bcs.n	80102d8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80102d2:	f04f 33ff 	mov.w	r3, #4294967295
 80102d6:	e0ab      	b.n	8010430 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80102d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d009      	beq.n	80102f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80102de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102e0:	88db      	ldrh	r3, [r3, #6]
 80102e2:	b29a      	uxth	r2, r3
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	889b      	ldrh	r3, [r3, #4]
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d001      	beq.n	80102f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80102ee:	2300      	movs	r3, #0
 80102f0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80102fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d193      	bne.n	801022a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010302:	e000      	b.n	8010306 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010304:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010308:	2b00      	cmp	r3, #0
 801030a:	d12d      	bne.n	8010368 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801030c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801030e:	2b00      	cmp	r3, #0
 8010310:	d01c      	beq.n	801034c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010314:	88db      	ldrh	r3, [r3, #6]
 8010316:	b29a      	uxth	r2, r3
 8010318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031a:	889b      	ldrh	r3, [r3, #4]
 801031c:	b29b      	uxth	r3, r3
 801031e:	429a      	cmp	r2, r3
 8010320:	d906      	bls.n	8010330 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010322:	4b45      	ldr	r3, [pc, #276]	; (8010438 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010324:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010328:	4944      	ldr	r1, [pc, #272]	; (801043c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801032a:	4845      	ldr	r0, [pc, #276]	; (8010440 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801032c:	f000 ffa0 	bl	8011270 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010332:	68ba      	ldr	r2, [r7, #8]
 8010334:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010338:	88db      	ldrh	r3, [r3, #6]
 801033a:	b29a      	uxth	r2, r3
 801033c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801033e:	889b      	ldrh	r3, [r3, #4]
 8010340:	b29b      	uxth	r3, r3
 8010342:	429a      	cmp	r2, r3
 8010344:	d010      	beq.n	8010368 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010346:	2300      	movs	r3, #0
 8010348:	623b      	str	r3, [r7, #32]
 801034a:	e00d      	b.n	8010368 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d006      	beq.n	8010362 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010354:	4b38      	ldr	r3, [pc, #224]	; (8010438 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010356:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801035a:	493a      	ldr	r1, [pc, #232]	; (8010444 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801035c:	4838      	ldr	r0, [pc, #224]	; (8010440 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801035e:	f000 ff87 	bl	8011270 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	68ba      	ldr	r2, [r7, #8]
 8010366:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d105      	bne.n	801037a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	7f9b      	ldrb	r3, [r3, #30]
 8010372:	f003 0301 	and.w	r3, r3, #1
 8010376:	2b00      	cmp	r3, #0
 8010378:	d059      	beq.n	801042e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801037a:	6a3b      	ldr	r3, [r7, #32]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d04f      	beq.n	8010420 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	685b      	ldr	r3, [r3, #4]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d006      	beq.n	8010396 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	685b      	ldr	r3, [r3, #4]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	889b      	ldrh	r3, [r3, #4]
 8010390:	b29b      	uxth	r3, r3
 8010392:	2b00      	cmp	r3, #0
 8010394:	d002      	beq.n	801039c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010396:	2300      	movs	r3, #0
 8010398:	623b      	str	r3, [r7, #32]
 801039a:	e041      	b.n	8010420 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801039c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80103a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80103a6:	e012      	b.n	80103ce <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80103a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103aa:	685b      	ldr	r3, [r3, #4]
 80103ac:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80103ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b0:	88db      	ldrh	r3, [r3, #6]
 80103b2:	b29a      	uxth	r2, r3
 80103b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b6:	889b      	ldrh	r3, [r3, #4]
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d002      	beq.n	80103c4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80103be:	2300      	movs	r3, #0
 80103c0:	623b      	str	r3, [r7, #32]
            break;
 80103c2:	e007      	b.n	80103d4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80103c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80103c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80103ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d1e9      	bne.n	80103a8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80103d4:	6a3b      	ldr	r3, [r7, #32]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d022      	beq.n	8010420 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d106      	bne.n	80103f0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80103e2:	4b15      	ldr	r3, [pc, #84]	; (8010438 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80103e4:	f240 12df 	movw	r2, #479	; 0x1df
 80103e8:	4917      	ldr	r1, [pc, #92]	; (8010448 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80103ea:	4815      	ldr	r0, [pc, #84]	; (8010440 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80103ec:	f000 ff40 	bl	8011270 <iprintf>
          LWIP_ASSERT("sanity check",
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	685b      	ldr	r3, [r3, #4]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d106      	bne.n	801040a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80103fc:	4b0e      	ldr	r3, [pc, #56]	; (8010438 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80103fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010402:	4911      	ldr	r1, [pc, #68]	; (8010448 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010404:	480e      	ldr	r0, [pc, #56]	; (8010440 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010406:	f000 ff33 	bl	8011270 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d006      	beq.n	8010420 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010412:	4b09      	ldr	r3, [pc, #36]	; (8010438 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010414:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010418:	490c      	ldr	r1, [pc, #48]	; (801044c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801041a:	4809      	ldr	r0, [pc, #36]	; (8010440 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801041c:	f000 ff28 	bl	8011270 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010420:	6a3b      	ldr	r3, [r7, #32]
 8010422:	2b00      	cmp	r3, #0
 8010424:	bf14      	ite	ne
 8010426:	2301      	movne	r3, #1
 8010428:	2300      	moveq	r3, #0
 801042a:	b2db      	uxtb	r3, r3
 801042c:	e000      	b.n	8010430 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801042e:	2300      	movs	r3, #0
}
 8010430:	4618      	mov	r0, r3
 8010432:	3730      	adds	r7, #48	; 0x30
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	080148d4 	.word	0x080148d4
 801043c:	080149b8 	.word	0x080149b8
 8010440:	0801491c 	.word	0x0801491c
 8010444:	080149d8 	.word	0x080149d8
 8010448:	08014a10 	.word	0x08014a10
 801044c:	08014a20 	.word	0x08014a20

08010450 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b08e      	sub	sp, #56	; 0x38
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801045e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	f003 030f 	and.w	r3, r3, #15
 8010466:	b2db      	uxtb	r3, r3
 8010468:	009b      	lsls	r3, r3, #2
 801046a:	b2db      	uxtb	r3, r3
 801046c:	2b14      	cmp	r3, #20
 801046e:	f040 8167 	bne.w	8010740 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010474:	88db      	ldrh	r3, [r3, #6]
 8010476:	b29b      	uxth	r3, r3
 8010478:	4618      	mov	r0, r3
 801047a:	f7f6 fe61 	bl	8007140 <lwip_htons>
 801047e:	4603      	mov	r3, r0
 8010480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010484:	b29b      	uxth	r3, r3
 8010486:	00db      	lsls	r3, r3, #3
 8010488:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801048a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048c:	885b      	ldrh	r3, [r3, #2]
 801048e:	b29b      	uxth	r3, r3
 8010490:	4618      	mov	r0, r3
 8010492:	f7f6 fe55 	bl	8007140 <lwip_htons>
 8010496:	4603      	mov	r3, r0
 8010498:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801049a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	f003 030f 	and.w	r3, r3, #15
 80104a2:	b2db      	uxtb	r3, r3
 80104a4:	009b      	lsls	r3, r3, #2
 80104a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80104aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80104b2:	429a      	cmp	r2, r3
 80104b4:	f0c0 8146 	bcc.w	8010744 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80104b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80104bc:	b29b      	uxth	r3, r3
 80104be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80104c0:	1ad3      	subs	r3, r2, r3
 80104c2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f7f8 fa75 	bl	80089b4 <pbuf_clen>
 80104ca:	4603      	mov	r3, r0
 80104cc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80104ce:	4b9f      	ldr	r3, [pc, #636]	; (801074c <ip4_reass+0x2fc>)
 80104d0:	881b      	ldrh	r3, [r3, #0]
 80104d2:	461a      	mov	r2, r3
 80104d4:	8c3b      	ldrh	r3, [r7, #32]
 80104d6:	4413      	add	r3, r2
 80104d8:	2b0a      	cmp	r3, #10
 80104da:	dd10      	ble.n	80104fe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80104dc:	8c3b      	ldrh	r3, [r7, #32]
 80104de:	4619      	mov	r1, r3
 80104e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104e2:	f7ff fd81 	bl	800ffe8 <ip_reass_remove_oldest_datagram>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	f000 812d 	beq.w	8010748 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80104ee:	4b97      	ldr	r3, [pc, #604]	; (801074c <ip4_reass+0x2fc>)
 80104f0:	881b      	ldrh	r3, [r3, #0]
 80104f2:	461a      	mov	r2, r3
 80104f4:	8c3b      	ldrh	r3, [r7, #32]
 80104f6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80104f8:	2b0a      	cmp	r3, #10
 80104fa:	f300 8125 	bgt.w	8010748 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80104fe:	4b94      	ldr	r3, [pc, #592]	; (8010750 <ip4_reass+0x300>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	633b      	str	r3, [r7, #48]	; 0x30
 8010504:	e015      	b.n	8010532 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010508:	695a      	ldr	r2, [r3, #20]
 801050a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	429a      	cmp	r2, r3
 8010510:	d10c      	bne.n	801052c <ip4_reass+0xdc>
 8010512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010514:	699a      	ldr	r2, [r3, #24]
 8010516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010518:	691b      	ldr	r3, [r3, #16]
 801051a:	429a      	cmp	r2, r3
 801051c:	d106      	bne.n	801052c <ip4_reass+0xdc>
 801051e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010520:	899a      	ldrh	r2, [r3, #12]
 8010522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010524:	889b      	ldrh	r3, [r3, #4]
 8010526:	b29b      	uxth	r3, r3
 8010528:	429a      	cmp	r2, r3
 801052a:	d006      	beq.n	801053a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801052c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	633b      	str	r3, [r7, #48]	; 0x30
 8010532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1e6      	bne.n	8010506 <ip4_reass+0xb6>
 8010538:	e000      	b.n	801053c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801053a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801053c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801053e:	2b00      	cmp	r3, #0
 8010540:	d109      	bne.n	8010556 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010542:	8c3b      	ldrh	r3, [r7, #32]
 8010544:	4619      	mov	r1, r3
 8010546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010548:	f7ff fdb0 	bl	80100ac <ip_reass_enqueue_new_datagram>
 801054c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801054e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010550:	2b00      	cmp	r3, #0
 8010552:	d11c      	bne.n	801058e <ip4_reass+0x13e>
      goto nullreturn;
 8010554:	e109      	b.n	801076a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010558:	88db      	ldrh	r3, [r3, #6]
 801055a:	b29b      	uxth	r3, r3
 801055c:	4618      	mov	r0, r3
 801055e:	f7f6 fdef 	bl	8007140 <lwip_htons>
 8010562:	4603      	mov	r3, r0
 8010564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010568:	2b00      	cmp	r3, #0
 801056a:	d110      	bne.n	801058e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056e:	89db      	ldrh	r3, [r3, #14]
 8010570:	4618      	mov	r0, r3
 8010572:	f7f6 fde5 	bl	8007140 <lwip_htons>
 8010576:	4603      	mov	r3, r0
 8010578:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801057c:	2b00      	cmp	r3, #0
 801057e:	d006      	beq.n	801058e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010582:	3308      	adds	r3, #8
 8010584:	2214      	movs	r2, #20
 8010586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010588:	4618      	mov	r0, r3
 801058a:	f000 fdb1 	bl	80110f0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801058e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010590:	88db      	ldrh	r3, [r3, #6]
 8010592:	b29b      	uxth	r3, r3
 8010594:	f003 0320 	and.w	r3, r3, #32
 8010598:	2b00      	cmp	r3, #0
 801059a:	bf0c      	ite	eq
 801059c:	2301      	moveq	r3, #1
 801059e:	2300      	movne	r3, #0
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d00e      	beq.n	80105c8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80105aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80105ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80105ae:	4413      	add	r3, r2
 80105b0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80105b2:	8b7a      	ldrh	r2, [r7, #26]
 80105b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80105b6:	429a      	cmp	r2, r3
 80105b8:	f0c0 80a0 	bcc.w	80106fc <ip4_reass+0x2ac>
 80105bc:	8b7b      	ldrh	r3, [r7, #26]
 80105be:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80105c2:	4293      	cmp	r3, r2
 80105c4:	f200 809a 	bhi.w	80106fc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80105c8:	69fa      	ldr	r2, [r7, #28]
 80105ca:	6879      	ldr	r1, [r7, #4]
 80105cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105ce:	f7ff fdd5 	bl	801017c <ip_reass_chain_frag_into_datagram_and_validate>
 80105d2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105da:	f000 8091 	beq.w	8010700 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80105de:	4b5b      	ldr	r3, [pc, #364]	; (801074c <ip4_reass+0x2fc>)
 80105e0:	881a      	ldrh	r2, [r3, #0]
 80105e2:	8c3b      	ldrh	r3, [r7, #32]
 80105e4:	4413      	add	r3, r2
 80105e6:	b29a      	uxth	r2, r3
 80105e8:	4b58      	ldr	r3, [pc, #352]	; (801074c <ip4_reass+0x2fc>)
 80105ea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00d      	beq.n	801060e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80105f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80105f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80105f6:	4413      	add	r3, r2
 80105f8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80105fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105fc:	8a7a      	ldrh	r2, [r7, #18]
 80105fe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010602:	7f9b      	ldrb	r3, [r3, #30]
 8010604:	f043 0301 	orr.w	r3, r3, #1
 8010608:	b2da      	uxtb	r2, r3
 801060a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801060c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801060e:	697b      	ldr	r3, [r7, #20]
 8010610:	2b01      	cmp	r3, #1
 8010612:	d171      	bne.n	80106f8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010616:	8b9b      	ldrh	r3, [r3, #28]
 8010618:	3314      	adds	r3, #20
 801061a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801061c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010628:	685b      	ldr	r3, [r3, #4]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010630:	3308      	adds	r3, #8
 8010632:	2214      	movs	r2, #20
 8010634:	4619      	mov	r1, r3
 8010636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010638:	f000 fd5a 	bl	80110f0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801063c:	8a3b      	ldrh	r3, [r7, #16]
 801063e:	4618      	mov	r0, r3
 8010640:	f7f6 fd7e 	bl	8007140 <lwip_htons>
 8010644:	4603      	mov	r3, r0
 8010646:	461a      	mov	r2, r3
 8010648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064e:	2200      	movs	r2, #0
 8010650:	719a      	strb	r2, [r3, #6]
 8010652:	2200      	movs	r2, #0
 8010654:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010658:	2200      	movs	r2, #0
 801065a:	729a      	strb	r2, [r3, #10]
 801065c:	2200      	movs	r2, #0
 801065e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010666:	e00d      	b.n	8010684 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801066e:	2114      	movs	r1, #20
 8010670:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010672:	f7f8 f88b 	bl	800878c <pbuf_remove_header>
      pbuf_cat(p, r);
 8010676:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f7f8 f9db 	bl	8008a34 <pbuf_cat>
      r = iprh->next_pbuf;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010686:	2b00      	cmp	r3, #0
 8010688:	d1ee      	bne.n	8010668 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801068a:	4b31      	ldr	r3, [pc, #196]	; (8010750 <ip4_reass+0x300>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010690:	429a      	cmp	r2, r3
 8010692:	d102      	bne.n	801069a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010694:	2300      	movs	r3, #0
 8010696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010698:	e010      	b.n	80106bc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801069a:	4b2d      	ldr	r3, [pc, #180]	; (8010750 <ip4_reass+0x300>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106a0:	e007      	b.n	80106b2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80106a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d006      	beq.n	80106ba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80106ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d1f4      	bne.n	80106a2 <ip4_reass+0x252>
 80106b8:	e000      	b.n	80106bc <ip4_reass+0x26c>
          break;
 80106ba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80106bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106c0:	f7ff fd2e 	bl	8010120 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f7f8 f975 	bl	80089b4 <pbuf_clen>
 80106ca:	4603      	mov	r3, r0
 80106cc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80106ce:	4b1f      	ldr	r3, [pc, #124]	; (801074c <ip4_reass+0x2fc>)
 80106d0:	881b      	ldrh	r3, [r3, #0]
 80106d2:	8c3a      	ldrh	r2, [r7, #32]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d906      	bls.n	80106e6 <ip4_reass+0x296>
 80106d8:	4b1e      	ldr	r3, [pc, #120]	; (8010754 <ip4_reass+0x304>)
 80106da:	f240 229b 	movw	r2, #667	; 0x29b
 80106de:	491e      	ldr	r1, [pc, #120]	; (8010758 <ip4_reass+0x308>)
 80106e0:	481e      	ldr	r0, [pc, #120]	; (801075c <ip4_reass+0x30c>)
 80106e2:	f000 fdc5 	bl	8011270 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80106e6:	4b19      	ldr	r3, [pc, #100]	; (801074c <ip4_reass+0x2fc>)
 80106e8:	881a      	ldrh	r2, [r3, #0]
 80106ea:	8c3b      	ldrh	r3, [r7, #32]
 80106ec:	1ad3      	subs	r3, r2, r3
 80106ee:	b29a      	uxth	r2, r3
 80106f0:	4b16      	ldr	r3, [pc, #88]	; (801074c <ip4_reass+0x2fc>)
 80106f2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	e03c      	b.n	8010772 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80106f8:	2300      	movs	r3, #0
 80106fa:	e03a      	b.n	8010772 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80106fc:	bf00      	nop
 80106fe:	e000      	b.n	8010702 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8010700:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010704:	2b00      	cmp	r3, #0
 8010706:	d106      	bne.n	8010716 <ip4_reass+0x2c6>
 8010708:	4b12      	ldr	r3, [pc, #72]	; (8010754 <ip4_reass+0x304>)
 801070a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801070e:	4914      	ldr	r1, [pc, #80]	; (8010760 <ip4_reass+0x310>)
 8010710:	4812      	ldr	r0, [pc, #72]	; (801075c <ip4_reass+0x30c>)
 8010712:	f000 fdad 	bl	8011270 <iprintf>
  if (ipr->p == NULL) {
 8010716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d124      	bne.n	8010768 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801071e:	4b0c      	ldr	r3, [pc, #48]	; (8010750 <ip4_reass+0x300>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010724:	429a      	cmp	r2, r3
 8010726:	d006      	beq.n	8010736 <ip4_reass+0x2e6>
 8010728:	4b0a      	ldr	r3, [pc, #40]	; (8010754 <ip4_reass+0x304>)
 801072a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801072e:	490d      	ldr	r1, [pc, #52]	; (8010764 <ip4_reass+0x314>)
 8010730:	480a      	ldr	r0, [pc, #40]	; (801075c <ip4_reass+0x30c>)
 8010732:	f000 fd9d 	bl	8011270 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010736:	2100      	movs	r1, #0
 8010738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801073a:	f7ff fcf1 	bl	8010120 <ip_reass_dequeue_datagram>
 801073e:	e014      	b.n	801076a <ip4_reass+0x31a>
    goto nullreturn;
 8010740:	bf00      	nop
 8010742:	e012      	b.n	801076a <ip4_reass+0x31a>
    goto nullreturn;
 8010744:	bf00      	nop
 8010746:	e010      	b.n	801076a <ip4_reass+0x31a>
      goto nullreturn;
 8010748:	bf00      	nop
 801074a:	e00e      	b.n	801076a <ip4_reass+0x31a>
 801074c:	20004260 	.word	0x20004260
 8010750:	2000425c 	.word	0x2000425c
 8010754:	080148d4 	.word	0x080148d4
 8010758:	08014a44 	.word	0x08014a44
 801075c:	0801491c 	.word	0x0801491c
 8010760:	08014a60 	.word	0x08014a60
 8010764:	08014a6c 	.word	0x08014a6c
  }

nullreturn:
 8010768:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f7f8 f894 	bl	8008898 <pbuf_free>
  return NULL;
 8010770:	2300      	movs	r3, #0
}
 8010772:	4618      	mov	r0, r3
 8010774:	3738      	adds	r7, #56	; 0x38
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop

0801077c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010780:	2005      	movs	r0, #5
 8010782:	f7f7 f993 	bl	8007aac <memp_malloc>
 8010786:	4603      	mov	r3, r0
}
 8010788:	4618      	mov	r0, r3
 801078a:	bd80      	pop	{r7, pc}

0801078c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d106      	bne.n	80107a8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801079a:	4b07      	ldr	r3, [pc, #28]	; (80107b8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801079c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80107a0:	4906      	ldr	r1, [pc, #24]	; (80107bc <ip_frag_free_pbuf_custom_ref+0x30>)
 80107a2:	4807      	ldr	r0, [pc, #28]	; (80107c0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80107a4:	f000 fd64 	bl	8011270 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80107a8:	6879      	ldr	r1, [r7, #4]
 80107aa:	2005      	movs	r0, #5
 80107ac:	f7f7 f9d0 	bl	8007b50 <memp_free>
}
 80107b0:	bf00      	nop
 80107b2:	3708      	adds	r7, #8
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	080148d4 	.word	0x080148d4
 80107bc:	08014a8c 	.word	0x08014a8c
 80107c0:	0801491c 	.word	0x0801491c

080107c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b084      	sub	sp, #16
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d106      	bne.n	80107e4 <ipfrag_free_pbuf_custom+0x20>
 80107d6:	4b11      	ldr	r3, [pc, #68]	; (801081c <ipfrag_free_pbuf_custom+0x58>)
 80107d8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80107dc:	4910      	ldr	r1, [pc, #64]	; (8010820 <ipfrag_free_pbuf_custom+0x5c>)
 80107de:	4811      	ldr	r0, [pc, #68]	; (8010824 <ipfrag_free_pbuf_custom+0x60>)
 80107e0:	f000 fd46 	bl	8011270 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80107e4:	68fa      	ldr	r2, [r7, #12]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d006      	beq.n	80107fa <ipfrag_free_pbuf_custom+0x36>
 80107ec:	4b0b      	ldr	r3, [pc, #44]	; (801081c <ipfrag_free_pbuf_custom+0x58>)
 80107ee:	f240 22cf 	movw	r2, #719	; 0x2cf
 80107f2:	490d      	ldr	r1, [pc, #52]	; (8010828 <ipfrag_free_pbuf_custom+0x64>)
 80107f4:	480b      	ldr	r0, [pc, #44]	; (8010824 <ipfrag_free_pbuf_custom+0x60>)
 80107f6:	f000 fd3b 	bl	8011270 <iprintf>
  if (pcr->original != NULL) {
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	695b      	ldr	r3, [r3, #20]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d004      	beq.n	801080c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	695b      	ldr	r3, [r3, #20]
 8010806:	4618      	mov	r0, r3
 8010808:	f7f8 f846 	bl	8008898 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801080c:	68f8      	ldr	r0, [r7, #12]
 801080e:	f7ff ffbd 	bl	801078c <ip_frag_free_pbuf_custom_ref>
}
 8010812:	bf00      	nop
 8010814:	3710      	adds	r7, #16
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	080148d4 	.word	0x080148d4
 8010820:	08014a98 	.word	0x08014a98
 8010824:	0801491c 	.word	0x0801491c
 8010828:	08014aa4 	.word	0x08014aa4

0801082c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b094      	sub	sp, #80	; 0x50
 8010830:	af02      	add	r7, sp, #8
 8010832:	60f8      	str	r0, [r7, #12]
 8010834:	60b9      	str	r1, [r7, #8]
 8010836:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010838:	2300      	movs	r3, #0
 801083a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010842:	3b14      	subs	r3, #20
 8010844:	2b00      	cmp	r3, #0
 8010846:	da00      	bge.n	801084a <ip4_frag+0x1e>
 8010848:	3307      	adds	r3, #7
 801084a:	10db      	asrs	r3, r3, #3
 801084c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801084e:	2314      	movs	r3, #20
 8010850:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801085a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801085c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	f003 030f 	and.w	r3, r3, #15
 8010864:	b2db      	uxtb	r3, r3
 8010866:	009b      	lsls	r3, r3, #2
 8010868:	b2db      	uxtb	r3, r3
 801086a:	2b14      	cmp	r3, #20
 801086c:	d002      	beq.n	8010874 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801086e:	f06f 0305 	mvn.w	r3, #5
 8010872:	e110      	b.n	8010a96 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	895b      	ldrh	r3, [r3, #10]
 8010878:	2b13      	cmp	r3, #19
 801087a:	d809      	bhi.n	8010890 <ip4_frag+0x64>
 801087c:	4b88      	ldr	r3, [pc, #544]	; (8010aa0 <ip4_frag+0x274>)
 801087e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010882:	4988      	ldr	r1, [pc, #544]	; (8010aa4 <ip4_frag+0x278>)
 8010884:	4888      	ldr	r0, [pc, #544]	; (8010aa8 <ip4_frag+0x27c>)
 8010886:	f000 fcf3 	bl	8011270 <iprintf>
 801088a:	f06f 0305 	mvn.w	r3, #5
 801088e:	e102      	b.n	8010a96 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010892:	88db      	ldrh	r3, [r3, #6]
 8010894:	b29b      	uxth	r3, r3
 8010896:	4618      	mov	r0, r3
 8010898:	f7f6 fc52 	bl	8007140 <lwip_htons>
 801089c:	4603      	mov	r3, r0
 801089e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80108a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80108a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80108a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80108aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80108ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80108b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	891b      	ldrh	r3, [r3, #8]
 80108b6:	3b14      	subs	r3, #20
 80108b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80108bc:	e0e1      	b.n	8010a82 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80108be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80108c0:	00db      	lsls	r3, r3, #3
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80108c8:	4293      	cmp	r3, r2
 80108ca:	bf28      	it	cs
 80108cc:	4613      	movcs	r3, r2
 80108ce:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80108d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80108d4:	2114      	movs	r1, #20
 80108d6:	200e      	movs	r0, #14
 80108d8:	f7f7 fcfa 	bl	80082d0 <pbuf_alloc>
 80108dc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80108de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	f000 80d5 	beq.w	8010a90 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80108e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e8:	895b      	ldrh	r3, [r3, #10]
 80108ea:	2b13      	cmp	r3, #19
 80108ec:	d806      	bhi.n	80108fc <ip4_frag+0xd0>
 80108ee:	4b6c      	ldr	r3, [pc, #432]	; (8010aa0 <ip4_frag+0x274>)
 80108f0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80108f4:	496d      	ldr	r1, [pc, #436]	; (8010aac <ip4_frag+0x280>)
 80108f6:	486c      	ldr	r0, [pc, #432]	; (8010aa8 <ip4_frag+0x27c>)
 80108f8:	f000 fcba 	bl	8011270 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80108fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fe:	685b      	ldr	r3, [r3, #4]
 8010900:	2214      	movs	r2, #20
 8010902:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010904:	4618      	mov	r0, r3
 8010906:	f000 fbf3 	bl	80110f0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010910:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010912:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010916:	e064      	b.n	80109e2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	895a      	ldrh	r2, [r3, #10]
 801091c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801091e:	1ad3      	subs	r3, r2, r3
 8010920:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	895b      	ldrh	r3, [r3, #10]
 8010926:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010928:	429a      	cmp	r2, r3
 801092a:	d906      	bls.n	801093a <ip4_frag+0x10e>
 801092c:	4b5c      	ldr	r3, [pc, #368]	; (8010aa0 <ip4_frag+0x274>)
 801092e:	f240 322d 	movw	r2, #813	; 0x32d
 8010932:	495f      	ldr	r1, [pc, #380]	; (8010ab0 <ip4_frag+0x284>)
 8010934:	485c      	ldr	r0, [pc, #368]	; (8010aa8 <ip4_frag+0x27c>)
 8010936:	f000 fc9b 	bl	8011270 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801093a:	8bfa      	ldrh	r2, [r7, #30]
 801093c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010940:	4293      	cmp	r3, r2
 8010942:	bf28      	it	cs
 8010944:	4613      	movcs	r3, r2
 8010946:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801094a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801094e:	2b00      	cmp	r3, #0
 8010950:	d105      	bne.n	801095e <ip4_frag+0x132>
        poff = 0;
 8010952:	2300      	movs	r3, #0
 8010954:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	60fb      	str	r3, [r7, #12]
        continue;
 801095c:	e041      	b.n	80109e2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801095e:	f7ff ff0d 	bl	801077c <ip_frag_alloc_pbuf_custom_ref>
 8010962:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010964:	69bb      	ldr	r3, [r7, #24]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d103      	bne.n	8010972 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801096a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801096c:	f7f7 ff94 	bl	8008898 <pbuf_free>
        goto memerr;
 8010970:	e08f      	b.n	8010a92 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010972:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010978:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801097a:	4413      	add	r3, r2
 801097c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010980:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010984:	9201      	str	r2, [sp, #4]
 8010986:	9300      	str	r3, [sp, #0]
 8010988:	4603      	mov	r3, r0
 801098a:	2241      	movs	r2, #65	; 0x41
 801098c:	2000      	movs	r0, #0
 801098e:	f7f7 fdc9 	bl	8008524 <pbuf_alloced_custom>
 8010992:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d106      	bne.n	80109a8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801099a:	69b8      	ldr	r0, [r7, #24]
 801099c:	f7ff fef6 	bl	801078c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80109a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109a2:	f7f7 ff79 	bl	8008898 <pbuf_free>
        goto memerr;
 80109a6:	e074      	b.n	8010a92 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80109a8:	68f8      	ldr	r0, [r7, #12]
 80109aa:	f7f8 f81b 	bl	80089e4 <pbuf_ref>
      pcr->original = p;
 80109ae:	69bb      	ldr	r3, [r7, #24]
 80109b0:	68fa      	ldr	r2, [r7, #12]
 80109b2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80109b4:	69bb      	ldr	r3, [r7, #24]
 80109b6:	4a3f      	ldr	r2, [pc, #252]	; (8010ab4 <ip4_frag+0x288>)
 80109b8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80109ba:	6979      	ldr	r1, [r7, #20]
 80109bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109be:	f7f8 f839 	bl	8008a34 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80109c2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80109c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80109ca:	1ad3      	subs	r3, r2, r3
 80109cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80109d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d004      	beq.n	80109e2 <ip4_frag+0x1b6>
        poff = 0;
 80109d8:	2300      	movs	r3, #0
 80109da:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80109e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d196      	bne.n	8010918 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80109ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80109ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80109f0:	4413      	add	r3, r2
 80109f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80109f8:	f1a3 0213 	sub.w	r2, r3, #19
 80109fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a00:	429a      	cmp	r2, r3
 8010a02:	bfcc      	ite	gt
 8010a04:	2301      	movgt	r3, #1
 8010a06:	2300      	movle	r3, #0
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010a0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a14:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010a16:	6a3b      	ldr	r3, [r7, #32]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d002      	beq.n	8010a22 <ip4_frag+0x1f6>
 8010a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d003      	beq.n	8010a2a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010a22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010a28:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010a2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7f6 fb87 	bl	8007140 <lwip_htons>
 8010a32:	4603      	mov	r3, r0
 8010a34:	461a      	mov	r2, r3
 8010a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a38:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010a3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a3c:	3314      	adds	r3, #20
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7f6 fb7d 	bl	8007140 <lwip_htons>
 8010a46:	4603      	mov	r3, r0
 8010a48:	461a      	mov	r2, r3
 8010a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a4c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a50:	2200      	movs	r2, #0
 8010a52:	729a      	strb	r2, [r3, #10]
 8010a54:	2200      	movs	r2, #0
 8010a56:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	695b      	ldr	r3, [r3, #20]
 8010a5c:	687a      	ldr	r2, [r7, #4]
 8010a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a60:	68b8      	ldr	r0, [r7, #8]
 8010a62:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a66:	f7f7 ff17 	bl	8008898 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010a6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a70:	1ad3      	subs	r3, r2, r3
 8010a72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010a76:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010a7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010a7c:	4413      	add	r3, r2
 8010a7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010a82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	f47f af19 	bne.w	80108be <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	e002      	b.n	8010a96 <ip4_frag+0x26a>
      goto memerr;
 8010a90:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3748      	adds	r7, #72	; 0x48
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}
 8010a9e:	bf00      	nop
 8010aa0:	080148d4 	.word	0x080148d4
 8010aa4:	08014ab0 	.word	0x08014ab0
 8010aa8:	0801491c 	.word	0x0801491c
 8010aac:	08014acc 	.word	0x08014acc
 8010ab0:	08014aec 	.word	0x08014aec
 8010ab4:	080107c5 	.word	0x080107c5

08010ab8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b086      	sub	sp, #24
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010ac2:	230e      	movs	r3, #14
 8010ac4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	895b      	ldrh	r3, [r3, #10]
 8010aca:	2b0e      	cmp	r3, #14
 8010acc:	d96e      	bls.n	8010bac <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	7bdb      	ldrb	r3, [r3, #15]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d106      	bne.n	8010ae4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010adc:	3301      	adds	r3, #1
 8010ade:	b2da      	uxtb	r2, r3
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	685b      	ldr	r3, [r3, #4]
 8010ae8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	7b1a      	ldrb	r2, [r3, #12]
 8010aee:	7b5b      	ldrb	r3, [r3, #13]
 8010af0:	021b      	lsls	r3, r3, #8
 8010af2:	4313      	orrs	r3, r2
 8010af4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	781b      	ldrb	r3, [r3, #0]
 8010afa:	f003 0301 	and.w	r3, r3, #1
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d023      	beq.n	8010b4a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	2b01      	cmp	r3, #1
 8010b08:	d10f      	bne.n	8010b2a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	785b      	ldrb	r3, [r3, #1]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d11b      	bne.n	8010b4a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010b16:	2b5e      	cmp	r3, #94	; 0x5e
 8010b18:	d117      	bne.n	8010b4a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	7b5b      	ldrb	r3, [r3, #13]
 8010b1e:	f043 0310 	orr.w	r3, r3, #16
 8010b22:	b2da      	uxtb	r2, r3
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	735a      	strb	r2, [r3, #13]
 8010b28:	e00f      	b.n	8010b4a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	2206      	movs	r2, #6
 8010b2e:	4928      	ldr	r1, [pc, #160]	; (8010bd0 <ethernet_input+0x118>)
 8010b30:	4618      	mov	r0, r3
 8010b32:	f000 facf 	bl	80110d4 <memcmp>
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d106      	bne.n	8010b4a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	7b5b      	ldrb	r3, [r3, #13]
 8010b40:	f043 0308 	orr.w	r3, r3, #8
 8010b44:	b2da      	uxtb	r2, r3
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010b4a:	89fb      	ldrh	r3, [r7, #14]
 8010b4c:	2b08      	cmp	r3, #8
 8010b4e:	d003      	beq.n	8010b58 <ethernet_input+0xa0>
 8010b50:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010b54:	d014      	beq.n	8010b80 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010b56:	e032      	b.n	8010bbe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b5e:	f003 0308 	and.w	r3, r3, #8
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d024      	beq.n	8010bb0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010b66:	8afb      	ldrh	r3, [r7, #22]
 8010b68:	4619      	mov	r1, r3
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f7f7 fe0e 	bl	800878c <pbuf_remove_header>
 8010b70:	4603      	mov	r3, r0
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d11e      	bne.n	8010bb4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010b76:	6839      	ldr	r1, [r7, #0]
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7fe ff27 	bl	800f9cc <ip4_input>
      break;
 8010b7e:	e013      	b.n	8010ba8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b86:	f003 0308 	and.w	r3, r3, #8
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d014      	beq.n	8010bb8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010b8e:	8afb      	ldrh	r3, [r7, #22]
 8010b90:	4619      	mov	r1, r3
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f7f7 fdfa 	bl	800878c <pbuf_remove_header>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d10e      	bne.n	8010bbc <ethernet_input+0x104>
        etharp_input(p, netif);
 8010b9e:	6839      	ldr	r1, [r7, #0]
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7fe f8c7 	bl	800ed34 <etharp_input>
      break;
 8010ba6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	e00c      	b.n	8010bc6 <ethernet_input+0x10e>
    goto free_and_return;
 8010bac:	bf00      	nop
 8010bae:	e006      	b.n	8010bbe <ethernet_input+0x106>
        goto free_and_return;
 8010bb0:	bf00      	nop
 8010bb2:	e004      	b.n	8010bbe <ethernet_input+0x106>
        goto free_and_return;
 8010bb4:	bf00      	nop
 8010bb6:	e002      	b.n	8010bbe <ethernet_input+0x106>
        goto free_and_return;
 8010bb8:	bf00      	nop
 8010bba:	e000      	b.n	8010bbe <ethernet_input+0x106>
        goto free_and_return;
 8010bbc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f7f7 fe6a 	bl	8008898 <pbuf_free>
  return ERR_OK;
 8010bc4:	2300      	movs	r3, #0
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3718      	adds	r7, #24
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	08014cbc 	.word	0x08014cbc

08010bd4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b086      	sub	sp, #24
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
 8010be0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010be2:	8c3b      	ldrh	r3, [r7, #32]
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7f6 faab 	bl	8007140 <lwip_htons>
 8010bea:	4603      	mov	r3, r0
 8010bec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010bee:	210e      	movs	r1, #14
 8010bf0:	68b8      	ldr	r0, [r7, #8]
 8010bf2:	f7f7 fdbb 	bl	800876c <pbuf_add_header>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d125      	bne.n	8010c48 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	685b      	ldr	r3, [r3, #4]
 8010c00:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	8afa      	ldrh	r2, [r7, #22]
 8010c06:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	2206      	movs	r2, #6
 8010c0c:	6839      	ldr	r1, [r7, #0]
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f000 fa6e 	bl	80110f0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	3306      	adds	r3, #6
 8010c18:	2206      	movs	r2, #6
 8010c1a:	6879      	ldr	r1, [r7, #4]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f000 fa67 	bl	80110f0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010c28:	2b06      	cmp	r3, #6
 8010c2a:	d006      	beq.n	8010c3a <ethernet_output+0x66>
 8010c2c:	4b0a      	ldr	r3, [pc, #40]	; (8010c58 <ethernet_output+0x84>)
 8010c2e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010c32:	490a      	ldr	r1, [pc, #40]	; (8010c5c <ethernet_output+0x88>)
 8010c34:	480a      	ldr	r0, [pc, #40]	; (8010c60 <ethernet_output+0x8c>)
 8010c36:	f000 fb1b 	bl	8011270 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	699b      	ldr	r3, [r3, #24]
 8010c3e:	68b9      	ldr	r1, [r7, #8]
 8010c40:	68f8      	ldr	r0, [r7, #12]
 8010c42:	4798      	blx	r3
 8010c44:	4603      	mov	r3, r0
 8010c46:	e002      	b.n	8010c4e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010c48:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010c4a:	f06f 0301 	mvn.w	r3, #1
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3718      	adds	r7, #24
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	08014afc 	.word	0x08014afc
 8010c5c:	08014b34 	.word	0x08014b34
 8010c60:	08014b68 	.word	0x08014b68

08010c64 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b086      	sub	sp, #24
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	60bb      	str	r3, [r7, #8]
 8010c72:	2304      	movs	r3, #4
 8010c74:	60fb      	str	r3, [r7, #12]
 8010c76:	2300      	movs	r3, #0
 8010c78:	613b      	str	r3, [r7, #16]
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8010c7e:	f107 0308 	add.w	r3, r7, #8
 8010c82:	2100      	movs	r1, #0
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7f3 fb7d 	bl	8004384 <osMessageCreate>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d102      	bne.n	8010c9e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8010c98:	f04f 33ff 	mov.w	r3, #4294967295
 8010c9c:	e000      	b.n	8010ca0 <sys_mbox_new+0x3c>

  return ERR_OK;
 8010c9e:	2300      	movs	r3, #0
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3718      	adds	r7, #24
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	6839      	ldr	r1, [r7, #0]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7f3 fb8a 	bl	80043d4 <osMessagePut>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d102      	bne.n	8010ccc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	73fb      	strb	r3, [r7, #15]
 8010cca:	e001      	b.n	8010cd0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8010ccc:	23ff      	movs	r3, #255	; 0xff
 8010cce:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8010cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3710      	adds	r7, #16
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b08c      	sub	sp, #48	; 0x30
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	61f8      	str	r0, [r7, #28]
 8010ce4:	61b9      	str	r1, [r7, #24]
 8010ce6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8010ce8:	f7f3 f989 	bl	8003ffe <osKernelSysTick>
 8010cec:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d017      	beq.n	8010d24 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8010cf4:	69fb      	ldr	r3, [r7, #28]
 8010cf6:	6819      	ldr	r1, [r3, #0]
 8010cf8:	f107 0320 	add.w	r3, r7, #32
 8010cfc:	697a      	ldr	r2, [r7, #20]
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7f3 fba8 	bl	8004454 <osMessageGet>

    if(event.status == osEventMessage)
 8010d04:	6a3b      	ldr	r3, [r7, #32]
 8010d06:	2b10      	cmp	r3, #16
 8010d08:	d109      	bne.n	8010d1e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8010d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0c:	461a      	mov	r2, r3
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8010d12:	f7f3 f974 	bl	8003ffe <osKernelSysTick>
 8010d16:	4602      	mov	r2, r0
 8010d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d1a:	1ad3      	subs	r3, r2, r3
 8010d1c:	e019      	b.n	8010d52 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8010d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8010d22:	e016      	b.n	8010d52 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8010d24:	69fb      	ldr	r3, [r7, #28]
 8010d26:	6819      	ldr	r1, [r3, #0]
 8010d28:	463b      	mov	r3, r7
 8010d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7f3 fb90 	bl	8004454 <osMessageGet>
 8010d34:	f107 0320 	add.w	r3, r7, #32
 8010d38:	463a      	mov	r2, r7
 8010d3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8010d3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8010d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d42:	461a      	mov	r2, r3
 8010d44:	69bb      	ldr	r3, [r7, #24]
 8010d46:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8010d48:	f7f3 f959 	bl	8003ffe <osKernelSysTick>
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d50:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8010d52:	4618      	mov	r0, r3
 8010d54:	3730      	adds	r7, #48	; 0x30
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}

08010d5a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8010d5a:	b480      	push	{r7}
 8010d5c:	b083      	sub	sp, #12
 8010d5e:	af00      	add	r7, sp, #0
 8010d60:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <sys_mbox_valid+0x14>
    return 0;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	e000      	b.n	8010d70 <sys_mbox_valid+0x16>
  else
    return 1;
 8010d6e:	2301      	movs	r3, #1
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	370c      	adds	r7, #12
 8010d74:	46bd      	mov	sp, r7
 8010d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7a:	4770      	bx	lr

08010d7c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8010d80:	4803      	ldr	r0, [pc, #12]	; (8010d90 <sys_init+0x14>)
 8010d82:	f7f3 f9ac 	bl	80040de <osMutexCreate>
 8010d86:	4603      	mov	r3, r0
 8010d88:	4a02      	ldr	r2, [pc, #8]	; (8010d94 <sys_init+0x18>)
 8010d8a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8010d8c:	bf00      	nop
 8010d8e:	bd80      	pop	{r7, pc}
 8010d90:	08014ccc 	.word	0x08014ccc
 8010d94:	2000ab30 	.word	0x2000ab30

08010d98 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b084      	sub	sp, #16
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8010da0:	2300      	movs	r3, #0
 8010da2:	60bb      	str	r3, [r7, #8]
 8010da4:	2300      	movs	r3, #0
 8010da6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8010da8:	f107 0308 	add.w	r3, r7, #8
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7f3 f996 	bl	80040de <osMutexCreate>
 8010db2:	4602      	mov	r2, r0
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d102      	bne.n	8010dc6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8010dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8010dc4:	e000      	b.n	8010dc8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8010dc6:	2300      	movs	r3, #0
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7f3 f995 	bl	8004110 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8010de6:	bf00      	nop
 8010de8:	3708      	adds	r7, #8
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}

08010dee <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b082      	sub	sp, #8
 8010df2:	af00      	add	r7, sp, #0
 8010df4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7f3 f9d6 	bl	80041ac <osMutexRelease>
}
 8010e00:	bf00      	nop
 8010e02:	3708      	adds	r7, #8
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b08c      	sub	sp, #48	; 0x30
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	607a      	str	r2, [r7, #4]
 8010e14:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8010e16:	f107 0314 	add.w	r3, r7, #20
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	601a      	str	r2, [r3, #0]
 8010e1e:	605a      	str	r2, [r3, #4]
 8010e20:	609a      	str	r2, [r3, #8]
 8010e22:	60da      	str	r2, [r3, #12]
 8010e24:	611a      	str	r2, [r3, #16]
 8010e26:	615a      	str	r2, [r3, #20]
 8010e28:	619a      	str	r2, [r3, #24]
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	617b      	str	r3, [r7, #20]
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	61bb      	str	r3, [r7, #24]
 8010e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e34:	b21b      	sxth	r3, r3
 8010e36:	83bb      	strh	r3, [r7, #28]
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8010e3c:	f107 0314 	add.w	r3, r7, #20
 8010e40:	6879      	ldr	r1, [r7, #4]
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7f3 f8eb 	bl	800401e <osThreadCreate>
 8010e48:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3730      	adds	r7, #48	; 0x30
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}
	...

08010e54 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8010e58:	4b04      	ldr	r3, [pc, #16]	; (8010e6c <sys_arch_protect+0x18>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7f3 f955 	bl	8004110 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8010e66:	2301      	movs	r3, #1
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	2000ab30 	.word	0x2000ab30

08010e70 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8010e78:	4b04      	ldr	r3, [pc, #16]	; (8010e8c <sys_arch_unprotect+0x1c>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7f3 f995 	bl	80041ac <osMutexRelease>
}
 8010e82:	bf00      	nop
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	2000ab30 	.word	0x2000ab30

08010e90 <std>:
 8010e90:	2300      	movs	r3, #0
 8010e92:	b510      	push	{r4, lr}
 8010e94:	4604      	mov	r4, r0
 8010e96:	e9c0 3300 	strd	r3, r3, [r0]
 8010e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e9e:	6083      	str	r3, [r0, #8]
 8010ea0:	8181      	strh	r1, [r0, #12]
 8010ea2:	6643      	str	r3, [r0, #100]	; 0x64
 8010ea4:	81c2      	strh	r2, [r0, #14]
 8010ea6:	6183      	str	r3, [r0, #24]
 8010ea8:	4619      	mov	r1, r3
 8010eaa:	2208      	movs	r2, #8
 8010eac:	305c      	adds	r0, #92	; 0x5c
 8010eae:	f000 f92d 	bl	801110c <memset>
 8010eb2:	4b05      	ldr	r3, [pc, #20]	; (8010ec8 <std+0x38>)
 8010eb4:	6263      	str	r3, [r4, #36]	; 0x24
 8010eb6:	4b05      	ldr	r3, [pc, #20]	; (8010ecc <std+0x3c>)
 8010eb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8010eba:	4b05      	ldr	r3, [pc, #20]	; (8010ed0 <std+0x40>)
 8010ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010ebe:	4b05      	ldr	r3, [pc, #20]	; (8010ed4 <std+0x44>)
 8010ec0:	6224      	str	r4, [r4, #32]
 8010ec2:	6323      	str	r3, [r4, #48]	; 0x30
 8010ec4:	bd10      	pop	{r4, pc}
 8010ec6:	bf00      	nop
 8010ec8:	08011415 	.word	0x08011415
 8010ecc:	08011437 	.word	0x08011437
 8010ed0:	0801146f 	.word	0x0801146f
 8010ed4:	08011493 	.word	0x08011493

08010ed8 <_cleanup_r>:
 8010ed8:	4901      	ldr	r1, [pc, #4]	; (8010ee0 <_cleanup_r+0x8>)
 8010eda:	f000 b8af 	b.w	801103c <_fwalk_reent>
 8010ede:	bf00      	nop
 8010ee0:	08011629 	.word	0x08011629

08010ee4 <__sfmoreglue>:
 8010ee4:	b570      	push	{r4, r5, r6, lr}
 8010ee6:	1e4a      	subs	r2, r1, #1
 8010ee8:	2568      	movs	r5, #104	; 0x68
 8010eea:	4355      	muls	r5, r2
 8010eec:	460e      	mov	r6, r1
 8010eee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010ef2:	f000 f963 	bl	80111bc <_malloc_r>
 8010ef6:	4604      	mov	r4, r0
 8010ef8:	b140      	cbz	r0, 8010f0c <__sfmoreglue+0x28>
 8010efa:	2100      	movs	r1, #0
 8010efc:	e9c0 1600 	strd	r1, r6, [r0]
 8010f00:	300c      	adds	r0, #12
 8010f02:	60a0      	str	r0, [r4, #8]
 8010f04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010f08:	f000 f900 	bl	801110c <memset>
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	bd70      	pop	{r4, r5, r6, pc}

08010f10 <__sfp_lock_acquire>:
 8010f10:	4801      	ldr	r0, [pc, #4]	; (8010f18 <__sfp_lock_acquire+0x8>)
 8010f12:	f7ef bea9 	b.w	8000c68 <__retarget_lock_acquire_recursive>
 8010f16:	bf00      	nop
 8010f18:	20000360 	.word	0x20000360

08010f1c <__sfp_lock_release>:
 8010f1c:	4801      	ldr	r0, [pc, #4]	; (8010f24 <__sfp_lock_release+0x8>)
 8010f1e:	f7ef beb7 	b.w	8000c90 <__retarget_lock_release_recursive>
 8010f22:	bf00      	nop
 8010f24:	20000360 	.word	0x20000360

08010f28 <__sinit_lock_acquire>:
 8010f28:	4801      	ldr	r0, [pc, #4]	; (8010f30 <__sinit_lock_acquire+0x8>)
 8010f2a:	f7ef be9d 	b.w	8000c68 <__retarget_lock_acquire_recursive>
 8010f2e:	bf00      	nop
 8010f30:	20000354 	.word	0x20000354

08010f34 <__sinit_lock_release>:
 8010f34:	4801      	ldr	r0, [pc, #4]	; (8010f3c <__sinit_lock_release+0x8>)
 8010f36:	f7ef beab 	b.w	8000c90 <__retarget_lock_release_recursive>
 8010f3a:	bf00      	nop
 8010f3c:	20000354 	.word	0x20000354

08010f40 <__sinit>:
 8010f40:	b510      	push	{r4, lr}
 8010f42:	4604      	mov	r4, r0
 8010f44:	f7ff fff0 	bl	8010f28 <__sinit_lock_acquire>
 8010f48:	69a3      	ldr	r3, [r4, #24]
 8010f4a:	b11b      	cbz	r3, 8010f54 <__sinit+0x14>
 8010f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f50:	f7ff bff0 	b.w	8010f34 <__sinit_lock_release>
 8010f54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010f58:	6523      	str	r3, [r4, #80]	; 0x50
 8010f5a:	4b13      	ldr	r3, [pc, #76]	; (8010fa8 <__sinit+0x68>)
 8010f5c:	4a13      	ldr	r2, [pc, #76]	; (8010fac <__sinit+0x6c>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	62a2      	str	r2, [r4, #40]	; 0x28
 8010f62:	42a3      	cmp	r3, r4
 8010f64:	bf04      	itt	eq
 8010f66:	2301      	moveq	r3, #1
 8010f68:	61a3      	streq	r3, [r4, #24]
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	f000 f820 	bl	8010fb0 <__sfp>
 8010f70:	6060      	str	r0, [r4, #4]
 8010f72:	4620      	mov	r0, r4
 8010f74:	f000 f81c 	bl	8010fb0 <__sfp>
 8010f78:	60a0      	str	r0, [r4, #8]
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f000 f818 	bl	8010fb0 <__sfp>
 8010f80:	2200      	movs	r2, #0
 8010f82:	60e0      	str	r0, [r4, #12]
 8010f84:	2104      	movs	r1, #4
 8010f86:	6860      	ldr	r0, [r4, #4]
 8010f88:	f7ff ff82 	bl	8010e90 <std>
 8010f8c:	68a0      	ldr	r0, [r4, #8]
 8010f8e:	2201      	movs	r2, #1
 8010f90:	2109      	movs	r1, #9
 8010f92:	f7ff ff7d 	bl	8010e90 <std>
 8010f96:	68e0      	ldr	r0, [r4, #12]
 8010f98:	2202      	movs	r2, #2
 8010f9a:	2112      	movs	r1, #18
 8010f9c:	f7ff ff78 	bl	8010e90 <std>
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	61a3      	str	r3, [r4, #24]
 8010fa4:	e7d2      	b.n	8010f4c <__sinit+0xc>
 8010fa6:	bf00      	nop
 8010fa8:	08014d34 	.word	0x08014d34
 8010fac:	08010ed9 	.word	0x08010ed9

08010fb0 <__sfp>:
 8010fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fb2:	4607      	mov	r7, r0
 8010fb4:	f7ff ffac 	bl	8010f10 <__sfp_lock_acquire>
 8010fb8:	4b1e      	ldr	r3, [pc, #120]	; (8011034 <__sfp+0x84>)
 8010fba:	681e      	ldr	r6, [r3, #0]
 8010fbc:	69b3      	ldr	r3, [r6, #24]
 8010fbe:	b913      	cbnz	r3, 8010fc6 <__sfp+0x16>
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	f7ff ffbd 	bl	8010f40 <__sinit>
 8010fc6:	3648      	adds	r6, #72	; 0x48
 8010fc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010fcc:	3b01      	subs	r3, #1
 8010fce:	d503      	bpl.n	8010fd8 <__sfp+0x28>
 8010fd0:	6833      	ldr	r3, [r6, #0]
 8010fd2:	b30b      	cbz	r3, 8011018 <__sfp+0x68>
 8010fd4:	6836      	ldr	r6, [r6, #0]
 8010fd6:	e7f7      	b.n	8010fc8 <__sfp+0x18>
 8010fd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010fdc:	b9d5      	cbnz	r5, 8011014 <__sfp+0x64>
 8010fde:	4b16      	ldr	r3, [pc, #88]	; (8011038 <__sfp+0x88>)
 8010fe0:	60e3      	str	r3, [r4, #12]
 8010fe2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010fe6:	6665      	str	r5, [r4, #100]	; 0x64
 8010fe8:	f7ef fe18 	bl	8000c1c <__retarget_lock_init_recursive>
 8010fec:	f7ff ff96 	bl	8010f1c <__sfp_lock_release>
 8010ff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010ff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010ff8:	6025      	str	r5, [r4, #0]
 8010ffa:	61a5      	str	r5, [r4, #24]
 8010ffc:	2208      	movs	r2, #8
 8010ffe:	4629      	mov	r1, r5
 8011000:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011004:	f000 f882 	bl	801110c <memset>
 8011008:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801100c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011010:	4620      	mov	r0, r4
 8011012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011014:	3468      	adds	r4, #104	; 0x68
 8011016:	e7d9      	b.n	8010fcc <__sfp+0x1c>
 8011018:	2104      	movs	r1, #4
 801101a:	4638      	mov	r0, r7
 801101c:	f7ff ff62 	bl	8010ee4 <__sfmoreglue>
 8011020:	4604      	mov	r4, r0
 8011022:	6030      	str	r0, [r6, #0]
 8011024:	2800      	cmp	r0, #0
 8011026:	d1d5      	bne.n	8010fd4 <__sfp+0x24>
 8011028:	f7ff ff78 	bl	8010f1c <__sfp_lock_release>
 801102c:	230c      	movs	r3, #12
 801102e:	603b      	str	r3, [r7, #0]
 8011030:	e7ee      	b.n	8011010 <__sfp+0x60>
 8011032:	bf00      	nop
 8011034:	08014d34 	.word	0x08014d34
 8011038:	ffff0001 	.word	0xffff0001

0801103c <_fwalk_reent>:
 801103c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011040:	4606      	mov	r6, r0
 8011042:	4688      	mov	r8, r1
 8011044:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011048:	2700      	movs	r7, #0
 801104a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801104e:	f1b9 0901 	subs.w	r9, r9, #1
 8011052:	d505      	bpl.n	8011060 <_fwalk_reent+0x24>
 8011054:	6824      	ldr	r4, [r4, #0]
 8011056:	2c00      	cmp	r4, #0
 8011058:	d1f7      	bne.n	801104a <_fwalk_reent+0xe>
 801105a:	4638      	mov	r0, r7
 801105c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011060:	89ab      	ldrh	r3, [r5, #12]
 8011062:	2b01      	cmp	r3, #1
 8011064:	d907      	bls.n	8011076 <_fwalk_reent+0x3a>
 8011066:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801106a:	3301      	adds	r3, #1
 801106c:	d003      	beq.n	8011076 <_fwalk_reent+0x3a>
 801106e:	4629      	mov	r1, r5
 8011070:	4630      	mov	r0, r6
 8011072:	47c0      	blx	r8
 8011074:	4307      	orrs	r7, r0
 8011076:	3568      	adds	r5, #104	; 0x68
 8011078:	e7e9      	b.n	801104e <_fwalk_reent+0x12>
	...

0801107c <__libc_init_array>:
 801107c:	b570      	push	{r4, r5, r6, lr}
 801107e:	4d0d      	ldr	r5, [pc, #52]	; (80110b4 <__libc_init_array+0x38>)
 8011080:	4c0d      	ldr	r4, [pc, #52]	; (80110b8 <__libc_init_array+0x3c>)
 8011082:	1b64      	subs	r4, r4, r5
 8011084:	10a4      	asrs	r4, r4, #2
 8011086:	2600      	movs	r6, #0
 8011088:	42a6      	cmp	r6, r4
 801108a:	d109      	bne.n	80110a0 <__libc_init_array+0x24>
 801108c:	4d0b      	ldr	r5, [pc, #44]	; (80110bc <__libc_init_array+0x40>)
 801108e:	4c0c      	ldr	r4, [pc, #48]	; (80110c0 <__libc_init_array+0x44>)
 8011090:	f000 ffc8 	bl	8012024 <_init>
 8011094:	1b64      	subs	r4, r4, r5
 8011096:	10a4      	asrs	r4, r4, #2
 8011098:	2600      	movs	r6, #0
 801109a:	42a6      	cmp	r6, r4
 801109c:	d105      	bne.n	80110aa <__libc_init_array+0x2e>
 801109e:	bd70      	pop	{r4, r5, r6, pc}
 80110a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80110a4:	4798      	blx	r3
 80110a6:	3601      	adds	r6, #1
 80110a8:	e7ee      	b.n	8011088 <__libc_init_array+0xc>
 80110aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80110ae:	4798      	blx	r3
 80110b0:	3601      	adds	r6, #1
 80110b2:	e7f2      	b.n	801109a <__libc_init_array+0x1e>
 80110b4:	08014e28 	.word	0x08014e28
 80110b8:	08014e28 	.word	0x08014e28
 80110bc:	08014e28 	.word	0x08014e28
 80110c0:	08014e2c 	.word	0x08014e2c

080110c4 <malloc>:
 80110c4:	4b02      	ldr	r3, [pc, #8]	; (80110d0 <malloc+0xc>)
 80110c6:	4601      	mov	r1, r0
 80110c8:	6818      	ldr	r0, [r3, #0]
 80110ca:	f000 b877 	b.w	80111bc <_malloc_r>
 80110ce:	bf00      	nop
 80110d0:	2000001c 	.word	0x2000001c

080110d4 <memcmp>:
 80110d4:	b530      	push	{r4, r5, lr}
 80110d6:	3901      	subs	r1, #1
 80110d8:	2400      	movs	r4, #0
 80110da:	42a2      	cmp	r2, r4
 80110dc:	d101      	bne.n	80110e2 <memcmp+0xe>
 80110de:	2000      	movs	r0, #0
 80110e0:	e005      	b.n	80110ee <memcmp+0x1a>
 80110e2:	5d03      	ldrb	r3, [r0, r4]
 80110e4:	3401      	adds	r4, #1
 80110e6:	5d0d      	ldrb	r5, [r1, r4]
 80110e8:	42ab      	cmp	r3, r5
 80110ea:	d0f6      	beq.n	80110da <memcmp+0x6>
 80110ec:	1b58      	subs	r0, r3, r5
 80110ee:	bd30      	pop	{r4, r5, pc}

080110f0 <memcpy>:
 80110f0:	440a      	add	r2, r1
 80110f2:	4291      	cmp	r1, r2
 80110f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80110f8:	d100      	bne.n	80110fc <memcpy+0xc>
 80110fa:	4770      	bx	lr
 80110fc:	b510      	push	{r4, lr}
 80110fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011106:	4291      	cmp	r1, r2
 8011108:	d1f9      	bne.n	80110fe <memcpy+0xe>
 801110a:	bd10      	pop	{r4, pc}

0801110c <memset>:
 801110c:	4402      	add	r2, r0
 801110e:	4603      	mov	r3, r0
 8011110:	4293      	cmp	r3, r2
 8011112:	d100      	bne.n	8011116 <memset+0xa>
 8011114:	4770      	bx	lr
 8011116:	f803 1b01 	strb.w	r1, [r3], #1
 801111a:	e7f9      	b.n	8011110 <memset+0x4>

0801111c <_free_r>:
 801111c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801111e:	2900      	cmp	r1, #0
 8011120:	d048      	beq.n	80111b4 <_free_r+0x98>
 8011122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011126:	9001      	str	r0, [sp, #4]
 8011128:	2b00      	cmp	r3, #0
 801112a:	f1a1 0404 	sub.w	r4, r1, #4
 801112e:	bfb8      	it	lt
 8011130:	18e4      	addlt	r4, r4, r3
 8011132:	f000 fad9 	bl	80116e8 <__malloc_lock>
 8011136:	4a20      	ldr	r2, [pc, #128]	; (80111b8 <_free_r+0x9c>)
 8011138:	9801      	ldr	r0, [sp, #4]
 801113a:	6813      	ldr	r3, [r2, #0]
 801113c:	4615      	mov	r5, r2
 801113e:	b933      	cbnz	r3, 801114e <_free_r+0x32>
 8011140:	6063      	str	r3, [r4, #4]
 8011142:	6014      	str	r4, [r2, #0]
 8011144:	b003      	add	sp, #12
 8011146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801114a:	f000 bad3 	b.w	80116f4 <__malloc_unlock>
 801114e:	42a3      	cmp	r3, r4
 8011150:	d90b      	bls.n	801116a <_free_r+0x4e>
 8011152:	6821      	ldr	r1, [r4, #0]
 8011154:	1862      	adds	r2, r4, r1
 8011156:	4293      	cmp	r3, r2
 8011158:	bf04      	itt	eq
 801115a:	681a      	ldreq	r2, [r3, #0]
 801115c:	685b      	ldreq	r3, [r3, #4]
 801115e:	6063      	str	r3, [r4, #4]
 8011160:	bf04      	itt	eq
 8011162:	1852      	addeq	r2, r2, r1
 8011164:	6022      	streq	r2, [r4, #0]
 8011166:	602c      	str	r4, [r5, #0]
 8011168:	e7ec      	b.n	8011144 <_free_r+0x28>
 801116a:	461a      	mov	r2, r3
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	b10b      	cbz	r3, 8011174 <_free_r+0x58>
 8011170:	42a3      	cmp	r3, r4
 8011172:	d9fa      	bls.n	801116a <_free_r+0x4e>
 8011174:	6811      	ldr	r1, [r2, #0]
 8011176:	1855      	adds	r5, r2, r1
 8011178:	42a5      	cmp	r5, r4
 801117a:	d10b      	bne.n	8011194 <_free_r+0x78>
 801117c:	6824      	ldr	r4, [r4, #0]
 801117e:	4421      	add	r1, r4
 8011180:	1854      	adds	r4, r2, r1
 8011182:	42a3      	cmp	r3, r4
 8011184:	6011      	str	r1, [r2, #0]
 8011186:	d1dd      	bne.n	8011144 <_free_r+0x28>
 8011188:	681c      	ldr	r4, [r3, #0]
 801118a:	685b      	ldr	r3, [r3, #4]
 801118c:	6053      	str	r3, [r2, #4]
 801118e:	4421      	add	r1, r4
 8011190:	6011      	str	r1, [r2, #0]
 8011192:	e7d7      	b.n	8011144 <_free_r+0x28>
 8011194:	d902      	bls.n	801119c <_free_r+0x80>
 8011196:	230c      	movs	r3, #12
 8011198:	6003      	str	r3, [r0, #0]
 801119a:	e7d3      	b.n	8011144 <_free_r+0x28>
 801119c:	6825      	ldr	r5, [r4, #0]
 801119e:	1961      	adds	r1, r4, r5
 80111a0:	428b      	cmp	r3, r1
 80111a2:	bf04      	itt	eq
 80111a4:	6819      	ldreq	r1, [r3, #0]
 80111a6:	685b      	ldreq	r3, [r3, #4]
 80111a8:	6063      	str	r3, [r4, #4]
 80111aa:	bf04      	itt	eq
 80111ac:	1949      	addeq	r1, r1, r5
 80111ae:	6021      	streq	r1, [r4, #0]
 80111b0:	6054      	str	r4, [r2, #4]
 80111b2:	e7c7      	b.n	8011144 <_free_r+0x28>
 80111b4:	b003      	add	sp, #12
 80111b6:	bd30      	pop	{r4, r5, pc}
 80111b8:	20004264 	.word	0x20004264

080111bc <_malloc_r>:
 80111bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111be:	1ccd      	adds	r5, r1, #3
 80111c0:	f025 0503 	bic.w	r5, r5, #3
 80111c4:	3508      	adds	r5, #8
 80111c6:	2d0c      	cmp	r5, #12
 80111c8:	bf38      	it	cc
 80111ca:	250c      	movcc	r5, #12
 80111cc:	2d00      	cmp	r5, #0
 80111ce:	4606      	mov	r6, r0
 80111d0:	db01      	blt.n	80111d6 <_malloc_r+0x1a>
 80111d2:	42a9      	cmp	r1, r5
 80111d4:	d903      	bls.n	80111de <_malloc_r+0x22>
 80111d6:	230c      	movs	r3, #12
 80111d8:	6033      	str	r3, [r6, #0]
 80111da:	2000      	movs	r0, #0
 80111dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111de:	f000 fa83 	bl	80116e8 <__malloc_lock>
 80111e2:	4921      	ldr	r1, [pc, #132]	; (8011268 <_malloc_r+0xac>)
 80111e4:	680a      	ldr	r2, [r1, #0]
 80111e6:	4614      	mov	r4, r2
 80111e8:	b99c      	cbnz	r4, 8011212 <_malloc_r+0x56>
 80111ea:	4f20      	ldr	r7, [pc, #128]	; (801126c <_malloc_r+0xb0>)
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	b923      	cbnz	r3, 80111fa <_malloc_r+0x3e>
 80111f0:	4621      	mov	r1, r4
 80111f2:	4630      	mov	r0, r6
 80111f4:	f000 f8fe 	bl	80113f4 <_sbrk_r>
 80111f8:	6038      	str	r0, [r7, #0]
 80111fa:	4629      	mov	r1, r5
 80111fc:	4630      	mov	r0, r6
 80111fe:	f000 f8f9 	bl	80113f4 <_sbrk_r>
 8011202:	1c43      	adds	r3, r0, #1
 8011204:	d123      	bne.n	801124e <_malloc_r+0x92>
 8011206:	230c      	movs	r3, #12
 8011208:	6033      	str	r3, [r6, #0]
 801120a:	4630      	mov	r0, r6
 801120c:	f000 fa72 	bl	80116f4 <__malloc_unlock>
 8011210:	e7e3      	b.n	80111da <_malloc_r+0x1e>
 8011212:	6823      	ldr	r3, [r4, #0]
 8011214:	1b5b      	subs	r3, r3, r5
 8011216:	d417      	bmi.n	8011248 <_malloc_r+0x8c>
 8011218:	2b0b      	cmp	r3, #11
 801121a:	d903      	bls.n	8011224 <_malloc_r+0x68>
 801121c:	6023      	str	r3, [r4, #0]
 801121e:	441c      	add	r4, r3
 8011220:	6025      	str	r5, [r4, #0]
 8011222:	e004      	b.n	801122e <_malloc_r+0x72>
 8011224:	6863      	ldr	r3, [r4, #4]
 8011226:	42a2      	cmp	r2, r4
 8011228:	bf0c      	ite	eq
 801122a:	600b      	streq	r3, [r1, #0]
 801122c:	6053      	strne	r3, [r2, #4]
 801122e:	4630      	mov	r0, r6
 8011230:	f000 fa60 	bl	80116f4 <__malloc_unlock>
 8011234:	f104 000b 	add.w	r0, r4, #11
 8011238:	1d23      	adds	r3, r4, #4
 801123a:	f020 0007 	bic.w	r0, r0, #7
 801123e:	1ac2      	subs	r2, r0, r3
 8011240:	d0cc      	beq.n	80111dc <_malloc_r+0x20>
 8011242:	1a1b      	subs	r3, r3, r0
 8011244:	50a3      	str	r3, [r4, r2]
 8011246:	e7c9      	b.n	80111dc <_malloc_r+0x20>
 8011248:	4622      	mov	r2, r4
 801124a:	6864      	ldr	r4, [r4, #4]
 801124c:	e7cc      	b.n	80111e8 <_malloc_r+0x2c>
 801124e:	1cc4      	adds	r4, r0, #3
 8011250:	f024 0403 	bic.w	r4, r4, #3
 8011254:	42a0      	cmp	r0, r4
 8011256:	d0e3      	beq.n	8011220 <_malloc_r+0x64>
 8011258:	1a21      	subs	r1, r4, r0
 801125a:	4630      	mov	r0, r6
 801125c:	f000 f8ca 	bl	80113f4 <_sbrk_r>
 8011260:	3001      	adds	r0, #1
 8011262:	d1dd      	bne.n	8011220 <_malloc_r+0x64>
 8011264:	e7cf      	b.n	8011206 <_malloc_r+0x4a>
 8011266:	bf00      	nop
 8011268:	20004264 	.word	0x20004264
 801126c:	20004268 	.word	0x20004268

08011270 <iprintf>:
 8011270:	b40f      	push	{r0, r1, r2, r3}
 8011272:	4b0a      	ldr	r3, [pc, #40]	; (801129c <iprintf+0x2c>)
 8011274:	b513      	push	{r0, r1, r4, lr}
 8011276:	681c      	ldr	r4, [r3, #0]
 8011278:	b124      	cbz	r4, 8011284 <iprintf+0x14>
 801127a:	69a3      	ldr	r3, [r4, #24]
 801127c:	b913      	cbnz	r3, 8011284 <iprintf+0x14>
 801127e:	4620      	mov	r0, r4
 8011280:	f7ff fe5e 	bl	8010f40 <__sinit>
 8011284:	ab05      	add	r3, sp, #20
 8011286:	9a04      	ldr	r2, [sp, #16]
 8011288:	68a1      	ldr	r1, [r4, #8]
 801128a:	9301      	str	r3, [sp, #4]
 801128c:	4620      	mov	r0, r4
 801128e:	f000 fa61 	bl	8011754 <_vfiprintf_r>
 8011292:	b002      	add	sp, #8
 8011294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011298:	b004      	add	sp, #16
 801129a:	4770      	bx	lr
 801129c:	2000001c 	.word	0x2000001c

080112a0 <rand>:
 80112a0:	4b17      	ldr	r3, [pc, #92]	; (8011300 <rand+0x60>)
 80112a2:	b510      	push	{r4, lr}
 80112a4:	681c      	ldr	r4, [r3, #0]
 80112a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80112a8:	b9b3      	cbnz	r3, 80112d8 <rand+0x38>
 80112aa:	2018      	movs	r0, #24
 80112ac:	f7ff ff0a 	bl	80110c4 <malloc>
 80112b0:	63a0      	str	r0, [r4, #56]	; 0x38
 80112b2:	b928      	cbnz	r0, 80112c0 <rand+0x20>
 80112b4:	4602      	mov	r2, r0
 80112b6:	4b13      	ldr	r3, [pc, #76]	; (8011304 <rand+0x64>)
 80112b8:	4813      	ldr	r0, [pc, #76]	; (8011308 <rand+0x68>)
 80112ba:	214e      	movs	r1, #78	; 0x4e
 80112bc:	f000 f900 	bl	80114c0 <__assert_func>
 80112c0:	4a12      	ldr	r2, [pc, #72]	; (801130c <rand+0x6c>)
 80112c2:	4b13      	ldr	r3, [pc, #76]	; (8011310 <rand+0x70>)
 80112c4:	e9c0 2300 	strd	r2, r3, [r0]
 80112c8:	4b12      	ldr	r3, [pc, #72]	; (8011314 <rand+0x74>)
 80112ca:	6083      	str	r3, [r0, #8]
 80112cc:	230b      	movs	r3, #11
 80112ce:	8183      	strh	r3, [r0, #12]
 80112d0:	2201      	movs	r2, #1
 80112d2:	2300      	movs	r3, #0
 80112d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80112d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80112da:	480f      	ldr	r0, [pc, #60]	; (8011318 <rand+0x78>)
 80112dc:	690a      	ldr	r2, [r1, #16]
 80112de:	694b      	ldr	r3, [r1, #20]
 80112e0:	4c0e      	ldr	r4, [pc, #56]	; (801131c <rand+0x7c>)
 80112e2:	4350      	muls	r0, r2
 80112e4:	fb04 0003 	mla	r0, r4, r3, r0
 80112e8:	fba2 3404 	umull	r3, r4, r2, r4
 80112ec:	1c5a      	adds	r2, r3, #1
 80112ee:	4404      	add	r4, r0
 80112f0:	f144 0000 	adc.w	r0, r4, #0
 80112f4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80112f8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80112fc:	bd10      	pop	{r4, pc}
 80112fe:	bf00      	nop
 8011300:	2000001c 	.word	0x2000001c
 8011304:	08014d38 	.word	0x08014d38
 8011308:	08014d4f 	.word	0x08014d4f
 801130c:	abcd330e 	.word	0xabcd330e
 8011310:	e66d1234 	.word	0xe66d1234
 8011314:	0005deec 	.word	0x0005deec
 8011318:	5851f42d 	.word	0x5851f42d
 801131c:	4c957f2d 	.word	0x4c957f2d

08011320 <cleanup_glue>:
 8011320:	b538      	push	{r3, r4, r5, lr}
 8011322:	460c      	mov	r4, r1
 8011324:	6809      	ldr	r1, [r1, #0]
 8011326:	4605      	mov	r5, r0
 8011328:	b109      	cbz	r1, 801132e <cleanup_glue+0xe>
 801132a:	f7ff fff9 	bl	8011320 <cleanup_glue>
 801132e:	4621      	mov	r1, r4
 8011330:	4628      	mov	r0, r5
 8011332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011336:	f7ff bef1 	b.w	801111c <_free_r>
	...

0801133c <_reclaim_reent>:
 801133c:	4b2c      	ldr	r3, [pc, #176]	; (80113f0 <_reclaim_reent+0xb4>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	4283      	cmp	r3, r0
 8011342:	b570      	push	{r4, r5, r6, lr}
 8011344:	4604      	mov	r4, r0
 8011346:	d051      	beq.n	80113ec <_reclaim_reent+0xb0>
 8011348:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801134a:	b143      	cbz	r3, 801135e <_reclaim_reent+0x22>
 801134c:	68db      	ldr	r3, [r3, #12]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d14a      	bne.n	80113e8 <_reclaim_reent+0xac>
 8011352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011354:	6819      	ldr	r1, [r3, #0]
 8011356:	b111      	cbz	r1, 801135e <_reclaim_reent+0x22>
 8011358:	4620      	mov	r0, r4
 801135a:	f7ff fedf 	bl	801111c <_free_r>
 801135e:	6961      	ldr	r1, [r4, #20]
 8011360:	b111      	cbz	r1, 8011368 <_reclaim_reent+0x2c>
 8011362:	4620      	mov	r0, r4
 8011364:	f7ff feda 	bl	801111c <_free_r>
 8011368:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801136a:	b111      	cbz	r1, 8011372 <_reclaim_reent+0x36>
 801136c:	4620      	mov	r0, r4
 801136e:	f7ff fed5 	bl	801111c <_free_r>
 8011372:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011374:	b111      	cbz	r1, 801137c <_reclaim_reent+0x40>
 8011376:	4620      	mov	r0, r4
 8011378:	f7ff fed0 	bl	801111c <_free_r>
 801137c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801137e:	b111      	cbz	r1, 8011386 <_reclaim_reent+0x4a>
 8011380:	4620      	mov	r0, r4
 8011382:	f7ff fecb 	bl	801111c <_free_r>
 8011386:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011388:	b111      	cbz	r1, 8011390 <_reclaim_reent+0x54>
 801138a:	4620      	mov	r0, r4
 801138c:	f7ff fec6 	bl	801111c <_free_r>
 8011390:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011392:	b111      	cbz	r1, 801139a <_reclaim_reent+0x5e>
 8011394:	4620      	mov	r0, r4
 8011396:	f7ff fec1 	bl	801111c <_free_r>
 801139a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801139c:	b111      	cbz	r1, 80113a4 <_reclaim_reent+0x68>
 801139e:	4620      	mov	r0, r4
 80113a0:	f7ff febc 	bl	801111c <_free_r>
 80113a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113a6:	b111      	cbz	r1, 80113ae <_reclaim_reent+0x72>
 80113a8:	4620      	mov	r0, r4
 80113aa:	f7ff feb7 	bl	801111c <_free_r>
 80113ae:	69a3      	ldr	r3, [r4, #24]
 80113b0:	b1e3      	cbz	r3, 80113ec <_reclaim_reent+0xb0>
 80113b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80113b4:	4620      	mov	r0, r4
 80113b6:	4798      	blx	r3
 80113b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80113ba:	b1b9      	cbz	r1, 80113ec <_reclaim_reent+0xb0>
 80113bc:	4620      	mov	r0, r4
 80113be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113c2:	f7ff bfad 	b.w	8011320 <cleanup_glue>
 80113c6:	5949      	ldr	r1, [r1, r5]
 80113c8:	b941      	cbnz	r1, 80113dc <_reclaim_reent+0xa0>
 80113ca:	3504      	adds	r5, #4
 80113cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113ce:	2d80      	cmp	r5, #128	; 0x80
 80113d0:	68d9      	ldr	r1, [r3, #12]
 80113d2:	d1f8      	bne.n	80113c6 <_reclaim_reent+0x8a>
 80113d4:	4620      	mov	r0, r4
 80113d6:	f7ff fea1 	bl	801111c <_free_r>
 80113da:	e7ba      	b.n	8011352 <_reclaim_reent+0x16>
 80113dc:	680e      	ldr	r6, [r1, #0]
 80113de:	4620      	mov	r0, r4
 80113e0:	f7ff fe9c 	bl	801111c <_free_r>
 80113e4:	4631      	mov	r1, r6
 80113e6:	e7ef      	b.n	80113c8 <_reclaim_reent+0x8c>
 80113e8:	2500      	movs	r5, #0
 80113ea:	e7ef      	b.n	80113cc <_reclaim_reent+0x90>
 80113ec:	bd70      	pop	{r4, r5, r6, pc}
 80113ee:	bf00      	nop
 80113f0:	2000001c 	.word	0x2000001c

080113f4 <_sbrk_r>:
 80113f4:	b538      	push	{r3, r4, r5, lr}
 80113f6:	4d06      	ldr	r5, [pc, #24]	; (8011410 <_sbrk_r+0x1c>)
 80113f8:	2300      	movs	r3, #0
 80113fa:	4604      	mov	r4, r0
 80113fc:	4608      	mov	r0, r1
 80113fe:	602b      	str	r3, [r5, #0]
 8011400:	f7ef fb1e 	bl	8000a40 <_sbrk>
 8011404:	1c43      	adds	r3, r0, #1
 8011406:	d102      	bne.n	801140e <_sbrk_r+0x1a>
 8011408:	682b      	ldr	r3, [r5, #0]
 801140a:	b103      	cbz	r3, 801140e <_sbrk_r+0x1a>
 801140c:	6023      	str	r3, [r4, #0]
 801140e:	bd38      	pop	{r3, r4, r5, pc}
 8011410:	2000ab2c 	.word	0x2000ab2c

08011414 <__sread>:
 8011414:	b510      	push	{r4, lr}
 8011416:	460c      	mov	r4, r1
 8011418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801141c:	f000 fc5e 	bl	8011cdc <_read_r>
 8011420:	2800      	cmp	r0, #0
 8011422:	bfab      	itete	ge
 8011424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011426:	89a3      	ldrhlt	r3, [r4, #12]
 8011428:	181b      	addge	r3, r3, r0
 801142a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801142e:	bfac      	ite	ge
 8011430:	6563      	strge	r3, [r4, #84]	; 0x54
 8011432:	81a3      	strhlt	r3, [r4, #12]
 8011434:	bd10      	pop	{r4, pc}

08011436 <__swrite>:
 8011436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801143a:	461f      	mov	r7, r3
 801143c:	898b      	ldrh	r3, [r1, #12]
 801143e:	05db      	lsls	r3, r3, #23
 8011440:	4605      	mov	r5, r0
 8011442:	460c      	mov	r4, r1
 8011444:	4616      	mov	r6, r2
 8011446:	d505      	bpl.n	8011454 <__swrite+0x1e>
 8011448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801144c:	2302      	movs	r3, #2
 801144e:	2200      	movs	r2, #0
 8011450:	f000 f938 	bl	80116c4 <_lseek_r>
 8011454:	89a3      	ldrh	r3, [r4, #12]
 8011456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801145a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801145e:	81a3      	strh	r3, [r4, #12]
 8011460:	4632      	mov	r2, r6
 8011462:	463b      	mov	r3, r7
 8011464:	4628      	mov	r0, r5
 8011466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801146a:	f000 b817 	b.w	801149c <_write_r>

0801146e <__sseek>:
 801146e:	b510      	push	{r4, lr}
 8011470:	460c      	mov	r4, r1
 8011472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011476:	f000 f925 	bl	80116c4 <_lseek_r>
 801147a:	1c43      	adds	r3, r0, #1
 801147c:	89a3      	ldrh	r3, [r4, #12]
 801147e:	bf15      	itete	ne
 8011480:	6560      	strne	r0, [r4, #84]	; 0x54
 8011482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801148a:	81a3      	strheq	r3, [r4, #12]
 801148c:	bf18      	it	ne
 801148e:	81a3      	strhne	r3, [r4, #12]
 8011490:	bd10      	pop	{r4, pc}

08011492 <__sclose>:
 8011492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011496:	f000 b831 	b.w	80114fc <_close_r>
	...

0801149c <_write_r>:
 801149c:	b538      	push	{r3, r4, r5, lr}
 801149e:	4d07      	ldr	r5, [pc, #28]	; (80114bc <_write_r+0x20>)
 80114a0:	4604      	mov	r4, r0
 80114a2:	4608      	mov	r0, r1
 80114a4:	4611      	mov	r1, r2
 80114a6:	2200      	movs	r2, #0
 80114a8:	602a      	str	r2, [r5, #0]
 80114aa:	461a      	mov	r2, r3
 80114ac:	f7ef fa77 	bl	800099e <_write>
 80114b0:	1c43      	adds	r3, r0, #1
 80114b2:	d102      	bne.n	80114ba <_write_r+0x1e>
 80114b4:	682b      	ldr	r3, [r5, #0]
 80114b6:	b103      	cbz	r3, 80114ba <_write_r+0x1e>
 80114b8:	6023      	str	r3, [r4, #0]
 80114ba:	bd38      	pop	{r3, r4, r5, pc}
 80114bc:	2000ab2c 	.word	0x2000ab2c

080114c0 <__assert_func>:
 80114c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114c2:	4614      	mov	r4, r2
 80114c4:	461a      	mov	r2, r3
 80114c6:	4b09      	ldr	r3, [pc, #36]	; (80114ec <__assert_func+0x2c>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	4605      	mov	r5, r0
 80114cc:	68d8      	ldr	r0, [r3, #12]
 80114ce:	b14c      	cbz	r4, 80114e4 <__assert_func+0x24>
 80114d0:	4b07      	ldr	r3, [pc, #28]	; (80114f0 <__assert_func+0x30>)
 80114d2:	9100      	str	r1, [sp, #0]
 80114d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80114d8:	4906      	ldr	r1, [pc, #24]	; (80114f4 <__assert_func+0x34>)
 80114da:	462b      	mov	r3, r5
 80114dc:	f000 f8e0 	bl	80116a0 <fiprintf>
 80114e0:	f000 fcce 	bl	8011e80 <abort>
 80114e4:	4b04      	ldr	r3, [pc, #16]	; (80114f8 <__assert_func+0x38>)
 80114e6:	461c      	mov	r4, r3
 80114e8:	e7f3      	b.n	80114d2 <__assert_func+0x12>
 80114ea:	bf00      	nop
 80114ec:	2000001c 	.word	0x2000001c
 80114f0:	08014dae 	.word	0x08014dae
 80114f4:	08014dbb 	.word	0x08014dbb
 80114f8:	08014de9 	.word	0x08014de9

080114fc <_close_r>:
 80114fc:	b538      	push	{r3, r4, r5, lr}
 80114fe:	4d06      	ldr	r5, [pc, #24]	; (8011518 <_close_r+0x1c>)
 8011500:	2300      	movs	r3, #0
 8011502:	4604      	mov	r4, r0
 8011504:	4608      	mov	r0, r1
 8011506:	602b      	str	r3, [r5, #0]
 8011508:	f7ef fa65 	bl	80009d6 <_close>
 801150c:	1c43      	adds	r3, r0, #1
 801150e:	d102      	bne.n	8011516 <_close_r+0x1a>
 8011510:	682b      	ldr	r3, [r5, #0]
 8011512:	b103      	cbz	r3, 8011516 <_close_r+0x1a>
 8011514:	6023      	str	r3, [r4, #0]
 8011516:	bd38      	pop	{r3, r4, r5, pc}
 8011518:	2000ab2c 	.word	0x2000ab2c

0801151c <__sflush_r>:
 801151c:	898a      	ldrh	r2, [r1, #12]
 801151e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011522:	4605      	mov	r5, r0
 8011524:	0710      	lsls	r0, r2, #28
 8011526:	460c      	mov	r4, r1
 8011528:	d458      	bmi.n	80115dc <__sflush_r+0xc0>
 801152a:	684b      	ldr	r3, [r1, #4]
 801152c:	2b00      	cmp	r3, #0
 801152e:	dc05      	bgt.n	801153c <__sflush_r+0x20>
 8011530:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011532:	2b00      	cmp	r3, #0
 8011534:	dc02      	bgt.n	801153c <__sflush_r+0x20>
 8011536:	2000      	movs	r0, #0
 8011538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801153c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801153e:	2e00      	cmp	r6, #0
 8011540:	d0f9      	beq.n	8011536 <__sflush_r+0x1a>
 8011542:	2300      	movs	r3, #0
 8011544:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011548:	682f      	ldr	r7, [r5, #0]
 801154a:	602b      	str	r3, [r5, #0]
 801154c:	d032      	beq.n	80115b4 <__sflush_r+0x98>
 801154e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011550:	89a3      	ldrh	r3, [r4, #12]
 8011552:	075a      	lsls	r2, r3, #29
 8011554:	d505      	bpl.n	8011562 <__sflush_r+0x46>
 8011556:	6863      	ldr	r3, [r4, #4]
 8011558:	1ac0      	subs	r0, r0, r3
 801155a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801155c:	b10b      	cbz	r3, 8011562 <__sflush_r+0x46>
 801155e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011560:	1ac0      	subs	r0, r0, r3
 8011562:	2300      	movs	r3, #0
 8011564:	4602      	mov	r2, r0
 8011566:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011568:	6a21      	ldr	r1, [r4, #32]
 801156a:	4628      	mov	r0, r5
 801156c:	47b0      	blx	r6
 801156e:	1c43      	adds	r3, r0, #1
 8011570:	89a3      	ldrh	r3, [r4, #12]
 8011572:	d106      	bne.n	8011582 <__sflush_r+0x66>
 8011574:	6829      	ldr	r1, [r5, #0]
 8011576:	291d      	cmp	r1, #29
 8011578:	d82c      	bhi.n	80115d4 <__sflush_r+0xb8>
 801157a:	4a2a      	ldr	r2, [pc, #168]	; (8011624 <__sflush_r+0x108>)
 801157c:	40ca      	lsrs	r2, r1
 801157e:	07d6      	lsls	r6, r2, #31
 8011580:	d528      	bpl.n	80115d4 <__sflush_r+0xb8>
 8011582:	2200      	movs	r2, #0
 8011584:	6062      	str	r2, [r4, #4]
 8011586:	04d9      	lsls	r1, r3, #19
 8011588:	6922      	ldr	r2, [r4, #16]
 801158a:	6022      	str	r2, [r4, #0]
 801158c:	d504      	bpl.n	8011598 <__sflush_r+0x7c>
 801158e:	1c42      	adds	r2, r0, #1
 8011590:	d101      	bne.n	8011596 <__sflush_r+0x7a>
 8011592:	682b      	ldr	r3, [r5, #0]
 8011594:	b903      	cbnz	r3, 8011598 <__sflush_r+0x7c>
 8011596:	6560      	str	r0, [r4, #84]	; 0x54
 8011598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801159a:	602f      	str	r7, [r5, #0]
 801159c:	2900      	cmp	r1, #0
 801159e:	d0ca      	beq.n	8011536 <__sflush_r+0x1a>
 80115a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115a4:	4299      	cmp	r1, r3
 80115a6:	d002      	beq.n	80115ae <__sflush_r+0x92>
 80115a8:	4628      	mov	r0, r5
 80115aa:	f7ff fdb7 	bl	801111c <_free_r>
 80115ae:	2000      	movs	r0, #0
 80115b0:	6360      	str	r0, [r4, #52]	; 0x34
 80115b2:	e7c1      	b.n	8011538 <__sflush_r+0x1c>
 80115b4:	6a21      	ldr	r1, [r4, #32]
 80115b6:	2301      	movs	r3, #1
 80115b8:	4628      	mov	r0, r5
 80115ba:	47b0      	blx	r6
 80115bc:	1c41      	adds	r1, r0, #1
 80115be:	d1c7      	bne.n	8011550 <__sflush_r+0x34>
 80115c0:	682b      	ldr	r3, [r5, #0]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d0c4      	beq.n	8011550 <__sflush_r+0x34>
 80115c6:	2b1d      	cmp	r3, #29
 80115c8:	d001      	beq.n	80115ce <__sflush_r+0xb2>
 80115ca:	2b16      	cmp	r3, #22
 80115cc:	d101      	bne.n	80115d2 <__sflush_r+0xb6>
 80115ce:	602f      	str	r7, [r5, #0]
 80115d0:	e7b1      	b.n	8011536 <__sflush_r+0x1a>
 80115d2:	89a3      	ldrh	r3, [r4, #12]
 80115d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115d8:	81a3      	strh	r3, [r4, #12]
 80115da:	e7ad      	b.n	8011538 <__sflush_r+0x1c>
 80115dc:	690f      	ldr	r7, [r1, #16]
 80115de:	2f00      	cmp	r7, #0
 80115e0:	d0a9      	beq.n	8011536 <__sflush_r+0x1a>
 80115e2:	0793      	lsls	r3, r2, #30
 80115e4:	680e      	ldr	r6, [r1, #0]
 80115e6:	bf08      	it	eq
 80115e8:	694b      	ldreq	r3, [r1, #20]
 80115ea:	600f      	str	r7, [r1, #0]
 80115ec:	bf18      	it	ne
 80115ee:	2300      	movne	r3, #0
 80115f0:	eba6 0807 	sub.w	r8, r6, r7
 80115f4:	608b      	str	r3, [r1, #8]
 80115f6:	f1b8 0f00 	cmp.w	r8, #0
 80115fa:	dd9c      	ble.n	8011536 <__sflush_r+0x1a>
 80115fc:	6a21      	ldr	r1, [r4, #32]
 80115fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011600:	4643      	mov	r3, r8
 8011602:	463a      	mov	r2, r7
 8011604:	4628      	mov	r0, r5
 8011606:	47b0      	blx	r6
 8011608:	2800      	cmp	r0, #0
 801160a:	dc06      	bgt.n	801161a <__sflush_r+0xfe>
 801160c:	89a3      	ldrh	r3, [r4, #12]
 801160e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011612:	81a3      	strh	r3, [r4, #12]
 8011614:	f04f 30ff 	mov.w	r0, #4294967295
 8011618:	e78e      	b.n	8011538 <__sflush_r+0x1c>
 801161a:	4407      	add	r7, r0
 801161c:	eba8 0800 	sub.w	r8, r8, r0
 8011620:	e7e9      	b.n	80115f6 <__sflush_r+0xda>
 8011622:	bf00      	nop
 8011624:	20400001 	.word	0x20400001

08011628 <_fflush_r>:
 8011628:	b538      	push	{r3, r4, r5, lr}
 801162a:	690b      	ldr	r3, [r1, #16]
 801162c:	4605      	mov	r5, r0
 801162e:	460c      	mov	r4, r1
 8011630:	b913      	cbnz	r3, 8011638 <_fflush_r+0x10>
 8011632:	2500      	movs	r5, #0
 8011634:	4628      	mov	r0, r5
 8011636:	bd38      	pop	{r3, r4, r5, pc}
 8011638:	b118      	cbz	r0, 8011642 <_fflush_r+0x1a>
 801163a:	6983      	ldr	r3, [r0, #24]
 801163c:	b90b      	cbnz	r3, 8011642 <_fflush_r+0x1a>
 801163e:	f7ff fc7f 	bl	8010f40 <__sinit>
 8011642:	4b14      	ldr	r3, [pc, #80]	; (8011694 <_fflush_r+0x6c>)
 8011644:	429c      	cmp	r4, r3
 8011646:	d11b      	bne.n	8011680 <_fflush_r+0x58>
 8011648:	686c      	ldr	r4, [r5, #4]
 801164a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d0ef      	beq.n	8011632 <_fflush_r+0xa>
 8011652:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011654:	07d0      	lsls	r0, r2, #31
 8011656:	d404      	bmi.n	8011662 <_fflush_r+0x3a>
 8011658:	0599      	lsls	r1, r3, #22
 801165a:	d402      	bmi.n	8011662 <_fflush_r+0x3a>
 801165c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801165e:	f7ef fb03 	bl	8000c68 <__retarget_lock_acquire_recursive>
 8011662:	4628      	mov	r0, r5
 8011664:	4621      	mov	r1, r4
 8011666:	f7ff ff59 	bl	801151c <__sflush_r>
 801166a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801166c:	07da      	lsls	r2, r3, #31
 801166e:	4605      	mov	r5, r0
 8011670:	d4e0      	bmi.n	8011634 <_fflush_r+0xc>
 8011672:	89a3      	ldrh	r3, [r4, #12]
 8011674:	059b      	lsls	r3, r3, #22
 8011676:	d4dd      	bmi.n	8011634 <_fflush_r+0xc>
 8011678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801167a:	f7ef fb09 	bl	8000c90 <__retarget_lock_release_recursive>
 801167e:	e7d9      	b.n	8011634 <_fflush_r+0xc>
 8011680:	4b05      	ldr	r3, [pc, #20]	; (8011698 <_fflush_r+0x70>)
 8011682:	429c      	cmp	r4, r3
 8011684:	d101      	bne.n	801168a <_fflush_r+0x62>
 8011686:	68ac      	ldr	r4, [r5, #8]
 8011688:	e7df      	b.n	801164a <_fflush_r+0x22>
 801168a:	4b04      	ldr	r3, [pc, #16]	; (801169c <_fflush_r+0x74>)
 801168c:	429c      	cmp	r4, r3
 801168e:	bf08      	it	eq
 8011690:	68ec      	ldreq	r4, [r5, #12]
 8011692:	e7da      	b.n	801164a <_fflush_r+0x22>
 8011694:	08014cf4 	.word	0x08014cf4
 8011698:	08014d14 	.word	0x08014d14
 801169c:	08014cd4 	.word	0x08014cd4

080116a0 <fiprintf>:
 80116a0:	b40e      	push	{r1, r2, r3}
 80116a2:	b503      	push	{r0, r1, lr}
 80116a4:	4601      	mov	r1, r0
 80116a6:	ab03      	add	r3, sp, #12
 80116a8:	4805      	ldr	r0, [pc, #20]	; (80116c0 <fiprintf+0x20>)
 80116aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80116ae:	6800      	ldr	r0, [r0, #0]
 80116b0:	9301      	str	r3, [sp, #4]
 80116b2:	f000 f84f 	bl	8011754 <_vfiprintf_r>
 80116b6:	b002      	add	sp, #8
 80116b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80116bc:	b003      	add	sp, #12
 80116be:	4770      	bx	lr
 80116c0:	2000001c 	.word	0x2000001c

080116c4 <_lseek_r>:
 80116c4:	b538      	push	{r3, r4, r5, lr}
 80116c6:	4d07      	ldr	r5, [pc, #28]	; (80116e4 <_lseek_r+0x20>)
 80116c8:	4604      	mov	r4, r0
 80116ca:	4608      	mov	r0, r1
 80116cc:	4611      	mov	r1, r2
 80116ce:	2200      	movs	r2, #0
 80116d0:	602a      	str	r2, [r5, #0]
 80116d2:	461a      	mov	r2, r3
 80116d4:	f7ef f9a6 	bl	8000a24 <_lseek>
 80116d8:	1c43      	adds	r3, r0, #1
 80116da:	d102      	bne.n	80116e2 <_lseek_r+0x1e>
 80116dc:	682b      	ldr	r3, [r5, #0]
 80116de:	b103      	cbz	r3, 80116e2 <_lseek_r+0x1e>
 80116e0:	6023      	str	r3, [r4, #0]
 80116e2:	bd38      	pop	{r3, r4, r5, pc}
 80116e4:	2000ab2c 	.word	0x2000ab2c

080116e8 <__malloc_lock>:
 80116e8:	4801      	ldr	r0, [pc, #4]	; (80116f0 <__malloc_lock+0x8>)
 80116ea:	f7ef babd 	b.w	8000c68 <__retarget_lock_acquire_recursive>
 80116ee:	bf00      	nop
 80116f0:	2000036c 	.word	0x2000036c

080116f4 <__malloc_unlock>:
 80116f4:	4801      	ldr	r0, [pc, #4]	; (80116fc <__malloc_unlock+0x8>)
 80116f6:	f7ef bacb 	b.w	8000c90 <__retarget_lock_release_recursive>
 80116fa:	bf00      	nop
 80116fc:	2000036c 	.word	0x2000036c

08011700 <__sfputc_r>:
 8011700:	6893      	ldr	r3, [r2, #8]
 8011702:	3b01      	subs	r3, #1
 8011704:	2b00      	cmp	r3, #0
 8011706:	b410      	push	{r4}
 8011708:	6093      	str	r3, [r2, #8]
 801170a:	da08      	bge.n	801171e <__sfputc_r+0x1e>
 801170c:	6994      	ldr	r4, [r2, #24]
 801170e:	42a3      	cmp	r3, r4
 8011710:	db01      	blt.n	8011716 <__sfputc_r+0x16>
 8011712:	290a      	cmp	r1, #10
 8011714:	d103      	bne.n	801171e <__sfputc_r+0x1e>
 8011716:	f85d 4b04 	ldr.w	r4, [sp], #4
 801171a:	f000 baf1 	b.w	8011d00 <__swbuf_r>
 801171e:	6813      	ldr	r3, [r2, #0]
 8011720:	1c58      	adds	r0, r3, #1
 8011722:	6010      	str	r0, [r2, #0]
 8011724:	7019      	strb	r1, [r3, #0]
 8011726:	4608      	mov	r0, r1
 8011728:	f85d 4b04 	ldr.w	r4, [sp], #4
 801172c:	4770      	bx	lr

0801172e <__sfputs_r>:
 801172e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011730:	4606      	mov	r6, r0
 8011732:	460f      	mov	r7, r1
 8011734:	4614      	mov	r4, r2
 8011736:	18d5      	adds	r5, r2, r3
 8011738:	42ac      	cmp	r4, r5
 801173a:	d101      	bne.n	8011740 <__sfputs_r+0x12>
 801173c:	2000      	movs	r0, #0
 801173e:	e007      	b.n	8011750 <__sfputs_r+0x22>
 8011740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011744:	463a      	mov	r2, r7
 8011746:	4630      	mov	r0, r6
 8011748:	f7ff ffda 	bl	8011700 <__sfputc_r>
 801174c:	1c43      	adds	r3, r0, #1
 801174e:	d1f3      	bne.n	8011738 <__sfputs_r+0xa>
 8011750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011754 <_vfiprintf_r>:
 8011754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011758:	460d      	mov	r5, r1
 801175a:	b09d      	sub	sp, #116	; 0x74
 801175c:	4614      	mov	r4, r2
 801175e:	4698      	mov	r8, r3
 8011760:	4606      	mov	r6, r0
 8011762:	b118      	cbz	r0, 801176c <_vfiprintf_r+0x18>
 8011764:	6983      	ldr	r3, [r0, #24]
 8011766:	b90b      	cbnz	r3, 801176c <_vfiprintf_r+0x18>
 8011768:	f7ff fbea 	bl	8010f40 <__sinit>
 801176c:	4b89      	ldr	r3, [pc, #548]	; (8011994 <_vfiprintf_r+0x240>)
 801176e:	429d      	cmp	r5, r3
 8011770:	d11b      	bne.n	80117aa <_vfiprintf_r+0x56>
 8011772:	6875      	ldr	r5, [r6, #4]
 8011774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011776:	07d9      	lsls	r1, r3, #31
 8011778:	d405      	bmi.n	8011786 <_vfiprintf_r+0x32>
 801177a:	89ab      	ldrh	r3, [r5, #12]
 801177c:	059a      	lsls	r2, r3, #22
 801177e:	d402      	bmi.n	8011786 <_vfiprintf_r+0x32>
 8011780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011782:	f7ef fa71 	bl	8000c68 <__retarget_lock_acquire_recursive>
 8011786:	89ab      	ldrh	r3, [r5, #12]
 8011788:	071b      	lsls	r3, r3, #28
 801178a:	d501      	bpl.n	8011790 <_vfiprintf_r+0x3c>
 801178c:	692b      	ldr	r3, [r5, #16]
 801178e:	b9eb      	cbnz	r3, 80117cc <_vfiprintf_r+0x78>
 8011790:	4629      	mov	r1, r5
 8011792:	4630      	mov	r0, r6
 8011794:	f000 fb06 	bl	8011da4 <__swsetup_r>
 8011798:	b1c0      	cbz	r0, 80117cc <_vfiprintf_r+0x78>
 801179a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801179c:	07dc      	lsls	r4, r3, #31
 801179e:	d50e      	bpl.n	80117be <_vfiprintf_r+0x6a>
 80117a0:	f04f 30ff 	mov.w	r0, #4294967295
 80117a4:	b01d      	add	sp, #116	; 0x74
 80117a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117aa:	4b7b      	ldr	r3, [pc, #492]	; (8011998 <_vfiprintf_r+0x244>)
 80117ac:	429d      	cmp	r5, r3
 80117ae:	d101      	bne.n	80117b4 <_vfiprintf_r+0x60>
 80117b0:	68b5      	ldr	r5, [r6, #8]
 80117b2:	e7df      	b.n	8011774 <_vfiprintf_r+0x20>
 80117b4:	4b79      	ldr	r3, [pc, #484]	; (801199c <_vfiprintf_r+0x248>)
 80117b6:	429d      	cmp	r5, r3
 80117b8:	bf08      	it	eq
 80117ba:	68f5      	ldreq	r5, [r6, #12]
 80117bc:	e7da      	b.n	8011774 <_vfiprintf_r+0x20>
 80117be:	89ab      	ldrh	r3, [r5, #12]
 80117c0:	0598      	lsls	r0, r3, #22
 80117c2:	d4ed      	bmi.n	80117a0 <_vfiprintf_r+0x4c>
 80117c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117c6:	f7ef fa63 	bl	8000c90 <__retarget_lock_release_recursive>
 80117ca:	e7e9      	b.n	80117a0 <_vfiprintf_r+0x4c>
 80117cc:	2300      	movs	r3, #0
 80117ce:	9309      	str	r3, [sp, #36]	; 0x24
 80117d0:	2320      	movs	r3, #32
 80117d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80117da:	2330      	movs	r3, #48	; 0x30
 80117dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80119a0 <_vfiprintf_r+0x24c>
 80117e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117e4:	f04f 0901 	mov.w	r9, #1
 80117e8:	4623      	mov	r3, r4
 80117ea:	469a      	mov	sl, r3
 80117ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117f0:	b10a      	cbz	r2, 80117f6 <_vfiprintf_r+0xa2>
 80117f2:	2a25      	cmp	r2, #37	; 0x25
 80117f4:	d1f9      	bne.n	80117ea <_vfiprintf_r+0x96>
 80117f6:	ebba 0b04 	subs.w	fp, sl, r4
 80117fa:	d00b      	beq.n	8011814 <_vfiprintf_r+0xc0>
 80117fc:	465b      	mov	r3, fp
 80117fe:	4622      	mov	r2, r4
 8011800:	4629      	mov	r1, r5
 8011802:	4630      	mov	r0, r6
 8011804:	f7ff ff93 	bl	801172e <__sfputs_r>
 8011808:	3001      	adds	r0, #1
 801180a:	f000 80aa 	beq.w	8011962 <_vfiprintf_r+0x20e>
 801180e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011810:	445a      	add	r2, fp
 8011812:	9209      	str	r2, [sp, #36]	; 0x24
 8011814:	f89a 3000 	ldrb.w	r3, [sl]
 8011818:	2b00      	cmp	r3, #0
 801181a:	f000 80a2 	beq.w	8011962 <_vfiprintf_r+0x20e>
 801181e:	2300      	movs	r3, #0
 8011820:	f04f 32ff 	mov.w	r2, #4294967295
 8011824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011828:	f10a 0a01 	add.w	sl, sl, #1
 801182c:	9304      	str	r3, [sp, #16]
 801182e:	9307      	str	r3, [sp, #28]
 8011830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011834:	931a      	str	r3, [sp, #104]	; 0x68
 8011836:	4654      	mov	r4, sl
 8011838:	2205      	movs	r2, #5
 801183a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801183e:	4858      	ldr	r0, [pc, #352]	; (80119a0 <_vfiprintf_r+0x24c>)
 8011840:	f7ee fcc6 	bl	80001d0 <memchr>
 8011844:	9a04      	ldr	r2, [sp, #16]
 8011846:	b9d8      	cbnz	r0, 8011880 <_vfiprintf_r+0x12c>
 8011848:	06d1      	lsls	r1, r2, #27
 801184a:	bf44      	itt	mi
 801184c:	2320      	movmi	r3, #32
 801184e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011852:	0713      	lsls	r3, r2, #28
 8011854:	bf44      	itt	mi
 8011856:	232b      	movmi	r3, #43	; 0x2b
 8011858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801185c:	f89a 3000 	ldrb.w	r3, [sl]
 8011860:	2b2a      	cmp	r3, #42	; 0x2a
 8011862:	d015      	beq.n	8011890 <_vfiprintf_r+0x13c>
 8011864:	9a07      	ldr	r2, [sp, #28]
 8011866:	4654      	mov	r4, sl
 8011868:	2000      	movs	r0, #0
 801186a:	f04f 0c0a 	mov.w	ip, #10
 801186e:	4621      	mov	r1, r4
 8011870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011874:	3b30      	subs	r3, #48	; 0x30
 8011876:	2b09      	cmp	r3, #9
 8011878:	d94e      	bls.n	8011918 <_vfiprintf_r+0x1c4>
 801187a:	b1b0      	cbz	r0, 80118aa <_vfiprintf_r+0x156>
 801187c:	9207      	str	r2, [sp, #28]
 801187e:	e014      	b.n	80118aa <_vfiprintf_r+0x156>
 8011880:	eba0 0308 	sub.w	r3, r0, r8
 8011884:	fa09 f303 	lsl.w	r3, r9, r3
 8011888:	4313      	orrs	r3, r2
 801188a:	9304      	str	r3, [sp, #16]
 801188c:	46a2      	mov	sl, r4
 801188e:	e7d2      	b.n	8011836 <_vfiprintf_r+0xe2>
 8011890:	9b03      	ldr	r3, [sp, #12]
 8011892:	1d19      	adds	r1, r3, #4
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	9103      	str	r1, [sp, #12]
 8011898:	2b00      	cmp	r3, #0
 801189a:	bfbb      	ittet	lt
 801189c:	425b      	neglt	r3, r3
 801189e:	f042 0202 	orrlt.w	r2, r2, #2
 80118a2:	9307      	strge	r3, [sp, #28]
 80118a4:	9307      	strlt	r3, [sp, #28]
 80118a6:	bfb8      	it	lt
 80118a8:	9204      	strlt	r2, [sp, #16]
 80118aa:	7823      	ldrb	r3, [r4, #0]
 80118ac:	2b2e      	cmp	r3, #46	; 0x2e
 80118ae:	d10c      	bne.n	80118ca <_vfiprintf_r+0x176>
 80118b0:	7863      	ldrb	r3, [r4, #1]
 80118b2:	2b2a      	cmp	r3, #42	; 0x2a
 80118b4:	d135      	bne.n	8011922 <_vfiprintf_r+0x1ce>
 80118b6:	9b03      	ldr	r3, [sp, #12]
 80118b8:	1d1a      	adds	r2, r3, #4
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	9203      	str	r2, [sp, #12]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	bfb8      	it	lt
 80118c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80118c6:	3402      	adds	r4, #2
 80118c8:	9305      	str	r3, [sp, #20]
 80118ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80119b0 <_vfiprintf_r+0x25c>
 80118ce:	7821      	ldrb	r1, [r4, #0]
 80118d0:	2203      	movs	r2, #3
 80118d2:	4650      	mov	r0, sl
 80118d4:	f7ee fc7c 	bl	80001d0 <memchr>
 80118d8:	b140      	cbz	r0, 80118ec <_vfiprintf_r+0x198>
 80118da:	2340      	movs	r3, #64	; 0x40
 80118dc:	eba0 000a 	sub.w	r0, r0, sl
 80118e0:	fa03 f000 	lsl.w	r0, r3, r0
 80118e4:	9b04      	ldr	r3, [sp, #16]
 80118e6:	4303      	orrs	r3, r0
 80118e8:	3401      	adds	r4, #1
 80118ea:	9304      	str	r3, [sp, #16]
 80118ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118f0:	482c      	ldr	r0, [pc, #176]	; (80119a4 <_vfiprintf_r+0x250>)
 80118f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118f6:	2206      	movs	r2, #6
 80118f8:	f7ee fc6a 	bl	80001d0 <memchr>
 80118fc:	2800      	cmp	r0, #0
 80118fe:	d03f      	beq.n	8011980 <_vfiprintf_r+0x22c>
 8011900:	4b29      	ldr	r3, [pc, #164]	; (80119a8 <_vfiprintf_r+0x254>)
 8011902:	bb1b      	cbnz	r3, 801194c <_vfiprintf_r+0x1f8>
 8011904:	9b03      	ldr	r3, [sp, #12]
 8011906:	3307      	adds	r3, #7
 8011908:	f023 0307 	bic.w	r3, r3, #7
 801190c:	3308      	adds	r3, #8
 801190e:	9303      	str	r3, [sp, #12]
 8011910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011912:	443b      	add	r3, r7
 8011914:	9309      	str	r3, [sp, #36]	; 0x24
 8011916:	e767      	b.n	80117e8 <_vfiprintf_r+0x94>
 8011918:	fb0c 3202 	mla	r2, ip, r2, r3
 801191c:	460c      	mov	r4, r1
 801191e:	2001      	movs	r0, #1
 8011920:	e7a5      	b.n	801186e <_vfiprintf_r+0x11a>
 8011922:	2300      	movs	r3, #0
 8011924:	3401      	adds	r4, #1
 8011926:	9305      	str	r3, [sp, #20]
 8011928:	4619      	mov	r1, r3
 801192a:	f04f 0c0a 	mov.w	ip, #10
 801192e:	4620      	mov	r0, r4
 8011930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011934:	3a30      	subs	r2, #48	; 0x30
 8011936:	2a09      	cmp	r2, #9
 8011938:	d903      	bls.n	8011942 <_vfiprintf_r+0x1ee>
 801193a:	2b00      	cmp	r3, #0
 801193c:	d0c5      	beq.n	80118ca <_vfiprintf_r+0x176>
 801193e:	9105      	str	r1, [sp, #20]
 8011940:	e7c3      	b.n	80118ca <_vfiprintf_r+0x176>
 8011942:	fb0c 2101 	mla	r1, ip, r1, r2
 8011946:	4604      	mov	r4, r0
 8011948:	2301      	movs	r3, #1
 801194a:	e7f0      	b.n	801192e <_vfiprintf_r+0x1da>
 801194c:	ab03      	add	r3, sp, #12
 801194e:	9300      	str	r3, [sp, #0]
 8011950:	462a      	mov	r2, r5
 8011952:	4b16      	ldr	r3, [pc, #88]	; (80119ac <_vfiprintf_r+0x258>)
 8011954:	a904      	add	r1, sp, #16
 8011956:	4630      	mov	r0, r6
 8011958:	f3af 8000 	nop.w
 801195c:	4607      	mov	r7, r0
 801195e:	1c78      	adds	r0, r7, #1
 8011960:	d1d6      	bne.n	8011910 <_vfiprintf_r+0x1bc>
 8011962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011964:	07d9      	lsls	r1, r3, #31
 8011966:	d405      	bmi.n	8011974 <_vfiprintf_r+0x220>
 8011968:	89ab      	ldrh	r3, [r5, #12]
 801196a:	059a      	lsls	r2, r3, #22
 801196c:	d402      	bmi.n	8011974 <_vfiprintf_r+0x220>
 801196e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011970:	f7ef f98e 	bl	8000c90 <__retarget_lock_release_recursive>
 8011974:	89ab      	ldrh	r3, [r5, #12]
 8011976:	065b      	lsls	r3, r3, #25
 8011978:	f53f af12 	bmi.w	80117a0 <_vfiprintf_r+0x4c>
 801197c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801197e:	e711      	b.n	80117a4 <_vfiprintf_r+0x50>
 8011980:	ab03      	add	r3, sp, #12
 8011982:	9300      	str	r3, [sp, #0]
 8011984:	462a      	mov	r2, r5
 8011986:	4b09      	ldr	r3, [pc, #36]	; (80119ac <_vfiprintf_r+0x258>)
 8011988:	a904      	add	r1, sp, #16
 801198a:	4630      	mov	r0, r6
 801198c:	f000 f880 	bl	8011a90 <_printf_i>
 8011990:	e7e4      	b.n	801195c <_vfiprintf_r+0x208>
 8011992:	bf00      	nop
 8011994:	08014cf4 	.word	0x08014cf4
 8011998:	08014d14 	.word	0x08014d14
 801199c:	08014cd4 	.word	0x08014cd4
 80119a0:	08014dea 	.word	0x08014dea
 80119a4:	08014df4 	.word	0x08014df4
 80119a8:	00000000 	.word	0x00000000
 80119ac:	0801172f 	.word	0x0801172f
 80119b0:	08014df0 	.word	0x08014df0

080119b4 <_printf_common>:
 80119b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119b8:	4616      	mov	r6, r2
 80119ba:	4699      	mov	r9, r3
 80119bc:	688a      	ldr	r2, [r1, #8]
 80119be:	690b      	ldr	r3, [r1, #16]
 80119c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80119c4:	4293      	cmp	r3, r2
 80119c6:	bfb8      	it	lt
 80119c8:	4613      	movlt	r3, r2
 80119ca:	6033      	str	r3, [r6, #0]
 80119cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80119d0:	4607      	mov	r7, r0
 80119d2:	460c      	mov	r4, r1
 80119d4:	b10a      	cbz	r2, 80119da <_printf_common+0x26>
 80119d6:	3301      	adds	r3, #1
 80119d8:	6033      	str	r3, [r6, #0]
 80119da:	6823      	ldr	r3, [r4, #0]
 80119dc:	0699      	lsls	r1, r3, #26
 80119de:	bf42      	ittt	mi
 80119e0:	6833      	ldrmi	r3, [r6, #0]
 80119e2:	3302      	addmi	r3, #2
 80119e4:	6033      	strmi	r3, [r6, #0]
 80119e6:	6825      	ldr	r5, [r4, #0]
 80119e8:	f015 0506 	ands.w	r5, r5, #6
 80119ec:	d106      	bne.n	80119fc <_printf_common+0x48>
 80119ee:	f104 0a19 	add.w	sl, r4, #25
 80119f2:	68e3      	ldr	r3, [r4, #12]
 80119f4:	6832      	ldr	r2, [r6, #0]
 80119f6:	1a9b      	subs	r3, r3, r2
 80119f8:	42ab      	cmp	r3, r5
 80119fa:	dc26      	bgt.n	8011a4a <_printf_common+0x96>
 80119fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011a00:	1e13      	subs	r3, r2, #0
 8011a02:	6822      	ldr	r2, [r4, #0]
 8011a04:	bf18      	it	ne
 8011a06:	2301      	movne	r3, #1
 8011a08:	0692      	lsls	r2, r2, #26
 8011a0a:	d42b      	bmi.n	8011a64 <_printf_common+0xb0>
 8011a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011a10:	4649      	mov	r1, r9
 8011a12:	4638      	mov	r0, r7
 8011a14:	47c0      	blx	r8
 8011a16:	3001      	adds	r0, #1
 8011a18:	d01e      	beq.n	8011a58 <_printf_common+0xa4>
 8011a1a:	6823      	ldr	r3, [r4, #0]
 8011a1c:	68e5      	ldr	r5, [r4, #12]
 8011a1e:	6832      	ldr	r2, [r6, #0]
 8011a20:	f003 0306 	and.w	r3, r3, #6
 8011a24:	2b04      	cmp	r3, #4
 8011a26:	bf08      	it	eq
 8011a28:	1aad      	subeq	r5, r5, r2
 8011a2a:	68a3      	ldr	r3, [r4, #8]
 8011a2c:	6922      	ldr	r2, [r4, #16]
 8011a2e:	bf0c      	ite	eq
 8011a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a34:	2500      	movne	r5, #0
 8011a36:	4293      	cmp	r3, r2
 8011a38:	bfc4      	itt	gt
 8011a3a:	1a9b      	subgt	r3, r3, r2
 8011a3c:	18ed      	addgt	r5, r5, r3
 8011a3e:	2600      	movs	r6, #0
 8011a40:	341a      	adds	r4, #26
 8011a42:	42b5      	cmp	r5, r6
 8011a44:	d11a      	bne.n	8011a7c <_printf_common+0xc8>
 8011a46:	2000      	movs	r0, #0
 8011a48:	e008      	b.n	8011a5c <_printf_common+0xa8>
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	4652      	mov	r2, sl
 8011a4e:	4649      	mov	r1, r9
 8011a50:	4638      	mov	r0, r7
 8011a52:	47c0      	blx	r8
 8011a54:	3001      	adds	r0, #1
 8011a56:	d103      	bne.n	8011a60 <_printf_common+0xac>
 8011a58:	f04f 30ff 	mov.w	r0, #4294967295
 8011a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a60:	3501      	adds	r5, #1
 8011a62:	e7c6      	b.n	80119f2 <_printf_common+0x3e>
 8011a64:	18e1      	adds	r1, r4, r3
 8011a66:	1c5a      	adds	r2, r3, #1
 8011a68:	2030      	movs	r0, #48	; 0x30
 8011a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011a6e:	4422      	add	r2, r4
 8011a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011a78:	3302      	adds	r3, #2
 8011a7a:	e7c7      	b.n	8011a0c <_printf_common+0x58>
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	4622      	mov	r2, r4
 8011a80:	4649      	mov	r1, r9
 8011a82:	4638      	mov	r0, r7
 8011a84:	47c0      	blx	r8
 8011a86:	3001      	adds	r0, #1
 8011a88:	d0e6      	beq.n	8011a58 <_printf_common+0xa4>
 8011a8a:	3601      	adds	r6, #1
 8011a8c:	e7d9      	b.n	8011a42 <_printf_common+0x8e>
	...

08011a90 <_printf_i>:
 8011a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a94:	460c      	mov	r4, r1
 8011a96:	4691      	mov	r9, r2
 8011a98:	7e27      	ldrb	r7, [r4, #24]
 8011a9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011a9c:	2f78      	cmp	r7, #120	; 0x78
 8011a9e:	4680      	mov	r8, r0
 8011aa0:	469a      	mov	sl, r3
 8011aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011aa6:	d807      	bhi.n	8011ab8 <_printf_i+0x28>
 8011aa8:	2f62      	cmp	r7, #98	; 0x62
 8011aaa:	d80a      	bhi.n	8011ac2 <_printf_i+0x32>
 8011aac:	2f00      	cmp	r7, #0
 8011aae:	f000 80d8 	beq.w	8011c62 <_printf_i+0x1d2>
 8011ab2:	2f58      	cmp	r7, #88	; 0x58
 8011ab4:	f000 80a3 	beq.w	8011bfe <_printf_i+0x16e>
 8011ab8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ac0:	e03a      	b.n	8011b38 <_printf_i+0xa8>
 8011ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ac6:	2b15      	cmp	r3, #21
 8011ac8:	d8f6      	bhi.n	8011ab8 <_printf_i+0x28>
 8011aca:	a001      	add	r0, pc, #4	; (adr r0, 8011ad0 <_printf_i+0x40>)
 8011acc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011ad0:	08011b29 	.word	0x08011b29
 8011ad4:	08011b3d 	.word	0x08011b3d
 8011ad8:	08011ab9 	.word	0x08011ab9
 8011adc:	08011ab9 	.word	0x08011ab9
 8011ae0:	08011ab9 	.word	0x08011ab9
 8011ae4:	08011ab9 	.word	0x08011ab9
 8011ae8:	08011b3d 	.word	0x08011b3d
 8011aec:	08011ab9 	.word	0x08011ab9
 8011af0:	08011ab9 	.word	0x08011ab9
 8011af4:	08011ab9 	.word	0x08011ab9
 8011af8:	08011ab9 	.word	0x08011ab9
 8011afc:	08011c49 	.word	0x08011c49
 8011b00:	08011b6d 	.word	0x08011b6d
 8011b04:	08011c2b 	.word	0x08011c2b
 8011b08:	08011ab9 	.word	0x08011ab9
 8011b0c:	08011ab9 	.word	0x08011ab9
 8011b10:	08011c6b 	.word	0x08011c6b
 8011b14:	08011ab9 	.word	0x08011ab9
 8011b18:	08011b6d 	.word	0x08011b6d
 8011b1c:	08011ab9 	.word	0x08011ab9
 8011b20:	08011ab9 	.word	0x08011ab9
 8011b24:	08011c33 	.word	0x08011c33
 8011b28:	680b      	ldr	r3, [r1, #0]
 8011b2a:	1d1a      	adds	r2, r3, #4
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	600a      	str	r2, [r1, #0]
 8011b30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011b38:	2301      	movs	r3, #1
 8011b3a:	e0a3      	b.n	8011c84 <_printf_i+0x1f4>
 8011b3c:	6825      	ldr	r5, [r4, #0]
 8011b3e:	6808      	ldr	r0, [r1, #0]
 8011b40:	062e      	lsls	r6, r5, #24
 8011b42:	f100 0304 	add.w	r3, r0, #4
 8011b46:	d50a      	bpl.n	8011b5e <_printf_i+0xce>
 8011b48:	6805      	ldr	r5, [r0, #0]
 8011b4a:	600b      	str	r3, [r1, #0]
 8011b4c:	2d00      	cmp	r5, #0
 8011b4e:	da03      	bge.n	8011b58 <_printf_i+0xc8>
 8011b50:	232d      	movs	r3, #45	; 0x2d
 8011b52:	426d      	negs	r5, r5
 8011b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b58:	485e      	ldr	r0, [pc, #376]	; (8011cd4 <_printf_i+0x244>)
 8011b5a:	230a      	movs	r3, #10
 8011b5c:	e019      	b.n	8011b92 <_printf_i+0x102>
 8011b5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011b62:	6805      	ldr	r5, [r0, #0]
 8011b64:	600b      	str	r3, [r1, #0]
 8011b66:	bf18      	it	ne
 8011b68:	b22d      	sxthne	r5, r5
 8011b6a:	e7ef      	b.n	8011b4c <_printf_i+0xbc>
 8011b6c:	680b      	ldr	r3, [r1, #0]
 8011b6e:	6825      	ldr	r5, [r4, #0]
 8011b70:	1d18      	adds	r0, r3, #4
 8011b72:	6008      	str	r0, [r1, #0]
 8011b74:	0628      	lsls	r0, r5, #24
 8011b76:	d501      	bpl.n	8011b7c <_printf_i+0xec>
 8011b78:	681d      	ldr	r5, [r3, #0]
 8011b7a:	e002      	b.n	8011b82 <_printf_i+0xf2>
 8011b7c:	0669      	lsls	r1, r5, #25
 8011b7e:	d5fb      	bpl.n	8011b78 <_printf_i+0xe8>
 8011b80:	881d      	ldrh	r5, [r3, #0]
 8011b82:	4854      	ldr	r0, [pc, #336]	; (8011cd4 <_printf_i+0x244>)
 8011b84:	2f6f      	cmp	r7, #111	; 0x6f
 8011b86:	bf0c      	ite	eq
 8011b88:	2308      	moveq	r3, #8
 8011b8a:	230a      	movne	r3, #10
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011b92:	6866      	ldr	r6, [r4, #4]
 8011b94:	60a6      	str	r6, [r4, #8]
 8011b96:	2e00      	cmp	r6, #0
 8011b98:	bfa2      	ittt	ge
 8011b9a:	6821      	ldrge	r1, [r4, #0]
 8011b9c:	f021 0104 	bicge.w	r1, r1, #4
 8011ba0:	6021      	strge	r1, [r4, #0]
 8011ba2:	b90d      	cbnz	r5, 8011ba8 <_printf_i+0x118>
 8011ba4:	2e00      	cmp	r6, #0
 8011ba6:	d04d      	beq.n	8011c44 <_printf_i+0x1b4>
 8011ba8:	4616      	mov	r6, r2
 8011baa:	fbb5 f1f3 	udiv	r1, r5, r3
 8011bae:	fb03 5711 	mls	r7, r3, r1, r5
 8011bb2:	5dc7      	ldrb	r7, [r0, r7]
 8011bb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011bb8:	462f      	mov	r7, r5
 8011bba:	42bb      	cmp	r3, r7
 8011bbc:	460d      	mov	r5, r1
 8011bbe:	d9f4      	bls.n	8011baa <_printf_i+0x11a>
 8011bc0:	2b08      	cmp	r3, #8
 8011bc2:	d10b      	bne.n	8011bdc <_printf_i+0x14c>
 8011bc4:	6823      	ldr	r3, [r4, #0]
 8011bc6:	07df      	lsls	r7, r3, #31
 8011bc8:	d508      	bpl.n	8011bdc <_printf_i+0x14c>
 8011bca:	6923      	ldr	r3, [r4, #16]
 8011bcc:	6861      	ldr	r1, [r4, #4]
 8011bce:	4299      	cmp	r1, r3
 8011bd0:	bfde      	ittt	le
 8011bd2:	2330      	movle	r3, #48	; 0x30
 8011bd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011bd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011bdc:	1b92      	subs	r2, r2, r6
 8011bde:	6122      	str	r2, [r4, #16]
 8011be0:	f8cd a000 	str.w	sl, [sp]
 8011be4:	464b      	mov	r3, r9
 8011be6:	aa03      	add	r2, sp, #12
 8011be8:	4621      	mov	r1, r4
 8011bea:	4640      	mov	r0, r8
 8011bec:	f7ff fee2 	bl	80119b4 <_printf_common>
 8011bf0:	3001      	adds	r0, #1
 8011bf2:	d14c      	bne.n	8011c8e <_printf_i+0x1fe>
 8011bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8011bf8:	b004      	add	sp, #16
 8011bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bfe:	4835      	ldr	r0, [pc, #212]	; (8011cd4 <_printf_i+0x244>)
 8011c00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011c04:	6823      	ldr	r3, [r4, #0]
 8011c06:	680e      	ldr	r6, [r1, #0]
 8011c08:	061f      	lsls	r7, r3, #24
 8011c0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8011c0e:	600e      	str	r6, [r1, #0]
 8011c10:	d514      	bpl.n	8011c3c <_printf_i+0x1ac>
 8011c12:	07d9      	lsls	r1, r3, #31
 8011c14:	bf44      	itt	mi
 8011c16:	f043 0320 	orrmi.w	r3, r3, #32
 8011c1a:	6023      	strmi	r3, [r4, #0]
 8011c1c:	b91d      	cbnz	r5, 8011c26 <_printf_i+0x196>
 8011c1e:	6823      	ldr	r3, [r4, #0]
 8011c20:	f023 0320 	bic.w	r3, r3, #32
 8011c24:	6023      	str	r3, [r4, #0]
 8011c26:	2310      	movs	r3, #16
 8011c28:	e7b0      	b.n	8011b8c <_printf_i+0xfc>
 8011c2a:	6823      	ldr	r3, [r4, #0]
 8011c2c:	f043 0320 	orr.w	r3, r3, #32
 8011c30:	6023      	str	r3, [r4, #0]
 8011c32:	2378      	movs	r3, #120	; 0x78
 8011c34:	4828      	ldr	r0, [pc, #160]	; (8011cd8 <_printf_i+0x248>)
 8011c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c3a:	e7e3      	b.n	8011c04 <_printf_i+0x174>
 8011c3c:	065e      	lsls	r6, r3, #25
 8011c3e:	bf48      	it	mi
 8011c40:	b2ad      	uxthmi	r5, r5
 8011c42:	e7e6      	b.n	8011c12 <_printf_i+0x182>
 8011c44:	4616      	mov	r6, r2
 8011c46:	e7bb      	b.n	8011bc0 <_printf_i+0x130>
 8011c48:	680b      	ldr	r3, [r1, #0]
 8011c4a:	6826      	ldr	r6, [r4, #0]
 8011c4c:	6960      	ldr	r0, [r4, #20]
 8011c4e:	1d1d      	adds	r5, r3, #4
 8011c50:	600d      	str	r5, [r1, #0]
 8011c52:	0635      	lsls	r5, r6, #24
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	d501      	bpl.n	8011c5c <_printf_i+0x1cc>
 8011c58:	6018      	str	r0, [r3, #0]
 8011c5a:	e002      	b.n	8011c62 <_printf_i+0x1d2>
 8011c5c:	0671      	lsls	r1, r6, #25
 8011c5e:	d5fb      	bpl.n	8011c58 <_printf_i+0x1c8>
 8011c60:	8018      	strh	r0, [r3, #0]
 8011c62:	2300      	movs	r3, #0
 8011c64:	6123      	str	r3, [r4, #16]
 8011c66:	4616      	mov	r6, r2
 8011c68:	e7ba      	b.n	8011be0 <_printf_i+0x150>
 8011c6a:	680b      	ldr	r3, [r1, #0]
 8011c6c:	1d1a      	adds	r2, r3, #4
 8011c6e:	600a      	str	r2, [r1, #0]
 8011c70:	681e      	ldr	r6, [r3, #0]
 8011c72:	6862      	ldr	r2, [r4, #4]
 8011c74:	2100      	movs	r1, #0
 8011c76:	4630      	mov	r0, r6
 8011c78:	f7ee faaa 	bl	80001d0 <memchr>
 8011c7c:	b108      	cbz	r0, 8011c82 <_printf_i+0x1f2>
 8011c7e:	1b80      	subs	r0, r0, r6
 8011c80:	6060      	str	r0, [r4, #4]
 8011c82:	6863      	ldr	r3, [r4, #4]
 8011c84:	6123      	str	r3, [r4, #16]
 8011c86:	2300      	movs	r3, #0
 8011c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c8c:	e7a8      	b.n	8011be0 <_printf_i+0x150>
 8011c8e:	6923      	ldr	r3, [r4, #16]
 8011c90:	4632      	mov	r2, r6
 8011c92:	4649      	mov	r1, r9
 8011c94:	4640      	mov	r0, r8
 8011c96:	47d0      	blx	sl
 8011c98:	3001      	adds	r0, #1
 8011c9a:	d0ab      	beq.n	8011bf4 <_printf_i+0x164>
 8011c9c:	6823      	ldr	r3, [r4, #0]
 8011c9e:	079b      	lsls	r3, r3, #30
 8011ca0:	d413      	bmi.n	8011cca <_printf_i+0x23a>
 8011ca2:	68e0      	ldr	r0, [r4, #12]
 8011ca4:	9b03      	ldr	r3, [sp, #12]
 8011ca6:	4298      	cmp	r0, r3
 8011ca8:	bfb8      	it	lt
 8011caa:	4618      	movlt	r0, r3
 8011cac:	e7a4      	b.n	8011bf8 <_printf_i+0x168>
 8011cae:	2301      	movs	r3, #1
 8011cb0:	4632      	mov	r2, r6
 8011cb2:	4649      	mov	r1, r9
 8011cb4:	4640      	mov	r0, r8
 8011cb6:	47d0      	blx	sl
 8011cb8:	3001      	adds	r0, #1
 8011cba:	d09b      	beq.n	8011bf4 <_printf_i+0x164>
 8011cbc:	3501      	adds	r5, #1
 8011cbe:	68e3      	ldr	r3, [r4, #12]
 8011cc0:	9903      	ldr	r1, [sp, #12]
 8011cc2:	1a5b      	subs	r3, r3, r1
 8011cc4:	42ab      	cmp	r3, r5
 8011cc6:	dcf2      	bgt.n	8011cae <_printf_i+0x21e>
 8011cc8:	e7eb      	b.n	8011ca2 <_printf_i+0x212>
 8011cca:	2500      	movs	r5, #0
 8011ccc:	f104 0619 	add.w	r6, r4, #25
 8011cd0:	e7f5      	b.n	8011cbe <_printf_i+0x22e>
 8011cd2:	bf00      	nop
 8011cd4:	08014dfb 	.word	0x08014dfb
 8011cd8:	08014e0c 	.word	0x08014e0c

08011cdc <_read_r>:
 8011cdc:	b538      	push	{r3, r4, r5, lr}
 8011cde:	4d07      	ldr	r5, [pc, #28]	; (8011cfc <_read_r+0x20>)
 8011ce0:	4604      	mov	r4, r0
 8011ce2:	4608      	mov	r0, r1
 8011ce4:	4611      	mov	r1, r2
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	602a      	str	r2, [r5, #0]
 8011cea:	461a      	mov	r2, r3
 8011cec:	f7ee fe3a 	bl	8000964 <_read>
 8011cf0:	1c43      	adds	r3, r0, #1
 8011cf2:	d102      	bne.n	8011cfa <_read_r+0x1e>
 8011cf4:	682b      	ldr	r3, [r5, #0]
 8011cf6:	b103      	cbz	r3, 8011cfa <_read_r+0x1e>
 8011cf8:	6023      	str	r3, [r4, #0]
 8011cfa:	bd38      	pop	{r3, r4, r5, pc}
 8011cfc:	2000ab2c 	.word	0x2000ab2c

08011d00 <__swbuf_r>:
 8011d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d02:	460e      	mov	r6, r1
 8011d04:	4614      	mov	r4, r2
 8011d06:	4605      	mov	r5, r0
 8011d08:	b118      	cbz	r0, 8011d12 <__swbuf_r+0x12>
 8011d0a:	6983      	ldr	r3, [r0, #24]
 8011d0c:	b90b      	cbnz	r3, 8011d12 <__swbuf_r+0x12>
 8011d0e:	f7ff f917 	bl	8010f40 <__sinit>
 8011d12:	4b21      	ldr	r3, [pc, #132]	; (8011d98 <__swbuf_r+0x98>)
 8011d14:	429c      	cmp	r4, r3
 8011d16:	d12b      	bne.n	8011d70 <__swbuf_r+0x70>
 8011d18:	686c      	ldr	r4, [r5, #4]
 8011d1a:	69a3      	ldr	r3, [r4, #24]
 8011d1c:	60a3      	str	r3, [r4, #8]
 8011d1e:	89a3      	ldrh	r3, [r4, #12]
 8011d20:	071a      	lsls	r2, r3, #28
 8011d22:	d52f      	bpl.n	8011d84 <__swbuf_r+0x84>
 8011d24:	6923      	ldr	r3, [r4, #16]
 8011d26:	b36b      	cbz	r3, 8011d84 <__swbuf_r+0x84>
 8011d28:	6923      	ldr	r3, [r4, #16]
 8011d2a:	6820      	ldr	r0, [r4, #0]
 8011d2c:	1ac0      	subs	r0, r0, r3
 8011d2e:	6963      	ldr	r3, [r4, #20]
 8011d30:	b2f6      	uxtb	r6, r6
 8011d32:	4283      	cmp	r3, r0
 8011d34:	4637      	mov	r7, r6
 8011d36:	dc04      	bgt.n	8011d42 <__swbuf_r+0x42>
 8011d38:	4621      	mov	r1, r4
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	f7ff fc74 	bl	8011628 <_fflush_r>
 8011d40:	bb30      	cbnz	r0, 8011d90 <__swbuf_r+0x90>
 8011d42:	68a3      	ldr	r3, [r4, #8]
 8011d44:	3b01      	subs	r3, #1
 8011d46:	60a3      	str	r3, [r4, #8]
 8011d48:	6823      	ldr	r3, [r4, #0]
 8011d4a:	1c5a      	adds	r2, r3, #1
 8011d4c:	6022      	str	r2, [r4, #0]
 8011d4e:	701e      	strb	r6, [r3, #0]
 8011d50:	6963      	ldr	r3, [r4, #20]
 8011d52:	3001      	adds	r0, #1
 8011d54:	4283      	cmp	r3, r0
 8011d56:	d004      	beq.n	8011d62 <__swbuf_r+0x62>
 8011d58:	89a3      	ldrh	r3, [r4, #12]
 8011d5a:	07db      	lsls	r3, r3, #31
 8011d5c:	d506      	bpl.n	8011d6c <__swbuf_r+0x6c>
 8011d5e:	2e0a      	cmp	r6, #10
 8011d60:	d104      	bne.n	8011d6c <__swbuf_r+0x6c>
 8011d62:	4621      	mov	r1, r4
 8011d64:	4628      	mov	r0, r5
 8011d66:	f7ff fc5f 	bl	8011628 <_fflush_r>
 8011d6a:	b988      	cbnz	r0, 8011d90 <__swbuf_r+0x90>
 8011d6c:	4638      	mov	r0, r7
 8011d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d70:	4b0a      	ldr	r3, [pc, #40]	; (8011d9c <__swbuf_r+0x9c>)
 8011d72:	429c      	cmp	r4, r3
 8011d74:	d101      	bne.n	8011d7a <__swbuf_r+0x7a>
 8011d76:	68ac      	ldr	r4, [r5, #8]
 8011d78:	e7cf      	b.n	8011d1a <__swbuf_r+0x1a>
 8011d7a:	4b09      	ldr	r3, [pc, #36]	; (8011da0 <__swbuf_r+0xa0>)
 8011d7c:	429c      	cmp	r4, r3
 8011d7e:	bf08      	it	eq
 8011d80:	68ec      	ldreq	r4, [r5, #12]
 8011d82:	e7ca      	b.n	8011d1a <__swbuf_r+0x1a>
 8011d84:	4621      	mov	r1, r4
 8011d86:	4628      	mov	r0, r5
 8011d88:	f000 f80c 	bl	8011da4 <__swsetup_r>
 8011d8c:	2800      	cmp	r0, #0
 8011d8e:	d0cb      	beq.n	8011d28 <__swbuf_r+0x28>
 8011d90:	f04f 37ff 	mov.w	r7, #4294967295
 8011d94:	e7ea      	b.n	8011d6c <__swbuf_r+0x6c>
 8011d96:	bf00      	nop
 8011d98:	08014cf4 	.word	0x08014cf4
 8011d9c:	08014d14 	.word	0x08014d14
 8011da0:	08014cd4 	.word	0x08014cd4

08011da4 <__swsetup_r>:
 8011da4:	4b32      	ldr	r3, [pc, #200]	; (8011e70 <__swsetup_r+0xcc>)
 8011da6:	b570      	push	{r4, r5, r6, lr}
 8011da8:	681d      	ldr	r5, [r3, #0]
 8011daa:	4606      	mov	r6, r0
 8011dac:	460c      	mov	r4, r1
 8011dae:	b125      	cbz	r5, 8011dba <__swsetup_r+0x16>
 8011db0:	69ab      	ldr	r3, [r5, #24]
 8011db2:	b913      	cbnz	r3, 8011dba <__swsetup_r+0x16>
 8011db4:	4628      	mov	r0, r5
 8011db6:	f7ff f8c3 	bl	8010f40 <__sinit>
 8011dba:	4b2e      	ldr	r3, [pc, #184]	; (8011e74 <__swsetup_r+0xd0>)
 8011dbc:	429c      	cmp	r4, r3
 8011dbe:	d10f      	bne.n	8011de0 <__swsetup_r+0x3c>
 8011dc0:	686c      	ldr	r4, [r5, #4]
 8011dc2:	89a3      	ldrh	r3, [r4, #12]
 8011dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011dc8:	0719      	lsls	r1, r3, #28
 8011dca:	d42c      	bmi.n	8011e26 <__swsetup_r+0x82>
 8011dcc:	06dd      	lsls	r5, r3, #27
 8011dce:	d411      	bmi.n	8011df4 <__swsetup_r+0x50>
 8011dd0:	2309      	movs	r3, #9
 8011dd2:	6033      	str	r3, [r6, #0]
 8011dd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011dd8:	81a3      	strh	r3, [r4, #12]
 8011dda:	f04f 30ff 	mov.w	r0, #4294967295
 8011dde:	e03e      	b.n	8011e5e <__swsetup_r+0xba>
 8011de0:	4b25      	ldr	r3, [pc, #148]	; (8011e78 <__swsetup_r+0xd4>)
 8011de2:	429c      	cmp	r4, r3
 8011de4:	d101      	bne.n	8011dea <__swsetup_r+0x46>
 8011de6:	68ac      	ldr	r4, [r5, #8]
 8011de8:	e7eb      	b.n	8011dc2 <__swsetup_r+0x1e>
 8011dea:	4b24      	ldr	r3, [pc, #144]	; (8011e7c <__swsetup_r+0xd8>)
 8011dec:	429c      	cmp	r4, r3
 8011dee:	bf08      	it	eq
 8011df0:	68ec      	ldreq	r4, [r5, #12]
 8011df2:	e7e6      	b.n	8011dc2 <__swsetup_r+0x1e>
 8011df4:	0758      	lsls	r0, r3, #29
 8011df6:	d512      	bpl.n	8011e1e <__swsetup_r+0x7a>
 8011df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011dfa:	b141      	cbz	r1, 8011e0e <__swsetup_r+0x6a>
 8011dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e00:	4299      	cmp	r1, r3
 8011e02:	d002      	beq.n	8011e0a <__swsetup_r+0x66>
 8011e04:	4630      	mov	r0, r6
 8011e06:	f7ff f989 	bl	801111c <_free_r>
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8011e0e:	89a3      	ldrh	r3, [r4, #12]
 8011e10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011e14:	81a3      	strh	r3, [r4, #12]
 8011e16:	2300      	movs	r3, #0
 8011e18:	6063      	str	r3, [r4, #4]
 8011e1a:	6923      	ldr	r3, [r4, #16]
 8011e1c:	6023      	str	r3, [r4, #0]
 8011e1e:	89a3      	ldrh	r3, [r4, #12]
 8011e20:	f043 0308 	orr.w	r3, r3, #8
 8011e24:	81a3      	strh	r3, [r4, #12]
 8011e26:	6923      	ldr	r3, [r4, #16]
 8011e28:	b94b      	cbnz	r3, 8011e3e <__swsetup_r+0x9a>
 8011e2a:	89a3      	ldrh	r3, [r4, #12]
 8011e2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e34:	d003      	beq.n	8011e3e <__swsetup_r+0x9a>
 8011e36:	4621      	mov	r1, r4
 8011e38:	4630      	mov	r0, r6
 8011e3a:	f000 f84d 	bl	8011ed8 <__smakebuf_r>
 8011e3e:	89a0      	ldrh	r0, [r4, #12]
 8011e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e44:	f010 0301 	ands.w	r3, r0, #1
 8011e48:	d00a      	beq.n	8011e60 <__swsetup_r+0xbc>
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	60a3      	str	r3, [r4, #8]
 8011e4e:	6963      	ldr	r3, [r4, #20]
 8011e50:	425b      	negs	r3, r3
 8011e52:	61a3      	str	r3, [r4, #24]
 8011e54:	6923      	ldr	r3, [r4, #16]
 8011e56:	b943      	cbnz	r3, 8011e6a <__swsetup_r+0xc6>
 8011e58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011e5c:	d1ba      	bne.n	8011dd4 <__swsetup_r+0x30>
 8011e5e:	bd70      	pop	{r4, r5, r6, pc}
 8011e60:	0781      	lsls	r1, r0, #30
 8011e62:	bf58      	it	pl
 8011e64:	6963      	ldrpl	r3, [r4, #20]
 8011e66:	60a3      	str	r3, [r4, #8]
 8011e68:	e7f4      	b.n	8011e54 <__swsetup_r+0xb0>
 8011e6a:	2000      	movs	r0, #0
 8011e6c:	e7f7      	b.n	8011e5e <__swsetup_r+0xba>
 8011e6e:	bf00      	nop
 8011e70:	2000001c 	.word	0x2000001c
 8011e74:	08014cf4 	.word	0x08014cf4
 8011e78:	08014d14 	.word	0x08014d14
 8011e7c:	08014cd4 	.word	0x08014cd4

08011e80 <abort>:
 8011e80:	b508      	push	{r3, lr}
 8011e82:	2006      	movs	r0, #6
 8011e84:	f000 f890 	bl	8011fa8 <raise>
 8011e88:	2001      	movs	r0, #1
 8011e8a:	f7ee fd61 	bl	8000950 <_exit>

08011e8e <__swhatbuf_r>:
 8011e8e:	b570      	push	{r4, r5, r6, lr}
 8011e90:	460e      	mov	r6, r1
 8011e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e96:	2900      	cmp	r1, #0
 8011e98:	b096      	sub	sp, #88	; 0x58
 8011e9a:	4614      	mov	r4, r2
 8011e9c:	461d      	mov	r5, r3
 8011e9e:	da07      	bge.n	8011eb0 <__swhatbuf_r+0x22>
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	602b      	str	r3, [r5, #0]
 8011ea4:	89b3      	ldrh	r3, [r6, #12]
 8011ea6:	061a      	lsls	r2, r3, #24
 8011ea8:	d410      	bmi.n	8011ecc <__swhatbuf_r+0x3e>
 8011eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011eae:	e00e      	b.n	8011ece <__swhatbuf_r+0x40>
 8011eb0:	466a      	mov	r2, sp
 8011eb2:	f000 f895 	bl	8011fe0 <_fstat_r>
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	dbf2      	blt.n	8011ea0 <__swhatbuf_r+0x12>
 8011eba:	9a01      	ldr	r2, [sp, #4]
 8011ebc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011ec0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011ec4:	425a      	negs	r2, r3
 8011ec6:	415a      	adcs	r2, r3
 8011ec8:	602a      	str	r2, [r5, #0]
 8011eca:	e7ee      	b.n	8011eaa <__swhatbuf_r+0x1c>
 8011ecc:	2340      	movs	r3, #64	; 0x40
 8011ece:	2000      	movs	r0, #0
 8011ed0:	6023      	str	r3, [r4, #0]
 8011ed2:	b016      	add	sp, #88	; 0x58
 8011ed4:	bd70      	pop	{r4, r5, r6, pc}
	...

08011ed8 <__smakebuf_r>:
 8011ed8:	898b      	ldrh	r3, [r1, #12]
 8011eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011edc:	079d      	lsls	r5, r3, #30
 8011ede:	4606      	mov	r6, r0
 8011ee0:	460c      	mov	r4, r1
 8011ee2:	d507      	bpl.n	8011ef4 <__smakebuf_r+0x1c>
 8011ee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ee8:	6023      	str	r3, [r4, #0]
 8011eea:	6123      	str	r3, [r4, #16]
 8011eec:	2301      	movs	r3, #1
 8011eee:	6163      	str	r3, [r4, #20]
 8011ef0:	b002      	add	sp, #8
 8011ef2:	bd70      	pop	{r4, r5, r6, pc}
 8011ef4:	ab01      	add	r3, sp, #4
 8011ef6:	466a      	mov	r2, sp
 8011ef8:	f7ff ffc9 	bl	8011e8e <__swhatbuf_r>
 8011efc:	9900      	ldr	r1, [sp, #0]
 8011efe:	4605      	mov	r5, r0
 8011f00:	4630      	mov	r0, r6
 8011f02:	f7ff f95b 	bl	80111bc <_malloc_r>
 8011f06:	b948      	cbnz	r0, 8011f1c <__smakebuf_r+0x44>
 8011f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f0c:	059a      	lsls	r2, r3, #22
 8011f0e:	d4ef      	bmi.n	8011ef0 <__smakebuf_r+0x18>
 8011f10:	f023 0303 	bic.w	r3, r3, #3
 8011f14:	f043 0302 	orr.w	r3, r3, #2
 8011f18:	81a3      	strh	r3, [r4, #12]
 8011f1a:	e7e3      	b.n	8011ee4 <__smakebuf_r+0xc>
 8011f1c:	4b0d      	ldr	r3, [pc, #52]	; (8011f54 <__smakebuf_r+0x7c>)
 8011f1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011f20:	89a3      	ldrh	r3, [r4, #12]
 8011f22:	6020      	str	r0, [r4, #0]
 8011f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f28:	81a3      	strh	r3, [r4, #12]
 8011f2a:	9b00      	ldr	r3, [sp, #0]
 8011f2c:	6163      	str	r3, [r4, #20]
 8011f2e:	9b01      	ldr	r3, [sp, #4]
 8011f30:	6120      	str	r0, [r4, #16]
 8011f32:	b15b      	cbz	r3, 8011f4c <__smakebuf_r+0x74>
 8011f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f38:	4630      	mov	r0, r6
 8011f3a:	f000 f863 	bl	8012004 <_isatty_r>
 8011f3e:	b128      	cbz	r0, 8011f4c <__smakebuf_r+0x74>
 8011f40:	89a3      	ldrh	r3, [r4, #12]
 8011f42:	f023 0303 	bic.w	r3, r3, #3
 8011f46:	f043 0301 	orr.w	r3, r3, #1
 8011f4a:	81a3      	strh	r3, [r4, #12]
 8011f4c:	89a0      	ldrh	r0, [r4, #12]
 8011f4e:	4305      	orrs	r5, r0
 8011f50:	81a5      	strh	r5, [r4, #12]
 8011f52:	e7cd      	b.n	8011ef0 <__smakebuf_r+0x18>
 8011f54:	08010ed9 	.word	0x08010ed9

08011f58 <_raise_r>:
 8011f58:	291f      	cmp	r1, #31
 8011f5a:	b538      	push	{r3, r4, r5, lr}
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	460d      	mov	r5, r1
 8011f60:	d904      	bls.n	8011f6c <_raise_r+0x14>
 8011f62:	2316      	movs	r3, #22
 8011f64:	6003      	str	r3, [r0, #0]
 8011f66:	f04f 30ff 	mov.w	r0, #4294967295
 8011f6a:	bd38      	pop	{r3, r4, r5, pc}
 8011f6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011f6e:	b112      	cbz	r2, 8011f76 <_raise_r+0x1e>
 8011f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f74:	b94b      	cbnz	r3, 8011f8a <_raise_r+0x32>
 8011f76:	4620      	mov	r0, r4
 8011f78:	f000 f830 	bl	8011fdc <_getpid_r>
 8011f7c:	462a      	mov	r2, r5
 8011f7e:	4601      	mov	r1, r0
 8011f80:	4620      	mov	r0, r4
 8011f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f86:	f000 b817 	b.w	8011fb8 <_kill_r>
 8011f8a:	2b01      	cmp	r3, #1
 8011f8c:	d00a      	beq.n	8011fa4 <_raise_r+0x4c>
 8011f8e:	1c59      	adds	r1, r3, #1
 8011f90:	d103      	bne.n	8011f9a <_raise_r+0x42>
 8011f92:	2316      	movs	r3, #22
 8011f94:	6003      	str	r3, [r0, #0]
 8011f96:	2001      	movs	r0, #1
 8011f98:	e7e7      	b.n	8011f6a <_raise_r+0x12>
 8011f9a:	2400      	movs	r4, #0
 8011f9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011fa0:	4628      	mov	r0, r5
 8011fa2:	4798      	blx	r3
 8011fa4:	2000      	movs	r0, #0
 8011fa6:	e7e0      	b.n	8011f6a <_raise_r+0x12>

08011fa8 <raise>:
 8011fa8:	4b02      	ldr	r3, [pc, #8]	; (8011fb4 <raise+0xc>)
 8011faa:	4601      	mov	r1, r0
 8011fac:	6818      	ldr	r0, [r3, #0]
 8011fae:	f7ff bfd3 	b.w	8011f58 <_raise_r>
 8011fb2:	bf00      	nop
 8011fb4:	2000001c 	.word	0x2000001c

08011fb8 <_kill_r>:
 8011fb8:	b538      	push	{r3, r4, r5, lr}
 8011fba:	4d07      	ldr	r5, [pc, #28]	; (8011fd8 <_kill_r+0x20>)
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	4604      	mov	r4, r0
 8011fc0:	4608      	mov	r0, r1
 8011fc2:	4611      	mov	r1, r2
 8011fc4:	602b      	str	r3, [r5, #0]
 8011fc6:	f7ee fcb1 	bl	800092c <_kill>
 8011fca:	1c43      	adds	r3, r0, #1
 8011fcc:	d102      	bne.n	8011fd4 <_kill_r+0x1c>
 8011fce:	682b      	ldr	r3, [r5, #0]
 8011fd0:	b103      	cbz	r3, 8011fd4 <_kill_r+0x1c>
 8011fd2:	6023      	str	r3, [r4, #0]
 8011fd4:	bd38      	pop	{r3, r4, r5, pc}
 8011fd6:	bf00      	nop
 8011fd8:	2000ab2c 	.word	0x2000ab2c

08011fdc <_getpid_r>:
 8011fdc:	f7ee bc9e 	b.w	800091c <_getpid>

08011fe0 <_fstat_r>:
 8011fe0:	b538      	push	{r3, r4, r5, lr}
 8011fe2:	4d07      	ldr	r5, [pc, #28]	; (8012000 <_fstat_r+0x20>)
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	4608      	mov	r0, r1
 8011fea:	4611      	mov	r1, r2
 8011fec:	602b      	str	r3, [r5, #0]
 8011fee:	f7ee fcfe 	bl	80009ee <_fstat>
 8011ff2:	1c43      	adds	r3, r0, #1
 8011ff4:	d102      	bne.n	8011ffc <_fstat_r+0x1c>
 8011ff6:	682b      	ldr	r3, [r5, #0]
 8011ff8:	b103      	cbz	r3, 8011ffc <_fstat_r+0x1c>
 8011ffa:	6023      	str	r3, [r4, #0]
 8011ffc:	bd38      	pop	{r3, r4, r5, pc}
 8011ffe:	bf00      	nop
 8012000:	2000ab2c 	.word	0x2000ab2c

08012004 <_isatty_r>:
 8012004:	b538      	push	{r3, r4, r5, lr}
 8012006:	4d06      	ldr	r5, [pc, #24]	; (8012020 <_isatty_r+0x1c>)
 8012008:	2300      	movs	r3, #0
 801200a:	4604      	mov	r4, r0
 801200c:	4608      	mov	r0, r1
 801200e:	602b      	str	r3, [r5, #0]
 8012010:	f7ee fcfd 	bl	8000a0e <_isatty>
 8012014:	1c43      	adds	r3, r0, #1
 8012016:	d102      	bne.n	801201e <_isatty_r+0x1a>
 8012018:	682b      	ldr	r3, [r5, #0]
 801201a:	b103      	cbz	r3, 801201e <_isatty_r+0x1a>
 801201c:	6023      	str	r3, [r4, #0]
 801201e:	bd38      	pop	{r3, r4, r5, pc}
 8012020:	2000ab2c 	.word	0x2000ab2c

08012024 <_init>:
 8012024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012026:	bf00      	nop
 8012028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801202a:	bc08      	pop	{r3}
 801202c:	469e      	mov	lr, r3
 801202e:	4770      	bx	lr

08012030 <_fini>:
 8012030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012032:	bf00      	nop
 8012034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012036:	bc08      	pop	{r3}
 8012038:	469e      	mov	lr, r3
 801203a:	4770      	bx	lr
